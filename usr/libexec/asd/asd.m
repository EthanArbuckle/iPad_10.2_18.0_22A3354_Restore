void sub_100008440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_100008474(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorDomain"));

    if (v6 == v7)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v8, "code");
    else
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 174001;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_100009804(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000098A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000098B4(uint64_t a1)
{

}

id sub_1000098BC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "evaluateWithObject:", a2);
}

void sub_1000098C8(id a1, BPSCompletion *a2)
{
  -[BPSCompletion state](a2, "state");
}

BOOL sub_1000098D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL8 v18;

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 168))
  {
    v5 = 0;
    while (1)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v5));
      v7 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
      if (v6 == (void *)v7)
        break;
      v8 = (void *)v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v5));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

      if (v9 != v10)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v5));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "expressionValueWithObject:context:", v3, 0));
        if (v6)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v5));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v12);

        }
        goto LABEL_8;
      }
LABEL_9:
      if (++v5 >= (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 168))
        goto LABEL_10;
    }
    v11 = v6;
LABEL_8:

    goto LABEL_9;
  }
LABEL_10:
  v13 = *(unsigned __int8 *)(a1 + 72);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v4));
  if (v13)
    objc_msgSend(v14, "insertObject:atIndex:", v15, 0);
  else
    objc_msgSend(v14, "addObject:", v15);

  v16 = *(_QWORD *)(a1 + 64);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v17 = *(_DWORD *)(v16 + 12);
  if (v17)
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) < v17;
  else
    v18 = 1;

  return v18;
}

void sub_10000A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A13C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000A14C(uint64_t a1)
{

}

void sub_10000A154(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;

  v5 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = v5;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v7 = &__NSArray0__struct;
  else
    v7 = v5;
  v8 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v7;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10000A258(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  const char *v15;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (!a1)
    return 4294940294;
  v2 = objc_msgSend(objc_alloc((Class)MAAssetQuery), "initWithType:", CFSTR("com.apple.MobileAsset.CoreAS"));
  objc_msgSend(v2, "setDoNotBlockBeforeFirstUnlock:", 1);
  if (objc_msgSend(v2, "queryMetaDataSync"))
  {
    v3 = 4294967284;
  }
  else
  {
    v17 = v2;
    v18 = a1;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "results"));
    v5 = malloc_type_malloc(8 * (_QWORD)objc_msgSend(v4, "count"), 0x10040436913F5uLL);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v20;
      v3 = 4294967284;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v6);
          v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v12, "state") == (id)2)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "getLocalUrl"));
            v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "path")));
            v15 = (const char *)objc_msgSend(v14, "UTF8String");

            if (v15)
            {
              v3 = 0;
              v5[v9++] = strdup(v15);
            }
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
      v3 = 4294967284;
    }

    *(_QWORD *)v18 = v5;
    *(_DWORD *)(v18 + 8) = v9;

    v2 = v17;
  }

  return v3;
}

uint64_t sub_10000A44C(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;

  if (a1)
  {
    v2 = *(void **)a1;
    if (v2)
    {
      v3 = *(_DWORD *)(a1 + 8);
      if ((v3 & 0x80000000) == 0)
      {
        if (v3)
        {
          v4 = 0;
          do
          {
            free(*(void **)(*(_QWORD *)a1 + 8 * v4));
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v4++) = 0;
          }
          while (v4 < *(int *)(a1 + 8));
          v2 = *(void **)a1;
        }
        free(v2);
      }
    }
  }
  return 0;
}

void sub_10000A4B4()
{
  if (qword_100511530 != -1)
    dispatch_once(&qword_100511530, &stru_1004CE6E0);
}

void sub_10000A4DC(id a1)
{
  NSObject *v1;

  v1 = dispatch_queue_create("com.apple.asd.maqueue", 0);
  dispatch_async(v1, &stru_1004CE700);

}

void sub_10000A518(id a1)
{
  id v1;

  v1 = objc_alloc_init((Class)MADownloadOptions);
  objc_msgSend(v1, "setDiscretionary:", 1);
  objc_msgSend(v1, "setRequiresPowerPluggedIn:", 1);
  objc_msgSend(v1, "setAllowsExpensiveAccess:", 0);
  +[MAAsset startCatalogDownload:options:then:](MAAsset, "startCatalogDownload:options:then:", CFSTR("com.apple.MobileAsset.CoreAS"), v1, &stru_1004CE740);

}

void sub_10000A584(id a1, int64_t a2)
{
  NSObject *v3;
  int v4;
  int64_t v5;

  v3 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    v4 = 134349056;
    v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "MA catalog download return %{public}ld", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_10000A624(int a1, unsigned int a2, int a3)
{
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  unsigned int v12;

  v5 = a3 == 2;
  if ((a2 & 4) != 0 && !a3)
    v5 = MKBGetDeviceLockState(0) == 1;
  if ((a2 & 1) != 0)
    v6 = 1;
  else
    v6 = a1 & (a2 >> 1);
  if ((a2 & 8) != 0)
    v7 = 1;
  else
    v7 = (a1 ^ 1) & (a2 >> 4);
  if ((v6 & v7 & 1) != 0)
    return 3;
  v8 = v5 & (a2 >> 2);
  v9 = v7 | v6 ^ 1;
  if ((v9 & 1) == 0 && v8 == 1)
    return 3;
  v11 = v6 | v7 | v8;
  if (v9 | v8)
    v12 = 1;
  else
    v12 = 2;
  if (v11 == 1)
    return v12;
  else
    return 0;
}

void sub_10000B378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B3AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000B3BC(uint64_t a1)
{

}

void sub_10000B3C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 232), 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_10000BAD4(uint64_t a1, int a2)
{
  NSObject *v2;
  id v3;
  __int128 v4;
  _QWORD block[4];
  __int128 v6;
  int v7;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000BB58;
  block[3] = &unk_1004CE790;
  v7 = a2;
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  dispatch_async(v2, block);

}

void sub_10000BB58(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)*(int *)(a1 + 48);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000BB74(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v4;
  __int128 v5;
  _QWORD block[4];
  __int128 v7;
  int v8;

  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000BBF8;
  block[3] = &unk_1004CE790;
  v8 = a3;
  v5 = *(_OWORD *)(a1 + 40);
  v4 = (id)v5;
  v7 = v5;
  dispatch_async(v3, block);

}

void sub_10000BBF8(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)*(int *)(a1 + 48);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000BC14(uint64_t a1, uint64_t a2, int a3)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000BC2C(uint64_t a1, int a2)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BF94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000BFA4(uint64_t a1)
{

}

void sub_10000BFAC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_10000D578(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return _objc_msgSend(*(id *)(a1 + 32), "f9MGfLOgnHPuKTrU:HY6FXG20397zwmVg:", &__NSDictionary0__struct, &stru_1004CE848);
}

int64_t sub_10000D5B8(id a1)
{
  return 0;
}

uint64_t sub_10000D5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000D5D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000D5E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000D5F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10000D8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[QwDGuEabMS2vnWkj wrongXPCParameterError](QwDGuEabMS2vnWkj, "wrongXPCParameterError"));
    (*(void (**)(uint64_t, _QWORD, id))(v3 + 16))(v3, 0, v4);

  }
  else
  {
    (*(void (**)(_QWORD))(v3 + 16))(*(_QWORD *)(a1 + 32));
  }
}

void sub_10000DA4C(id a1)
{
  EvuyxgzfZZU4un3X *v1;
  void *v2;

  v1 = objc_opt_new(EvuyxgzfZZU4un3X);
  v2 = (void *)qword_100511538;
  qword_100511538 = (uint64_t)v1;

}

void sub_10000DCD8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_10000DD10(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  int v6;
  id v7;
  __int16 v8;
  unsigned int v9;

  v2 = (void *)qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    v3 = v2;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = WeakRetained;
    v6 = 134349312;
    v7 = WeakRetained;
    v8 = 1026;
    v9 = objc_msgSend(v5, "processIdentifier");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "asd (%{public}p:%{public}d): connection invalidated", (uint8_t *)&v6, 0x12u);

  }
}

void sub_10000DDF4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  int v6;
  id v7;
  __int16 v8;
  unsigned int v9;

  v2 = (void *)qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    v3 = v2;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = WeakRetained;
    v6 = 134349312;
    v7 = WeakRetained;
    v8 = 1026;
    v9 = objc_msgSend(v5, "processIdentifier");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "asd (%{public}p:%{public}d): connection interrupted", (uint8_t *)&v6, 0x12u);

  }
}

void sub_10000E0C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10000E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E504(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000E514(uint64_t a1)
{

}

void sub_10000E51C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t sub_10000EBE8(void **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, int *a6)
{
  os_signpost_id_t v10;
  NSObject *v11;
  NSObject *v12;
  eTBtehykeBvfpeTP *v13;
  os_signpost_id_t v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  void *v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  void *v37;
  double v38;
  double v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  int v57;
  os_signpost_id_t spid;
  unint64_t v60;
  void *v61;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  int v67;

  v10 = os_signpost_id_generate((os_log_t)qword_1005185E0);
  v11 = (id)qword_1005185E0;
  v12 = v11;
  v60 = v10 - 1;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v10, "psla", "enableTelemetry=YES", buf, 2u);
  }
  spid = v10;

  qsort(a1[1], *(unsigned int *)a1, 0x1B8uLL, (int (__cdecl *)(const void *, const void *))sub_10000F1C0);
  v13 = -[eTBtehykeBvfpeTP initWithdEyUJuqYjUufZYGN:CYjHC6NGGdOD33W9:g8citQiyynNCr9c4:]([eTBtehykeBvfpeTP alloc], "initWithdEyUJuqYjUufZYGN:CYjHC6NGGdOD33W9:g8citQiyynNCr9c4:", a2, a3, a1);
  v14 = os_signpost_id_generate((os_log_t)qword_1005185E0);
  v15 = (id)qword_1005185E0;
  v16 = v15;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "lcpwf", "enableTelemetry=YES", buf, 2u);
  }

  v17 = *(unsigned int *)a1;
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 8;
    do
    {
      if (*(_DWORD *)((char *)a1[1] + v19) == 4)
      {
        +[XxyDq1mpwtvCuJnm x7PkBasAKbApbiZS:](XxyDq1mpwtvCuJnm, "x7PkBasAKbApbiZS:");
        v17 = *(unsigned int *)a1;
      }
      ++v18;
      v19 += 440;
    }
    while (v18 < v17);
  }
  v20 = (id)qword_1005185E0;
  v21 = v20;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v22 = *a6;
    *(_DWORD *)buf = 67240448;
    v65 = v22;
    v66 = 1026;
    v67 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v14, "lcpwf", "p=%{public,signpost.telemetry:number1}d, i=%{public,signpost.telemetry:number2}d", buf, 0xEu);
  }

  v23 = *((unsigned int *)a1 + 4);
  *a5 = v23;
  v24 = (char *)malloc_type_malloc(24 * v23, 0x10000400CE834B2uLL);
  *a4 = v24;
  if (*a5)
  {
    v25 = 0;
    v26 = v24 + 16;
    do
    {
      *v26 = 132;
      *((_QWORD *)v26 - 2) = 1111638594;
      ++v25;
      v26 += 6;
    }
    while (v25 < *a5);
  }
  v61 = objc_autoreleasePoolPush();
  if (*(_DWORD *)a1)
  {
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *(unsigned int *)((char *)a1[1] + v27);
      v30 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP i4KDOQicW9Xd5WBz](v13, "i4KDOQicW9Xd5WBz"));
      v31 = objc_msgSend(v30, "count");

      if ((unint64_t)v31 <= v29)
        break;
      a6[1] = *(_DWORD *)((char *)a1[1] + v27);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v33 = (char *)a1[1] + v27;
      v35 = *((_DWORD *)v33 + 2);
      v34 = v33 + 8;
      if (v35 == 4 || *(uint64_t *)((char *)a1[1] + v27 + 24) <= 0)
        v36 = objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP PLMCCRRqEw4moT9R:UtPlzRffoEpw7Ue1:SFkZRA5Ek9YzhDRs:TWWnmIjkBlMfHmma:](v13, "PLMCCRRqEw4moT9R:UtPlzRffoEpw7Ue1:SFkZRA5Ek9YzhDRs:TWWnmIjkBlMfHmma:", v34, a6, *((unsigned int *)a1 + 12), &__NSArray0__struct));
      else
        v36 = objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP yVPDC4E5nNW5DSMa:UtPlzRffoEpw7Ue1:SFkZRA5Ek9YzhDRs:TWWnmIjkBlMfHmma:](v13, "yVPDC4E5nNW5DSMa:UtPlzRffoEpw7Ue1:SFkZRA5Ek9YzhDRs:TWWnmIjkBlMfHmma:", v34, a6, *((unsigned int *)a1 + 12), &__NSArray0__struct));
      v37 = (void *)v36;
      objc_msgSend(v32, "timeIntervalSinceNow");
      v39 = v38;
      v40 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP i4KDOQicW9Xd5WBz](v13, "i4KDOQicW9Xd5WBz"));
      v41 = v40;
      if (v37)
      {
        objc_msgSend(v40, "insertObject:atIndex:", v37, *(unsigned int *)((char *)a1[1] + v27));
      }
      else
      {
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[kjAS9HuCdR1m5txL cR9LfsxC1Nz4IZKu](kjAS9HuCdR1m5txL, "cR9LfsxC1Nz4IZKu"));
        objc_msgSend(v41, "insertObject:atIndex:", v42, *(unsigned int *)((char *)a1[1] + v27));

      }
      v43 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP i4KDOQicW9Xd5WBz](v13, "i4KDOQicW9Xd5WBz"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectAtIndexedSubscript:", *(unsigned int *)((char *)a1[1] + v27)));

      objc_msgSend(v44, "setYOtBxuHAYKqZrNQN:", (uint64_t)(v39 * -1000.0));
      ++v28;
      v27 += 440;
      if (v28 >= *(unsigned int *)a1)
        goto LABEL_29;
    }
    v54 = 4294939489;
  }
  else
  {
LABEL_29:
    if (*a5)
    {
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v47 = (unsigned int *)((char *)a1[3] + v45);
        v48 = *v47;
        if (v48 >= *((_DWORD *)a1 + 4))
          break;
        v49 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP i4KDOQicW9Xd5WBz](v13, "i4KDOQicW9Xd5WBz"));
        -[eTBtehykeBvfpeTP KKbGrSwDukIWFRjI:i4KDOQicW9Xd5WBz:TWWnmIjkBlMfHmma:](v13, "KKbGrSwDukIWFRjI:i4KDOQicW9Xd5WBz:TWWnmIjkBlMfHmma:", v47, v49, &__NSArray0__struct);

        v50 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP Uh5ScKFVtUOjeURk](v13, "Uh5ScKFVtUOjeURk"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectAtIndexedSubscript:", v48));
        *(_QWORD *)(*a4 + 24 * v48) = objc_msgSend(v51, "longLongValue");

        v52 = (void *)objc_claimAutoreleasedReturnValue(-[eTBtehykeBvfpeTP qnmnskUkG0QuvlrL](v13, "qnmnskUkG0QuvlrL"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectAtIndexedSubscript:", v48));
        *(_DWORD *)(*a4 + 24 * v48 + 16) = objc_msgSend(v53, "intValue");

        ++v46;
        v45 += 160;
        if (v46 >= *a5)
          goto LABEL_33;
      }
      v54 = 4294939491;
    }
    else
    {
LABEL_33:
      v54 = 0;
    }
  }
  objc_autoreleasePoolPop(v61);
  v55 = (id)qword_1005185E0;
  v56 = v55;
  if (v60 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v55))
  {
    v57 = *a6;
    *(_DWORD *)buf = 67240448;
    v65 = v57;
    v66 = 1026;
    v67 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, OS_SIGNPOST_INTERVAL_END, spid, "psla", "p=%{public,signpost.telemetry:number1}d, i=%{public,signpost.telemetry:number2}d", buf, 0xEu);
  }

  return v54;
}

uint64_t sub_10000F1C0(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void sub_10000FCA8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10000FD2C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100511548;
  qword_100511548 = (uint64_t)v1;

}

void sub_10000FEC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100010E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010E6C(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "L2S3goqpYnHiXTRg:", objc_msgSend(a2, "code"));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000122B8()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  objc_end_catch();
  JUMPOUT(0x100012478);
}

void sub_1000122C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  JUMPOUT(0x100012514);
}

void sub_100012384()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  JUMPOUT(0x100012520);
}

void sub_100012390()
{
  JUMPOUT(0x1000124D8);
}

void sub_10001239C()
{
  char v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if ((v0 & 1) != 0)
    objc_end_catch();

  JUMPOUT(0x100012478);
}

void sub_1000123F8()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  JUMPOUT(0x100012478);
}

void sub_100012404()
{
  void *v0;

  JUMPOUT(0x10001250CLL);
}

void sub_100012414()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  JUMPOUT(0x100012478);
}

void sub_100012424()
{
  JUMPOUT(0x10001250CLL);
}

void sub_10001242C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  JUMPOUT(0x100012478);
}

void sub_100012440()
{
  int v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (v0)
    objc_end_catch();

  JUMPOUT(0x100012478);
}

void sub_1000124B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_1000124C0()
{
  JUMPOUT(0x1000124CCLL);
}

void sub_1000124EC()
{
  JUMPOUT(0x100012520);
}

void sub_1000124FC()
{
  JUMPOUT(0x100012504);
}

void sub_100012934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100012B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100012CD8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  int v13;
  int v14;
  id v15;
  int v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v9 = a2;
  v10 = a3;
  v11 = v10;
  if (a6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v12 = objc_retainAutorelease(v10);
    sub_1003AAB10((uint64_t)objc_msgSend(v12, "bytes"), (uint64_t)objc_msgSend(v12, "length"), (uint64_t)&v24);
    v14 = v13;
    v15 = objc_retainAutorelease(v9);
    sub_1003AAB10((uint64_t)objc_msgSend(v15, "bytes"), (uint64_t)objc_msgSend(v15, "length"), (uint64_t)&v23);
    if (!(v14 | v16) && v24 && v23)
    {
      v17 = objc_alloc((Class)NSData);
      v18 = objc_msgSend(v17, "initWithBytes:length:", v24, objc_msgSend(v12, "length"));
      v19 = objc_alloc((Class)NSData);
      v20 = objc_msgSend(v19, "initWithBytes:length:", v23, objc_msgSend(v15, "length"));
      v21 = 0;
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503178, v23));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v22, -27827, 0));

      v20 = 0;
      v18 = 0;
    }
    free(v24);
    free(v23);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_1000132C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000132FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001330C(uint64_t a1)
{

}

void sub_100013314(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v6 = a3;
  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorDomain"));

    if (v7 == v8)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v6, "code");
    else
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 174001;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1000139F0(id a1, NSNumber *a2, NSError *a3)
{
  NSNumber *v4;
  NSError *v5;
  void *v6;

  v4 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D6FBC(v6);
  }

}

void sub_100013C7C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id sub_100013C9C(id a1)
{
  return a1;
}

uint64_t sub_100013CA4()
{
  uint64_t v0;

  return v0;
}

void sub_1000148E0(void *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BYTE v19[208];

  if (a2 == 1)
  {
    v9 = objc_begin_catch(a1);
    v10 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_FAULT))
      sub_1003D70BC((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16);
    *(_QWORD *)(v6 - 136) = 170001;

    objc_end_catch();
    JUMPOUT(0x100014748);
  }

  _Block_object_dispose(v19, 8);
  JUMPOUT(0x100014990);
}

uint64_t sub_100014998(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000149A8(uint64_t a1)
{

}

void sub_1000149B0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100014B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100014CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100014CDC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t sub_100014CF4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(a1 + 16))(a1, &unk_1003FE088, 18213);
}

void sub_100014D7C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100511558;
  qword_100511558 = (uint64_t)v1;

}

void sub_100014E54(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[XxyDq1mpwtvCuJnm sharedInstance](XxyDq1mpwtvCuJnm, "sharedInstance"));
  *(CLLocationAccuracy *)v11 = kCLLocationAccuracyBestForNavigation;
  *(CLLocationAccuracy *)&v11[1] = kCLLocationAccuracyBest;
  *(CLLocationAccuracy *)&v11[2] = kCLLocationAccuracyNearestTenMeters;
  *(CLLocationAccuracy *)&v11[3] = kCLLocationAccuracyHundredMeters;
  *(CLLocationAccuracy *)&v11[4] = kCLLocationAccuracyKilometer;
  *(CLLocationAccuracy *)&v11[5] = kCLLocationAccuracyThreeKilometers;
  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 4) & 0xFFFFFFFE) == 4)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[eTBtehykeBvfpeTP rsNB9HkZVEH0l6fT:gsx0MJUoOpcxcozG:](eTBtehykeBvfpeTP, "rsNB9HkZVEH0l6fT:gsx0MJUoOpcxcozG:", *(_QWORD *)(v3 + 24), *(unsigned int *)(v3 + 32)));
    objc_msgSend(v2, "initLocationManager:dko5Pwm7el1Ulopu:", v4, *(double *)&v11[*(unsigned int *)(*(_QWORD *)(a1 + 32) + 36)]);
    do
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 0.03));
      objc_msgSend(v5, "runUntilDate:", v6);

      objc_msgSend(v10, "timeIntervalSinceNow");
      v8 = v7;
    }
    while ((objc_msgSend(v2, "LjU00AjDrcTJbVJD") & 1) == 0 && v8 > -0.8);
    if ((int)objc_msgSend(v2, "YGGzx6XAo42A7s6x") >= 3)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "N8Azi3NI6QrNPsLP"));
      objc_msgSend(v9, "requestLocation");

    }
    v2 = 0;
  }

}

void sub_10001509C(id a1)
{
  XxyDq1mpwtvCuJnm *v1;
  void *v2;

  v1 = objc_opt_new(XxyDq1mpwtvCuJnm);
  v2 = (void *)qword_100511568;
  qword_100511568 = (uint64_t)v1;

}

id sub_100015B34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "initLocationManager:dko5Pwm7el1Ulopu:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_100016428(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100511570;
  qword_100511570 = (uint64_t)v1;

}

void sub_100016CA8(id a1)
{
  PpfPBg3wyAI0Wjzf *v1;
  void *v2;

  v1 = objc_opt_new(PpfPBg3wyAI0Wjzf);
  v2 = (void *)qword_100511580;
  qword_100511580 = (uint64_t)v1;

}

void sub_100016F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100016F80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100016F90(uint64_t a1)
{

}

void sub_100016F98(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = v5;
  if (!a3)
  {
    v15 = 0;
    v16 = 0;
    v7 = objc_msgSend(v5, "getCryptogram:challengeResponse:", &v16, &v15);
    v8 = v16;
    v9 = v16;
    v10 = v15;
    v11 = v15;
    if (v7)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v10);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v8);
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialNumber"));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

    }
  }
  objc_msgSend(v6, "endSession");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_100017710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001772C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001773C(uint64_t a1)
{

}

void sub_100017744(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100017B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100017B90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100017BA0(uint64_t a1)
{

}

void sub_100017BA8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_100017E00(id a1)
{
  ASCoreDataManager *v1;
  void *v2;

  v1 = -[ASCoreDataManager initWithStore:]([ASCoreDataManager alloc], "initWithStore:", CFSTR("Model56902430i"));
  v2 = (void *)qword_100511590;
  qword_100511590 = (uint64_t)v1;

}

void sub_100018674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_100018858(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "code") == (id)259 || objc_msgSend(v5, "code") == (id)26)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v6 = qword_1005185D0;
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
        sub_1003D7440(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D73E0();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }

}

void sub_100018914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100018B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_100018E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100019194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10001927C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100019364(uint64_t a1)
{
  dispatch_time_t v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  void *v5;
  _QWORD block[5];
  id v7;
  id v8;

  v2 = dispatch_time(0, 15000000000);
  global_queue = dispatch_get_global_queue(9, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100019428;
  block[3] = &unk_1004CEC08;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = *(id *)(a1 + 48);
  dispatch_after(v2, v4, block);

}

void sub_100019428(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  uint8_t buf[4];
  id v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = *(_QWORD *)(a1[4] + 24);
  v21 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v3, 0, 4, &v21));
  v15 = v21;
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_FAULT))
      sub_1003D758C();
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
    v14 = v4;
    v7 = 0;
    if (v6)
    {
      v8 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastPathComponent", v14));
          if (objc_msgSend(v11, "containsString:", a1[5])
            && (objc_msgSend(v11, "containsString:", a1[6]) & 1) == 0)
          {
            v16 = v7;
            objc_msgSend(v2, "removeItemAtURL:error:", v10, &v16);
            v12 = v16;

            if (v12)
            {
              v13 = qword_1005185D0;
              if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v23 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to delete old persistent store: %@", buf, 0xCu);
              }
              v7 = v12;
            }
            else
            {
              v7 = 0;
            }
          }

        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
      }
      while (v6);
    }

    v4 = v14;
  }

}

void sub_100019674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100019818(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!*(_QWORD *)(a19 + 40))
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error cleaning up cache: %@")));
      *(_QWORD *)(v27 - 88) = NSLocalizedDescriptionKey;
      *(_QWORD *)(v27 - 80) = v30;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27 - 80, v27 - 88, 1));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
      v33 = objc_msgSend(v31, "copy");
      *v25 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v32, -27109, v33));

      JUMPOUT(0x1000197C4);
    }
    JUMPOUT(0x1000197BCLL);
  }
  _Block_object_dispose(&a18, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100019984(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100019994(uint64_t a1)
{

}

void sub_10001999C(_QWORD *a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id obj;
  uint8_t buf[24];

  v2 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", a1[4]);
  objc_msgSend(v2, "setPredicate:", a1[5]);
  v3 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  objc_msgSend(v3, "setResultType:", 2);
  v4 = (void *)a1[6];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = qword_1005185D0;
  if (*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[ASCoreDataManager] Executed batch delete request for entity successfully", buf, 2u);
    }
  }
  else
  {
    v8 = (id)qword_1005185D0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = a1[4];
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "localizedDescription"));
      sub_1003D75F8(v9, v10, buf, v8);
    }

  }
}

void sub_100019B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100019BEC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t start()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  void *v3;
  os_log_t v4;
  void *v5;
  os_log_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint8_t v32[16];

  v0 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Starting", v32, 2u);
  }
  v1 = objc_autoreleasePoolPush();
  v2 = os_log_create("com.apple.asd.telemetry", "api");
  v3 = (void *)qword_1005185D8;
  qword_1005185D8 = (uint64_t)v2;

  v4 = os_log_create("com.apple.asd.telemetry", "dframe");
  v5 = (void *)qword_1005185E0;
  qword_1005185E0 = (uint64_t)v4;

  v6 = os_log_create("com.apple.asd", "daemon");
  v7 = (void *)qword_1005185D0;
  qword_1005185D0 = (uint64_t)v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ASDConfigurationManager shared](_TtC3asd23ASDConfigurationManager, "shared"));
  objc_msgSend(v8, "pushInitialCoreODIConfig");

  if ((_set_user_dir_suffix("com.apple.asd") & 1) == 0)
  {
    v9 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7690(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[EvuyxgzfZZU4un3X sharedInstance](EvuyxgzfZZU4un3X, "sharedInstance"));
  v18 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.asd.scoring"));
  objc_msgSend(v18, "setDelegate:", v17);
  objc_msgSend(v18, "resume");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[ASXPCActivityManager shared](_TtC3asd20ASXPCActivityManager, "shared"));
  objc_msgSend(v19, "registerWithActivity:", 0);

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[ASXPCActivityManager shared](_TtC3asd20ASXPCActivityManager, "shared"));
  objc_msgSend(v20, "registerWithActivity:", 1);

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[RavioliManagerObjC shared](_TtC3asd18RavioliManagerObjC, "shared"));
  if (!v21)
  {
    v22 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D765C(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  +[PushCoordinator configurePush](_TtC3asd15PushCoordinator, "configurePush");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[BindingsChangeObserver shared](_TtC3asd22BindingsChangeObserver, "shared"));
  objc_msgSend(v30, "registerObservers");

  objc_autoreleasePoolPop(v1);
  CFRunLoopRun();

  return 1;
}

void sub_10001A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10001A6D8(id a1)
{
  YIbYnDZMoU7hwSYC *v1;
  void *v2;

  v1 = objc_opt_new(YIbYnDZMoU7hwSYC);
  v2 = (void *)qword_1005115A8;
  qword_1005115A8 = (uint64_t)v1;

}

void sub_10001A984(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x10001A878);
  }

  _Unwind_Resume(exc_buf);
}

void sub_10001AFA8()
{
  void *v0;
  void *v1;

  objc_end_catch();
  JUMPOUT(0x10001AFC0);
}

void sub_10001AFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10001AFD8()
{
  JUMPOUT(0x10001AFFCLL);
}

void sub_10001AFE0()
{
  JUMPOUT(0x10001B004);
}

void sub_10001AFE8()
{
  JUMPOUT(0x10001AFF4);
}

void sub_10001B054(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[19];

  v3[0] = PHAssetPropertySetLocalDate;
  v3[1] = PHAssetPropertySetOriginalMetadata;
  v3[2] = PHAssetPropertySetPhotosOneUp;
  v3[3] = PHAssetPropertySetPhotosInfoPanelExtended;
  v3[4] = PHAssetPropertySetPhotoIris;
  v3[5] = PHAssetPropertySetDescription;
  v3[6] = PHAssetPropertySetComments;
  v3[7] = PHAssetPropertySetSceneAnalysis;
  v3[8] = PHAssetPropertySetAnalysisState;
  v3[9] = PHAssetPropertySetUserActivity;
  v3[10] = PHAssetPropertySetAdjustment;
  v3[11] = PHAssetPropertySetCuration;
  v3[12] = PHAssetPropertySetAesthetic;
  v3[13] = PHAssetPropertySetMediaAnalysis;
  v3[14] = PHAssetPropertySetImport;
  v3[15] = PHAssetPropertySetSceneprint;
  v3[16] = PHAssetPropertySetDestinationAssetCopy;
  v3[17] = PHAssetPropertySetGridMetadata;
  v3[18] = PHAssetPropertySetCoarseLocation;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 19));
  v2 = (void *)qword_1005115B8;
  qword_1005115B8 = v1;

}

void sub_10001B3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10001B708(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();

    JUMPOUT(0x10001B69CLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_10001BA50(void *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v8;

  objc_begin_catch(a1);
  if (a2 == 2)
  {
    if (*(_QWORD *)(v3 + 16))
      v8 = v5;
    objc_end_catch();
    JUMPOUT(0x10001B9E4);
  }

  objc_end_catch();
  JUMPOUT(0x10001B9F0);
}

void sub_10001BABC()
{
  void *v0;
  void *v1;

  JUMPOUT(0x10001BAD0);
}

void sub_10001BD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10001BED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001BFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001C064(void *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  objc_begin_catch(a1);
  if (a2 == 2)
  {
    *v2 = 134;
    objc_end_catch();
    JUMPOUT(0x10001C03CLL);
  }

  objc_exception_rethrow();
}

void sub_10001C0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_10001C4D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _QWORD *v11;
  void *v12;

  objc_begin_catch(a1);
  if (a2 == 2)
  {
    *v11 = 134;
    objc_end_catch();

    JUMPOUT(0x10001C464);
  }

  objc_exception_rethrow();
}

void sub_10001C594()
{
  void *v0;
  void *v1;

  objc_end_catch();

  JUMPOUT(0x10001C538);
}

void sub_10001C5AC()
{
  JUMPOUT(0x10001C5B4);
}

void sub_10001C678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C860(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001C870(uint64_t a1)
{

}

void sub_10001C878(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id obj;

  v3 = (uint64_t)(a1 + 7);
  v2 = a1[7];
  v4 = (void *)a1[4];
  v5 = *(_QWORD *)(v3 - 16);
  v6 = *(_QWORD *)(v2 + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeRequest:error:", v5, &obj));
  objc_storeStrong((id *)(v6 + 40), obj);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 8) + 40);
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "finalResult"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

    if (v12)
    {
      v13 = objc_opt_class(ASRavioliEntry);
      if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
      {
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ravioli"));
        v15 = *(_QWORD *)(a1[8] + 8);
        v16 = *(void **)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v14;

      }
      else
      {
        v26 = qword_1005185D0;
        if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
          sub_1003D787C(v26, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else
    {
      v18 = qword_1005185D0;
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
        sub_1003D7848(v18, v19, v20, v21, v22, v23, v24, v25);
    }

  }
  else
  {
    v17 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7768(v3, v17);
  }
}

void sub_10001CAA8(id a1)
{
  pNjRsniwrVEhiG7R *v1;
  void *v2;

  v1 = objc_opt_new(pNjRsniwrVEhiG7R);
  v2 = (void *)qword_1005115C8;
  qword_1005115C8 = (uint64_t)v1;

}

void sub_10001D11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D148(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D158(uint64_t a1)
{

}

void sub_10001D160(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7920(v7, v6);
  }
  else
  {
    v8 = objc_alloc_init((Class)NSMutableArray);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "authenticationCertificateSignatures"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10001D278;
    v14[3] = &unk_1004CECE0;
    v10 = v8;
    v15 = v10;
    objc_msgSend(v9, "enumerateObjectsUsingBlock:", v14);

    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
    v13 = v10;

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10001D278(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "serverVerifiableEncoding"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataUsingEncoding:", 4));

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    v5 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "adding IDS data", v6, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
  {
    sub_1003D79C4();
  }

}

id sub_10001D9E4(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("errorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v4[1] = CFSTR("type");
  v5[0] = v1;
  v5[1] = &off_1004F4BD0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return v2;
}

void sub_10001E22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;

  _Unwind_Resume(a1);
}

void sub_10001E288(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1[4] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v7;
  v17 = v7;

  v12 = *(_QWORD *)(a1[5] + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v8;
  v14 = v8;

  v15 = *(_QWORD *)(a1[6] + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v9;

}

id sub_10001E330(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("errorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v4[1] = CFSTR("type");
  v5[0] = v1;
  v5[1] = &off_1004F4BE8;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return v2;
}

void sub_10001F16C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x290], 8);

  _Unwind_Resume(a1);
}

__n128 sub_10001F1F8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  v12 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v12;
  result = *(__n128 *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(__n128 *)(a1 + 272) = result;
  return result;
}

void sub_10001F258(uint64_t a1)
{

}

void sub_10001F264(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1[4] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v7;
  v17 = v7;

  v12 = *(_QWORD *)(a1[5] + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v8;
  v14 = v8;

  v15 = *(_QWORD *)(a1[6] + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v9;

}

void sub_10001F30C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __SecCertificate *v18;
  CFDataRef v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const __CFData *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = a3;
  v8 = a4;
  if (v8)
  {
    v9 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7AE4((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 224) = a2;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 244) = objc_msgSend(v7, "count");
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 244))
    {
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = (__SecCertificate *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v16));
        v19 = SecCertificateCopyData(v18);

        v20 = -[__CFData length](v19, "length");
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232) = malloc_type_realloc(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32)+ 8)+ 232), (size_t)v20 + v17 + 4, 0x4BA9CEF4uLL);
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232);
        if (!v21)
          break;
        *(_BYTE *)(v21 + v17) = (_BYTE)v20;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232) + v17 + 1) = BYTE1(v20);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232) + v17 + 2) = BYTE2(v20);
        v22 = v17 + 4;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232) + v17 + 3) = BYTE3(v20);
        v23 = (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 232) + v22);
        v24 = objc_retainAutorelease(v19);
        memcpy(v23, -[__CFData bytes](v24, "bytes"), (size_t)v20);
        v17 = v22 + (_DWORD)v20;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 240) = v22 + (_DWORD)v20;

        if (++v16 >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 244))
          goto LABEL_4;
      }
      v25 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT);
      if (v25)
        sub_1003D7AB0(v25, v26, v27, v28, v29, v30, v31, v32);

    }
  }
LABEL_4:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 264));

}

void sub_10001F51C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[PrecomputationManager shared](_TtC3asd21PrecomputationManager, "shared"));
  objc_msgSend(v2, "captureWithBindings:", *(_QWORD *)(a1 + 32));

}

id sub_10001F560(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("errorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v4[1] = CFSTR("type");
  v5[0] = v1;
  v5[1] = &off_1004F4C00;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return v2;
}

void sub_10001F824(uint64_t a1, void *a2, void *a3)
{
  __SecCertificate *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFDataRef v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7AE4((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v14 = SecCertificateCopyData(v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10002001C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1000202E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (a2)
  {

    objc_begin_catch(a1);
    if (a2 == 2)
    {
      objc_end_catch();
      JUMPOUT(0x1000201E8);
    }

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1000204A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100020588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000208D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100020904(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100020914(uint64_t a1)
{

}

void sub_10002091C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;

  v7 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v6 + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  *(_QWORD *)(v6 + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1000210F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_10002112C(uint64_t a1, uint64_t a2, int a3)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100021144(uint64_t a1, int a2)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (float)a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000213F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100021410(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100021420(uint64_t a1)
{

}

void sub_100021428(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1000215AC(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1005115D8;
  qword_1005115D8 = (uint64_t)v1;

}

void sub_100021B78(id a1)
{
  ocfHk3pjIqg7tBvb *v1;
  void *v2;

  v1 = objc_opt_new(ocfHk3pjIqg7tBvb);
  v2 = (void *)qword_1005115E8;
  qword_1005115E8 = (uint64_t)v1;

}

void sub_100022128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002214C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002215C(uint64_t a1)
{

}

void sub_100022164(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v5 = a2;
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  if (a3)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 173001;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = v5;
    obj = v5;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "protocolConfiguration", v24));
          v13 = objc_msgSend(v12, "type");

          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "connection"));
          v15 = objc_msgSend(v14, "status");

          v16 = objc_msgSend(v11, "isFromMDM");
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v13));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v17, CFSTR("p"));

          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v15));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v18, CFSTR("s"));

          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v16));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v19, CFSTR("m"));

          if (v15 == (id)3)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "connection"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "connectedDate"));

            if (v21)
              objc_msgSend(v6, "setObject:forKeyedSubscript:", v21, CFSTR("t"));

          }
          else
          {
            objc_msgSend(v6, "removeObjectForKey:", CFSTR("t"));
          }
          v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v6));
          objc_msgSend(v22, "addObject:", v23);

        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v8);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    v5 = v24;
  }

}

void sub_1000224C0(id a1)
{
  PJXBDBF1h0EU80dy *v1;
  void *v2;

  v1 = objc_alloc_init(PJXBDBF1h0EU80dy);
  v2 = (void *)qword_1005115F8;
  qword_1005115F8 = (uint64_t)v1;

}

void sub_10002253C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000225A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100022624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000228E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100022974(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100022984(uint64_t a1)
{

}

void sub_10002298C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 16);
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_100022AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100022B14(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v10[8];
  id obj;

  v2 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v2, "setResultType:", 2);
  v4 = *(_QWORD *)(a1 + 48);
  v3 = a1 + 48;
  v5 = *(void **)(*(_QWORD *)(v3 - 8) + 16);
  v6 = *(_QWORD *)(v4 + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_msgSend(v5, "executeRequest:error:", v2, &obj);
  objc_storeStrong((id *)(v6 + 40), obj);
  v8 = qword_1005185D0;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Executed batch delete request for JSONBag entity successfully.", v10, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
  {
    sub_1003D7E10(v3, v8, v9);
  }

}

void sub_100022C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100022DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  id *v3;
  uint64_t v4;

  _Block_object_dispose((const void *)(v4 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100022DF4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v13;
LABEL_4:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v5);
        if (objc_msgSend(v6, "PJ7tY2vmxQ3CBhNO", (_QWORD)v12))
        {
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dfVal"));
          v8 = objc_claimAutoreleasedReturnValue(+[kjAS9HuCdR1m5txL Xw2iAzNBHudJx7Ph:](kjAS9HuCdR1m5txL, "Xw2iAzNBHudJx7Ph:", v7));
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v10 = *(void **)(v9 + 40);
          *(_QWORD *)(v9 + 40) = v8;

          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "qfSDGTGvqd3Hruzg") == (id)149)
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setQfSDGTGvqd3Hruzg:", 163000);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "presentTime"));
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setWgZJLy8f4tn41Pge:", v11);

        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
          break;
        if (v3 == (id)++v5)
        {
          v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v3)
            goto LABEL_4;
          break;
        }
      }
    }

  }
}

void sub_100022FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100022FE8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v13;
LABEL_4:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v5);
        if (objc_msgSend(v6, "PJ7tY2vmxQ3CBhNO", (_QWORD)v12))
        {
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dfVal"));
          v8 = objc_claimAutoreleasedReturnValue(+[kjAS9HuCdR1m5txL Xw2iAzNBHudJx7Ph:](kjAS9HuCdR1m5txL, "Xw2iAzNBHudJx7Ph:", v7));
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v10 = *(void **)(v9 + 40);
          *(_QWORD *)(v9 + 40) = v8;

          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "qfSDGTGvqd3Hruzg") == (id)149)
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setQfSDGTGvqd3Hruzg:", 163000);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "presentTime"));
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setWgZJLy8f4tn41Pge:", v11);

        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
          break;
        if (v3 == (id)++v5)
        {
          v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v3)
            goto LABEL_4;
          break;
        }
      }
    }

  }
}

void sub_1000231A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_100023370(uint64_t a1)
{
  void *v2;
  void *v3;
  ASCacheEntry *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("DB_C56902430"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lL9A0cjB5y6UgZsI"));
    if (v3)
    {
      v4 = -[ASCacheEntry initWithEntity:insertIntoManagedObjectContext:]([ASCacheEntry alloc], "initWithEntity:insertIntoManagedObjectContext:", v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      -[ASCacheEntry setPresentTime:](v4, "setPresentTime:", v5);

      -[ASCacheEntry setDf_ttl:](v4, "setDf_ttl:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "base64EncodedStringWithOptions:", 2));
      -[ASCacheEntry setDfVal:](v4, "setDfVal:", v6);

      -[ASCacheEntry setProfID:](v4, "setProfID:", *(unsigned int *)(a1 + 56));
      -[ASCacheEntry setQueryKey:](v4, "setQueryKey:", objc_msgSend(*(id *)(a1 + 40), "JmiV9VW8P3Gxz1H7"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(-[ASCacheEntry nC4QvxwoXaT2I88i](v4, "nC4QvxwoXaT2I88i"));
      -[ASCacheEntry setMacVal:](v4, "setMacVal:", v7);

      objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
  {
    sub_1003D7F5C();
  }

}

void sub_1000234D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000235B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1000235DC(uint64_t a1)
{
  void *v2;
  void *v3;
  ASClass101288420 *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("DB_R101288420"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lL9A0cjB5y6UgZsI"));
    if (v3)
    {
      v4 = -[ASClass101288420 initWithEntity:insertIntoManagedObjectContext:]([ASClass101288420 alloc], "initWithEntity:insertIntoManagedObjectContext:", v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
      -[ASClass101288420 setVersion:](v4, "setVersion:", 2);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      -[ASClass101288420 setPresentTime:](v4, "setPresentTime:", v5);

      -[ASClass101288420 setDfMaxAge:](v4, "setDfMaxAge:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "base64EncodedStringWithOptions:", 2));
      -[ASClass101288420 setDfVal:](v4, "setDfVal:", v6);

      -[ASClass101288420 setProfID:](v4, "setProfID:", *(unsigned int *)(a1 + 56));
      -[ASClass101288420 setQueryKey:](v4, "setQueryKey:", objc_msgSend(*(id *)(a1 + 40), "JmiV9VW8P3Gxz1H7"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(-[ASClass101288420 nC4QvxwoXaT2I88i](v4, "nC4QvxwoXaT2I88i"));
      -[ASClass101288420 setMacVal:](v4, "setMacVal:", v7);

      objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
  {
    sub_1003D7F88();
  }

}

void sub_100023744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100023850(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  id v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD *v25;

  v25 = v18;
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Error cleaning up device data fields cache: %@"));
    *(_QWORD *)(v19 - 72) = NSLocalizedDescriptionKey;
    *(_QWORD *)(v19 - 64) = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19 - 64, v19 - 72, 1));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
    v24 = objc_msgSend(v22, "copy");
    *v25 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v23, -27109, v24));

    JUMPOUT(0x100023804);
  }
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(exc_buf);
}

void sub_10002397C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "YKIcrg8ijyspX6ho:forVersion:entityName:", 0, 1, CFSTR("DB_R103115069")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "finalResult"));
  v4 = v3;
  if (v3)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), (_QWORD)v9);
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

    objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
  }

}

void sub_100023AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100023EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v44 - 208), 8);

  _Block_object_dispose((const void *)(v44 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100024020(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  void *v12;
  void *v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "YKIcrg8ijyspX6ho:forVersion:", 0, 1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "finalResult"));
  if (v12)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    obj = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v12);
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v2)
    {
      v3 = *(_QWORD *)v16;
      do
      {
        v4 = 0;
        do
        {
          if (*(_QWORD *)v16 != v3)
            objc_enumerationMutation(obj);
          v5 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v4);
          v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v5, "queryKey")));
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v6));
          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "presentTime"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "presentTime"));
            v10 = objc_msgSend(v8, "compare:", v9) == (id)1;

          }
          else
          {
            v10 = 0;
          }
          if (*(_BYTE *)(a1 + 56) || (objc_msgSend(v5, "PJ7tY2vmxQ3CBhNO") ^ 1 | v10) == 1)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "deleteObject:", v5);
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          }
          else
          {
            objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);
          }

          v4 = (char *)v4 + 1;
        }
        while (v2 != v4);
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        v2 = v11;
      }
      while (v11);
    }

    objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
  }

}

void sub_10002425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1000242E4(uint64_t a1)
{
  id v2;
  void *v3;
  double v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  id obj;

  v2 = objc_alloc((Class)NSDate);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ASDConfigurationManager shared](_TtC3asd23ASDConfigurationManager, "shared"));
  objc_msgSend(v3, "cacheV2MaxAge");
  v5 = objc_msgSend(v2, "initWithTimeIntervalSinceNow:", -v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("DB_R101288420")));
  if (!*(_BYTE *)(a1 + 56))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("presentTime < %@"), v5));
    objc_msgSend(v6, "setPredicate:", v7);

  }
  v8 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v6);
  objc_msgSend(v8, "setResultType:", 2);
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeRequest:error:", v8, &obj));
  objc_storeStrong((id *)(v10 + 40), obj);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
    || (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "result")),
        v13 = objc_opt_self(NSNumber),
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13),
        isKindOfClass = objc_opt_isKindOfClass(v12, v14),
        v14,
        v12,
        (isKindOfClass & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D7FB4();
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "result"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += objc_msgSend(v16, "integerValue");

  }
}

void sub_1000244BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100024524(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char isKindOfClass;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  uint8_t v27;
  _BYTE v28[7];
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id obj;
  _BYTE v35[128];
  void *v36;

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("DB_R101288420")));
  objc_msgSend(v24, "setPropertiesToFetch:", &off_1004F4F68);
  objc_msgSend(v24, "setPropertiesToGroupBy:", &off_1004F4F80);
  objc_msgSend(v24, "setResultType:", 2);
  v2 = *(void **)(a1[4] + 16);
  v3 = *(_QWORD *)(a1[5] + 8);
  obj = *(id *)(v3 + 40);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v24, &obj));
  objc_storeStrong((id *)(v3 + 40), obj);
  v4 = v25;
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    v5 = 1;
  else
    v5 = v25 == 0;
  if (!v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("DB_R101288420")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("presentTime"), 0));
    v36 = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v36, 1));
    objc_msgSend(v6, "setSortDescriptors:", v8);

    objc_msgSend(v6, "setFetchOffset:", 1);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v26 = v25;
    v9 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v10)
            objc_enumerationMutation(v26);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("queryKey")));
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("queryKey == %@"), v12));
          objc_msgSend(v6, "setPredicate:", v13);

          v14 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v6);
          objc_msgSend(v14, "setResultType:", 2);
          v15 = *(void **)(a1[4] + 16);
          v16 = *(_QWORD *)(a1[5] + 8);
          v29 = *(id *)(v16 + 40);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "executeRequest:error:", v14, &v29));
          objc_storeStrong((id *)(v16 + 40), v29);
          if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
            || (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "result")),
                v19 = objc_opt_self(NSNumber),
                v20 = (void *)objc_claimAutoreleasedReturnValue(v19),
                isKindOfClass = objc_opt_isKindOfClass(v18, v20),
                v20,
                v18,
                (isKindOfClass & 1) == 0))
          {
            v23 = qword_1005185D0;
            if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
              sub_1003D7FE0(&v27, v28, v23);
          }
          else
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "result"));
            *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += objc_msgSend(v22, "integerValue");

          }
        }
        v9 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v9);
    }

    v4 = v25;
  }

}

void sub_1000248A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100024A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_100024B00(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *i;
  uint64_t v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char isKindOfClass;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id obj;
  id v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[16];
  _BYTE v34[128];

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("DB_R105387691")));
  v26 = objc_alloc_init((Class)NSMutableArray);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = *(id *)(a1 + 32);
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v1)
  {
    v2 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v1; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v2)
          objc_enumerationMutation(obj);
        v4 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v4));
        objc_msgSend(v5, "doubleValue");
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -v6));

        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("workflowID != %@ OR createdAt < %@"), v4, v7));
        objc_msgSend(v26, "addObject:", v8);

      }
      v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v1);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v26));
  objc_msgSend(v24, "setPredicate:", v9);

  v10 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v24);
  objc_msgSend(v10, "setResultType:", 2);
  v11 = *(void **)(a1 + 48);
  v28 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "executeRequest:error:", v10, &v28));
  v13 = v28;
  if (v13)
  {
    v14 = (id)qword_1005185D0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedDescription"));
      sub_1003D8040(v15, (uint64_t)v33, v14);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "result"));
    v17 = objc_opt_self(NSNumber);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    isKindOfClass = objc_opt_isKindOfClass(v16, v18);

    if ((isKindOfClass & 1) != 0)
    {
      v20 = *(_QWORD *)(a1 + 56);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "result"));
      (*(void (**)(uint64_t, void *, _QWORD))(v20 + 16))(v20, v21, 0);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_FAULT))
        sub_1003D8014();
      v22 = *(_QWORD *)(a1 + 56);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, -27109, &off_1004F5078));
      (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v23);

    }
  }

}

void sub_100024E8C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;

  if (a2 == 1)
  {
    v22 = objc_begin_catch(a1);
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_FAULT))
      sub_1003D8014();
    v23 = *(_QWORD *)(a15 + 56);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v24, -27109, &off_1004F50A0));
    (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v25);

    objc_end_catch();
    JUMPOUT(0x100024E50);
  }
  _Unwind_Resume(a1);
}

void sub_10002516C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000252A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1000252E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bag"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100025434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_100025484()
{
  JUMPOUT(0x10002546CLL);
}

void sub_10002548C()
{
  JUMPOUT(0x100025470);
}

void sub_100025494()
{
  JUMPOUT(0x100025474);
}

void sub_10002549C()
{
  JUMPOUT(0x100025478);
}

void sub_100025680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

id sub_1000256F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
}

void sub_1000259DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100025A5C(uint64_t a1)
{
  void *v2;
  unint64_t i;
  ASGeoCodeCacheEntry *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char isKindOfClass;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  char *v19;
  id v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  void *j;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  id v38;
  uint8_t v39;
  _BYTE v40[7];
  _BYTE v41[128];
  id v42;
  _BYTE v43[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("DB_GeoCodeCache"), *(_QWORD *)(a1 + 32)));
  for (i = 0; (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") > i; ++i)
  {
    v4 = -[ASGeoCodeCacheEntry initWithEntity:insertIntoManagedObjectContext:]([ASGeoCodeCacheEntry alloc], "initWithEntity:insertIntoManagedObjectContext:", v2, *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", i));
    v6 = objc_opt_self(CLLocation);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    isKindOfClass = objc_opt_isKindOfClass(v5, v7);

    if ((isKindOfClass & 1) != 0)
      goto LABEL_6;
    v9 = objc_opt_self(NSNull);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = objc_opt_isKindOfClass(v5, v10);

    if ((v11 & 1) != 0)
    {

      v5 = 0;
LABEL_6:
      -[ASGeoCodeCacheEntry setLocation:](v4, "setLocation:", v5);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", i));
      -[ASGeoCodeCacheEntry setAddress:](v4, "setAddress:", v12);

      v13 = *(void **)(a1 + 56);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", i));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "canonicalStringForAddress:", v14));
      -[ASGeoCodeCacheEntry setAddressForLookup:](v4, "setAddressForLookup:", v15);

      -[ASGeoCodeCacheEntry setUpdatedAt:](v4, "setUpdatedAt:", *(_QWORD *)(a1 + 64));
      -[ASGeoCodeCacheEntry setLastAccessed:](v4, "setLastAccessed:", *(_QWORD *)(a1 + 64));
      goto LABEL_7;
    }
    v16 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D80CC(&v39, v40, v16);
LABEL_7:

  }
  objc_msgSend(*(id *)(a1 + 56), "cZK3HwMuoGcCgDQI");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[ASGeoCodeCacheEntry fetchRequest](ASGeoCodeCacheEntry, "fetchRequest"));
  v18 = *(void **)(a1 + 32);
  v38 = 0;
  v19 = (char *)objc_msgSend(v18, "countForFetchRequest:error:", v17, &v38);
  v20 = v38;
  if (v20)
  {
    v21 = v20;
    v22 = (id)qword_1005185D0;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "localizedDescription"));
      sub_1003D8148(v23, (uint64_t)v43, v22);
    }
    goto LABEL_26;
  }
  if ((unint64_t)v19 >= 0x3D)
  {
    objc_msgSend(v17, "setFetchLimit:", v19 - 50);
    v24 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("lastAccessed"), 1);
    v42 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v42, 1));
    objc_msgSend(v17, "setSortDescriptors:", v25);

    objc_msgSend(v17, "setReturnsObjectsAsFaults:", 1);
    v26 = *(void **)(a1 + 32);
    v37 = 0;
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "executeFetchRequest:error:", v17, &v37));
    v21 = v37;
    if (v21)
    {
      v27 = (id)qword_1005185D0;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "localizedDescription"));
        sub_1003D8100(v28, (uint64_t)v43, v27);
      }

    }
    else
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v29 = v22;
      v30 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
      if (v30)
      {
        v31 = *(_QWORD *)v34;
        do
        {
          for (j = 0; j != v30; j = (char *)j + 1)
          {
            if (*(_QWORD *)v34 != v31)
              objc_enumerationMutation(v29);
            objc_msgSend(*(id *)(a1 + 32), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)j));
          }
          v30 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
        }
        while (v30);
      }

      objc_msgSend(*(id *)(a1 + 56), "cZK3HwMuoGcCgDQI");
      v22 = v29;
    }
LABEL_26:

  }
}

void sub_100025E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000260E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_100026144(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id obj;
  uint64_t v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ASGeoCodeCacheEntry fetchRequest](ASGeoCodeCacheEntry, "fetchRequest"));
  objc_msgSend(v2, "setFetchLimit:", 1);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  v4 = 0;
  if (v3)
  {
    v23 = *(_QWORD *)v27;
    do
    {
      v24 = v3;
      v5 = 0;
      v6 = v4;
      do
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v5);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "canonicalStringForAddress:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("addressForLookup == %@"), v8));
        objc_msgSend(v2, "setPredicate:", v9);

        v10 = *(void **)(a1 + 48);
        v25 = v6;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "executeFetchRequest:error:", v2, &v25));
        v4 = v25;

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
        if (v12)
        {
          v13 = objc_opt_self(ASGeoCodeCacheEntry);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "updatedAt"));
            v16 = v15 == 0;

            if (!v16)
            {
              v17 = *(void **)(a1 + 56);
              v18 = objc_alloc(*(Class *)(a1 + 72));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "location"));
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "updatedAt"));
              v21 = objc_msgSend(v18, "initWithAddress:location:updated:", v7, v19, v20);
              objc_msgSend(v17, "addObject:", v21);

              objc_msgSend(v12, "setLastAccessed:", *(_QWORD *)(a1 + 64));
            }
          }
          else
          {

          }
        }

        v5 = (char *)v5 + 1;
        v6 = v4;
      }
      while (v24 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v3);
  }

}

void sub_1000263C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id sub_10002646C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
}

void sub_10002650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100026528(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  BindingRecord *v10;
  void *v11;
  void *v12;
  void *v13;
  BindingRecord *v14;
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[128];

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[ASBindingKeyVal fetchRequest](ASBindingKeyVal, "fetchRequest"));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v21 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v16, &v21));
  v15 = v21;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "val", v15));

        if (v9)
        {
          v10 = [BindingRecord alloc];
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "updated"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "val"));
          v14 = -[BindingRecord initWithKey:updatedDate:value:](v10, "initWithKey:updatedDate:value:", v11, v12, v13);

          objc_msgSend(*(id *)(a1 + 40), "addObject:", v14);
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v5);
  }

}

void sub_1000266FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100026934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

id sub_1000269A8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
}

void sub_100026AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_100026ACC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  ASBindingKeyVal *v14;
  ASBindingKeyVal *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  _BYTE v27[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("DB_R100605578"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)));
  if (v2)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[ASBindingKeyVal fetchRequest](ASBindingKeyVal, "fetchRequest"));
      v4 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v3);
      objc_msgSend(v4, "setResultType:", 1);
      v5 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
      v26 = 0;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeRequest:error:", v4, &v26));
      v7 = v26;
      if (v7)
      {
        v8 = (id)qword_1005185D0;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
          objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
          sub_1003D81BC();
        }

      }
    }
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v9 = *(id *)(a1 + 40);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v14 = [ASBindingKeyVal alloc];
          v15 = -[ASBindingKeyVal initWithEntity:insertIntoManagedObjectContext:](v14, "initWithEntity:insertIntoManagedObjectContext:", v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), (_QWORD)v22);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
          -[ASBindingKeyVal setKey:](v15, "setKey:", v16);

          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
          -[ASBindingKeyVal setVal:](v15, "setVal:", v17);

          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "updated"));
          -[ASBindingKeyVal setUpdated:](v15, "setUpdated:", v18);

        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      }
      while (v10);
    }

    objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
  }
  else
  {
    v19 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8200(v19, v20, v21);
  }

}

void sub_100026D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_100026ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100026F04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("workflowID == %@"), *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "YKIcrg8ijyspX6ho:forVersion:entityName:"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "finalResult"));
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndex:", 0));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[DB_R103115069 insertNewObjectInManagedObjectContext:](DB_R103115069, "insertNewObjectInManagedObjectContext:", *(_QWORD *)(a1 + 56)));
    objc_msgSend(v4, "setWorkflowID:", *(_QWORD *)(a1 + 32));
  }
  objc_msgSend(v4, "setFields:", *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v4, "setUpdatedAt:", v5);

  objc_msgSend(*(id *)(a1 + 40), "cZK3HwMuoGcCgDQI");
}

void sub_100027038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1000271A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1000271E4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[DB_R103115069 fetchRequest](DB_R103115069, "fetchRequest"));
  objc_msgSend(v2, "setFetchLimit:", 1);
  objc_msgSend(v2, "setResultType:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("workflowID = %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);
  v4 = *(void **)(a1[5] + 16);
  v12 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v12));
  v6 = v12;
  v7 = v12;
  if (v7)
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v6);
  if (objc_msgSend(v5, "count") == (id)1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fields"));
    v10 = *(_QWORD *)(a1[7] + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
}

void sub_100027304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000273EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100027410(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = (id)objc_claimAutoreleasedReturnValue(+[DB_R105387691 insertNewObjectInManagedObjectContext:](DB_R105387691, "insertNewObjectInManagedObjectContext:", *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("workflowID")));
  objc_msgSend(v20, "setWorkflowID:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("createdAt")));
  objc_msgSend(v20, "setCreatedAt:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("assessment")));
  objc_msgSend(v20, "setAssessment:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("trainingData")));
  objc_msgSend(v20, "setTrainingData:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("assessmentGUID")));
  objc_msgSend(v20, "setAssessmentGUID:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("assessmentGUIDSeeds")));
  objc_msgSend(v20, "setAssessmentGUIDSeeds:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("trainingGUID")));
  objc_msgSend(v20, "setTrainingGUID:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("trainingGUIDSeeds")));
  objc_msgSend(v20, "setTrainingGUIDSeeds:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("trainingSignalID")));
  objc_msgSend(v20, "setTrainingSignalID:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("digestIndex")));
  objc_msgSend(v20, "setDigestIndex:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bindings")));
  objc_msgSend(v20, "setBindings:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bindingsToCompare")));
  objc_msgSend(v20, "setBindingsToCompare:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("refreshTTL")));
  objc_msgSend(v20, "setRefreshTTL:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("encryptedTSID")));
  objc_msgSend(v20, "setEncryptedTSID:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("encryptedAGUID")));
  objc_msgSend(v20, "setEncryptedAGUID:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("shouldSendOTD")));
  objc_msgSend(v20, "setShouldSendOTD:", v17 != 0);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("otdDestinationHost")));
  objc_msgSend(v20, "setOtdDestinationHost:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("profileID")));
  objc_msgSend(v20, "setProfileID:", v19);

  objc_msgSend(*(id *)(a1 + 48), "cZK3HwMuoGcCgDQI");
}

void sub_10002772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000278D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_100027918(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[DB_R105387691 fetchRequest](DB_R105387691, "fetchRequest"));
  objc_msgSend(v2, "setResultType:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("workflowID = %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);
  v4 = *(void **)(a1[5] + 16);
  v9 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v9));
  v6 = v9;
  v7 = v9;
  if (v7)
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v6);
  if (objc_msgSend(v5, "count"))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100027A6C;
    v8[3] = &unk_1004CF130;
    v8[4] = a1[7];
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);
  }

}

void sub_100027A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100027A6C(uint64_t a1, void *a2)
{
  AssessmentPayloadRecord *v3;
  id v4;

  v4 = a2;
  v3 = -[AssessmentPayloadRecord initWithObject:]([AssessmentPayloadRecord alloc], "initWithObject:", v4);
  if (v3)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v3);

}

void sub_100027AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100027C6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,char a26)
{
  void *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  id v32;
  void *v33;
  void *v34;
  id v35;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!*(_QWORD *)(a21 + 40))
    {
      v32 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Error cleaning up cache: %@"));
      *(_QWORD *)(v29 - 104) = NSLocalizedDescriptionKey;
      *(_QWORD *)(v29 - 96) = v32;
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29 - 96, v29 - 104, 1));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
      v35 = objc_msgSend(v33, "copy");
      *v28 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, -27109, v35));

      JUMPOUT(0x100027BFCLL);
    }
    JUMPOUT(0x100027BF4);
  }
  _Block_object_dispose(&a20, 8);

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100027DCC(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id obj;
  _BYTE v15[128];

  v2 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v2, "setPredicate:", *(_QWORD *)(a1 + 40));
  v3 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9), (_QWORD)v10);
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
      }
      while (v7);
    }

    objc_msgSend(*(id *)(a1 + 48), "cZK3HwMuoGcCgDQI");
  }

}

void sub_100027F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000280D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000281F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100028228(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  uint64_t v14;

  v3 = (uint64_t *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 32);
  v12 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "f9CcEr7NPHjNuSLf:error:", v2, &v12));
  v6 = v12;
  if (v6)
  {
    v7 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D831C(v3, (uint64_t)v6, v7);
  }
  else
  {
    if (v5)
    {
      v8 = qword_1005185D0;
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
      {
        v9 = *v3;
        *(_DWORD *)buf = 138412290;
        v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating existing bag with id: %@", buf, 0xCu);
      }
      objc_msgSend(v5, "setBag:", *(_QWORD *)(a1 + 48));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(v5, "setUpdated:", v10);
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[DB_R115061196 insertNewObjectInManagedObjectContext:](DB_R115061196, "insertNewObjectInManagedObjectContext:", *(_QWORD *)(a1 + 56)));
      objc_msgSend(v10, "setId:", *v3);
      objc_msgSend(v10, "setBag:", *(_QWORD *)(a1 + 48));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(v10, "setUpdated:", v11);

    }
    objc_msgSend(*(id *)(a1 + 32), "cZK3HwMuoGcCgDQI");
  }

}

void sub_1000283D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_10002856C(_QWORD *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  _BYTE v22[24];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[DB_R115061196 fetchRequest](DB_R115061196, "fetchRequest"));
  objc_msgSend(v2, "setFetchLimit:", 1);
  objc_msgSend(v2, "setResultType:", 0);
  v3 = a1 + 4;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("id = %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v4);
  v5 = *(void **)(a1[5] + 16);
  v19 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v2, &v19));
  v7 = v19;
  v8 = v19;
  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v7);
    v9 = (id)qword_1005185D0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = a1[4];
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "localizedDescription"));
      sub_1003D8404(v10, v11, (uint64_t)v22);
    }

  }
  if (!objc_msgSend(v6, "count"))
  {
    v12 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      v13 = *v3;
      *(_DWORD *)buf = 138412290;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "JSON Bag with ID %@ doesn't exist currently.", buf, 0xCu);
    }
  }
  if (objc_msgSend(v6, "count") == (id)1)
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v15 = *(_QWORD *)(a1[7] + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  if ((unint64_t)objc_msgSend(v6, "count") >= 2)
  {
    v17 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8398(v3, v17, v18);
  }

}

void sub_100028794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10002885C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000289F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100028A74(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "finalResult"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));

    if (v10)
    {
      v11 = objc_opt_class(ASRavioliEntry);
      if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      {
        v12 = objc_claimAutoreleasedReturnValue(-[NSObject ravioli](v10, "ravioli"));
        v13 = *(_QWORD *)(a1[8] + 8);
        v14 = *(void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v12;

      }
      else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      {
        sub_1003D84BC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003D8490();
    }
  }
  else
  {
    v10 = (id)qword_1005185D0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "localizedDescription"));
      objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "userInfo"));
      sub_1003D844C();
    }
  }

}

void sub_100028C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100028CBC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_100028CD4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_100028CE0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100028CEC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_10002965C(const uint64_t *a1, _WORD *a2)
{
  uint64_t MatchingServices;
  const __CFDictionary *v6;
  io_service_t v7;
  io_object_t v8;
  io_connect_t connect;
  mach_port_t mainPort[2];
  size_t v11;
  __int16 outputStruct;

  *(_QWORD *)mainPort = 0;
  connect = 0;
  MatchingServices = IOMainPort(0, &mainPort[1]);
  if (!(_DWORD)MatchingServices)
  {
    v6 = IOServiceMatching("ASIOKit");
    if (v6)
    {
      MatchingServices = IOServiceGetMatchingServices(mainPort[1], v6, mainPort);
      if (!(_DWORD)MatchingServices)
      {
        v7 = IOIteratorNext(mainPort[0]);
        if (v7)
        {
          v8 = v7;
          MatchingServices = IOServiceOpen(v7, mach_task_self_, 0, &connect);
          IOObjectRelease(v8);
          if (!(_DWORD)MatchingServices)
          {
            outputStruct = 0;
            v11 = 2;
            MatchingServices = IOConnectCallMethod(connect, 4u, a1, 8u, 0, 0, 0, 0, &outputStruct, &v11);
            if (!(_DWORD)MatchingServices)
              *a2 = outputStruct;
          }
        }
        else
        {
          MatchingServices = 5;
        }
        IOObjectRelease(mainPort[0]);
        if (connect)
          IOServiceClose(connect);
      }
    }
    else
    {
      return 5;
    }
  }
  return MatchingServices;
}

void sub_10002A074()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "BEDTime check is disabled.", v1, 2u);
  }
}

dispatch_queue_t sub_10002A0D8()
{
  return dispatch_queue_create("com.apple.asd.baa", 0);
}

void sub_10002A0F8(_BYTE *a1, unsigned int a2)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  int v5;
  const UInt8 *v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  const UInt8 *v10;
  uint64_t v11;
  int v12;
  CFIndex v13;
  void *v14;
  _DWORD *v15;
  const __CFData *v16;
  NSObject *v17;
  _QWORD v18[5];
  int v19;
  _BYTE buf[24];
  SecCertificateRef v21;

  if (a1 && a2 >= 2 && *a1 == 49)
  {
    v2 = a1 + 2;
    if ((char)a1[1] < 0)
    {
      v4 = a1[1] & 0x1F;
      v3 = v4 + 2;
      if ((int)v4 + 2 > a2)
        goto LABEL_13;
      v2 += v4;
    }
    else
    {
      v3 = 2;
    }
    if (v3 + 2 <= a2 && *v2 == 4)
    {
      v5 = (char)v2[1];
      v6 = v2 + 2;
      if ((v5 & 0x80000000) == 0)
      {
        v7 = v2[1];
LABEL_22:
        v19 = 0;
        v13 = v7;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v6, v7));
        if (v14)
        {
          v15 = sub_10002A3C0(&v19);
          if (v19 || !v15)
          {
            v16 = CFDataCreate(0, v6, v13);
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            v21 = 0;
            v21 = SecCertificateCreateWithData(0, v16);
            CFRelease(v16);
            if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24))
            {
              v17 = dispatch_queue_create("com.apple.asd.baa", 0);
              v18[0] = _NSConcreteStackBlock;
              v18[1] = 3221225472;
              v18[2] = sub_10002A520;
              v18[3] = &unk_1004CF1A8;
              v18[4] = buf;
              dispatch_async(v17, v18);

            }
            else if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
            {
              sub_1003D8614();
            }
            _Block_object_dispose(buf, 8);
          }
          else
          {
            CFRelease(v15);
          }
        }

        return;
      }
      v8 = v5 & 0x1F;
      if (v3 + (int)v8 <= a2)
      {
        if ((_DWORD)v8)
        {
          v7 = 0;
          v10 = v6;
          v11 = v8;
          do
          {
            v12 = *v10++;
            v7 = v12 | (v7 << 8);
            --v11;
          }
          while (v11);
        }
        else
        {
          v8 = 0;
          v7 = 0;
        }
        v6 += v8;
        goto LABEL_22;
      }
    }
  }
LABEL_13:
  v9 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "StoreBAACertificateIfNeeded";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 145;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = -1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s:%d: unable to extract cert, err %d", buf, 0x18u);
  }
}

void sub_10002A3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *sub_10002A3C0(_DWORD *a1)
{
  _DWORD *v1;
  void *v2;
  const __CFDictionary *v3;
  OSStatus v4;
  NSObject *v5;
  uint8_t v7[16];
  CFTypeRef result;
  _QWORD v9[3];
  _QWORD v10[3];

  v1 = a1;
  result = 0;
  if (a1)
  {
    v9[0] = kSecAttrLabel;
    v9[1] = kSecClass;
    v10[0] = CFSTR("ASBAA-cert");
    v10[1] = kSecClassCertificate;
    v9[2] = kSecReturnRef;
    v10[2] = &__kCFBooleanTrue;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 3));
    v3 = (const __CFDictionary *)objc_msgSend(v2, "mutableCopy");

    v4 = SecItemCopyMatching(v3, &result);
    *v1 = v4;
    if (v4)
    {
      v5 = qword_1005185D0;
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "No BAA certificate found", v7, 2u);
      }
      if (result)
      {
        CFRelease(result);
        v1 = 0;
        result = 0;
      }
      else
      {
        v1 = 0;
      }
    }
    else
    {
      v1 = result;
    }

  }
  return v1;
}

void sub_10002A520(uint64_t a1)
{
  const void *v2;

  if (sub_10002A5A8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
  {
    sub_1003D8684();
  }
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

uint64_t sub_10002A5A8(uint64_t a1)
{
  void *v1;
  const __CFDictionary *v2;
  uint64_t v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v5[0] = kSecAttrLabel;
  v5[1] = kSecClass;
  v6[0] = CFSTR("ASBAA-cert");
  v6[1] = kSecClassCertificate;
  v5[2] = kSecValueRef;
  v5[3] = kSecAttrAccessible;
  v6[2] = a1;
  v6[3] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4));
  v2 = (const __CFDictionary *)objc_msgSend(v1, "mutableCopy");

  v3 = SecItemAdd(v2, 0);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D86E4();

  return v3;
}

uint64_t sub_10002A6CC(__SecCertificate *a1, uint64_t a2, __SecCertificate *a3)
{
  uint64_t v5;
  void *v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFDictionary *v11;
  NSObject *v12;
  CFDataRef v13;
  void *v14;
  const __CFDictionary *v15;
  OSStatus v16;
  OSStatus v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t v22[4];
  OSStatus v23;
  _QWORD v24[2];
  uint8_t buf[8];
  CFDataRef v26;
  CFStringRef v27;
  CFStringRef v28;
  CFStringRef v29;
  CFStringRef v30;
  const __CFString *v31;
  CFStringRef v32;
  __SecCertificate *v33;
  uint64_t v34;

  v27 = kSecAttrLabel;
  v28 = kSecClass;
  v31 = CFSTR("ASBAA-cert");
  v32 = kSecClassKey;
  v29 = kSecValueRef;
  v30 = kSecAttrAccessible;
  v5 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  v33 = a1;
  v34 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v27, 4));
  v7 = (const __CFDictionary *)objc_msgSend(v6, "mutableCopy");

  v8 = SecItemAdd(v7, 0);
  if ((_DWORD)v8)
  {
    v9 = v8;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D873C();

  }
  else
  {

    v9 = sub_10002A5A8(a2);
    if (!(_DWORD)v9)
    {
      v27 = kSecAttrLabel;
      v28 = kSecClass;
      v31 = CFSTR("ASBAA-issuer-cert");
      v32 = kSecClassCertificate;
      v29 = kSecValueRef;
      v30 = kSecAttrAccessible;
      v33 = a3;
      v34 = v5;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v27, 4));
      v11 = (const __CFDictionary *)objc_msgSend(v10, "mutableCopy");

      v9 = SecItemAdd(v11, 0);
      if ((_DWORD)v9 == -25299)
      {
        v12 = qword_1005185D0;
        if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Issuer Certificate already present, cleaning out duplicates with different labels", buf, 2u);
        }
        v13 = SecCertificateCopySerialNumberData(a3, 0);
        v24[0] = kSecClass;
        v24[1] = kSecAttrSerialNumber;
        *(_QWORD *)buf = kSecClassCertificate;
        v26 = v13;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v24, 2));
        v15 = (const __CFDictionary *)objc_msgSend(v14, "mutableCopy");

        while (1)
        {
          while (1)
          {
            v16 = SecItemDelete(v15);
            if (v16)
              break;
            v19 = qword_1005185D0;
            if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v22 = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Success deleting one duplicate", v22, 2u);
            }
          }
          v17 = v16;
          if (v16 == -25300)
            break;
          v18 = qword_1005185D0;
          if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v22 = 67109120;
            v23 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "SECError deleting duplicate certificates %d", v22, 8u);
          }
        }
        v20 = qword_1005185D0;
        if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "No more duplicates to delete", v22, 2u);
        }
        CFRelease(v13);
        v9 = SecItemAdd(v11, 0);

      }
      if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
        sub_1003D8710();

    }
  }
  return v9;
}

void sub_10002AA60(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  NSObject *v5;
  _DWORD *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  _DWORD *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint8_t *v19;
  _QWORD v20[4];
  id v21;
  CFErrorRef v22;
  uint8_t buf[8];
  uint8_t *v24;
  uint64_t v25;
  SecAccessControlRef v26;
  CFErrorRef error;
  _QWORD block[4];
  id v29;
  id v30;
  int v31;
  _QWORD v32[6];
  _QWORD v33[5];
  _QWORD v34[5];
  uint8_t v35[4];
  id v36;

  v3 = a1;
  v4 = a2;
  v31 = -1;
  v5 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Checking to skip", buf, 2u);
  }
  v6 = sub_10002A3C0(&v31);
  if (v31)
  {
    sub_10002AEC4();
    if (v6)
      CFRelease(v6);
    v7 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting new one", buf, 2u);
    }
    v26 = 0;
    error = 0;
    *(_QWORD *)buf = 0;
    v24 = buf;
    v25 = 0x2020000000;
    v26 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
    v8 = *((_QWORD *)v24 + 3);
    if (v8)
    {
      v33[0] = kMAOptionsBAAAccessControls;
      v33[1] = kMAOptionsBAAIgnoreExistingKeychainItems;
      v34[0] = v8;
      v34[1] = &off_1004F4CC0;
      v33[2] = kMAOptionsBAAValidity;
      v33[3] = kMAOptionsBAASCRTAttestation;
      v34[2] = &off_1004F4CD8;
      v34[3] = &off_1004F4CC0;
      v33[4] = kMAOptionsBAAOIDSToInclude;
      v32[0] = kMAOptionsBAAOIDUCRTDeviceIdentifiers;
      v32[1] = kMAOptionsBAAOIDDeviceIdentifiers;
      v32[2] = kMAOptionsBAAOIDHardwareProperties;
      v32[3] = kMAOptionsBAAOIDKeyUsageProperties;
      v32[4] = kMAOptionsBAAOIDAccessControls;
      v32[5] = kMAOptionsBAAOIDDeviceOSInformation;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v32, 6));
      v34[4] = v9;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 5));

      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10002B0A8;
      v17[3] = &unk_1004CF220;
      v19 = buf;
      v18 = v4;
      DeviceIdentityIssueClientCertificateWithCompletion(v3, v10, v17);

    }
    else
    {
      v14 = (id)qword_1005185D0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[__CFError description](error, "description")));
        v16 = objc_msgSend(v15, "UTF8String");
        *(_DWORD *)v35 = 136315138;
        v36 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create access control: %s", v35, 0xCu);

      }
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10002B094;
      v20[3] = &unk_1004CF1F8;
      v21 = v4;
      v22 = error;
      dispatch_async(v3, v20);
      v10 = v21;
    }

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v11 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Retrieved existing Certificate from keychain", buf, 2u);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002AEB0;
    block[3] = &unk_1004CF1D0;
    v12 = v4;
    v29 = v6;
    v30 = v12;
    v13 = v6;
    dispatch_async(v3, block);

  }
}

void sub_10002AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002AEB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10002AEC4()
{
  void *v0;
  const __CFDictionary *v1;
  void *v2;
  const __CFDictionary *v3;
  void *v4;
  const __CFDictionary *v5;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v10[0] = kSecAttrLabel;
  v10[1] = kSecClass;
  v11[0] = CFSTR("ASBAA-cert");
  v11[1] = kSecClassKey;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  v1 = (const __CFDictionary *)objc_msgSend(v0, "mutableCopy");

  if (SecItemDelete(v1) && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D87C0();
  v8[0] = kSecAttrLabel;
  v8[1] = kSecClass;
  v9[0] = CFSTR("ASBAA-cert");
  v9[1] = kSecClassCertificate;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
  v3 = (const __CFDictionary *)objc_msgSend(v2, "mutableCopy");

  if (SecItemDelete(v3) && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D8794();
  v6[0] = kSecAttrLabel;
  v6[1] = kSecClass;
  v7[0] = CFSTR("ASBAA-issuer-cert");
  v7[1] = kSecClassCertificate;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));
  v5 = (const __CFDictionary *)objc_msgSend(v4, "mutableCopy");

  if (SecItemDelete(v5) && os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D8768();

}

uint64_t sub_10002B094(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 40));
}

void sub_10002B0A8(uint64_t a1, __SecCertificate *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  __SecCertificate *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  id v24;

  v7 = a3;
  v8 = a4;
  v9 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  if (v8)
  {
    v10 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D88E4(v10);
    v11 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8844(v11);
    goto LABEL_8;
  }
  v14 = objc_msgSend(v7, "count");
  v15 = qword_1005185D0;
  if (v14 == (id)2)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Succeeded in requesting new BAA certificates", (uint8_t *)&v23, 2u);
    }
    v16 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      v23 = 138412290;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Certificates returned : %@", (uint8_t *)&v23, 0xCu);
    }
    v8 = 0;
    if (!a2)
      goto LABEL_8;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8818();
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, -27401, 0));

    if (!a2)
      goto LABEL_8;
  }
  if (v8)
  {
LABEL_8:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
    (*(void (**)(uint64_t, void *, id))(v12 + 16))(v12, v13, v8);
    goto LABEL_9;
  }
  if (objc_msgSend(v7, "count") != (id)2)
  {
LABEL_28:
    v8 = 0;
    goto LABEL_8;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
  v19 = (__SecCertificate *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 1));
  v20 = sub_10002A6CC(a2, (uint64_t)v18, v19);

  v21 = qword_1005185D0;
  if (!v20)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Saved keys and certificates in keychain", (uint8_t *)&v23, 2u);
    }
    goto LABEL_28;
  }
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D87EC();
  v22 = *(_QWORD *)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, -27403, 0));
  (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v13);
LABEL_9:

}

void sub_10002B3F8(void *a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  const __CFDictionary *v8;
  NSObject *v9;
  CFTypeRef v10;
  _DWORD *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  id v20;
  void *v21;
  const __CFDictionary *v22;
  NSObject *v23;
  id v24;
  id v25;
  NSObject *queue;
  _QWORD v27[4];
  id v28;
  uint8_t *v29;
  _QWORD block[4];
  id v31;
  CFTypeRef v32;
  _QWORD v33[4];
  id v34;
  id v35;
  CFTypeRef v36;
  OSStatus v37;
  uint8_t v38[8];
  CFTypeRef result;
  _QWORD v40[6];
  _QWORD v41[5];
  _QWORD v42[5];
  uint8_t buf[8];
  _QWORD *p_isa;
  uint64_t v45;
  SecAccessControlRef v46;
  __int128 v47;
  CFStringRef v48;

  queue = a1;
  v5 = a3;
  if ((a2 & 1) != 0)
  {
LABEL_21:
    sub_10002AEC4();
    v13 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Requesting new one", buf, 2u);
    }
    result = 0;
    *(_QWORD *)buf = 0;
    p_isa = buf;
    v45 = 0x2020000000;
    v46 = 0;
    v46 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, (CFErrorRef *)&result);
    v14 = p_isa[3];
    if (v14)
    {
      v41[0] = kMAOptionsBAAAccessControls;
      v41[1] = kMAOptionsBAAIgnoreExistingKeychainItems;
      v42[0] = v14;
      v42[1] = &off_1004F4CC0;
      v41[2] = kMAOptionsBAAValidity;
      v41[3] = kMAOptionsBAASCRTAttestation;
      v42[2] = &off_1004F4CD8;
      v42[3] = &off_1004F4CC0;
      v41[4] = kMAOptionsBAAOIDSToInclude;
      v40[0] = kMAOptionsBAAOIDUCRTDeviceIdentifiers;
      v40[1] = kMAOptionsBAAOIDDeviceIdentifiers;
      v40[2] = kMAOptionsBAAOIDHardwareProperties;
      v40[3] = kMAOptionsBAAOIDKeyUsageProperties;
      v40[4] = kMAOptionsBAAOIDAccessControls;
      v40[5] = kMAOptionsBAAOIDDeviceOSInformation;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v40, 6));
      v42[4] = v15;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 5));

      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10002BB30;
      v27[3] = &unk_1004CF220;
      v29 = buf;
      v28 = v5;
      DeviceIdentityIssueClientCertificateWithCompletion(queue, v16, v27);

    }
    else
    {
      v17 = (id)qword_1005185D0;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)result, "description")));
        v25 = objc_msgSend(v24, "UTF8String");
        LODWORD(v47) = 136315138;
        *(_QWORD *)((char *)&v47 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create access control: %s", (uint8_t *)&v47, 0xCu);

      }
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002BB18;
      block[3] = &unk_1004CF1F8;
      v31 = v5;
      v32 = result;
      dispatch_async(queue, block);
      v16 = v31;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_36;
  }
  v6 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Checking to skip", buf, 2u);
  }
  result = 0;
  *(_QWORD *)&v47 = kSecAttrLabel;
  *((_QWORD *)&v47 + 1) = kSecClass;
  *(_QWORD *)buf = CFSTR("ASBAA-cert");
  p_isa = &kSecClassKey->isa;
  v48 = kSecReturnRef;
  v45 = (uint64_t)&__kCFBooleanTrue;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v47, 3));
  v8 = (const __CFDictionary *)objc_msgSend(v7, "mutableCopy");

  v37 = SecItemCopyMatching(v8, &result);
  if (v37)
  {
    v9 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "No BAA key found", v38, 2u);
    }
    if (result)
    {
      CFRelease(result);
      result = 0;
    }

    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8A24();
    v10 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v10 = result;

  v11 = sub_10002A3C0(&v37);
  if (v37)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003D89C4();
LABEL_12:
      v12 = 0;
      goto LABEL_13;
    }
    v12 = 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)&v47 = kSecAttrLabel;
    *((_QWORD *)&v47 + 1) = kSecClass;
    *(_QWORD *)buf = CFSTR("ASBAA-issuer-cert");
    p_isa = &kSecClassCertificate->isa;
    v48 = kSecReturnRef;
    v45 = (uint64_t)&__kCFBooleanTrue;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v47, 3));
    v22 = (const __CFDictionary *)objc_msgSend(v21, "mutableCopy");

    v37 = SecItemCopyMatching(v22, &result);
    if (v37)
    {
      v23 = qword_1005185D0;
      if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "No BAA certificate found", v38, 2u);
      }
      if (result)
      {
        CFRelease(result);
        v12 = 0;
        result = 0;
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = (void *)result;
    }

    if (!v37)
      goto LABEL_33;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003D8964();
LABEL_13:
      if (!v37)
        goto LABEL_33;
    }
  }
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v37)
    goto LABEL_21;
  v12 = 0;
  v11 = 0;
  v10 = 0;
LABEL_33:
  v18 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Retrieved existing Certificate from keychain", buf, 2u);
  }
  v19 = objc_alloc_init((Class)NSMutableArray);
  objc_msgSend(v19, "addObject:", v11);

  objc_msgSend(v19, "addObject:", v12);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10002BB00;
  v33[3] = &unk_1004CF248;
  v35 = v5;
  v36 = v10;
  v34 = v19;
  v20 = v19;
  dispatch_async(queue, v33);

LABEL_36:
}

void sub_10002BADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002BB00(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4], 0);
}

uint64_t sub_10002BB18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0, *(_QWORD *)(a1 + 40));
}

void sub_10002BB30(uint64_t a1, __SecCertificate *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  __SecCertificate *v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  int v22;
  id v23;

  v7 = a3;
  v8 = a4;
  v9 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  if (v8)
  {
    v10 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D88E4(v10);
    v11 = (void *)qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8844(v11);
    goto LABEL_8;
  }
  v12 = objc_msgSend(v7, "count");
  v13 = qword_1005185D0;
  if (v12 == (id)2)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Succeeded in requesting new BAA certificates", (uint8_t *)&v22, 2u);
    }
    v14 = qword_1005185D0;
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      v22 = 138412290;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Certificates returned : %@", (uint8_t *)&v22, 0xCu);
    }
    v8 = 0;
    if (!a2)
      goto LABEL_8;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
      sub_1003D8818();
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, -27401, 0));

    if (!a2)
      goto LABEL_8;
  }
  if (v8)
  {
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_9;
  }
  if (objc_msgSend(v7, "count") != (id)2)
  {
LABEL_28:
    v8 = 0;
    goto LABEL_8;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
  v17 = (__SecCertificate *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 1));
  v18 = sub_10002A6CC(a2, (uint64_t)v16, v17);

  v19 = qword_1005185D0;
  if (!v18)
  {
    if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Saved keys and certificates in keychain", (uint8_t *)&v22, 2u);
    }
    goto LABEL_28;
  }
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D87EC();
  v20 = *(_QWORD *)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100503170));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, -27403, 0));
  (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v20 + 16))(v20, 0, 0, v21);

LABEL_9:
}

void sub_10002BE74(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10002C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10002C2DC(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.asd.dfe", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);
  v2 = (void *)qword_100511610;
  qword_100511610 = (uint64_t)v1;

}

uint64_t sub_10002C30C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002C31C(uint64_t a1)
{

}

intptr_t sub_10002C324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "PLMCCRRqEw4moT9R:UtPlzRffoEpw7Ue1:SFkZRA5Ek9YzhDRs:TWWnmIjkBlMfHmma:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10002D154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_10002D23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10002D26C(int a1)
{
  NSObject *v2;
  _QWORD v4[4];
  int v5;

  v2 = qword_1005185D0;
  if (os_log_type_enabled((os_log_t)qword_1005185D0, OS_LOG_TYPE_ERROR))
    sub_1003D8A84(a1, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002D2FC;
  v4[3] = &unk_1004CED28;
  v5 = a1;
  return AnalyticsSendEventLazy(CFSTR("com.apple.asd.error"), v4);
}

id sub_10002D2FC(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("errorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 32)));
  v4[1] = CFSTR("type");
  v5[0] = v1;
  v5[1] = &off_1004F4CF0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return v2;
}

void sub_10002D3F0(id a1)
{
  C7RiKwi0qHUD3RW9 *v1;
  void *v2;

  v1 = objc_opt_new(C7RiKwi0qHUD3RW9);
  v2 = (void *)qword_100511618;
  qword_100511618 = (uint64_t)v1;

}

void sub_10002D62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10002D8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10002DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10002E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v15;

  _Unwind_Resume(a1);
}

void sub_10002E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_10002E368(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = a2;
  v4 = (char *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v3);
        (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      v4 = (char *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_10002E464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002E488(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  free(*(void **)(a1 + 40));
}

void sub_10002E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10002E6D0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  **(_QWORD **)(a1 + 48) = objc_msgSend(*(id *)(a1 + 32), "foundItemCount");
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10002E99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002EA30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002EA40(uint64_t a1)
{

}

void sub_10002EA48(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  id obj;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = a2;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v19)
  {
    v18 = *(_QWORD *)v25;
    *(_QWORD *)&v3 = 138412290;
    v16 = v3;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v25 != v18)
        objc_enumerationMutation(obj);
      v5 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v4);
      v6 = objc_alloc_init((Class)NSMutableDictionary);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v9 = *(id *)(a1 + 32);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v28, 16, v16);
      if (v10)
      {
        v11 = *(_QWORD *)v21;
        do
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v21 != v11)
              objc_enumerationMutation(v9);
            v13 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v12);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributeSet"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "attributeForKey:", v13));

            if (v15)
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKey:", v15, v13);

            v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        }
        while (v10);
      }

      objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      if (*(_DWORD *)(a1 + 56))
      {
        if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") >= *(unsigned int *)(a1 + 56))
          break;
      }
      if ((id)++v4 == v19)
      {
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
        if (v19)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_10002ED50()
{
  void *v0;
  void *v1;

  objc_end_catch();
  JUMPOUT(0x10002ED84);
}

void sub_10002ED60()
{
  JUMPOUT(0x10002ED6CLL);
}

uint64_t sub_10002ED8C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 32));
}

void sub_10002EFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10002F02C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "LygrmXh7W0Hs2O8n:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002F074(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002F2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10002F318(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "LygrmXh7W0Hs2O8n:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002F360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_10002F524(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "LygrmXh7W0Hs2O8n:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002F56C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_10002F730(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "LygrmXh7W0Hs2O8n:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002F778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_10002F93C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "N2XtGIRzgUKLkZMS:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002F984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002FB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_10002FB48(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "N2XtGIRzgUKLkZMS:", a4);
  if (result != (id)2)
  {
    if (result != (id)1)
      return result;
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002FB90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100030068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1000303C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100030448(id a1, int *a2, unsigned int a3, CSSearchableItem *a4)
{
  ++*a2;
}

uint64_t sub_100030458(uint64_t a1, _DWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2 != 0);
}

void sub_1000305B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100030600(id a1, int *a2, unsigned int a3, CSSearchableItem *a4)
{
  ++*a2;
}

uint64_t sub_100030610(uint64_t a1, _DWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2 > 0);
}

void sub_100030690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000309B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100030EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100031538(uint64_t a1, int a2)
{
  void *v4;
  NSObject *v5;
  _QWORD block[4];
  id v7;
  id v8;
  int v9;

  v4 = *(void **)(a1 + 40);
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000315D0;
  block[3] = &unk_1004CF450;
  v7 = v4;
  v9 = a2;
  v8 = *(id *)(a1 + 48);
  dispatch_async(v5, block);

}

void sub_1000315D0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v2, &off_1004F4D38);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100031620(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  int v10;

  v5 = *(void **)(a1 + 40);
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000316B8;
  block[3] = &unk_1004CF450;
  v8 = v5;
  v10 = a3;
  v9 = *(id *)(a1 + 48);
  dispatch_async(v6, block);

}

void sub_1000316B8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v2, &off_1004F4D50);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10003186C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100511628;
  qword_100511628 = (uint64_t)v1;

}

id sub_100031B34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "f5FVXJrOBjzaLi8u:", *(_QWORD *)(a1 + 40));
}

void sub_10003239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000323CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000323DC(uint64_t a1)
{

}

void sub_1000323E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "GyF0atX3JpCKc9pK"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10003241C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "GyF0atX3JpCKc9pK"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t sub_100032718()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_100032754()
{
  uint64_t v0;

  sub_100032718();
  return swift_deallocClassInstance(v0, 72, 7);
}

void sub_100032800(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21[5];

  v3 = v2;
  if (a2)
  {
    v4 = a2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)sub_10003308C(12);
      v8 = sub_10003308C(32);
      v21[0] = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = sub_100032FB4(v4);
      if (!v9)
      {
LABEL_12:

        __break(1u);
        return;
      }
      v10 = v9;
      v11 = Dictionary.description.getter(v9, &type metadata for AnyHashable);
      v13 = v12;
      swift_bridgeObjectRelease(v10);
      v20 = sub_100036778(v11, v13, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v7 + 4, v7 + 12);

      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received push with payload: %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1);
      sub_100033080(v8);
      sub_100033080((uint64_t)v7);
    }
    else
    {

    }
    sub_100032EB8(v3 + OBJC_IVAR____TtCC3asd18PushServiceManager12PushDelegate_pushDispatchManager, (uint64_t)v21);
    sub_100032EFC(v21, v21[3]);
    v16 = v4;
    v17 = sub_100032F20(v16);
    if (v17)
    {
      v18 = v17;
      sub_100070514();
      swift_bridgeObjectRelease(v18);

      sub_100032F94(v21);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
  oslog = Logger.logObject.getter(a1);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v14))
  {
    v15 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Push received with no message", v15, 2u);
    sub_100033080((uint64_t)v15);
  }

}

void sub_100032ACC()
{
  _swift_stdlib_reportUnimplementedInitializer("asd.PushDelegate", 16, "init()", 6, 0);
  __break(1u);
}

id sub_100032B04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushServiceManager.PushDelegate(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void variable initialization expression of ASFinanceStoreHelper.errorDomain()
{
  sub_100032BC8();
  sub_100038334();
}

unint64_t sub_100032BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100503520;
  if (!qword_100503520)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100503520);
  }
  return result;
}

void variable initialization expression of PrecomputationManager.analyticsManager(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for ASAnalyticsManager();
  v3 = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1004D1008;
  *a1 = v3;
  sub_100028D0C();
}

uint64_t sub_100032C48(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100032C88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100503530;
  if (!qword_100503530)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100503530);
  }
  return result;
}

uint64_t variable initialization expression of RavioliManager.monitoringTask()
{
  return 0;
}

uint64_t _s3asd14RavioliManagerC17currentFetchTasks33_B5E58E12329358626A8B49370FDD58A1LLSDy10Foundation4UUIDVScTyyts5NeverOGGvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for UUID(0);
  v1 = sub_100032C48(&qword_100503528);
  v2 = sub_100032C88();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v0, v1, v2);
}

id variable initialization expression of ASDConfigurationManager.notificationCenter()
{
  return objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
}

uint64_t variable initialization expression of AssessmentPayloadStore.assessmentPayloadFilter()
{
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
}

uint64_t variable initialization expression of CoordRange.spansAntimeridian()
{
  return 0;
}

uint64_t type metadata accessor for PushServiceManager()
{
  return objc_opt_self(_TtC3asd18PushServiceManager);
}

uint64_t sub_100032DB8()
{
  return type metadata accessor for PushServiceManager.PushDelegate(0);
}

uint64_t type metadata accessor for PushServiceManager.PushDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_100503690;
  if (!qword_100503690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushServiceManager.PushDelegate);
  return result;
}

uint64_t sub_100032DF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for PDSPushEnvironment()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1005037C0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_1004CF950);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1005037C0);
  }
}

uint64_t sub_100032EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_100032EFC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100032F20(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "userInfo");

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_100032F94(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100032FB4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "userInfo");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_10003301C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100033030(result, a2);
  return result;
}

uint64_t sub_100033030(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t _s3asd10CoordRangeV9westLimitSdSgvpfi_0()
{
  return 0;
}

uint64_t sub_100033080(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_10003308C(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

void type metadata accessor for DefaultsKeys()
{
  sub_100035800();
}

void type metadata accessor for DefaultsKeys.ConfigData()
{
  sub_100035800();
}

void sub_1000330AC()
{
  uint64_t v0;

  v0 = sub_1000357DC();
  sub_100035270(v0, qword_1005185E8);
  sub_1000352B0(v0, (uint64_t)qword_1005185E8);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x6C6172656E6567, 0xE700000000000000);
  sub_100028D0C();
}

uint64_t sub_100033120@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(a2, v9);
  v10 = String._bridgeToObjectiveC()();
  sub_1000356D4();
  v11 = objc_msgSend(a1, "dataForKey:", v10);

  if (!v11)
  {
    sub_1000356A0();
    __asm { BR              X2 }
  }
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = type metadata accessor for JSONDecoder(0);
  sub_100035780(v15);
  JSONDecoder.init()();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, a2, &protocol descriptor for UserDefaultsKey.NumRequirements, &unk_1004B74EC);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a5, AssociatedTypeWitness, v12, v14, AssociatedTypeWitness, a4);
  sub_1000357E4();
  sub_1000356A0();
  return sub_100033030(v18, v19);
}

void sub_1000333D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;

  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_100033120(v8, a1, a2, a3, a4);

}

uint64_t sub_10003344C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Class isa;
  NSString v18;

  v11 = type metadata accessor for JSONEncoder(0);
  sub_100035780(v11);
  JSONEncoder.init()();
  v12 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12, a3, &protocol descriptor for UserDefaultsKey.NumRequirements, &unk_1004B74EC);
  v14 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, AssociatedTypeWitness, a6);
  v16 = v15;
  sub_1000357E4();
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(a3, v12);
  v18 = String._bridgeToObjectiveC()();
  sub_1000356D4();
  objc_msgSend(a2, "setObject:forKey:", isa, v18);

  return sub_100033030(v14, v16);
}

uint64_t sub_100033618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = sub_100032C48(&qword_100503920);
  __chkstk_darwin(v1);
  sub_1000356DC();
  v2 = type metadata accessor for URL(0);
  sub_100035270(v2, qword_100518600);
  v3 = sub_1000352B0(v2, (uint64_t)qword_100518600);
  URL.init(string:)(0xD000000000000026, 0x80000001003E34E0);
  result = sub_1000352C8(v0, 1, v2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3, v0, v2);
  __break(1u);
  return result;
}

uint64_t sub_1000336E4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10003370C(32123, 0xE200000000000000);
  qword_100518618 = result;
  unk_100518620 = v1;
  return result;
}

uint64_t sub_10003370C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100032C48(&qword_100503910);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_100033E14((uint64_t)v17);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (char *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_QWORD *)v5;
    }
    v9 = Data._Representation.init(_:)(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      sub_1000357F8();
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = Data._Representation.init(count:)(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_1000349E8();
    __asm { BR              X12 }
  }
  sub_1000351FC(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_100032EFC(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_100034C88, 0, &type metadata for Data._Representation, v3, v4);
  sub_1000357F8();
  v17[0] = v19;
  sub_100032F94(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_100033B98(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100032C48(&qword_100503948);
  v10 = sub_1000355DC(&qword_100503950, &qword_100503948, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_100032EFC(v8, v9);
  v3 = *v2 + 32;
  v4 = v3 + *(_QWORD *)(*v2 + 16);
  swift_bridgeObjectRetain(a1);
  sub_100034C88(v3, v4, &v7);
  swift_bridgeObjectRelease(a1);
  v5 = v7;
  sub_100032F94(v8);
  return v5;
}

uint64_t sub_100033C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v8 = sub_100032C48(&qword_100503928);
  v14[3] = v8;
  v14[4] = sub_1000352D4();
  v9 = (_QWORD *)swift_allocObject(&unk_1004CF9C0, 48, 7);
  v14[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  sub_100032EFC(v14, v8);
  v10 = sub_1000355DC(&qword_100503938, &qword_100503940, (uint64_t)&protocol conformance descriptor for <A> UnsafeMutableBufferPointer<A>);
  Slice<>.withUnsafeBytes<A>(_:)(&v13, sub_100034C88, 0, v8, &type metadata for Data._Representation, v10);
  v11 = v13;
  sub_100032F94(v14);
  return v11;
}

uint64_t *sub_100033D3C()
{
  if (qword_100503430 != -1)
    swift_once(&qword_100503430, sub_1000336E4);
  return &qword_100518618;
}

uint64_t sub_100033D7C()
{
  return 0x69666E6F43647361;
}

uint64_t sub_100033DA0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  sub_100033D3C();
  v2 = qword_100518618;
  v3 = unk_100518620;
  *a1 = qword_100518618;
  a1[1] = v3;
  return sub_100033DD0(v2, v3);
}

uint64_t sub_100033DD0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_retain)();
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100033E14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_100503918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100033E54()
{
  qword_100518628 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *sub_100033E68()
{
  if (qword_100503438 != -1)
    swift_once(&qword_100503438, sub_100033E54);
  return &qword_100518628;
}

unint64_t sub_100033EA8()
{
  return sub_100035664(21);
}

uint64_t sub_100033EC0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_100033E68();
  v2 = qword_100518628;
  *a1 = qword_100518628;
  return sub_10003566C(v2);
}

void sub_100033EE8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Date(0);
  sub_100035270(v0, qword_100518630);
  v1 = sub_1000352B0(v0, (uint64_t)qword_100518630);
  static Date.distantPast.getter(v1);
  sub_100028D0C();
}

void sub_100033F2C()
{
  uint64_t v0;
  unint64_t v1;

  v0 = type metadata accessor for Date(0);
  v1 = sub_10003561C();
  qword_100518650 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &unk_1004CFE48, v0, v1);
  sub_100028D0C();
}

void sub_100033F74(void *a1)
{
  float v2;
  BOOL v3;
  float v4;

  if (sub_100060030((uint64_t)a1) && ((v2 = sub_1000600CC((uint64_t)a1), v2 >= 0.0) ? (v3 = v2 < 1000.0) : (v3 = 0), v3))
  {
    sub_100028D0C();
  }
  else
  {
    sub_100072200(0.0, 1000.0);
    sub_100084A3C(a1, v4);
  }
}

void sub_100033FD0()
{
  qword_100518660 = (uint64_t)&_swiftEmptyArrayStorage;
}

void sub_100033FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = type metadata accessor for PushPayload(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000356DC();
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = objc_msgSend(v5, "standardUserDefaults");
  v7 = sub_100061494(v6);

  v16 = (_QWORD *)v7;
  v8 = &v16;
  sub_100034ECC((uint64_t (*)(unint64_t, __n128))sub_10003557C);
  v10 = v16[2];
  if (v10 < v9)
  {
    __break(1u);
  }
  else
  {
    sub_100035424(v9, v10);
    sub_1000353A4(a1, v1);
    v8 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) != 0)
      goto LABEL_3;
  }
  sub_1000357EC(0, v8[2] + 1);
  v8 = v14;
LABEL_3:
  v12 = v8[2];
  v11 = v8[3];
  if (v12 >= v11 >> 1)
  {
    sub_1000357EC(v11 > 1, v12 + 1);
    v8 = v15;
  }
  v8[2] = v12 + 1;
  sub_100035598(v1, (uint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12);
  v13 = objc_msgSend(v5, "standardUserDefaults");
  sub_100061A04((uint64_t)v8, v13);
  sub_1000356D4();

}

void sub_10003415C(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000341D0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100034268 + 4 * byte_1004070F5[a1]))(0x6361437261656C63);
}

uint64_t sub_100034268(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v4;

  v2 = 0xEB00000000736568;
  if (a1 == 0x6361437261656C63 && v1 == 0xEB00000000736568)
  {
    v4 = 1;
    v2 = v1;
  }
  else
  {
    v4 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

void sub_10003433C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  id v17;
  _QWORD v18[7];
  uint64_t v19;

  v0 = type metadata accessor for PushPayload(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v18[5] = (char *)v18 - v6;
  v7 = __chkstk_darwin(v5);
  v18[3] = (char *)v18 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)v18 - v9;
  v11 = (void *)objc_opt_self(NSUserDefaults);
  v12 = objc_msgSend(v11, "standardUserDefaults");
  v13 = sub_100061494(v12);

  v19 = v13;
  if (*(_QWORD *)(v13 + 16))
  {
    v18[1] = v11;
    v18[2] = v4;
    v14 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v18[6] = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRetain(v13);
    v18[4] = v14;
    sub_1000353A4(v13 + v14, (uint64_t)v10);
    sub_100035758();
    __asm { BR              X9 }
  }
  sub_100035424(*(_QWORD *)(v13 + 16), 0);
  v16 = v19;
  v17 = objc_msgSend(v11, "standardUserDefaults");
  sub_100061A04(v16, v17);
  swift_bridgeObjectRelease(v16);

}

uint64_t sub_100034948(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v9 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_1000356BC(v9);
    return v10 | 4;
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_1000356BC(v6);
    return v7 | 8;
  }
}

_QWORD *sub_1000349A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_100034D7C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100035254, (uint64_t)v5, a1, a2);
}

void sub_1000349E8()
{
  __asm { BR              X11 }
}

_QWORD *sub_100034A48@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = sub_100034E88((uint64_t)&v7, v3, v2, BYTE6(a1));
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_100034C88@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100034CFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (result)
  {
    v7 = result;
    swift_bridgeObjectRetain(a4);
    result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100034D7C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  if (a3)
  {
    v6 = a4 - a3;
    v7 = a3;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  result = a1(&v9, v7, v6);
  if (!v4)
    return (_QWORD *)v9;
  return result;
}

char *sub_100034DDC(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

_QWORD *sub_100034E88(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a1, a1 + a4);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

void sub_100034ECC(uint64_t (*a1)(unint64_t, __n128))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v1;
  v5 = type metadata accessor for PushPayload(0);
  v6 = __chkstk_darwin(v5);
  v36 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v35 = (uint64_t)&v32 - v9;
  __chkstk_darwin(v8);
  v37 = (uint64_t)&v32 - v11;
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 16);
  if (v13)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v15 = *(_QWORD *)(v10 + 72);
    v16 = swift_bridgeObjectRetain(*v1);
    v17 = 0;
    v33 = v14;
    while (1)
    {
      v18 = a1(v12 + v14, v16);
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease(v12);
        return;
      }
      if ((v18 & 1) != 0)
        break;
      ++v17;
      v14 += v15;
      if (v13 == v17)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease(v12);
    if (!__OFADD__(v17, 1))
    {
      v19 = *(_QWORD *)(v12 + 16);
      if (v17 + 1 == v19)
        return;
      v20 = v15 + v14;
      v21 = v17 + 1;
      v32 = v1;
      v34 = v15;
      while (v21 < v19)
      {
        v22 = v3;
        v38 = v20;
        v23 = v37;
        sub_1000353A4(v12 + v20, v37);
        v24 = ((uint64_t (*)(uint64_t))a1)(v23);
        sub_1000353E8(v23);
        if ((v24 & 1) != 0)
        {
          v3 = v22;
          v25 = v34;
        }
        else
        {
          v3 = v22;
          v25 = v34;
          if (v21 != v17)
          {
            if ((v17 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v26 = *v3;
            v27 = *(_QWORD *)(*v3 + 16);
            if (v17 >= v27)
              goto LABEL_32;
            sub_1000353A4(v26 + v33 + v17 * v34, v35);
            if (v21 >= v27)
              goto LABEL_33;
            sub_1000353A4(v26 + v38, v36);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
            v3 = v32;
            *v32 = v26;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100096850(v26);
              v26 = v31;
              *v3 = v31;
            }
            if (v17 >= *(_QWORD *)(v26 + 16))
              goto LABEL_34;
            sub_100035538(v36, v26 + v33 + v17 * v25);
            if (v21 >= *(_QWORD *)(*v3 + 16))
              goto LABEL_35;
            sub_100035538(v35, *v3 + v38);
          }
          if (__OFADD__(v17++, 1))
            goto LABEL_30;
        }
        v30 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_29;
        v12 = *v3;
        v19 = *(_QWORD *)(*v3 + 16);
        ++v21;
        v20 = v38 + v25;
        if (v30 == v19)
          return;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
  }
}

_QWORD *sub_1000351B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1000349A0(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

_QWORD *sub_1000351E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1000351B0(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000351FC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100035214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_100034CFC(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_100035254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_100035214(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t *sub_100035270(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000352B0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000352C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

unint64_t sub_1000352D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100503930;
  if (!qword_100503930)
  {
    v1 = sub_100035350(&qword_100503928);
    sub_1000355DC(&qword_100503938, &qword_100503940, (uint64_t)&protocol conformance descriptor for <A> UnsafeMutableBufferPointer<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100503930);
  }
  return result;
}

uint64_t sub_100035350(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100035394()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000353A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000353E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PushPayload(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100035424(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    sub_10003D490(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v4 = v12;
  }
  v13 = *(_QWORD *)(type metadata accessor for PushPayload(0) - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v14 + v15 * v6;
  result = swift_arrayDestroy(v16, v7);
  if (!v7)
    goto LABEL_16;
  v17 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v17, a2))
    goto LABEL_22;
  result = sub_10003EA20(v14 + v15 * a2, v17 - a2, v16);
  v18 = *(_QWORD *)(v4 + 16);
  v19 = __OFADD__(v18, v8);
  v20 = v18 - v7;
  if (!v19)
  {
    *(_QWORD *)(v4 + 16) = v20;
LABEL_16:
    *v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100035538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003557C(uint64_t a1)
{
  char v1;

  sub_10003415C(a1);
  return v1 & 1;
}

uint64_t sub_100035598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000355DC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100035350(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003561C()
{
  unint64_t result;

  result = qword_100503958;
  if (!qword_100503958)
  {
    result = swift_getWitnessTable(&unk_100407998, &unk_1004CFE48);
    atomic_store(result, (unint64_t *)&qword_100503958);
  }
  return result;
}

void type metadata accessor for DefaultsKeys.ServerJSONRetryStatus()
{
  sub_100035800();
}

unint64_t sub_100035664(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_10003566C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

double sub_100035674()
{
  uint64_t v0;
  __int16 v1;
  double result;

  v1 = *(_WORD *)(v0 - 148);
  result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

uint64_t sub_100035690()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_100034948(v2, v1, v0);
}

unint64_t sub_1000356BC(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1000356D4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000356F4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10003301C(v0, v1);
}

uint64_t sub_100035700()
{
  return 0x6361437261656C63;
}

uint64_t sub_100035714()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10003571C()
{
  return 0x6E6F436863746566;
}

uint64_t sub_100035730()
{
  return 0x6F72506863746566;
}

uint64_t sub_100035744()
{
  return 0x7265536863746566;
}

uint64_t sub_100035758()
{
  return 0x6464416863746566;
}

uint64_t sub_100035780(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000357DC()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_1000357E4()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_1000357EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003D490(a1, a2, 1, v2);
}

uint64_t sub_1000357F8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 216));
}

BOOL ASBackgroundDeferralStatus.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

BOOL sub_100035828(uint64_t *a1, uint64_t *a2)
{
  return sub_100039A04(*a1, *a2);
}

uint64_t sub_100035834()
{
  _QWORD *v0;

  return sub_10005828C(*v0);
}

void sub_10003583C(int a1)
{
  Swift::UInt *v1;

  sub_100058318(a1, *v1);
}

uint64_t sub_100035844(uint64_t a1)
{
  _QWORD *v1;

  return sub_100058554(a1, *v1);
}

BOOL sub_10003584C@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  char v4;

  result = ASBackgroundDeferralStatus.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_10003587C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100035888()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100503980);
  sub_1000352B0(v0, (uint64_t)qword_100503980);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
}

uint64_t ASBackgroundActivityManager.registerActivity(identifier:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t aBlock[5];
  _QWORD *v25;

  if (qword_100503458 != -1)
    swift_once(&qword_100503458, sub_100035888);
  v10 = sub_1000357DC();
  sub_1000352B0(v10, (uint64_t)qword_100503980);
  v11 = sub_1000371B0();
  Logger.logObject.getter(v11);
  v12 = sub_1000371A8();
  if (sub_100037190(v12))
  {
    v13 = (uint8_t *)sub_10003308C(12);
    v14 = sub_10003308C(32);
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_1000371CC();
    sub_1000371F4(v15, v16, aBlock);
    sub_1000371D4();
    sub_1000371C0(v17, v18);
    sub_100037188(a2);
    sub_100037174((void *)&_mh_execute_header, v4, v5, "Registering background activity: %{public}s.", v13);
    sub_10003716C(v14);
    sub_100033080(v14);
    sub_100033080((uint64_t)v13);

  }
  else
  {

    sub_1000371A0(a2);
  }
  v19 = (_QWORD *)swift_allocObject(&unk_1004CFA18, 48, 7);
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  aBlock[4] = (uint64_t)sub_1000361A0;
  v25 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100035B14;
  aBlock[3] = (uint64_t)&unk_1004CFA30;
  v20 = _Block_copy(aBlock);
  v21 = v25;
  sub_1000371CC();
  swift_retain(a4);
  swift_retain(v19);
  swift_release(v21);
  v22 = sub_1000371E8();
  xpc_activity_register((const char *)(v22 + 32), XPC_ACTIVITY_CHECK_IN, v20);
  swift_release(v22);
  _Block_release(v20);
  return swift_release(v19);
}

uint64_t sub_100035B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

Swift::Void __swiftcall ASBackgroundActivityManager.unregisterActivity(identifier:)(Swift::String identifier)
{
  NSObject *v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  object = identifier._object;
  if (qword_100503458 != -1)
    swift_once(&qword_100503458, sub_100035888);
  v3 = sub_1000357DC();
  sub_1000352B0(v3, (uint64_t)qword_100503980);
  v4 = sub_1000371B0();
  Logger.logObject.getter(v4);
  v5 = sub_1000371A8();
  if (os_log_type_enabled(v1, v5))
  {
    v6 = (uint8_t *)sub_10003308C(12);
    v7 = sub_10003308C(32);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1000371CC();
    v11 = sub_1000371F4(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    sub_100037188((uint64_t)object);
    sub_100037174((void *)&_mh_execute_header, v1, v5, "Unregistering background activity: %{public}s.", v6);
    sub_10003716C(v7);
    sub_100033080(v7);
    sub_100033080((uint64_t)v6);

  }
  else
  {

    sub_1000371A0((uint64_t)object);
  }
  v10 = sub_1000371E8();
  xpc_activity_unregister((const char *)(v10 + 32));
  swift_release(v10);
}

void sub_100035CC8(_xpc_activity_s *a1, NSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  xpc_activity_state_t state;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;

  v10 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  state = xpc_activity_get_state(a1);
  if (state == 3)
  {
    if (qword_100503458 != -1)
      swift_once(&qword_100503458, sub_100035888);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_1000352B0(v21, (uint64_t)qword_100503980);
    v40 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v23, "Background activity is being deferred.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
  else if (state == 2)
  {
    v40 = a2;
    if (qword_100503458 != -1)
      swift_once(&qword_100503458, sub_100035888);
    v14 = type metadata accessor for Logger(0);
    sub_1000352B0(v14, (uint64_t)qword_100503980);
    v15 = swift_bridgeObjectRetain_n(a3, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    v18 = os_log_type_enabled(v16, v17);
    v38 = a4;
    v39 = a5;
    if (v18)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v42 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(a3);
      v41 = sub_100036778((uint64_t)v40, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Running background activity: %{public}s.", v19, 0xCu);
      swift_arrayDestroy(v20, 1);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    xpc_activity_set_state(a1, 4);
    v25 = swift_bridgeObjectRetain_n(a3, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v42 = v29;
      *(_DWORD *)v28 = 136446210;
      swift_bridgeObjectRetain(a3);
      v30 = v40;
      v41 = sub_100036778((uint64_t)v40, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Background activity %{public}s is continuing.", v28, 0xCu);
      swift_arrayDestroy(v29, 1);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      v30 = v40;
    }
    v31 = v38;
    v32 = swift_allocObject(&unk_1004CFAB8, 24, 7);
    *(_QWORD *)(v32 + 16) = a1;
    v33 = type metadata accessor for TaskPriority(0);
    sub_100037020((uint64_t)v12, 1, 1, v33);
    v34 = (_QWORD *)swift_allocObject(&unk_1004CFAE0, 88, 7);
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v31;
    v35 = v39;
    v34[5] = v39;
    v34[6] = sub_100037004;
    v34[7] = v32;
    v34[8] = a1;
    v34[9] = v30;
    v34[10] = a3;
    swift_unknownObjectRetain_n(a1, 2);
    swift_bridgeObjectRetain(a3);
    swift_retain(v35);
    v36 = sub_1000494E4((uint64_t)v12, (uint64_t)&unk_100503A48, (uint64_t)v34);
    swift_release(v36);
  }
}

uint64_t sub_100036174()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000361A0(_xpc_activity_s *a1)
{
  uint64_t v1;

  sub_100035CC8(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000361AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000361BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000361C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v8[7] = v14;
  v8[8] = v15;
  v8[6] = a8;
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc(a4[1]);
  v8[9] = v11;
  *v11 = v8;
  v11[1] = sub_100036240;
  return v13(a6, a7);
}

uint64_t sub_100036240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003629C, 0, 0);
}

uint64_t sub_10003629C()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  _UNKNOWN **v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v0 + 80);
  v3 = &off_100503000;
  if (v2 == 1)
  {
    v36 = v0 + 32;
    xpc_activity_set_state(*(xpc_activity_t *)(v0 + 48), 5);
    if (qword_100503458 != -1)
      swift_once(&qword_100503458, sub_100035888);
    v15 = sub_1000357DC();
    v16 = sub_1000352B0(v15, (uint64_t)qword_100503980);
    v17 = sub_10003717C();
    v7 = v16;
    Logger.logObject.getter(v17);
    v18 = sub_1000371A8();
    v19 = os_log_type_enabled(v16, v18);
    v20 = *(_QWORD *)(v0 + 64);
    if (v19)
    {
      v21 = *(_QWORD *)(v0 + 56);
      v22 = (uint8_t *)sub_10003308C(12);
      v23 = sub_10003308C(32);
      v37 = v23;
      *(_DWORD *)v22 = 136446210;
      swift_bridgeObjectRetain(v20);
      *(_QWORD *)(v0 + 32) = sub_100036778(v21, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v0 + 40, v22 + 4, v22 + 12);
      sub_100037188(v20);
      sub_100037174((void *)&_mh_execute_header, v7, v18, "Background activity %{public}s finished running.", v22);
      sub_10003716C(v23);
      v24 = v23;
      v3 = &off_100503000;
      sub_100033080(v24);
      v14 = (uint64_t)v22;
      goto LABEL_11;
    }
    v26 = *(_QWORD *)(v0 + 64);
LABEL_15:
    sub_1000371A0(v26);
    goto LABEL_16;
  }
  if (v2)
  {
    *(_QWORD *)(v0 + 16) = v2;
    return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ASBackgroundActivityCompletionStatus, v0 + 16, &type metadata for ASBackgroundActivityCompletionStatus, &type metadata for Int);
  }
  v36 = v0 + 32;
  xpc_activity_set_state(*(xpc_activity_t *)(v0 + 48), 3);
  if (qword_100503458 != -1)
    swift_once(&qword_100503458, sub_100035888);
  v4 = sub_1000357DC();
  v5 = sub_1000352B0(v4, (uint64_t)qword_100503980);
  v6 = sub_10003717C();
  v7 = v5;
  Logger.logObject.getter(v6);
  v8 = sub_1000371A8();
  v9 = sub_100037190(v8);
  v10 = *(_QWORD *)(v0 + 64);
  if (!v9)
  {
    v26 = *(_QWORD *)(v0 + 64);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v0 + 56);
  v12 = (uint8_t *)sub_10003308C(12);
  v13 = sub_10003308C(32);
  v37 = v13;
  *(_DWORD *)v12 = 136446210;
  swift_bridgeObjectRetain(v10);
  *(_QWORD *)(v0 + 40) = sub_100036778(v11, v10, &v37);
  v3 = &off_100503000;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
  sub_100037188(v10);
  sub_100037174((void *)&_mh_execute_header, v5, v1, "Background activity %{public}s was deferred", v12);
  sub_10003716C(v13);
  sub_100033080(v13);
  v14 = (uint64_t)v12;
LABEL_11:
  sub_100033080(v14);
LABEL_16:

  if (v3[139] != (_UNKNOWN *)-1)
    swift_once(&qword_100503458, sub_100035888);
  v27 = sub_1000357DC();
  sub_1000352B0(v27, (uint64_t)qword_100503980);
  v28 = sub_10003717C();
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  v31 = os_log_type_enabled(v29, v30);
  v32 = *(_QWORD *)(v0 + 64);
  if (v31)
  {
    v33 = *(_QWORD *)(v0 + 56);
    v34 = (uint8_t *)sub_10003308C(12);
    v35 = sub_10003308C(32);
    v37 = v35;
    *(_DWORD *)v34 = 136446210;
    swift_bridgeObjectRetain(v32);
    *(_QWORD *)(v0 + 24) = sub_100036778(v33, v32, &v37);
    sub_1000371C0(v0 + 24, v36);
    sub_100037188(v32);
    sub_100037174((void *)&_mh_execute_header, v29, v30, "Background activity %{public}s is exiting.", v34);
    sub_10003716C(v35);
    sub_100033080(v35);
    sub_100033080((uint64_t)v34);
  }
  else
  {
    sub_1000371A0(*(_QWORD *)(v0 + 64));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id ASBackgroundActivityManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id ASBackgroundActivityManager.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id ASBackgroundActivityManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100036778(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_100036848(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100036FA0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100036FA0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100032F94(v12);
  return v7;
}

_QWORD *sub_100036848(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10003699C((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100036A60(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_10003699C(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100036A60(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100036AF4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100036CC8(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_100036CC8((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_100036AF4(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100036C64(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

_QWORD *sub_100036C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100032C48(&qword_1005039D0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100036CC8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_1005039D0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100036E60(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100036D9C(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100036D9C(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_100036E60(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unint64_t sub_100036EE4()
{
  unint64_t result;

  result = qword_100503998;
  if (!qword_100503998)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ASBackgroundDeferralStatus, &type metadata for ASBackgroundDeferralStatus);
    atomic_store(result, (unint64_t *)&qword_100503998);
  }
  return result;
}

unint64_t sub_100036F24()
{
  unint64_t result;

  result = qword_1005039A0;
  if (!qword_1005039A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ASBackgroundActivityCompletionStatus, &type metadata for ASBackgroundActivityCompletionStatus);
    atomic_store(result, (unint64_t *)&qword_1005039A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASBackgroundDeferralStatus()
{
  return &type metadata for ASBackgroundDeferralStatus;
}

ValueMetadata *type metadata accessor for ASBackgroundActivityCompletionStatus()
{
  return &type metadata for ASBackgroundActivityCompletionStatus;
}

uint64_t type metadata accessor for ASBackgroundActivityManager()
{
  return objc_opt_self(_TtC3asd27ASBackgroundActivityManager);
}

uint64_t sub_100036FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100036FE0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_100037004()
{
  uint64_t v0;

  return xpc_activity_should_defer(*(xpc_activity_t *)(v0 + 16));
}

uint64_t sub_100037020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10003702C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_unknownObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100037070(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = (int *)v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_100503A44);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100037118;
  return sub_1000361C4(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100037118()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003716C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

void sub_100037174(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_10003717C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_100037188(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

BOOL sub_100037190(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000371A0(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_1000371A8()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_1000371B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000371C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_1000371CC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000371E8()
{
  uint64_t v0;
  uint64_t v1;

  return String.utf8CString.getter(v1, v0);
}

uint64_t sub_1000371F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100036778(v4, v3, a3);
}

void PKPass.arrivalAirportLat.getter()
{
  sub_1000376B0((uint64_t (*)(void))sub_100037244, (void (*)(uint64_t))sub_10003736C);
}

void sub_100037244()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  if (objc_msgSend(v0, "style") == (id)4 && objc_msgSend(v0, "transitType") == (id)1)
  {
    sub_100039600(v0, (SEL *)&selRef_primaryFields, &qword_100503A98, PKPassField_ptr);
    if (v1)
    {
      v2 = sub_100037748(1, v1);
      v6 = v2;
      if (v4 == v5 >> 1)
      {
        swift_unknownObjectRelease(v2);
        return;
      }
      if (v4 < (uint64_t)(v5 >> 1))
      {
        v7 = *(id *)(v3 + 8 * v4);
        swift_unknownObjectRelease(v6);
        v8 = objc_msgSend(v7, "value");

        if (v8)
        {
          v9 = objc_msgSend(v8, "uppercaseString");

          static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        }
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

id sub_10003736C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 v3;
  unint64_t v4;
  id v11;
  double v12;

  v2 = sub_100038A28(a1, a2);
  if ((v2 & 0x10000) != 0)
    return 0;
  v3 = v2;
  if (qword_100503500 != -1)
    swift_once(&qword_100503500, sub_1000997E0);
  v4 = sub_100061D9C(v3, qword_1005062E8);
  if ((v4 & 0x100000000) != 0)
    return 0;
  _H0 = v4;
  __asm { FCVT            S8, H0 }
  v11 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v12) = _S8;
  return objc_msgSend(v11, "initWithFloat:", v12);
}

void PKPass.arrivalAirportLong.getter()
{
  sub_1000376B0((uint64_t (*)(void))sub_100037244, (void (*)(uint64_t))sub_100037444);
}

id sub_100037444(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 v3;
  unint64_t v4;
  id v11;
  double v12;

  v2 = sub_100038A28(a1, a2);
  if ((v2 & 0x10000) != 0)
    return 0;
  v3 = v2;
  if (qword_100503500 != -1)
    swift_once(&qword_100503500, sub_1000997E0);
  v4 = sub_100061D9C(v3, qword_1005062E8);
  if ((v4 & 0x100000000) != 0)
    return 0;
  _H0 = WORD1(v4);
  __asm { FCVT            S8, H0 }
  v11 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v12) = _S8;
  return objc_msgSend(v11, "initWithFloat:", v12);
}

void PKPass.departureAirportLat.getter()
{
  sub_1000376B0((uint64_t (*)(void))sub_100037520, (void (*)(uint64_t))sub_10003736C);
}

void sub_100037520()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  if (objc_msgSend(v0, "style") == (id)4 && objc_msgSend(v0, "transitType") == (id)1)
  {
    sub_100039600(v0, (SEL *)&selRef_primaryFields, &qword_100503A98, PKPassField_ptr);
    if (!v1)
      goto LABEL_18;
    v2 = v1;
    v3 = v1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v1 >> 62)
    {
      if (v1 >= 0)
        v1 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v1))
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      if ((v2 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_9:
        v5 = v4;
        swift_bridgeObjectRelease(v2);
        v6 = objc_msgSend(v5, "value");

        if (v6)
        {
          v7 = objc_msgSend(v6, "uppercaseString");

          static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        }
        return;
      }
      if (*(_QWORD *)(v3 + 16))
      {
        v4 = *(id *)(v2 + 32);
        goto LABEL_9;
      }
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease(v2);
  }
}

void PKPass.departureAirportLong.getter()
{
  sub_1000376B0((uint64_t (*)(void))sub_100037520, (void (*)(uint64_t))sub_100037444);
}

void sub_1000376B0(uint64_t (*a1)(void), void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_getObjectType(v2);
  v5 = a1();
  if (v6)
  {
    v7 = v6;
    a2(v5);
    swift_bridgeObjectRelease(v7);
  }
  sub_1000399A0();
}

uint64_t sub_100037708(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

uint64_t sub_100037748(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v17 = v2;
  else
    v17 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v2);
LABEL_4:
  result = sub_10005F948(0, v3, v5, v2);
  if ((v7 & 1) != 0)
    v8 = v5;
  else
    v8 = result;
  if (v5 < v8)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v4)
  {
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v9 = _CocoaArrayWrapper.endIndex.getter(v10);
    result = swift_bridgeObjectRelease(v2);
  }
  else
  {
    v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8)
    goto LABEL_41;
  if (v8 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v4)
  {
    if (v2 < 0)
      v12 = v2;
    else
      v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v2);
  }
  else
  {
    v11 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v5)
    goto LABEL_43;
  if ((v2 & 0xC000000000000001) == 0 || v8 == v5)
    goto LABEL_28;
  if (v8 >= (unint64_t)v5)
  {
LABEL_44:
    __break(1u);
    return result;
  }
  sub_100039884(0, &qword_100503A98, PKPassField_ptr);
  v13 = v8;
  do
  {
    v14 = v13 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v13);
    v13 = v14;
  }
  while (v5 != v14);
LABEL_28:
  if (!v4)
    return v2 & 0xFFFFFFFFFFFFFF8;
  if (v2 < 0)
    v16 = v2;
  else
    v16 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v15 = _CocoaArrayWrapper.subscript.getter(v8, v5, v16);
  swift_bridgeObjectRelease_n(v2, 2);
  return v15;
}

uint64_t sub_100037930(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_10005F948(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if (v3 < v5)
    goto LABEL_9;
  if ((v5 & 0x8000000000000000) == 0)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100037998()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  id v9;
  void *v10;
  id v11;
  uint64_t countAndFlagsBits;
  uint64_t v13;
  uint64_t v14;

  if (objc_msgSend(v1, "style") != (id)4)
    return 0;
  if (objc_msgSend(v1, "transitType") != (id)1)
    return 0;
  v2 = sub_1000395A0(v1);
  if (!v2)
    return 0;
  v3 = sub_100037930(2, v2);
  v7 = v3;
  if (v5 == v6 >> 1)
  {
    swift_unknownObjectRelease(v3);
    return 0;
  }
  if (v5 >= (uint64_t)(v6 >> 1))
  {
    __break(1u);
  }
  else
  {
    v0 = *(_QWORD *)(v4 + 8 * v5);
    swift_bridgeObjectRetain(v0);
    result = swift_unknownObjectRelease(v7);
    if (!((unint64_t)v0 >> 62))
    {
      if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_9;
LABEL_20:
      swift_bridgeObjectRelease(v0);
      return 0;
    }
  }
  if (v0 < 0)
    v13 = v0;
  else
    v13 = v0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v0);
  v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  result = swift_bridgeObjectRelease(v0);
  if (!v14)
    goto LABEL_20;
LABEL_9:
  if ((v0 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v0 + 32);
LABEL_12:
    v10 = v9;
    swift_bridgeObjectRelease(v0);
    v11 = objc_msgSend(v10, "value");
    if (v11)
    {
      countAndFlagsBits = String.init(_:)(v11)._countAndFlagsBits;

      return countAndFlagsBits;
    }

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100037B08()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  Swift::String v10;

  v1 = objc_msgSend(v0, "organizationName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  v4 = String.lowercased()();
  swift_bridgeObjectRelease(v3);
  v10 = v4;
  v9[0] = 32;
  v9[1] = 0xE100000000000000;
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  v5 = sub_100039848();
  v6 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v9, v8, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v5, v5, v5);
  swift_bridgeObjectRelease(v4._object);
  return v6;
}

Class PKPass.anyDate.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  Class isa;
  uint64_t v35;
  uint64_t v36;

  v1 = sub_100032C48(&qword_100503A50);
  v2 = __chkstk_darwin(v1);
  v36 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v35 - v5;
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v35 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v35 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v35 - v21;
  if (!sub_1000399C0(v20, "relevantDate"))
  {
    v23 = sub_1000398E0((uint64_t)v14, 1);
LABEL_5:
    if (sub_1000399C0(v23, "expirationDate"))
    {
      sub_100039974();

      v0 = *(void **)(v16 + 32);
      sub_100039960((uint64_t)v12, (uint64_t)v19);
      sub_1000398E0((uint64_t)v12, 0);
      v25 = sub_100039934((uint64_t)v12);
      if (!v24)
      {
        sub_100039960((uint64_t)v22, (uint64_t)v12);
LABEL_25:
        sub_100037FB0((uint64_t)v14);
        goto LABEL_26;
      }
    }
    else
    {
      v25 = sub_1000398E0((uint64_t)v12, 1);
    }
    if (sub_1000399C0(v25, "modifiedDate"))
    {
      sub_100039974();

      v0 = *(void **)(v16 + 32);
      sub_100039960((uint64_t)v9, (uint64_t)v19);
      sub_1000398E0((uint64_t)v9, 0);
      v26 = sub_100039934((uint64_t)v9);
      if (!v24)
      {
        sub_100039960((uint64_t)v22, (uint64_t)v9);
LABEL_24:
        sub_100037FB0((uint64_t)v12);
        goto LABEL_25;
      }
    }
    else
    {
      v26 = sub_1000398E0((uint64_t)v9, 1);
    }
    if (sub_1000399C0(v26, "ingestedDate"))
    {
      sub_100039974();

      sub_100039960((uint64_t)v6, (uint64_t)v19);
      sub_1000398E0((uint64_t)v6, 0);
      v27 = sub_100039934((uint64_t)v6);
      if (!v24)
      {
        sub_100039960((uint64_t)v22, (uint64_t)v6);
LABEL_23:
        sub_100037FB0((uint64_t)v9);
        goto LABEL_24;
      }
    }
    else
    {
      v27 = sub_1000398E0((uint64_t)v6, 1);
    }
    v28 = sub_1000399C0(v27, "signingDate");
    if (v28)
    {
      v29 = v28;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v30 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
      v31 = v36;
      v30(v36, v19, v15);
      sub_1000398E0(v31, 0);
      v32 = sub_100039934(v31);
      if (!v24)
      {
        v30((uint64_t)v22, (char *)v31, v15);
LABEL_22:
        sub_100037FB0((uint64_t)v6);
        goto LABEL_23;
      }
    }
    else
    {
      v31 = v36;
      v32 = sub_1000398E0(v36, 1);
    }
    static Date.distantPast.getter(v32);
    sub_100037FB0(v31);
    goto LABEL_22;
  }
  sub_100039974();

  v0 = *(void **)(v16 + 32);
  sub_100039960((uint64_t)v14, (uint64_t)v19);
  sub_1000398E0((uint64_t)v14, 0);
  v23 = sub_100039934((uint64_t)v14);
  if (v24)
    goto LABEL_5;
  sub_100039960((uint64_t)v22, (uint64_t)v14);
LABEL_26:
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
  return isa;
}

uint64_t sub_100037FB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_100503A50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037FF0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13[12];
  _QWORD __src[12];
  _BYTE __dst[96];
  uint64_t v16;
  uint64_t v17;

  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  swift_beginAccess(&static ASDConfigurationManager.shared, v12, 0, 0);
  v0 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v13);

  sub_1000396E0((uint64_t)v13, (uint64_t)__src, &qword_100503A78);
  if (__src[5] == 1)
    return 0;
  memcpy(__dst, __src, sizeof(__dst));
  sub_1000396E0((uint64_t)&__dst[40], (uint64_t)&v16, &qword_100503A80);
  sub_100039724(&v16);
  sub_10003974C(v13);
  sub_1000396E0((uint64_t)&v16, (uint64_t)&v17, &qword_100503A80);
  v1 = v17;
  if (!v17)
    return 0;
  v2 = sub_100037B08();
  v4 = v3;
  v5 = sub_100061DF4(v2, v3, v1);
  v7 = v6;
  sub_100039820(&v16);
  swift_bridgeObjectRelease(v4);
  if (!v7)
    return 0;
  swift_bridgeObjectRetain(v7);
  v8 = sub_100037708(v5, v7);
  v10 = v9;
  swift_bridgeObjectRelease_n(v7, 2);
  if (v10)
    return v8;
  else
    return 0;
}

void PKPass.boardingPassFirstName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;

  sub_100037998();
  if (v2)
  {
    v3 = sub_1000399E4();
    if (v5)
    {
      if ((v4 & 1) == 0)
      {
        v6 = sub_1000399F0(v3);
        __chkstk_darwin(v6);
        v7 = sub_100039908();
        sub_1000398EC(v7, v8, sub_100039690);
        sub_100039968();
        sub_100039950();
        if (!*(_QWORD *)(v1 + 16))
        {
          sub_100039998();
          goto LABEL_10;
        }
        sub_1000371CC();
        sub_100039998();
        goto LABEL_8;
      }
      v9 = sub_1000399F0(v3);
      __chkstk_darwin(v9);
      v10 = sub_100039908();
      sub_1000398EC(v10, v11, sub_1000398BC);
      sub_100039968();
      sub_100039950();
      sub_1000399D8();
      sub_100039980();
      if (v0)
      {
LABEL_8:
        sub_1000371CC();
        sub_1000399AC();
        v13 = v12;
        sub_100039950();
        v14 = objc_allocWithZone((Class)NSString);
        v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v13);
        objc_msgSend(v14, "initWithString:", v15);
        sub_100039950();

      }
    }
    else
    {
      sub_100039950();
    }
  }
LABEL_10:
  sub_1000399C8();
}

uint64_t sub_1000382D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = (uint64_t *)(a1 + 32 * v1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

void sub_100038334()
{
  uint64_t v0;
  id v1;
  NSString v2;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  v2 = String._bridgeToObjectiveC()();
  sub_100039950();
  objc_msgSend(v1, "initWithString:", v2);

  sub_1000399A0();
}

void PKPass.boardingPassLastName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100037998();
  if (v2)
  {
    v3 = sub_1000399E4();
    if (v5)
    {
      if ((v4 & 1) != 0)
      {
        v9 = sub_1000399F0(v3);
        __chkstk_darwin(v9);
        v10 = sub_100039908();
        sub_1000398EC(v10, v11, sub_1000398BC);
        sub_100039968();
        sub_100039950();
        if (!*(_QWORD *)(v1 + 16))
        {
          sub_100039998();
          goto LABEL_11;
        }
        sub_1000371CC();
        sub_100039998();
      }
      else
      {
        v6 = sub_1000399F0(v3);
        __chkstk_darwin(v6);
        v7 = sub_100039908();
        sub_1000398EC(v7, v8, sub_1000398BC);
        sub_100039968();
        sub_100039950();
        sub_1000399D8();
        sub_100039980();
        if (!v0)
          goto LABEL_11;
      }
      sub_1000371CC();
      sub_1000399AC();
      v12 = sub_100039950();
      sub_1000399FC(v12, (unint64_t *)&qword_100503520, NSString_ptr);
      sub_100038334();
    }
    sub_100039950();
  }
LABEL_11:
  sub_1000399C8();
}

void PKPass.evaluate(attribute:expression:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  _OWORD v39[2];

  v6 = v3;
  v9 = sub_1000399FC(a1, (unint64_t *)&qword_100503520, NSString_ptr);
  v10 = sub_100039924((uint64_t)"SELF.style", 10);
  sub_1000398D4(v10);
  sub_10003992C();
  if ((v5 & 1) != 0)
  {
    v12 = "style";
LABEL_3:
    v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", sub_100039958(v11, v12));
LABEL_4:
    v14 = v13;
LABEL_6:
    *(_QWORD *)(a3 + 24) = sub_100039884(0, &qword_100503A68, NSNumber_ptr);
    *(_QWORD *)a3 = v14;
    return;
  }
  v15 = sub_100039924((uint64_t)"SELF.anyDate", 12);
  sub_1000398D4(v15);
  sub_10003992C();
  v16 = sub_100039924((uint64_t)"SELF.transitType", 16);
  sub_1000398D4(v16);
  sub_10003992C();
  if ((v5 & 1) != 0)
  {
    v12 = "transitType";
    goto LABEL_3;
  }
  v17 = sub_100039924((uint64_t)"SELF.organizationName", 21);
  sub_1000398D4(v17);
  sub_10003992C();
  v18 = sub_100039924((uint64_t)"SELF.arrivalAirportLat", 22);
  sub_1000398D4(v18);
  sub_10003992C();
  if ((v5 & 1) != 0)
  {
    v23 = sub_100039958(v19, "arrivalAirportLat");
    if (v23)
    {
      v14 = v23;
      goto LABEL_6;
    }
    goto LABEL_18;
  }
  v20 = sub_100039924((uint64_t)"SELF.arrivalAirportLong", 23);
  sub_1000398D4(v20);
  sub_10003992C();
  v21 = sub_100039924((uint64_t)"SELF.departureAirportLat", 24);
  sub_1000398D4(v21);
  sub_10003992C();
  v22 = sub_100039924((uint64_t)"SELF.departureAirportLong", 25);
  sub_1000398D4(v22);
  sub_10003992C();
  v24 = sub_100039924((uint64_t)"SELF.boardingPassFirstName", 26);
  sub_1000398D4(v24);
  sub_10003992C();
  if ((v5 & 1) != 0)
  {
    v27 = sub_100039958(v25, "boardingPassFirstName");
    if (v27)
    {
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)a3 = v27;
      return;
    }
    goto LABEL_18;
  }
  v26 = sub_100039924((uint64_t)"SELF.boardingPassLastName", 25);
  sub_1000398D4(v26);
  sub_10003992C();
  v28 = sub_100039924((uint64_t)"SELF.hasLocationRelevancyInfo", 29);
  sub_1000398D4(v28);
  sub_10003992C();
  if ((v5 & 1) != 0)
  {
    v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", objc_msgSend(v6, "hasLocationRelevancyInfo"));
    goto LABEL_4;
  }
  v29 = sub_100039924((uint64_t)"SELF.embeddedLocationsArray.@firstObject", 40);
  v30 = sub_1000398D4(v29);

  if ((v30 & 1) != 0)
  {
    sub_100039600(v6, (SEL *)&selRef_embeddedLocationsArray, &qword_100503A60, PKLocation_ptr);
    if (!v31)
    {
LABEL_39:
      __break(1u);
      return;
    }
    v32 = v31;
    v33 = v31 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 >= 0)
        v31 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v31))
        goto LABEL_25;
    }
    else if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_25:
      if ((v32 & 0xC000000000000001) != 0)
      {
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v32);
        goto LABEL_28;
      }
      if (*(_QWORD *)(v33 + 16))
      {
        v34 = *(id *)(v32 + 32);
LABEL_28:
        v35 = v34;
        v36 = swift_bridgeObjectRelease(v32);
        *(_QWORD *)(a3 + 24) = sub_1000399FC(v36, &qword_100503A60, PKLocation_ptr);
        *(_QWORD *)a3 = v35;
        return;
      }
      __break(1u);
      __break(1u);
      goto LABEL_39;
    }
    swift_bridgeObjectRelease(v32);
LABEL_18:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  v37 = objc_msgSend(a2, "expressionValueWithObject:context:", v6, 0);
  if (v37)
  {
    v38 = v37;
    _bridgeAnyObjectToAny(_:)(v37);
    swift_unknownObjectRelease(v38);
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  sub_1000396E0((uint64_t)v39, a3, &qword_100503A58);
}

unint64_t sub_100038A28(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v3;
  unint64_t countAndFlagsBits;
  void *object;
  _QWORD *v6;
  BOOL v7;
  unint64_t result;
  int v9;
  unint64_t v10;
  Swift::String_optional v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  if (String.count.getter() != 3)
  {
LABEL_40:
    v24 = 0;
    v23 = 1;
    return v24 | (v23 << 16);
  }
  v25 = a2;
  swift_bridgeObjectRetain(a2);
  v3 = String.Iterator.next()();
  if (v3.value._object)
  {
    countAndFlagsBits = v3.value._countAndFlagsBits;
    object = v3.value._object;
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      v7 = countAndFlagsBits == 2573 && object == (void *)0xE200000000000000;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 2573, 0xE200000000000000, 0) & 1) != 0)
      {
        break;
      }
      if ((Character._isSingleScalar.getter(countAndFlagsBits, object) & 1) != 0)
      {
        result = sub_1000392B4(countAndFlagsBits, (unint64_t)object);
        if ((result & 0x100000000) != 0)
          goto LABEL_45;
        if ((result & 0xFFFFFF80) == 0)
        {
          result = sub_1000392B4(countAndFlagsBits, (unint64_t)object);
          if ((result & 0x100000000) != 0)
            goto LABEL_46;
          v9 = result;
          result = swift_bridgeObjectRelease(object);
          if ((v9 & 0xFFFFFF00) != 0)
            goto LABEL_44;
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) != 0)
            goto LABEL_15;
LABEL_22:
          sub_10003D4A4();
          v6 = v12;
LABEL_15:
          v10 = v6[2];
          if (v10 >= v6[3] >> 1)
          {
            sub_10003D4A4();
            v6 = v13;
          }
          v6[2] = v10 + 1;
          *((_BYTE *)v6 + v10 + 32) = v9;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease(object);
LABEL_19:
      v11 = String.Iterator.next()();
      countAndFlagsBits = v11.value._countAndFlagsBits;
      object = v11.value._object;
      if (!v11.value._object)
        goto LABEL_24;
    }
    swift_bridgeObjectRelease(object);
    LOBYTE(v9) = 10;
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      goto LABEL_22;
    goto LABEL_15;
  }
  v6 = _swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease(v25);
  v14 = v6[2];
  if (v14)
  {
    v15 = (unsigned __int8 *)(v6 + 4);
    do
    {
      v17 = *v15++;
      v16 = v17;
      if ((v17 - 91) > 0xFFFFFFE5)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009169C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v19 = _swiftEmptyArrayStorage[2];
        v18 = _swiftEmptyArrayStorage[3];
        if (v19 >= v18 >> 1)
          sub_10009169C((_QWORD *)(v18 > 1), v19 + 1, 1);
        _swiftEmptyArrayStorage[2] = v19 + 1;
        *((_BYTE *)&_swiftEmptyArrayStorage[4] + v19) = v16;
      }
      --v14;
    }
    while (v14);
  }
  result = swift_bridgeObjectRelease(v6);
  if (_swiftEmptyArrayStorage[2] != 3)
  {
    swift_release(_swiftEmptyArrayStorage);
    goto LABEL_40;
  }
  LOWORD(v20) = 0;
  v21 = 32;
  while (1)
  {
    v22 = *((unsigned __int8 *)_swiftEmptyArrayStorage + v21) - 65;
    if ((v22 & 0xFFFFFF00) != 0)
      break;
    v20 = 32 * (v20 & 0x7FF) + v22;
    if ((v20 & 0x10000) != 0)
      goto LABEL_43;
    if (++v21 == 35)
    {
      swift_release(_swiftEmptyArrayStorage);
      v23 = 0;
      v24 = (unsigned __int16)v20;
      return v24 | (v23 << 16);
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t sub_100038D04(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100038D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t sub_100038D68(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  _QWORD v60[4];

  v60[3] = a4;
  if (a1 < 0)
  {
    v45 = "Must take zero or more splits";
    v46 = "Swift/Collection.swift";
    v47 = 29;
    v48 = 22;
    goto LABEL_42;
  }
  v10 = swift_allocObject(&unk_1004CFB68, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v52 = v10 + 16;
  v57 = swift_allocObject(&unk_1004CFB90, 24, 7);
  *(_QWORD *)(v57 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_1000391B0(v33 | (v11 << 16), v57, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v57;
LABEL_38:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v50 = v10;
  v51 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v49 = v13 | (v12 << 16);
  v58 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v60[0] = v18;
    v60[1] = v19;
    v21 = a3(v60);
    if (v6)
    {
      swift_release(v50);
      swift_release(v57);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      v15 = String.index(after:)(v15, a5, a6);
      goto LABEL_23;
    }
    v23 = (v16 >> 14 == v15 >> 14) & a2;
    if (v23 != 1)
    {
      if (v15 >> 14 < v16 >> 14)
        goto LABEL_40;
      v24 = String.subscript.getter(v16, v15, a5, a6);
      v53 = v26;
      v54 = v25;
      v55 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10003D4B0();
        v14 = v31;
      }
      v28 = v14[2];
      if (v28 >= v14[3] >> 1)
      {
        sub_10003D4B0();
        v14 = v32;
      }
      v14[2] = v28 + 1;
      v29 = &v14[4 * v28];
      v29[4] = v24;
      v29[5] = v55;
      v29[6] = v54;
      v29[7] = v53;
      *(_QWORD *)v52 = v14;
    }
    v30 = String.index(after:)(v15, a5, a6);
    v15 = v30;
    *(_QWORD *)(v57 + 16) = v30;
    if ((v23 & 1) == 0 && v14[2] == v51)
      break;
    v16 = v30;
    v17 = v30;
LABEL_23:
    if (v58 == v15 >> 14)
      goto LABEL_32;
  }
  v17 = v30;
  v16 = v30;
LABEL_32:
  if (v58 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v50);
    v34 = v57;
    goto LABEL_38;
  }
  if (v58 >= v17 >> 14)
  {
    v35 = String.subscript.getter(v17, v49, a5, a6);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_bridgeObjectRelease(a6);
    sub_10004E258();
    v42 = *(_QWORD *)(*(_QWORD *)v52 + 16);
    sub_10004E2B0(v42);
    v14 = *(_QWORD **)v52;
    v14[2] = v42 + 1;
    v43 = &v14[4 * v42];
    v43[4] = v35;
    v43[5] = v37;
    v43[6] = v39;
    v43[7] = v41;
    *(_QWORD *)v52 = v14;
    goto LABEL_37;
  }
LABEL_40:
  v45 = "Range requires lowerBound <= upperBound";
  v46 = "Swift/Range.swift";
  v47 = 39;
  v48 = 17;
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v47, 2, v46, v48);
  __break(1u);
  return result;
}

uint64_t sub_1000391B0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    sub_10004E258();
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_10004E2B0(v14);
    v15 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v15 + 16) = v14 + 1;
    v16 = (_QWORD *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17);
  __break(1u);
  return result;
}

unint64_t sub_1000392B4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_100039390(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_100039390(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_10003942C(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_100039498(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_10003942C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_100034948(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_100039498(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v12 = result >> 16;
          v6 = _StringObject.sharedUTF8.getter(a2, a3);
          v5 = v12;
        }
        if (v5 != v7 && (*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v9 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
          }
          while (v9 == 128);
          return v8 << 16;
        }
      }
      v8 = v5;
      return v8 << 16;
    }
    v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v10 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v10)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_1000395A0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "frontFieldBuckets");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_100032C48(&qword_100503A90);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void sub_100039600(void *a1, SEL *a2, unint64_t *a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t v8;

  v6 = objc_msgSend(a1, *a2);
  if (v6)
  {
    v7 = v6;
    v8 = sub_100039884(0, a3, a4);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  }
  sub_1000399A0();
}

uint64_t sub_100039668(uint64_t *a1, uint64_t *a2)
{
  return sub_100038D28(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_100039690(uint64_t *a1)
{
  uint64_t v1;

  return sub_100039668(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_1000396AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000396D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000396E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100032C48(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_100039724(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t *sub_10003974C(uint64_t *a1)
{
  sub_10003979C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t sub_10003979C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  if (a6 != 1)
  {
    swift_bridgeObjectRelease(a6);
    sub_1000397F4(a7, a8);
    swift_bridgeObjectRelease(a11);
    return swift_bridgeObjectRelease(a12);
  }
  return result;
}

uint64_t sub_1000397F4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

_QWORD *sub_100039820(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_100039848()
{
  unint64_t result;

  result = qword_100503A88;
  if (!qword_100503A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100503A88);
  }
  return result;
}

uint64_t sub_100039884(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000398BC(uint64_t *a1)
{
  return sub_100039690(a1) & 1;
}

uint64_t sub_1000398D4(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000398E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100037020(a1, a2, 1, v2);
}

uint64_t sub_1000398EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *))
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return sub_100038D68(0x7FFFFFFFFFFFFFFFLL, 1u, a3, v5, v4, v3);
}

uint64_t sub_100039908()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100039924(uint64_t a1, uint64_t a2)
{
  return NSString.init(stringLiteral:)(a1, a2, 2);
}

void sub_10003992C()
{
  void *v0;

}

uint64_t sub_100039934(uint64_t a1)
{
  uint64_t v1;

  return sub_1000352C8(a1, 1, v1);
}

uint64_t sub_100039950()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_100039958(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100039960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100039968()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100039974()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100039980()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100039998()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000399AC()
{
  return Substring.lowercased()()._countAndFlagsBits;
}

id sub_1000399C0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000399D8()
{
  uint64_t v0;

  return sub_1000382D4(v0);
}

uint64_t sub_1000399E4()
{
  return sub_100037FF0();
}

uint64_t sub_1000399F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 64) = result;
  *(_QWORD *)(v2 - 56) = v1;
  return result;
}

uint64_t sub_1000399FC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_100039884(0, a2, a3);
}

BOOL sub_100039A04(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_100039A10(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100039A74(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_100039B00 + 4 * byte_100407405[a2]))(0xD000000000000016);
}

void sub_100039B00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (a1 != 0xD000000000000016 || v3 != ((a3 - 32) | 0x8000000000000000))
    sub_100040B3C(a1, a2, 0xD000000000000016);
  sub_1000356D4();
  sub_100039950();
  sub_1000399A0();
}

BOOL sub_100039BA4(char a1, char a2)
{
  return a1 == a2;
}

void sub_100039BB4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_100051520(a1);
  v5 = v4;
  v6 = sub_100051520(a2);
  if (v3 != v6 || v5 != v7)
    _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  sub_100039950();
  sub_1000356D4();
  sub_1000399A0();
}

void sub_100039C28()
{
  sub_100040C20();
  sub_100040D20();
  __asm { BR              X10 }
}

uint64_t sub_100039C8C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100039D1C + 4 * byte_10040740F[a2]))(0x6361437261656C63);
}

void sub_100039D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != 0x6361437261656C63 || v2 != 0xEB00000000736568)
    sub_100040B3C(a1, a2, 0x6361437261656C63);
  sub_1000356D4();
  sub_100039950();
  sub_1000399A0();
}

uint64_t sub_100039DC4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a4);
    return 0;
  }
  else
  {
    sub_1000399FC(a1, &qword_100503BD0, NSPredicate_ptr);
    swift_bridgeObjectRetain(a4);
    v10._countAndFlagsBits = a6;
    v10._object = (void *)0xE600000000000000;
    String.append(_:)(v10);
    v11 = sub_100032C48(&qword_100503BD8);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1004077E0;
    *(_QWORD *)(v12 + 56) = &type metadata for Double;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v12 + 32) = a1;
    v13 = NSPredicate.init(format:_:)(a3, a4, v12);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a4);
  }
  return v13;
}

id ASFinanceStoreHelper.errorDomain.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_errorDomain);
}

id ASFinanceStoreHelper.init()(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v2 = OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_errorDomain;
  sub_1000399FC(a1, (unint64_t *)&qword_100503520, NSString_ptr);
  v3 = v1;
  sub_100038334();
  *(_QWORD *)&v1[v2] = v4;
  type metadata accessor for FinanceStore(0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_store] = static FinanceStore.shared.getter();

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for ASFinanceStoreHelper();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for ASFinanceStoreHelper()
{
  return objc_opt_self(_TtC3asd20ASFinanceStoreHelper);
}

void sub_100039FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0
                                                                        + OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_errorDomain));
  v3 = v2;
  v4 = objc_allocWithZone((Class)NSError);
  sub_10003D250(v1, v3, 174002, 0);
}

Class sub_10003A038(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  Class isa;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    v12 = sub_1000409A0();
    if ((*(_BYTE *)(v1 + *(int *)(v12 + 24) + 16) & 1) != 0)
    {
      v56 = 0u;
      v57 = 0u;
    }
    else
    {
      *(_QWORD *)&v56 = 0;
      *((_QWORD *)&v56 + 1) = 0xE000000000000000;
      sub_100040CC8((uint64_t)&v56);
      v20._countAndFlagsBits = 44;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v12 = sub_100040CC8((uint64_t)&v56);
      *((_QWORD *)&v57 + 1) = &type metadata for String;
    }
    v21 = sub_100040C14(v12, v13, v14, v15, v16, v17, v18, v19, v56);
    sub_10005003C((uint64_t)v21, 108, 0xE100000000000000);
    if ((a1 & 4) == 0)
      goto LABEL_12;
    goto LABEL_10;
  }
  *((_QWORD *)&v57 + 1) = type metadata accessor for Date(0);
  sub_10004048C(&v56);
  v3 = InternalTransaction.transactionDate.getter();
  v11 = sub_100040C14(v3, v4, v5, v6, v7, v8, v9, v10, v56);
  sub_100040CE8((uint64_t)v11, 25716);
  if ((a1 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 4) == 0)
    goto LABEL_12;
LABEL_10:
  v22 = sub_1000409A0();
  v30 = v1 + *(int *)(v22 + 20);
  if ((*(_BYTE *)(v30 + 8) & 1) == 0)
  {
    v31 = *(_QWORD *)v30;
    *((_QWORD *)&v57 + 1) = &type metadata for Int;
    v32 = sub_100040C14(v22, v23, v24, v25, v26, v27, v28, v29, v31);
    sub_10005003C((uint64_t)v32, 100, 0xE100000000000000);
  }
LABEL_12:
  if ((a1 & 8) != 0)
  {
    v33 = sub_1000409A0();
    v41 = (uint64_t *)(v1 + *(int *)(v33 + 32));
    if ((v41[1] & 1) != 0)
    {
      v56 = 0u;
      v57 = 0u;
    }
    else
    {
      v42 = *v41;
      *((_QWORD *)&v57 + 1) = &type metadata for UInt64;
      *(_QWORD *)&v56 = v42;
    }
    v43 = sub_100040C14(v33, v34, v35, v36, v37, v38, v39, v40, v56);
    sub_100040CE8((uint64_t)v43, 29556);
  }
  if ((a1 & 0x10) != 0)
  {
    v44 = sub_1000409A0();
    v45 = *(_BYTE *)(v1 + *(int *)(v44 + 28));
    *((_QWORD *)&v57 + 1) = &type metadata for UInt8;
    LOBYTE(v56) = v45;
    v53 = sub_100040C14(v44, v46, v47, v48, v49, v50, v51, v52, v56);
    sub_100040CE8((uint64_t)v53, 29804);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100039950();
  return isa;
}

uint64_t sub_10003A244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_100032C48(&qword_100503C78);
  v3[5] = sub_10004092C(*(_QWORD *)(v4 - 8));
  v3[6] = sub_1000409B8();
  v5 = type metadata accessor for MapsInsight(0);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v3[9] = sub_1000408C4(v6);
  v7 = sub_100032C48(&qword_100503C80);
  v3[10] = sub_1000408C4(*(_QWORD *)(v7 - 8));
  v8 = type metadata accessor for ApplePayTransactionInsight.Location(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = sub_1000408C4(v9);
  v10 = type metadata accessor for TransactionType(0);
  v3[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[15] = v11;
  v3[16] = sub_10004092C(v11);
  v3[17] = sub_1000409B8();
  v12 = type metadata accessor for ApplePayTransactionInsight(0);
  v3[18] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[19] = v13;
  v3[20] = sub_1000408C4(v13);
  v14 = type metadata accessor for Transaction.Insight(0);
  v3[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[22] = v15;
  v3[23] = sub_1000408C4(v15);
  v16 = type metadata accessor for UUID(0);
  v3[24] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[25] = v17;
  v3[26] = sub_1000408C4(v17);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10003A35C()
{
  uint64_t v0;
  _QWORD *v1;

  InternalTransaction.id.getter();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to FinanceStore.insights(transactionID:)[1]);
  *(_QWORD *)(v0 + 216) = v1;
  *v1 = v0;
  v1[1] = sub_10003A3BC;
  return FinanceStore.insights(transactionID:)(*(_QWORD *)(v0 + 208));
}

uint64_t sub_10003A3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 216);
  v5 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = v1;
  swift_task_dealloc(v4);
  sub_100040AA0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_100040A54();
  return sub_100040964();
}

void sub_10003A434()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  void *v49;
  int *v50;
  uint64_t v51;
  id v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  id v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  int v96;

  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
LABEL_29:
    swift_bridgeObjectRelease(v3);
LABEL_30:
    sub_100040980();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_100040BE8();
    sub_100040B0C();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v84 = v0 + 242;
  v85 = v0 + 240;
  v5 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v83 = *(_QWORD *)(v0 + 120);
  v94 = *(_QWORD *)(v0 + 64);
  v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v96 = enum case for Transaction.Insight.maps(_:);
  v92 = __PAIR64__(enum case for Transaction.Insight.bank(_:), enum case for Transaction.Insight.applePay(_:));
  HIDWORD(v82) = enum case for TransactionType.pointOfSale(_:);
  v93 = *(_QWORD *)(v5 + 72);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v91 = v5;
  v86 = v2;
  while (1)
  {
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 168);
    v95(v7, v6, v8);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v7, v8);
    if (v9 != v96)
      break;
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(v5 + 96))(v10, *(_QWORD *)(v0 + 168));
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 32))(v11, v10, v12);
    MapsInsight.merchant.getter(v13);
    v14 = type metadata accessor for MapsMerchant(0);
    if (sub_100040B54() == 1)
    {
      sub_100040508(*(_QWORD *)(v0 + 48), &qword_100503C78);
    }
    else
    {
      v19 = MapsMerchant.locationLatitude.getter();
      v21 = v20;
      v1 = *(int **)(*(_QWORD *)(v14 - 8) + 8);
      v22 = sub_100040C78();
      if ((v21 & 1) == 0)
      {
        MapsInsight.merchant.getter(v22);
        if (sub_100040B54() == 1)
        {
          sub_100040508(*(_QWORD *)(v0 + 40), &qword_100503C78);
          goto LABEL_25;
        }
        v45 = MapsMerchant.locationLongitude.getter();
        v47 = v46;
        sub_100040C78();
        if ((v47 & 1) == 0)
        {
          v48 = *(_QWORD *)(v0 + 32);
          v49 = *(void **)(v0 + 16);
          v50 = (int *)sub_1000409A0();
          v51 = v48 + v50[6];
          *(_QWORD *)v51 = v19;
          *(_QWORD *)(v51 + 8) = v45;
          *(_BYTE *)(v51 + 16) = 0;
          v52 = sub_100040CBC(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
          objc_msgSend(v49, "distanceFromLocation:", v52);
          v54 = v53;

          if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) != 0)
          {
            if (v54 <= -9.22337204e18)
              goto LABEL_42;
            if (v54 >= 9.22337204e18)
              goto LABEL_43;
            v61 = *(_QWORD *)(v0 + 72);
            v62 = *(_QWORD *)(v0 + 56);
            v63 = *(_QWORD *)(v0 + 32);
            v64 = v63 + v50[5];
            *(_QWORD *)v64 = (uint64_t)v54;
            *(_BYTE *)(v64 + 8) = 0;
            sub_100040C4C(v61, v62, v55, v56, v57, v58, v59, v60, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91,
              v92,
              v93,
              v94);
            *(_BYTE *)(v63 + v50[7]) = 0;
            goto LABEL_26;
          }
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
LABEL_25:
        sub_100040C4C(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56), v23, v24, v25, v26, v27, v28, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91,
          v92,
          v93,
          v94);
LABEL_26:
        v5 = v91;
        goto LABEL_27;
      }
    }
    (*(void (**)(_QWORD, _QWORD))(v94 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
LABEL_27:
    v6 += v93;
    if (!--v4)
    {
      v3 = *(_QWORD *)(v0 + 224);
      goto LABEL_29;
    }
  }
  if (v9 == HIDWORD(v92))
  {
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 32);
    v18 = v17 + *(int *)(sub_1000409A0() + 32);
    *(_QWORD *)v18 = 4;
    *(_BYTE *)(v18 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v16);
    goto LABEL_27;
  }
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 168);
  if (v9 != (_DWORD)v92)
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v0 + 184), v30);
    goto LABEL_27;
  }
  v31 = *(_QWORD *)(v0 + 160);
  v32 = *(_QWORD *)(v0 + 136);
  v87 = *(_QWORD *)(v0 + 144);
  v88 = v31;
  v33 = v5;
  v34 = *(_QWORD *)(v0 + 128);
  v35 = v2;
  v36 = *(_QWORD *)(v0 + 112);
  v89 = *(_QWORD *)(v0 + 80);
  v90 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v33 + 96))(v29, v30);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v31, v29, v87);
  v39 = v37;
  InternalTransaction.transactionType.getter(v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v83 + 104))(v34, HIDWORD(v82), v36);
  sub_1000404C8();
  sub_100040CF0();
  sub_100040CF0();
  v40 = *(unsigned __int16 *)(v0 + 240);
  LODWORD(v37) = *(unsigned __int16 *)(v0 + 242);
  v41 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v41(v34, v36);
  v41(v32, v36);
  if (v40 == (_DWORD)v37)
    v42 = 1;
  else
    v42 = 2;
  v1 = (int *)sub_1000409A0();
  v43 = v39 + v1[8];
  *(_QWORD *)v43 = v42;
  *(_BYTE *)(v43 + 8) = 0;
  ApplePayTransactionInsight.location.getter();
  if (sub_1000352C8(v89, 1, v90) == 1)
  {
    v44 = *(_QWORD *)(v0 + 80);
    v2 = v86;
    (*(void (**)(_QWORD, _QWORD))(v86 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    sub_100040508(v44, &qword_100503C80);
    goto LABEL_26;
  }
  v66 = *(_QWORD *)(v0 + 96);
  v65 = *(_QWORD *)(v0 + 104);
  v67 = *(_QWORD *)(v0 + 80);
  v68 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 32);
  v69 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v67, v68);
  v71 = ApplePayTransactionInsight.Location.latitude.getter(v70);
  v72 = ApplePayTransactionInsight.Location.longitude.getter();
  v73 = v2 + v1[6];
  *(double *)v73 = v71;
  *(double *)(v73 + 8) = v72;
  *(_BYTE *)(v73 + 16) = 0;
  v74 = ApplePayTransactionInsight.isCoarseLocation.getter();
  if ((v74 & 1) != 0)
    v75 = 1;
  else
    v75 = 2;
  if (v74 == 2)
    v76 = 0;
  else
    v76 = v75;
  *(_BYTE *)(v2 + v1[7]) = v76;
  ApplePayTransactionInsight.Location.latitude.getter(v74);
  ApplePayTransactionInsight.Location.longitude.getter();
  v77 = sub_100040CBC(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
  objc_msgSend(v69, "distanceFromLocation:", v77);
  v79 = v78;

  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v68);
  sub_100040AA0(*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
  if ((~*(_QWORD *)&v79 & 0x7FF0000000000000) == 0)
    goto LABEL_44;
  if (v79 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v79 < 9.22337204e18)
  {
    v80 = *(_QWORD *)(v0 + 32) + v1[5];
    *(_QWORD *)v80 = (uint64_t)v79;
    *(_BYTE *)(v80 + 8) = 0;
    goto LABEL_30;
  }
LABEL_46:
  __break(1u);
}

uint64_t sub_10003AA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100040980();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  sub_100040B0C();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ASFinanceStoreHelper.queryTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:sortOrder:sortByAttributes:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)(v9 + 120) = v20;
  *(_QWORD *)(v9 + 128) = v8;
  *(_OWORD *)(v9 + 104) = v19;
  *(_OWORD *)(v9 + 88) = v18;
  *(_QWORD *)(v9 + 72) = a7;
  *(_QWORD *)(v9 + 80) = a8;
  *(_QWORD *)(v9 + 56) = a5;
  *(_QWORD *)(v9 + 64) = a6;
  *(_QWORD *)(v9 + 40) = a3;
  *(_QWORD *)(v9 + 48) = a4;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(v9 + 32) = a2;
  v10 = sub_1000409A0();
  *(_QWORD *)(v9 + 136) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 144) = v11;
  *(_QWORD *)(v9 + 152) = sub_10004092C(v11);
  *(_QWORD *)(v9 + 160) = sub_1000409B8();
  *(_QWORD *)(v9 + 168) = sub_1000409B8();
  v12 = ((uint64_t (*)(_QWORD))type metadata accessor for InternalTransactionResult)(0);
  *(_QWORD *)(v9 + 176) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 184) = v13;
  *(_QWORD *)(v9 + 192) = sub_1000408C4(v13);
  sub_100040A54();
  return swift_task_switch(v14, v15, v16);
}

uint64_t sub_10003AB44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;

  sub_10003C15C(v0[8], v0[9], v0[10], v0[11]);
  v0[25] = v1;
  v0[26] = v2;
  v3 = (uint64_t **)swift_task_alloc(dword_100503ABC);
  v0[27] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10003AC30;
  v4 = sub_100040C58();
  return sub_10003C388(v5, v6, v7, v8, v4, v13, v9, v10, v11, v12);
}

uint64_t sub_10003AC30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_100040B24();
  v3 = *(_QWORD *)(v2 + 216);
  *v4 = *v1;
  *(_QWORD *)(v2 + 224) = v0;
  swift_task_dealloc(v3);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10003AC80()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, unint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t UniqueAndReserveCapacityIfNot;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v1 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v0 + 200), *(double *)(v0 + 208));
  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 232) = v1;
  v2 = InternalTransactionResult.transactions.getter();
  v3 = v2;
  *(_QWORD *)(v0 + 240) = v2;
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 248) = v4;
  if (v4)
  {
    *(_QWORD *)(v0 + 256) = OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_store;
    v5 = type metadata accessor for InternalTransaction(0);
    v6 = 0;
    *(_QWORD *)(v0 + 264) = v5;
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_DWORD *)(v7 + 80);
    *(_DWORD *)(v0 + 320) = v8;
    v9 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v0 + 272) = v9;
    v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    *(_QWORD *)(v0 + 280) = v10;
    v11 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(_QWORD *)(v0 + 288) = v11;
      *(_QWORD *)(v0 + 296) = v6;
      v12 = *(_QWORD *)(v0 + 168);
      v13 = *(int **)(v0 + 136);
      v15 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 120);
      v10(v12, v3 + ((v8 + 32) & ~(unint64_t)v8) + v6 * v9, v5);
      v16 = v12 + v13[5];
      *(_QWORD *)v16 = 0;
      *(_BYTE *)(v16 + 8) = 1;
      v17 = v12 + v13[6];
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_BYTE *)(v17 + 16) = 1;
      *(_BYTE *)(v12 + v13[7]) = 0;
      v18 = v12 + v13[8];
      *(_QWORD *)v18 = 0;
      *(_BYTE *)(v18 + 8) = 1;
      if (v15 == 1 || (v14 & 0xE) != 0)
      {
        v30 = (_QWORD *)swift_task_alloc(dword_100503AC4);
        *(_QWORD *)(v0 + 304) = v30;
        v31 = sub_100040AD0(v30, (uint64_t)sub_10003B050);
        return sub_10003A244(v31, v32);
      }
      v19 = *(_QWORD *)(v0 + 288);
      sub_10003D390(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160));
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v11 = *(_QWORD **)(v0 + 288);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10003D574(0, v11[2] + 1, 1, *(_QWORD *)(v0 + 288), &qword_100503C70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        v11 = v28;
      }
      v22 = v11[2];
      v21 = v11[3];
      if (v22 >= v21 >> 1)
      {
        sub_10003D574(v21 > 1, v22 + 1, 1, (uint64_t)v11, &qword_100503C70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        v11 = v29;
      }
      v23 = *(_QWORD *)(v0 + 248);
      v24 = *(_QWORD *)(v0 + 160);
      v25 = *(_QWORD *)(v0 + 168);
      v26 = *(_QWORD *)(v0 + 144);
      v27 = *(_QWORD *)(v0 + 296) + 1;
      v11[2] = v22 + 1;
      sub_10003D6E4(v24, (uint64_t)v11+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v22);
      *(_QWORD *)(v0 + 16) = v11;
      sub_10003D354(v25);
      if (v27 == v23)
        break;
      v6 = *(_QWORD *)(v0 + 296) + 1;
      v9 = *(_QWORD *)(v0 + 272);
      v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 280);
      LOBYTE(v8) = *(_BYTE *)(v0 + 320);
      v5 = *(_QWORD *)(v0 + 264);
      v3 = *(_QWORD *)(v0 + 240);
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
  }
  else
  {
    swift_bridgeObjectRelease(v2);
    v11 = _swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(v0 + 112) == 1)
  {
    if (*(_QWORD *)(v0 + 104))
      v34 = (uint64_t (*)(uint64_t, uint64_t))sub_10003B4C8;
    else
      v34 = (uint64_t (*)(uint64_t, uint64_t))sub_10003B464;
    sub_10003B52C(v34, 0);
    v11 = *(_QWORD **)(v0 + 16);
  }
  v35 = v11[2];
  if (v35)
  {
    v36 = *(_QWORD *)(v0 + 144);
    v54 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v11);
    specialized ContiguousArray.reserveCapacity(_:)(v35);
    v37 = (uint64_t)v11 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    v38 = *(_QWORD *)(v36 + 72);
    do
    {
      v39 = *(_QWORD *)(v0 + 120);
      sub_10003D390(v37, *(_QWORD *)(v0 + 152));
      sub_10003A038(v39);
      v40 = sub_100040C2C();
      UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      sub_100040A60(UniqueAndReserveCapacityIfNot, v42, v43, v44, v45, v46, v47, v48, v53, (uint64_t)v54);
      v49 = sub_100040B14();
      specialized ContiguousArray._endMutation()(v49);
      v37 += v38;
      --v35;
    }
    while (v35);
    v50 = *(void **)(v0 + 232);
    v51 = v54;
    sub_100039998();

  }
  else
  {

    v51 = _swiftEmptyArrayStorage;
  }
  v52 = *(_QWORD *)(v0 + 184);
  sub_100039998();
  sub_100040AA0(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
  sub_100040A10();
  sub_100040B4C();
  sub_100040BE8();
  sub_100040B0C();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v51);
}

uint64_t sub_10003B050()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 288));
    sub_1000356D4();
  }
  sub_100040A54();
  return sub_100040964();
}

uint64_t sub_10003B0BC()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t UniqueAndReserveCapacityIfNot;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  _QWORD *v47;

  do
  {
    v1 = *(_QWORD *)(v0 + 288);
    sub_10003D390(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    v3 = *(_QWORD *)(v0 + 288);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10003D574(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 288), &qword_100503C70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
      v3 = v19;
    }
    v5 = *(_QWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    if (v5 >= v4 >> 1)
    {
      sub_10003D574(v4 > 1, v5 + 1, 1, v3, &qword_100503C70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
      v3 = v20;
    }
    v6 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 296) + 1;
    *(_QWORD *)(v3 + 16) = v5 + 1;
    sub_10003D6E4(v7, v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v5);
    *(_QWORD *)(v0 + 16) = v3;
    sub_10003D354(v8);
    if (v10 == v6)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
      if (*(_QWORD *)(v0 + 112) == 1)
      {
        if (*(_QWORD *)(v0 + 104))
          v21 = (uint64_t (*)(uint64_t, uint64_t))sub_10003B4C8;
        else
          v21 = (uint64_t (*)(uint64_t, uint64_t))sub_10003B464;
        sub_10003B52C(v21, 0);
        v3 = *(_QWORD *)(v0 + 16);
      }
      v22 = *(_QWORD *)(v3 + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(v0 + 144);
        v47 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v3);
        specialized ContiguousArray.reserveCapacity(_:)(v22);
        v24 = v3 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
        v25 = *(_QWORD *)(v23 + 72);
        do
        {
          v26 = *(_QWORD *)(v0 + 120);
          sub_10003D390(v24, *(_QWORD *)(v0 + 152));
          sub_10003A038(v26);
          v27 = sub_100040C2C();
          UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          sub_100040A60(UniqueAndReserveCapacityIfNot, v29, v30, v31, v32, v33, v34, v35, v46, (uint64_t)v47);
          v36 = sub_100040B14();
          specialized ContiguousArray._endMutation()(v36);
          v24 += v25;
          --v22;
        }
        while (v22);
        v37 = *(void **)(v0 + 232);
        sub_100039950();

      }
      else
      {

      }
      v43 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 192);
      v44 = *(_QWORD *)(v0 + 176);
      sub_100039950();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      sub_100040A7C();
      sub_100040B4C();
      sub_100040BE8();
      sub_100040B0C();
      sub_100040B84();
      __asm { BR              X1 }
    }
    v11 = *(_QWORD *)(v0 + 296) + 1;
    *(_QWORD *)(v0 + 288) = v3;
    *(_QWORD *)(v0 + 296) = v11;
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(int **)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 280))(v12, *(_QWORD *)(v0 + 240)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(_QWORD *)(v0 + 272) * v11, *(_QWORD *)(v0 + 264));
    v16 = v12 + v13[5];
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 8) = 1;
    v17 = v12 + v13[6];
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 1;
    *(_BYTE *)(v12 + v13[7]) = 0;
    v18 = v12 + v13[8];
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 8) = 1;
  }
  while (v14 != 1 && (v15 & 0xE) == 0);
  v38 = (_QWORD *)swift_task_alloc(dword_100503AC4);
  *(_QWORD *)(v0 + 304) = v38;
  sub_100040AD0(v38, (uint64_t)sub_10003B050);
  sub_100040B84();
  return sub_10003A244(v39, v40);
}

uint64_t sub_10003B3BC()
{
  uint64_t v0;

  sub_100040B74();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  return sub_1000409E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B3F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);

  sub_10003D354(v1);
  sub_100040BB0();
  sub_100040B74();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  return sub_1000409E0(*(uint64_t (**)(void))(v0 + 8));
}

BOOL sub_10003B448(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_10003B454(unsigned __int8 a1, unsigned __int8 a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_10003B464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v4 = *(int *)(type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  if ((*(_BYTE *)(a1 + v4 + 8) & 1) != 0)
    return 0;
  v7 = a2 + v4;
  return (*(_BYTE *)(v7 + 8) & 1) != 0 || *v5 < *(_QWORD *)v7;
}

BOOL sub_10003B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v4 = *(int *)(type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  if ((*(_BYTE *)(a1 + v4 + 8) & 1) != 0)
    return 0;
  v7 = a2 + v4;
  return (*(_BYTE *)(v7 + 8) & 1) != 0 || *(_QWORD *)v7 < *v5;
}

uint64_t sub_10003B52C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
  {
    sub_100096864(v5);
    v5 = v7;
  }
  result = sub_10003F280(a1, a2);
  *v2 = v5;
  return result;
}

uint64_t sub_10003B6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *a13)
{
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v13[2] = a13;
  v13[3] = _Block_copy(a12);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
  v18 = v17;
  v13[4] = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a7);
  v13[5] = v20;
  v21 = dword_100503AB4;
  a13;
  v22 = (_QWORD *)swift_task_alloc(v21);
  v13[6] = v22;
  *v22 = v13;
  v22[1] = sub_10003B794;
  return ASFinanceStoreHelper.queryTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:sortOrder:sortByAttributes:attributes:)(a1, a2, a3, a4, a5, v16, v18, v19);
}

uint64_t sub_10003B794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v4 = v0;
  sub_100040940();

  sub_100040C38();
  v5 = sub_100039998();
  if (v0)
  {
    v6 = _convertErrorToNSError(_:)(v0);
    swift_errorRelease(v4);
    isa = 0;
    v8 = (void *)v6;
  }
  else
  {
    sub_1000399FC(v5, &qword_100503C00, NSDictionary_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1000356D4();
    v6 = 0;
    v8 = isa;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v2 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  return sub_10004096C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(uint64_t a1)
{
  uint64_t result;

  result = qword_100503B50;
  if (!qword_100503B50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ASFinanceStoreHelper.AugmentedTransaction);
  return result;
}

uint64_t sub_10003B888(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_10003B890(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_10003B898(unsigned __int8 *a1, unsigned __int8 a2)
{
  _BYTE *v2;
  int v3;

  v3 = (*v2 & a2);
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

BOOL sub_10003B8C8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_10003B8F4(uint64_t result)
{
  _BYTE *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_10003B904(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_10003B914(uint64_t result)
{
  _BYTE *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_10003B924(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

BOOL sub_10003B934(char a1, unsigned __int8 a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10003B944(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10003B950(unsigned __int8 a1, char a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_10003B960(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_10003B96C(char a1)
{
  return a1 == 0;
}

BOOL sub_10003B978(uint64_t a1)
{
  return a1 == 0;
}

_BYTE *sub_10003B984@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10003B990(_BYTE *a1@<X8>)
{
  *a1 = variable initialization expression of CoordRange.spansAntimeridian();
  sub_100028D0C();
}

uint64_t sub_10003B9B0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_100084310(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_10003B9DC(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  *a2 = sub_10003B888(*a1, *v2);
  sub_100028D0C();
}

void sub_10003BA04(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  *a2 = sub_100084320(*a1, *v2);
  sub_100028D0C();
}

BOOL sub_10003BA2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003B898(a1, *a2);
}

uint64_t sub_10003BA34@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100084330(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10003BA64@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10008437C(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10003BA94(unsigned __int8 *a1)
{
  return sub_10003B8F4(*a1);
}

uint64_t sub_10003BA9C(unsigned __int8 *a1)
{
  return sub_10003B914(*a1);
}

uint64_t sub_10003BAA4(unsigned __int8 *a1)
{
  return sub_1000843B4(*a1);
}

uint64_t sub_10003BAAC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_1000843D4(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10003BAD8(char *a1)
{
  unsigned __int8 *v1;

  return sub_10003B934(*a1, *v1);
}

BOOL sub_10003BAE4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return sub_10003B454(*a1, *v1);
}

BOOL sub_10003BAF0(unsigned __int8 *a1)
{
  char *v1;

  return sub_10003B950(*a1, *v1);
}

BOOL sub_10003BAFC()
{
  char *v0;

  return sub_10003B96C(*v0);
}

uint64_t sub_10003BB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10003BB1C(unsigned __int8 *a1)
{
  return sub_1000843E4(*a1);
}

unsigned __int8 *sub_10003BB24@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10003BB34(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL sub_10003BB40(char *a1, char *a2)
{
  return sub_100039BA4(*a1, *a2);
}

uint64_t sub_10003BB4C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10008426C(a1);
  *a2 = result;
  return result;
}

_QWORD *sub_10003BB70@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10003BB7C(uint64_t *a1@<X8>)
{
  *a1 = j___s3asd14RavioliManagerC14monitoringTask33_B5E58E12329358626A8B49370FDD58A1LLScTyyts5NeverOGSgvpfi();
  sub_100028D0C();
}

uint64_t sub_10003BB9C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100084318(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_10003BBC8(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_10003B890(*a1, *v2);
  sub_100028D0C();
}

void sub_10003BBF0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_100084328(*a1, *v2);
  sub_100028D0C();
}

BOOL sub_10003BC18(_QWORD *a1, uint64_t *a2)
{
  return sub_10003B8C8(a1, *a2);
}

uint64_t sub_10003BC20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100084358(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10003BC50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10008439C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10003BC80(uint64_t *a1)
{
  return sub_10003B904(*a1);
}

uint64_t sub_10003BC88(uint64_t *a1)
{
  return sub_10003B924(*a1);
}

uint64_t sub_10003BC90(uint64_t *a1)
{
  return sub_1000843C4(*a1);
}

uint64_t sub_10003BC98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000843DC(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10003BCC4(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10003B944(*a1, *v1);
}

BOOL sub_10003BCD0(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10003B448(*a1, *v1);
}

BOOL sub_10003BCDC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10003B960(*a1, *v1);
}

BOOL sub_10003BCE8()
{
  uint64_t *v0;

  return sub_10003B978(*v0);
}

uint64_t sub_10003BCF0(uint64_t *a1)
{
  return sub_1000843F4(*a1);
}

_QWORD *sub_10003BCF8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_10003BD08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000842BC();
  *a1 = result;
  return result;
}

uint64_t ASFinanceStoreHelper.countTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v9[11] = v17;
  v9[12] = v8;
  v9[9] = a8;
  v9[10] = v16;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v10 = ((uint64_t (*)(_QWORD))type metadata accessor for InternalTransactionResult)(0);
  v9[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[14] = v11;
  v9[15] = sub_1000408C4(v11);
  sub_100040A54();
  return swift_task_switch(v12, v13, v14);
}

uint64_t sub_10003BD94()
{
  uint64_t *v0;
  uint64_t **v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  sub_10003C15C(v0[7], v0[8], v0[9], v0[10]);
  v1 = (uint64_t **)swift_task_alloc(dword_100503ABC);
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10003BE5C;
  v2 = sub_100040C58();
  return sub_10003C388(v3, v4, v5, v6, v2, v10, v7, v8, v9, 0);
}

uint64_t sub_10003BE5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_100040B24();
  v3 = *(_QWORD *)(v2 + 128);
  *v4 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10003BEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = InternalTransactionResult.transactions.getter();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  sub_100040BB0();
  sub_100040B34();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10003BF00()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void *a10)
{
  _QWORD *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v10[2] = a10;
  v10[3] = _Block_copy(a9);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
  v18 = v17;
  v10[4] = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a7);
  v10[5] = v20;
  v21 = dword_100503ACC;
  a10;
  v22 = (_QWORD *)swift_task_alloc(v21);
  v10[6] = v22;
  *v22 = v10;
  v22[1] = sub_10003C0D0;
  return ASFinanceStoreHelper.countTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:)(a1, a2, a3, a4, a5, v16, v18, v19);
}

uint64_t sub_10003C0D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  void *v7;

  sub_100040940();

  sub_100040C38();
  sub_100039998();
  v6 = *(_QWORD *)(v3 + 24);
  if (v1)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v6 + 16))(v6);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16))(*(_QWORD *)(v3 + 24), a1, 0);
  }
  _Block_release(*(const void **)(v3 + 24));
  return sub_10004096C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10003C15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  double v10;
  uint64_t result;
  char v12;

  swift_bridgeObjectRetain(a2);
  v8 = sub_10003C220(a1, a2);
  if ((v9 & 1) != 0
    || (v10 = *(double *)&v8,
        swift_bridgeObjectRetain(a4),
        *(double *)&result = COERCE_DOUBLE(sub_10003C220(a3, a4)),
        (v12 & 1) != 0)
    || v10 < -90.0
    || v10 > 90.0
    || *(double *)&result < -180.0
    || *(double *)&result > 180.0)
  {
    sub_100039FDC();
    *(double *)&result = COERCE_DOUBLE(swift_willThrow());
  }
  return result;
}

uint64_t sub_10003C220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  _BYTE v9[16];
  uint64_t *v10;
  _QWORD v11[3];
  uint64_t v12;

  v12 = 0;
  v10 = &v12;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(v11, sub_100040594, v9, a1, a2, &type metadata for Bool);
    swift_bridgeObjectRelease(a2);
    v6 = v11[0];
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v11[0] = a1;
    v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v6 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale(v11, &v12, a1)) != 0
      && *v7 == 0;
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v4 = _StringObject.sharedUTF8.getter(a1, a2);
    }
    v6 = sub_100040438(v4, v5, (void (*)(uint64_t *__return_ptr))sub_1000405AC);
    swift_bridgeObjectRelease(a2);
  }
  if ((v6 & 1) != 0)
    return v12;
  else
    return 0;
}

uint64_t sub_10003C388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v11 + 80) = a10;
  *(_QWORD *)(v11 + 88) = v10;
  *(_QWORD *)(v11 + 72) = a9;
  *(double *)(v11 + 56) = a5;
  *(double *)(v11 + 64) = a6;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = a8;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 16) = a1;
  sub_100040A54();
  return swift_task_switch(v12, v13, v14);
}

uint64_t sub_10003C3BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;

  v27 = v0[5];
  v26 = sub_100032C48(&qword_100505830);
  v1 = sub_100040900(v26, 56);
  *(_OWORD *)(v1 + 16) = xmmword_1004077F0;
  sub_1000399FC(v1, &qword_100503BD0, NSPredicate_ptr);
  v2 = sub_100032C48(&qword_100503BD8);
  v3 = sub_100040900(v2, 72);
  *(_OWORD *)(v3 + 16) = xmmword_1004077E0;
  v4 = sub_100040D08(objc_allocWithZone((Class)NSDate));
  v5 = sub_100039884(0, &qword_100503A70, NSDate_ptr);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = sub_100040544();
  *(_QWORD *)(v3 + 64) = v6;
  *(_QWORD *)(v3 + 32) = v4;
  v7 = sub_100040CD4();
  *(_QWORD *)(v1 + 32) = NSPredicate.init(format:_:)(v7, v8, v3);
  v9 = sub_100040900(v2, 72);
  *(_OWORD *)(v9 + 16) = xmmword_1004077E0;
  v10 = sub_100040D08(objc_allocWithZone((Class)NSDate));
  *(_QWORD *)(v9 + 56) = v5;
  *(_QWORD *)(v9 + 64) = v6;
  *(_QWORD *)(v9 + 32) = v10;
  v11 = sub_100040CD4();
  *(_QWORD *)(v1 + 40) = NSPredicate.init(format:_:)(v11, v12, v9);
  sub_10003CAE4(v27);
  v13 = v0[10];
  *(_QWORD *)(v1 + 48) = v14;
  v15 = specialized Array._endMutation()(v14);
  v16 = sub_1000399FC(v15, &qword_100503BC8, NSCompoundPredicate_ptr);
  sub_100040C6C(v16, (SEL *)&selRef_andPredicateWithSubpredicates_);
  v18 = v17;
  v0[12] = v17;
  v19 = sub_100040900(v26, 40);
  *(_OWORD *)(v19 + 16) = xmmword_100407800;
  v20 = objc_allocWithZone((Class)NSSortDescriptor);
  v21 = sub_10003D2EC(0x746361736E617274, 0xEF657461446E6F69, v13 == 0);
  *(_QWORD *)(v19 + 32) = v21;
  specialized Array._endMutation()(v21);
  v0[13] = v19;
  v22 = async function pointer to FinanceStore.internalTransactions(with:sortDescriptors:limit:offset:)[1];
  v23 = v18;
  v24 = (_QWORD *)swift_task_alloc(v22);
  v0[14] = v24;
  *v24 = v0;
  v24[1] = sub_10003C6A0;
  sub_100040BC0();
  return FinanceStore.internalTransactions(with:sortDescriptors:limit:offset:)();
}

uint64_t sub_10003C6A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (!v0)
  {
    v4 = *(void **)(v2 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 104));

  }
  sub_100040A54();
  return sub_100040964();
}

uint64_t sub_10003C708()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C73C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 96);

  sub_1000356D4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003C778(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = sub_100032C48(&qword_100505830);
  v8 = sub_100040C40(v7);
  *(_OWORD *)(v8 + 16) = xmmword_100407810;
  sub_1000399FC(v8, &qword_100503BD0, NSPredicate_ptr);
  v9 = (void *)NSPredicate.init(format:_:)(0xD00000000000003BLL, 0x80000001003E4070, _swiftEmptyArrayStorage);
  *(_QWORD *)(v8 + 32) = v9;
  sub_10003CD5C(0xD000000000000045, 0x80000001003E40B0, a1, a2, a3);
  if (v3)
  {

    *(_QWORD *)(v8 + 16) = 0;
    swift_release(v8);
  }
  else
  {
    v11 = v10;
    sub_1000399FC(v10, &qword_100503BC8, NSCompoundPredicate_ptr);
    *(_QWORD *)(v8 + 40) = v11;
    specialized Array._endMutation()();
    sub_10003CCEC(v8, (SEL *)&selRef_andPredicateWithSubpredicates_);
  }
}

void sub_10003C8D0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for TransactionType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for TransactionType.pointOfSale(_:), v2);
  v7 = TransactionType.rawValue.getter(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((a1 & 1) != 0)
  {
    sub_1000399FC(v8, &qword_100503BD0, NSPredicate_ptr);
    if ((a1 & 2) != 0)
    {
      v15 = 0xD00000000000002CLL;
      v14 = 0x80000001003E4040;
      v11 = _swiftEmptyArrayStorage;
      goto LABEL_9;
    }
    v10 = sub_100032C48(&qword_100503BD8);
    v11 = (_QWORD *)sub_100040900(v10, 72);
    *((_OWORD *)v11 + 1) = xmmword_1004077E0;
    v11[7] = &type metadata for Int16;
    v11[8] = &protocol witness table for Int16;
    *((_WORD *)v11 + 16) = v7;
    v12 = "insightsObject.applePayInsightObject != NULL AND publicTransactionObject.transactionTypeValue == %d";
  }
  else
  {
    if ((a1 & 2) == 0)
    {
      v9 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
      return;
    }
    sub_1000399FC(v8, &qword_100503BD0, NSPredicate_ptr);
    v13 = sub_100032C48(&qword_100503BD8);
    v11 = (_QWORD *)sub_100040900(v13, 72);
    *((_OWORD *)v11 + 1) = xmmword_1004077E0;
    v11[7] = &type metadata for Int16;
    v11[8] = &protocol witness table for Int16;
    *((_WORD *)v11 + 16) = v7;
    v12 = "insightsObject.applePayInsightObject != NULL AND publicTransactionObject.transactionTypeValue != %d";
  }
  v14 = (unint64_t)(v12 - 32) | 0x8000000000000000;
  v15 = 0xD000000000000063;
LABEL_9:
  NSPredicate.init(format:_:)(v15, v14, v11);
  sub_1000399C8();
}

void sub_10003CA9C(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  sub_10003CD5C(0xD00000000000003ALL, 0x80000001003E3EE0, a1, a2, a3);
}

void sub_10003CAE4(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  Swift::Double v7;
  Swift::Double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  Swift::Double v17;
  Swift::Double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2 = a1;
  if ((a1 & 3) != 0)
  {
    v3 = sub_100032C48(&qword_100505830);
    v4 = sub_100040C40(v3);
    *(_OWORD *)(v4 + 16) = xmmword_100407810;
    sub_10003C8D0(v2);
    *(_QWORD *)(v4 + 32) = v5;
    v6 = sub_100040BF0();
    sub_10003CA9C(v6, v7, v8);
    if (v1)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

      *(_QWORD *)(v4 + 16) = 0;
      swift_release(v4);
      return;
    }
    v10 = v9;
    sub_1000399FC(v9, &qword_100503BC8, NSCompoundPredicate_ptr);
    *(_QWORD *)(v4 + 40) = v10;
    ((void (*)(void))specialized Array._endMutation())();
    sub_10003CCEC(v4, (SEL *)&selRef_andPredicateWithSubpredicates_);
    v12 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v13 >= v14 >> 1)
    {
      v24 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
      v13 = v24;
    }
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
    a1 = specialized Array._endMutation()(v15);
  }
  if ((v2 & 4) != 0)
  {
    v16 = sub_100040BF0();
    sub_10003C778(v16, v17, v18);
    if (v1)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return;
    }
    v20 = v19;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= v21 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
    a1 = specialized Array._endMutation()(v23);
  }
  sub_1000399FC(a1, &qword_100503BC8, NSCompoundPredicate_ptr);
  sub_10003CCEC((uint64_t)_swiftEmptyArrayStorage, (SEL *)&selRef_orPredicateWithSubpredicates_);
}

void sub_10003CCEC(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  Class isa;
  id v5;

  sub_1000399FC(a1, &qword_100503BD0, NSPredicate_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100040C38();
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), *a2, isa);

  sub_1000399A0();
}

void sub_10003CD5C(uint64_t a1, uint64_t a2, Swift::Double a3, Swift::Double a4, Swift::Double a5)
{
  id v5;
  uint64_t v8;
  asd::CoordRange v9;

  if (a5 >= 0.0)
  {
    GlobalLocationHelper.boundingRectAround(lat:lon:radiusMetres:)(&v9, a3, a4, a5);
    if (!v8)
      sub_10003CE0C((uint64_t)&v9, a1, a2);
  }
  else
  {
    v5 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 1);
  }
}

id sub_10003CE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  char v28;
  id v29;
  id v30;
  id v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _BYTE v47[8];
  _BYTE v48[16];
  _BYTE v49[16];
  _BYTE v50[16];
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  swift_bridgeObjectRetain(a3);
  v8 = (void *)sub_100039DC4(v6, v7, a2, a3, (uint64_t)v48, 0x6625203D3C20);
  v9 = *(_QWORD *)a1;
  v10 = *(_BYTE *)(a1 + 8);
  swift_bridgeObjectRetain(a3);
  v11 = (void *)sub_100039DC4(v9, v10, a2, a3, (uint64_t)v47, 0x6625203D3E20);
  sub_10003F040(a1 + 48, (uint64_t)v50);
  sub_10003F040(a1 + 32, (uint64_t)v49);
  sub_10003F040((uint64_t)v50, (uint64_t)&v51);
  if ((v52 & 1) != 0)
  {
    sub_10003F040((uint64_t)v49, (uint64_t)&v44);
    if ((v45 & 1) != 0)
    {
      v12 = 0;
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  v13 = v51;
  v14 = sub_10003F040((uint64_t)v49, (uint64_t)&v53);
  if ((v54 & 1) != 0)
  {
LABEL_5:
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
    goto LABEL_10;
  }
  v15 = v53;
  v16 = *(_BYTE *)(a1 + 57);
  sub_1000399FC(v14, &qword_100503BD0, NSPredicate_ptr);
  if ((v16 & 1) != 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    v44 = 40;
    v45 = 0xE100000000000000;
    sub_1000409C0();
    v17 = sub_100040AAC();
    v18 = 0xEC0000002820524FLL;
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(0xE000000000000000);
    v44 = 40;
    v45 = 0xE100000000000000;
    sub_1000409C0();
    v17 = sub_100040AAC();
    v18 = 0xED00002820444E41;
  }
  String.append(_:)(*(Swift::String *)&v17);
  sub_1000409C0();
  v19._countAndFlagsBits = 0x20296625203D3C20;
  v19._object = (void *)0xE800000000000000;
  String.append(_:)(v19);
  v20 = v44;
  v21 = v45;
  v22 = sub_100032C48(&qword_100503BD8);
  v23 = sub_100040900(v22, 112);
  *(_OWORD *)(v23 + 16) = xmmword_100407820;
  *(_QWORD *)(v23 + 56) = &type metadata for Double;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 96) = &type metadata for Double;
  *(_QWORD *)(v23 + 104) = &protocol witness table for Double;
  *(_QWORD *)(v23 + 72) = v15;
  v12 = (id)NSPredicate.init(format:_:)(v20, v21, v23);
  sub_100039998();
LABEL_10:
  v46 = _swiftEmptyArrayStorage;
  if (!v8)
  {
    v29 = v12;
    v30 = v11;
    if (!v11)
      goto LABEL_19;
    goto LABEL_16;
  }
  v24 = v12;
  v25 = v8;
  v26 = v11;
  sub_100040C84();
  sub_100040A18();
  if (v28)
    sub_100040908(v27);
  sub_1000409D0();
  sub_100040C8C();
  if (v11)
  {
LABEL_16:
    v31 = v11;
    sub_100040C84();
    sub_100040A18();
    if (v28)
      sub_100040908(v32);
    sub_1000409D0();
    sub_100040C8C();
  }
LABEL_19:
  if (v12)
  {
    v33 = v12;
    sub_100040C84();
    sub_100040A18();
    if (v28)
      sub_100040908(v34);
    sub_1000409D0();
    sub_100040C8C();
  }
  v35 = (uint64_t)v46;

  if ((unint64_t)v35 >> 62)
  {
    if (v35 < 0)
      v40 = v35;
    else
      v40 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    v36 = sub_1000356D4();
    if (v41)
      goto LABEL_25;
LABEL_30:
    v42 = v12;
    sub_1000356D4();
    v39 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 1);
    v12 = v8;
    v8 = v42;
    goto LABEL_31;
  }
  if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_30;
LABEL_25:
  v37 = sub_1000399FC(v36, &qword_100503BC8, NSCompoundPredicate_ptr);
  sub_100040C6C(v37, (SEL *)&selRef_andPredicateWithSubpredicates_);
  v39 = v38;
LABEL_31:

  return v39;
}

id ASFinanceStoreHelper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASFinanceStoreHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10003D250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v7;
  NSDictionary v8;

  v7 = String._bridgeToObjectiveC()();
  sub_100039998();
  if (a4)
  {
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v8.super.isa = 0;
  }
  objc_msgSend(v4, "initWithDomain:code:userInfo:", v7, a3, v8.super.isa);

  sub_1000399C8();
}

id sub_10003D2EC(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(v3, "initWithKey:ascending:", v6, a3 & 1);

  return v7;
}

uint64_t sub_10003D354(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D3D4(uint64_t a1)
{
  return sub_10003D3E0(a1, type metadata accessor for BindingsStore.Binding);
}

uint64_t sub_10003D3E0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  if (a1 < 0)
  {
    sub_100040888();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v4 = a2(0);
      v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v4);
      v5[2] = a1;
    }
    else
    {
      v5 = _swiftEmptyArrayStorage;
    }
    a2(0);
    sub_1000409FC();
    return (uint64_t)v5;
  }
  return result;
}

void sub_10003D490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100503BB8, (void (*)(_QWORD))type metadata accessor for PushPayload);
}

void sub_10003D4A4()
{
  sub_10003E0B4();
}

void sub_10003D4B0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  sub_100040C08();
  if ((v4 & 1) != 0)
  {
    sub_1000408F0();
    if (v5 != v6)
    {
      sub_1000409F0();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  sub_100040A44();
  if (v3)
  {
    v7 = sub_100032C48(&qword_100503C98);
    v8 = (_QWORD *)sub_100040900(v7, 32 * v3 + 32);
    v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 32);
  }
  if ((v1 & 1) != 0)
  {
    v10 = (char *)sub_100040CFC();
    sub_10003EA30(v10, v11, v12);
    *(_QWORD *)(v0 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v13 = sub_1000409A8();
    sub_10003E18C(v13, v14, v15, v16);
  }
  sub_1000399A0();
}

void sub_10003D560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100503C70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
}

void sub_10003D574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  const char *v29;
  uint64_t v30;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v10 != v11)
    {
      sub_1000409F0();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_100040888();
        v29 = "Division by zero";
        v30 = 16;
LABEL_25:
        sub_100040D14((uint64_t)"Fatal error", 11, 2, (uint64_t)v29, v30, v28, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_100040AC8(a1, a2, a3, a4, a5);
  v15 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_100040888();
    v29 = "Division results in an overflow";
    v30 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  a6(0);
  sub_1000409FC();
  if ((v8 & 1) != 0)
  {
    sub_10003EF20(a4 + v22, v12, (unint64_t)v19 + v22, a6);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v23 = sub_100040C94();
    sub_10003E85C(v23, v24, v25, v26, v27);
  }
  sub_100040A2C();
}

uint64_t sub_10003D6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10003D728(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for InternalTransaction(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t sub_10003D7FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InternalTransaction(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10003D830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for InternalTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10003D8D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = type metadata accessor for InternalTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 8) = *((_BYTE *)v16 + 8);
  *(_QWORD *)v15 = v17;
  return a1;
}

uint64_t sub_10003D988(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for InternalTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10003DA30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for InternalTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10003DAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003DAE4);
}

uint64_t sub_10003DAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100040BA0();
  return sub_1000352C8(v1, v0, v2);
}

uint64_t sub_10003DB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003DB18);
}

uint64_t sub_10003DB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100040BA0();
  return sub_100037020(v1, v0, v0, v2);
}

uint64_t sub_10003DB44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for InternalTransaction(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_100407470;
    v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[4] = "\t";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10003DBD0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100040C08();
  if ((v3 & 1) != 0)
  {
    sub_1000408F0();
    if (v4 != v5)
    {
      sub_1000409F0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  sub_100040A44();
  if (v2)
  {
    v6 = sub_100032C48(&qword_100503C30);
    v7 = (const void *)sub_100040900(v6, 104 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_100040B64(v8 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_100040CFC();
    sub_10003EAB4(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v12 = sub_1000409A8();
    sub_10003E280(v12, v13, v14, v15);
  }
  sub_1000399C8();
}

void sub_10003DC7C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100040C08();
  if ((v3 & 1) != 0)
  {
    sub_1000408F0();
    if (v4 != v5)
    {
      sub_1000409F0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  sub_100040A44();
  if (v2)
  {
    v6 = sub_100032C48(&qword_100503C18);
    v7 = (const void *)sub_100040900(v6, 24 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_100040B64(v8 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_100040CFC();
    sub_10003EB14(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v12 = sub_1000409A8();
    sub_10003E37C(v12, v13, v14, v15);
  }
  sub_1000399C8();
}

void sub_10003DD28()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  sub_100040C08();
  if ((v3 & 1) != 0)
  {
    sub_1000408F0();
    if (v5 != v6)
    {
      sub_1000409F0();
      if (v5)
      {
        __break(1u);
LABEL_23:
        sub_100040888();
        v23 = "Division by zero";
        v24 = 16;
LABEL_25:
        sub_100040D14((uint64_t)"Fatal error", 11, 2, (uint64_t)v23, v24, v22, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v4 = v2;
  }
  v7 = *(_QWORD *)(v0 + 16);
  if (v4 <= v7)
    v8 = *(_QWORD *)(v0 + 16);
  else
    v8 = v4;
  if (!v8)
  {
    v14 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v9 = sub_100032C48(&qword_100503C60);
  v10 = *(_QWORD *)(sub_100032C48(&qword_100503C68) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (_QWORD *)swift_allocObject(v9, v13 + v11 * v8, v12 | 7);
  v15 = j__malloc_size(v14);
  if (!v11)
    goto LABEL_23;
  if (v15 - v13 == 0x8000000000000000 && v11 == -1)
  {
    sub_100040888();
    v23 = "Division results in an overflow";
    v24 = 31;
    goto LABEL_25;
  }
  sub_100040B64(v15 - v13);
LABEL_18:
  sub_100032C48(&qword_100503C68);
  sub_1000409FC();
  if ((v1 & 1) != 0)
  {
    sub_10003EBF8(v0 + v17, v7, (unint64_t)v14 + v17);
    *(_QWORD *)(v0 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v18 = sub_1000409A8();
    sub_10003E498(v18, v19, v20, v21);
  }
  sub_100040A2C();
}

void sub_10003DE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100504CA0, (void (*)(_QWORD))type metadata accessor for BindingsStore.Binding);
}

void sub_10003DEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003DED0(a1, a2, a3, a4, &qword_100503C50);
}

void sub_10003DEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003DED0(a1, a2, a3, a4, &qword_100503C40);
}

void sub_10003DED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v6 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v8 != v9)
    {
      sub_1000409F0();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v7 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_100040AC8(a1, a2, a3, a4, a5);
    v13 = (char *)sub_100040900(v12, 8 * v11 + 32);
    v14 = j__malloc_size(v13);
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 8);
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v6 & 1) != 0)
  {
    sub_10003EFE8((char *)(a4 + 32), v10, v13 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v15 = sub_100040C94();
    sub_10003E948(v15, v16, v17, v18, v19);
  }
  sub_1000399C8();
}

void sub_10003DF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003DFC8(a1, a2, a3, a4, &qword_100503BA0, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_10003E5BC, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10003EBA0);
}

void sub_10003DFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003DFC8(a1, a2, a3, a4, &qword_100503C38, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_10003E6B0, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10003ED6C);
}

void sub_10003DFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v12 != v13)
    {
      sub_1000409F0();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    v16 = sub_100040AC8(a1, a2, a3, a4, a5);
    v17 = (_QWORD *)sub_100040900(v16, 16 * v15 + 32);
    v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 16);
  }
  else
  {
    v17 = _swiftEmptyArrayStorage;
  }
  v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100039950();
  }
  else
  {
    a6(0, v14, v19, a4);
  }
  sub_1000399C8();
}

void sub_10003E094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100503BB0, (void (*)(_QWORD))&type metadata accessor for UUID);
}

void sub_10003E0A8()
{
  sub_10003E0B4();
}

void sub_10003E0B4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  sub_100040C08();
  if ((v4 & 1) != 0)
  {
    sub_1000408F0();
    if (v5 != v6)
    {
      sub_1000409F0();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  sub_100040A44();
  if (v3)
  {
    v12 = sub_100040AC8(v7, v8, v9, v10, v11);
    v13 = (_QWORD *)sub_100040900(v12, v3 + 32);
    v14 = j__malloc_size(v13);
    v13[2] = v2;
    v13[3] = 2 * v14 - 64;
  }
  if ((v1 & 1) != 0)
  {
    v15 = (char *)sub_100040CFC();
    sub_10003EEA8(v15, v16, v17);
    *(_QWORD *)(v0 + 16) = 0;
    sub_100039950();
  }
  else
  {
    v18 = sub_1000409A8();
    sub_10003E7A4(v18, v19, v20, v21);
  }
  sub_1000399A0();
}

void sub_10003E150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100503C28, (void (*)(_QWORD))type metadata accessor for LocalFeatureToggle);
}

void sub_10003E164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003D574(a1, a2, a3, a4, &qword_100503B98, (void (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

void sub_10003E178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003DED0(a1, a2, a3, a4, &qword_100503C08);
}

uint64_t sub_10003E18C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003E280(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 104 * a1 + 32;
  v7 = a3 + 104 * v4;
  if (v6 >= v7 || v6 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003E37C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 24 * a1 + 32;
  v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_100032C48(&qword_100503C20);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003E498(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100032C48(&qword_100503C68) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003E5BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003E6B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10003E7A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    sub_100040888();
    sub_100040AFC();
    goto LABEL_11;
  }
  v5 = (char *)(a4 + a1 + 32);
  v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    sub_100039950();
    return v6;
  }
  sub_100040888();
  sub_100040AEC();
LABEL_11:
  result = (char *)sub_1000408D4(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_10003E85C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100040888();
    sub_100040AFC();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_100039950();
    return v14;
  }
  sub_100040888();
  sub_100040AEC();
LABEL_11:
  result = sub_1000408D4(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

uint64_t sub_10003E948(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100040888();
    sub_100040AFC();
    goto LABEL_11;
  }
  v7 = a4 + 8 * a1 + 32;
  v8 = a3 + 8 * v5;
  if (v7 >= v8 || v7 + 8 * v5 <= a3)
  {
    sub_100040AC8(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    sub_100039950();
    return v8;
  }
  sub_100040888();
  sub_100040AEC();
LABEL_11:
  result = sub_1000408D4(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10003EA20(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003EF20(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PushPayload);
}

char *sub_10003EA30(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_10003EAB4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[104 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

char *sub_10003EB14(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_10003EBA0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

uint64_t sub_10003EBF8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  if (a2 < 0)
  {
    v8 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v8, 1046, 0);
    __break(1u);
  }
  else if (a3 < a1
         || (result = sub_100032C48(&qword_100503C68), a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    v7 = sub_100032C48(&qword_100503C68);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3, a1, a2, result);
  }
  return result;
}

uint64_t sub_10003ECFC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003EF20(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for BindingsStore.Binding);
}

char *sub_10003ED08(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

char *sub_10003ED6C(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_10003EDF0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

char *sub_10003EE50(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

char *sub_10003EEA8(char *__src, size_t __len, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((__len & 0x8000000000000000) != 0)
  {
    sub_100040888();
    __src = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_10003EF08(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003EF20(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for LocalFeatureToggle);
}

uint64_t sub_10003EF14(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003EF20(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AssessmentPayload);
}

uint64_t sub_10003EF20(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  if (a2 < 0)
  {
    sub_100040888();
    result = sub_10004089C((uint64_t)"Fatal error", v17, v18, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v19, v20, (uint64_t)"Swift/UnsafePointer.swift", v21, v22, v23, v24);
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    v13 = sub_100040CA8();
    return swift_arrayInitWithTakeFrontToBack(v13, v14, v15, v16);
  }
  else if (a3 != a1)
  {
    v9 = sub_100040CA8();
    return swift_arrayInitWithTakeBackToFront(v9, v10, v11, v12);
  }
  return result;
}

char *sub_10003EFE8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100040888();
    result = (char *)sub_10004089C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000408B4(a3, result);
  }
  return result;
}

uint64_t sub_10003F040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100503BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F088()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 80));
  return swift_deallocObject(v0, 96, 7);
}

void sub_10003F0C4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100503BE4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003F150;
  sub_100040A84();
  sub_100040B84();
  __asm { BR              X8 }
}

uint64_t sub_10003F150()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_100040B24();
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(v1 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10003F190()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 104));
  return swift_deallocObject(v0, 120, 7);
}

void sub_10003F1CC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100503BF4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10004086C;
  sub_100040A84();
  __asm { BR              X8 }
}

uint64_t sub_10003F280(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  Swift::Int v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  Swift::Int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  Swift::Int v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t (*v151)(char *, uint64_t);
  uint64_t v152;

  v4 = v3;
  v152 = a2;
  v151 = (uint64_t (*)(char *, uint64_t))a1;
  v141 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  v146 = *(_QWORD *)(v141 - 8);
  v5 = __chkstk_darwin(v141);
  v142 = (uint64_t)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v145 = (uint64_t)&v129 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v129 - v10;
  v12 = __chkstk_darwin(v9);
  v143 = (uint64_t)&v129 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v129 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v129 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v129 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v129 - v23;
  v150 = v2;
  v25 = v2[1];
  result = _minimumMergeRunLength(_:)(v25);
  v136 = result;
  if (result < v25)
  {
    result = sub_10003D3E0(v25 / 2, type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    v134 = result;
    v135 = v25;
    v147 = v27;
    if (v25 > 0)
    {
      v131 = v24;
      v132 = v22;
      v137 = v19;
      v138 = v16;
      v140 = v11;
      v28 = 0;
      v29 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        v30 = v28 + 1;
        if (v28 + 1 >= v25)
        {
          v42 = v28 + 1;
          v43 = v136;
        }
        else
        {
          v144 = v25;
          v133 = v29;
          v31 = *v150;
          v32 = *(_QWORD *)(v146 + 72);
          v33 = (uint64_t)v131;
          sub_10003D390(*v150 + v32 * v30, (uint64_t)v131);
          v34 = (uint64_t)v132;
          sub_10003D390(v31 + v32 * v28, (uint64_t)v132);
          v35 = v151((char *)v33, v34);
          if (v4)
          {
            sub_10003D354(v34);
            sub_10003D354(v33);
            v127 = (unint64_t)v133;
            goto LABEL_121;
          }
          v36 = v35;
          sub_10003D354(v34);
          result = sub_10003D354(v33);
          v25 = v144;
          v139 = v31;
          v149 = v28 + 2;
          if (v28 + 2 < v144)
          {
            v130 = v28;
            v148 = v32 * v30;
            v37 = v31;
            v38 = v32 * (v28 + 2);
            while (1)
            {
              v39 = (uint64_t)v137;
              sub_10003D390(v37 + v38, (uint64_t)v137);
              v40 = (uint64_t)v138;
              sub_10003D390(v37 + v148, (uint64_t)v138);
              v41 = v151((char *)v39, v40);
              sub_10003D354(v40);
              result = sub_10003D354(v39);
              if (((v36 ^ v41) & 1) != 0)
                break;
              v37 += v32;
              ++v149;
              v25 = v144;
              if (v149 >= v144)
              {
                v149 = v144;
                v28 = v130;
                goto LABEL_13;
              }
            }
            v28 = v130;
            v25 = v144;
LABEL_13:
            v31 = v139;
          }
          v43 = v136;
          if ((v36 & 1) != 0)
          {
            v42 = v149;
            if (v149 < v28)
              goto LABEL_150;
            if (v28 >= v149)
            {
              v29 = v133;
            }
            else
            {
              v44 = 0;
              v45 = v32 * (v149 - 1);
              v46 = v28;
              v47 = v149 * v32;
              v48 = v46;
              v130 = v46;
              v49 = v46 * v32;
              do
              {
                if (v48 != v42 + v44 - 1)
                {
                  v148 = v4;
                  if (!v31)
                    goto LABEL_153;
                  sub_10003D6E4(v31 + v49, v142);
                  if (v49 < v45 || v31 + v49 >= (unint64_t)(v31 + v47))
                  {
                    swift_arrayInitWithTakeFrontToBack(v31 + v49, v31 + v45, 1, v141);
                  }
                  else if (v49 != v45)
                  {
                    swift_arrayInitWithTakeBackToFront(v31 + v49, v31 + v45, 1, v141);
                  }
                  result = sub_10003D6E4(v142, v31 + v45);
                  v31 = v139;
                  v4 = v148;
                  v42 = v149;
                }
                ++v48;
                --v44;
                v45 -= v32;
                v47 -= v32;
                v49 += v32;
              }
              while (v48 < v42 + v44);
              v29 = v133;
              v43 = v136;
              v28 = v130;
              v25 = v144;
            }
          }
          else
          {
            v29 = v133;
            v42 = v149;
          }
        }
        if (v42 < v25)
        {
          if (__OFSUB__(v42, v28))
            goto LABEL_147;
          if (v42 - v28 < v43)
          {
            if (__OFADD__(v28, v43))
              goto LABEL_148;
            if (v28 + v43 >= v25)
              v51 = v25;
            else
              v51 = v28 + v43;
            if (v51 >= v28)
            {
              if (v42 == v51)
                goto LABEL_42;
              v148 = v4;
              v133 = v29;
              v103 = *(_QWORD *)(v146 + 72);
              v144 = v103 * (v42 - 1);
              v139 = v103;
              v104 = v42 * v103;
              v130 = v28;
              v129 = v51;
LABEL_93:
              v105 = 0;
              v149 = v42;
              while (1)
              {
                v106 = *v150;
                v107 = v104;
                v108 = v104 + v105 + *v150;
                v109 = v143;
                sub_10003D390(v108, v143);
                v110 = (uint64_t)v140;
                sub_10003D390(v144 + v105 + v106, (uint64_t)v140);
                v111 = v148;
                v112 = v151((char *)v109, v110);
                v148 = v111;
                if (v111)
                  break;
                v113 = v112;
                sub_10003D354(v110);
                result = sub_10003D354(v109);
                if ((v113 & 1) == 0)
                {
                  v117 = v149;
                  v104 = v107;
LABEL_100:
                  v42 = v117 + 1;
                  v144 += v139;
                  v104 += v139;
                  v28 = v130;
                  if (v42 == v129)
                  {
                    v42 = v129;
                    v29 = v133;
                    v4 = v148;
                    goto LABEL_42;
                  }
                  goto LABEL_93;
                }
                v114 = *v150;
                if (!*v150)
                  goto LABEL_152;
                v104 = v107;
                v115 = v114 + v107 + v105;
                v116 = v114 + v144 + v105;
                sub_10003D6E4(v115, v145);
                swift_arrayInitWithTakeFrontToBack(v115, v116, 1, v141);
                result = sub_10003D6E4(v145, v116);
                v105 -= v139;
                ++v28;
                v117 = v149;
                if (v149 == v28)
                  goto LABEL_100;
              }
              sub_10003D354(v110);
              sub_10003D354(v109);
              result = swift_bridgeObjectRelease(v133);
              goto LABEL_122;
            }
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            return result;
          }
        }
LABEL_42:
        if (v42 < v28)
          goto LABEL_144;
        result = swift_isUniquelyReferenced_nonNull_native(v29);
        v149 = v42;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10005F580(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
          v29 = (char *)result;
        }
        v53 = *((_QWORD *)v29 + 2);
        v52 = *((_QWORD *)v29 + 3);
        v54 = v53 + 1;
        if (v53 >= v52 >> 1)
        {
          result = (uint64_t)sub_10005F580((char *)(v52 > 1), v53 + 1, 1, v29);
          v29 = (char *)result;
        }
        *((_QWORD *)v29 + 2) = v54;
        v55 = v29 + 32;
        v56 = &v29[16 * v53 + 32];
        v57 = v149;
        *(_QWORD *)v56 = v28;
        *((_QWORD *)v56 + 1) = v57;
        if (v53)
        {
          while (1)
          {
            v58 = v54 - 1;
            if (v54 >= 4)
            {
              v63 = &v55[2 * v54];
              v64 = *(v63 - 8);
              v65 = *(v63 - 7);
              v69 = __OFSUB__(v65, v64);
              v66 = v65 - v64;
              if (v69)
                goto LABEL_130;
              v68 = *(v63 - 6);
              v67 = *(v63 - 5);
              v69 = __OFSUB__(v67, v68);
              v61 = v67 - v68;
              v62 = v69;
              if (v69)
                goto LABEL_131;
              v70 = v54 - 2;
              v71 = &v55[2 * v54 - 4];
              v73 = *v71;
              v72 = v71[1];
              v69 = __OFSUB__(v72, v73);
              v74 = v72 - v73;
              if (v69)
                goto LABEL_132;
              v69 = __OFADD__(v61, v74);
              v75 = v61 + v74;
              if (v69)
                goto LABEL_134;
              if (v75 >= v66)
              {
                v93 = &v55[2 * v58];
                v95 = *v93;
                v94 = v93[1];
                v69 = __OFSUB__(v94, v95);
                v96 = v94 - v95;
                if (v69)
                  goto LABEL_143;
                v86 = v61 < v96;
                goto LABEL_79;
              }
            }
            else
            {
              if (v54 != 3)
              {
                v87 = *((_QWORD *)v29 + 4);
                v88 = *((_QWORD *)v29 + 5);
                v69 = __OFSUB__(v88, v87);
                v80 = v88 - v87;
                v81 = v69;
                goto LABEL_73;
              }
              v60 = *((_QWORD *)v29 + 4);
              v59 = *((_QWORD *)v29 + 5);
              v69 = __OFSUB__(v59, v60);
              v61 = v59 - v60;
              v62 = v69;
            }
            if ((v62 & 1) != 0)
              goto LABEL_133;
            v70 = v54 - 2;
            v76 = &v55[2 * v54 - 4];
            v78 = *v76;
            v77 = v76[1];
            v79 = __OFSUB__(v77, v78);
            v80 = v77 - v78;
            v81 = v79;
            if (v79)
              goto LABEL_135;
            v82 = &v55[2 * v58];
            v84 = *v82;
            v83 = v82[1];
            v69 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v69)
              goto LABEL_137;
            if (__OFADD__(v80, v85))
              goto LABEL_139;
            if (v80 + v85 >= v61)
            {
              v86 = v61 < v85;
LABEL_79:
              if (v86)
                v58 = v70;
              goto LABEL_81;
            }
LABEL_73:
            if ((v81 & 1) != 0)
              goto LABEL_136;
            v89 = &v55[2 * v58];
            v91 = *v89;
            v90 = v89[1];
            v69 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v69)
              goto LABEL_138;
            if (v92 < v80)
              goto LABEL_90;
LABEL_81:
            v97 = v58 - 1;
            if (v58 - 1 >= v54)
            {
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
            if (!*v150)
              goto LABEL_151;
            v54 = (unint64_t)v29;
            v98 = &v55[2 * v97];
            v99 = *v98;
            v100 = &v55[2 * v58];
            v101 = v100[1];
            result = sub_10003FEB4(*v150 + *(_QWORD *)(v146 + 72) * *v98, *v150 + *(_QWORD *)(v146 + 72) * *v100, *v150 + *(_QWORD *)(v146 + 72) * v101, v147, v151, v152);
            if (v4)
              goto LABEL_118;
            if (v101 < v99)
              goto LABEL_127;
            if (v58 > *(_QWORD *)(v54 + 16))
              goto LABEL_128;
            *v98 = v99;
            v55[2 * v97 + 1] = v101;
            v102 = *(_QWORD *)(v54 + 16);
            if (v58 >= v102)
              goto LABEL_129;
            v29 = (char *)v54;
            v54 = v102 - 1;
            result = (uint64_t)memmove(&v55[2 * v58], v100 + 2, 16 * (v102 - 1 - v58));
            *((_QWORD *)v29 + 2) = v102 - 1;
            if (v102 <= 2)
              goto LABEL_90;
          }
        }
        v54 = 1;
LABEL_90:
        v28 = v149;
        v25 = v150[1];
        if (v149 >= v25)
          goto LABEL_106;
      }
    }
    v29 = (char *)_swiftEmptyArrayStorage;
    v54 = _swiftEmptyArrayStorage[2];
LABEL_106:
    if (v54 < 2)
    {
LABEL_116:
      swift_bridgeObjectRelease(v29);
      if (v135 >= -1)
      {
LABEL_123:
        v128 = v134;
        *(_QWORD *)(v134 + 16) = 0;
        return swift_bridgeObjectRelease(v128);
      }
      __break(1u);
LABEL_118:
      v127 = v54;
    }
    else
    {
      v118 = *v150;
      if (!*v150)
        goto LABEL_154;
      v119 = *(_QWORD *)(v146 + 72);
      while (1)
      {
        v120 = v54 - 2;
        v121 = (uint64_t)v29;
        v122 = *(_QWORD *)&v29[16 * v54];
        v123 = *(_QWORD *)&v29[16 * v54 + 16];
        v124 = *(_QWORD *)&v29[16 * v54 + 24];
        result = sub_10003FEB4(v118 + v119 * v122, v118 + v119 * v123, v118 + v119 * v124, v147, v151, v152);
        if (v4)
          break;
        if (v124 < v122)
          goto LABEL_140;
        result = swift_isUniquelyReferenced_nonNull_native(v121);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10005F670(v121);
          v121 = result;
        }
        if (v120 >= *(_QWORD *)(v121 + 16))
          goto LABEL_141;
        v125 = (_QWORD *)(v121 + 32 + 16 * v120);
        *v125 = v122;
        v125[1] = v124;
        v126 = *(_QWORD *)(v121 + 16);
        if (v54 > v126)
          goto LABEL_142;
        v29 = (char *)v121;
        memmove((void *)(v121 + 32 + 16 * (v54 - 1)), (const void *)(v121 + 32 + 16 * v54), 16 * (v126 - v54));
        *(_QWORD *)(v121 + 16) = v126 - 1;
        v54 = v126 - 1;
        if (v126 <= 2)
          goto LABEL_116;
      }
      v127 = v121;
    }
LABEL_121:
    result = swift_bridgeObjectRelease(v127);
LABEL_122:
    if (v135 < -1)
      goto LABEL_146;
    goto LABEL_123;
  }
  if (v25 < 0)
    goto LABEL_145;
  if (v25)
    return sub_10003FC80(0, v25, 1, (uint64_t (*)(uint64_t, uint64_t))v151);
  return result;
}

uint64_t sub_10003FC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = v4;
  v37 = a4;
  v32 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  v10 = __chkstk_darwin(v32);
  v39 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v29 - v13;
  result = __chkstk_darwin(v12);
  v35 = (uint64_t)&v29 - v16;
  v31 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v41 = v17 * (a3 - 1);
    v33 = v17;
    v40 = v17 * a3;
    v30 = a1;
    v18 = (uint64_t)v36;
LABEL_4:
    v19 = 0;
    v34 = a3;
    while (1)
    {
      v38 = a1;
      v20 = v6;
      v21 = *v6;
      v22 = v40 + v19 + *v6;
      v23 = v35;
      sub_10003D390(v22, v35);
      sub_10003D390(v41 + v19 + v21, v18);
      v24 = v37(v23, v18);
      sub_10003D354(v18);
      result = sub_10003D354(v23);
      if (v5)
        break;
      if ((v24 & 1) == 0)
      {
        v28 = v34;
        v6 = v20;
LABEL_11:
        a3 = v28 + 1;
        v41 += v33;
        v40 += v33;
        a1 = v30;
        if (a3 != v31)
          goto LABEL_4;
        return result;
      }
      v25 = *v20;
      if (!*v20)
      {
        __break(1u);
        return result;
      }
      v26 = v25 + v40 + v19;
      v27 = v25 + v41 + v19;
      sub_10003D6E4(v26, v39);
      swift_arrayInitWithTakeFrontToBack(v26, v27, 1, v32);
      result = sub_10003D6E4(v39, v27);
      v28 = v34;
      v19 -= v33;
      a1 = v38 + 1;
      v6 = v20;
      if (v34 == v38 + 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_10003FEB4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  unint64_t v52;
  int64_t v55;
  uint64_t v57;
  int64_t v59;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t);
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  v67 = a6;
  v68 = a5;
  v66 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
  v11 = __chkstk_darwin(v66);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v61 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v61 - v16;
  result = __chkstk_darwin(v15);
  v22 = *(_QWORD *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v23 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v22 == -1)
    goto LABEL_86;
  v25 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v22 == -1)
    goto LABEL_87;
  v65 = a4;
  v27 = v23 / v22;
  v28 = v25 / v22;
  v69 = v22;
  if (v23 / v22 >= v25 / v22)
  {
    v64 = v20;
    v33 = v65;
    result = sub_10003EF20(a2, v25 / v22, v65, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    v34 = v33 + v28 * v22;
    v35 = v28 * v22 < 1 || a1 >= a2;
    v36 = v6;
    if (!v35)
    {
      v45 = -v22;
      v31 = v33 + v28 * v22;
      v62 = a1;
      v63 = v45;
      while (1)
      {
        v46 = v36;
        v71 = v31;
        v31 += v45;
        sub_10003D390(v31, (uint64_t)v14);
        v70 = a2;
        v47 = a2 + v45;
        v48 = a2 + v45;
        v49 = v64;
        sub_10003D390(v48, v64);
        v50 = v68(v14, v49);
        if (v46)
          break;
        v51 = v50;
        v52 = a3 + v45;
        sub_10003D354(v49);
        result = sub_10003D354((uint64_t)v14);
        if ((v51 & 1) != 0)
        {
          if (a3 < v70 || v52 >= v70)
          {
            result = swift_arrayInitWithTakeFrontToBack(a3 + v45, v47, 1, v66);
            v70 = v47;
            v29 = v65;
            v31 = v71;
          }
          else
          {
            v29 = v65;
            v31 = v71;
            if (a3 != v70)
              result = swift_arrayInitWithTakeBackToFront(a3 + v45, v47, 1, v66);
            v70 = v47;
          }
        }
        else if (a3 < v71 || v52 >= v71)
        {
          result = swift_arrayInitWithTakeFrontToBack(v52, v31, 1, v66);
          v29 = v65;
        }
        else
        {
          v29 = v65;
          if (a3 != v71)
            result = swift_arrayInitWithTakeBackToFront(v52, v31, 1, v66);
        }
        v36 = 0;
        v45 = v63;
        if (v31 <= v29)
        {
          a2 = v70;
          goto LABEL_79;
        }
        a3 = v52;
        a2 = v70;
        if (v70 <= v62)
          goto LABEL_79;
      }
      sub_10003D354(v49);
      sub_10003D354((uint64_t)v14);
      result = v65;
      v57 = v71 - v65;
      if (v69 != -1 || v57 != 0x8000000000000000)
      {
        sub_10003EF20(v65, v57 / v69, v70, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        return 1;
      }
      goto LABEL_90;
    }
    v29 = v33;
    v31 = v34;
  }
  else
  {
    v70 = (unint64_t)&v61 - v19;
    v29 = v65;
    result = sub_10003EF20(a1, v23 / v22, v65, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    v30 = v27 * v22;
    v31 = v29 + v27 * v22;
    if (v30 >= 1 && a2 < a3)
    {
      v71 = v31;
      v37 = v6;
      v38 = v70;
      while (1)
      {
        sub_10003D390(a2, v38);
        sub_10003D390(v29, (uint64_t)v17);
        v39 = v68((char *)v38, (uint64_t)v17);
        if (v37)
          break;
        v40 = v39;
        sub_10003D354((uint64_t)v17);
        result = sub_10003D354(v38);
        if ((v40 & 1) != 0)
        {
          v41 = a2 + v69;
          if (a1 < a2 || a1 >= v41)
          {
            result = swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v66);
          }
          else if (a1 != a2)
          {
            result = swift_arrayInitWithTakeBackToFront(a1, a2, 1, v66);
          }
          a2 = v41;
        }
        else
        {
          v43 = v29 + v69;
          if (a1 < v29 || a1 >= v43)
          {
            result = swift_arrayInitWithTakeFrontToBack(a1, v29, 1, v66);
          }
          else if (a1 != v29)
          {
            result = swift_arrayInitWithTakeBackToFront(a1, v29, 1, v66);
          }
          v29 = v43;
        }
        a1 += v69;
        v37 = 0;
        if (v29 >= v71 || a2 >= a3)
        {
          a2 = a1;
          v31 = v71;
          goto LABEL_79;
        }
      }
      sub_10003D354((uint64_t)v17);
      result = sub_10003D354(v38);
      v55 = v71 - v29;
      if (v69 != -1 || v55 != 0x8000000000000000)
      {
        sub_10003EF20(v29, v55 / v69, a1, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        return 1;
      }
      goto LABEL_89;
    }
    a2 = a1;
  }
LABEL_79:
  v59 = v31 - v29;
  if (v69 != -1 || v59 != 0x8000000000000000)
  {
    sub_10003EF20(v29, v59 / v69, a2, (void (*)(_QWORD))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    return 1;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
  return result;
}

_BYTE *sub_1000403D0@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100040438(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_10004048C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_1000404C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100503C88;
  if (!qword_100503C88)
  {
    v1 = type metadata accessor for TransactionType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TransactionType, v1);
    atomic_store(result, (unint64_t *)&qword_100503C88);
  }
  return result;
}

uint64_t sub_100040508(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100032C48(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100040544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100503C90;
  if (!qword_100503C90)
  {
    v1 = sub_100039884(255, &qword_100503A70, NSDate_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100503C90);
  }
  return result;
}

_BYTE *sub_100040594@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000403D0(a1, a2);
}

_QWORD *sub_1000405AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

void type metadata accessor for ASFinanceStoreHelper.TransactionSources()
{
  sub_100035800();
}

void type metadata accessor for ASFinanceStoreHelper.LocationSource()
{
  sub_100035800();
}

__n128 sub_100040600(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100040610(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100040630(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction.Location()
{
  sub_100035800();
}

unint64_t sub_100040668()
{
  unint64_t result;

  result = qword_100503CA0;
  if (!qword_100503CA0)
  {
    result = swift_getWitnessTable(&unk_1004074EC, &unk_1004CFC30);
    atomic_store(result, (unint64_t *)&qword_100503CA0);
  }
  return result;
}

unint64_t sub_1000406A8()
{
  unint64_t result;

  result = qword_100503CA8;
  if (!qword_100503CA8)
  {
    result = swift_getWitnessTable(&unk_1004074BC, &unk_1004CFC30);
    atomic_store(result, (unint64_t *)&qword_100503CA8);
  }
  return result;
}

unint64_t sub_1000406E8()
{
  unint64_t result;

  result = qword_100503CB0;
  if (!qword_100503CB0)
  {
    result = swift_getWitnessTable(&unk_100407514, &unk_1004CFC30);
    atomic_store(result, (unint64_t *)&qword_100503CB0);
  }
  return result;
}

unint64_t sub_100040728()
{
  unint64_t result;

  result = qword_100503CB8;
  if (!qword_100503CB8)
  {
    result = swift_getWitnessTable(&unk_10040754C, &unk_1004CFC30);
    atomic_store(result, (unint64_t *)&qword_100503CB8);
  }
  return result;
}

unint64_t sub_100040768()
{
  unint64_t result;

  result = qword_100503CC0;
  if (!qword_100503CC0)
  {
    result = swift_getWitnessTable(&unk_10040767C, &unk_1004CFC08);
    atomic_store(result, (unint64_t *)&qword_100503CC0);
  }
  return result;
}

unint64_t sub_1000407A8()
{
  unint64_t result;

  result = qword_100503CC8;
  if (!qword_100503CC8)
  {
    result = swift_getWitnessTable(&unk_10040764C, &unk_1004CFC08);
    atomic_store(result, (unint64_t *)&qword_100503CC8);
  }
  return result;
}

unint64_t sub_1000407E8()
{
  unint64_t result;

  result = qword_100503CD0;
  if (!qword_100503CD0)
  {
    result = swift_getWitnessTable(&unk_1004076A4, &unk_1004CFC08);
    atomic_store(result, (unint64_t *)&qword_100503CD0);
  }
  return result;
}

unint64_t sub_100040828()
{
  unint64_t result;

  result = qword_100503CD8;
  if (!qword_100503CD8)
  {
    result = swift_getWitnessTable(&unk_1004076DC, &unk_1004CFC08);
    atomic_store(result, (unint64_t *)&qword_100503CD8);
  }
  return result;
}

uint64_t sub_10004089C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

void *sub_1000408B4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_1000408C4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000408D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_100040900(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100040908@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1);
}

uint64_t sub_100040920()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10004092C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100040940()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  v4 = *(_QWORD *)(v2 + 48);
  *v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t sub_100040964()
{
  return swift_task_switch();
}

uint64_t sub_10004096C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100040980()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 208));
}

uint64_t sub_1000409A0()
{
  return type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction(0);
}

uint64_t sub_1000409A8()
{
  return 0;
}

uint64_t sub_1000409B8()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

void sub_1000409C0()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000409D0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_1000409E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100040A10()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a10 + 16));
}

uint64_t sub_100040A74()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040A7C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040AA0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100040AAC()
{
  return 0x20296625203D3E20;
}

uint64_t sub_100040AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100032C48(a5);
}

uint64_t sub_100040AD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 232);
}

uint64_t sub_100040B0C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040B14()
{
  uint64_t v0;
  uint64_t v1;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

void sub_100040B24()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100040B34()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v4, a3, v3, 0);
}

uint64_t sub_100040B4C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100040B54()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000352C8(v1, 1, v0);
}

void sub_100040B64(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

uint64_t sub_100040B74()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_100040BA0()
{
  return type metadata accessor for InternalTransaction(0);
}

uint64_t sub_100040BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100040BE8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

double sub_100040BF0()
{
  double v0;

  return v0;
}

uint64_t *sub_100040C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_100040C2C()
{
  uint64_t v0;

  return sub_10003D354(v0);
}

uint64_t sub_100040C38()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100040C40(uint64_t a1)
{
  return swift_allocObject(a1, 48, 7);
}

uint64_t sub_100040C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return (*(uint64_t (**)(void))(a22 + 8))();
}

double sub_100040C58()
{
  double v0;

  return v0;
}

void sub_100040C6C(uint64_t a1, SEL *a2)
{
  uint64_t v2;

  sub_10003CCEC(v2, a2);
}

uint64_t sub_100040C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100040C84()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_100040C8C()
{
  return specialized Array._endMutation()();
}

uint64_t sub_100040C94()
{
  return 0;
}

uint64_t sub_100040CA8()
{
  uint64_t v0;

  return v0;
}

id sub_100040CBC(id a1, SEL a2)
{
  double v2;
  double v3;

  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_100040CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Double.write<A>(to:)(a1, v1, v2);
}

unint64_t sub_100040CD4()
{
  return 0xD000000000000015;
}

void sub_100040CE8(uint64_t a1, uint64_t a2)
{
  sub_10005003C(a1, a2, 0xE200000000000000);
}

uint64_t sub_100040CF0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_100040CFC()
{
  uint64_t v0;

  return v0 + 32;
}

id sub_100040D08(void *a1)
{
  uint64_t v1;
  double v2;

  return objc_msgSend(a1, *(SEL *)(v1 + 2272), v2);
}

uint64_t sub_100040D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 24);
}

uint64_t sub_100040D20()
{
  return 1668572518;
}

uint64_t sub_100040D30(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

void sub_100040D38(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_100028D0C();
}

_QWORD *sub_100040D68(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

__n128 sub_100040DBC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *sub_100040DD0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_100040E0C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100040E4C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.LastCompletionKey()
{
  sub_100035800();
}

uint64_t sub_100040E9C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

void sub_100040EC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  sub_100046EC0();
  sub_100028D0C();
}

uint64_t *sub_100040EF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_100040F4C(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100040F88(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100040FC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration()
{
  sub_100035800();
}

_QWORD *sub_100041010(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _UNKNOWN **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = _swiftEmptyArrayStorage;
  v29 = swift_bridgeObjectRetain(a1);
  v3 = v29 + 80;
  v4 = &off_100503000;
  do
  {
    v5 = *(_QWORD *)(v3 - 40);
    if (!v5 || (*(_BYTE *)(v3 - 24) & 1) != 0)
    {
      if (v4[132] != (_UNKNOWN *)-1)
        swift_once(&qword_100503420, sub_1000330AC);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_1000352B0(v6, (uint64_t)qword_1005185E8);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.fault.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)sub_100047004();
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "Error in config - Workflow missing workflowId or frequency", v11, 2u);
        sub_100033080((uint64_t)v11);
      }

      goto LABEL_35;
    }
    v31 = *(_QWORD *)(v3 - 32);
    v32 = *(_QWORD *)(v3 - 48);
    v30 = *(_BYTE *)(v3 - 23);
    v34 = *(_OWORD *)(v3 - 16);
    v33 = *(_BYTE *)v3;
    v12 = *(_QWORD **)(v3 + 8);
    v13 = *(_QWORD *)(v3 + 24);
    v35 = *(_QWORD *)(v3 + 32);
    v36 = *(_QWORD *)(v3 + 16);
    v14 = *(_QWORD *)(v3 + 40);
    if (v12 == (_QWORD *)1 || (v15 = *(_QWORD *)(v3 + 56)) == 0)
    {
      sub_100046EC0();
      swift_bridgeObjectRelease(0);
      v15 = 0xE100000000000000;
      v17 = 1;
      v16 = 67;
    }
    else
    {
      v12 = v2;
      v2 = *(_QWORD **)(v3 + 40);
      v14 = *(_QWORD *)(v3 + 24);
      v16 = *(_QWORD *)(v3 + 48);
      LODWORD(v13) = 0;
      v17 = v15 == 0xE100000000000000;
      sub_100046EC0();
      swift_bridgeObjectRetain(v15);
      if (v16 == 65 && v15 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(0xE100000000000000);
        v19 = 1;
        sub_100046FCC();
LABEL_29:
        v21 = v13 & 0x10101;
        sub_1000470C4();
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v35);
        goto LABEL_30;
      }
      sub_100046FCC();
    }
    if ((sub_100046D94(65, 0xE100000000000000) & 1) != 0)
    {
      sub_100039950();
      v19 = 1;
    }
    else
    {
      v20 = v16 == 67 && v17;
      if (v20 || (sub_100046D94(67, 0xE100000000000000) & 1) != 0)
      {
        sub_100039950();
        v19 = 4;
      }
      else if (v16 == 17217 && v15 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease(0xE200000000000000);
        v19 = 5;
      }
      else
      {
        v25 = sub_100046D94(17217, 0xE200000000000000);
        sub_100039950();
        if ((v25 & 1) != 0)
          v19 = 5;
        else
          v19 = 4;
      }
    }
    if (v12 != (_QWORD *)1)
      goto LABEL_29;
    v35 = 0;
    v36 = 0;
    v21 = 0;
    v14 = 0;
LABEL_30:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    {
      sub_100047010();
      v2 = v26;
    }
    v22 = v2[2];
    if (v22 >= v2[3] >> 1)
    {
      sub_100047010();
      v2 = v27;
    }
    v2[2] = v22 + 1;
    v23 = &v2[13 * v22];
    v23[4] = v32;
    v23[5] = v5;
    v23[6] = v31;
    *((_BYTE *)v23 + 56) = v30 & 1;
    v23[8] = v19;
    *(_OWORD *)(v23 + 9) = v34;
    *((_BYTE *)v23 + 88) = v33;
    v23[12] = v12;
    v23[13] = v36;
    v23[14] = v21;
    v23[15] = v35;
    v23[16] = v14;
    v4 = &off_100503000;
LABEL_35:
    v3 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(v29);
  return v2;
}

void sub_100041368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  objc_class *v5;
  objc_class *v6;
  NSNumber v7;
  unint64_t v8;
  NSNumber *v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain_n(a1, 2);
    v3 = a1 + 40;
    v4 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *(objc_class **)v3;
      if (*(_QWORD *)v3 && (*(_BYTE *)(v3 + 40) & 1) == 0)
      {
        v6 = *(objc_class **)(v3 - 8);
        swift_bridgeObjectRetain();
        v7.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        {
          sub_10004701C();
          v4 = v10;
        }
        v8 = v4[2];
        if (v8 >= v4[3] >> 1)
        {
          sub_10004701C();
          v4 = v11;
        }
        v4[2] = v8 + 1;
        v9 = (NSNumber *)&v4[3 * v8];
        v9[4].super.super.isa = v6;
        v9[5].super.super.isa = v5;
        v9[6].super.super.isa = v7.super.super.isa;
      }
      v3 += 112;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
  }
  sub_100041484((uint64_t)v4);
  sub_100046FA4();
}

_QWORD *sub_100041484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_100032C48(&qword_100503D80);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  v7 = v4;
  sub_100044AE0(a1, 1, &v7);
  v5 = v7;
  if (v1)
    swift_release(v7);
  return v5;
}

uint64_t sub_100041510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  _QWORD *v9;
  _UNKNOWN **v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  Swift::Int v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v8 = 0;
  v9 = &_swiftEmptyDictionarySingleton;
  v10 = &off_100503000;
  v51 = v7;
  while (v6)
  {
    v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v12 = v11 | (v8 << 6);
LABEL_20:
    v16 = *(_QWORD *)(a2 + 56) + 32 * v12;
    if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    {
      if (v10[132] != (_UNKNOWN *)-1)
        swift_once(&qword_100503420, sub_1000330AC);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_1000352B0(v17, (uint64_t)qword_1005185E8);
      v19 = Logger.logObject.getter(v18);
      v21 = static os_log_type_t.fault.getter(v19, v20);
      if (os_log_type_enabled(v19, v21))
      {
        v22 = (uint8_t *)sub_100047004();
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v21, "Error in config - Permitted binding confing missing ttl", v22, 2u);
        sub_100033080((uint64_t)v22);
      }

    }
    else
    {
      v23 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v12);
      v24 = *v23;
      v25 = v23[1];
      v26 = *(_QWORD *)v16;
      LODWORD(v23) = *(unsigned __int8 *)(v16 + 24);
      v27 = *(_QWORD *)(v16 + 16);
      if ((_DWORD)v23)
        v28 = 1;
      else
        v28 = v27;
      v52 = v28;
      v53 = v26;
      sub_100046E84();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
      v54 = v9;
      v30 = sub_100052C20(v24, v25);
      v32 = v9[2];
      v33 = (v31 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_41;
      v35 = v30;
      v36 = v31;
      sub_100032C48(&qword_100503D78);
      v37 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v34);
      if ((v37 & 1) != 0)
      {
        v37 = sub_100052C20(v24, v25);
        if ((v36 & 1) != (v38 & 1))
          goto LABEL_43;
        v35 = v37;
      }
      v9 = v54;
      if ((v36 & 1) != 0)
      {
        sub_100046F2C(v37, v38, v39, v40, v41, v42, v43, v44, v50, v51, v24, v52, v53);
      }
      else
      {
        v54[(v35 >> 6) + 8] |= 1 << v35;
        v45 = (uint64_t *)(v54[6] + 16 * v35);
        *v45 = v24;
        v45[1] = v25;
        sub_100046F2C(v37, v38, v39, v40, v41, v42, v43, v44, v50, v51, v24, v52, v53);
        v46 = v54[2];
        v47 = __OFADD__(v46, 1);
        v48 = v46 + 1;
        if (v47)
          goto LABEL_42;
        v54[2] = v48;
        sub_100046E84();
      }
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(0x8000000000000000);
      v7 = v51;
      v10 = &off_100503000;
    }
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v13 >= v7)
    goto LABEL_38;
  v14 = *(_QWORD *)(v3 + 8 * v13);
  ++v8;
  if (v14)
    goto LABEL_19;
  v8 = v13 + 1;
  if (v13 + 1 >= v7)
    goto LABEL_38;
  v14 = *(_QWORD *)(v3 + 8 * v8);
  if (v14)
    goto LABEL_19;
  v8 = v13 + 2;
  if (v13 + 2 >= v7)
    goto LABEL_38;
  v14 = *(_QWORD *)(v3 + 8 * v8);
  if (v14)
  {
LABEL_19:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_20;
  }
  v15 = v13 + 3;
  if (v15 >= v7)
  {
LABEL_38:
    swift_release(a2);
    return (uint64_t)v9;
  }
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v7)
      goto LABEL_38;
    v14 = *(_QWORD *)(v3 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100041844(Swift::String string)
{
  void *object;
  Swift::String v2;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004CF558, v2);
  sub_100039950();
  sub_100028D0C();
}

uint64_t sub_100041888()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1000470A0();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000418AC + 4 * byte_100407860[v1]))(v0);
}

unint64_t sub_1000418AC()
{
  return sub_100046EC8();
}

uint64_t sub_1000418C0()
{
  return sub_100047068();
}

uint64_t sub_1000418D0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1000470A0();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000418F4 + 4 * byte_100407865[v1]))(v0);
}

unint64_t sub_1000418F4()
{
  return sub_100046EC8();
}

uint64_t sub_100041908()
{
  return sub_100047068();
}

void sub_100041918(char *a1)
{
  sub_100039A10(*a1);
}

void sub_100041924()
{
  unsigned __int8 *v0;

  sub_100058290(*v0);
}

void sub_10004192C(uint64_t a1)
{
  char *v1;

  sub_100058334(a1, *v1);
}

void sub_100041934(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100058558(a1, *v1);
}

void sub_10004193C(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_100041844(*a1);
  *a2 = v3;
}

uint64_t sub_100041968@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100041888();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100041990()
{
  return sub_1000418D0();
}

uint64_t sub_100041998@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100041884(a1);
  *a2 = result;
  return result;
}

void sub_1000419BC(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000419C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045E04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000419F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045E04();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100041A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  char v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  __int16 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  __int16 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 == *(_QWORD *)a2 && v4 == v5;
  if (v7 || (v8 = sub_100046E14(v6, v4, *(_QWORD *)a2, v5), result = 0, (v8 & 1) != 0))
  {
LABEL_10:
    v10 = *(_BYTE *)(a2 + 24);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 24))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
        v10 = 1;
      if ((v10 & 1) != 0)
        return 0;
    }
    v11 = *(unsigned __int8 *)(a1 + 25);
    v12 = *(unsigned __int8 *)(a2 + 25);
    if (v11 == 2)
    {
      if (v12 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v12 == 2 || ((v12 ^ v11) & 1) != 0)
        return result;
    }
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 1) == 0)
        return 0;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 48) & 1) != 0)
        return 0;
      if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32) || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
        return 0;
    }
    v15 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(a1 + 88);
    v18 = *(_QWORD *)(a1 + 96);
    v20 = *(_QWORD *)(a1 + 104);
    v22 = *(_QWORD *)(a2 + 56);
    v21 = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a2 + 72);
    v24 = *(_QWORD *)(a2 + 80);
    v26 = *(_QWORD *)(a2 + 88);
    v25 = *(_QWORD *)(a2 + 96);
    v27 = *(_QWORD *)(a2 + 104);
    if (v15 == 1)
    {
      if (v22 == 1)
        return 1;
      goto LABEL_34;
    }
    if (v22 == 1)
    {
LABEL_34:
      v44 = v16;
      v45 = v19;
      v46 = v18;
      v28 = v20;
      sub_100045EF4(v15, v14, v17, v16, v19, v18, v20);
      sub_100046EF4();
      sub_100045EF4(v29, v30, v31, v32, v33, v34, v35);
      sub_100045F54(v15, v14, v17, v44, v45, v46, v28);
      sub_100046EF4();
      sub_100045F54(v36, v37, v38, v39, v40, v41, v42);
      return 0;
    }
    v47[0] = v15;
    v47[1] = v14;
    v48 = v17;
    v49 = BYTE2(v17);
    v50 = v16;
    v51 = v19;
    v52 = v18;
    v53 = v20;
    v54[0] = v22;
    v54[1] = v21;
    v55 = v23;
    v56 = BYTE2(v23);
    v57 = v24;
    v58 = v26;
    v59 = v25;
    v60 = v27;
    sub_100042B14((uint64_t)v47, (uint64_t)v54);
    return (v43 & 1) != 0;
  }
  return result;
}

void sub_100041C2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[63];
  char v27;
  _BYTE v28[63];
  char v29;
  _BYTE v30[24];

  v4 = v1;
  sub_100032C48(&qword_100503DF8);
  sub_100046E54();
  __chkstk_darwin(v6);
  sub_100032EFC(a1, a1[3]);
  v7 = sub_100045E04();
  sub_100046EAC((uint64_t)&unk_1004D0600, v8, v7);
  v26[0] = 0;
  sub_100047054();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v9, v10, v11, v12);
  if (!v2)
  {
    sub_100046C5C(v4 + 32, (uint64_t)v30);
    sub_100046C5C((uint64_t)v30, (uint64_t)v26);
    v27 = 1;
    v13 = sub_100045FEC();
    sub_100046C7C(v13, v14, v15, (uint64_t)&unk_1004CFF48, v13);
    v26[0] = 2;
    sub_100047054();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v18, v19);
    sub_100046C5C(v4 + 25, (uint64_t)&v29);
    sub_100046C5C((uint64_t)&v29, (uint64_t)v26);
    v27 = 3;
    v20 = sub_100046028();
    sub_100046C7C(v20, v21, v22, (uint64_t)&unk_1004D0690, v20);
    sub_100046C5C(v4 + 56, (uint64_t)v28);
    sub_100046C5C((uint64_t)v28, (uint64_t)v26);
    v27 = 4;
    v23 = sub_100046064();
    sub_100046C7C(v23, v24, v25, (uint64_t)&unk_1004D03A0, v23);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100046E70();
}

void sub_100041DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  sub_100046C44();
  a22 = v25;
  a23 = v26;
  sub_100046E64();
  v28 = v27;
  v29 = sub_100032C48(&qword_100503DC0);
  sub_100046E34();
  __chkstk_darwin(v30);
  sub_100046F7C();
  v31 = v23[3];
  v32 = v23[4];
  sub_100032EFC(v23, v31);
  v33 = sub_100045E04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1004D0600, &unk_1004D0600, v33, v31, v32);
  if (v24)
  {
    sub_100046C94();
  }
  else
  {
    LOBYTE(v54) = 0;
    v34 = sub_100046FAC();
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34);
    v37 = v36;
    a13 = 1;
    v38 = sub_100045E40();
    sub_100046E84();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1004CFF48, &a13, v29, &unk_1004CFF48, v38);
    v53 = v54;
    LOBYTE(v54) = 2;
    v39 = sub_100046FAC();
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v39, v40);
    v51 = v42;
    v52 = v41;
    a13 = 3;
    v43 = sub_100045E7C();
    sub_100046D78((uint64_t)&unk_1004D0690, v44, v45, v46, v43);
    a13 = 4;
    v47 = sub_100045EB8();
    sub_100046D78((uint64_t)&unk_1004D03A0, v48, v49, v50, v47);
    sub_100046DA4();
    sub_100046E84();
    sub_100045EF4(v54, v55, v56, v57, v58, v59, v60);
    sub_100035714();
    sub_100032F94(v23);
    sub_100035714();
    sub_100045F54(v54, v55, v56, v57, v58, v59, v60);
    *(_QWORD *)v28 = v35;
    *(_QWORD *)(v28 + 8) = v37;
    *(_QWORD *)(v28 + 16) = v52;
    *(_BYTE *)(v28 + 24) = v51 & 1;
    *(_BYTE *)(v28 + 25) = 2;
    *(_QWORD *)(v28 + 32) = v53;
    *(_QWORD *)(v28 + 40) = v55;
    *(_BYTE *)(v28 + 48) = v56;
    *(_QWORD *)(v28 + 56) = v54;
    *(_QWORD *)(v28 + 64) = v55;
    *(_QWORD *)(v28 + 72) = v56;
    *(_QWORD *)(v28 + 80) = v57;
    *(_QWORD *)(v28 + 88) = v58;
    *(_QWORD *)(v28 + 96) = v59;
    *(_QWORD *)(v28 + 104) = v60;
  }
  sub_100046FE0();
  sub_100046BF8();
}

void sub_10004203C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11[14];

  sub_100041DC8(a1, a2, a3, a4, a5, a6, a7, a8, v11[0], v11[1], SWORD2(v11[1]), SBYTE6(v11[1]), SHIBYTE(v11[1]), v11[2], v11[3], v11[4], v11[5], v11[6], v11[7],
    v11[8],
    v11[9],
    v11[10],
    v11[11]);
  if (!v9)
    memcpy(a9, v11, 0x70uLL);
}

void sub_100042084(_QWORD *a1)
{
  const void *v1;
  _BYTE v3[112];

  memcpy(v3, v1, sizeof(v3));
  sub_100041C2C(a1);
}

BOOL sub_1000420D8()
{
  _BOOL8 v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  sub_100046E64();
  sub_100032EFC(v2, v2[3]);
  v3 = sub_100047028();
  dispatch thunk of Decoder.singleValueContainer()(v3);
  if (v1)
  {
    sub_100046C94();
  }
  else
  {
    sub_100032EFC(v7, v7[3]);
    v4 = sub_100047028();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v4);
    sub_100032F94(v7);
    v0 = v5 == 2;
    sub_100046C94();
  }
  return v0;
}

BOOL sub_100042174(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_100042184(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x63656C6C6F636572 && a2 == 0xEC0000006E6F6974)
  {
    v5 = 0xEC0000006E6F6974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63656C6C6F636572, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7373657567 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7373657567, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100042280(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7373657567;
  else
    return 0x63656C6C6F636572;
}

uint64_t sub_1000422BC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a2);
  return 1;
}

uint64_t sub_1000422D8()
{
  return 1;
}

uint64_t sub_1000422E0()
{
  return 0;
}

void sub_1000422EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_100046C44();
  a23 = v24;
  a24 = v25;
  a10 = v26;
  v28 = v27;
  v29 = sub_100032C48(&qword_100503EF0);
  v43 = *(_QWORD *)(v29 - 8);
  v44 = v29;
  __chkstk_darwin(v29);
  sub_100046E44();
  v32 = v31 - v30;
  v42 = sub_100032C48(&qword_100503EF8);
  v33 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_100046E44();
  v36 = v35 - v34;
  v37 = sub_100032C48(&qword_100503F00);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = v28[3];
  v40 = v28[4];
  sub_100032EFC(v28, v39);
  v41 = sub_1000467D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys, &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys, v41, v39, v40);
  if ((a10 & 1) != 0)
  {
    a14 = 1;
    sub_100046814();
    sub_100046F1C((uint64_t)&type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys, (uint64_t)&a14);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v32, v44);
  }
  else
  {
    a13 = 0;
    sub_100046850();
    sub_100046F1C((uint64_t)&type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v42);
  }
  sub_100046E8C(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  sub_100046BF8();
}

uint64_t sub_100042474()
{
  char *v0;

  return sub_100042280(*v0);
}

uint64_t sub_10004247C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100042184(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000424A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000467D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000424C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000467D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000424F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000422BC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10004251C()
{
  return _s3asd10CoordRangeV9westLimitSdSgvpfi_0();
}

uint64_t sub_100042534@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000422D8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004255C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046814();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042584(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046814();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000425AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000425D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046850();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000425FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100042174(*a1, *a2);
}

BOOL sub_100042608@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BOOL8 result;

  result = sub_1000420D8();
  if (!v1)
    *a1 = result;
  return result;
}

#error "100042640: call analysis failed (funcsize=6)"

void sub_10004264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;

  sub_100046C44();
  a22 = v27;
  a23 = v28;
  v29 = sub_100032C48(&qword_100503E38);
  sub_100046E54();
  __chkstk_darwin(v30);
  sub_100046DF4();
  v31 = sub_1000460A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys, &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys, v31, v24, v25);
  if (!v23)
  {
    a13 = 0;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a13, v29);
    a12 = 1;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12);
    if (v33)
      v34 = v32;
    else
      v34 = 65;
    if (v33)
      v35 = v33;
    else
      v35 = 0xE100000000000000;
    if (v34 == 65 && v35 == 0xE100000000000000)
    {
      v37 = 0xE100000000000000;
    }
    else if ((sub_100046DDC(65, 0xE100000000000000) & 1) != 0)
    {
      v37 = v35;
    }
    else if (v34 == 67 && v35 == 0xE100000000000000)
    {
      v37 = 0xE100000000000000;
    }
    else
    {
      if ((sub_100046DDC(67, 0xE100000000000000) & 1) == 0)
      {
        if (v34 == 17217 && v35 == 0xE200000000000000)
        {
          swift_bridgeObjectRelease(0xE200000000000000);
        }
        else
        {
          sub_100046DDC(17217, 0xE200000000000000);
          sub_1000356D4();
        }
        goto LABEL_19;
      }
      v37 = v35;
    }
    swift_bridgeObjectRelease(v37);
LABEL_19:
    sub_100046E8C(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    sub_100046C94();
    goto LABEL_4;
  }
  sub_100046C94();
LABEL_4:
  sub_100046BF8();
}

BOOL sub_10004281C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t sub_10004282C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 7107700 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107700, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
  {
    swift_bridgeObjectRelease(0xED00007373616C43);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xED00007373616C43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10004292C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6465726975716572;
  else
    return 7107700;
}

void sub_100042968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  sub_100046C44();
  a21 = v27;
  a22 = v28;
  sub_10004708C();
  v29 = sub_100032C48(&qword_100503E48);
  sub_100046E34();
  __chkstk_darwin(v30);
  sub_100032EFC(v22, v22[3]);
  v31 = sub_1000460A0();
  sub_100046E98((uint64_t)&type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys, v32, v31);
  HIBYTE(a12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v25, (char *)&a12 + 1, v29);
  if (!v24)
  {
    v34 = v23;
    v33 = sub_100047048();
    sub_100046DB4((uint64_t)&v34, (uint64_t)&a12, v29, (uint64_t)&type metadata for DataProtectionClassOptions, v33);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  sub_100046BF8();
}

uint64_t sub_100042A44()
{
  char *v0;

  return sub_10004292C(*v0);
}

uint64_t sub_100042A4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10004282C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100042A70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000460A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000460A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100042AD0: call analysis failed (funcsize=10)"

#error "100042AF4: call analysis failed (funcsize=6)"

BOOL sub_100042B00(uint64_t *a1, uint64_t *a2)
{
  return sub_10004281C(*a1, a1[1], *a2, a2[1]);
}

void sub_100042B14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)a2;
  if (v4)
  {
    if (!v5 || (sub_100044A14(v4, v5) & 1) == 0)
      goto LABEL_43;
  }
  else if (v5)
  {
    goto LABEL_43;
  }
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD **)(a2 + 8);
  if (v6)
  {
    if (!v7 || (sub_100044A14(v6, v7) & 1) == 0)
      goto LABEL_43;
  }
  else if (v7)
  {
    goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 16) == 2)
  {
    if (*(_BYTE *)(a2 + 16) != 2)
      goto LABEL_43;
  }
  else
  {
    sub_100046F5C();
    if (v8 == 2 || ((v9 ^ v8) & 1) == 0)
      goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 17) == 2)
  {
    if (*(_BYTE *)(a2 + 17) != 2)
      goto LABEL_43;
  }
  else
  {
    sub_100046F5C();
    if (v10 == 2 || ((v11 ^ v10) & 1) == 0)
      goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 18) == 2)
  {
    if (*(_BYTE *)(a2 + 18) != 2)
      goto LABEL_43;
  }
  else
  {
    sub_100046F5C();
    if (v12 == 2 || ((v13 ^ v12) & 1) == 0)
      goto LABEL_43;
  }
  v14 = *(_QWORD **)(a1 + 24);
  v15 = *(_QWORD **)(a2 + 24);
  if (v14)
  {
    if (!v15 || (sub_100044A14(v14, v15) & 1) == 0)
      goto LABEL_43;
  }
  else if (v15)
  {
    goto LABEL_43;
  }
  v16 = *(_QWORD **)(a1 + 32);
  v17 = *(_QWORD **)(a2 + 32);
  if (v16)
  {
    if (!v17 || (sub_100044A14(v16, v17) & 1) == 0)
      goto LABEL_43;
  }
  else if (v17)
  {
    goto LABEL_43;
  }
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a2 + 48);
  if (v18 && v19)
  {
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a2 + 40);
    if (v20 != v21 || v18 != v19)
      sub_100046E14(v20, v18, v21, v19);
  }
LABEL_43:
  sub_100028D0C();
}

void sub_100042C7C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_100042CA0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;

  if (a1 == 0x73694C776F6C6C61 && a2 == 0xEF736F6547646574)
  {
    v5 = 0xEF736F6547646574;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73694C776F6C6C61, 0xEF736F6547646574, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7473694C796E6564 && a2 == 0xEE00736F65476465)
  {
    v8 = 0xEE00736F65476465;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7473694C796E6564, 0xEE00736F65476465, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001003E41B0)
  {
    v9 = 0x80000001003E41B0;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001003E41B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000017)
  {
    v10 = 0x80000001003E41D0;
    if (a2 == 0x80000001003E41D0)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001003E41D0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if (a1 == 0x7269757165526D67 && a2 == 0xEA00000000006465)
  {
    v12 = 0xEA00000000006465;
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7269757165526D67, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v12);
    return 4;
  }
  if (a1 == 0xD000000000000017)
  {
    v13 = 0x80000001003E41F0;
    if (a2 == 0x80000001003E41F0)
      goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001003E41F0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v13);
    return 5;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001003E4210)
  {
    v14 = 0x80000001003E4210;
LABEL_46:
    swift_bridgeObjectRelease(v14);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001003E4210, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
  {
    swift_bridgeObjectRelease(0xED00007373616C43);
    return 7;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xED00007373616C43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_10004302C()
{
  return 8;
}

Swift::Int sub_100043034(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_100043078(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000430B8 + 4 * byte_10040786A[a1]))(0x73694C776F6C6C61, 0xEF736F6547646574);
}

uint64_t sub_1000430B8()
{
  return 0x7473694C796E6564;
}

unint64_t sub_1000430DC()
{
  return 0xD000000000000015;
}

uint64_t sub_100043158()
{
  return 0x6465726975716572;
}

void sub_10004317C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12[8];
  _BYTE v13[8];
  _BYTE v14[8];
  _BYTE v15[8];
  _BYTE v16[8];

  v4 = v1;
  v6 = sub_100032C48(&qword_100503E70);
  sub_100046E54();
  __chkstk_darwin(v7);
  sub_100032EFC(a1, a1[3]);
  v8 = sub_1000460DC();
  sub_100046EAC((uint64_t)&type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys, v9, v8);
  sub_100046C5C(v4, (uint64_t)v16);
  sub_100046C5C((uint64_t)v16, (uint64_t)v12);
  sub_100032C48(&qword_100503E60);
  sub_100046158(&qword_100503E80, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_100046C10();
  if (!v2)
  {
    sub_100046C5C(v4 + 8, (uint64_t)v15);
    sub_100046C5C((uint64_t)v15, (uint64_t)v12);
    sub_100046C10();
    sub_100046C64(*(unsigned __int8 *)(v4 + 16), 2);
    sub_100046C64(*(unsigned __int8 *)(v4 + 17), 3);
    sub_100046C64(*(unsigned __int8 *)(v4 + 18), 4);
    sub_100046C5C(v4 + 24, (uint64_t)v14);
    sub_100046C5C((uint64_t)v14, (uint64_t)v12);
    sub_100046C10();
    sub_100046C5C(v4 + 32, (uint64_t)v13);
    sub_100046C5C((uint64_t)v13, (uint64_t)v12);
    sub_100046C10();
    v10 = *(_QWORD *)(v4 + 40);
    v11 = *(_QWORD *)(v4 + 48);
    v12[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, v12, v6);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100046E70();
}

void sub_100043374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  sub_100046C44();
  a19 = v22;
  a20 = v23;
  sub_100046E64();
  v25 = v24;
  v26 = sub_100032C48(&qword_100503E50);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_100046E44();
  v30 = v29 - v28;
  v31 = v20[3];
  v32 = v20[4];
  sub_100032EFC(v20, v31);
  v33 = sub_1000460DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys, &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys, v33, v31, v32);
  if (v21)
  {
    sub_100046C94();
    swift_bridgeObjectRelease(0);
    sub_100046DEC();
    sub_100039998();
    sub_100035714();
    sub_100046EEC();
  }
  else
  {
    v46 = v27;
    sub_100032C48(&qword_100503E60);
    sub_100046158(&qword_100503E68, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100046C9C();
    v34 = a10;
    sub_10004703C();
    swift_bridgeObjectRetain(v34);
    sub_100046C9C();
    v35 = a10;
    LOBYTE(a10) = 2;
    sub_100046E84();
    v45 = sub_100046CF0();
    LOBYTE(a10) = 3;
    v44 = sub_100046CF0();
    LOBYTE(a10) = 4;
    v43 = sub_100046CF0();
    sub_100046CC0();
    v42 = v25;
    v36 = a10;
    swift_bridgeObjectRetain(a10);
    sub_100046CC0();
    v37 = a10;
    LOBYTE(a10) = 7;
    sub_1000470C4();
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a10);
    v40 = v39;
    v41 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v47 = v38;
    v41(v30, v26);
    sub_100046EC0();
    swift_bridgeObjectRelease(0);
    sub_100032F94(v20);
    sub_1000356D4();
    sub_100046DEC();
    sub_100046EEC();
    sub_100035714();
    sub_100039998();
    *(_QWORD *)v42 = v34;
    *(_QWORD *)(v42 + 8) = v35;
    *(_BYTE *)(v42 + 16) = v45;
    *(_BYTE *)(v42 + 17) = v44;
    *(_BYTE *)(v42 + 18) = v43;
    *(_QWORD *)(v42 + 24) = v36;
    *(_QWORD *)(v42 + 32) = v37;
    *(_QWORD *)(v42 + 40) = v47;
    *(_QWORD *)(v42 + 48) = v40;
  }
  sub_100046FE0();
  sub_100046BF8();
}

Swift::Int sub_100043634()
{
  unsigned __int8 *v0;

  return sub_100043034(*v0);
}

void sub_10004363C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100042C7C(a1, *v1);
}

Swift::Int sub_100043644(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100043684()
{
  unsigned __int8 *v0;

  return sub_100043078(*v0);
}

uint64_t sub_10004368C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100042CA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000436B0()
{
  return _s3asd10CoordRangeV9westLimitSdSgvpfi_0();
}

uint64_t sub_1000436CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10004302C();
  *a1 = result;
  return result;
}

uint64_t sub_1000436F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000460DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000460DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100043740@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  double result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t vars0;
  uint64_t vars8;

  sub_100043374(a1, a2, a3, a4, a5, a6, a7, a8, v12, v13, v15, v16, v18, v19, v21, v22, v24, v25, vars0, vars8);
  if (!v9)
  {
    *(_OWORD *)a9 = v14;
    *(_OWORD *)(a9 + 16) = v17;
    result = *(double *)&v20;
    *(_OWORD *)(a9 + 32) = v20;
    *(_QWORD *)(a9 + 48) = v23;
  }
  return result;
}

void sub_10004378C(_QWORD *a1)
{
  sub_10004317C(a1);
}

void sub_1000437D0(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_1000437F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 7107700 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107700, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F7473694878616DLL && a2 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease(0xEA00000000007972);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F7473694878616DLL, 0xEA00000000007972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000438DC()
{
  return 2;
}

uint64_t sub_1000438E4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F7473694878616DLL;
  else
    return 7107700;
}

void sub_100043918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  sub_100046C44();
  a23 = v25;
  a24 = v26;
  a10 = v27;
  v43 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = sub_100032C48(&qword_100503E30);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100046E44();
  v39 = v38 - v37;
  v41 = v32[3];
  v40 = v32[4];
  sub_100032EFC(v32, v41);
  v42 = sub_100045FB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys, &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys, v42, v41, v40);
  a14 = 0;
  sub_100046EDC(v30, v34, (uint64_t)&a14);
  if (!v24)
  {
    a13 = 1;
    sub_100046EDC(v43, a10 & 1, (uint64_t)&a13);
  }
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v35);
  sub_100046BF8();
}

void sub_100043A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  sub_100046C44();
  sub_100046E64();
  sub_100032C48(&qword_100503DE8);
  sub_100046E34();
  __chkstk_darwin(v2);
  sub_100046DF4();
  v3 = sub_100045FB0();
  sub_100046E1C((uint64_t)&type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys, v4, v3);
  if (v0)
  {
    sub_100046C94();
  }
  else
  {
    v6 = 0;
    sub_100046F0C((uint64_t)&v6);
    v5 = 1;
    sub_100046F0C((uint64_t)&v5);
    sub_100046D28(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_100046C94();
  }
  sub_100046FE0();
}

void sub_100043B14()
{
  unsigned __int8 *v0;

  sub_1000441DC(*v0);
}

void sub_100043B2C(uint64_t a1)
{
  char *v1;

  sub_1000437D0(a1, *v1);
}

uint64_t sub_100043B34()
{
  char *v0;

  return sub_1000438E4(*v0);
}

uint64_t sub_100043B3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000437F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100043B60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000438DC();
  *a1 = result;
  return result;
}

uint64_t sub_100043B84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045FB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043BAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045FB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100043BD4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  sub_100043A10();
  if (!v1)
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4 & 1;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6 & 1;
  }
}

#error "100043C34: call analysis failed (funcsize=13)"

void sub_100043C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 != a4 || a2 != a5)
    sub_100046E14(a1, a2, a4, a5);
  sub_100028D0C();
}

void sub_100043C8C(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  swift_bridgeObjectRetain(a3);
  sub_100046FC0(a1);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(a4);
}

uint64_t sub_100043CE0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000004449)
  {
    v5 = 0xEA00000000004449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C666B726F77, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
  {
    swift_bridgeObjectRelease(0xED00007373616C43);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xED00007373616C43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100043DFC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6465726975716572;
  else
    return 0x776F6C666B726F77;
}

void sub_100043E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_100046C44();
  a21 = v23;
  a22 = v24;
  v38 = v25;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_100032C48(&qword_100503D00);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = v31[3];
  v35 = v31[4];
  sub_100032EFC(v31, v34);
  v36 = sub_100044764();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys, &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys, v36, v34, v35);
  HIBYTE(a12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v29, v27, (char *)&a12 + 1, v32);
  if (!v22)
  {
    v39 = v38;
    v37 = sub_100047048();
    sub_100046DB4((uint64_t)&v39, (uint64_t)&a12, v32, (uint64_t)&type metadata for DataProtectionClassOptions, v37);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  sub_100046BF8();
}

void sub_100043F50(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12[72];

  sub_100046FF8(a1);
  sub_100046EC0();
  sub_100046FC0((uint64_t)v12);
  v3 = swift_bridgeObjectRelease(a2);
  sub_100046FEC(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12[0]);
  sub_100046F54();
  sub_100046F44();
}

uint64_t sub_100043F98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  char v11;

  sub_100046E64();
  v4 = sub_100032C48(&qword_100503CE8);
  sub_100046E54();
  __chkstk_darwin(v5);
  sub_100046DF4();
  v6 = sub_100044764();
  sub_100046E1C((uint64_t)&type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys, v7, v6);
  if (v1)
  {
    sub_100046C94();
  }
  else
  {
    v11 = 0;
    v2 = KeyedDecodingContainer.decode(_:forKey:)(&v11, v4);
    sub_10004703C();
    v9 = sub_1000447A0();
    sub_1000470C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for DataProtectionClassOptions, &v10, v4, &type metadata for DataProtectionClassOptions, v9);
    sub_100046D28(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_100032F94(v0);
    sub_100046DEC();
  }
  return v2;
}

uint64_t sub_1000440E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x776F6C666B726F77 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C666B726F77, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001003E4190)
  {
    swift_bridgeObjectRelease(0x80000001003E4190);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003E4190, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1000441DC(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_100046FF8(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_100046F54();
  sub_100046FA4();
}

uint64_t sub_100044210(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x776F6C666B726F77;
}

void sub_100044250()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100046C44();
  sub_10004708C();
  sub_100032C48(&qword_100503D50);
  sub_100046E34();
  __chkstk_darwin(v3);
  sub_100032EFC(v0, v0[3]);
  v4 = sub_100044818();
  sub_100046E98((uint64_t)&type metadata for ASPrecomputationConfiguration.CodingKeys, v5, v4);
  sub_100032C48(&qword_100503D20);
  sub_1000448CC(&qword_100503D58, (void (*)(void))sub_100044928, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_100046D58(v6);
  if (!v1)
  {
    sub_10004703C();
    sub_100032C48(&qword_100503D38);
    v7 = sub_100044964(&qword_100503D68, (void (*)(void))sub_1000449D8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    sub_100046D58(v7);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100046BF8();
}

void sub_100044364()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100046C44();
  sub_100046E64();
  v2 = sub_100032C48(&qword_100503D10);
  __chkstk_darwin(v2);
  sub_100046F7C();
  v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &unk_1004D0290, &protocol witness table for String);
  v3 = v0[3];
  v4 = v0[4];
  sub_100032EFC(v0, v3);
  v5 = sub_100044818();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ASPrecomputationConfiguration.CodingKeys, &type metadata for ASPrecomputationConfiguration.CodingKeys, v5, v3, v4);
  if (v1)
  {
    sub_100032F94(v0);
    sub_1000356D4();
    sub_100046DEC();
  }
  else
  {
    sub_100032C48(&qword_100503D20);
    sub_1000448CC(&qword_100503D28, (void (*)(void))sub_100044854, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100046D04(v6);
    sub_100032C48(&qword_100503D38);
    sub_10004703C();
    v7 = sub_100044964(&qword_100503D40, (void (*)(void))sub_100044890, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    sub_100046D04(v7);
    swift_bridgeObjectRelease(v8);
    sub_100046F6C();
    sub_100046C94();
  }
  sub_100046FE0();
  sub_100046BF8();
}

uint64_t sub_1000444E4()
{
  char *v0;

  return sub_100043DFC(*v0);
}

uint64_t sub_1000444EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100043CE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100044510(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044764();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100044538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044764();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100044560()
{
  uint64_t *v0;

  sub_100043F50(*v0, v0[1]);
}

void sub_10004456C(uint64_t a1)
{
  uint64_t v1;

  sub_100043C8C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

void sub_100044578(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  sub_100046F54();
  sub_100046F44();
}

uint64_t sub_1000445D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_100043F98();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
  }
  return result;
}

#error "100044610: call analysis failed (funcsize=7)"

void sub_10004461C(uint64_t *a1, uint64_t *a2)
{
  sub_100043C44(*a1, a1[1], a1[2], *a2, a2[1]);
}

void sub_100044638(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[9];

  v1 = Hasher.init(_seed:)(v10, a1);
  sub_100046FEC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  sub_100046F54();
  sub_100046FA4();
}

uint64_t sub_100044668()
{
  char *v0;

  return sub_100044210(*v0);
}

uint64_t sub_100044670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000440E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100044694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044818();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000446BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044818();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000446E4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_100044364();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

void sub_10004470C()
{
  sub_100044250();
}

unint64_t sub_100044728()
{
  unint64_t result;

  result = qword_100503CE0;
  if (!qword_100503CE0)
  {
    result = swift_getWitnessTable(&unk_100407920, &unk_1004CFE48);
    atomic_store(result, (unint64_t *)&qword_100503CE0);
  }
  return result;
}

unint64_t sub_100044764()
{
  unint64_t result;

  result = qword_100503CF0;
  if (!qword_100503CF0)
  {
    result = swift_getWitnessTable(&unk_100407E1C, &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503CF0);
  }
  return result;
}

unint64_t sub_1000447A0()
{
  unint64_t result;

  result = qword_100503CF8;
  if (!qword_100503CF8)
  {
    result = swift_getWitnessTable(&unk_100409B64, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100503CF8);
  }
  return result;
}

unint64_t sub_1000447DC()
{
  unint64_t result;

  result = qword_100503D08;
  if (!qword_100503D08)
  {
    result = swift_getWitnessTable(&unk_100409B3C, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100503D08);
  }
  return result;
}

unint64_t sub_100044818()
{
  unint64_t result;

  result = qword_100503D18;
  if (!qword_100503D18)
  {
    result = swift_getWitnessTable(&unk_100407DCC, &type metadata for ASPrecomputationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503D18);
  }
  return result;
}

unint64_t sub_100044854()
{
  unint64_t result;

  result = qword_100503D30;
  if (!qword_100503D30)
  {
    result = swift_getWitnessTable(&unk_100407DA4, &unk_1004D0310);
    atomic_store(result, (unint64_t *)&qword_100503D30);
  }
  return result;
}

unint64_t sub_100044890()
{
  unint64_t result;

  result = qword_100503D48;
  if (!qword_100503D48)
  {
    result = swift_getWitnessTable(&unk_100407D7C, &unk_1004D0290);
    atomic_store(result, (unint64_t *)&qword_100503D48);
  }
  return result;
}

void sub_1000448CC(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = sub_100035350(&qword_100503D20);
    a2();
    atomic_store(swift_getWitnessTable(a3, v6), a1);
  }
  sub_100046F94();
}

unint64_t sub_100044928()
{
  unint64_t result;

  result = qword_100503D60;
  if (!qword_100503D60)
  {
    result = swift_getWitnessTable(&unk_100407D54, &unk_1004D0310);
    atomic_store(result, (unint64_t *)&qword_100503D60);
  }
  return result;
}

uint64_t sub_100044964(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100035350(&qword_100503D38);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000449D8()
{
  unint64_t result;

  result = qword_100503D70;
  if (!qword_100503D70)
  {
    result = swift_getWitnessTable(&unk_100407D2C, &unk_1004D0290);
    atomic_store(result, (unint64_t *)&qword_100503D70);
  }
  return result;
}

uint64_t sub_100044A14(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  if (result != v7 || v6 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, v7, v8, 0);
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v11 = a1 + 7;
  v12 = a2 + 7;
  v13 = 1;
  while (v13 < v2)
  {
    result = *(v11 - 1);
    v14 = *v11;
    v15 = *(v12 - 1);
    v16 = *v12;
    if (result != v15 || v14 != v16)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v15, v16, 0);
      if ((result & 1) == 0)
        return 0;
    }
    ++v13;
    v11 += 2;
    v12 += 2;
    if (v2 == v13)
      return 1;
  }
  __break(1u);
  return result;
}

void sub_100044AE0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v26 = v3;
    v6 = (void **)(v3 + 48);
    while (1)
    {
      v8 = (uint64_t)*(v6 - 2);
      v7 = (uint64_t)*(v6 - 1);
      v9 = *v6;
      v10 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v11 = v9;
      v13 = sub_100052C20(v8, v7);
      v14 = v10[2];
      v15 = (v12 & 1) == 0;
      if (__OFADD__(v14, v15))
        break;
      v16 = v12;
      if (v10[3] >= v14 + v15)
      {
        if ((a2 & 1) == 0)
        {
          sub_100032C48(&qword_100503D88);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_10005DEDC();
        v17 = sub_100052C20(v8, v7);
        if ((v16 & 1) != (v18 & 1))
          goto LABEL_18;
        v13 = v17;
      }
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
      {
        v20 = *(id *)(v19[7] + 8 * v13);
        swift_bridgeObjectRelease(v7);

        v21 = v19[7];
        *(_QWORD *)(v21 + 8 * v13) = v20;
      }
      else
      {
        v19[(v13 >> 6) + 8] |= 1 << v13;
        v22 = (uint64_t *)(v19[6] + 16 * v13);
        *v22 = v8;
        v22[1] = v7;
        *(_QWORD *)(v19[7] + 8 * v13) = v11;
        v23 = v19[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_17;
        v19[2] = v25;
      }
      v6 += 3;
      a2 = 1;
      if (!--v4)
      {
        v3 = v26;
        swift_bridgeObjectRelease(v26);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v3);
  }
}

void type metadata accessor for ASPrecomputationConfiguration.AssessmentPayloadCache()
{
  sub_100035800();
}

uint64_t sub_100044CBC(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = a1[8];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
    return swift_bridgeObjectRelease(a1[12]);
  }
  return result;
}

uint64_t sub_100044D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = a2 + 64;
  v5 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v4);
  if (v5 == 1)
  {
    v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 + 32);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
    v10 = *(_QWORD *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v9;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_100044DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (__int128 *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  v10 = (__int128 *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 64);
  if (v7 == 1)
  {
    if (v9 == 1)
    {
      v11 = *v10;
      v12 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *v6 = v11;
      *(_OWORD *)(a1 + 80) = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 64) = v9;
      v15 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v15;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
      v16 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v16;
      v17 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v17;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
    }
  }
  else if (v9 == 1)
  {
    sub_100044F78((_QWORD *)(a1 + 64));
    v13 = *(_QWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 80);
    *v6 = *v10;
    *(_OWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 96) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v9;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v7);
    v18 = *(_QWORD *)(a1 + 72);
    v19 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v18);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    v20 = *(_QWORD *)(a1 + 88);
    v21 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v20);
    v22 = *(_QWORD *)(a1 + 96);
    v23 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v22);
  }
  return a1;
}

_QWORD *sub_100044F78(_QWORD *a1)
{
  sub_100045140(a1);
  return a1;
}

void *sub_100044FA4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t sub_100044FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (v7 != 1)
  {
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease(v7);
      v9 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease(v9);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
      v10 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRelease(v10);
      v11 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease(v11);
      return a1;
    }
    sub_100044F78((_QWORD *)(a1 + 64));
  }
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t sub_10004509C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000450DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedWorkflow()
{
  sub_100035800();
}

uint64_t sub_100045140(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_100045178(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)((char *)a2 + 17);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_1000451DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100045294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100045300(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100045354(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedWorkflow.ValidatedPreconditions()
{
  sub_100035800();
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedBindingConfiguration()
{
  sub_100035800();
}

_BYTE *initializeBufferWithCopyOfBuffer for ASPrecomputationConfiguration.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceContextProvider.ServiceArea(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10004542C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100045440(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100045460(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.BindingConfiguration()
{
  sub_100035800();
}

uint64_t sub_10004549C(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = a1[7];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[8]);
    swift_bridgeObjectRelease(a1[10]);
    swift_bridgeObjectRelease(a1[11]);
    return swift_bridgeObjectRelease(a1[13]);
  }
  return result;
}

uint64_t sub_1000454F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = a2 + 56;
  v5 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  if (v5 == 1)
  {
    v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 72) = v7;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v6 + 32);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v6 + 48);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    v9 = *(_QWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    v11 = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_1000455D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_OWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v9 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v9;
  v11 = (__int128 *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 56);
  if (v8 == 1)
  {
    if (v10 == 1)
    {
      v12 = *v11;
      v13 = *(_OWORD *)(a2 + 72);
      v14 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v13;
      *(_OWORD *)(a1 + 88) = v14;
      *v7 = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v10;
      v18 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v18;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      v19 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v19;
      v20 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v20;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v21 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v21;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
    }
  }
  else if (v10 == 1)
  {
    sub_1000457B8((_QWORD *)(a1 + 56));
    v16 = *(_OWORD *)(a2 + 72);
    v15 = *(_OWORD *)(a2 + 88);
    v17 = *v11;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v16;
    *(_OWORD *)(a1 + 88) = v15;
    *v7 = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v8);
    v22 = *(_QWORD *)(a1 + 64);
    v23 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v22);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    v24 = *(_QWORD *)(a1 + 80);
    v25 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v24);
    v26 = *(_QWORD *)(a1 + 88);
    v27 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v28 = *(_QWORD *)(a2 + 104);
    v29 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
  }
  return a1;
}

_QWORD *sub_1000457B8(_QWORD *a1)
{
  sub_1000459B4(a1);
  return a1;
}

void *sub_1000457E4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_1000457EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v7 != 1)
  {
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 56) = v6;
      swift_bridgeObjectRelease(v7);
      v9 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease(v9);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease(v10);
      v11 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRelease(v11);
      v12 = *(_QWORD *)(a2 + 104);
      v13 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v12;
      swift_bridgeObjectRelease(v13);
      return a1;
    }
    sub_1000457B8((_QWORD *)(a1 + 56));
  }
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t sub_1000458E4(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100045938(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.Workflow()
{
  sub_100035800();
}

uint64_t sub_1000459B4(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t sub_1000459F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)((char *)a2 + 17);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_100045A70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[5] = a2[5];
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for RavioliVerifier.ResponseDTO(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100045B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100045BC4(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100045C18(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.PreconditionsObject()
{
  sub_100035800();
}

unint64_t sub_100045C88()
{
  unint64_t result;

  result = qword_100503D90;
  if (!qword_100503D90)
  {
    result = swift_getWitnessTable(&unk_100407BD4, &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503D90);
  }
  return result;
}

unint64_t sub_100045CC8()
{
  unint64_t result;

  result = qword_100503D98;
  if (!qword_100503D98)
  {
    result = swift_getWitnessTable(&unk_100407C8C, &type metadata for ASPrecomputationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503D98);
  }
  return result;
}

unint64_t sub_100045D08()
{
  unint64_t result;

  result = qword_100503DA0;
  if (!qword_100503DA0)
  {
    result = swift_getWitnessTable(&unk_100407BFC, &type metadata for ASPrecomputationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503DA0);
  }
  return result;
}

unint64_t sub_100045D48()
{
  unint64_t result;

  result = qword_100503DA8;
  if (!qword_100503DA8)
  {
    result = swift_getWitnessTable(&unk_100407C24, &type metadata for ASPrecomputationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503DA8);
  }
  return result;
}

unint64_t sub_100045D88()
{
  unint64_t result;

  result = qword_100503DB0;
  if (!qword_100503DB0)
  {
    result = swift_getWitnessTable(&unk_100407B44, &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503DB0);
  }
  return result;
}

unint64_t sub_100045DC8()
{
  unint64_t result;

  result = qword_100503DB8;
  if (!qword_100503DB8)
  {
    result = swift_getWitnessTable(&unk_100407B6C, &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503DB8);
  }
  return result;
}

unint64_t sub_100045E04()
{
  unint64_t result;

  result = qword_100503DC8;
  if (!qword_100503DC8)
  {
    result = swift_getWitnessTable(&unk_10040833C, &unk_1004D0600);
    atomic_store(result, (unint64_t *)&qword_100503DC8);
  }
  return result;
}

unint64_t sub_100045E40()
{
  unint64_t result;

  result = qword_100503DD0;
  if (!qword_100503DD0)
  {
    result = swift_getWitnessTable(&unk_100407D04, &unk_1004CFF48);
    atomic_store(result, (unint64_t *)&qword_100503DD0);
  }
  return result;
}

unint64_t sub_100045E7C()
{
  unint64_t result;

  result = qword_100503DD8;
  if (!qword_100503DD8)
  {
    result = swift_getWitnessTable(&unk_100408314, &unk_1004D0690);
    atomic_store(result, (unint64_t *)&qword_100503DD8);
  }
  return result;
}

unint64_t sub_100045EB8()
{
  unint64_t result;

  result = qword_100503DE0;
  if (!qword_100503DE0)
  {
    result = swift_getWitnessTable(&unk_100407AF4, &unk_1004D03A0);
    atomic_store(result, (unint64_t *)&qword_100503DE0);
  }
  return result;
}

uint64_t sub_100045EF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;

  if (result != 1)
  {
    v10 = result;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_100045F54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

unint64_t sub_100045FB0()
{
  unint64_t result;

  result = qword_100503DF0;
  if (!qword_100503DF0)
  {
    result = swift_getWitnessTable(&unk_1004082C4, &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503DF0);
  }
  return result;
}

unint64_t sub_100045FEC()
{
  unint64_t result;

  result = qword_100503E08;
  if (!qword_100503E08)
  {
    result = swift_getWitnessTable(&unk_100407CDC, &unk_1004CFF48);
    atomic_store(result, (unint64_t *)&qword_100503E08);
  }
  return result;
}

unint64_t sub_100046028()
{
  unint64_t result;

  result = qword_100503E18;
  if (!qword_100503E18)
  {
    result = swift_getWitnessTable(&unk_10040829C, &unk_1004D0690);
    atomic_store(result, (unint64_t *)&qword_100503E18);
  }
  return result;
}

unint64_t sub_100046064()
{
  unint64_t result;

  result = qword_100503E28;
  if (!qword_100503E28)
  {
    result = swift_getWitnessTable(&unk_100407ACC, &unk_1004D03A0);
    atomic_store(result, (unint64_t *)&qword_100503E28);
  }
  return result;
}

unint64_t sub_1000460A0()
{
  unint64_t result;

  result = qword_100503E40;
  if (!qword_100503E40)
  {
    result = swift_getWitnessTable(&unk_10040824C, &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503E40);
  }
  return result;
}

unint64_t sub_1000460DC()
{
  unint64_t result;

  result = qword_100503E58;
  if (!qword_100503E58)
  {
    result = swift_getWitnessTable(&unk_1004081FC, &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503E58);
  }
  return result;
}

void sub_100046118(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100032C48(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100028D0C();
}

void sub_100046158(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_100035350(&qword_100503E60);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100046F94();
}

uint64_t getEnumTagSinglePayload for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100046280 + 4 * byte_100407877[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000462B4 + 4 * byte_100407872[v4]))();
}

uint64_t sub_1000462B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000462BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000462C4);
  return result;
}

uint64_t sub_1000462D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000462D8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000462DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000462E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000462F0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000462F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys;
}

_BYTE *sub_100046320(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Channel(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1000463C4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100046410 + 4 * byte_100407881[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100046444 + 4 * byte_10040787C[v4]))();
}

uint64_t sub_100046444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004644C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046454);
  return result;
}

uint64_t sub_100046460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046468);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10004646C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.Workflow.CodingKeys()
{
  sub_100035800();
}

void type metadata accessor for ASPrecomputationConfiguration.BindingSource()
{
  sub_100035800();
}

unint64_t sub_10004649C()
{
  unint64_t result;

  result = qword_100503E88;
  if (!qword_100503E88)
  {
    result = swift_getWitnessTable(&unk_100407EBC, &unk_1004D0690);
    atomic_store(result, (unint64_t *)&qword_100503E88);
  }
  return result;
}

unint64_t sub_1000464DC()
{
  unint64_t result;

  result = qword_100503E90;
  if (!qword_100503E90)
  {
    result = swift_getWitnessTable(&unk_100407FAC, &unk_1004D0600);
    atomic_store(result, (unint64_t *)&qword_100503E90);
  }
  return result;
}

unint64_t sub_10004651C()
{
  unint64_t result;

  result = qword_100503E98;
  if (!qword_100503E98)
  {
    result = swift_getWitnessTable(&unk_100408064, &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503E98);
  }
  return result;
}

unint64_t sub_10004655C()
{
  unint64_t result;

  result = qword_100503EA0;
  if (!qword_100503EA0)
  {
    result = swift_getWitnessTable(&unk_10040811C, &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EA0);
  }
  return result;
}

unint64_t sub_10004659C()
{
  unint64_t result;

  result = qword_100503EA8;
  if (!qword_100503EA8)
  {
    result = swift_getWitnessTable(&unk_1004081D4, &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EA8);
  }
  return result;
}

unint64_t sub_1000465DC()
{
  unint64_t result;

  result = qword_100503EB0;
  if (!qword_100503EB0)
  {
    result = swift_getWitnessTable(&unk_100408144, &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EB0);
  }
  return result;
}

unint64_t sub_10004661C()
{
  unint64_t result;

  result = qword_100503EB8;
  if (!qword_100503EB8)
  {
    result = swift_getWitnessTable(&unk_10040816C, &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EB8);
  }
  return result;
}

unint64_t sub_10004665C()
{
  unint64_t result;

  result = qword_100503EC0;
  if (!qword_100503EC0)
  {
    result = swift_getWitnessTable(&unk_10040808C, &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EC0);
  }
  return result;
}

unint64_t sub_10004669C()
{
  unint64_t result;

  result = qword_100503EC8;
  if (!qword_100503EC8)
  {
    result = swift_getWitnessTable(&unk_1004080B4, &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503EC8);
  }
  return result;
}

unint64_t sub_1000466DC()
{
  unint64_t result;

  result = qword_100503ED0;
  if (!qword_100503ED0)
  {
    result = swift_getWitnessTable(&unk_100407FD4, &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503ED0);
  }
  return result;
}

unint64_t sub_10004671C()
{
  unint64_t result;

  result = qword_100503ED8;
  if (!qword_100503ED8)
  {
    result = swift_getWitnessTable(&unk_100407FFC, &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503ED8);
  }
  return result;
}

unint64_t sub_10004675C()
{
  unint64_t result;

  result = qword_100503EE0;
  if (!qword_100503EE0)
  {
    result = swift_getWitnessTable(&unk_100407EE4, &unk_1004D0600);
    atomic_store(result, (unint64_t *)&qword_100503EE0);
  }
  return result;
}

unint64_t sub_10004679C()
{
  unint64_t result;

  result = qword_100503EE8;
  if (!qword_100503EE8)
  {
    result = swift_getWitnessTable(&unk_100407F0C, &unk_1004D0600);
    atomic_store(result, (unint64_t *)&qword_100503EE8);
  }
  return result;
}

unint64_t sub_1000467D8()
{
  unint64_t result;

  result = qword_100503F08;
  if (!qword_100503F08)
  {
    result = swift_getWitnessTable(&unk_1004085B0, &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F08);
  }
  return result;
}

unint64_t sub_100046814()
{
  unint64_t result;

  result = qword_100503F10;
  if (!qword_100503F10)
  {
    result = swift_getWitnessTable(&unk_100408560, &type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F10);
  }
  return result;
}

unint64_t sub_100046850()
{
  unint64_t result;

  result = qword_100503F18;
  if (!qword_100503F18)
  {
    result = swift_getWitnessTable(&unk_100408510, &type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F18);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PushEnvironment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s3asd29ASPrecomputationConfigurationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100046960 + 4 * byte_10040788B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100046994 + 4 * byte_100407886[v4]))();
}

uint64_t sub_100046994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004699C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000469A4);
  return result;
}

uint64_t sub_1000469B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000469B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000469BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000469C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys;
}

unint64_t sub_100046A04()
{
  unint64_t result;

  result = qword_100503F20;
  if (!qword_100503F20)
  {
    result = swift_getWitnessTable(&unk_1004084E8, &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F20);
  }
  return result;
}

unint64_t sub_100046A44()
{
  unint64_t result;

  result = qword_100503F28;
  if (!qword_100503F28)
  {
    result = swift_getWitnessTable(&unk_100408408, &type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F28);
  }
  return result;
}

unint64_t sub_100046A84()
{
  unint64_t result;

  result = qword_100503F30;
  if (!qword_100503F30)
  {
    result = swift_getWitnessTable(&unk_100408430, &type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F30);
  }
  return result;
}

unint64_t sub_100046AC4()
{
  unint64_t result;

  result = qword_100503F38;
  if (!qword_100503F38)
  {
    result = swift_getWitnessTable(&unk_1004083B8, &type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F38);
  }
  return result;
}

unint64_t sub_100046B04()
{
  unint64_t result;

  result = qword_100503F40;
  if (!qword_100503F40)
  {
    result = swift_getWitnessTable(&unk_1004083E0, &type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F40);
  }
  return result;
}

unint64_t sub_100046B44()
{
  unint64_t result;

  result = qword_100503F48;
  if (!qword_100503F48)
  {
    result = swift_getWitnessTable(&unk_100408458, &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100503F48);
  }
  return result;
}

unint64_t sub_100046B84()
{
  unint64_t result;

  result = qword_100503F50;
  if (!qword_100503F50)
  {
    result = swift_getWitnessTable(&unk_100408480, &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys);
    atomic_store(result, &qword_100503F50);
  }
  return result;
}

uint64_t sub_100046C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 104, v3 - 105, v0, v1, v2);
}

uint64_t sub_100046C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

void sub_100046C5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100046118(a1, a2, v2);
}

uint64_t sub_100046C64@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 104) = a2;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, v3 - 104, v2);
}

uint64_t sub_100046C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 216, v6 - 153, v5, a4, a5);
}

uint64_t sub_100046C94()
{
  _QWORD *v0;

  return sub_100032F94(v0);
}

uint64_t sub_100046C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 81, v2, v1, v0);
}

uint64_t sub_100046CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v0, v2 - 81, v1, v0, *(_QWORD *)(v2 - 104));
}

uint64_t sub_100046CE4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100046CF0()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 72, v0);
}

uint64_t sub_100046D04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v3 - 81, v2, v1, a1);
}

uint64_t sub_100046D28@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100046D34()
{
  return 0x53676E69646E6962;
}

uint64_t sub_100046D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

uint64_t sub_100046D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v6 - 65, v5, a1, a5);
}

uint64_t sub_100046D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100046DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100046DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100046DC0()
{
  return 0x636E657571657266;
}

uint64_t sub_100046DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100046DEC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

_QWORD *sub_100046DF4()
{
  _QWORD *v0;

  return sub_100032EFC(v0, v0[3]);
}

uint64_t sub_100046E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_100046E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100046E84()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100046E8C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100046E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100046EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100046EC0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_100046EC8()
{
  return 0xD000000000000016;
}

uint64_t sub_100046EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100046EEC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100046F0C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100046F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_100046F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v15 = (_QWORD *)(*(_QWORD *)(v14 + 56) + 16 * v13);
  *v15 = a13;
  v15[1] = a12;
}

Swift::Int sub_100046F54()
{
  return Hasher._finalize()();
}

uint64_t sub_100046F5C()
{
  return 0;
}

uint64_t sub_100046F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100046FAC()
{
  uint64_t v0;

  return v0 - 136;
}

uint64_t sub_100046FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

void sub_100046FEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

_QWORD *sub_100046FF8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

uint64_t sub_100047004()
{
  return swift_slowAlloc(2, -1);
}

void sub_100047010()
{
  sub_10003DBD0();
}

void sub_10004701C()
{
  sub_10003DC7C();
}

uint64_t sub_100047028()
{
  uint64_t v0;

  return v0;
}

void sub_10004703C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 1;
}

unint64_t sub_100047048()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_1000447DC();
}

uint64_t sub_100047068()
{
  return 0x69646E6F63657270;
}

uint64_t sub_1000470A0()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_1000470C4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000470CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1000470E4, 0, 0);
}

uint64_t sub_1000470E4()
{
  uint64_t v0;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  _QWORD *v9;

  sub_100048DCC();
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 128) + 17) & 1) == 0)
    return sub_100048CB8(1, *(uint64_t (**)(void))(v0 + 8));
  v2 = v0 + 16;
  v3 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  *(_QWORD *)(v0 + 136) = v3;
  v4 = sub_100032C48(&qword_100503BA0);
  v5 = sub_100040C40(v4);
  *(_OWORD *)(v5 + 16) = xmmword_1004077E0;
  *(_QWORD *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifieriTunesStore);
  *(_QWORD *)(v5 + 40) = v6;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 144) = isa;
  sub_100040C38();
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_100047218;
  v8 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v9 = (_QWORD *)(v0 + 80);
  v9[1] = 0x40000000;
  v9[2] = sub_1000473C8;
  v9[3] = &unk_1004D0B10;
  v9[4] = v8;
  objc_msgSend(v3, "accountsWithAccountTypeIdentifiers:completion:", isa, v9);
  return ((uint64_t (*)(uint64_t))swift_continuation_await)(v2);
}

uint64_t sub_100047218()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  sub_100040B24();
  *v1 = *v0;
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v2 + 48);
  return sub_100040920();
}

uint64_t sub_100047268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 120);

  if (v1)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v1 >> 62)
      goto LABEL_16;
    v3 = *(void **)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    for (; v3; v3 = (void *)_CocoaArrayWrapper.endIndex.getter(v10))
    {
      v4 = 0;
      while (1)
      {
        v5 = (v1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1)
           : sub_100048E88(v1 + 8 * v4);
        v6 = v5;
        v7 = (void *)(v4 + 1);
        if (__OFADD__(v4, 1))
          break;
        v8 = objc_msgSend(v5, "isActive");

        if (v8)
        {
          sub_100048E08();
          v1 = 1;
          goto LABEL_14;
        }
        ++v4;
        if (v7 == v3)
          goto LABEL_11;
      }
      __break(1u);
LABEL_16:
      if (v1 >= 0)
        v10 = v2;
      else
        v10 = v1;
      swift_bridgeObjectRetain(v1);
    }
LABEL_11:
    sub_100048E08();
    v1 = 0;
  }
  else
  {
    v3 = *(void **)(v0 + 136);
  }
LABEL_14:

  return sub_100048E00(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100047374()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 136);
  swift_willThrow();

  swift_errorRelease(v2);
  return sub_100048CB8(0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000473C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1000972B4(v3, a3);
  if (a2)
  {
    v6 = sub_100039884(0, &qword_100504030, ACAccount_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v6);
  }
  else
  {
    v7 = 0;
  }
  return sub_100097308(v3, v7);
}

char *sub_10004743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _UNKNOWN **v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  char v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *result;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = &_sScG8IteratorV4next9isolationxSgScA_pSgYi_tYaFTu_ptr;
  if (!v2 || !*(_QWORD *)(v2 + 16))
  {
    v12 = 0;
    goto LABEL_21;
  }
  v4 = objc_allocWithZone((Class)PKPassLibrary);
  swift_bridgeObjectRetain(v2);
  v5 = sub_100048E9C();
  v6 = sub_100048EA8(v5);

  v7 = sub_100039884(0, &qword_100504020, PKPass_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v22 = v8;
    else
      v22 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = _CocoaArrayWrapper.endIndex.getter(v22);
    v9 = sub_100048EC0();
    if (v10)
      goto LABEL_5;
LABEL_19:
    sub_100048EC0();
    v12 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    goto LABEL_19;
LABEL_5:
  sub_100048E18(v9, v10 & ~(v10 >> 63));
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v45 = v1;
  v11 = 0;
  v12 = _swiftEmptyArrayStorage;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
    else
      v13 = sub_100048E88(v8 + 8 * v11);
    v14 = v13;
    v15 = objc_msgSend(v13, "passTypeIdentifier", v45);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v20 = _swiftEmptyArrayStorage[2];
    v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1)
      sub_100048D94(v19);
    ++v11;
    _swiftEmptyArrayStorage[2] = v20 + 1;
    v21 = &_swiftEmptyArrayStorage[2 * v20];
    v21[4] = v16;
    v21[5] = v18;
  }
  while (v10 != v11);
  sub_100048EC0();
  v1 = v45;
  v3 = &_sScG8IteratorV4next9isolationxSgScA_pSgYi_tYaFTu_ptr;
LABEL_20:
  v23 = sub_1000732FC(v2);
  v24 = sub_10004861C((uint64_t)_swiftEmptyArrayStorage, v23);
  sub_100040C38();
  if ((v24 & 1) == 0)
  {
    v26 = 0;
    goto LABEL_45;
  }
LABEL_21:
  if (!v1 || !*(_QWORD *)(v1 + 16))
  {
    v26 = 1;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return (char *)(v26 & 1);
  }
  if (v12)
  {
    swift_bridgeObjectRetain(v1);
    v25 = v12;
LABEL_44:
    v12 = (_QWORD *)sub_1000732FC(v1);
    v26 = sub_100072334((uint64_t)v25, (uint64_t)v12);
    swift_bridgeObjectRelease(v25);
    goto LABEL_45;
  }
  v27 = objc_allocWithZone((Class)v3[380]);
  swift_bridgeObjectRetain(v1);
  v28 = sub_100048E9C();
  v29 = sub_100048EA8(v28);

  v30 = sub_100039884(0, &qword_100504020, PKPass_ptr);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if (!((unint64_t)v2 >> 62))
  {
    v32 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_29;
LABEL_43:
    sub_100040C38();
    v25 = _swiftEmptyArrayStorage;
    goto LABEL_44;
  }
LABEL_39:
  if (v2 < 0)
    v44 = v2;
  else
    v44 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v32 = _CocoaArrayWrapper.endIndex.getter(v44);
  v31 = sub_100040C38();
  if (!v32)
    goto LABEL_43;
LABEL_29:
  v46 = v1;
  result = sub_100048E18(v31, v32 & ~(v32 >> 63));
  if ((v32 & 0x8000000000000000) == 0)
  {
    v34 = 0;
    v25 = _swiftEmptyArrayStorage;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v2);
      else
        v35 = sub_100048E88(v2 + 8 * v34);
      v36 = v35;
      v37 = objc_msgSend(v35, "passTypeIdentifier", v46);
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v42 = _swiftEmptyArrayStorage[2];
      v41 = _swiftEmptyArrayStorage[3];
      if (v42 >= v41 >> 1)
        sub_100048D94(v41);
      ++v34;
      _swiftEmptyArrayStorage[2] = v42 + 1;
      v43 = &_swiftEmptyArrayStorage[2 * v42];
      v43[4] = v38;
      v43[5] = v40;
    }
    while (v32 != v34);
    swift_bridgeObjectRelease(0);
    sub_100040C38();
    v1 = v46;
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000477F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_100032C48(&qword_100503F60);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_1000408C4(v5);
  v6 = sub_100032C48(&qword_1005039D8);
  v3[8] = sub_1000408C4(*(_QWORD *)(v6 - 8));
  return sub_100040920();
}

uint64_t sub_100047860()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0[8];
  v2 = (_QWORD *)v0[3];
  type metadata accessor for TaskPriority(0);
  sub_100048CA4();
  v3 = sub_100040900((uint64_t)&unk_1004D0850, 56);
  sub_100048CC4(v3);
  v4 = sub_100040C40((uint64_t)&unk_1004D0878);
  v5 = sub_100048DE0(v4);
  *(_QWORD *)(v5 + 32) = &unk_100503F70;
  *(_QWORD *)(v5 + 40) = v3;
  v6 = sub_100040C40((uint64_t)&unk_1004D08A0);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  sub_100048E7C(v6, (uint64_t)&unk_100503F80);
  sub_100047E98(v1, (uint64_t)&unk_100503F90, v6);
  sub_100048D08();
  sub_100048CA4();
  v7 = sub_100040900((uint64_t)&unk_1004D08C8, 56);
  sub_100048CC4(v7);
  v8 = sub_100040C40((uint64_t)&unk_1004D08F0);
  v9 = sub_100048EDC(v8);
  *(_QWORD *)(v9 + 32) = &unk_100503FA0;
  *(_QWORD *)(v9 + 40) = v7;
  v10 = sub_100040C40((uint64_t)&unk_1004D0918);
  v11 = sub_100048DE0(v10);
  v12 = sub_100048D30(v11, (uint64_t)&unk_100503FA8);
  sub_100048D3C((uint64_t)v12, (uint64_t)&unk_100503FB0);
  sub_100048D08();
  sub_100048CA4();
  v13 = sub_100040900((uint64_t)&unk_1004D0940, 56);
  sub_100048CC4(v13);
  v14 = sub_100040C40((uint64_t)&unk_1004D0968);
  v15 = sub_100048EDC(v14);
  *(_QWORD *)(v15 + 32) = &unk_100503FC0;
  *(_QWORD *)(v15 + 40) = v13;
  v16 = sub_100040C40((uint64_t)&unk_1004D0990);
  v17 = sub_100048DE0(v16);
  v18 = sub_100048D30(v17, (uint64_t)&unk_100503FC8);
  sub_100048D3C((uint64_t)v18, (uint64_t)&unk_100503FD0);
  sub_100048D08();
  sub_100048CA4();
  v19 = sub_100040900((uint64_t)&unk_1004D09B8, 56);
  sub_100048CC4(v19);
  v20 = sub_100040C40((uint64_t)&unk_1004D09E0);
  v21 = sub_100048EDC(v20);
  *(_QWORD *)(v21 + 32) = &unk_100503FE0;
  *(_QWORD *)(v21 + 40) = v19;
  v22 = sub_100040C40((uint64_t)&unk_1004D0A08);
  v23 = sub_100048DE0(v22);
  v24 = sub_100048D30(v23, (uint64_t)&unk_100503FE8);
  sub_100048D3C((uint64_t)v24, (uint64_t)&unk_100503FF0);
  sub_100048D08();
  sub_100048CA4();
  v25 = sub_100040900((uint64_t)&unk_1004D0A30, 56);
  sub_100048CC4(v25);
  v26 = sub_100040C40((uint64_t)&unk_1004D0A58);
  v27 = sub_100048EDC(v26);
  *(_QWORD *)(v27 + 32) = sub_1000484F8;
  *(_QWORD *)(v27 + 40) = v25;
  v28 = sub_100040C40((uint64_t)&unk_1004D0A80);
  v29 = sub_100048DE0(v28);
  v30 = sub_100048D30(v29, (uint64_t)&unk_100504000);
  sub_100048D3C((uint64_t)v30, (uint64_t)&unk_100504008);
  sub_100048D08();
  sub_100048CA4();
  v31 = sub_100040900((uint64_t)&unk_1004D0AA8, 56);
  sub_100048CC4(v31);
  v32 = sub_100040C40((uint64_t)&unk_1004D0AD0);
  v33 = sub_100048DE0(v32);
  *(_QWORD *)(v33 + 32) = sub_1000485C4;
  *(_QWORD *)(v33 + 40) = v31;
  v34 = sub_100040C40((uint64_t)&unk_1004D0AF8);
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  sub_100048E7C(v34, (uint64_t)&unk_100504010);
  sub_100047E98(v1, (uint64_t)&unk_100504018, v34);
  sub_100048D08();
  TaskGroup.makeAsyncIterator()(*v2, &type metadata for Bool);
  v35 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  v0[9] = v35;
  v36 = sub_100048D50(v35);
  return TaskGroup.Iterator.next(isolation:)(v36);
}

uint64_t sub_100047B6C()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 72));
  return sub_100040920();
}

uint64_t sub_100047BA4()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 == 2)
  {
    v2 = 1;
LABEL_5:
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(char **)(v0 + 16);
    sub_100048EB4(*(_QWORD *)(v0 + 48));
    *v5 = v2;
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
  if ((v1 & 1) == 0)
  {
    TaskGroup.cancelAll()();
    v2 = 0;
    goto LABEL_5;
  }
  v7 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 72) = v7;
  v8 = sub_100048D50(v7);
  return TaskGroup.Iterator.next(isolation:)(v8);
}

uint64_t sub_100047C60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100047C78, 0, 0);
}

uint64_t sub_100047C78()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) & 1) != 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
    v1 = (uint64_t)objc_msgSend(v2, "aa_isUsingiCloud");

  }
  else
  {
    v1 = 1;
  }
  return sub_100048E00(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100047CE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100503F6C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048D84(v1, (uint64_t)sub_100048C28);
  return sub_100047C60(v2);
}

uint64_t sub_100047D2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100048C28;
  return v6();
}

uint64_t sub_100047D84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_100048DCC();
  sub_100048DEC();
  v1 = (_QWORD *)sub_100048D7C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048C80(v1, (uint64_t)sub_100048C28);
  return sub_100048C6C(v2, v3, v4, v5, v6);
}

uint64_t sub_100047DC4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_100047E1C;
  return v7();
}

uint64_t sub_100047E1C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;

  sub_100040B24();
  v4 = *(_BYTE **)(v3 + 16);
  sub_100048CF8(*(_QWORD *)(v3 + 24));
  *v4 = a1;
  return sub_100048DF8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100047E58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_100048EC8();
  sub_100048D14();
  v0 = sub_100048D48();
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_100048C30(v1);
  return sub_100048C58(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100047E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v27[3];
  _QWORD v28[4];

  v4 = v3;
  v8 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100048A98(a1, (uint64_t)v10);
  v11 = type metadata accessor for TaskPriority(0);
  v12 = sub_1000352C8((uint64_t)v10, 1, v11);
  if ((_DWORD)v12 == 1)
  {
    sub_100048A64((uint64_t)v10, &qword_1005039D8);
    v13 = 12544;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v13 = v14 | 0x3100;
  }
  v15 = *(_QWORD *)(a3 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v15);
    v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
    v20 = v19;
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = *v4;
  v22 = swift_allocObject(&unk_1004D0B38, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  v23 = (_QWORD *)(v20 | v18);
  if (v20 | v18)
  {
    v28[0] = 0;
    v28[1] = 0;
    v23 = v28;
    v28[2] = v18;
    v28[3] = v20;
  }
  v27[0] = 1;
  v27[1] = v23;
  v27[2] = v21;
  v24 = swift_task_create(v13, v27, &type metadata for Bool, &unk_100504048, v22);
  return swift_release(v24);
}

uint64_t *sub_100048030(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10004807C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[9] = a1;
  v2 = type metadata accessor for Locale(0);
  v1[10] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[11] = v3;
  v1[12] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100032C48(&qword_100504038);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100048100, 0, 0);
}

uint64_t sub_100048100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  sub_100048DCC();
  sub_100048DAC();
  sub_100048A1C(v3 + 24, v0);
  sub_100048E70();
  v5 = *(_QWORD *)(v3 + 56);
  if (!v5 || !*(_QWORD *)(v5 + 16))
    goto LABEL_6;
  v6 = sub_100048E60();
  Locale.region.getter(v6);
  sub_100048D24(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v7 = type metadata accessor for Locale.Region(0);
  v8 = sub_100048E38(v7);
  if (v9)
  {
    sub_100048A64(v1, &qword_100504038);
LABEL_6:
    v10 = 1;
    goto LABEL_7;
  }
  Locale.Region.identifier.getter(v8);
  sub_100048D24(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8));
  sub_100048E28();
  sub_100048E90();
  v10 = v1 ^ 1;
LABEL_7:
  v11 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  swift_task_dealloc(v11);
  return sub_100048CB8(v10 & 1, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000481C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100503F9C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048D84(v1, (uint64_t)sub_10004820C);
  return sub_10004807C(v2);
}

uint64_t sub_10004820C(uint64_t a1)
{
  uint64_t v1;

  sub_100048CD8();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_100048248()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_100048EC8();
  sub_100048D14();
  v0 = sub_100048D48();
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_100048C30(v1);
  return sub_100048C58(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100048288()
{
  uint64_t v0;

  sub_100048CD8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000482B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[9] = a1;
  v2 = type metadata accessor for Locale(0);
  v1[10] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[11] = v3;
  v1[12] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100032C48(&qword_100504038);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100048338, 0, 0);
}

uint64_t sub_100048338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_100048DCC();
  sub_100048DAC();
  sub_100048A1C(v5, v0);
  sub_100048E70();
  v6 = *(_QWORD *)(v3 + 56);
  if (!v6 || !*(_QWORD *)(v6 + 16))
    goto LABEL_6;
  v7 = sub_100048E60();
  Locale.region.getter(v7);
  sub_100048D24(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v8 = type metadata accessor for Locale.Region(0);
  v9 = sub_100048E38(v8);
  if (v10)
  {
    sub_100048A64(v1, &qword_100504038);
LABEL_6:
    LOBYTE(v1) = 1;
    goto LABEL_7;
  }
  Locale.Region.identifier.getter(v9);
  sub_100048D24(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8));
  sub_100048E28();
  sub_100048E90();
LABEL_7:
  v11 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  swift_task_dealloc(v11);
  return sub_100048CB8(v1 & 1, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000483FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100503FBC);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048D84(v1, (uint64_t)sub_100048C28);
  return sub_1000482B4(v2);
}

uint64_t sub_100048448()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10050402C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100048C28;
  return sub_1000470CC();
}

uint64_t sub_100048494()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100503FDC);
  *(_QWORD *)(v0 + 16) = v1;
  sub_100048D84(v1, (uint64_t)sub_100048C28);
  return sub_100048448();
}

BOOL sub_1000484E0(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 18) & 1) == 0 || sub_10009381C();
}

BOOL sub_1000484F8()
{
  uint64_t v0;

  return sub_1000484E0(v0 + 16);
}

uint64_t sub_100048500(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  char v4;

  v4 = a3();
  return sub_100048A0C(*(uint64_t (**)(uint64_t))(v3 + 8), v3, v4 & 1);
}

uint64_t sub_100048540()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_100048DCC();
  sub_100048DEC();
  v1 = (_QWORD *)sub_100048D7C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048C80(v1, (uint64_t)sub_100048C28);
  return sub_100048C6C(v2, v3, v4, v5, v6);
}

uint64_t sub_100048588()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

unint64_t sub_1000485C4()
{
  return (unint64_t)sub_10004743C() & 1;
}

uint64_t sub_1000485F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004861C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v13;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100074B20(0, v7, v9);
    v10 = sub_100048798((uint64_t)v9, v7, v3, a2);
  }
  else
  {
    v11 = (_QWORD *)swift_slowAlloc(v8, -1);
    sub_100074B20(0, v7, v11);
    v10 = sub_100048798((uint64_t)v11, v7, v3, a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v10 & 1;
}

uint64_t sub_100048798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];
  uint64_t v37;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return 0;
  v5 = a4;
  v37 = a4 + 56;
  v34 = a3 + 32;
  result = swift_bridgeObjectRetain(a3);
  v31 = 0;
  v7 = 0;
  v8 = 0;
  v33 = v4;
  while (v8 < v4)
  {
    v35 = v7;
    v9 = (uint64_t *)(v34 + 16 * v8);
    v11 = *v9;
    v10 = v9[1];
    ++v8;
    Hasher.init(_seed:)(v36, *(_QWORD *)(v5 + 40));
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(v36, v11, v10);
    v12 = Hasher._finalize()();
    v13 = v5;
    v14 = -1 << *(_BYTE *)(v5 + 32);
    v15 = v12 & ~v14;
    v16 = v15 >> 6;
    v17 = 1 << v15;
    if (((1 << v15) & *(_QWORD *)(v37 + 8 * (v15 >> 6))) != 0)
    {
      v18 = *(_QWORD *)(v13 + 48);
      v19 = (_QWORD *)(v18 + 16 * v15);
      v20 = v19[1];
      v21 = *v19 == v11 && v20 == v10;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v11, v10, 0) & 1) == 0)
      {
        v23 = ~v14;
        for (i = v15 + 1; ; i = v25 + 1)
        {
          v25 = i & v23;
          if (((*(_QWORD *)(v37 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0)
            break;
          v26 = (_QWORD *)(v18 + 16 * v25);
          v27 = v26[1];
          v28 = *v26 == v11 && v27 == v10;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, v11, v10, 0) & 1) != 0)
          {
            result = swift_bridgeObjectRelease(v10);
            v16 = v25 >> 6;
            v17 = 1 << v25;
            goto LABEL_11;
          }
        }
        goto LABEL_25;
      }
      result = swift_bridgeObjectRelease(v10);
LABEL_11:
      v5 = v13;
      v4 = v33;
      v7 = v35;
      v22 = *(_QWORD *)(a1 + 8 * v16);
      *(_QWORD *)(a1 + 8 * v16) = v17 | v22;
      if ((v17 & v22) != 0)
        goto LABEL_14;
      v7 = v35 + 1;
      if (__OFADD__(v35, 1))
        goto LABEL_39;
      if (v7 != *(_QWORD *)(v13 + 16))
        goto LABEL_14;
      if ((v31 & 1) != 0)
      {
LABEL_37:
        v29 = 1;
        goto LABEL_34;
      }
      v31 = 0;
      v29 = 0;
      if (v8 == v33)
        goto LABEL_34;
    }
    else
    {
LABEL_25:
      result = swift_bridgeObjectRelease(v10);
      if ((v31 & 1) != 0)
      {
        v31 = 1;
        v4 = v33;
        v5 = v13;
        v7 = v35;
        if (v8 == v33)
        {
LABEL_33:
          v29 = 0;
LABEL_34:
          swift_bridgeObjectRelease(a3);
          return v29;
        }
      }
      else
      {
        v7 = v35;
        v4 = v33;
        if (v35 == *(_QWORD *)(v13 + 16))
          goto LABEL_37;
        v5 = v13;
        v31 = 1;
LABEL_14:
        if (v8 == v4)
          goto LABEL_33;
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100048A0C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100048A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100503E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048A64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100032C48(a2);
  sub_100048EB4(*(_QWORD *)(v3 - 8));
  return a1;
}

uint64_t sub_100048A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_1005039D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048AE0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_100048B48;
  return v5(v2 + 32);
}

uint64_t sub_100048B48()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100048B98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100048BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(int **)(v1 + 16);
  v5 = swift_task_alloc(dword_100504044);
  v6 = (_QWORD *)sub_100048D70(v5);
  *v6 = v2;
  v6[1] = sub_100048288;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100504040 + dword_100504040))(a1, v4);
}

uint64_t sub_100048C30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100048C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_100048C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_100048C80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100048CA4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100037020(v0, 1, 1, v1);
}

uint64_t sub_100048CB8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

__n128 sub_100048CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v1;
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = v2;
  return result;
}

uint64_t sub_100048CD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100048CF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_100048D08()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_100048A64(v0, v1);
}

uint64_t sub_100048D24@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t *sub_100048D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v3;
  return sub_100048030(v2);
}

uint64_t sub_100048D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100047E98(v2, a2, v3);
}

uint64_t sub_100048D48()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100048D50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100048D70(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100048D7C()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100048D84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

char *sub_100048D94@<X0>(unint64_t a1@<X8>)
{
  int64_t v1;

  return sub_1000916B8((char *)(a1 > 1), v1, 1);
}

__n128 sub_100048DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  *(__n128 *)(v0 + 32) = result;
  *(_QWORD *)(v0 + 48) = v2;
  return result;
}

uint64_t sub_100048DE0(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100048DF8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100048E00(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100048E08()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

char *sub_100048E18(uint64_t a1, int64_t a2)
{
  return sub_1000916B8(0, a2, 0);
}

uint64_t sub_100048E28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10006F2A8(v1, v2, v0);
}

uint64_t sub_100048E38(uint64_t a1)
{
  uint64_t v1;

  return sub_1000352C8(v1, 1, a1);
}

uint64_t sub_100048E60()
{
  return static Locale.current.getter();
}

uint64_t sub_100048E70()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100048A1C(v0, v1);
}

uint64_t *sub_100048E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v3;
  return sub_100048030(v2);
}

id sub_100048E88@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_100048E90()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_100048E9C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1920));
}

id sub_100048EA8(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 2176));
}

uint64_t sub_100048EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100048EC0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100048EDC(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100048EE8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v16[2];
  _OWORD v17[2];
  uint64_t v18[4];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10004EB34((uint64_t)v17, (uint64_t)v18, &qword_100503A58);
  if (v18[3])
  {
    if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v3 = v16[0];
      v4 = v16[1];
      v5 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
      v6 = JSONDecoder.init()();
      v7 = sub_100032C48(&qword_1005042F8);
      v8 = sub_10004EB98();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v18, v7, v3, v4, v7, v8);
      sub_100033030(v3, v4);
      swift_release(v6);
      return v18[0];
    }
  }
  else
  {
    sub_10004EB70((uint64_t)v18, &qword_100503A58);
  }
  if (qword_100503420 != -1)
    swift_once(&qword_100503420, sub_1000330AC);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000352B0(v9, (uint64_t)qword_1005185E8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v18[0] = v14;
    *(_DWORD *)v13 = 136315138;
    *(_QWORD *)&v17[0] = sub_100036778(0xD00000000000001ELL, 0x80000001003E3650, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, (char *)v17 + 8, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid Array in defaults for key: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  if (qword_100503448 != -1)
    swift_once(&qword_100503448, sub_100033F2C);
  return swift_bridgeObjectRetain(qword_100518650);
}

uint64_t sub_1000491F4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  NSString v12;
  uint64_t v14;

  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  v14 = a1;
  v6 = sub_100032C48(&qword_1005042F8);
  v7 = sub_10004E644();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v14, v6, v7);
  v10 = v9;
  swift_release(v5);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setObject:forKey:", isa, v12);

  return sub_100033030(v8, v10);
}

uint64_t sub_1000494E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (sub_10004F33C(a1) == 1)
  {
    sub_10004EB70(a1, &qword_1005039D8);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = sub_100040900((uint64_t)&unk_1004D0D00, 32);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1005043A8, v15);
}

uint64_t sub_10004961C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations) = _swiftEmptyArrayStorage;
  v3 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions;
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5 = sub_100048EE8();

  *(_QWORD *)(v1 + v3) = v5;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore) = 0;
  v6 = v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_logger;
  v7 = sub_1000357DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a1, v7);
  return v1;
}

void sub_1000496E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  v1 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = v0;
    *(_QWORD *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = v4;
    v6 = sub_10004F24C();
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)sub_10003308C(12);
      *(_DWORD *)v8 = 134217984;
      v10 = *(_QWORD *)(v5 + v1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
      sub_10004F244();
      sub_100037174((void *)&_mh_execute_header, oslog, v7, "PrecomputationState.pause() called - count now %ld", v8);
      sub_100033080((uint64_t)v8);

    }
    else
    {
      sub_10004F244();

    }
  }
}

void sub_1000497F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _QWORD *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _QWORD *v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, unint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE v37[24];

  v1 = v0;
  v2 = sub_100032C48(&qword_100503C68);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v36[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = v9;
    v10 = swift_retain(v0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    v13 = &unk_100406000;
    if (os_log_type_enabled(v11, v12))
    {
      v14 = (uint8_t *)sub_10003308C(12);
      *(_DWORD *)v14 = 134217984;
      v15 = sub_10004F288(*(_QWORD *)(v0 + v6));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v17, v18);
      sub_10004F184();
      sub_100037174((void *)&_mh_execute_header, v11, v12, "PrecomputationState.resume() called - count now %ld", v14);
      v19 = (uint64_t)v14;
      v13 = (_QWORD *)&unk_100406000;
      sub_100033080(v19);
    }
    else
    {
      sub_10004F184();
    }

    if (!*(_QWORD *)(v0 + v6))
    {
      v20 = swift_retain(v0);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.debug.getter();
      v23 = &unk_100504000;
      if (sub_10004ED00(v22))
      {
        v24 = (uint8_t *)sub_10003308C(12);
        *(_DWORD *)v24 = v13[488];
        v25 = (uint64_t *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations);
        sub_10004EE40(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations, (uint64_t)v36, 0);
        v26 = *v25;
        v23 = (_QWORD *)&unk_100504000;
        v27 = sub_10004F288(*(_QWORD *)(v26 + 16));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, v28, v24 + 4, v24 + 12);
        sub_10004F184();
        sub_100037174((void *)&_mh_execute_header, v21, (os_log_type_t)v11, "PrecomputationState.resume resuming %ld precomputations", v24);
        sub_100033080((uint64_t)v24);
      }
      else
      {
        sub_10004F184();
      }

      v29 = (_QWORD *)(v1 + v23[42]);
      sub_10004EE40((uint64_t)v29, (uint64_t)v37, 1);
      v30 = *(_QWORD *)(*v29 + 16);
      if (v30)
      {
        v31 = *v29 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        v32 = *(_QWORD *)(v3 + 72);
        v33 = *(uint64_t (**)(_BYTE *, unint64_t, uint64_t, __n128))(v3 + 16);
        v34 = swift_bridgeObjectRetain(*v29);
        do
        {
          v35 = v33(v5, v31, v2, v34);
          CheckedContinuation.resume(returning:)(v35, v2);
          (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
          v31 += v32;
          --v30;
        }
        while (v30);
        sub_100039998();
      }
      *v29 = _swiftEmptyArrayStorage;
      sub_100039998();
    }
    sub_10004F0C0();
  }
}

uint64_t sub_100049A68()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_100049A7C, v0);
}

uint64_t sub_100049A7C()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (*(uint64_t *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) < 1)
    return sub_10004ED88(*(uint64_t (**)(void))(v1 + 8));
  *(_QWORD *)(v1 + 24) = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_logger;
  v2 = sub_10004EDE0();
  v3 = static os_log_type_t.info.getter();
  if (sub_10004EFCC(v3))
  {
    v4 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v4 = 0;
    sub_10004ED40((void *)&_mh_execute_header, v2, v0, "Precomputation pausing due to live computations", v4);
    sub_100033080((uint64_t)v4);
  }

  sub_10004E704(&qword_1005043B0, type metadata accessor for PrecomputationManager.PrecomputationState, (uint64_t)&unk_1004086D8);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 32) = v5;
  *v5 = v1;
  v5[1] = sub_100049BB0;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100049BB0()
{
  uint64_t v0;

  v0 = sub_10004F2C0();
  sub_100048CF8(v0);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100049BE4(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v3 = Logger.logObject.getter(a1);
  v4 = static os_log_type_t.info.getter();
  if (sub_10004EFCC(v4))
  {
    v5 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v5 = 0;
    sub_10004ED40((void *)&_mh_execute_header, v3, v1, "Precomputation resuming after live computations", v5);
    sub_100033080((uint64_t)v5);
  }

  return sub_10004ED88(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100049C60(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = (uint64_t *)(a2 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations);
  swift_beginAccess(a2 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations, v8, 33, 0);
  sub_10004E264((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003DD28);
  v4 = *(_QWORD *)(*v3 + 16);
  sub_10004E2BC(v4, (uint64_t (*)(BOOL))sub_10003DD28);
  v5 = *v3;
  *(_QWORD *)(v5 + 16) = v4 + 1;
  v6 = sub_100032C48(&qword_100503C68);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess(v8);
}

void sub_100049D1C(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _BYTE v17[24];

  sub_100032C48(&qword_100503A50);
  sub_10004EDE8();
  __chkstk_darwin(v7);
  sub_100046E44();
  v10 = v9 - v8;
  v11 = swift_bridgeObjectRetain(a2);
  static Date.now.getter(v11);
  v12 = sub_10004F358();
  sub_10004F274(v10, 0, v13, v12);
  sub_10004EE40(v3 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions, (uint64_t)v17, 33);
  sub_1000500B0(v10, a1, a2, a3);
  swift_endAccess(v17);
  v14 = (void *)objc_opt_self(NSUserDefaults);
  v15 = sub_1000371CC();
  v16 = sub_10004F350(v15, "standardUserDefaults");
  sub_10004EFBC(v16);
  sub_100039950();

  sub_1000399C8();
}

void sub_100049E08(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _BYTE v14[24];

  sub_100032C48(&qword_100503A50);
  sub_10004EDE8();
  __chkstk_darwin(v7);
  sub_100046E44();
  v10 = v9 - v8;
  sub_10004EE40(v3 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions, (uint64_t)v14, 33);
  sub_1000532E8(a1, a2, a3, v10);
  sub_10004EB70(v10, &qword_100503A50);
  swift_endAccess(v14);
  v11 = (void *)objc_opt_self(NSUserDefaults);
  v12 = sub_1000371CC();
  v13 = sub_10004F350(v12, "standardUserDefaults");
  sub_10004EFBC(v13);
  sub_100039950();

  sub_1000399C8();
}

void sub_100049EE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char v9[24];

  v1 = sub_10004F358();
  v2 = sub_10003561C();
  v3 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &unk_1004CFE48, v1, v2);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  sub_10004EE40((uint64_t)v4, (uint64_t)v9, 1);
  v5 = *v4;
  *v4 = v3;
  swift_bridgeObjectRelease(v5);
  v6 = (void *)objc_opt_self(NSUserDefaults);
  v7 = sub_1000371CC();
  v8 = sub_10004F350(v7, "standardUserDefaults");
  sub_10004EFBC(v8);
  sub_100039950();

}

void sub_100049F8C()
{
  int64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::UInt v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  Swift::Int v71;
  Swift::Int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  int64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];

  v1 = v0;
  sub_100032C48(&qword_100503A50);
  sub_10004EDE8();
  __chkstk_darwin(v2);
  sub_100046E44();
  v84 = v4 - v3;
  sub_100032C48(&qword_1005042D8);
  sub_10004EDE8();
  v6 = __chkstk_darwin(v5);
  v8 = (int64_t *)((char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (int64_t *)((char *)&v81 - v9);
  v11 = sub_10004F358();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v92 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v81 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v81 - v19;
  Date.init(timeIntervalSinceNow:)(v18, -31536000.0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v89 = v20;
  v85 = v21;
  v22 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v17, v20, v11);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  v91 = v11;
  if (v25)
  {
    v26 = (uint8_t *)sub_10003308C(12);
    v96[0] = sub_10003308C(32);
    v90 = v0;
    v27 = v96[0];
    *(_DWORD *)v26 = 136315138;
    v88 = (void (*)(char *, uint64_t))(v26 + 4);
    sub_10004E704((unint64_t *)&qword_1005042F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v91, v28);
    v94 = sub_100036778(v29, v30, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v88, v26 + 12);
    sub_1000356D4();
    v88 = *(void (**)(char *, uint64_t))(v12 + 8);
    v88(v17, v91);
    sub_100037174((void *)&_mh_execute_header, v23, v24, "PrecomputationState.cleanupWorkflowCompletions removing completions before %s", v26);
    sub_10003716C(v27);
    v31 = v27;
    v1 = v90;
    sub_100033080(v31);
    v32 = (uint64_t)v26;
    v11 = v91;
    sub_100033080(v32);

  }
  else
  {

    v88 = *(void (**)(char *, uint64_t))(v12 + 8);
    v88(v17, v11);
  }
  v33 = v12;
  v34 = (uint64_t *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  sub_10004EE40(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions, (uint64_t)v96, 0);
  v35 = *v34;
  v36 = *(_QWORD *)(*v34 + 64);
  v82 = *v34 + 64;
  v37 = 1 << *(_BYTE *)(v35 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & v36;
  v83 = (unint64_t)(v37 + 63) >> 6;
  v81 = v83 - 1;
  v86 = v35;
  swift_bridgeObjectRetain(v35);
  v90 = 0;
  v87 = v8;
  if (!v39)
    goto LABEL_9;
LABEL_7:
  v40 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  v41 = v40 | (v90 << 6);
  while (2)
  {
    v42 = *(_QWORD *)(v86 + 56);
    v43 = (uint64_t *)(*(_QWORD *)(v86 + 48) + 24 * v41);
    v44 = *v43;
    v45 = v43[1];
    v46 = v43[2];
    *v8 = v44;
    v8[1] = v45;
    v8[2] = v46;
    v47 = v42 + *(_QWORD *)(v33 + 72) * v41;
    v48 = sub_10004F2F4();
    v85((char *)v8 + *(int *)(v48 + 48), v47, v11);
    sub_10004F268((uint64_t)v8, 0);
    swift_bridgeObjectRetain(v45);
    while (1)
    {
      sub_10004EB34((uint64_t)v8, (uint64_t)v10, &qword_1005042D8);
      v54 = sub_10004F2F4();
      if (sub_1000352C8((uint64_t)v10, 1, v54) == 1)
      {
        swift_release(v86);
        v78 = *v34;
        v79 = (void *)objc_opt_self(NSUserDefaults);
        v80 = objc_msgSend(v79, "standardUserDefaults", swift_bridgeObjectRetain(v78).n128_f64[0]);
        sub_1000491F4(v78, v80);
        sub_1000356D4();

        v88(v89, v91);
        sub_10004F0C0();
        return;
      }
      v55 = *v10;
      v56 = v10[1];
      v57 = v10[2];
      v58 = v10;
      v59 = (char *)v10 + *(int *)(v54 + 48);
      v60 = v33;
      v61 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v62 = v34;
      v11 = v91;
      v63 = v92;
      v61(v92, v59, v91);
      v64 = v63;
      v34 = v62;
      if ((static Date.< infix(_:_:)(v64, v89) & 1) != 0)
      {
        sub_10004EE40((uint64_t)v62, (uint64_t)&v94, 33);
        v65 = *v62;
        swift_bridgeObjectRetain(*v62);
        v66 = sub_100052C7C(v55, v56, v57);
        v68 = v67;
        swift_bridgeObjectRelease(v65);
        if ((v68 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v62);
          v93 = *v62;
          v70 = v93;
          *v62 = 0x8000000000000000;
          v71 = *(_QWORD *)(v70 + 24);
          sub_100032C48(&qword_1005042E8);
          v72 = v71;
          v34 = v62;
          v73 = v84;
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v72);
          v74 = v93;
          swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v93 + 48) + 24 * v66 + 8));
          v11 = v91;
          v61((char *)v73, (char *)(*(_QWORD *)(v74 + 56) + *(_QWORD *)(v60 + 72) * v66), v91);
          v75 = sub_10003561C();
          _NativeDictionary._delete(at:)(v66, v74, &unk_1004CFE48, v11, v75);
          v76 = *v34;
          *v34 = v74;
          swift_bridgeObjectRelease(v76);
          v77 = 0;
        }
        else
        {
          v77 = 1;
          v11 = v91;
          v73 = v84;
        }
        sub_100037020(v73, v77, 1, v11);
        sub_10004EB70(v73, &qword_100503A50);
        swift_endAccess(&v94);
      }
      v88(v92, v11);
      swift_bridgeObjectRelease(v56);
      v33 = v60;
      v8 = v87;
      v10 = v58;
      if (v39)
        goto LABEL_7;
LABEL_9:
      v49 = v90 + 1;
      if (__OFADD__(v90, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v49 < v83)
      {
        v50 = *(_QWORD *)(v82 + 8 * v49);
        if (v50)
          goto LABEL_12;
        v51 = v90 + 2;
        ++v90;
        if (v49 + 1 < v83)
        {
          v50 = *(_QWORD *)(v82 + 8 * v51);
          if (v50)
            goto LABEL_15;
          v90 = v49 + 1;
          if (v49 + 2 < v83)
          {
            v50 = *(_QWORD *)(v82 + 8 * (v49 + 2));
            if (v50)
            {
              v49 += 2;
              goto LABEL_12;
            }
            v51 = v49 + 3;
            v90 = v49 + 2;
            if (v49 + 3 < v83)
              break;
          }
        }
      }
LABEL_26:
      v52 = sub_10004F2F4();
      sub_10004F274((uint64_t)v8, 1, v53, v52);
      v39 = 0;
    }
    v50 = *(_QWORD *)(v82 + 8 * v51);
    if (v50)
    {
LABEL_15:
      v49 = v51;
LABEL_12:
      v39 = (v50 - 1) & v50;
      v41 = __clz(__rbit64(v50)) + (v49 << 6);
      v90 = v49;
      continue;
    }
    break;
  }
  while (1)
  {
    v49 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v49 >= v83)
    {
      v90 = v81;
      goto LABEL_26;
    }
    v50 = *(_QWORD *)(v82 + 8 * v49);
    ++v51;
    if (v50)
      goto LABEL_12;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_10004A640()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return sub_10004EC74((uint64_t)sub_10004A654, v0);
}

uint64_t sub_10004A654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore;
  *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore;
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 72) = v3;
  if (v3)
  {
    v4 = sub_10004F2A8(v3);
    return sub_10004F074(v4, v8);
  }
  else
  {
    v6 = type metadata accessor for BindingsStore(0);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    sub_100035780(v6);
    v7 = (_QWORD *)swift_task_alloc(dword_100504D54);
    *(_QWORD *)(v0 + 80) = v7;
    sub_10004EDB0(v7, (uint64_t)sub_10004A6F0);
    return sub_10005A590(v0 + 16);
  }
}

uint64_t sub_10004A6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_QWORD *)(v1 + 88) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_10004A730()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);

  v2 = v0[7];
  v1 = v0[8];
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain(*(_QWORD *)(v2 + v1));
    sub_10004F244();
  }
  else
  {
    *(_QWORD *)(v2 + v1) = v0[11];
    sub_10004F24C();
    v3 = v0[11];
  }
  sub_10004F2A8(v0[9]);
  return sub_10004F074(v3, v5);
}

void sub_10004A78C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000357DC();
  sub_10004F104(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore));
  swift_defaultActor_destroy(v0);
  sub_100028D0C();
}

uint64_t sub_10004A7F0()
{
  uint64_t v0;

  sub_10004A78C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t RavioliManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004A814()
{
  return RavioliManager.unownedExecutor.getter();
}

id sub_10004A82C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PrecomputationManager(0)), "init");
  static PrecomputationManager.shared = (uint64_t)result;
  return result;
}

uint64_t *PrecomputationManager.shared.unsafeMutableAddressor()
{
  if (qword_100503460 != -1)
    swift_once(&qword_100503460, sub_10004A82C);
  return &static PrecomputationManager.shared;
}

id static PrecomputationManager.shared.getter()
{
  if (qword_100503460 != -1)
    swift_once(&qword_100503460, sub_10004A82C);
  return (id)static PrecomputationManager.shared;
}

uint64_t sub_10004A8F0()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[6];
  _BYTE v4[40];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100032EFC((_QWORD *)(v0 + OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager), *(_QWORD *)(v0 + OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager + 24));
  sub_100084C20(v3);
  sub_10004EB34((uint64_t)v3, (uint64_t)v4, &qword_100503A78);
  if (v5 == 1)
    return 0;
  v1 = v6;
  sub_10004EA20(v6, v7);
  sub_10003974C((uint64_t *)v3);
  return v1;
}

id PrecomputationManager.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  objc_super v19;
  char v20[24];

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = sub_1000357DC();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100046E44();
  v7 = v6 - v5;
  v8 = (uint64_t *)&v1[OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager];
  v9 = type metadata accessor for ASAnalyticsManager();
  v10 = sub_100040900(v9, 16);
  v8[3] = v9;
  v8[4] = (uint64_t)&off_1004D1008;
  *v8 = v10;
  v11 = v1;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
  v12 = &v11[OBJC_IVAR____TtC3asd21PrecomputationManager_logger];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v11[OBJC_IVAR____TtC3asd21PrecomputationManager_logger], v7, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v7, v12, v3);
  v13 = type metadata accessor for PrecomputationManager.PrecomputationState(0);
  v14 = sub_100035780(v13);
  sub_10004961C(v7);
  *(_QWORD *)&v11[OBJC_IVAR____TtC3asd21PrecomputationManager_state] = v14;
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10004EE40((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v20, 0);
  v15 = (void *)static ASDConfigurationManager.shared;
  v16 = &v11[OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager];
  *((_QWORD *)v16 + 3) = type metadata accessor for ASDConfigurationManager();
  *((_QWORD *)v16 + 4) = &off_1004D2198;
  *(_QWORD *)v16 = v15;
  v17 = v15;

  v19.receiver = v11;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, "init");
}

uint64_t type metadata accessor for PrecomputationManager.PrecomputationState(uint64_t a1)
{
  return sub_10004E4E4(a1, qword_100504188, (uint64_t)&nominal type descriptor for PrecomputationManager.PrecomputationState);
}

uint64_t sub_10004AB84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[141] = v1;
  v2[135] = a1;
  v2[147] = swift_getObjectType(v1);
  return swift_task_switch(sub_10004ABCC, 0, 0);
}

uint64_t sub_10004ABCC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[141];
  v2 = sub_100040900((uint64_t)&unk_1004D0D28, 24);
  v0[148] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = v1;
  sub_10004F24C();
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_1005043C0, v2);
  v4 = OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager;
  v0[149] = OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager;
  sub_100032EFC(&v3[v4], *(_QWORD *)&v3[v4 + 24]);
  v5 = (_QWORD *)swift_task_alloc(dword_100505BCC);
  v0[150] = v5;
  sub_10004EDB0(v5, (uint64_t)sub_10004AC84);
  return sub_10008A2CC();
}

uint64_t sub_10004AC84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_100040B24();
  v3 = *(_QWORD *)(v2 + 1200);
  *v4 = *v1;
  *(_QWORD *)(v2 + 1208) = v0;
  swift_task_dealloc(v3);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004ACD4()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)(v0 + 888);
  v2 = (_QWORD *)*sub_10004F27C(*(_QWORD *)(v0 + 1192));
  sub_100084C20((_OWORD *)(v0 + 696));
  sub_10004EB34(v0 + 696, v0 + 888, &qword_100503A78);
  if (*(_QWORD *)(v0 + 928) != 1)
  {
    v2 = (_QWORD *)(v0 + 1064);
    memcpy((void *)(v0 + 792), (const void *)(v0 + 888), 0x60uLL);
    v1 = &qword_1005043C8;
    sub_10004EB34(v0 + 840, v0 + 1048, &qword_1005043C8);
    sub_10004EB08((uint64_t *)(v0 + 1048));
    sub_10003974C((uint64_t *)(v0 + 696));
    sub_10004EB34(v0 + 1048, v0 + 1064, &qword_1005043C8);
    if (*(_QWORD *)(v0 + 1064))
    {
      v1 = *(uint64_t **)(v0 + 1072);
      v2 = sub_100041010(*(_QWORD *)(v0 + 1064));
      *(_QWORD *)(v0 + 1216) = v2;
      sub_100040C38();
      sub_100039998();
      if (v2[2])
        return swift_asyncLet_get(v0 + 16);
      sub_1000356D4();
    }
  }
  sub_10004EDE0();
  v4 = sub_10004ECDC();
  if (sub_10004ECA8(v4))
  {
    v5 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v5);
    sub_10004EC7C((void *)&_mh_execute_header, v6, v7, "No workflows configured - No precompute to do");
    sub_100033080((uint64_t)v1);
  }

  return swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_10004AE50()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = sub_10004EDE0();
  v3 = static os_log_type_t.error.getter();
  if (sub_10004EFCC(v3))
  {
    v4 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v4 = 0;
    sub_10004ED40((void *)&_mh_execute_header, v2, v0, "Error updating config - likely no network available", v4);
    sub_100033080((uint64_t)v4);
  }
  v5 = *(_QWORD *)(v1 + 1208);

  swift_errorRelease(v5);
  return sub_10004EF9C();
}

uint64_t sub_10004AEF0()
{
  return sub_10004EC74((uint64_t)sub_10004AF00, 0);
}

uint64_t sub_10004AF00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 1128) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 1224) = v1;
  return sub_10004EC74((uint64_t)sub_10004AF20, v1);
}

uint64_t sub_10004AF20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 1224)
                 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  sub_10004EE40((uint64_t)v1, v0 + 984, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 1232) = *v1;
  swift_bridgeObjectRetain(v2);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004AF74()
{
  _QWORD *v0;

  v0[155] = sub_10004B0BC(v0[152], v0[135], v0[154]);
  sub_100040C38();
  sub_100039998();
  return sub_10004EF9C();
}

uint64_t sub_10004AFD0()
{
  return sub_10004EC74((uint64_t)sub_10004AFE0, 0);
}

uint64_t sub_10004AFE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1240);
  sub_10004F360();
  return sub_10004F05C(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004B00C()
{
  return sub_10004EC74((uint64_t)sub_10004B01C, 0);
}

uint64_t sub_10004B01C()
{
  uint64_t v0;

  sub_10004F360();
  return sub_10004F05C((uint64_t)_swiftEmptyArrayStorage, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004B048()
{
  return sub_10004EC74((uint64_t)sub_10004EC5C, 0);
}

uint64_t sub_10004B058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(sub_10004B070, 0, 0);
}

uint64_t sub_10004B070()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_10004B090, v1);
}

uint64_t sub_10004B090()
{
  uint64_t v0;

  sub_100049F8C();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004B0BC(uint64_t a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  swift_bridgeObjectRetain(a3);
  v6 = swift_bridgeObjectRetain(a1);
  sub_10004B120(v6, a3, a2);
  v9 = v7;
  sub_1000A408C();
  return v9;
}

void sub_10004B120(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _BYTE *v47;
  Swift::UInt v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v48 = a3;
  v57 = a2;
  v4 = sub_100032C48(&qword_100503A50);
  __chkstk_darwin(v4);
  v51 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v47 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v49 = v7;
    v10 = 0;
    v46 = v9;
    v43 = v9 - 1;
    v44 = a1 + 64;
    v45 = _swiftEmptyArrayStorage;
    v50 = a1;
    do
    {
      v11 = (__int128 *)(v44 + 104 * v10);
      v12 = v10;
      while (1)
      {
        if (v12 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v14 = *((_QWORD *)v11 - 4);
        v13 = *((_QWORD *)v11 - 3);
        v15 = *((_QWORD *)v11 - 2);
        v54 = *((unsigned __int8 *)v11 - 8);
        v55 = *v11;
        v53 = *((_QWORD *)v11 + 2);
        v52 = *((unsigned __int8 *)v11 + 24);
        v16 = *((_QWORD *)v11 + 4);
        v17 = *((_QWORD *)v11 + 5);
        v19 = *((_QWORD *)v11 + 6);
        v18 = *((_QWORD *)v11 + 7);
        v20 = *((_QWORD *)v11 + 8);
        v62 = v13;
        v63 = v20;
        v21 = v57;
        v22 = *(_QWORD *)(v57 + 16);
        v60 = v16;
        v61 = v15;
        v56 = v14;
        if (!v22)
          break;
        swift_bridgeObjectRetain(v13);
        sub_10004E0C0(v16, v17, v19, v18, v63);
        swift_bridgeObjectRetain(v13);
        v23 = sub_100052C7C(v14, v13, v48);
        if ((v24 & 1) != 0)
        {
          v25 = v51;
          v26 = v49;
          (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + 16))(v51, *(_QWORD *)(v21 + 56) + *(_QWORD *)(v58 + 72) * v23, v49);
          v27 = 0;
        }
        else
        {
          v27 = 1;
          v25 = v51;
          v26 = v49;
        }
        sub_100037020((uint64_t)v25, v27, 1, v26);
        swift_bridgeObjectRelease(v62);
        if (sub_1000352C8((uint64_t)v25, 1, v26) == 1)
          goto LABEL_14;
        v59 = v17;
        v28 = v58;
        v29 = v47;
        v30 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v58 + 32))(v47, v25, v26);
        v31 = Date.timeIntervalSinceNow.getter(v30);
        v17 = v59;
        (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v29, v26);
        v32 = v61;
        if ((double)v61 < -v31)
          goto LABEL_15;
        ++v12;
        swift_bridgeObjectRelease(v62);
        sub_10004E170(v60, v17, v19, v18, v63);
        v11 = (__int128 *)((char *)v11 + 104);
        a1 = v50;
        if (v46 == v12)
          goto LABEL_22;
      }
      v33 = v13;
      v25 = v51;
      sub_100037020((uint64_t)v51, 1, 1, v49);
      swift_bridgeObjectRetain(v33);
      sub_10004E0C0(v16, v17, v19, v18, v63);
LABEL_14:
      sub_10004EB70((uint64_t)v25, &qword_100503A50);
      v32 = v61;
LABEL_15:
      v34 = v45;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      v64 = v34;
      v36 = v62;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009172C(0, v34[2] + 1, 1);
        v34 = v64;
      }
      v37 = v56;
      v39 = v34[2];
      v38 = v34[3];
      v40 = v39 + 1;
      if (v39 >= v38 >> 1)
      {
        sub_10009172C(v38 > 1, v39 + 1, 1);
        v40 = v39 + 1;
        v37 = v56;
        v34 = v64;
      }
      v10 = v12 + 1;
      v34[2] = v40;
      v45 = v34;
      v41 = &v34[13 * v39];
      v41[4] = v37;
      v41[5] = v36;
      v41[6] = v32;
      *((_BYTE *)v41 + 56) = v54;
      *((_OWORD *)v41 + 4) = v55;
      v41[10] = v53;
      *((_BYTE *)v41 + 88) = v52;
      v41[12] = v60;
      v41[13] = v17;
      v41[14] = v19;
      v41[15] = v18;
      v41[16] = v63;
      a1 = v50;
    }
    while (v43 != v12);
  }
  else
  {
    v45 = _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(a1);
}

uint64_t sub_10004B530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v4 = type metadata accessor for ASAnalyticsEvent(0);
  v3[17] = v4;
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B590, 0, 0);
}

uint64_t sub_10004B590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v2 = *(uint64_t **)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 152) = os_transaction_create("com.apple.asd.precompute.workflow");
  v4 = *v2;
  *(_QWORD *)(v0 + 160) = *v2;
  v5 = v2[1];
  v6 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  *(_QWORD *)(v0 + 168) = v5;
  *(_QWORD *)(v0 + 176) = v6;
  v7 = (v3 + v6);
  v8 = swift_bridgeObjectRetain_n(v5, 3);
  Logger.logObject.getter(v8);
  v9 = sub_10004ECDC();
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)sub_10003308C(12);
    sub_10003308C(32);
    sub_10004F1D4();
    *(_DWORD *)v10 = 136315138;
    sub_1000371CC();
    *(_QWORD *)(v0 + 104) = sub_100036778(v4, v5, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    sub_100037174((void *)&_mh_execute_header, v7, v9, "Starting precomputation flow %s", v10);
    sub_10004ED78();
    sub_100033080(v1);
    sub_100033080((uint64_t)v10);
  }
  else
  {
    sub_10004F0D8();
  }

  v12 = *(_QWORD *)(v0 + 136);
  v11 = *(uint64_t **)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager;
  *(_QWORD *)(v0 + 184) = OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager;
  sub_100032EFC((_QWORD *)(v13 + v14), *(_QWORD *)(v13 + v14 + 24));
  *v11 = v4;
  v11[1] = v5;
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  sub_1000371CC();
  sub_100099360((uint64_t)v11);
  sub_10004F348();
  *(_QWORD *)(v0 + 192) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 200) = v15;
  *(_QWORD *)(v0 + 40) = type metadata accessor for PrecomputationManager.PrecomputationState(0);
  *(_QWORD *)(v0 + 48) = &off_1004D0BC8;
  *(_QWORD *)(v0 + 16) = v15;
  v16 = dword_100506304;
  swift_retain(v15);
  v17 = (_QWORD *)swift_task_alloc(v16);
  *(_QWORD *)(v0 + 208) = v17;
  *v17 = v0;
  v17[1] = sub_10004B7A8;
  return sub_100099D9C(*(uint64_t **)(v0 + 112), *(_QWORD *)(v0 + 120), v0 + 16);
}

uint64_t sub_10004B7A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    sub_100032F94((_QWORD *)(v2 + 16));
  sub_100040A54();
  return sub_10004ECF4(v4, v5, v6);
}

uint64_t sub_10004B808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 224) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  sub_1000371CC();
  sub_10004F018();
  return sub_10004ECF4(v1, v2, v3);
}

uint64_t sub_10004B848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100049D1C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 120));
  sub_100039950();
  sub_100040A54();
  return sub_10004ECF4(v1, v2, v3);
}

void sub_10004B888()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;

  v2 = (*(_QWORD *)(v1 + 128) + *(_QWORD *)(v1 + 176));
  v3 = sub_10004EE30(*(_QWORD *)(v1 + 168));
  Logger.logObject.getter(v3);
  v4 = sub_10004ECDC();
  if (sub_10004ECA8(v4))
  {
    v5 = (uint8_t *)sub_10003308C(12);
    v6 = sub_10003308C(32);
    v20 = v6;
    v7 = sub_10004F0E4(4.8149e-34);
    *(_QWORD *)(v1 + 96) = sub_10004F2FC(v7, v8, &v20);
    sub_10004F118(v1 + 96);
    sub_10004F2B4();
    sub_100037174((void *)&_mh_execute_header, v2, v0, "Completed precomputation flow %s", v5);
    sub_10003716C(v6);
    sub_100033080(v6);
    sub_100033080((uint64_t)v5);

  }
  else
  {

    sub_10004F0D8();
  }
  v9 = *(_QWORD *)(v1 + 224);
  v10 = *(_QWORD *)(v1 + 192);
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
  {
    v14 = *(_QWORD *)(v1 + 160);
    v13 = *(_QWORD *)(v1 + 168);
    v15 = *(_QWORD **)(v1 + 144);
    v16 = *(_QWORD *)(v1 + 152);
    v17 = *(_QWORD *)(v1 + 136);
    v18 = (_QWORD *)(*(_QWORD *)(v1 + 128) + *(_QWORD *)(v1 + 184));
    v19 = v12 / 0xF4240;
    sub_100032EFC(v18, v18[3]);
    *v15 = v14;
    v15[1] = v13;
    v15[2] = v19;
    swift_storeEnumTagMultiPayload(v15, v17, 1);
    sub_100099360((uint64_t)v15);
    swift_unknownObjectRelease(v16);
    sub_10004F348();
    sub_100040B34();
    sub_10004F068(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004BA00()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = *(_QWORD *)(v1 + 168);
  sub_100032F94((_QWORD *)(v1 + 16));
  v3 = sub_10004EE30(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (sub_10004ECA8(v5))
  {
    v6 = (uint8_t *)sub_10003308C(12);
    v7 = sub_10003308C(32);
    v19 = v7;
    v8 = sub_10004F0E4(4.8149e-34);
    *(_QWORD *)(v1 + 88) = sub_10004F2FC(v8, v9, &v19);
    sub_10004F118(v1 + 88);
    sub_10004F2B4();
    sub_100037174((void *)&_mh_execute_header, v4, v0, "Error from workflow %s - not marking as complete", v6);
    sub_10003716C(v7);
    sub_100033080(v7);
    sub_100033080((uint64_t)v6);

  }
  else
  {

    sub_10004F0D8();
  }
  v10 = *(_QWORD *)(v1 + 216);
  v12 = *(_QWORD *)(v1 + 160);
  v11 = *(_QWORD *)(v1 + 168);
  v14 = *(_QWORD **)(v1 + 144);
  v13 = *(_QWORD *)(v1 + 152);
  v15 = *(_QWORD *)(v1 + 136);
  sub_10004F27C(*(_QWORD *)(v1 + 184));
  swift_getErrorValue(v10, v1 + 80, v1 + 56);
  v16 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
  *v14 = v12;
  v14[1] = v11;
  v14[2] = v16;
  v14[3] = v17;
  swift_storeEnumTagMultiPayload(v14, v15, 2);
  sub_100099360((uint64_t)v14);
  swift_unknownObjectRelease(v13);
  swift_errorRelease(v10);
  sub_10004F348();
  sub_100040B34();
  return sub_10004F068(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10004BB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v5 = (_QWORD *)swift_task_alloc(dword_10050407C);
  v3[23] = v5;
  *v5 = v3;
  v5[1] = sub_10004BBE8;
  return sub_10004AB84(a1);
}

uint64_t sub_10004BBE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_QWORD *)(v1 + 192) = v0;
  sub_10004F260(v2);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004BC24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;

  v3 = *(_QWORD *)(v1 + 192);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v1 + 200) = v4;
  if (!v4)
  {
    swift_bridgeObjectRelease(v3);
    sub_10004EDE0();
    v12 = sub_10004ECDC();
    if (sub_10004ECA8(v12))
    {
      v13 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v13);
      sub_10004EC7C((void *)&_mh_execute_header, v14, v15, "Due precomputations complete");
      sub_100033080(v2);
    }

    sub_10004EE38();
    v11 = 1;
    return sub_10004EF8C(v11, *(uint64_t (**)(void))(v1 + 8));
  }
  v5 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  *(_QWORD *)(v1 + 208) = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  *(_QWORD *)(v1 + 216) = v5;
  *(_QWORD *)(v1 + 224) = 0;
  sub_10004EDA8((void *)(v1 + 16), (const void *)(v3 + 32));
  sub_10004E064((_QWORD *)(v1 + 16));
  if (sub_10004F308() == 1)
  {
    sub_10004F1B4();
    v6 = sub_10004F2E8();
    Logger.logObject.getter(v6);
    v7 = sub_10004ECDC();
    if (sub_10004ECA8(v7))
    {
      v8 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v8);
      sub_10004EC7C((void *)&_mh_execute_header, v9, v10, "Due precomputations stopping as requested to defer");
      sub_100033080(v2);
    }

    sub_10004EE38();
    v11 = 0;
    return sub_10004EF8C(v11, *(uint64_t (**)(void))(v1 + 8));
  }
  sub_10004F1A4();
  v17 = (_QWORD *)swift_task_alloc(dword_100504084);
  *(_QWORD *)(v1 + 232) = v17;
  sub_10004EDB0(v17, (uint64_t)sub_10004BD6C);
  return sub_10004EF6C();
}

uint64_t sub_10004BD6C()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 232));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004BDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  if ((*(uint64_t (**)(void))(*(_QWORD *)(v2 + 176) + 16))() == 1)
  {
    sub_10004F1C4();
    v4 = (void *)(v1 + v0);
LABEL_3:
    v5 = sub_10004ECC4();
    Logger.logObject.getter(v5);
    v6 = sub_10004ECDC();
    if (sub_10004ECA8(v6))
    {
      v7 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v7);
      sub_10004EC7C((void *)&_mh_execute_header, v8, v9, "Due precomputations stopping as requested to defer");
      sub_100033080(v3);
    }

    sub_10004EE38();
    v10 = 0;
    return sub_10004EE60(v10, *(uint64_t (**)(void))(v2 + 8));
  }
  v12 = *(_QWORD *)(v2 + 80);
  v13 = *(_QWORD *)(v2 + 16);
  v14 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 240) = v12;
  *(_QWORD *)(v2 + 248) = v13;
  *(_QWORD *)(v2 + 256) = v14;
  if (v12 == 1)
  {
    sub_10004F040();
    if (v15)
    {
      v25 = (void *)(*(_QWORD *)(v2 + 168) + *(_QWORD *)(v2 + 216));
      v26 = sub_10004ED20();
      Logger.logObject.getter(v26);
      v27 = sub_10004ECDC();
      if (sub_10004ED00(v27))
      {
        v28 = sub_10003308C(12);
        v29 = sub_10003308C(32);
        v44 = v29;
        v30 = sub_10004EDC8(4.8149e-34);
        v32 = sub_10004EDD4(v30, v31, &v44);
        sub_10004EDBC(v32);
        sub_10004ECC4();
        sub_10004ECC4();
        sub_10004ED64((void *)&_mh_execute_header, v33, v34, "Data Protection Class mismatch for %s - skipping");
        sub_10004ED78();
        sub_100033080(v29);
        sub_100033080(v28);

      }
      else
      {

        sub_10004ECC4();
        sub_10004ECC4();
      }
      sub_10004EF38();
      if (v15)
      {
        sub_10004F210();
        sub_10004EDE0();
        v36 = sub_10004ECDC();
        if (sub_10004ECA8(v36))
        {
          v37 = (_WORD *)sub_10003308C(2);
          sub_10004EF2C(v37);
          sub_10004EC7C((void *)&_mh_execute_header, v38, v39, "Due precomputations complete");
          sub_100033080(v3);
        }

        sub_10004EE38();
        v10 = 1;
        return sub_10004EE60(v10, *(uint64_t (**)(void))(v2 + 8));
      }
      *(_QWORD *)(v2 + 224) = v35;
      sub_10004EC90(v35);
      sub_10004ED20();
      v40 = sub_10004F254();
      v41 = *(_QWORD *)(v2 + 168);
      if (v40 == 1)
      {
        v42 = *(_QWORD *)(v2 + 216);
        sub_10004F210();
        v4 = (void *)(v41 + v42);
        goto LABEL_3;
      }
      v43 = (_QWORD *)swift_task_alloc(dword_100504084);
      *(_QWORD *)(v2 + 232) = v43;
      sub_10004EDB0(v43, (uint64_t)sub_10004BD6C);
      return sub_10004EE48();
    }
    else
    {
      v16 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v2 + 312) = v16;
      *v16 = v2;
      v16[1] = sub_10004C350;
      v17 = sub_10004F0F8();
      return sub_10004EE78(v17, v18);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v2 + 104);
    v19 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 264) = v19;
    *(_QWORD *)(v2 + 272) = v20;
    v22 = *(_QWORD *)(v2 + 88);
    v21 = *(_QWORD *)(v2 + 96);
    *(_QWORD *)(v2 + 280) = v21;
    *(_QWORD *)(v2 + 288) = v22;
    sub_10004EDF8(v12, v21);
    sub_10004EE30(v22);
    sub_10004EE30(v20);
    sub_10004EE30(v19);
    v23 = swift_task_alloc(32);
    *(_QWORD *)(v2 + 296) = v23;
    *(_QWORD *)(v23 + 16) = v2 + 120;
    v24 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v2 + 304) = v24;
    *v24 = v2;
    v24[1] = sub_10004C080;
    sub_10004F0A0();
    return sub_10004EEC0();
  }
}

uint64_t sub_10004C080()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 304));
  sub_100040B34();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004C0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  _QWORD *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 272);
  sub_10004ED28();
  sub_10004ED28();
  if ((*(_BYTE *)(v0 + 320) & 1) != 0)
  {
    sub_10004F040();
    if (!v4)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v0 + 312) = v5;
      *v5 = v0;
      v5[1] = sub_10004C350;
      v6 = sub_10004F0F8();
      return sub_10004EED8(v6, v7);
    }
    v9 = (void *)(*(_QWORD *)(v0 + 168) + *(_QWORD *)(v0 + 216));
    v18 = sub_10004ED20();
    Logger.logObject.getter(v18);
    v19 = sub_10004ECDC();
    if (sub_10004ED00(v19))
    {
      v2 = sub_10003308C(12);
      sub_10003308C(32);
      sub_10004F1D4();
      v20 = sub_10004EDC8(4.8149e-34);
      v22 = sub_10004EDD4(v20, v21, &v37);
      sub_10004EDBC(v22);
      sub_10004ECC4();
      sub_10004ECC4();
      v17 = "Data Protection Class mismatch for %s - skipping";
      goto LABEL_8;
    }
  }
  else
  {
    v9 = (void *)(*(_QWORD *)(v0 + 168) + *(_QWORD *)(v0 + 216));
    v10 = sub_10004ED20();
    Logger.logObject.getter(v10);
    v11 = sub_10004ECDC();
    if (sub_10004ED00(v11))
    {
      v2 = sub_10003308C(12);
      sub_10003308C(32);
      sub_10004F1D4();
      v12 = sub_10004EDC8(4.8149e-34);
      v14 = sub_10004EDD4(v12, v13, &v37);
      sub_10004EDBC(v14);
      sub_10004ECC4();
      sub_10004ECC4();
      v17 = "Preconditions not met for %s - skipping";
LABEL_8:
      sub_10004ED64((void *)&_mh_execute_header, v15, v16, v17);
      sub_10004ED78();
      sub_100033080(v1);
      sub_100033080(v2);

      goto LABEL_10;
    }
  }

  sub_10004ECC4();
  sub_10004ECC4();
LABEL_10:
  sub_10004EF38();
  if (v4)
  {
    sub_10004F210();
    sub_10004EDE0();
    v24 = sub_10004ECDC();
    if (sub_10004ECA8(v24))
    {
      v25 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v25);
      sub_10004EC7C((void *)&_mh_execute_header, v26, v27, "Due precomputations complete");
      sub_100033080(v3);
    }

    sub_10004EE38();
    v28 = 1;
    return sub_10004EEA8(v28, *(uint64_t (**)(void))(v0 + 8));
  }
  *(_QWORD *)(v0 + 224) = v23;
  v29 = *(_QWORD *)(v0 + 176);
  sub_10004EC90(v23);
  sub_10004ED20();
  if (sub_10004F254() == 1)
  {
    sub_10004F1C4();
    v30 = (void *)(v2 + v29);
    v31 = sub_10004ECC4();
    Logger.logObject.getter(v31);
    v32 = sub_10004ECDC();
    if (sub_10004ECA8(v32))
    {
      v33 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v33);
      sub_10004EC7C((void *)&_mh_execute_header, v34, v35, "Due precomputations stopping as requested to defer");
      sub_100033080(v3);
    }

    sub_10004EE38();
    v28 = 0;
    return sub_10004EEA8(v28, *(uint64_t (**)(void))(v0 + 8));
  }
  sub_10004F1A4();
  v36 = (_QWORD *)swift_task_alloc(dword_100504084);
  *(_QWORD *)(v0 + 232) = v36;
  sub_10004EDB0(v36, (uint64_t)sub_10004BD6C);
  return sub_10004EE90();
}

uint64_t sub_10004C350()
{
  uint64_t v0;

  sub_10004EEF0();
  sub_100048CF8(*(_QWORD *)(v0 + 312));
  sub_10004F218();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004C388()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  sub_10004EF38();
  if (v4)
  {
    sub_10004F210();
    sub_10004EDE0();
    v5 = sub_10004ECDC();
    if (sub_10004ECA8(v5))
    {
      v6 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v6);
      sub_10004EC7C((void *)&_mh_execute_header, v7, v8, "Due precomputations complete");
      sub_100033080(v2);
    }

    sub_10004EE38();
    v9 = 1;
    return sub_10004EF8C(v9, *(uint64_t (**)(void))(v1 + 8));
  }
  *(_QWORD *)(v1 + 224) = v3;
  sub_10004EDA8((void *)(v1 + 16), (const void *)(*(_QWORD *)(v1 + 192) + 104 * v3 + 32));
  sub_10004E064((_QWORD *)(v1 + 16));
  if (sub_10004F308() == 1)
  {
    sub_10004F1B4();
    v10 = sub_10004F2E8();
    Logger.logObject.getter(v10);
    v11 = sub_10004ECDC();
    if (sub_10004ECA8(v11))
    {
      v12 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v12);
      sub_10004EC7C((void *)&_mh_execute_header, v13, v14, "Due precomputations stopping as requested to defer");
      sub_100033080(v2);
    }

    sub_10004EE38();
    v9 = 0;
    return sub_10004EF8C(v9, *(uint64_t (**)(void))(v1 + 8));
  }
  sub_10004F1A4();
  v16 = (_QWORD *)swift_task_alloc(dword_100504084);
  *(_QWORD *)(v1 + 232) = v16;
  sub_10004EDB0(v16, (uint64_t)sub_10004BD6C);
  return sub_10004EF6C();
}

uint64_t PrecomputationManager.triggerDuePrecomputations(dataProtectionClass:shouldDefer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  v6 = (_QWORD *)swift_task_alloc(dword_10050407C);
  v4[24] = v6;
  sub_10004EDB0(v6, (uint64_t)sub_10004C518);
  return sub_10004AB84(a1);
}

uint64_t sub_10004C518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_QWORD *)(v1 + 200) = v0;
  sub_10004F260(v2);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004C554()
{
  NSObject *v0;
  _QWORD *v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  _QWORD *v8;
  _QWORD *v9;
  os_log_type_t v10;
  const char *v11;
  os_log_type_t v12;
  _WORD *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  _QWORD *v18;

  v3 = v1[25];
  v4 = *(_QWORD *)(v3 + 16);
  v1[26] = v4;
  if (!v4)
  {
    swift_bridgeObjectRelease(v3);
    sub_10004EDE0();
    v12 = sub_10004ECDC();
    if (sub_10004ECE4(v12))
    {
      v11 = "Due precomputations complete";
      goto LABEL_7;
    }
LABEL_8:

    v15 = sub_10004F29C();
    return sub_10004EF18(v15, v16);
  }
  v5 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  v1[27] = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  v1[28] = v5;
  v1[29] = 0;
  v7 = (uint64_t (*)(_QWORD))v1[21];
  v6 = v1[22];
  sub_10004EDA8(v1 + 2, (const void *)(v3 + 32));
  v8 = sub_10004ED20();
  if (v7(v8) == 1)
  {
    sub_10004EE20();
    v0 = ((char *)v7 + v6);
    v9 = sub_10004ECC4();
    Logger.logObject.getter(v9);
    v10 = sub_10004ECDC();
    if (sub_10004ECE4(v10))
    {
      v11 = "Due precomputations stopping as requested to defer";
LABEL_7:
      v13 = (_WORD *)sub_10003308C(2);
      sub_10004F030(v13);
      sub_10004ED40((void *)&_mh_execute_header, v0, v14, v11, v2);
      sub_100033080((uint64_t)v2);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  sub_10004F12C();
  v18 = (_QWORD *)swift_task_alloc(dword_100504084);
  v1[30] = v18;
  sub_10004EDB0(v18, (uint64_t)sub_10004C678);
  return sub_10004EF04();
}

uint64_t sub_10004C678()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 240));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004C6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  os_log_type_t v6;
  const char *v7;
  _WORD *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t (*v37)(_QWORD *);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v3 = *(_QWORD *)(v1 + 176);
  if ((*(uint64_t (**)(void))(v1 + 168))() == 1)
  {
    sub_10004EE20();
    v4 = (v0 + v3);
LABEL_3:
    v5 = sub_10004ECC4();
    Logger.logObject.getter(v5);
    v6 = sub_10004ECDC();
    if (!sub_10004ECE4(v6))
    {
LABEL_6:

      v10 = sub_10004F29C();
      return sub_10004EE60(v10, v11);
    }
    v7 = "Due precomputations stopping as requested to defer";
LABEL_5:
    v8 = (_WORD *)sub_10003308C(2);
    sub_10004F030(v8);
    sub_10004ED40((void *)&_mh_execute_header, v4, v9, v7, v2);
    sub_100033080((uint64_t)v2);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 16);
  v15 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 248) = v13;
  *(_QWORD *)(v1 + 256) = v14;
  *(_QWORD *)(v1 + 264) = v15;
  if (v13 == 1)
  {
    sub_10004F040();
    if (v16)
    {
      v4 = (*(_QWORD *)(v1 + 184) + *(_QWORD *)(v1 + 224));
      v26 = sub_10004ED20();
      Logger.logObject.getter(v26);
      v27 = sub_10004ECDC();
      if (sub_10004ED00(v27))
      {
        v2 = *(uint8_t **)(v1 + 264);
        v28 = sub_10003308C(12);
        v29 = sub_10003308C(32);
        v43 = v29;
        v30 = sub_10004EDC8(4.8149e-34);
        v32 = sub_10004EDD4(v30, v31, &v43);
        sub_10004EDBC(v32);
        sub_10004ECC4();
        sub_10004ECC4();
        sub_10004ED64((void *)&_mh_execute_header, v33, v34, "Data Protection Class mismatch for %s - skipping");
        sub_10004ED78();
        sub_100033080(v29);
        sub_100033080(v28);

      }
      else
      {

        sub_10004ECC4();
        sub_10004ECC4();
      }
      sub_10004EF38();
      if (v16)
      {
        sub_10004F220();
        sub_10004EDE0();
        v36 = sub_10004ECDC();
        if (!sub_10004ECE4(v36))
          goto LABEL_6;
        v7 = "Due precomputations complete";
        goto LABEL_5;
      }
      *(_QWORD *)(v1 + 232) = v35;
      v37 = *(uint64_t (**)(_QWORD *))(v1 + 168);
      sub_10004EC90(v35);
      v38 = sub_10004ED20();
      v39 = v37(v38);
      v40 = *(_QWORD *)(v1 + 184);
      if (v39 == 1)
      {
        v41 = *(_QWORD *)(v1 + 224);
        sub_10004F220();
        v4 = (v40 + v41);
        goto LABEL_3;
      }
      v42 = (_QWORD *)swift_task_alloc(dword_100504084);
      *(_QWORD *)(v1 + 240) = v42;
      sub_10004EDB0(v42, (uint64_t)sub_10004C678);
      return sub_10004EE48();
    }
    else
    {
      v17 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v1 + 320) = v17;
      *v17 = v1;
      v17[1] = sub_10004CC10;
      v18 = sub_10004F0F8();
      return sub_10004EE78(v18, v19);
    }
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 104);
    v20 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 272) = v20;
    *(_QWORD *)(v1 + 280) = v21;
    v23 = *(_QWORD *)(v1 + 88);
    v22 = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v1 + 288) = v22;
    *(_QWORD *)(v1 + 296) = v23;
    sub_10004EDF8(v13, v22);
    sub_10004EE30(v23);
    sub_10004EE30(v21);
    sub_10004EE30(v20);
    v24 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 304) = v24;
    *(_QWORD *)(v24 + 16) = v1 + 120;
    v25 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v1 + 312) = v25;
    *v25 = v1;
    v25[1] = sub_10004C964;
    sub_10004F0A0();
    return sub_10004EEC0();
  }
}

uint64_t sub_10004C964()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 312));
  sub_100040B34();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004C99C()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v8;
  _QWORD *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  _QWORD *v28;
  _QWORD *v29;
  os_log_type_t v30;
  _WORD *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  _QWORD *v35;
  uint64_t v36;

  v2 = *(uint8_t **)(v0 + 272);
  sub_10004ED28();
  sub_10004ED28();
  if ((*(_BYTE *)(v0 + 328) & 1) != 0)
  {
    sub_10004F040();
    if (!v3)
    {
      v4 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v0 + 320) = v4;
      *v4 = v0;
      v4[1] = sub_10004CC10;
      v5 = sub_10004F0F8();
      return sub_10004EED8(v5, v6);
    }
    v8 = (*(_QWORD *)(v0 + 184) + *(_QWORD *)(v0 + 224));
    v18 = sub_10004ED20();
    Logger.logObject.getter(v18);
    v19 = sub_10004ECDC();
    if (sub_10004ED00(v19))
    {
      v2 = *(uint8_t **)(v0 + 264);
      v11 = sub_10003308C(12);
      sub_10003308C(32);
      sub_10004F1D4();
      v20 = sub_10004EDC8(4.8149e-34);
      v22 = sub_10004EDD4(v20, v21, &v36);
      sub_10004EDBC(v22);
      sub_10004ECC4();
      sub_10004ECC4();
      v17 = "Data Protection Class mismatch for %s - skipping";
      goto LABEL_8;
    }
  }
  else
  {
    v8 = (*(_QWORD *)(v0 + 184) + *(_QWORD *)(v0 + 224));
    v9 = sub_10004ED20();
    Logger.logObject.getter(v9);
    v10 = sub_10004ECDC();
    if (sub_10004ED00(v10))
    {
      v2 = *(uint8_t **)(v0 + 264);
      v11 = sub_10003308C(12);
      sub_10003308C(32);
      sub_10004F1D4();
      v12 = sub_10004EDC8(4.8149e-34);
      v14 = sub_10004EDD4(v12, v13, &v36);
      sub_10004EDBC(v14);
      sub_10004ECC4();
      sub_10004ECC4();
      v17 = "Preconditions not met for %s - skipping";
LABEL_8:
      sub_10004ED64((void *)&_mh_execute_header, v15, v16, v17);
      sub_10004ED78();
      sub_100033080(v1);
      sub_100033080(v11);

      goto LABEL_10;
    }
  }

  sub_10004ECC4();
  sub_10004ECC4();
LABEL_10:
  sub_10004EF38();
  if (v3)
  {
    sub_10004F220();
    sub_10004EDE0();
    v24 = sub_10004ECDC();
    if (sub_10004ECE4(v24))
    {
      v25 = "Due precomputations complete";
LABEL_17:
      v31 = (_WORD *)sub_10003308C(2);
      sub_10004F030(v31);
      sub_10004ED40((void *)&_mh_execute_header, v8, v32, v25, v2);
      sub_100033080((uint64_t)v2);
    }
LABEL_18:

    v33 = sub_10004F29C();
    return sub_10004EEA8(v33, v34);
  }
  *(_QWORD *)(v0 + 232) = v23;
  v27 = *(uint64_t (**)(_QWORD))(v0 + 168);
  v26 = *(_QWORD *)(v0 + 176);
  sub_10004EC90(v23);
  v28 = sub_10004ED20();
  if (v27(v28) == 1)
  {
    sub_10004EE20();
    v8 = ((char *)v27 + v26);
    v29 = sub_10004ECC4();
    Logger.logObject.getter(v29);
    v30 = sub_10004ECDC();
    if (sub_10004ECE4(v30))
    {
      v25 = "Due precomputations stopping as requested to defer";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_10004F12C();
  v35 = (_QWORD *)swift_task_alloc(dword_100504084);
  *(_QWORD *)(v0 + 240) = v35;
  sub_10004EDB0(v35, (uint64_t)sub_10004C678);
  return sub_10004EE90();
}

uint64_t sub_10004CC10()
{
  uint64_t v0;

  sub_10004EEF0();
  sub_100048CF8(*(_QWORD *)(v0 + 320));
  sub_10004F218();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004CC48()
{
  NSObject *v0;
  _QWORD *v1;
  uint8_t *v2;
  uint64_t v3;
  char v4;
  os_log_type_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  _QWORD *v9;
  _QWORD *v10;
  os_log_type_t v11;
  _WORD *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  _QWORD *v17;

  sub_10004EF38();
  if (v4)
  {
    sub_10004F220();
    sub_10004EDE0();
    v5 = sub_10004ECDC();
    if (sub_10004ECE4(v5))
    {
      v6 = "Due precomputations complete";
LABEL_8:
      v12 = (_WORD *)sub_10003308C(2);
      sub_10004F030(v12);
      sub_10004ED40((void *)&_mh_execute_header, v0, v13, v6, v2);
      sub_100033080((uint64_t)v2);
    }
LABEL_9:

    v14 = sub_10004F29C();
    return sub_10004EF18(v14, v15);
  }
  v1[29] = v3;
  v8 = (uint64_t (*)(_QWORD))v1[21];
  v7 = v1[22];
  sub_10004EC90(v3);
  v9 = sub_10004ED20();
  if (v8(v9) == 1)
  {
    sub_10004EE20();
    v0 = ((char *)v8 + v7);
    v10 = sub_10004ECC4();
    Logger.logObject.getter(v10);
    v11 = sub_10004ECDC();
    if (sub_10004ECE4(v11))
    {
      v6 = "Due precomputations stopping as requested to defer";
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  sub_10004F12C();
  v17 = (_QWORD *)swift_task_alloc(dword_100504084);
  v1[30] = v17;
  sub_10004EDB0(v17, (uint64_t)sub_10004C678);
  return sub_10004EF04();
}

uint64_t sub_10004CDD0(uint64_t a1, void *aBlock, const void *a3, void *a4)
{
  _QWORD *v4;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, id, void *);

  v4[2] = a4;
  v8 = _Block_copy(aBlock);
  v4[3] = v8;
  v4[4] = _Block_copy(a3);
  _Block_copy(v8);
  v9 = unk_10050438C;
  v13 = (uint64_t (*)(uint64_t, id, void *))((char *)&dword_100504388 + dword_100504388);
  v10 = a4;
  v11 = (_QWORD *)swift_task_alloc(v9);
  v4[5] = v11;
  *v11 = v4;
  v11[1] = sub_10004CE80;
  return v13(a1, v10, v8);
}

uint64_t sub_10004CE80()
{
  uint64_t v0;
  _QWORD *v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_100040B24();
  v3 = (void *)v1[2];
  v2 = (const void *)v1[3];
  sub_100048CF8(v1[5]);
  _Block_release(v2);

  v4 = sub_10004EF44();
  v5(v4);
  sub_10004EE38();
  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004CEDC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return sub_10004EC74((uint64_t)sub_10004CEF0, 0);
}

uint64_t sub_10004CEF0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v1 = sub_10004A8F0();
  if (!v1)
  {
LABEL_15:
    sub_10004F228();
    __asm { BR              X0 }
  }
  v27 = v0;
  v2 = sub_100041010(v1);
  sub_100040C38();
  sub_1000356D4();
  v3 = v2[2];
  v26 = v2;
  if (v3)
  {
    v4 = v2 + 8;
    do
    {
      if ((v4[3] & 1) == 0)
      {
        v5 = *(v4 - 3);
        v30 = *(v4 - 2);
        v31 = *(v4 - 4);
        v29 = *((_BYTE *)v4 - 8);
        v32 = *(_OWORD *)v4;
        v28 = v4[2];
        v6 = v4[4];
        v7 = v4[5];
        v8 = v4[6];
        v9 = v4[7];
        v10 = v4[8];
        swift_bridgeObjectRetain(v5);
        v33 = v6;
        sub_10004E0C0(v6, v7, v8, v9, v10);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009172C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
          sub_10009172C(v11 > 1, v12 + 1, 1);
        _swiftEmptyArrayStorage[2] = v12 + 1;
        v13 = &_swiftEmptyArrayStorage[13 * v12];
        v13[4] = v31;
        v13[5] = v5;
        v13[6] = v30;
        *((_BYTE *)v13 + 56) = v29;
        *((_OWORD *)v13 + 4) = v32;
        v13[10] = v28;
        *((_BYTE *)v13 + 88) = 0;
        v13[12] = v33;
        v13[13] = v7;
        v13[14] = v8;
        v13[15] = v9;
        v13[16] = v10;
      }
      v4 += 13;
      --v3;
    }
    while (v3);
  }
  v27[16] = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v26);
  v14 = _swiftEmptyArrayStorage[2];
  v27[17] = v14;
  if (!v14)
  {
    sub_1000357E4();
    goto LABEL_15;
  }
  v15 = type metadata accessor for ODIDeviceInfo(0);
  v16 = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  v27[18] = v15;
  v27[19] = v16;
  v27[20] = 0;
  sub_10004ECCC(v27[16]);
  v17 = sub_10004ED20();
  if ((static ODIDeviceInfo.isDeviceLocked()(v17) & 1) != 0)
  {
    sub_10004EFDC();
    sub_10004ECC4();
    sub_10004F018();
    sub_10004F228();
    return swift_task_switch(v18, v19, v20);
  }
  else
  {
    v23 = (_QWORD *)swift_task_alloc(dword_10050408C);
    v27[24] = (uint64_t)v23;
    sub_10004F1E0(v23, (uint64_t)sub_10004D208);
    sub_10004F228();
    return sub_10004B530(v24, v25);
  }
}

uint64_t sub_10004D12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100049E08(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), 1uLL);
  sub_100039950();
  sub_100040A54();
  return sub_10004ECF4(v1, v2, v3);
}

uint64_t sub_10004D16C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_10004EF38();
  if (v2)
  {
    swift_release(*(_QWORD *)(v0 + 128));
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 160) = v1;
    sub_10004EC90(v1);
    v4 = sub_10004ED20();
    v5 = static ODIDeviceInfo.isDeviceLocked()(v4);
    if ((v5 & 1) != 0)
    {
      sub_10004EFDC();
      sub_10004ECC4();
      sub_10004F018();
      return sub_10004ECF4(v6, v7, v8);
    }
    else
    {
      v9 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v0 + 192) = v9;
      v10 = sub_10004F1E0(v9, (uint64_t)sub_10004D208);
      return sub_10004F024(v10, v11);
    }
  }
}

uint64_t sub_10004D208()
{
  uint64_t v0;

  sub_10004EEF0();
  sub_100048CF8(*(_QWORD *)(v0 + 192));
  sub_10004F218();
  sub_100040A54();
  return sub_100040920();
}

uint64_t PrecomputationManager.triggerAllPrecomputations()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return sub_10004EC74((uint64_t)sub_10004D254, 0);
}

uint64_t sub_10004D254()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10004A8F0();
  if (v1)
  {
    v2 = sub_100041010(v1);
    *(_QWORD *)(v0 + 128) = v2;
    sub_100040C38();
    sub_1000356D4();
    v3 = v2[2];
    *(_QWORD *)(v0 + 136) = v3;
    if (v3)
    {
      *(_QWORD *)(v0 + 144) = 0;
      sub_10004ECCC(*(_QWORD *)(v0 + 128));
      sub_10004ED20();
      v4 = (_QWORD *)swift_task_alloc(dword_10050408C);
      *(_QWORD *)(v0 + 152) = v4;
      v5 = sub_10004F1F8(v4, (uint64_t)sub_10004D2E8);
      return sub_10004ED98(v5, v6);
    }
    sub_100039950();
  }
  return sub_10004ED88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D2E8()
{
  uint64_t v0;

  sub_10004EEF0();
  sub_100048CF8(*(_QWORD *)(v0 + 152));
  sub_10004F218();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10004D320()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_10004EF38();
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 144) = v1;
    sub_10004EC90(v1);
    sub_10004ED20();
    v3 = (_QWORD *)swift_task_alloc(dword_10050408C);
    *(_QWORD *)(v0 + 152) = v3;
    v4 = sub_10004F1F8(v3, (uint64_t)sub_10004D2E8);
    return sub_10004F024(v4, v5);
  }
}

uint64_t sub_10004D3A4(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10050409C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004EC70;
  return PrecomputationManager.triggerAllPrecomputations()();
}

uint64_t PrecomputationManager.triggerPrecomputation(workflowID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_10004EC74((uint64_t)sub_10004D41C, 0);
}

uint64_t sub_10004D41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10004F314();
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = 4;
  *(_BYTE *)(v0 + 72) = 1;
  sub_10004F2D4(1);
  v1 = dword_10050408C;
  swift_bridgeObjectRetain(v2);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 144) = v3;
  v4 = sub_10004F328(v3, (uint64_t)sub_10004D484);
  return sub_10004ED98(v4, 4);
}

uint64_t sub_10004D484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 144));
  sub_1000356D4();
  sub_100040A54();
  sub_10004E170(v2, v3, v4, 0, 0);
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D4E4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_1005040A4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_10004D570;
  return PrecomputationManager.triggerPrecomputation(workflowID:)(v6, v8);
}

uint64_t sub_10004D570()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  sub_100039950();
  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return sub_100048DF8(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t PrecomputationManager.triggerPregeneration(workflowID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_10004EC74((uint64_t)sub_10004D628, 0);
}

uint64_t sub_10004D628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10004F314();
  *(_BYTE *)(v0 + 40) = 1;
  *(_OWORD *)(v0 + 48) = xmmword_100408640;
  *(_QWORD *)(v0 + 64) = 1;
  *(_BYTE *)(v0 + 72) = 0;
  sub_10004F2D4(1);
  v1 = dword_10050408C;
  swift_bridgeObjectRetain(v2);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 144) = v3;
  v4 = sub_10004F328(v3, (uint64_t)sub_10004EC6C);
  return sub_10004ED98(v4, 1);
}

uint64_t sub_10004D6A8(void *a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v8 = _Block_copy(aBlock);
  v9 = (_QWORD *)sub_100040900(a5, 40);
  v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  v10 = a3;
  v11 = a1;
  v12 = sub_10004EF44();
  return sub_10008F82C(v12, v13);
}

uint64_t sub_10004D710(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_1005040AC;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_10004EC58;
  return PrecomputationManager.triggerPregeneration(workflowID:)(v6, v8);
}

uint64_t PrecomputationManager.notifyCachesWereRemoved()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_10004D7B0, 0);
}

uint64_t sub_10004D7B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_10004D7D0, v1);
}

uint64_t sub_10004D7D0()
{
  uint64_t v0;

  sub_100049EE0();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D80C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1005040B4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004EC70;
  return PrecomputationManager.notifyCachesWereRemoved()();
}

uint64_t PrecomputationManager.pausePrecomputations()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_10004D880, 0);
}

uint64_t sub_10004D880()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_10004D8A0, v1);
}

uint64_t sub_10004D8A0()
{
  uint64_t v0;

  sub_1000496E4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D8DC(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1005040BC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004D93C;
  return PrecomputationManager.pausePrecomputations()();
}

uint64_t sub_10004D93C()
{
  uint64_t v0;
  _QWORD *v1;
  void (**v2)(_QWORD);
  void *v3;

  sub_100040B24();
  v2 = (void (**)(_QWORD))v1[3];
  v3 = (void *)v1[2];
  sub_100048CF8(v1[4]);

  v2[2](v2);
  _Block_release(v2);
  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PrecomputationManager.resumePrecomputations()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_10004D99C, 0);
}

uint64_t sub_10004D99C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_10004D9BC, v1);
}

uint64_t sub_10004D9BC()
{
  uint64_t v0;

  sub_1000497F4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D9F8(void *a1, int a2, void *aBlock, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v6 = _Block_copy(aBlock);
  v7 = sub_100040900(a4, 32);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = a1;
  v9 = sub_10004EF44();
  return sub_10008F82C(v9, v10);
}

uint64_t sub_10004DA4C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1005040C4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004EC70;
  return PrecomputationManager.resumePrecomputations()();
}

uint64_t PrecomputationManager.clearAllBindings()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_10004DAC0, 0);
}

uint64_t sub_10004DAC0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005040D4);
  *(_QWORD *)(v0 + 24) = v1;
  sub_10004EDB0(v1, (uint64_t)sub_10004DB08);
  return sub_10004F050();
}

uint64_t sub_10004DB08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_100040B24();
  v4 = *(_QWORD *)(v3 + 24);
  *v5 = *v1;
  *(_QWORD *)(v3 + 32) = a1;
  swift_task_dealloc(v4);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_10004DB4C()
{
  uint64_t v0;

  sub_10005BFA8();
  sub_1000357E4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Void __swiftcall PrecomputationManager.clearAllBindings()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];

  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v2);
  v3 = sub_10004EF50();
  sub_10004F268(v1, 1);
  v4 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D0B60, 40);
  v4[2] = 0;
  v5 = v4 + 2;
  v4[3] = 0;
  v4[4] = v0;
  v6 = sub_10004F33C(v1);
  v7 = v0;
  if (v6 == 1)
  {
    sub_10004EB70(v1, &qword_1005039D8);
    v8 = 0;
    v9 = 0;
    v10 = 7168;
  }
  else
  {
    v11 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
    v10 = v11 | 0x1C00;
    v12 = *v5;
    if (*v5)
    {
      v13 = v4[3];
      ObjectType = swift_getObjectType(*v5);
      swift_unknownObjectRetain(v12);
      v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v9 = v15;
      swift_unknownObjectRelease(v12);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  v16 = sub_100040900((uint64_t)&unk_1004D0B88, 32);
  *(_QWORD *)(v16 + 16) = &unk_1005040E0;
  *(_QWORD *)(v16 + 24) = v4;
  if (v9 | v8)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v8;
    v19[3] = v9;
  }
  else
  {
    v17 = 0;
  }
  v18 = swift_task_create(v10, v17, (char *)&type metadata for () + 8, &unk_1005040F0, v16);
  swift_release(v18);
  sub_1000399C8();
}

uint64_t sub_10004DCF4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005040CC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10004EC60;
  return PrecomputationManager.clearAllBindings()();
}

uint64_t sub_10004DD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_10004DD84, 0);
}

uint64_t sub_10004DD84()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005040D4);
  *(_QWORD *)(v0 + 32) = v1;
  sub_10004EDB0(v1, (uint64_t)sub_10004DDCC);
  return sub_10004F050();
}

uint64_t sub_10004DDCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = sub_10004F2C0();
  *v4 = *v1;
  *(_QWORD *)(v5 + 40) = a1;
  swift_task_dealloc(v3);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_10004DE0C()
{
  uint64_t v0;

  sub_10005B134();
  sub_1000357E4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Void __swiftcall PrecomputationManager.capture(bindings:)(Swift::OpaquePointer bindings)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::OpaquePointer *v7;
  id v8;
  uint64_t v9;

  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v4);
  v5 = sub_10004EF50();
  sub_10004F274(v2, 1, v6, v5);
  v7 = (Swift::OpaquePointer *)sub_100040900((uint64_t)&unk_1004D0BB0, 48);
  v7[2]._rawValue = 0;
  v7[3]._rawValue = 0;
  v7[4]._rawValue = bindings._rawValue;
  v7[5]._rawValue = v1;
  sub_1000371CC();
  v8 = v1;
  v9 = sub_1000494E4(v2, (uint64_t)&unk_100504100, (uint64_t)v7);
  swift_release(v9);
  sub_1000399A0();
}

uint64_t sub_10004DEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10004DEE0, 0, 0);
}

uint64_t sub_10004DEE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10005039C(*(_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1)
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  v2 = (_QWORD *)swift_task_alloc(dword_1005043A4);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_10004DF4C;
  v3 = sub_10004F0F8();
  return sub_10004DD70(v3);
}

uint64_t sub_10004DF4C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 40));
  sub_1000356D4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_10004E064(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  sub_10004E0C0(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_10004E0C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  if (result != 1)
  {
    v7 = result;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

_QWORD *sub_10004E114(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  swift_bridgeObjectRelease(a1[1]);
  sub_10004E170(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_10004E170(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_10004E1C0(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc(a2[1]);
  v5 = (_QWORD *)sub_100048D70(v4);
  *v5 = v2;
  v5[1] = sub_10004E220;
  return v7(a1);
}

uint64_t sub_10004E220()
{
  uint64_t (**v0)(void);

  sub_100048CF8(*((_QWORD *)*v0 + 2));
  return sub_10004ECB8(v0[1]);
}

void sub_10004E258()
{
  sub_10004E264((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003D4B0);
}

void sub_10004E264(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  sub_1000399A0();
}

uint64_t sub_10004E2B0(uint64_t a1)
{
  return sub_10004E2BC(a1, (uint64_t (*)(BOOL))sub_10003D4B0);
}

uint64_t sub_10004E2BC(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t sub_10004E2FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = swift_task_alloc(dword_100503F5C);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10004F154(v1);
  return sub_10004EFAC(v2, v3, v4);
}

uint64_t sub_10004E344()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004E370()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1005040DC);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10004F13C(v1);
  return sub_10004DCF4();
}

uint64_t sub_10004E3C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E3EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = sub_10004F19C();
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10004EFF8(v1);
  return sub_10004EF7C(v2, v3, v4, v5);
}

uint64_t sub_10004E430()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004E464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc(dword_1005040FC);
  v4 = (_QWORD *)sub_100048D70(v3);
  v5 = sub_10004F13C(v4);
  return sub_10004DEC8(v5, v6, v7, v2, v1);
}

uint64_t sub_10004E4C8()
{
  return type metadata accessor for PrecomputationManager(0);
}

uint64_t type metadata accessor for PrecomputationManager(uint64_t a1)
{
  return sub_10004E4E4(a1, (uint64_t *)&unk_100504130, (uint64_t)&nominal type descriptor for PrecomputationManager);
}

uint64_t sub_10004E4E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10004E514(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "(";
    v4[3] = "(";
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004E59C()
{
  return type metadata accessor for PrecomputationManager.PrecomputationState(0);
}

uint64_t sub_10004E5A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_1004086B0;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10004E644()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504300;
  if (!qword_100504300)
  {
    v1 = sub_100035350(&qword_1005042F8);
    sub_10004E6C8();
    sub_10004E704(&qword_100504310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100504300);
  }
  return result;
}

unint64_t sub_10004E6C8()
{
  unint64_t result;

  result = qword_100504308;
  if (!qword_100504308)
  {
    result = swift_getWitnessTable(&unk_100407948, &unk_1004CFE48);
    atomic_store(result, (unint64_t *)&qword_100504308);
  }
  return result;
}

void sub_10004E704(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100028D0C();
}

uint64_t sub_10004E744()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10004F17C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004ED48(v1, (uint64_t)sub_10004EC60);
  return sub_10004ED10(v2, v3, v4);
}

uint64_t sub_10004E788()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10004F17C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004ED48(v1, (uint64_t)sub_10004EC60);
  return sub_10004ED10(v2, v3, v4);
}

uint64_t sub_10004E7CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10004F17C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004ED48(v1, (uint64_t)sub_10004EC60);
  return sub_10004ED10(v2, v3, v4);
}

uint64_t sub_10004E810()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_10004F19C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004F080(v1, (uint64_t)sub_10004EC60);
  return sub_10004EF7C(v2, v3, v4, v5);
}

uint64_t sub_10004E858()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004E88C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_10004F19C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004F080(v1, (uint64_t)sub_10004E8D0);
  return sub_10004EF7C(v2, v3, v4, v5);
}

uint64_t sub_10004E8D0()
{
  uint64_t (**v0)(void);

  sub_100048CF8(*((_QWORD *)*v0 + 2));
  return sub_10004ECB8(v0[1]);
}

uint64_t sub_10004E908()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E934()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10004F17C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10004ED48(v1, (uint64_t)sub_10004EC60);
  return sub_10004ED10(v2, v3, v4);
}

uint64_t sub_10004E974()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004E9A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  const void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (const void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10050437C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10004EC60;
  return ((uint64_t (*)(uint64_t, void *, const void *, void *))((char *)&dword_100504378 + dword_100504378))(v2, v3, v5, v4);
}

uint64_t sub_10004EA20(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_10004EA4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASAnalyticsEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004EA88(uint64_t a1)
{
  uint64_t v1;

  return sub_100049C60(a1, v1);
}

uint64_t sub_10004EA90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004EAB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_1005043BC);
  v6 = (_QWORD *)sub_100048D70(v5);
  *v6 = v2;
  v6[1] = sub_10004E8D0;
  return sub_10004B058(a1, v4);
}

uint64_t *sub_10004EB08(uint64_t *a1)
{
  sub_10004EA20(*a1, a1[1]);
  return a1;
}

void sub_10004EB34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_100032C48(a3);
  v3 = sub_10004EF44();
  v4(v3);
  sub_100028D0C();
}

void sub_10004EB70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100032C48(a2);
  sub_10004F104(v2);
  sub_100028D0C();
}

unint64_t sub_10004EB98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005043D0;
  if (!qword_1005043D0)
  {
    v1 = sub_100035350(&qword_1005042F8);
    sub_10004EC1C();
    sub_10004E704(&qword_1005043E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1005043D0);
  }
  return result;
}

unint64_t sub_10004EC1C()
{
  unint64_t result;

  result = qword_1005043D8;
  if (!qword_1005043D8)
  {
    result = swift_getWitnessTable(&unk_100407970, &unk_1004CFE48);
    atomic_store(result, (unint64_t *)&qword_1005043D8);
  }
  return result;
}

uint64_t sub_10004EC74(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0);
}

void sub_10004EC7C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void *sub_10004EC90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  return memcpy(v2, (const void *)(v1 + 104 * a1 + 32), 0x68uLL);
}

BOOL sub_10004ECA8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004ECB8(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *sub_10004ECC4()
{
  _QWORD *v0;

  return sub_10004E114(v0);
}

void *sub_10004ECCC@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return memcpy(v1, (const void *)(a1 + 32), 0x68uLL);
}

uint64_t sub_10004ECDC()
{
  return static os_log_type_t.default.getter();
}

BOOL sub_10004ECE4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004ECF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

BOOL sub_10004ED00(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004ED10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

_QWORD *sub_10004ED20()
{
  _QWORD *v0;

  return sub_10004E064(v0);
}

uint64_t sub_10004ED28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_10004E170(v4, v0, v1, v2, v3);
}

void sub_10004ED40(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_10004ED48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_10004ED64(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10004ED78()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10004ED88(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004ED98(uint64_t a1, uint64_t a2)
{
  return sub_10004B530(a1, a2);
}

void *sub_10004EDA8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

_QWORD *sub_10004EDB0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10004EDBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004EDC8(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10004EDD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100036778(v4, v3, a3);
}

uint64_t sub_10004EDE0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10004EDF8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 120) = a1;
  *(_QWORD *)(v4 + 128) = v5;
  *(_BYTE *)(v4 + 136) = a2 & 1;
  *(_BYTE *)(v4 + 137) = BYTE1(a2) & 1;
  *(_BYTE *)(v4 + 138) = BYTE2(a2) & 1;
  *(_QWORD *)(v4 + 144) = v3;
  *(_QWORD *)(v4 + 152) = v2;
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_10004EE20()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
}

uint64_t sub_10004EE30(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

void sub_10004EE38()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_10004EE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_10004EE48()
{
  return sub_100049A68();
}

uint64_t sub_10004EE60(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004EE78(uint64_t a1, uint64_t a2)
{
  return sub_10004B530(a1, a2);
}

uint64_t sub_10004EE90()
{
  return sub_100049A68();
}

uint64_t sub_10004EEA8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004EEC0()
{
  return ((uint64_t (*)(void))withTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_10004EED8(uint64_t a1, uint64_t a2)
{
  return sub_10004B530(a1, a2);
}

void sub_10004EEF0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10004EF04()
{
  return sub_100049A68();
}

uint64_t sub_10004EF18(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_WORD *sub_10004EF2C(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10004EF44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004EF50()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_10004EF6C()
{
  return sub_100049A68();
}

uint64_t sub_10004EF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10004EF8C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004EF9C()
{
  return ((uint64_t (*)(void))swift_asyncLet_finish)();
}

uint64_t sub_10004EFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000477F4(a1, a2, a3);
}

uint64_t sub_10004EFBC(void *a1)
{
  uint64_t v1;

  return sub_1000491F4(v1, a1);
}

BOOL sub_10004EFCC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004EFDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[19];
  v2 = v0[15];
  v3 = v0[3];
  v0[21] = v0[2];
  v0[22] = v3;
  v0[23] = *(_QWORD *)(v2 + v1);
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10004EFF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004F024(uint64_t a1, uint64_t a2)
{
  return sub_10004B530(a1, a2);
}

_WORD *sub_10004F030(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10004F050()
{
  return sub_10004A640();
}

uint64_t sub_10004F05C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004F068(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004F074(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004F080@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10004F0A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004F0D8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10004F0E4(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10004F0F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004F104(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10004F118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8, v2, v1);
}

uint64_t sub_10004F13C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004F154(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_10004F16C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10004F17C()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10004F184()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10004F18C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10004F19C()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10004F1B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10004F1C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10004F1E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10004F1F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10004F210()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
}

_QWORD *sub_10004F218()
{
  _QWORD *v0;

  return sub_10004E114(v0);
}

uint64_t sub_10004F220()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
}

uint64_t sub_10004F244()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10004F24C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10004F254()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

uint64_t sub_10004F260@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10004F268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100037020(a1, a2, 1, v2);
}

uint64_t sub_10004F274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037020(a1, a2, 1, a4);
}

_QWORD *sub_10004F27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100032EFC((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
}

uint64_t sub_10004F288@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10004F29C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004F2A8(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_10004F2B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10004F2C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 32);
}

double sub_10004F2D4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 + 80) = a1;
  result = 0.0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  return result;
}

_QWORD *sub_10004F2E8()
{
  _QWORD *v0;

  return sub_10004E114(v0);
}

uint64_t sub_10004F2F4()
{
  uint64_t *v0;

  return sub_100032C48(v0);
}

uint64_t sub_10004F2FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100036778(v4, v3, a3);
}

uint64_t sub_10004F308()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

uint64_t sub_10004F314()
{
  _QWORD *v0;
  uint64_t result;

  result = v0[16];
  v0[2] = v0[15];
  v0[3] = result;
  v0[4] = 0;
  return result;
}

uint64_t sub_10004F328@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10004F33C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000352C8(a1, 1, v1);
}

uint64_t sub_10004F348()
{
  uint64_t v0;

  return sub_10004EA4C(v0);
}

id sub_10004F350(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10004F358()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_10004F360()
{
  uint64_t v0;

  return swift_release_n(*(_QWORD *)(v0 + 1184), 2);
}

_QWORD *sub_10004F36C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v60 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v60 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v60);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)((char *)v4 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v64 = v19[1];
    *v18 = *v19;
    v18[1] = v64;
    v20 = a3[8];
    v21 = a3[9];
    v22 = (_QWORD *)((char *)v4 + v20);
    v23 = (_QWORD *)((char *)a2 + v20);
    v62 = v23[1];
    *v22 = *v23;
    v22[1] = v62;
    v24 = (_QWORD *)((char *)v4 + v21);
    v25 = (_QWORD *)((char *)a2 + v21);
    v63 = v25[1];
    *v24 = *v25;
    v24[1] = v63;
    v26 = a3[10];
    v27 = a3[11];
    v28 = (_QWORD *)((char *)v4 + v26);
    v29 = (_QWORD *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)((char *)v4 + v27);
    v32 = (_QWORD *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[12];
    v35 = a3[13];
    v36 = (_QWORD *)((char *)v4 + v34);
    v37 = (_QWORD *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    *(_DWORD *)((char *)v4 + v35) = *(_DWORD *)((char *)a2 + v35);
    v39 = a3[14];
    v40 = a3[15];
    v41 = *(_QWORD *)((char *)a2 + v39);
    *(_QWORD *)((char *)v4 + v39) = v41;
    v42 = *(_QWORD *)((char *)a2 + v40);
    *(_QWORD *)((char *)v4 + v40) = v42;
    v43 = a3[17];
    *(_DWORD *)((char *)v4 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
    v44 = (_QWORD *)((char *)v4 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[18];
    v48 = a3[19];
    v49 = (_QWORD *)((char *)v4 + v47);
    v50 = (_QWORD *)((char *)a2 + v47);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    *((_BYTE *)v4 + v48) = *((_BYTE *)a2 + v48);
    v52 = a3[20];
    v53 = a3[21];
    v54 = (_QWORD *)((char *)v4 + v52);
    v55 = (_QWORD *)((char *)a2 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = (_QWORD *)((char *)v4 + v53);
    v58 = (_QWORD *)((char *)a2 + v53);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
  }
  return v4;
}

uint64_t sub_10004F590(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[21] + 8));
}

_QWORD *sub_10004F6A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v62 = v18[1];
  *v17 = *v18;
  v17[1] = v62;
  v19 = a3[8];
  v20 = a3[9];
  v21 = (_QWORD *)((char *)a1 + v19);
  v22 = (_QWORD *)((char *)a2 + v19);
  v60 = v22[1];
  *v21 = *v22;
  v21[1] = v60;
  v23 = (_QWORD *)((char *)a1 + v20);
  v24 = (_QWORD *)((char *)a2 + v20);
  v61 = v24[1];
  *v23 = *v24;
  v23[1] = v61;
  v25 = a3[10];
  v26 = a3[11];
  v27 = (_QWORD *)((char *)a1 + v25);
  v28 = (_QWORD *)((char *)a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)((char *)a1 + v26);
  v31 = (_QWORD *)((char *)a2 + v26);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = a3[12];
  v34 = a3[13];
  v35 = (_QWORD *)((char *)a1 + v33);
  v36 = (_QWORD *)((char *)a2 + v33);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  *(_DWORD *)((char *)a1 + v34) = *(_DWORD *)((char *)a2 + v34);
  v38 = a3[14];
  v39 = a3[15];
  v40 = *(_QWORD *)((char *)a2 + v38);
  *(_QWORD *)((char *)a1 + v38) = v40;
  v41 = *(_QWORD *)((char *)a2 + v39);
  *(_QWORD *)((char *)a1 + v39) = v41;
  v42 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  v46 = a3[18];
  v47 = a3[19];
  v48 = (_QWORD *)((char *)a1 + v46);
  v49 = (_QWORD *)((char *)a2 + v46);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  *((_BYTE *)a1 + v47) = *((_BYTE *)a2 + v47);
  v51 = a3[20];
  v52 = a3[21];
  v53 = (_QWORD *)((char *)a1 + v51);
  v54 = (_QWORD *)((char *)a2 + v51);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = (_QWORD *)((char *)a1 + v52);
  v57 = (_QWORD *)((char *)a2 + v52);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v58);
  return a1;
}

_QWORD *sub_10004F8A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[10];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[11];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[12];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(_DWORD *)((char *)a1 + a3[13]) = *(_DWORD *)((char *)a2 + a3[13]);
  v47 = a3[14];
  v48 = *(_QWORD *)((char *)a2 + v47);
  v49 = *(_QWORD *)((char *)a1 + v47);
  *(_QWORD *)((char *)a1 + v47) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = a3[15];
  v51 = *(_QWORD *)((char *)a2 + v50);
  v52 = *(_QWORD *)((char *)a1 + v50);
  *(_QWORD *)((char *)a1 + v50) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  v53 = a3[17];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  v58 = a3[18];
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  v63 = a3[20];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = a3[21];
  v69 = (_QWORD *)((char *)a1 + v68);
  v70 = (_QWORD *)((char *)a2 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  return a1;
}

_OWORD *sub_10004FB64(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_DWORD *)((char *)a1 + v13) = *(_DWORD *)((char *)a2 + v13);
  v14 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  v16 = a3[19];
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  return a1;
}

_QWORD *sub_10004FC70(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[9];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[10];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  v41 = v37[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  v42 = a3[11];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  v48 = a3[12];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[14];
  *(_DWORD *)((char *)a1 + a3[13]) = *(_DWORD *)((char *)a2 + a3[13]);
  v55 = *(_QWORD *)((char *)a1 + v54);
  *(_QWORD *)((char *)a1 + v54) = *(_QWORD *)((char *)a2 + v54);
  swift_bridgeObjectRelease(v55);
  v56 = a3[15];
  v57 = *(_QWORD *)((char *)a1 + v56);
  *(_QWORD *)((char *)a1 + v56) = *(_QWORD *)((char *)a2 + v56);
  swift_bridgeObjectRelease(v57);
  v58 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = a3[18];
  v65 = (_QWORD *)((char *)a1 + v64);
  v66 = (_QWORD *)((char *)a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = a3[20];
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  v71 = (_QWORD *)((char *)a1 + v70);
  v72 = (_QWORD *)((char *)a2 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = a3[21];
  v77 = (_QWORD *)((char *)a1 + v76);
  v78 = (_QWORD *)((char *)a2 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  return a1;
}

uint64_t sub_10004FE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004FE64);
}

uint64_t sub_10004FE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10004F358();
    return sub_1000352C8(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10004FED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004FEE0);
}

uint64_t sub_10004FEE0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10004F358();
    return sub_100037020(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AssessmentPayload(uint64_t a1)
{
  uint64_t result;

  result = qword_100504440;
  if (!qword_100504440)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AssessmentPayload);
  return result;
}

uint64_t sub_10004FF80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[18];

  v4[0] = &unk_100408748;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100408748;
    v4[3] = &unk_100408748;
    v4[4] = &unk_100408748;
    v4[5] = &unk_100408748;
    v4[6] = &unk_100408748;
    v4[7] = &unk_100408748;
    v4[8] = &unk_100408748;
    v4[9] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[13] = &unk_100408748;
    v4[14] = &unk_100408748;
    v4[15] = &unk_100408760;
    v4[16] = &unk_100408778;
    v4[17] = &unk_100408748;
    swift_initStructMetadata(a1, 256, 18, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10005003C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100053FB8((_OWORD *)a1, v5);
    sub_1000539CC();
    sub_100039950();
  }
  else
  {
    sub_100054E30(a1);
    sub_1000531C4(a2, a3, v5);
    sub_100039950();
    sub_100054E30((uint64_t)v5);
  }
  sub_10002BE84();
}

uint64_t sub_1000500B0(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100032C48(&qword_100503A50);
  sub_10004EDE8();
  __chkstk_darwin(v10);
  sub_100054E18();
  v11 = sub_10004F358();
  sub_100046E54();
  __chkstk_darwin(v12);
  sub_100046E44();
  v15 = v14 - v13;
  if (sub_1000352C8(a1, 1, v11) == 1)
  {
    sub_100054964(a1, &qword_100503A50);
    sub_1000532E8(a2, a3, a4, v4);
    sub_100039950();
    return sub_100054964(v4, &qword_100503A50);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v15, a1, v11);
    sub_1000539FC(v15, a2, a3, a4);
    return sub_100039950();
  }
}

uint64_t sub_1000501C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[40];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000351FC((__int128 *)a1, (uint64_t)v6);
    sub_100053AB0();
    return sub_100039950();
  }
  else
  {
    sub_100054E30(a1);
    sub_100053434(a2, a3, (uint64_t)v6);
    sub_100039950();
    return sub_100054E30((uint64_t)v6);
  }
}

void sub_100050240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100032C48(&qword_100504530);
  sub_10004EDE8();
  __chkstk_darwin(v4);
  sub_100046E44();
  v7 = v6 - v5;
  type metadata accessor for ServerJSONFetchRetryState(0);
  sub_10004EDE8();
  __chkstk_darwin(v8);
  sub_100046E44();
  v11 = v10 - v9;
  if (sub_1000352C8(a1, 1, v12) == 1)
  {
    sub_100054964(a1, &qword_100504530);
    sub_100053640(a2, v7);
    v13 = sub_100054E50();
    sub_10004F104(v13);
    sub_100054964(v7, &qword_100504530);
  }
  else
  {
    sub_100054608(a1, v11);
    sub_100053AE0(v11, a2);
    v14 = sub_100054E50();
    sub_10004F104(v14);
  }
  sub_1000399C8();
}

void sub_100050324(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100053FB8((_OWORD *)a1, v3);
    sub_100053BB0(v3, a2);
    sub_100054814(a2);
  }
  else
  {
    sub_100054964(a1, &qword_100503A58);
    sub_1000538B0(a2, v3);
    sub_100054814(a2);
    sub_100054964((uint64_t)v3, &qword_100503A58);
  }
  sub_10002BE84();
}

void sub_10005039C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __int128 v49[2];
  uint64_t v50;
  _BYTE v51[32];
  __int128 v52[2];
  __int128 v53[2];
  __int128 v54;
  __int128 v55[2];
  __int128 v56[2];
  _QWORD v57[2];
  _BYTE v58[32];
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100032C48((uint64_t *)&unk_100504D70);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  sub_1000548C4(a1, v59);
  v48 = v59[0];
  v4 = v61;
  v43 = v60;
  v5 = v62;
  v45 = (unint64_t)(v60 + 64) >> 6;
  v46 = v59[1];
  v44 = (uint64_t)(v3 + 8);
  v6 = sub_100054E48();
  v47 = (char *)&type metadata for Any + 8;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v14 = (v5 - 1) & v5;
  v15 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; v15 = __clz(__rbit64(v18)) + (i << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v48 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    sub_100036FA0(*(_QWORD *)(v48 + 56) + 32 * v15, (uint64_t)v58);
    v57[0] = v21;
    v57[1] = v22;
    sub_100036FA0((uint64_t)v58, (uint64_t)v51);
    swift_bridgeObjectRetain_n(v22, 2);
    sub_100054964((uint64_t)v57, &qword_100504560);
    v23 = sub_100032C48(&qword_1005044C0);
    if (!swift_dynamicCast(v49, v51, v47, v23, 6))
    {
      v50 = 0;
      memset(v49, 0, sizeof(v49));
      swift_bridgeObjectRelease(v22);
      v33 = sub_100054964((uint64_t)v49, &qword_100504500);
      v41 = sub_100054EA0(v33, v34, v35, v36, v37, v38, v39, v40, v43, v44, v45, v46, (uint64_t)v47, v48);
      sub_10005495C(v41);
      swift_release(v3);
      goto LABEL_32;
    }
    sub_1000351FC(v49, (uint64_t)v52);
    sub_1000351FC(v52, (uint64_t)v53);
    *(_QWORD *)&v54 = v21;
    *((_QWORD *)&v54 + 1) = v22;
    sub_1000351FC(v53, (uint64_t)v55);
    v24 = v54;
    sub_1000351FC(v55, (uint64_t)v56);
    sub_1000351FC(v56, (uint64_t)&v54);
    v25 = sub_100052C20(v24, *((uint64_t *)&v24 + 1));
    v26 = v25;
    if ((v27 & 1) != 0)
    {
      v28 = v3[6] + 16 * v25;
      swift_bridgeObjectRelease(*(_QWORD *)(v28 + 8));
      *(_OWORD *)v28 = v24;
      v29 = (_QWORD *)(v3[7] + 40 * v26);
      sub_100032F94(v29);
      v6 = sub_1000351FC(&v54, (uint64_t)v29);
      goto LABEL_28;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)(v44 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_OWORD *)(v3[6] + 16 * v25) = v24;
    v6 = sub_1000351FC(&v54, v3[7] + 40 * v25);
    v30 = v3[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_34;
    v3[2] = v32;
LABEL_28:
    v4 = i;
    v5 = v14;
    if (v14)
      goto LABEL_5;
LABEL_6:
    v17 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_35;
    if (v17 >= v45)
      goto LABEL_31;
    v18 = *(_QWORD *)(v46 + 8 * v17);
    i = v4 + 1;
    if (!v18)
    {
      i = v4 + 2;
      if (v4 + 2 >= v45)
        goto LABEL_31;
      v18 = *(_QWORD *)(v46 + 8 * i);
      if (!v18)
      {
        i = v4 + 3;
        if (v4 + 3 >= v45)
          goto LABEL_31;
        v18 = *(_QWORD *)(v46 + 8 * i);
        if (!v18)
        {
          i = v4 + 4;
          if (v4 + 4 >= v45)
            goto LABEL_31;
          v18 = *(_QWORD *)(v46 + 8 * i);
          if (!v18)
          {
            i = v4 + 5;
            if (v4 + 5 >= v45)
              goto LABEL_31;
            v18 = *(_QWORD *)(v46 + 8 * i);
            if (!v18)
            {
              v19 = v4 + 6;
              while (v19 < v45)
              {
                v18 = *(_QWORD *)(v46 + 8 * v19++);
                if (v18)
                {
                  i = v19 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              v42 = sub_100054EA0(v6, v7, v8, v9, v10, v11, v12, v13, v43, v44, v45, v46, (uint64_t)v47, v48);
              sub_10005495C(v42);
LABEL_32:
              sub_10004F0C0();
              return;
            }
          }
        }
      }
    }
LABEL_21:
    v14 = (v18 - 1) & v18;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

void sub_100050714(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26[2];
  uint64_t v27;
  _BYTE v28[32];
  __int128 v29[2];
  __int128 v30[2];
  __int128 v31;
  __int128 v32[2];
  __int128 v33[2];
  _BYTE __dst[72];
  _BYTE __src[72];
  _QWORD v36[6];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100032C48((uint64_t *)&unk_100504D70);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  sub_1000548C4(a1, v36);
  v4 = v36[0];
  v5 = v36[3];
  v24 = (unint64_t)(v36[2] + 64) >> 6;
  v25 = v36[1];
  v6 = v36[4];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v7 = (v6 - 1) & v6;
  v8 = __clz(__rbit64(v6)) | (v5 << 6);
  for (i = v5; ; v8 = __clz(__rbit64(v11)) + (i << 6))
  {
    sub_1000547D8(*(_QWORD *)(v4 + 48) + 40 * v8, (uint64_t)__src);
    sub_100036FA0(*(_QWORD *)(v4 + 56) + 32 * v8, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1000547D8((uint64_t)__dst, (uint64_t)v29);
    if (!swift_dynamicCast(v26, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v26[0] = 0uLL;
      sub_100054964((uint64_t)__dst, &qword_100504550);
      swift_bridgeObjectRelease(*((_QWORD *)&v26[0] + 1));
LABEL_33:
      sub_10005495C(v4);
      swift_release(v3);
      return;
    }
    v13 = v26[0];
    sub_100036FA0((uint64_t)&__dst[40], (uint64_t)v28);
    sub_100054964((uint64_t)__dst, &qword_100504550);
    v14 = sub_100032C48(&qword_1005044C0);
    if ((swift_dynamicCast(v26, v28, (char *)&type metadata for Any + 8, v14, 6) & 1) == 0)
    {
      v27 = 0;
      memset(v26, 0, sizeof(v26));
      swift_bridgeObjectRelease(*((_QWORD *)&v13 + 1));
      sub_100054964((uint64_t)v26, &qword_100504500);
      goto LABEL_33;
    }
    sub_1000351FC(v26, (uint64_t)v29);
    sub_1000351FC(v29, (uint64_t)v30);
    v31 = v13;
    sub_1000351FC(v30, (uint64_t)v32);
    v15 = v31;
    sub_1000351FC(v32, (uint64_t)v33);
    sub_1000351FC(v33, (uint64_t)&v31);
    v16 = sub_100052C20(v15, *((uint64_t *)&v15 + 1));
    v17 = v16;
    if ((v18 & 1) != 0)
    {
      v19 = v3[6] + 16 * v16;
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      *(_OWORD *)v19 = v15;
      v20 = (_QWORD *)(v3[7] + 40 * v17);
      sub_100032F94(v20);
      sub_1000351FC(&v31, (uint64_t)v20);
      goto LABEL_29;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v16;
    *(_OWORD *)(v3[6] + 16 * v16) = v15;
    sub_1000351FC(&v31, v3[7] + 40 * v16);
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_36;
    v3[2] = v23;
LABEL_29:
    v5 = i;
    v6 = v7;
    if (v7)
      goto LABEL_5;
LABEL_6:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_37;
    if (v10 >= v24)
      goto LABEL_34;
    v11 = *(_QWORD *)(v25 + 8 * v10);
    i = v5 + 1;
    if (!v11)
    {
      i = v5 + 2;
      if (v5 + 2 >= v24)
        goto LABEL_34;
      v11 = *(_QWORD *)(v25 + 8 * i);
      if (!v11)
      {
        i = v5 + 3;
        if (v5 + 3 >= v24)
          goto LABEL_34;
        v11 = *(_QWORD *)(v25 + 8 * i);
        if (!v11)
        {
          i = v5 + 4;
          if (v5 + 4 >= v24)
            goto LABEL_34;
          v11 = *(_QWORD *)(v25 + 8 * i);
          if (!v11)
          {
            i = v5 + 5;
            if (v5 + 5 >= v24)
              goto LABEL_34;
            v11 = *(_QWORD *)(v25 + 8 * i);
            if (!v11)
            {
              v12 = v5 + 6;
              while (v12 < v24)
              {
                v11 = *(_QWORD *)(v25 + 8 * v12++);
                if (v11)
                {
                  i = v12 - 1;
                  goto LABEL_21;
                }
              }
LABEL_34:
              sub_10005495C(v4);
              return;
            }
          }
        }
      }
    }
LABEL_21:
    v7 = (v11 - 1) & v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100050B20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t inited;
  int *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSNumber v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  char v40[848];
  uint64_t v41;

  v1 = sub_100032C48(&qword_100504520);
  inited = swift_initStackObject(v1, v40);
  *(_OWORD *)(inited + 16) = xmmword_100408700;
  *(_QWORD *)(inited + 32) = 0x776F6C666B726F77;
  *(_QWORD *)(inited + 40) = 0xEA00000000004449;
  v38 = v0[1];
  *(_QWORD *)(inited + 48) = *v0;
  *(_QWORD *)(inited + 56) = v38;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x4164657461657263;
  *(_QWORD *)(inited + 88) = 0xE900000000000074;
  v3 = (int *)type metadata accessor for AssessmentPayload(0);
  v4 = (char *)v0 + v3[5];
  v5 = sub_10004F358();
  *(_QWORD *)(inited + 120) = v5;
  v6 = sub_10004048C((_QWORD *)(inited + 96));
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
  *(_QWORD *)(inited + 128) = 0x656D737365737361;
  *(_QWORD *)(inited + 136) = 0xEA0000000000746ELL;
  v7 = (_QWORD *)((char *)v0 + v3[6]);
  v37 = v7[1];
  *(_QWORD *)(inited + 144) = *v7;
  *(_QWORD *)(inited + 152) = v37;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "trainingData");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  v8 = (_QWORD *)((char *)v0 + v3[7]);
  v9 = v8[1];
  *(_QWORD *)(inited + 192) = *v8;
  *(_QWORD *)(inited + 200) = v9;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  strcpy((char *)(inited + 224), "assessmentGUID");
  *(_BYTE *)(inited + 239) = -18;
  v10 = (_QWORD *)((char *)v0 + v3[8]);
  v11 = v10[1];
  *(_QWORD *)(inited + 240) = *v10;
  *(_QWORD *)(inited + 248) = v11;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = 0xD000000000000013;
  *(_QWORD *)(inited + 280) = 0x80000001003E32F0;
  v12 = (_QWORD *)((char *)v0 + v3[9]);
  v13 = v12[1];
  *(_QWORD *)(inited + 288) = *v12;
  *(_QWORD *)(inited + 296) = v13;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  strcpy((char *)(inited + 320), "trainingGUID");
  *(_BYTE *)(inited + 333) = 0;
  *(_WORD *)(inited + 334) = -5120;
  v14 = (_QWORD *)((char *)v0 + v3[10]);
  v15 = v14[1];
  *(_QWORD *)(inited + 336) = *v14;
  *(_QWORD *)(inited + 344) = v15;
  *(_QWORD *)(inited + 360) = &type metadata for String;
  *(_QWORD *)(inited + 368) = 0xD000000000000011;
  *(_QWORD *)(inited + 376) = 0x80000001003E3320;
  v16 = (_QWORD *)((char *)v0 + v3[11]);
  v17 = v16[1];
  *(_QWORD *)(inited + 384) = *v16;
  *(_QWORD *)(inited + 392) = v17;
  *(_QWORD *)(inited + 408) = &type metadata for String;
  *(_QWORD *)(inited + 416) = 0xD000000000000010;
  *(_QWORD *)(inited + 424) = 0x80000001003E3340;
  v18 = (_QWORD *)((char *)v0 + v3[12]);
  v19 = v18[1];
  *(_QWORD *)(inited + 432) = *v18;
  *(_QWORD *)(inited + 440) = v19;
  *(_QWORD *)(inited + 456) = &type metadata for String;
  *(_QWORD *)(inited + 464) = 0x6E49747365676964;
  *(_QWORD *)(inited + 472) = 0xEB00000000786564;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  sub_100054E48();
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  isa = Int32._bridgeToObjectiveC()().super.super.isa;
  v21 = sub_100039884(0, &qword_100503A68, NSNumber_ptr);
  *(_QWORD *)(inited + 480) = isa;
  *(_QWORD *)(inited + 504) = v21;
  *(_QWORD *)(inited + 512) = 0x73676E69646E6962;
  *(_QWORD *)(inited + 520) = 0xE800000000000000;
  v22 = *(_QWORD *)((char *)v0 + v3[14]);
  *(_QWORD *)(inited + 552) = sub_100032C48(&qword_100503C48);
  *(_QWORD *)(inited + 528) = v22;
  *(_QWORD *)(inited + 560) = 0xD000000000000011;
  *(_QWORD *)(inited + 568) = 0x80000001003E3370;
  v23 = *(_QWORD *)((char *)v0 + v3[15]);
  *(_QWORD *)(inited + 600) = sub_100032C48(&qword_100503E60);
  *(_QWORD *)(inited + 576) = v23;
  *(_QWORD *)(inited + 608) = 0x5468736572666572;
  *(_QWORD *)(inited + 616) = 0xEA00000000006C74;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v24.super.super.isa = Int32._bridgeToObjectiveC()().super.super.isa;
  *(_QWORD *)(inited + 648) = v21;
  *(NSNumber *)(inited + 624) = v24;
  strcpy((char *)(inited + 656), "encryptedTSID");
  *(_WORD *)(inited + 670) = -4864;
  v25 = (_QWORD *)((char *)v0 + v3[17]);
  v27 = *v25;
  v26 = v25[1];
  *(_QWORD *)(inited + 696) = &type metadata for String;
  *(_QWORD *)(inited + 672) = v27;
  *(_QWORD *)(inited + 680) = v26;
  strcpy((char *)(inited + 704), "encryptedAGUID");
  *(_BYTE *)(inited + 719) = -18;
  v28 = (_QWORD *)((char *)v0 + v3[18]);
  v29 = *v28;
  v30 = v28[1];
  *(_QWORD *)(inited + 744) = &type metadata for String;
  *(_QWORD *)(inited + 720) = v29;
  *(_QWORD *)(inited + 728) = v30;
  strcpy((char *)(inited + 752), "shouldSendOTD");
  *(_WORD *)(inited + 766) = -4864;
  LOBYTE(v28) = *((_BYTE *)v0 + v3[19]);
  *(_QWORD *)(inited + 792) = &type metadata for Bool;
  *(_BYTE *)(inited + 768) = (_BYTE)v28;
  *(_QWORD *)(inited + 800) = 0x49656C69666F7270;
  *(_QWORD *)(inited + 808) = 0xE900000000000044;
  v31 = (_QWORD *)((char *)v0 + v3[21]);
  v32 = *v31;
  v33 = v31[1];
  *(_QWORD *)(inited + 840) = &type metadata for String;
  *(_QWORD *)(inited + 816) = v32;
  *(_QWORD *)(inited + 824) = v33;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  v41 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v34 = (_QWORD *)((char *)v0 + v3[20]);
  v35 = v34[1];
  if (v35)
  {
    v36 = *v34;
    v39[3] = &type metadata for String;
    v39[0] = v36;
    v39[1] = v35;
    swift_bridgeObjectRetain(v35);
    sub_10005003C((uint64_t)v39, 0xD000000000000012, 0x80000001003E33B0);
  }
  sub_10004F0C0();
}

void sub_100051008(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  int *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  id v37;
  void *v38;
  unsigned int v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v4 = objc_msgSend(a1, "workflowID");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  *a2 = v5;
  a2[1] = v7;
  v9 = sub_10004F350(v8, "createdAt");
  v10 = (int *)type metadata accessor for AssessmentPayload(0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v12 = sub_10004F350(v11, "assessment");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[6]);
  v14 = sub_10004F350(v13, "trainingData");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[7]);
  v16 = sub_10004F350(v15, "assessmentGUID");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[8]);
  v18 = sub_10004F350(v17, "assessmentGUIDSeeds");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[9]);
  v20 = sub_10004F350(v19, "trainingGUID");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[10]);
  v22 = sub_10004F350(v21, "trainingGUIDSeeds");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[11]);
  v24 = sub_10004F350(v23, "trainingSignalID");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[12]);
  v26 = sub_10004F350(v25, "digestIndex");
  v27 = (uint64_t)objc_msgSend(v26, "integerValue");

  if (v27 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v27 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return;
  }
  *(_DWORD *)((char *)a2 + v10[13]) = v27;
  v29 = sub_10004F350(v28, "bindings");
  v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  sub_100050714(v30);
  v31 = sub_100054EC0();
  if (!v29)
  {
    v32 = sub_100032C48(&qword_1005044C0);
    v31 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v32, &protocol witness table for String);
    v29 = (id)v31;
  }
  *(uint64_t *)((char *)a2 + v10[14]) = (uint64_t)v29;
  v33 = sub_10004F350(v31, "bindingsToCompare");
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, (char *)&type metadata for Any + 8);

  sub_10005138C(v34);
  v35 = sub_100054EC0();
  v36 = &off_1004CF5F0;
  if (v33)
    v36 = (_UNKNOWN **)v33;
  *(uint64_t *)((char *)a2 + v10[15]) = (uint64_t)v36;
  v37 = sub_10004F350(v35, "refreshTTL");
  if (v37)
  {
    v38 = v37;
    v39 = objc_msgSend(v37, "intValue");

  }
  else
  {
    v39 = 0;
  }
  *(_DWORD *)((char *)a2 + v10[16]) = v39;
  v40 = sub_10004F350((uint64_t)v37, "encryptedTSID");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[17]);
  v42 = sub_10004F350(v41, "encryptedAGUID");
  sub_100054D1C();
  sub_100054C2C();
  sub_100054D54(v10[18]);
  *((_BYTE *)a2 + v10[19]) = objc_msgSend(a1, "shouldSendOTD");
  v43 = sub_1000548FC(a1);
  v45 = sub_100054D8C(v43, v44, v10[20]);
  v46 = sub_10004F350(v45, "profileID");
  sub_100054D1C();
  sub_100054C2C();

  sub_100054D54(v10[21]);
  sub_1000399C8();
}

_QWORD *sub_10005138C(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  sub_1000916B8(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100036FA0(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000916B8(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000916B8((char *)(v7 > 1), v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

uint64_t sub_1000514D0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1004CF620, a1, a2, &unk_100503510);
  sub_100039950();
  if (v2 >= 0x12)
    return 18;
  else
    return v2;
}

uint64_t sub_100051520(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100051558 + 4 * byte_100408710[a1]))(0x776F6C666B726F77, 0xEA00000000004449);
}

uint64_t sub_100051558()
{
  return 0x4164657461657263;
}

uint64_t sub_100051578()
{
  return 0x656D737365737361;
}

uint64_t sub_100051598()
{
  return 0x676E696E69617274;
}

uint64_t sub_100051688()
{
  return 0x5468736572666572;
}

uint64_t sub_1000516A4()
{
  return 0x6574707972636E65;
}

uint64_t sub_1000516DC()
{
  return 0x4F646E6553657375;
}

void sub_1000516F4()
{
  JUMPOUT(0x100051708);
}

uint64_t sub_100051714()
{
  return 0x49656C69666F7270;
}

void sub_100051734(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_100039BB4(*a1, *a2);
}

void sub_100051740()
{
  unsigned __int8 *v0;

  sub_10005829C(*v0);
}

uint64_t sub_100051748(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_10005842C(a1, *v1);
}

void sub_100051750(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100058548(a1, *v1);
}

uint64_t sub_100051758@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000514D0(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_100051784(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_100051520(*v1);
  a1[1] = v3;
  sub_100028D0C();
}

uint64_t sub_1000517A8()
{
  unsigned __int8 *v0;

  return sub_100051730(*v0);
}

uint64_t sub_1000517B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005151C();
  *a1 = result;
  return result;
}

void sub_1000517D4(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1000517E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000529EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051808(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000529EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100051830(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  Class isa;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  int *v71;
  char v72;
  id v73;
  uint64_t v74;

  v6 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6);
  sub_100046E44();
  v9 = v8 - v7;
  v10 = sub_100032C48(&qword_1005044E8);
  sub_100046E54();
  __chkstk_darwin(v11);
  sub_100046E44();
  v14 = v13 - v12;
  v71 = (int *)type metadata accessor for AssessmentPayload(0);
  sub_10004EDE8();
  __chkstk_darwin(v15);
  sub_100046E44();
  v70 = (char *)(v17 - v16);
  v18 = a1[3];
  v19 = a1[4];
  v69 = a1;
  sub_100032EFC(a1, v18);
  v20 = sub_1000529EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AssessmentPayload.CodingKeys, &type metadata for AssessmentPayload.CodingKeys, v20, v18, v19);
  if (v2)
  {
    v21 = 0;
  }
  else
  {
    LOBYTE(v74) = 0;
    *(_QWORD *)v70 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v10);
    *((_QWORD *)v70 + 1) = v22;
    LOBYTE(v74) = 1;
    v23 = sub_100052A64(&qword_1005043E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, &v74, v10, v68, v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(&v70[v71[5]], v9, v68);
    LOBYTE(v74) = 2;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v10);
    sub_100054D8C(v24, v25, v71[6]);
    v26 = sub_100054CA8(3);
    sub_100054D8C(v26, v27, v71[7]);
    v28 = sub_100054CA8(4);
    sub_100054D8C(v28, v29, v71[8]);
    v30 = sub_100054CA8(5);
    sub_100054D8C(v30, v31, v71[9]);
    v32 = sub_100054CA8(6);
    sub_100054D8C(v32, v33, v71[10]);
    v34 = sub_100054CA8(7);
    sub_100054D8C(v34, v35, v71[11]);
    v36 = sub_100054CA8(8);
    sub_100054D8C(v36, v37, v71[12]);
    LOBYTE(v74) = 9;
    *(_DWORD *)&v70[v71[13]] = KeyedDecodingContainer.decode(_:forKey:)(&v74, v10);
    LOBYTE(v73) = 10;
    v38 = sub_100052AA4();
    sub_100054E84((uint64_t)&type metadata for Data, (uint64_t)&v73, v10, (uint64_t)&type metadata for Data, v38);
    v39 = (void *)objc_opt_self(NSJSONSerialization);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v73 = 0;
    v41 = objc_msgSend(v39, "JSONObjectWithData:options:error:", isa, 0, &v73);

    v42 = v73;
    if (v41)
    {
      _bridgeAnyObjectToAny(_:)(v41);
      swift_unknownObjectRelease(v41);
      *(_QWORD *)&v70[v71[14]] = sub_100052018((uint64_t)&v74);
      v43 = sub_100054E98();
      v72 = 11;
      v45 = sub_100054E68(&qword_100503E68, v44, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
      sub_100054E84(v43, (uint64_t)&v72, v10, v43, v45);
      *(_QWORD *)&v70[v71[15]] = v73;
      v48 = sub_100054D74(12);
      *(_DWORD *)&v70[v71[16]] = KeyedDecodingContainer.decode(_:forKey:)(v48, v49);
      v50 = sub_100054CEC(13);
      v51 = (uint64_t *)&v70[v71[17]];
      *v51 = v50;
      v51[1] = v52;
      v53 = sub_100054CEC(14);
      v54 = (uint64_t *)&v70[v71[18]];
      *v54 = v53;
      v54[1] = v55;
      v56 = sub_100054D74(15);
      v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v57);
      v70[v71[19]] = (v58 == 2) | v58 & 1;
      v59 = sub_100054D74(16);
      v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v59);
      v61 = (uint64_t *)&v70[v71[20]];
      *v61 = v60;
      v61[1] = v62;
      v63 = sub_100054CEC(17);
      v65 = v64;
      sub_100054CCC();
      sub_100054BBC();
      v66 = (uint64_t *)&v70[v71[21]];
      *v66 = v63;
      v66[1] = v65;
      sub_100052B3C((uint64_t)v70, a2);
      sub_100032F94(v69);
      sub_100052B80((uint64_t)v70);
      goto LABEL_22;
    }
    v46 = v42;
    _convertNSErrorToError(_:)(v42);

    swift_willThrow(v47);
    sub_100054CCC();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v10);
    v21 = 511;
  }
  sub_100032F94(v69);
  if ((v21 & 1) != 0)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v70 + 1));
    if (((v21 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v21 >> 2) & 1) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if ((v21 & 2) == 0)
  {
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v67 + 8))(&v70[v71[5]], v68);
  if (((v21 >> 2) & 1) != 0)
  {
LABEL_7:
    sub_100054C38(v71[6]);
    if (((v21 >> 3) & 1) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  if (((v21 >> 3) & 1) == 0)
  {
LABEL_8:
    if (((v21 >> 4) & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  sub_100054C38(v71[7]);
  if (((v21 >> 4) & 1) != 0)
  {
LABEL_9:
    sub_100054C38(v71[8]);
    if (((v21 >> 5) & 1) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  if (((v21 >> 5) & 1) == 0)
  {
LABEL_10:
    if (((v21 >> 6) & 1) != 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  sub_100054C38(v71[9]);
  if (((v21 >> 6) & 1) != 0)
  {
LABEL_11:
    sub_100054C38(v71[10]);
    if (((v21 >> 7) & 1) == 0)
      goto LABEL_12;
LABEL_21:
    sub_100054C38(v71[11]);
    if (((v21 >> 8) & 1) == 0)
      goto LABEL_22;
    goto LABEL_13;
  }
LABEL_20:
  if (((v21 >> 7) & 1) != 0)
    goto LABEL_21;
LABEL_12:
  if (((v21 >> 8) & 1) != 0)
LABEL_13:
    sub_100054C38(v71[12]);
LABEL_22:
  sub_100046BF8();
}

uint64_t sub_100052018(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _BOOL8 v25;
  Swift::Int v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[4];
  __int128 v43;
  __int128 v44;
  void *v45;
  _OWORD v46[2];
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;

  sub_100036FA0(a1, (uint64_t)&v49);
  v1 = sub_100032C48(&qword_100503C10);
  if (!swift_dynamicCast(&v47, &v49, (char *)&type metadata for Any + 8, v1, 6))
  {
    v36 = sub_100032C48(&qword_1005044C0);
    return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v36, &protocol witness table for String);
  }
  v2 = 0;
  v3 = &type metadata for String;
  v38 = v47 + 64;
  v40 = v47;
  v4 = 1 << *(_BYTE *)(v47 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v47 + 64);
  v39 = (unint64_t)(v4 + 63) >> 6;
  v7 = _swiftEmptyDictionarySingleton;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v2 << 6);
LABEL_7:
    v10 = *(_QWORD *)(v40 + 56);
    v11 = (_QWORD *)(*(_QWORD *)(v40 + 48) + 16 * v9);
    v12 = v11[1];
    *(_QWORD *)&v47 = *v11;
    *((_QWORD *)&v47 + 1) = v12;
    sub_100036FA0(v10 + 32 * v9, (uint64_t)v48);
    swift_bridgeObjectRetain(v12);
LABEL_26:
    sub_100053F70((uint64_t)&v47, (uint64_t)&v49);
    v16 = v50;
    if (!v50)
    {
      swift_release(v40);
      return (uint64_t)v7;
    }
    v17 = v49;
    sub_100053FB8(&v51, v46);
    sub_100036FA0((uint64_t)v46, (uint64_t)v42);
    v18 = sub_100039884(0, &qword_100503A68, NSNumber_ptr);
    if (swift_dynamicCast(&v41, v42, (char *)&type metadata for Any + 8, v18, 0))
    {
      v19 = v41;
      *((_QWORD *)&v44 + 1) = v18;
      v45 = (void *)sub_100054570();
      *(_QWORD *)&v43 = v19;
    }
    else if ((swift_dynamicCast(&v41, v42, (char *)&type metadata for Any + 8, v3, 0) & 1) != 0)
    {
      *((_QWORD *)&v44 + 1) = v3;
      v45 = &protocol witness table for String;
      v43 = v41;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
      v45 = 0;
    }
    sub_100032F94(v42);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = v3;
      sub_1000351FC(&v43, (uint64_t)&v47);
      sub_100032EB8((uint64_t)&v47, (uint64_t)&v43);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      v42[0] = v7;
      v22 = sub_100052C20(v17, v16);
      v24 = v7[2];
      v25 = (v23 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v27 = v22;
      v28 = v23;
      sub_100032C48((uint64_t *)&unk_100504C80);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
      {
        v29 = sub_100052C20(v17, v16);
        if ((v28 & 1) != (v30 & 1))
          goto LABEL_50;
        v27 = v29;
      }
      v7 = (_QWORD *)v42[0];
      if ((v28 & 1) != 0)
      {
        v31 = (_QWORD *)(*(_QWORD *)(v42[0] + 56) + 40 * v27);
        sub_100032F94(v31);
        sub_1000351FC(&v43, (uint64_t)v31);
      }
      else
      {
        *(_QWORD *)(v42[0] + 8 * (v27 >> 6) + 64) |= 1 << v27;
        v32 = (uint64_t *)(v7[6] + 16 * v27);
        *v32 = v17;
        v32[1] = v16;
        sub_1000351FC(&v43, v7[7] + 40 * v27);
        v33 = v7[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_48;
        v7[2] = v35;
        swift_bridgeObjectRetain(v16);
      }
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100032F94(&v47);
      sub_100032F94(v46);
      v3 = v20;
    }
    else
    {
      sub_100032F94(v46);
      swift_bridgeObjectRelease(v16);
      sub_100054964((uint64_t)&v43, &qword_100504500);
    }
  }
  v13 = v2 + 1;
  if (__OFADD__(v2, 1))
    goto LABEL_47;
  if (v13 >= v39)
  {
LABEL_25:
    v6 = 0;
    memset(v48, 0, sizeof(v48));
    v47 = 0u;
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(v38 + 8 * v13);
  if (v14)
  {
LABEL_11:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v2 = v13;
    goto LABEL_7;
  }
  v15 = v2 + 2;
  ++v2;
  if (v13 + 1 >= v39)
    goto LABEL_25;
  v14 = *(_QWORD *)(v38 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v2 = v13 + 1;
  if (v13 + 2 >= v39)
    goto LABEL_25;
  v14 = *(_QWORD *)(v38 + 8 * (v13 + 2));
  if (v14)
  {
    v13 += 2;
    goto LABEL_11;
  }
  v15 = v13 + 3;
  v2 = v13 + 2;
  if (v13 + 3 >= v39)
    goto LABEL_25;
  v14 = *(_QWORD *)(v38 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v13 = v15;
    goto LABEL_11;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v39)
    {
      v2 = v39 - 1;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v38 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_11;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000524D0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char v62;
  id v63;
  unint64_t v64;

  v4 = v1;
  v6 = sub_100032C48(&qword_1005044B8);
  sub_100046E54();
  __chkstk_darwin(v7);
  sub_100054E18();
  v8 = (void *)objc_opt_self(NSJSONSerialization);
  v60 = (int *)type metadata accessor for AssessmentPayload(0);
  sub_100032C48(&qword_1005044C0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v63 = 0;
  v10 = objc_msgSend(v8, "dataWithJSONObject:options:error:", isa, 0, &v63);

  v11 = v63;
  if (v10)
  {
    v61 = v3;
    v12 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    v16 = a1[3];
    v15 = a1[4];
    sub_100032EFC(a1, v16);
    v17 = sub_1000529EC();
    dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AssessmentPayload.CodingKeys, &type metadata for AssessmentPayload.CodingKeys, v17, v16, v15);
    v18 = *v4;
    v19 = v4[1];
    LOBYTE(v63) = 0;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v63, v6);
    if (v2)
    {
      sub_100046E8C(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
      v20 = (uint64_t)v12;
    }
    else
    {
      v59 = (uint64_t)v12;
      v23 = (uint64_t)v4 + v60[5];
      LOBYTE(v63) = 1;
      type metadata accessor for Date(0);
      v24 = sub_100052A64(&qword_100504310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      sub_100054D40(v23, (uint64_t)&v63, v25, v26, v24);
      v27 = sub_100054D34(v60[6]);
      sub_100054BA4(v27, v28, 2);
      v29 = sub_100054D34(v60[7]);
      sub_100054BA4(v29, v30, 3);
      v31 = sub_100054D34(v60[8]);
      sub_100054BA4(v31, v32, 4);
      v33 = sub_100054D34(v60[9]);
      sub_100054BA4(v33, v34, 5);
      v35 = sub_100054D34(v60[10]);
      sub_100054BA4(v35, v36, 6);
      v37 = sub_100054D34(v60[11]);
      sub_100054BA4(v37, v38, 7);
      v39 = sub_100054D34(v60[12]);
      sub_100054BA4(v39, v40, 8);
      sub_100054DAC(*(unsigned int *)((char *)v4 + v60[13]), 9);
      v63 = v12;
      v64 = v14;
      v62 = 10;
      v41 = sub_100052A28();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v63, &v62, v6, &type metadata for Data, v41);
      v63 = *(id *)((char *)v4 + v60[15]);
      v62 = 11;
      sub_100054E48();
      sub_100054E98();
      v43 = sub_100054E68(&qword_100503E80, v42, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
      sub_100054D40((uint64_t)&v63, (uint64_t)&v62, v44, v45, v43);
      sub_100054E90();
      sub_100054DAC(*(unsigned int *)((char *)v4 + v60[16]), 12);
      v46 = sub_100054D34(v60[17]);
      sub_100054BA4(v46, v47, 13);
      v48 = sub_100054D34(v60[18]);
      sub_100054BA4(v48, v49, 14);
      v50 = *((unsigned __int8 *)v4 + v60[19]);
      LOBYTE(v63) = 15;
      KeyedEncodingContainer.encode(_:forKey:)(v50, &v63, v6);
      v51 = (char *)v4 + v60[20];
      v52 = *((_QWORD *)v51 + 1);
      v63 = *(id *)v51;
      v64 = v52;
      v62 = 16;
      sub_100054E48();
      sub_100054E98();
      v54 = sub_100054E68(&qword_1005044E0, v53, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
      sub_100054D40((uint64_t)&v63, (uint64_t)&v62, v55, v56, v54);
      sub_100054E90();
      v57 = sub_100054D34(v60[21]);
      sub_100054BA4(v57, v58, 17);
      sub_100046E8C(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
      v20 = v59;
    }
    sub_100033030(v20, v14);
  }
  else
  {
    v21 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v22);
  }
  sub_100046BF8();
}

void sub_1000529C4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100051830(a1, a2);
}

void sub_1000529D8(_QWORD *a1)
{
  sub_1000524D0(a1);
}

unint64_t sub_1000529EC()
{
  unint64_t result;

  result = qword_1005044C8;
  if (!qword_1005044C8)
  {
    result = swift_getWitnessTable(&unk_1004088DC, &type metadata for AssessmentPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005044C8);
  }
  return result;
}

unint64_t sub_100052A28()
{
  unint64_t result;

  result = qword_1005044D0;
  if (!qword_1005044D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1005044D0);
  }
  return result;
}

uint64_t sub_100052A64(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100052AA4()
{
  unint64_t result;

  result = qword_1005044F0;
  if (!qword_1005044F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1005044F0);
  }
  return result;
}

uint64_t sub_100052AE0(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100035350(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100052B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssessmentPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100052B80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssessmentPayload(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100052BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100052D68(a1, v4);
}

unint64_t sub_100052BEC(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 2);
  return sub_100052E2C(a1, v3);
}

unint64_t sub_100052C20(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _BYTE v6[72];

  sub_100054EB4(a1);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_100052ECC(a1, a2, v4);
}

unint64_t sub_100052C7C(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  Swift::Int v6;
  _BYTE v8[72];

  sub_100054EB4(a1);
  sub_100054E70();
  String.hash(into:)(v8, a1, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(a3);
  v6 = Hasher._finalize()();
  return sub_100052FAC(a1, a2, a3, v6);
}

unint64_t sub_100052D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = sub_100054E50();
  v6 = sub_100052A64((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100053084(a1, v7);
}

unint64_t sub_100052D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000547D8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100054814((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100052E2C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100052ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100052FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (_QWORD *)(v12 + 24 * v7);
      v14 = v13[1];
      v15 = v13[2];
      v16 = *v13 == a1 && v14 == a2;
      if ((v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a1, a2, 0) & 1) != 0) && v15 == a3)
        break;
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_100053084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100052A64(&qword_100504540, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

double sub_1000531C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100052C20(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v16 = *v4;
    v12 = *v4;
    *v4 = 0x8000000000000000;
    v13 = *(_QWORD *)(v12 + 24);
    sub_100032C48(&qword_100504528);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v9 + 8));
    sub_100053FB8((_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v9), a3);
    _NativeDictionary._delete(at:)(v9, v16, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v14 = *v4;
    *v4 = v16;
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1000532E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v10 = *v5;
  swift_bridgeObjectRetain(*v5);
  v11 = sub_100052C7C(a1, a2, a3);
  LOBYTE(a3) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a3 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v22 = *v5;
    v14 = *v5;
    *v5 = 0x8000000000000000;
    v15 = *(_QWORD *)(v14 + 24);
    sub_100032C48(&qword_1005042E8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v22 + 48) + 24 * v11 + 8));
    v16 = *(_QWORD *)(v22 + 56);
    v17 = sub_10004F358();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v11, v17);
    v18 = sub_10003561C();
    _NativeDictionary._delete(at:)(v11, v22, &unk_1004CFE48, v17, v18);
    v19 = *v5;
    *v5 = v22;
    swift_bridgeObjectRelease(v19);
    return sub_100037020(a4, 0, 1, v17);
  }
  else
  {
    v21 = sub_10004F358();
    return sub_100037020(a4, 1, 1, v21);
  }
}

double sub_100053434@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100052C20(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v17 = *v4;
    v12 = *v4;
    *v4 = 0x8000000000000000;
    v13 = *(_QWORD *)(v12 + 24);
    sub_100032C48((uint64_t *)&unk_100504C80);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v9 + 8));
    sub_1000351FC((__int128 *)(*(_QWORD *)(v17 + 56) + 40 * v9), a3);
    v14 = sub_100032C48(&qword_1005044C0);
    _NativeDictionary._delete(at:)(v9, v17, &type metadata for String, v14, &protocol witness table for String);
    v15 = *v4;
    *v4 = v17;
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100053564(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v3;
  sub_100054E70();
  sub_100052C20(a1, a2);
  sub_100054E38();
  if ((v6 & 1) == 0)
    return 0;
  swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_100054DD4();
  v7 = sub_100032C48(&qword_100504510);
  sub_100054E04(v7, v8, v9, v10, v11, v12, v13, v14, v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * a1 + 8));
  v15 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * a1);
  v16 = sub_100039884(0, &qword_100504518, NSObject_ptr);
  _NativeDictionary._delete(at:)(a1, v20, &type metadata for String, v16, &protocol witness table for String);
  sub_100054E78();
  return v15;
}

uint64_t sub_100053640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100052D00(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v20 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_100032C48(&qword_100504538);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    v12 = *(_QWORD *)(v20 + 48);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v7, v13);
    v14 = *(_QWORD *)(v20 + 56);
    v15 = type metadata accessor for ServerJSONFetchRetryState(0);
    sub_100054608(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v7, a2);
    v16 = sub_100052A64((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    _NativeDictionary._delete(at:)(v7, v20, v13, v15, v16);
    v17 = *v3;
    *v3 = v20;
    swift_bridgeObjectRelease(v17);
    return sub_100037020(a2, 0, 1, v15);
  }
  else
  {
    v19 = type metadata accessor for ServerJSONFetchRetryState(0);
    return sub_100037020(a2, 1, 1, v19);
  }
}

uint64_t sub_1000537B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v3 = v1;
  v5 = *v3;
  sub_100054E70();
  sub_100052D00(a1);
  sub_100054E38();
  if ((v5 & 1) == 0)
    return 0;
  swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_100054DD4();
  v6 = sub_100032C48(&qword_100504548);
  sub_100054E04(v6, v7, v8, v9, v10, v11, v12, v13, v20, v21);
  v14 = *(_QWORD *)(v22 + 48);
  v15 = sub_100054E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v2, v15);
  v16 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v2);
  v17 = sub_100032C48(&qword_100503528);
  v18 = sub_100052A64((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  _NativeDictionary._delete(at:)(v2, v22, v15, v17, v18);
  sub_100054E78();
  return v16;
}

double sub_1000538B0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain();
  v7 = sub_100052BBC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_100032C48(&qword_100504558);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    sub_100054814(*(_QWORD *)(v14 + 48) + 40 * v7);
    sub_100053FB8((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v7), a2);
    _NativeDictionary._delete(at:)(v7, v14, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v12 = *v3;
    *v3 = v14;
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1000539CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100054D04();
  v0 = sub_100054C80();
  v3 = sub_100053C1C(v0, v1, v2);
  v11 = sub_100054DC4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100054CB8(v11);
}

uint64_t sub_1000539FC(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v12 = *v4;
  *v4 = 0x8000000000000000;
  sub_100053CE0(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  v10 = *v4;
  *v4 = v12;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100053A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100054D04();
  v0 = sub_100054C80();
  sub_100053E24(v0, v1, v2);
  v11 = sub_100054DC4(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100054CB8(v11);
}

uint64_t sub_100053AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100054D04();
  v0 = sub_100054C80();
  v3 = sub_100053EBC(v0, v1, v2);
  v11 = sub_100054DC4(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100054CB8(v11);
}

uint64_t sub_100053AE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_100054060(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100053B4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v17 = *v2;
  *v2 = 0x8000000000000000;
  v6 = sub_1000541CC(a1, a2, isUniquelyReferenced_nonNull_native);
  v14 = sub_100054DC4(v6, v7, v8, v9, v10, v11, v12, v13, v16, v17);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100053BB0(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_100054310(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

_OWORD *sub_100053C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *result;

  sub_100054BE0(a1, a2, a3);
  sub_100054D60();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  sub_100032C48(&qword_100504528);
  if (!sub_100054CD8())
    goto LABEL_5;
  v12 = sub_100054D24();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v10 = v12;
LABEL_5:
  v14 = *v6;
  if ((v11 & 1) != 0)
  {
    v15 = (_QWORD *)(*(_QWORD *)(v14 + 56) + 32 * v10);
    sub_100032F94(v15);
    return sub_100053FB8(v3, v15);
  }
  else
  {
    sub_100054434(v10, v5, v4, (uint64_t)v3, v14);
    return (_OWORD *)sub_100054C04(v4);
  }
}

uint64_t sub_100053CE0(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_100052C7C(a2, a3, a4);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100032C48(&qword_1005042E8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17))
    goto LABEL_5;
  v20 = sub_100052C7C(a2, a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_1004CFE48);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v6;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18, a1, v24);
  }
  else
  {
    sub_100054470(v18, a2, a3, a4, a1, v22);
    return swift_bridgeObjectRetain(a3);
  }
}

void sub_100053E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100054BE0(a1, a2, a3);
  sub_100054D60();
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v9 = v6;
  v10 = v7;
  sub_100032C48(&qword_100504C90);
  if (sub_100054CD8())
  {
    sub_100054D24();
    sub_100054E58();
    if (!v12)
      goto LABEL_10;
    v9 = v11;
  }
  if ((v10 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v5 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8 * v9));
    *(_QWORD *)(v13 + 8 * v9) = v3;
    sub_100054DF0();
  }
  else
  {
    v14 = sub_100054D98();
    sub_100054508(v14, v15, v16, v17, v18);
    sub_100054C04(v4);
  }
}

uint64_t sub_100053EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_100054BE0(a1, a2, a3);
  sub_100054D60();
  if (v8)
  {
    __break(1u);
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v9 = v6;
  v10 = v7;
  sub_100032C48((uint64_t *)&unk_100504C80);
  if (sub_100054CD8())
  {
    sub_100054D24();
    sub_100054E58();
    if (!v12)
      goto LABEL_10;
    v9 = v11;
  }
  if ((v10 & 1) != 0)
  {
    v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 56) + 40 * v9);
    sub_100032F94(v13);
    return sub_1000351FC(v3, (uint64_t)v13);
  }
  else
  {
    v15 = sub_100054D98();
    sub_100054530(v15, v16, v17, v18, v19);
    return sub_100054C04(v4);
  }
}

uint64_t sub_100053F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_1005044F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100053FB8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100053FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  sub_100054BE0(a1, a2, a3);
  sub_100054D60();
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v9 = v6;
  v10 = v7;
  sub_100032C48(&qword_100504510);
  if (sub_100054CD8())
  {
    sub_100054D24();
    sub_100054E58();
    if (!v12)
      goto LABEL_10;
    v9 = v11;
  }
  if ((v10 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v5 + 56);

    *(_QWORD *)(v13 + 8 * v9) = v3;
    sub_100054DF0();
  }
  else
  {
    v14 = sub_100054D98();
    sub_1000545C0(v14, v15, v16, v17, v18);
    sub_100054C04(v4);
  }
}

uint64_t sub_100054060(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_100052D00(a2);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100032C48(&qword_100504538);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_100052D00(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = type metadata accessor for ServerJSONFetchRetryState(0);
    return sub_1000546FC(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10005464C(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t sub_1000541CC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_100052D00(a2);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13;
  v19 = v14;
  sub_100032C48(&qword_100504548);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_100052D00(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    result = swift_release(*(_QWORD *)(v23 + 8 * v18));
    *(_QWORD *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100054740(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

_OWORD *sub_100054310(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100052BBC(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100032C48(&qword_100504558);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100052BBC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (_QWORD *)(v18[7] + 32 * v14);
    sub_100032F94(v19);
    return sub_100053FB8(a1, v19);
  }
  else
  {
    sub_1000547D8(a2, (uint64_t)v21);
    return sub_100054848(v14, (uint64_t)v21, a1, v18);
  }
}

void sub_100054434(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = sub_100054C44(a1, a2, a3, a4, a5);
  sub_100053FB8(v8, (_OWORD *)(v7 + 32 * v6));
  v9 = *(_QWORD *)(a5 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a5 + 16) = v11;
    sub_100028D0C();
  }
}

uint64_t sub_100054470(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a6[6] + 24 * a1);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v10 = a6[7];
  v11 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5, v11);
  v13 = a6[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a6[2] = v15;
  return result;
}

unint64_t sub_100054508(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  result = sub_100054C44(a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * result) = v7;
  v9 = *(_QWORD *)(v6 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v11;
  return result;
}

void sub_100054530(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = sub_100054C44(a1, a2, a3, a4, a5);
  sub_1000351FC(v8, v7 + 40 * v6);
  v9 = *(_QWORD *)(a5 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a5 + 16) = v11;
    sub_100028D0C();
  }
}

unint64_t sub_100054570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504508;
  if (!qword_100504508)
  {
    v1 = sub_100039884(255, &qword_100503A68, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100504508);
  }
  return result;
}

unint64_t sub_1000545C0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100054608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServerJSONFetchRetryState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005464C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for ServerJSONFetchRetryState(0);
  result = sub_100054608(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1000546FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServerJSONFetchRetryState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100054740(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1000547D8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100054814(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

_OWORD *sub_100054848(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100053FB8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_1000548C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1000548FC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "otdDestinationHost");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10005495C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100054964(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100032C48(a2);
  sub_10004F104(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssessmentPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEF)
  {
    if (a2 + 17 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 17) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 18;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v5 = v6 - 18;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AssessmentPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_100054A64 + 4 * byte_100408727[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_100054A98 + 4 * byte_100408722[v4]))();
}

uint64_t sub_100054A98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100054AA8);
  return result;
}

uint64_t sub_100054AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100054ABCLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_100054AC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054AC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssessmentPayload.CodingKeys()
{
  return &type metadata for AssessmentPayload.CodingKeys;
}

unint64_t sub_100054AE8()
{
  unint64_t result;

  result = qword_100504568;
  if (!qword_100504568)
  {
    result = swift_getWitnessTable(&unk_1004088B4, &type metadata for AssessmentPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100504568);
  }
  return result;
}

unint64_t sub_100054B28()
{
  unint64_t result;

  result = qword_100504570;
  if (!qword_100504570)
  {
    result = swift_getWitnessTable(&unk_1004087EC, &type metadata for AssessmentPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100504570);
  }
  return result;
}

unint64_t sub_100054B68()
{
  unint64_t result;

  result = qword_100504578;
  if (!qword_100504578)
  {
    result = swift_getWitnessTable(&unk_100408814, &type metadata for AssessmentPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100504578);
  }
  return result;
}

uint64_t sub_100054BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 104) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 104, v3);
}

uint64_t sub_100054BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100032F94((_QWORD *)(v2 - 120));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v0);
}

unint64_t sub_100054BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052C20(a2, a3);
}

uint64_t sub_100054C04(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100054C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 160) = v1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
}

void sub_100054C2C()
{
  void *v0;

}

uint64_t sub_100054C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

unint64_t sub_100054C44(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100054C74@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100054C80()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100054CA8@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 120) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 120, v1);
}

uint64_t sub_100054CB8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100054CCC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100033030(v1, v0);
}

BOOL sub_100054CD8()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100054CEC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 128) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 128, v1);
}

uint64_t sub_100054D04()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100054D1C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_100054D24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100052C20(v1, v0);
}

uint64_t sub_100054D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_100054D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, v6, a5);
}

void sub_100054D54(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v1 + a1);
  *v4 = v2;
  v4[1] = v3;
}

uint64_t sub_100054D74@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_100054D8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_100054D98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100054DAC@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 104) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 104, v2);
}

uint64_t sub_100054DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

void sub_100054DD4()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

BOOL sub_100054E04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100054E30(uint64_t a1)
{
  uint64_t *v1;

  return sub_100054964(a1, v1);
}

uint64_t sub_100054E38()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100054E48()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100054E50()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_100054E68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_100052AE0(a1, v4, a3, a4);
}

uint64_t sub_100054E70()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100054E78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100054E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100054E90()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100054E98()
{
  uint64_t *v0;

  return sub_100032C48(v0);
}

uint64_t sub_100054EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

_QWORD *sub_100054EB4(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

uint64_t sub_100054EC0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100054ECC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v3 = a3;
  v4 = result;
  v28 = *(_QWORD *)(result + 16);
  if (!v28)
  {
    v24 = _swiftEmptyArrayStorage;
LABEL_39:
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v4);
    return (uint64_t)v24;
  }
  v6 = 0;
  v27 = result + 32;
  v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v4 + 16))
    {
      __break(1u);
      goto LABEL_41;
    }
    v7 = v27 + (v6 << 6);
    v31 = *(_OWORD *)(v7 + 24);
    v8 = *(_QWORD **)(v7 + 48);
    v29 = *(_QWORD *)(v7 + 40);
    v30 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned __int8 *)(v7 + 56);
    v10 = v8[2];
    v25 = *(_QWORD *)(v7 + 16);
    v26 = *(_QWORD *)v7;
    if (v10)
      break;
    v13 = 0;
LABEL_28:
    ++v6;
    if (v9 != 2)
      v13 ^= v9;
    if ((v13 & 1) != 0)
    {
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      v20 = v24;
      result = swift_isUniquelyReferenced_nonNull_native(v24);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_100091780(0, v24[2] + 1, 1);
        v20 = v24;
      }
      v3 = a3;
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)sub_100091780((char *)(v21 > 1), v22 + 1, 1);
        v3 = a3;
        v20 = v24;
      }
      v20[2] = v22 + 1;
      v24 = v20;
      v23 = &v20[8 * v22];
      v23[4] = v26;
      v23[5] = v30;
      v23[6] = v25;
      *(_OWORD *)(v23 + 7) = v31;
      v23[9] = v29;
      v23[10] = v8;
      *((_BYTE *)v23 + 88) = v9;
    }
    if (v6 == v28)
      goto LABEL_39;
  }
  result = v8[4];
  v11 = v8[5];
  v12 = result == a2 && v11 == v3;
  if (v12)
  {
    v13 = 1;
    goto LABEL_28;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, a2, v3, 0);
  if ((result & 1) != 0)
  {
    v13 = 1;
LABEL_27:
    v3 = a3;
    goto LABEL_28;
  }
  if (v10 == 1)
  {
    v13 = 0;
    goto LABEL_27;
  }
  v14 = v8 + 7;
  v15 = 1;
  v3 = a3;
  while (1)
  {
    v16 = v4;
    v17 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    result = *(v14 - 1);
    v18 = *v14;
    if (result == a2 && v18 == v3)
    {
      v13 = 1;
      v4 = v16;
      goto LABEL_28;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, a2, v3, 0);
    if ((result & 1) != 0)
    {
      v13 = 1;
      v4 = v16;
      goto LABEL_27;
    }
    v13 = 0;
    v14 += 2;
    ++v15;
    v12 = v17 == v10;
    v4 = v16;
    v3 = a3;
    if (v12)
      goto LABEL_28;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100055154()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return sub_1000560DC((uint64_t)sub_100055164);
}

uint64_t sub_100055164()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[5];
  v3 = v1[6];
  sub_100032EFC(v1 + 2, v2);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ODIAccountManagerProtocol.primaryAppleAccount()[1]);
  *(_QWORD *)(v0 + 64) = v4;
  sub_10004EDB0(v4, (uint64_t)sub_1000551D0);
  return dispatch thunk of ODIAccountManagerProtocol.primaryAppleAccount()(v2, v3);
}

uint64_t sub_1000551D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v1;
  swift_task_dealloc(v4);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100055230()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  _WORD *v9;
  uint64_t v10;
  os_log_type_t v11;
  os_log_type_t v12;
  _WORD *v13;
  _WORD *v14;
  os_log_type_t v15;

  v1 = *(void **)(v0 + 72);
  v2 = *(NSObject **)(v0 + 56);
  if (!v1)
  {
    sub_100056128();
    v12 = sub_100056100();
    if (sub_10004EFCC(v12))
    {
      v13 = (_WORD *)sub_100047004();
      *v13 = 0;
      sub_1000560D0((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "user is not logged into iTunes");
      sub_100033080((uint64_t)v13);
    }
    goto LABEL_11;
  }
  sub_100055E30(*(void **)(v0 + 72), (SEL *)&selRef_aa_personID);
  v4 = v3;
  v6 = v5;
  sub_100056128();
  v7 = sub_100056100();
  v8 = sub_100056118(v7);
  if (!v6)
  {
    if (v8)
    {
      v14 = (_WORD *)sub_100047004();
      sub_100056140(v14);
      sub_1000560D0((void *)&_mh_execute_header, v2, v15, "unable to get person ID");
      sub_100033080((uint64_t)v14);
    }

LABEL_11:
    v4 = 0;
    v6 = 0;
    goto LABEL_12;
  }
  if (v8)
  {
    v9 = (_WORD *)sub_100047004();
    sub_100056140(v9);
    sub_100056108((void *)&_mh_execute_header, v10, v11, "returning iCloud dsid");
    sub_100033080((uint64_t)v9);
  }

LABEL_12:
  return sub_1000560BC(v4, v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005535C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 80);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v11 = v7;
    swift_getErrorValue(v5, v0 + 40, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100036778(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    sub_1000356D4();
    sub_100056130();
    sub_100056130();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error getting DSID %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    sub_100033080(v7);
    sub_100033080((uint64_t)v6);
    sub_100056130();

  }
  else
  {
    sub_10005614C();

    sub_10005614C();
    sub_10005614C();
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_1000554F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_1000560DC((uint64_t)sub_100055508);
}

uint64_t sub_100055508()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[5];
  v3 = v1[6];
  sub_100032EFC(v1 + 2, v2);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifieriTunesStore);
  v6 = v5;
  v0[3] = v5;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)[1]);
  v0[4] = v7;
  sub_10004EDB0(v7, (uint64_t)sub_1000555A0);
  return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v4, v6, v2, v3);
}

uint64_t sub_1000555A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  sub_1000356D4();
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_1000555F4()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  _WORD *v9;
  uint64_t v10;
  os_log_type_t v11;
  os_log_type_t v12;
  _WORD *v13;
  _WORD *v14;
  os_log_type_t v15;

  v1 = *(void **)(v0 + 40);
  v2 = *(NSObject **)(v0 + 16);
  if (!v1)
  {
    sub_100056128();
    v12 = sub_100056100();
    if (sub_10004EFCC(v12))
    {
      v13 = (_WORD *)sub_100047004();
      *v13 = 0;
      sub_1000560D0((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "user is not logged into iTunes");
      sub_100033080((uint64_t)v13);
    }
    goto LABEL_11;
  }
  sub_100055E30(*(void **)(v0 + 40), (SEL *)&selRef_normalizedDSID);
  v4 = v3;
  v6 = v5;
  sub_100056128();
  v7 = sub_100056100();
  v8 = sub_100056118(v7);
  if (!v6)
  {
    if (v8)
    {
      v14 = (_WORD *)sub_100047004();
      sub_100056140(v14);
      sub_1000560D0((void *)&_mh_execute_header, v2, v15, "unable to get person ID");
      sub_100033080((uint64_t)v14);
    }

LABEL_11:
    v4 = 0;
    v6 = 0;
    goto LABEL_12;
  }
  if (v8)
  {
    v9 = (_WORD *)sub_100047004();
    sub_100056140(v9);
    sub_100056108((void *)&_mh_execute_header, v10, v11, "returning iTunes dsid");
    sub_100033080((uint64_t)v9);
  }

LABEL_12:
  return sub_1000560BC(v4, v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100055720()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005045BC);
  *(_QWORD *)(v0 + 16) = v1;
  sub_10004EDB0(v1, (uint64_t)sub_100055760);
  return sub_100055154();
}

uint64_t sub_100055760(uint64_t a1, uint64_t a2)
{
  sub_10005609C(a1, a2);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10005578C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
    sub_1000356D4();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0);
}

uint64_t sub_1000557C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005045C4);
  *(_QWORD *)(v0 + 16) = v1;
  sub_10004EDB0(v1, (uint64_t)sub_100055808);
  return sub_1000554F8();
}

uint64_t sub_100055808(uint64_t a1, uint64_t a2)
{
  sub_10005609C(a1, a2);
  sub_100040A54();
  return sub_100040920();
}

void sub_100055834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000560E8();
  v3 = sub_100032C48(&qword_100504038);
  __chkstk_darwin(v3);
  sub_100046E44();
  v6 = v5 - v4;
  v7 = static Locale.current.getter();
  Locale.region.getter(v7);
  sub_100056138(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v8 = type metadata accessor for Locale.Region(0);
  v9 = sub_1000352C8(v6, 1, v8);
  if ((_DWORD)v9 == 1)
  {
    sub_100055DF0(v6);
  }
  else
  {
    Locale.Region.identifier.getter(v9);
    sub_100056138(v6, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8));
  }
  sub_1000399A0();
}

_QWORD *sub_100055924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000560E8();
  v3 = sub_100032C48(&qword_100504038);
  __chkstk_darwin(v3);
  sub_100046E44();
  v6 = v5 - v4;
  v7 = type metadata accessor for Locale.Region(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100046E44();
  v11 = v10 - v9;
  v12 = static Locale.current.getter();
  Locale.region.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  if (sub_1000352C8(v6, 1, v7) == 1)
  {
    sub_100055DF0(v6);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v6, v7);
    v13 = sub_100055A64(v11);
    sub_100056138(v11, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  }
  return v13;
}

_QWORD *sub_100055A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[12];
  _QWORD __src[12];
  _BYTE __dst[96];
  uint64_t v21;
  uint64_t v22;

  v2 = Locale.Region.identifier.getter(a1);
  v4 = v3;
  sub_100032EFC((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
  sub_100084C20(v18);
  sub_1000396E0((uint64_t)v18, (uint64_t)__src, &qword_100503A78);
  if (__src[5] != 1
    && (memcpy(__dst, __src, sizeof(__dst)),
        sub_1000396E0((uint64_t)&__dst[88], (uint64_t)&v21, &qword_1005046B0),
        sub_100039724(&v21),
        sub_10003974C(v18),
        sub_1000396E0((uint64_t)&v21, (uint64_t)&v22, &qword_1005046B0),
        v22)
    && (v4 = sub_100054ECC(v22, v2, v4), (v5 = *(_QWORD *)(v4 + 16)) != 0))
  {
    sub_100091764(0, v5, 0);
    v15 = v4;
    v6 = (uint64_t *)(v4 + 72);
    do
    {
      v8 = *(v6 - 5);
      v7 = *(v6 - 4);
      v9 = *(v6 - 2);
      v10 = *v6;
      v16 = *(v6 - 1);
      v17 = *(v6 - 3);
      v11 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      if (v11 >= v12 >> 1)
        sub_100091764((char *)(v12 > 1), v11 + 1, 1);
      v6 += 8;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v13 = &_swiftEmptyArrayStorage[6 * v11];
      v13[4] = v8;
      v13[5] = v7;
      v13[6] = v17;
      v13[7] = v9;
      v13[8] = v16;
      v13[9] = v10;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }
  return _swiftEmptyArrayStorage;
}

BOOL sub_100055C38()
{
  void *v0;
  id v1;
  id v2;
  float v3;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  sub_100033F74(v1);

  v2 = objc_msgSend(v0, "standardUserDefaults");
  v3 = sub_1000600CC((uint64_t)v2);

  return v3 < 10.0;
}

uint64_t sub_100055CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100032F94((_QWORD *)(v0 + 16));
  sub_100032F94((_QWORD *)(v0 + 56));
  v1 = v0 + OBJC_IVAR____TtC3asd21DeviceContextProvider_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100055D14()
{
  uint64_t v0;

  sub_100055CC0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100055D38()
{
  return type metadata accessor for DeviceContextProvider(0);
}

uint64_t type metadata accessor for DeviceContextProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1005045A8;
  if (!qword_1005045A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceContextProvider);
  return result;
}

uint64_t sub_100055D78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100055DF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_100504038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100055E30(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_1000399A0();
}

uint64_t destroy for DeviceContextProvider.ServiceArea(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for DeviceContextProvider.ServiceArea(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for DeviceContextProvider.ServiceArea(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DeviceContextProvider.ServiceArea(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for DeviceContextProvider.ServiceArea(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceContextProvider.ServiceArea(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceContextProvider.ServiceArea(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceContextProvider.ServiceArea()
{
  return &type metadata for DeviceContextProvider.ServiceArea;
}

uint64_t sub_10005609C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *v2;
  v5 = (uint64_t *)(v3 - 8);
  *v5 = *v2;
  v6 = *(_QWORD *)(v4 + 16);
  *v5 = *v2;
  *(_QWORD *)(v4 + 24) = a2;
  return swift_task_dealloc(v6);
}

uint64_t sub_1000560BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1000560D0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_1000560DC(uint64_t a1)
{
  return swift_task_switch(a1, 0, 0);
}

uint64_t sub_100056100()
{
  return static os_log_type_t.debug.getter();
}

void sub_100056108(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 2u);
}

BOOL sub_100056118(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100056128()
{
  return Logger.logObject.getter();
}

uint64_t sub_100056130()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100056138@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

_WORD *sub_100056140(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10005614C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100056154()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_1005046B8);
  sub_1000352B0(v0, (uint64_t)qword_1005046B8);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x4D656E6F7A6C6143, 0xEE00726F74696E6FLL);
}

uint64_t sub_1000561DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for DistributedNotificationsAsyncSequence(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DistributedNotificationsAsyncSequence.init()(v2);
  v5 = sub_1000567CC();
  swift_retain(v0);
  return AsyncCompactMapSequence.init(_:transform:)(v4, &unk_100504788, v0, v1, (char *)&type metadata for () + 8, v5);
}

uint64_t sub_100056288(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = *a2;
  return swift_task_switch(sub_1000562A8, a3, 0);
}

uint64_t sub_1000562A8()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 40) = sub_100056308(*(void **)(v0 + 32));
  return swift_task_switch(sub_1000562EC, 0, 0);
}

uint64_t sub_1000562EC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = (*(_BYTE *)(v0 + 40) & 1) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_100056308(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  _BOOL8 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BOOL4 v27;
  _BYTE v28[48];

  v2 = sub_100032C48(&qword_100503BA0);
  inited = swift_initStackObject(v2, v28);
  *(_OWORD *)(inited + 16) = xmmword_1004077E0;
  *(_QWORD *)(inited + 32) = 0xD000000000000023;
  *(_QWORD *)(inited + 40) = 0x80000001003E44B0;
  if (xpc_dictionary_get_string(a1, "XPCEventName"))
  {
    v4 = String.init(cString:)();
    v6 = v5;
    v7 = sub_10006F2A8(v4, v5, (_QWORD *)inited);
    swift_bridgeObjectRelease(v6);
    swift_setDeallocating(inited);
    sub_1000566D8();
    if ((v7 & 1) != 0)
    {
      v8 = xpc_dictionary_get_dictionary(a1, "UserInfo");
      if (v8)
      {
        v9 = v8;
        if (xpc_dictionary_get_string(v8, "PKPassLibraryUniqueIDUserInfo"))
        {
          v10 = String.init(cString:)();
          v12 = v11;
          v13 = objc_msgSend(objc_allocWithZone((Class)PKPassLibrary), "init");
          v14 = sub_100056708(v10, v12, v13);
          if (v14)
          {
            v15 = v14;
            v16 = objc_msgSend(v14, "passType");

            v17 = v16 == (id)1;
          }
          else
          {
            v17 = 0;
          }
          if (qword_100503468 != -1)
            swift_once(&qword_100503468, sub_100056154);
          v23 = sub_1000357DC();
          v24 = sub_10005680C(v23, (uint64_t)qword_1005046B8);
          v25 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v24, v25))
          {
            v26 = (uint8_t *)sub_10003308C(8);
            *(_DWORD *)v26 = 67109120;
            v27 = v17;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v26 + 4, v26 + 8);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Tomato in notification is Fruit: %{BOOL}d", v26, 8u);
            sub_100033080((uint64_t)v26);
          }

          swift_unknownObjectRelease(v9);
          return v17;
        }
        swift_unknownObjectRelease(v9);
      }
    }
  }
  else
  {
    swift_setDeallocating(inited);
    sub_1000566D8();
  }
  if (qword_100503468 != -1)
    swift_once(&qword_100503468, sub_100056154);
  v18 = sub_1000357DC();
  v19 = sub_10005680C(v18, (uint64_t)qword_1005046B8);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Notification not recognised as calzone event", v21, 2u);
    sub_100033080((uint64_t)v21);
  }

  return 0;
}

uint64_t sub_1000565D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  swift_defaultActor_initialize(v0);
  if (qword_100503468 != -1)
    swift_once(&qword_100503468, sub_100056154);
  v2 = sub_1000357DC();
  v3 = sub_10005680C(v2, (uint64_t)qword_1005046B8);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CalzoneMonitor.init", v5, 2u);
    sub_100033080((uint64_t)v5);
  }

  return v1;
}

uint64_t sub_10005669C()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WalletMonitor()
{
  return objc_opt_self(_TtC3asd13WalletMonitor);
}

uint64_t sub_1000566D8()
{
  uint64_t v0;

  swift_arrayDestroy(v0 + 32, *(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

id sub_100056708(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;
  id v6;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(a3, "passWithUniqueID:", v5);

  return v6;
}

uint64_t sub_100056768(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100504784);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100037118;
  return sub_100056288(a1, a2, v2);
}

unint64_t sub_1000567CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504790;
  if (!qword_100504790)
  {
    v1 = type metadata accessor for DistributedNotificationsAsyncSequence(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DistributedNotificationsAsyncSequence, v1);
    atomic_store(result, (unint64_t *)&qword_100504790);
  }
  return result;
}

uint64_t sub_10005680C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1000352B0(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100056820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v35 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v32 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for XPCStreamListener(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v31 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100503478 != -1)
    swift_once(&qword_100503478, sub_100056BC4);
  v17 = sub_1000352B0(v13, (uint64_t)qword_100504798);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v18(v16, v17, v13);
  v19 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  v20 = type metadata accessor for ContactsManager(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = sub_10007CA04(v19, (uint64_t)v16);
  v18(&v12[*(int *)(v7 + 20)], v17, v13);
  v22 = sub_100057148();
  static DispatchQoS.unspecified.getter(v22);
  v36 = _swiftEmptyArrayStorage;
  v23 = sub_100057184();
  v24 = sub_100032C48(&qword_100504800);
  v25 = sub_1000571C4();
  v26 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v24, v25, v2, v23);
  v27 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v35, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  *(_QWORD *)v12 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x80000001003E45D0, v6, v26, v27, 0);
  sub_100057208((uint64_t)v12, (uint64_t)v10);
  v28 = swift_retain(v21);
  v29 = sub_100057320(v28, (uint64_t)v10);
  sub_100057464((uint64_t)v12);
  result = swift_release(v21);
  static BindingsChangeObserver.shared = (uint64_t)v29;
  return result;
}

uint64_t *BindingsChangeObserver.shared.unsafeMutableAddressor()
{
  if (qword_100503470 != -1)
    swift_once(&qword_100503470, sub_100056820);
  return &static BindingsChangeObserver.shared;
}

id static BindingsChangeObserver.shared.getter()
{
  if (qword_100503470 != -1)
    swift_once(&qword_100503470, sub_100056820);
  return (id)static BindingsChangeObserver.shared;
}

uint64_t sub_100056BC4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100504798);
  sub_1000352B0(v0, (uint64_t)qword_100504798);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000016, 0x80000001004089D0);
}

Swift::Void __swiftcall BindingsChangeObserver.registerObservers()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  v1 = &v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_xpcStreamListener];
  sub_100032EFC(&v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager], *(_QWORD *)&v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager + 24]);
  v2 = sub_100057528((uint64_t)&unk_1004D0F68);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = v0;
  sub_10007CC54((uint64_t)sub_100057510, v2);
  swift_release(v2);
  sub_100032EFC(v1, *((_QWORD *)v1 + 3));
  v4 = sub_100057528((uint64_t)&unk_1004D0F90);
  *(_QWORD *)(v4 + 16) = v3;
  v5 = v3;
  sub_1000A5134((uint64_t)sub_100057028, v4);
  swift_release(v4);
}

uint64_t sub_100056D08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100056D2C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[4];

  v0 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v0);
  v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_1004D0FC8, 32, 7);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = sub_1000352C8((uint64_t)v2, 1, v3);
  if ((_DWORD)v5 == 1)
  {
    sub_1000570E4((uint64_t)v2);
    v6 = 0;
    v7 = 0;
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v5);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
    v8 = v9 | 0x1C00;
    v10 = *(_QWORD *)(v4 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)(v4 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v7 = v13;
      swift_unknownObjectRelease(v10);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
  v14 = swift_allocObject(&unk_1004D0FF0, 32, 7);
  *(_QWORD *)(v14 + 16) = &unk_1005047F0;
  *(_QWORD *)(v14 + 24) = v4;
  if (v7 | v6)
  {
    v18[0] = 0;
    v18[1] = 0;
    v15 = v18;
    v18[2] = v6;
    v18[3] = v7;
  }
  else
  {
    v15 = 0;
  }
  v16 = swift_task_create(v8, v15, (char *)&type metadata for () + 8, &unk_1005040F0, v14);
  return swift_release(v16);
}

uint64_t sub_100056F0C()
{
  return swift_task_switch(sub_100056F20, 0, 0);
}

uint64_t sub_100056F20()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_100503460 != -1)
    swift_once(&qword_100503460, sub_10004A82C);
  v1 = (_QWORD *)swift_task_alloc(dword_10050439C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100048C2C;
  return sub_10004CEDC();
}

void BindingsChangeObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("asd.BindingsChangeObserver", 26, "init()", 6, 0);
  __break(1u);
}

void sub_100057008()
{
  BindingsChangeObserver.registerObservers()();
}

uint64_t sub_100057028()
{
  return sub_100056D2C();
}

uint64_t type metadata accessor for BindingsChangeObserver()
{
  return objc_opt_self(_TtC3asd22BindingsChangeObserver);
}

uint64_t sub_100057068()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005708C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005047EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100048288;
  sub_100057514();
  return sub_100056F0C();
}

uint64_t sub_1000570E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_1005039D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100057124()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100057148()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505E80;
  if (!qword_100505E80)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100505E80);
  }
  return result;
}

unint64_t sub_100057184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005047F8;
  if (!qword_1005047F8)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1005047F8);
  }
  return result;
}

unint64_t sub_1000571C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504808;
  if (!qword_100504808)
  {
    v1 = sub_100035350(&qword_100504800);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_100504808);
  }
  return result;
}

uint64_t sub_100057208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCStreamListener(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10005724C(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *ObjectType;
  _QWORD *v7;
  id v8;
  objc_super v10;
  _QWORD v11[5];
  _QWORD v12[5];

  ObjectType = (objc_class *)swift_getObjectType(a3);
  v12[3] = type metadata accessor for ContactsManager(0);
  v12[4] = &off_1004D1E80;
  v12[0] = a1;
  v11[3] = type metadata accessor for XPCStreamListener(0);
  v11[4] = &off_1004D3840;
  v7 = sub_10004048C(v11);
  sub_1000574A0(a2, (uint64_t)v7);
  sub_100032EB8((uint64_t)v12, (uint64_t)a3 + OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager);
  sub_100032EB8((uint64_t)v11, (uint64_t)a3 + OBJC_IVAR____TtC3asd22BindingsChangeObserver_xpcStreamListener);
  v10.receiver = a3;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, "init");
  sub_100032F94(v11);
  sub_100032F94(v12);
  return v8;
}

id sub_100057320(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for ContactsManager(0);
  v21 = &off_1004D1E80;
  v19[0] = a1;
  v17 = type metadata accessor for XPCStreamListener(0);
  v18 = &off_1004D3840;
  v4 = sub_10004048C(v16);
  sub_1000574A0(a2, (uint64_t)v4);
  v5 = objc_allocWithZone((Class)type metadata accessor for BindingsChangeObserver());
  v6 = sub_1000574E4((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_1000574E4((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v14 = sub_10005724C(*v8, (uint64_t)v12, v5);
  sub_100032F94(v16);
  sub_100032F94(v19);
  return v14;
}

uint64_t sub_100057464(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for XPCStreamListener(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000574A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCStreamListener(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000574E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100057514()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100057528(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_100057534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for URLRequest(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10005822C();
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v9);
  v4[12] = swift_task_alloc(v9);
  return sub_100040920();
}

uint64_t sub_1000575C4()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, _QWORD);
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[5];
  v2 = *(void (**)(uint64_t, uint64_t, _QWORD))(v0[10] + 16);
  v2(v0[12], v1, v0[9]);
  v3 = type metadata accessor for RavioliRequestFactory(0);
  v0[13] = v3;
  v4 = (uint64_t *)(v1 + *(int *)(v3 + 28));
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = sub_100032C48(&qword_100503B98);
    v8 = type metadata accessor for URLQueryItem(0);
    v9._rawValue = (void *)swift_allocObject(v7, ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) | 7);
    *((_OWORD *)v9._rawValue + 1) = xmmword_1004077E0;
    URLQueryItem.init(name:value:)(0x6163696669746F6ELL, 0xEF64695F6E6F6974, v6, v5);
    URL.append(queryItems:)(v9);
    swift_bridgeObjectRelease(v9._rawValue);
  }
  v10 = v0[11];
  v11 = (void *)v0[4];
  v12 = v0[5];
  v13 = v0[3];
  v2(v10, v0[12], v0[9]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v10, 0, 60.0);
  v14._countAndFlagsBits = v13;
  v14._object = v11;
  v15._countAndFlagsBits = 0x692D656C646E7562;
  v15._object = (void *)0xE900000000000064;
  URLRequest.addValue(_:forHTTPHeaderField:)(v14, v15);
  v16 = (_QWORD *)(v12 + *(int *)(v3 + 20));
  v17 = v16[3];
  v18 = v16[4];
  sub_100032EFC(v16, v17);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of DeviceInformationProvider.clientInfoHeader()[1]);
  v0[14] = v19;
  *v19 = v0;
  v19[1] = sub_100057768;
  return dispatch thunk of DeviceInformationProvider.clientInfoHeader()(v17, v18);
}

uint64_t sub_100057768(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = a2;
  swift_task_dealloc(v4);
  return sub_100040920();
}

uint64_t sub_1000577BC()
{
  uint64_t v0;
  Swift::String v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  int v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1._countAndFlagsBits = *(_QWORD *)(v0 + 120);
  v2 = *(void **)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 40);
  v5._object = (void *)0x80000001003E45F0;
  v1._object = v2;
  v5._countAndFlagsBits = 0xD000000000000013;
  URLRequest.addValue(_:forHTTPHeaderField:)(v1, v5);
  swift_bridgeObjectRelease(v2);
  v6 = *(unsigned __int8 *)(v4 + *(int *)(v3 + 32) + 26);
  if (v6 != 2 && (v6 & 1) == 0)
  {
    v14 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v13, v15);
    sub_100058220();
    sub_100040B34();
    sub_100040A10();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 104) + 24));
    v9 = v8[3];
    v10 = v8[4];
    sub_100032EFC(v8, v9);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AccountRequestHeaderProvider.applyAuthorisationHeaders(toRequest:)[1]);
    *(_QWORD *)(v0 + 136) = v11;
    *v11 = v0;
    v11[1] = sub_1000578EC;
    return dispatch thunk of AccountRequestHeaderProvider.applyAuthorisationHeaders(toRequest:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64), v9, v10);
  }
}

uint64_t sub_1000578EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  return sub_100040920();
}

uint64_t sub_100057948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100058220();
  sub_100040B34();
  sub_100040A10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000579B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v4, *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100040B34();
  sub_100040A10();
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RavioliRequestFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100504870;
  if (!qword_100504870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RavioliRequestFactory);
  return result;
}

uint64_t *sub_100057A60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    v10 = a3[6];
    v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v11;
    (**(void (***)(void))(v11 - 8))();
    v12 = a3[7];
    v13 = a3[8];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
    *((_DWORD *)v17 + 6) = *((_DWORD *)v18 + 6);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_100057B64(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_100032F94((_QWORD *)(a1 + a2[5]));
  sub_100032F94((_QWORD *)(a1 + a2[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_100057BD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  v9 = a3[6];
  v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v10;
  (**(void (***)(void))(v10 - 8))();
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a1 + v12;
  v17 = a2 + v12;
  v18 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100057CAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  sub_100057D9C((_QWORD *)(a1 + a3[5]), (_QWORD *)(a2 + a3[5]));
  sub_100057D9C((_QWORD *)(a1 + a3[6]), (_QWORD *)(a2 + a3[6]));
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(a1 + v12 + 8);
  *(_QWORD *)(v13 + 8) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
  *(_QWORD *)(v13 + 16) = v17;
  *(_BYTE *)(v13 + 25) = *(_BYTE *)(v14 + 25);
  *(_BYTE *)(v13 + 26) = *(_BYTE *)(v14 + 26);
  *(_BYTE *)(v13 + 27) = *(_BYTE *)(v14 + 27);
  return a1;
}

_QWORD *sub_100057D9C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_100057F04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  v15 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v16 = (_OWORD *)(a1 + v15);
  v17 = (_OWORD *)(a2 + v15);
  *v16 = *v17;
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v17 + 12);
  return a1;
}

uint64_t sub_100057FAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_100032F94((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_100032F94((_QWORD *)(a1 + v11));
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_QWORD *)(a1 + v21 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v24;
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(v23 + 24);
  return a1;
}

uint64_t sub_100058094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000580A0);
}

uint64_t sub_1000580A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_10005822C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_1000352C8(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100058118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100058124);
}

uint64_t sub_100058124(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_10005822C();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100037020(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100058198(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    v4[3] = &unk_100408A40;
    v4[4] = &unk_100408A58;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100058220()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10005822C()
{
  return type metadata accessor for URL(0);
}

void sub_100058234(_QWORD *a1)
{
  sub_100032EFC(a1, a1[3]);
  sub_1000926DC();
}

uint64_t sub_10005825C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ASAnalyticsManager()
{
  return objc_opt_self(_TtC3asd18ASAnalyticsManager);
}

void sub_100058290(uint64_t a1)
{
  sub_1000582DC(a1, (uint64_t (*)(uint64_t))sub_100041888);
}

void sub_10005829C(uint64_t a1)
{
  sub_1000582DC(a1, (uint64_t (*)(uint64_t))sub_100051520);
}

void sub_1000582A8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100046FF8(a1);
  sub_100046FEC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100046F54();
  sub_100058ED8();
}

void sub_1000582D0(uint64_t a1)
{
  sub_1000582DC(a1, (uint64_t (*)(uint64_t))sub_100076CB0);
}

void sub_1000582DC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100046FF8(a1);
  v4 = a2(a1);
  sub_100058EE4(v4, v5, v6);
  swift_bridgeObjectRelease(a2);
  sub_100046F54();
  sub_100058ED8();
}

void sub_100058318(int a1, Swift::UInt a2)
{
  sub_100058F74(a1, a2);
}

void sub_100058334(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100058378(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000016, 0x80000001003E3240);
  return sub_100058EC0(0x80000001003E3240);
}

void sub_100058408(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10005842C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100051520(a2);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return sub_100058EC0(v5);
}

void sub_100058468()
{
  sub_100058F54();
  __asm { BR              X10 }
}

uint64_t sub_1000584B0(uint64_t a1)
{
  String.hash(into:)(a1, 0x6361437261656C63, 0xEB00000000736568);
  return sub_100058EC0(0xEB00000000736568);
}

void sub_10005853C(uint64_t a1, uint64_t a2)
{
  sub_100058564(a1, a2, (uint64_t (*)(uint64_t))sub_100076CB0);
}

void sub_100058548(uint64_t a1, uint64_t a2)
{
  sub_100058564(a1, a2, (uint64_t (*)(uint64_t))sub_100051520);
}

void sub_100058558(uint64_t a1, uint64_t a2)
{
  sub_100058564(a1, a2, (uint64_t (*)(uint64_t))sub_100041888);
}

void sub_100058564(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  v5 = a3(a2);
  sub_100058EE4(v5, v6, v7);
  swift_bridgeObjectRelease(a3);
  sub_100046F54();
  sub_100058ED8();
}

void sub_1000585A4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[9];

  v1 = Hasher.init(_seed:)(v10, a1);
  sub_100046FEC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  sub_100046F54();
  sub_100058ED8();
}

uint64_t sub_1000585D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  id v3;
  uint64_t result;

  v0 = type metadata accessor for ASAnalyticsManager();
  v1 = swift_allocObject(v0, 16, 7);
  v2 = (uint64_t *)swift_retain(v1);
  v3 = sub_100058DCC(v2);
  result = swift_release(v1);
  static ASXPCActivityManager.shared = (uint64_t)v3;
  return result;
}

uint64_t *ASXPCActivityManager.shared.unsafeMutableAddressor()
{
  if (qword_100503480 != -1)
    swift_once(&qword_100503480, sub_1000585D0);
  return &static ASXPCActivityManager.shared;
}

id static ASXPCActivityManager.shared.getter()
{
  if (qword_100503480 != -1)
    swift_once(&qword_100503480, sub_1000585D0);
  return (id)static ASXPCActivityManager.shared;
}

uint64_t sub_1000586B0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100504950);
  sub_1000352B0(v0, (uint64_t)qword_100504950);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
}

uint64_t sub_100058738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  type metadata accessor for ASXPCActivityManager();
  v5 = (_QWORD *)swift_task_alloc(dword_1005049B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100058EB8;
  return sub_1000587A0(a1, a2);
}

uint64_t sub_1000587A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for ASAnalyticsEvent(0);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000587FC, 0, 0);
}

uint64_t sub_1000587FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  if (qword_100503480 != -1)
    swift_once(&qword_100503480, sub_1000585D0);
  v1 = v0[5];
  sub_100058EFC(static ASXPCActivityManager.shared);
  sub_100058F48();
  sub_10004EA4C(v1);
  if (qword_100503488 != -1)
    swift_once(&qword_100503488, sub_1000586B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000352B0(v2, (uint64_t)qword_100504950);
  v4 = (void *)Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (sub_10004EFCC(v5))
  {
    *(_WORD *)sub_100047004() = 0;
    sub_100058F24((void *)&_mh_execute_header, v6, v7, "Triggering due pregenerate tasks");
    sub_100058F38();
  }

  if (qword_100503460 != -1)
    swift_once(&qword_100503460, sub_10004A82C);
  v8 = (uint64_t **)swift_task_alloc(dword_100504074);
  v0[6] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_100058944;
  return sub_100058EC8(1, v0[2], v0[3]);
}

uint64_t sub_100058944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100058F60();
  v3 = *(_QWORD *)(v2 + 40);
  sub_100048CF8(*(_QWORD *)(v2 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0);
}

uint64_t sub_100058984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  type metadata accessor for ASXPCActivityManager();
  v5 = (_QWORD *)swift_task_alloc(dword_1005049BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000589EC;
  return sub_100058A24(a1, a2);
}

uint64_t sub_1000589EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100058F60();
  sub_100048CF8(*(_QWORD *)(v2 + 16));
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0);
}

uint64_t sub_100058A24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for ASAnalyticsEvent(0);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100058A80, 0, 0);
}

uint64_t sub_100058A80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  if (qword_100503480 != -1)
    swift_once(&qword_100503480, sub_1000585D0);
  v1 = v0[5];
  sub_100058EFC(static ASXPCActivityManager.shared);
  sub_100058F48();
  sub_10004EA4C(v1);
  if (qword_100503488 != -1)
    swift_once(&qword_100503488, sub_1000586B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000352B0(v2, (uint64_t)qword_100504950);
  v4 = (void *)Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (sub_10004EFCC(v5))
  {
    *(_WORD *)sub_100047004() = 0;
    sub_100058F24((void *)&_mh_execute_header, v6, v7, "Triggering due precomputation tasks");
    sub_100058F38();
  }

  if (qword_100503460 != -1)
    swift_once(&qword_100503460, sub_10004A82C);
  v8 = (uint64_t **)swift_task_alloc(dword_100504074);
  v0[6] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_100058EBC;
  return sub_100058EC8(4, v0[2], v0[3]);
}

void sub_100058BC8()
{
  uint64_t *v0;

  sub_1000582A8(*v0);
}

void sub_100058BE0(int a1)
{
  Swift::UInt *v1;

  sub_100058408(a1, *v1);
}

void sub_100058BE8(uint64_t a1)
{
  sub_1000585A4(a1);
}

void ASXPCActivityManager.register(activity:)(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = 0xD000000000000011;
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASBackgroundActivityManager()), "init");
  if (!a1)
  {
    v2 = 0xD000000000000013;
    v4 = 0x80000001003E4650;
    v5 = &unk_100504970;
LABEL_5:
    v6 = v3;
    ASBackgroundActivityManager.registerActivity(identifier:activity:)(v2, v4, (uint64_t)v5, 0);
    swift_bridgeObjectRelease(v4);

    return;
  }
  if (a1 == 1)
  {
    v4 = 0x80000001003E4630;
    v5 = &unk_100504968;
    goto LABEL_5;
  }
  v7 = a1;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ASXPCActivityManager.Activity, &v7, &type metadata for ASXPCActivityManager.Activity, &type metadata for Int);
  __break(1u);
}

void ASXPCActivityManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("asd.ASXPCActivityManager", 24, "init()", 6, 0);
  __break(1u);
}

unint64_t sub_100058D50()
{
  unint64_t result;

  result = qword_100504978;
  if (!qword_100504978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ASXPCActivityManager.Activity, &type metadata for ASXPCActivityManager.Activity);
    atomic_store(result, (unint64_t *)&qword_100504978);
  }
  return result;
}

uint64_t type metadata accessor for ASXPCActivityManager()
{
  return objc_opt_self(_TtC3asd20ASXPCActivityManager);
}

ValueMetadata *type metadata accessor for ASXPCActivityManager.Activity()
{
  return &type metadata for ASXPCActivityManager.Activity;
}

id sub_100058DCC(uint64_t *a1)
{
  uint64_t v1;
  objc_class *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;
  _QWORD v12[5];
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = *a1;
  v1 = v14;
  v15 = &off_1004D1008;
  v13[0] = a1;
  v2 = (objc_class *)type metadata accessor for ASXPCActivityManager();
  v3 = objc_allocWithZone(v2);
  v4 = sub_1000574E4((uint64_t)v13, v14);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  v8 = *v6;
  v12[3] = v1;
  v12[4] = &off_1004D1008;
  v12[0] = v8;
  sub_100032EB8((uint64_t)v12, (uint64_t)v3 + OBJC_IVAR____TtC3asd20ASXPCActivityManager_analyticsManager);
  v11.receiver = v3;
  v11.super_class = v2;
  v9 = objc_msgSendSuper2(&v11, "init");
  sub_100032F94(v12);
  sub_100032F94(v13);
  return v9;
}

uint64_t sub_100058EC0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100058EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PrecomputationManager.triggerDuePrecomputations(dataProtectionClass:shouldDefer:)(a1, a2, a3);
}

uint64_t sub_100058EE4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_100058EFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100032EFC((_QWORD *)(a1 + v1), *(_QWORD *)(a1 + v1 + 24));
  return swift_storeEnumTagMultiPayload(v3, v2, 7);
}

void sub_100058F24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_100058F38()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_100058F48()
{
  uint64_t v0;

  return sub_100099360(v0);
}

void sub_100058F60()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_100058F74(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_100058F80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  id v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;

  v95 = a2;
  v4 = sub_100032C48(&qword_1005049C0);
  __chkstk_darwin(v4);
  sub_100059EB4();
  v91 = v5;
  __chkstk_darwin(v6);
  v88 = (char *)&v82 - v7;
  v90 = type metadata accessor for DsidType(0);
  v8 = *(_QWORD *)(v90 - 8);
  v9 = __chkstk_darwin(v90);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v82 - v12;
  v14 = type metadata accessor for AssessmentConfig(0);
  v92 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100059EB4();
  v89 = v15;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v82 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v82 - v21;
  v23 = AugmentedProfile.profile.getter(v20);
  v93 = sub_100059EA8(v23, v24);
  v25 = sub_100059EC8();
  v94 = v2;
  if (v2 >> 60 == 15)
    goto LABEL_5;
  v87 = v14;
  v26 = AugmentedProfile.profileInfo.getter(v25);
  if (!v27 || (v28 = sub_100059EA8(v26, v27), sub_100059EC8(), v2 >> 60 == 15))
  {
    sub_10003301C(v93, v94);
LABEL_5:
    v29 = sub_10005956C();
    v30 = sub_100059ED4((uint64_t)&type metadata for ProfileEvaluationCacherError, v29);
    *v31 = 0;
    swift_willThrow(v30);
LABEL_6:
    v32 = type metadata accessor for AugmentedProfile(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
  }
  v84 = v28;
  v85 = v2;
  v86 = a1;
  sub_1000595A8();
  v34 = v93;
  v35 = v94;
  sub_100033DD0(v93, v94);
  v36 = sub_1000595E4(v34, v35);
  if (!v36)
  {
    v45 = sub_10005956C();
    v46 = sub_100059ED4((uint64_t)&type metadata for ProfileEvaluationCacherError, v45);
    *v47 = 2;
    swift_willThrow(v46);
    sub_10003301C(v84, v85);
    sub_10003301C(v34, v35);
    a1 = v86;
    goto LABEL_6;
  }
  v37 = v95;
  v39 = v84;
  v38 = v85;
  *v95 = v36;
  v37[1] = v39;
  v37[2] = v38;
  v40 = v36;
  sub_100059658(v39, v38);
  v41 = sub_100059E94();
  v83 = v40;
  if (v41)
  {
    sub_100059E9C();
    v42 = sub_1000357E4();
    v43 = (_QWORD *)AssessmentConfig.bindingsToCompare.getter(v42);
    sub_100059E8C((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
  }
  else
  {
    v43 = _swiftEmptyArrayStorage;
  }
  v44 = v91;
  v95[3] = v43;
  v48 = sub_100059E94();
  if (v48)
  {
    JWSSignedJSON.payload.getter();
    v49 = sub_1000357E4();
    v48 = AssessmentConfig.refreshTtl.getter(v49);
    sub_100059E78();
  }
  v95[4] = v48;
  if (sub_100059E94())
  {
    sub_100059E9C();
    v50 = sub_1000357E4();
    v51 = AssessmentConfig.bindingsDictSource.getter(v50);
    sub_100059E78();
  }
  else
  {
    v52 = sub_100032C48(&qword_1005049D8);
    v51 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v52, &protocol witness table for String);
  }
  v95[5] = v51;
  if (sub_100059E94())
  {
    sub_100059E9C();
    v53 = sub_1000357E4();
    AssessmentConfig.primaryDSID.getter(v53);
    sub_100059E78();
    v54 = v90;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v90);
  }
  else
  {
    v54 = v90;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v13, enum case for DsidType.iCloud(_:), v90);
  }
  v55 = (int *)type metadata accessor for ProfileContent(0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)v95 + v55[9], v13, v54);
  v56 = sub_100059E94();
  if (v56)
  {
    JWSSignedJSON.payload.getter();
    v57 = sub_1000357E4();
    v58 = (uint64_t)v88;
    AssessmentConfig.destinations.getter(v57);
    sub_100059E8C((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
    v59 = type metadata accessor for AssessmentServerDestinations(0);
    if (sub_1000352C8(v58, 1, v59) == 1)
    {
      sub_1000596A4(v58);
      v56 = 0;
      v60 = 0;
    }
    else
    {
      v56 = AssessmentServerDestinations.tsidEncryptionCert.getter();
      v60 = v61;
      sub_100059E8C(v58, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8));
    }
  }
  else
  {
    v60 = 0;
  }
  v62 = (_QWORD *)((char *)v95 + v55[10]);
  *v62 = v56;
  v62[1] = v60;
  if (sub_100059E94())
  {
    sub_100059E9C();
    v63 = sub_1000357E4();
    v64 = AssessmentConfig.useSendOTD.getter(v63);
    sub_100059E78();
  }
  else
  {
    v64 = 1;
  }
  v65 = v94;
  *((_BYTE *)v95 + v55[11]) = v64 & 1;
  v66 = sub_100059E94();
  v67 = v66;
  if (v66)
  {
    v68 = v89;
    JWSSignedJSON.payload.getter();
    v69 = sub_1000357E4();
    AssessmentConfig.destinations.getter(v69);
    sub_100059E8C(v68, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
    v70 = type metadata accessor for AssessmentServerDestinations(0);
    if (sub_1000352C8(v44, 1, v70) != 1)
    {
      v67 = AssessmentServerDestinations.otd.getter();
      v71 = v72;
      v66 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v44, v70);
      goto LABEL_33;
    }
    v66 = sub_1000596A4(v44);
    v67 = 0;
  }
  v71 = 0;
LABEL_33:
  v73 = v93;
  v74 = v95;
  v75 = (_QWORD *)((char *)v95 + v55[12]);
  *v75 = v67;
  v75[1] = v71;
  v76 = v86;
  v77 = AugmentedProfile.profileID.getter(v66);
  v79 = v78;
  sub_10003301C(v84, v85);

  sub_10003301C(v73, v65);
  v80 = type metadata accessor for AugmentedProfile(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v76, v80);
  v81 = (_QWORD *)((char *)v74 + v55[13]);
  *v81 = v77;
  v81[1] = v79;
  return result;
}

unint64_t sub_10005956C()
{
  unint64_t result;

  result = qword_1005049C8;
  if (!qword_1005049C8)
  {
    result = swift_getWitnessTable(&unk_10040B070, &type metadata for ProfileEvaluationCacherError);
    atomic_store(result, (unint64_t *)&qword_1005049C8);
  }
  return result;
}

unint64_t sub_1000595A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005049D0;
  if (!qword_1005049D0)
  {
    v1 = objc_opt_self(ASReleasableBuffer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005049D0);
  }
  return result;
}

id sub_1000595E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "initWithData:", isa);
  sub_100033030(a1, a2);

  return v7;
}

uint64_t sub_100059658(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100033DD0(a1, a2);
  return a1;
}

uint64_t type metadata accessor for ProfileContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100504A38;
  if (!qword_100504A38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProfileContent);
  return result;
}

uint64_t sub_1000596A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_1005049C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000596E4(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = (uint64_t)a2[1];
    v9 = (unint64_t)a2[2];
    v10 = v5;
    sub_100033DD0(v8, v9);
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v9;
    v12 = a2[3];
    v11 = a2[4];
    *((_QWORD *)a1 + 3) = v12;
    *((_QWORD *)a1 + 4) = v11;
    v13 = a2[5];
    *((_QWORD *)a1 + 5) = v13;
    v14 = a3[9];
    v15 = &a1[v14];
    v16 = (uint64_t)a2 + v14;
    v17 = type metadata accessor for DsidType(0);
    v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    v19 = swift_bridgeObjectRetain(v13);
    v18(v15, v16, v17, v19);
    v20 = a3[10];
    v21 = a3[11];
    v22 = &a1[v20];
    v23 = (char **)((char *)a2 + v20);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    a1[v21] = *((_BYTE *)a2 + v21);
    v25 = a3[12];
    v26 = a3[13];
    v27 = &a1[v25];
    v28 = (char **)((char *)a2 + v25);
    v29 = v28[1];
    *(_QWORD *)v27 = *v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = &a1[v26];
    v31 = (char **)((char *)a2 + v26);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

uint64_t sub_100059814(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100033030(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for DsidType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
}

_QWORD *sub_1000598AC(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v6;
  sub_100033DD0(v7, v8);
  a1[1] = v7;
  a1[2] = v8;
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  a1[3] = v11;
  a1[4] = v10;
  v12 = *(_QWORD *)(a2 + 40);
  a1[5] = v12;
  v13 = a3[9];
  v14 = (char *)a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for DsidType(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  v18 = swift_bridgeObjectRetain(v12);
  v17(v14, v15, v16, v18);
  v19 = a3[10];
  v20 = a3[11];
  v21 = (_QWORD *)((char *)a1 + v19);
  v22 = (_QWORD *)(a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  *((_BYTE *)a1 + v20) = *(_BYTE *)(a2 + v20);
  v24 = a3[12];
  v25 = a3[13];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)((char *)a1 + v25);
  v30 = (_QWORD *)(a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  return a1;
}

uint64_t sub_1000599B8(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  sub_100033DD0(v9, v10);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  sub_100033030(v11, v12);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for DsidType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a3[12];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[13];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  return a1;
}

uint64_t sub_100059B14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DsidType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_100059BC0(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100033030(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[9];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for DsidType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[13];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  return a1;
}

uint64_t sub_100059CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059CCC);
}

uint64_t sub_100059CCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DsidType(0);
    return sub_1000352C8((uint64_t)a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_100059D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059D4C);
}

_QWORD *sub_100059D4C(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DsidType(0);
    return (_QWORD *)sub_100037020((uint64_t)v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100059DB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100408BB8;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for DsidType(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100408BD0;
    v4[7] = &unk_100408BE8;
    v4[8] = &unk_100408BD0;
    v4[9] = &unk_100408C00;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100059E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v0, v1);
}

uint64_t sub_100059E8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100059E94()
{
  return AugmentedProfile.assessmentConfig.getter();
}

uint64_t sub_100059E9C()
{
  return JWSSignedJSON.payload.getter();
}

uint64_t sub_100059EA8(uint64_t a1, uint64_t a2)
{
  return Data.init(base64Encoded:options:)(a1, a2, 1);
}

uint64_t sub_100059EC8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100059ED4(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

void sub_100059EE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_10005FE20();
  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native(*v0) & 1) == 0)
  {
    sub_10005F998(v1);
    v1 = v2;
  }
  sub_10005E6D0();
  *v0 = v1;
}

uint64_t sub_100059F58(uint64_t a1)
{
  int64_t v1;
  uint64_t result;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (uint64_t)_swiftEmptyArrayStorage;
  sub_1000916D4(0, v1, 0);
  result = sub_10005F9D4(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v5 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v6 = v4;
      v7 = a1 + 64;
      v14 = a1 + 64;
      while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v8 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
        v9 = v8[1];
        v15 = v1;
        v16 = *v8;
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v5);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        result = swift_bridgeObjectRetain(v9);
        if (v11 >= v10 >> 1)
          result = (uint64_t)sub_1000916D4((char *)(v10 > 1), v11 + 1, 1);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        v12 = &_swiftEmptyArrayStorage[3 * v11];
        v12[4] = v16;
        v12[5] = v9;
        v12[6] = v17;
        v13 = -1 << *(_BYTE *)(a1 + 32);
        if ((uint64_t)v5 >= -v13)
          goto LABEL_19;
        v7 = a1 + 64;
        if ((*(_QWORD *)(v14 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
          goto LABEL_20;
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v5, v14, ~v13);
        v1 = v15 - 1;
        if (v15 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
        v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10005A128(uint64_t a1)
{
  int64_t v1;
  uint64_t result;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (uint64_t)_swiftEmptyArrayStorage;
  sub_1000916D4(0, v1, 0);
  result = sub_10005F9D4(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v5 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v6 = v4;
      v7 = a1 + 64;
      v14 = a1 + 64;
      while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v8 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
        v9 = v8[1];
        v15 = v1;
        v16 = *v8;
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v5 + 8);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        result = swift_bridgeObjectRetain(v9);
        if (v11 >= v10 >> 1)
          result = (uint64_t)sub_1000916D4((char *)(v10 > 1), v11 + 1, 1);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        v12 = &_swiftEmptyArrayStorage[3 * v11];
        v12[4] = v16;
        v12[5] = v9;
        v12[6] = v17;
        v13 = -1 << *(_BYTE *)(a1 + 32);
        if ((uint64_t)v5 >= -v13)
          goto LABEL_19;
        v7 = a1 + 64;
        if ((*(_QWORD *)(v14 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
          goto LABEL_20;
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v5, v14, ~v13);
        v1 = v15 - 1;
        if (v15 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
        v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10005A2F8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = type metadata accessor for BindingsStore.Binding(0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_10005E5F0(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12);
      v17 = a1(v12);
      if (v3)
      {
        sub_10005E678((uint64_t)v12);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_10005E634((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_1000916F0(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000916F0(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_10005E634(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_10005E678((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

void *sub_10005A4E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100032C48(&qword_100504CB0);
    v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v6 = v3;
  v4 = swift_bridgeObjectRetain(a1);
  sub_10005F684(v4, 1, &v6);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_10005A590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1;
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = v1;
  swift_defaultActor_initialize(v1);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
  v5 = OBJC_IVAR____TtC3asd13BindingsStore_persister;
  *(_QWORD *)(v1 + v5) = objc_msgSend((id)objc_opt_self(PJXBDBF1h0EU80dy), "sharedInstance");
  sub_10005FBDC(a1, v2 + 56, &qword_100504D58);
  if (*(_QWORD *)(v2 + 80))
  {
    sub_1000351FC((__int128 *)(v2 + 56), v2 + 16);
  }
  else
  {
    *(_QWORD *)(v2 + 40) = &type metadata for BindingsConfigResolver;
    *(_QWORD *)(v2 + 48) = &off_1004D10D0;
    sub_10004EB70(v2 + 56, &qword_100504D58);
  }
  sub_1000351FC((__int128 *)(v2 + 16), v1 + 120);
  v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC3asd13BindingsStore_persister), "fetchAllBindings");
  v7 = sub_1000399FC((uint64_t)v6, &qword_100504CE0, &off_1004CD950);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  sub_10005A774();
  v9 = v8;
  sub_100039998();
  *(_QWORD *)(v3 + 112) = v9;
  return swift_task_switch(sub_10005A730, v3, 0);
}

uint64_t sub_10005A730()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_10005CC5C();
  sub_10004EB70(v1, &qword_100504D58);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

void sub_10005A774()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  char v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  Swift::Int v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[5];

  sub_10005FC74();
  v2 = v0;
  v4 = v3;
  v5 = type metadata accessor for Logger(0);
  v85 = *(_QWORD *)(v5 - 8);
  sub_10005FCA4();
  __chkstk_darwin(v6);
  sub_100046E44();
  v9 = v8 - v7;
  v10 = type metadata accessor for BindingsStore.Binding(0);
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  sub_10005FCA4();
  __chkstk_darwin(v11);
  sub_100059EB4();
  v81 = v12;
  sub_10005FE14();
  __chkstk_darwin(v13);
  v93 = (_QWORD *)((char *)v79 - v14);
  sub_100032C48(&qword_100504D60);
  sub_10005FCA4();
  __chkstk_darwin(v15);
  sub_100046E44();
  v86 = v5;
  v87 = v17 - v16;
  sub_100037020(v17 - v16, 1, 1, v5);
  v92 = v4;
  if (v4 >> 62)
  {
LABEL_35:
    if (v92 < 0)
      v78 = v92;
    else
      v78 = v92 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v92);
    v18 = _CocoaArrayWrapper.endIndex.getter(v78);
    if (v18)
      goto LABEL_3;
LABEL_39:
    swift_bridgeObjectRelease(v92);
    sub_10004EB70(v87, &qword_100504D60);
    sub_10004F0C0();
    return;
  }
  v18 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v92);
  if (!v18)
    goto LABEL_39;
LABEL_3:
  v91 = v92 & 0xC000000000000001;
  v19 = &_swiftEmptyDictionarySingleton;
  v20 = 4;
  *((_QWORD *)&v21 + 1) = 2;
  v82 = xmmword_1004077E0;
  *(_QWORD *)&v21 = 136315394;
  v80 = v21;
  v79[1] = (char *)&type metadata for Any + 8;
  v88 = v9;
  v89 = v2;
  v90 = v18;
  while (1)
  {
    if (v91)
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v92);
    else
      v22 = *(id *)(v92 + 8 * v20);
    v23 = v22;
    if (__OFADD__(v20 - 4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v94 = v20 - 3;
    v95 = v20;
    v24 = sub_10005FDD4((uint64_t)v22, "value");
    v25 = (void *)sub_100039884(0, &qword_100504518, NSObject_ptr);
    v96[3] = (uint64_t)v25;
    v96[0] = (uint64_t)v24;
    v26 = v24;
    v27 = sub_10005AF90((uint64_t)v96);
    sub_100032F94(v96);
    if ((v27 & 1) == 0)
    {
      sub_10005AE0C(v87, v9);
      v40 = v26;
      v41 = v23;
      v42 = v40;
      v43 = v41;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = sub_10003308C(22);
        v47 = sub_10003308C(64);
        v96[0] = v47;
        *(_DWORD *)v46 = v80;
        v48 = sub_10005FDD4(v47, "key");
        sub_10005FF48();
        sub_10005FF30();
        *(_QWORD *)(v46 + 4) = sub_100036778(v2, (unint64_t)v1, v96);

        swift_bridgeObjectRelease(v1);
        *(_WORD *)(v46 + 12) = 2080;
        v49 = objc_msgSend((id)swift_getObjCClassFromObject(v42), "description");
        sub_10005FF48();
        sub_10005FF30();
        v50 = v2;
        v2 = v89;
        *(_QWORD *)(v46 + 14) = sub_100036778(v50, (unint64_t)v1, v96);

        swift_bridgeObjectRelease(v1);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Skipping binding due to value of unexpected type. key: %s type: %s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy(v47, 2);
        sub_100033080(v47);
        v51 = v46;
        v9 = v88;
        sub_100033080(v51);

      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v9, v86);
      goto LABEL_30;
    }
    v28 = v93;
    v93[3] = v25;
    v28[4] = sub_10005FB8C();
    *v28 = v26;
    v1 = v26;
    v29 = sub_10005FDD4((uint64_t)v1, "updated");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v31 = sub_10005FDD4(v30, "key");
    v32 = sub_10005FF48();
    v34 = v33;

    if (v19[2] && (v35 = sub_100052C20(v32, v34), (v36 & 1) != 0))
    {
      v9 = *(_QWORD *)(v19[7] + 8 * v35);
      sub_100054E48();
      sub_100039950();
      sub_10005E5F0((uint64_t)v93, v81);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        v73 = sub_10005FE4C();
        sub_10003DE94(v73, v74, v75, v9);
        v9 = v76;
      }
      v38 = *(_QWORD *)(v9 + 16);
      v37 = *(_QWORD *)(v9 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_10003DE94(v37 > 1, v38 + 1, 1, v9);
        v9 = v77;
      }
      *(_QWORD *)(v9 + 16) = v38 + 1;
      v39 = sub_10005E634(v81, v9+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v38);
    }
    else
    {
      sub_100039950();
      v52 = sub_100032C48(&qword_100504CA0);
      v53 = *(unsigned __int8 *)(v83 + 80);
      v54 = (v53 + 32) & ~v53;
      v9 = swift_allocObject(v52, v54 + *(_QWORD *)(v83 + 72), v53 | 7);
      *(_OWORD *)(v9 + 16) = v82;
      v39 = sub_10005E5F0((uint64_t)v93, v9 + v54);
    }
    v55 = sub_10005FDD4(v39, "key");
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v96[0] = (uint64_t)v19;
    v60 = sub_100052C20(v56, v58);
    v62 = v19[2];
    v63 = (v61 & 1) == 0;
    v64 = v62 + v63;
    if (__OFADD__(v62, v63))
      goto LABEL_33;
    v65 = v60;
    v2 = v61;
    sub_100032C48(&qword_100504C90);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v64))
      break;
LABEL_23:
    v19 = (_QWORD *)v96[0];
    if ((v2 & 1) != 0)
    {
      v68 = *(_QWORD *)(v96[0] + 56);
      swift_bridgeObjectRelease(*(_QWORD *)(v68 + 8 * v65));
      *(_QWORD *)(v68 + 8 * v65) = v9;
    }
    else
    {
      *(_QWORD *)(v96[0] + 8 * (v65 >> 6) + 64) |= 1 << v65;
      v69 = (uint64_t *)(v19[6] + 16 * v65);
      *v69 = v56;
      v69[1] = v58;
      *(_QWORD *)(v19[7] + 8 * v65) = v9;
      v70 = v19[2];
      v71 = __OFADD__(v70, 1);
      v72 = v70 + 1;
      if (v71)
        goto LABEL_34;
      v19[2] = v72;
      sub_10005FE98();
    }

    sub_100046EEC();
    sub_10005FEF4();
    sub_10005E678((uint64_t)v93);
    v9 = v88;
    v2 = v89;
LABEL_30:
    v20 = v95 + 1;
    if (v94 == v90)
      goto LABEL_39;
  }
  v66 = sub_100052C20(v56, v58);
  if ((v2 & 1) == (v67 & 1))
  {
    v65 = v66;
    goto LABEL_23;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10005AE0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE v13[24];

  v4 = sub_100032C48(&qword_100504D60);
  v5 = __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v13[-v8 - 8];
  sub_10005FBDC(a1, (uint64_t)&v13[-v8 - 8], &qword_100504D60);
  v10 = type metadata accessor for Logger(0);
  if (sub_1000352C8((uint64_t)v9, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a2, v9, v10);
  sub_10004EB70((uint64_t)v9, &qword_100504D60);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x75706D6F63657250, 0xEE006E6F69746174);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, a2, v10);
  sub_100037020((uint64_t)v7, 0, 1, v10);
  swift_beginAccess(a1, v13, 1, 0);
  return sub_10005FC08((uint64_t)v7, a1);
}

uint64_t sub_10005AF90(uint64_t a1)
{
  char v3;
  _OWORD v4[2];
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  sub_100036FA0(a1, (uint64_t)v8);
  if (swift_dynamicCast(v7, v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v7[0] + 1));
    sub_100036FA0(a1, (uint64_t)v8);
    sub_100032F94(v8);
LABEL_4:
    sub_100036FA0(a1, (uint64_t)v7);
    sub_100032F94(v7);
LABEL_5:
    sub_100036FA0(a1, (uint64_t)v6);
    sub_100032F94(v6);
    goto LABEL_6;
  }
  sub_100036FA0(a1, (uint64_t)v8);
  sub_100053FB8(v8, v7);
  if ((swift_dynamicCast(v6, v7, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    goto LABEL_4;
  sub_100036FA0(a1, (uint64_t)v7);
  sub_100053FB8(v7, v6);
  if ((swift_dynamicCast(v5, v6, (char *)&type metadata for Any + 8, &type metadata for Float, 6) & 1) != 0)
    goto LABEL_5;
  sub_100036FA0(a1, (uint64_t)v6);
  sub_100053FB8(v6, v5);
  if ((swift_dynamicCast(v4, v5, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
    sub_100036FA0(a1, (uint64_t)v5);
    sub_100053FB8(v5, v4);
    return swift_dynamicCast(&v3, v4, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  }
LABEL_6:
  sub_100036FA0(a1, (uint64_t)v5);
  sub_100032F94(v5);
  return 1;
}

void sub_10005B134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  int64_t v45;
  _QWORD v46[4];
  __int128 v47;
  uint64_t v48[6];
  uint64_t v49[2];
  __int128 v50[4];
  uint64_t v51;
  _OWORD v52[6];
  _OWORD v53[6];
  _QWORD v54[6];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[13];

  sub_10005FC74();
  v1 = v0;
  v2 = sub_10004F358();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  sub_10005FCA4();
  __chkstk_darwin(v3);
  sub_10005FCF0();
  v44 = v4;
  if (qword_1005034D8 == -1)
    goto LABEL_2;
LABEL_41:
  swift_once(&qword_1005034D8, sub_100088AB0);
LABEL_2:
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)&v51);
  v5 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v52);

  sub_10005FA80((uint64_t)v52, (uint64_t)v57, &qword_100503A78);
  if (v57[5] == 1 || (sub_10005FEC0(), sub_10003974C((uint64_t *)v52), !v5))
  {
    sub_10005FC60();
    v6 = sub_10005FC60();
    swift_bridgeObjectRelease(v6);
    sub_10005FFF0();
  }
  v7 = sub_10005FF24();
  sub_100048EC0();
  sub_1000356D4();
  sub_100059F58(v7);
  sub_100035714();
  v8 = sub_10005FEA0();
  v9 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v53);

  sub_10005FA80((uint64_t)v53, (uint64_t)v54, &qword_100503A78);
  if (v54[5] == 1)
  {
    v10 = 0;
  }
  else
  {
    v11 = v55;
    v10 = v56;
    sub_10004EA20(v55, v56);
    sub_10003974C((uint64_t *)v53);
    if (v11)
      goto LABEL_9;
  }
  sub_10005FC60();
  v12 = sub_10005FC60();
  swift_bridgeObjectRelease(v12);
  sub_1000397F4(0, v10);
LABEL_9:
  v13 = sub_10005FF24();
  sub_100048EC0();
  sub_1000356D4();
  sub_10005A128(v13);
  sub_100039998();
  v43 = sub_10005FEA0();
  static Date.now.getter(v43);
  v42 = v1 + 64;
  sub_10005FDDC();
  v16 = v15 & v14;
  v45 = (unint64_t)(v17 + 63) >> 6;
  sub_1000470C4();
  v18 = 0;
  if (v16)
  {
LABEL_10:
    v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v20 = v19 | (v18 << 6);
LABEL_11:
    v21 = *(_QWORD *)(v1 + 56);
    v22 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v23 = v22[1];
    *(_QWORD *)&v47 = *v22;
    *((_QWORD *)&v47 + 1) = v23;
    sub_100032EB8(v21 + 40 * v20, (uint64_t)v48);
    sub_100046EC0();
    goto LABEL_30;
  }
  while (1)
  {
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v24 < v45)
    {
      v25 = *(_QWORD *)(v42 + 8 * v24);
      if (v25)
        goto LABEL_15;
      v26 = v18 + 2;
      ++v18;
      if (v24 + 1 < v45)
      {
        v25 = *(_QWORD *)(v42 + 8 * v26);
        if (v25)
          goto LABEL_18;
        v18 = v24 + 1;
        if (v24 + 2 < v45)
        {
          v25 = *(_QWORD *)(v42 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_15;
          }
          v26 = v24 + 3;
          v18 = v24 + 2;
          if (v24 + 3 < v45)
            break;
        }
      }
    }
LABEL_29:
    v16 = 0;
    memset(v48, 0, 40);
    v47 = 0u;
LABEL_30:
    sub_10005FA80((uint64_t)&v47, (uint64_t)v49, &qword_100504CE8);
    if (!v49[1])
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v43);
      swift_release(v1);
      v30 = sub_10005D418();
      swift_bridgeObjectRetain(v30);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)sub_10003308C(12);
        v35 = sub_10003308C(32);
        v49[0] = v35;
        *(_DWORD *)v34 = 136315138;
        swift_bridgeObjectRetain(v30);
        v36 = sub_100032C48(&qword_1005044C0);
        v37 = Dictionary.Keys.description.getter(v30, &type metadata for String, v36, &protocol witness table for String);
        v39 = v38;
        sub_100040C38();
        *(_QWORD *)&v47 = sub_100036778(v37, v39, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v34 + 4, v34 + 12);
        sub_10005FF50();
        sub_100046EEC();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "InVal keys for BS: %s", v34, 0xCu);
        swift_arrayDestroy(v35, 1);
        sub_100033080(v35);
        sub_100033080((uint64_t)v34);
      }
      else
      {
        sub_10005FF50();
      }

      sub_10005C018();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v41);
      sub_10004F0C0();
      return;
    }
    sub_1000351FC(v50, (uint64_t)&v47);
    v27 = v48[1];
    v28 = sub_100032EFC(&v47, v48[1]);
    v46[3] = v27;
    v29 = sub_10004048C(v46);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v29, v28, v27);
    LOBYTE(v27) = sub_10005AF90((uint64_t)v46);
    sub_100032F94(v46);
    if ((v27 & 1) != 0 && sub_10005B6FC())
      sub_10005C45C();
    sub_100035714();
    sub_100032F94(&v47);
    if (v16)
      goto LABEL_10;
  }
  v25 = *(_QWORD *)(v42 + 8 * v26);
  if (v25)
  {
LABEL_18:
    v24 = v26;
LABEL_15:
    v16 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v24 << 6);
    v18 = v24;
    goto LABEL_11;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v45)
    {
      v18 = v45 - 1;
      goto LABEL_29;
    }
    v25 = *(_QWORD *)(v42 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_15;
  }
  __break(1u);
}

BOOL sub_10005B6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;

  sub_10005FC74();
  sub_100032C48(&qword_100504CF0);
  sub_10005FCA4();
  __chkstk_darwin(v1);
  sub_100046E44();
  v4 = v3 - v2;
  v5 = sub_100032C48(&qword_100504CF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10005FED0();
  sub_10005FB24(&qword_100504D00, &qword_100504CF8);
  v8 = v7;
  ((void (*)(uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD, void *, uint64_t, uint64_t))Regex.init<A>(_:))(sub_10005B854, 0, &type metadata for Substring, v5, v7);
  v9 = sub_10005FAAC();
  ((void (*)(uint64_t, void *, void *, uint64_t, unint64_t, uint64_t))BidirectionalCollection<>.firstMatch<A, B>(of:))(v0, &type metadata for String, &type metadata for Substring, v5, v9, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  v10 = sub_100032C48(&qword_100504D10);
  v11 = sub_1000352C8(v4, 1, v10) == 1;
  sub_10004EB70(v4, &qword_100504CF0);
  return v11;
}

uint64_t sub_10005B854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v58 = a1;
  v1 = type metadata accessor for Anchor(0);
  v2 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  v55 = v2;
  v3 = __chkstk_darwin(v1);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v52 = (char *)&v47 - v5;
  v6 = sub_100032C48(&qword_100504CF8);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  v7 = __chkstk_darwin(v6);
  v53 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for _RegexFactory(0);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100032C48(&qword_100504D18);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CharacterClass(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100032C48(&qword_100504D20);
  v47 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v47 - v25;
  v59 = 35;
  v60 = 0xE100000000000000;
  v48 = sub_10005FAE8();
  v27 = static RegexComponentBuilder.buildExpression<A>(_:)(&v61, &v59, &type metadata for String, v48);
  static RegexComponent<>.digit.getter(v27);
  v28 = type metadata accessor for RegexRepetitionBehavior(0);
  v29 = sub_100037020((uint64_t)v16, 1, 1, v28);
  makeFactory()(v29);
  sub_10005FB58(&qword_100504D30, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterClass);
  _RegexFactory.oneOrMore<A, B>(_:_:)(v20, v16, &type metadata for Substring, v17, v30);
  sub_10004EB70((uint64_t)v16, &qword_100504D18);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
  OneOrMore.init(_:)(v10, &type metadata for Substring);
  sub_10005FB24(&qword_100504D38, &qword_100504D20);
  static RegexComponentBuilder.buildExpression<A>(_:)(v26, v24, v21, v31);
  v32 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
  v33 = v32(v24, v21);
  v34 = v51;
  static Anchor.endOfLine.getter(v33);
  sub_10005FB58((unint64_t *)&unk_100504D40, (uint64_t (*)(uint64_t))&type metadata accessor for Anchor);
  v35 = v52;
  v36 = v54;
  static RegexComponentBuilder.buildExpression<A>(_:)(v52, v34, v54, v37);
  v38 = *(void (**)(char *, uint64_t))(v55 + 8);
  v39 = v34;
  v40 = v36;
  v38(v39, v36);
  v41 = v62;
  v59 = v61;
  v60 = v62;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v59, &type metadata for String, v48);
  swift_bridgeObjectRelease(v41);
  v42 = v53;
  sub_10005BC58((uint64_t)v10, (uint64_t)v26, v53);
  sub_10005BE00(v42, (uint64_t)v35, v58);
  v43 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v44 = v42;
  v45 = v57;
  v43(v44, v57);
  v43((uint64_t)v10, v45);
  v38(v35, v40);
  return v32(v26, v21);
}

uint64_t sub_10005BC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];

  v22[0] = a2;
  v22[1] = a3;
  v4 = sub_100032C48(&qword_100504CF8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v22 - v9;
  v11 = type metadata accessor for _RegexFactory(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  makeFactory()(v13);
  sub_10005FB24(&qword_100504D00, &qword_100504CF8);
  v17 = v16;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(a1, v4, v16);
  v18 = sub_100032C48(&qword_100504D20);
  sub_10005FB24(&qword_100504D38, &qword_100504D20);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v22[0], v18, v19);
  _RegexFactory.accumulate<A, B, C>(_:_:)(v10, v8, &type metadata for Substring, v4, v4, v17, v17);
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10005BE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v23[2];

  v23[1] = a3;
  v5 = sub_100032C48(&qword_100504CF8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v23 - v10;
  v12 = type metadata accessor for _RegexFactory(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  makeFactory()(v14);
  sub_10005FB24(&qword_100504D00, &qword_100504CF8);
  v18 = v17;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(a1, v5, v17);
  v19 = type metadata accessor for Anchor(0);
  sub_10005FB58((unint64_t *)&unk_100504D40, (uint64_t (*)(uint64_t))&type metadata accessor for Anchor);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(a2, v19, v20);
  _RegexFactory.accumulate<A, B, C>(_:_:)(v11, v9, &type metadata for Substring, v5, v5, v18, v18);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  v21(v11, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void sub_10005BFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  v1 = sub_100032C48(&qword_100504C98);
  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v1, &protocol witness table for String);
  sub_10004EE40(v0 + 112, (uint64_t)v4, 1);
  v3 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 112) = v2;
  swift_bridgeObjectRelease(v3);
  sub_10005C018();
}

void sub_10005C018()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Class isa;
  _BYTE v4[24];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC3asd13BindingsStore_persister);
  sub_10005FC8C(v0 + 112, (uint64_t)v4);
  sub_100054E70();
  sub_10005C0B8();
  v2 = sub_100048EC0();
  sub_1000399FC(v2, &qword_100504CE0, &off_1004CD950);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100039950();
  objc_msgSend(v1, "commitWithBindings:clearingExistingBindings:", isa, 1);

}

void sub_10005C0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_10005FC74();
  v3 = v2;
  v4 = sub_10004F358();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  sub_10005FCA4();
  __chkstk_darwin(v5);
  sub_10005FCF0();
  v38 = v6;
  v37 = type metadata accessor for BindingsStore.Binding(0);
  v30 = *(_QWORD *)(v37 - 8);
  sub_10005FCA4();
  __chkstk_darwin(v7);
  sub_10005FED0();
  v32 = v3 + 64;
  sub_10005FD04();
  v33 = v8;
  sub_1000371CC();
  v9 = 0;
  v31 = v3;
  while (v0)
  {
    sub_10005FFC8();
    v11 = v10 | (v9 << 6);
LABEL_18:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v35 = v0;
      v36 = v9;
      v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      v19 = *v17;
      v18 = v17[1];
      v20 = v15 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      sub_100054E48();
      v34 = v15;
      sub_100054E70();
      v21 = *(_QWORD *)(v30 + 72);
      do
      {
        sub_10005E5F0(v20, v1);
        v22 = sub_10005C370(v1);
        if (v22)
        {
          v23 = (void *)v22;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v1 + *(int *)(v37 + 20), v40);
          v24 = objc_allocWithZone((Class)BindingRecord);
          sub_100054E48();
          v25 = v23;
          v26 = sub_10005DE40(v19, v18, v38, v25);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v28 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v28 >= v27 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
          specialized Array._endMutation()(v29);

        }
        sub_10005E678(v1);
        v20 += v21;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v34);
      v3 = v31;
      v0 = v35;
      v9 = v36;
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= v33)
    goto LABEL_26;
  v13 = *(_QWORD *)(v32 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_17;
  v9 = v12 + 1;
  if (v12 + 1 >= v33)
    goto LABEL_26;
  v13 = *(_QWORD *)(v32 + 8 * v9);
  if (v13)
    goto LABEL_17;
  v9 = v12 + 2;
  if (v12 + 2 >= v33)
    goto LABEL_26;
  v13 = *(_QWORD *)(v32 + 8 * v9);
  if (v13)
  {
LABEL_17:
    v0 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_18;
  }
  v14 = v12 + 3;
  if (v14 >= v33)
  {
LABEL_26:
    swift_release(v3);
    sub_10004F0C0();
    return;
  }
  v13 = *(_QWORD *)(v32 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v33)
      goto LABEL_26;
    v13 = *(_QWORD *)(v32 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10005C370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[5];
  __int128 v10[2];

  sub_100032EB8(a1, (uint64_t)v10);
  v2 = sub_100032C48(&qword_1005044C0);
  v3 = sub_100039884(0, &qword_100503A68, NSNumber_ptr);
  v4 = swift_dynamicCast(v9, v10, v2, v3, 6);
  v5 = v9[0];
  sub_100032EB8(a1, (uint64_t)v10);
  if (v4 && v5)
  {
    sub_100032F94(v10);
  }
  else
  {
    sub_1000351FC(v10, (uint64_t)v9);
    v6 = sub_100039884(0, (unint64_t *)&qword_100503520, NSString_ptr);
    if (swift_dynamicCast(&v8, v9, v2, v6, 6))
      return v8;
    else
      return 0;
  }
  return v5;
}

void sub_10005C45C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[104];
  uint64_t v57;
  uint64_t v58;

  sub_10005FC74();
  v57 = v1;
  v58 = v2;
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = *v3;
  v15 = type metadata accessor for BindingsStore.Binding(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100046E44();
  v19 = v18 - v17;
  if (*(_QWORD *)(v5 + 16))
  {
    sub_100054E70();
    v20 = sub_100052C20(v11, v9);
    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease(v9);
      return;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    sub_100048EC0();
    if (v22 > 0)
    {
      v53 = v7;
      v54 = v22;
      if (v22 == 1)
        goto LABEL_12;
      v52 = v3 + 14;
      sub_10005FC8C((uint64_t)(v3 + 14), (uint64_t)&v55);
      v23 = v3[14];
      sub_100054E70();
      swift_bridgeObjectRetain(v23);
      sub_100061E54(v11, v9, v23);
      v25 = v24;
      sub_100048EC0();
      v26 = sub_100040C38();
      if (!v25)
      {
LABEL_12:
        v35 = sub_100032C48(&qword_100504CA0);
        v36 = *(unsigned __int8 *)(v16 + 80);
        v37 = (v36 + 32) & ~v36;
        v38 = swift_allocObject(v35, v37 + *(_QWORD *)(v16 + 72), v36 | 7);
        *(_OWORD *)(v38 + 16) = xmmword_1004077E0;
        sub_100032EB8(v13, v38 + v37);
        v39 = sub_10004F358();
        sub_10005FD80(v39);
        sub_10004EE40((uint64_t)(v3 + 14), (uint64_t)v56, 33);
        sub_100054E70();
LABEL_18:
        sub_100053A80();
        swift_endAccess(v56);
        sub_100048EC0();
        sub_10005C974(v11, v9, v54);
        goto LABEL_19;
      }
      v51[1] = v51;
      __chkstk_darwin(v26);
      v51[-2] = v13;
      v51[-1] = v14;
      sub_100046EC0();
      v27 = sub_10005C8BC(sub_10005FA54, (uint64_t)&v51[-4], v25);
      v29 = v28;
      sub_1000356D4();
      if ((v29 & 1) != 0)
      {
        sub_100032EB8(v13, v19);
        v40 = sub_10004F358();
        sub_10005FD80(v40);
        v30 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0)
        {
LABEL_14:
          v42 = *(_QWORD *)(v30 + 16);
          v41 = *(_QWORD *)(v30 + 24);
          if (v42 >= v41 >> 1)
          {
            sub_10003DE94(v41 > 1, v42 + 1, 1, v30);
            v30 = v50;
          }
          *(_QWORD *)(v30 + 16) = v42 + 1;
          sub_10005FE68();
          sub_10005E634(v19, v43 + v44 * v42);
          goto LABEL_17;
        }
LABEL_23:
        v46 = sub_10005FE4C();
        sub_10003DE94(v46, v47, v48, v30);
        v30 = v49;
        goto LABEL_14;
      }
      v30 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0)
      {
        if ((v27 & 0x8000000000000000) == 0)
          goto LABEL_9;
      }
      else
      {
        sub_100096878(v25);
        v30 = v45;
        if ((v27 & 0x8000000000000000) == 0)
        {
LABEL_9:
          if (v27 < *(_QWORD *)(v30 + 16))
          {
            sub_10005FE68();
            v33 = v31 + v32 * v27 + *(int *)(v15 + 20);
            v34 = sub_10004F358();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v33, v53, v34);
LABEL_17:
            sub_10004EE40((uint64_t)v52, (uint64_t)v56, 33);
            sub_100054E70();
            goto LABEL_18;
          }
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
  }
LABEL_19:
  sub_10004F0C0();
}

uint64_t sub_10005C784(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];

  sub_100032EB8(a1, (uint64_t)v12);
  sub_100032EB8(a2, (uint64_t)v13);
  v3 = sub_100032C48(&qword_1005044C0);
  sub_1000399FC(v3, (unint64_t *)&qword_100503520, NSString_ptr);
  v4 = sub_10005FCE0((uint64_t)&v11, (uint64_t)v12);
  if (!(_DWORD)v4)
  {
LABEL_4:
    sub_1000399FC(v4, &qword_100503A68, NSNumber_ptr);
    if (sub_10005FCE0((uint64_t)&v11, (uint64_t)v12))
    {
      v5 = v11;
      v6 = sub_10005FCE0((uint64_t)&v10, (uint64_t)v13);
      if ((_DWORD)v6)
        goto LABEL_6;

    }
    sub_10004EB70((uint64_t)v12, (uint64_t *)&unk_100504CD0);
    v8 = 0;
    return v8 & 1;
  }
  v5 = v11;
  v6 = sub_10005FCE0((uint64_t)&v10, (uint64_t)v13);
  if (!(_DWORD)v6)
  {

    goto LABEL_4;
  }
LABEL_6:
  v7 = v10;
  sub_1000399FC(v6, &qword_100504518, NSObject_ptr);
  v8 = static NSObject.== infix(_:_:)(v5, v7);

  sub_100032F94(v13);
  sub_100032F94(v12);
  return v8 & 1;
}

uint64_t sub_10005C8BC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return 0;
  v7 = 0;
  v8 = *(_QWORD *)(type metadata accessor for BindingsStore.Binding(0) - 8);
  v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v10 = *(_QWORD *)(v8 + 72);
  while (1)
  {
    v11 = a1(v9);
    if (v3 || (v11 & 1) != 0)
      break;
    ++v7;
    v9 += v10;
    if (v4 == v7)
      return 0;
  }
  return v7;
}

uint64_t sub_10005C974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  char v19[24];

  v7 = v3 + 112;
  result = sub_10005FC8C(v3 + 112, (uint64_t)v19);
  v9 = *(_QWORD *)(v3 + 112);
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1000371CC();
    sub_100046EC0();
    v10 = sub_100052C20(a1, a2);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      sub_1000470C4();
      sub_100039950();
      sub_1000356D4();
      v18[0] = v12;
      sub_1000470C4();
      sub_100059EE0();
      sub_100046DEC();
      v13 = sub_10005CA80(a3, v12);
      sub_10005CB78(v13, v14, v15, v16);
      sub_10004EE40(v7, (uint64_t)v18, 33);
      sub_1000371CC();
      sub_100053A80();
      swift_endAccess(v18);
      v17 = a2;
    }
    else
    {
      sub_100039950();
      v17 = v9;
    }
    return swift_bridgeObjectRelease(v17);
  }
  return result;
}

uint64_t sub_10005CA80(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_10005F94C(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
  {
    type metadata accessor for BindingsStore.Binding(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10005CB0C(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_10005F94C(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *sub_10005CB78(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain_n(a1, 2);
  v12 = (_QWORD *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(a1);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  v14 = swift_release(v12);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = a1;
  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v14);
LABEL_2:
    sub_10005EF70(a1, a2, a3, a4);
    v9 = v8;
    goto LABEL_9;
  }
  v9 = (_QWORD *)swift_dynamicCastClass(a1, v10);
  if (!v9)
  {
    swift_unknownObjectRelease(a1);
    v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease(a1);
  return v9;
}

void sub_10005CC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];
  uint64_t v18[12];
  uint64_t v19[12];
  _BYTE v20[40];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[13];

  sub_10005FC74();
  v1 = v0;
  sub_10004EE40(v0 + 112, (uint64_t)v17, 1);
  v2 = qword_1005034D8;
  sub_100054E70();
  if (v2 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v16);
  v3 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v18);

  sub_10005FA80((uint64_t)v18, (uint64_t)v24, &qword_100503A78);
  if (v24[5] == 1 || (sub_10005FEC0(), sub_10003974C(v18), !v3))
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = sub_10005FDB8();
    v5 = sub_10005FDB8();
    swift_bridgeObjectRelease(v5);
    sub_10005FFF0();
  }
  else
  {
    v4 = 0;
  }
  v6 = sub_100041510((uint64_t)v3, v4);
  sub_100039998();
  sub_1000356D4();
  sub_100059F58(v6);
  sub_100046DEC();
  sub_10005FEA0();
  v7 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v19);

  sub_10005FA80((uint64_t)v19, (uint64_t)v20, &qword_100503A78);
  if (v21 == 1)
  {
    v8 = 0;
LABEL_11:
    v9 = _swiftEmptyArrayStorage;
    v10 = sub_10005FC98((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for String);
    v11 = sub_10005FC98((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for String);
    swift_bridgeObjectRelease(v11);
    sub_1000397F4(0, v8);
    goto LABEL_12;
  }
  v9 = v22;
  v8 = v23;
  sub_10004EA20((uint64_t)v22, v23);
  sub_10003974C(v19);
  if (!v9)
    goto LABEL_11;
  v10 = v8;
LABEL_12:
  v12 = sub_100041510((uint64_t)v9, v10);
  sub_100046DEC();
  sub_1000356D4();
  sub_10005A128(v12);
  sub_100035714();
  sub_10005FEA0();
  sub_10005CEB0();
  v14 = v13;
  sub_1000356D4();
  sub_100048EC0();
  sub_100039998();
  v15 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  sub_10005C018();
  sub_10004F0C0();
}

void sub_10005CEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;

  sub_10005FC74();
  v69 = v0;
  v2 = v1;
  v4 = v3;
  v5 = sub_10004F358();
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  sub_10005FCA4();
  __chkstk_darwin(v6);
  sub_10005FCF0();
  v68 = v7;
  v70 = v4 + 64;
  sub_10005FDDC();
  v10 = v9 & v8;
  v71 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain_n(v4, 2);
  v12 = 0;
  v65 = 0;
  v13 = v4;
  while (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
LABEL_24:
    v20 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(v2 + 16);
    sub_10005FE98();
    if (!v23)
      goto LABEL_38;
    v24 = sub_100052C20(v21, v22);
    if ((v25 & 1) == 0 || !*(_QWORD *)(v69 + 16))
      goto LABEL_38;
    v26 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v24);
    sub_10005FE98();
    v27 = v69;
    v28 = sub_100052C20(v21, v22);
    if ((v29 & 1) == 0)
    {
      sub_100046EEC();
      goto LABEL_38;
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
    v31 = sub_100046EEC();
    if (v30 > 0)
    {
      if (__OFSUB__(0, v26))
        goto LABEL_63;
      Date.init(timeIntervalSinceNow:)(v31, (double)-v26);
      if (*(_QWORD *)(v13 + 16))
      {
        sub_10005FE98();
        v32 = sub_10005FD48();
        if ((v33 & 1) != 0)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v32);
          sub_100046EC0();
          v35 = sub_100046EEC();
          v64 = &v60;
          __chkstk_darwin(v35);
          *(&v60 - 2) = v68;
          v36 = v65;
          v72 = sub_10005A2F8((uint64_t (*)(char *))sub_10005E6B4, (uint64_t)(&v60 - 4), v34);
          swift_bridgeObjectRetain(v72);
          sub_100059EE0();
          v65 = v36;
          if (v36)
            goto LABEL_65;
          sub_1000356D4();
          v37 = sub_10005CA80(v30, v72);
          v39 = v37;
          v63 = v40;
          v64 = (uint64_t *)v41;
          if (v41 != v38 >> 1)
          {
            v42 = v38;
            if ((v38 & 1) == 0)
            {
              swift_unknownObjectRetain_n(v37, 2);
              goto LABEL_36;
            }
            v56 = type metadata accessor for __ContiguousArrayStorageBase(0);
            v57 = swift_unknownObjectRetain_n(v39, 4);
            v61 = v56;
            v58 = (_QWORD *)swift_dynamicCastClass(v57, v56);
            if (!v58)
            {
              sub_10005FDCC();
              v58 = _swiftEmptyArrayStorage;
            }
            v62 = v42 >> 1;
            v59 = v58[2];
            swift_release(v58);
            if (__OFSUB__(v62, v64))
              goto LABEL_64;
            if (v59 == v62 - (_QWORD)v64)
            {
              v44 = (_QWORD *)swift_dynamicCastClass(v39, v61);
              sub_10005FDCC();
              if (!v44)
              {
                v44 = _swiftEmptyArrayStorage;
                goto LABEL_55;
              }
            }
            else
            {
              swift_unknownObjectRelease(v39);
LABEL_36:
              sub_10005EF70(v39, v63, (uint64_t)v64, v42);
              v44 = v43;
LABEL_55:
              sub_10005FDCC();
            }
            sub_10005FEB8();
            v72 = v13;
            sub_100053E24((uint64_t)v44, v21, v22);
            v13 = v72;
            swift_unknownObjectRelease_n(v39, 2);
            goto LABEL_57;
          }
        }
        else
        {
          sub_100046EEC();
        }
      }
      sub_1000371CC();
      v50 = sub_10005FD48();
      v52 = v51;
      sub_100039950();
      if ((v52 & 1) == 0)
      {
        sub_10005FDCC();
        v55 = v22;
        goto LABEL_58;
      }
      v53 = sub_10005FEB8();
      v72 = v13;
      sub_100032C48(&qword_100504C90);
      sub_10005FF10(v53);
      v13 = v72;
      swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v72 + 48) + 16 * v50 + 8));
      v54 = sub_100032C48(&qword_100504C98);
      _NativeDictionary._delete(at:)(v50, v13, &type metadata for String, v54, &protocol witness table for String);
      sub_10005FDCC();
      sub_1000356D4();
LABEL_57:
      sub_100046EEC();
      v55 = 0x8000000000000000;
LABEL_58:
      swift_bridgeObjectRelease(v55);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
    }
    else
    {
LABEL_38:
      sub_1000371CC();
      v45 = sub_10005FD48();
      v47 = v46;
      sub_100039950();
      if ((v47 & 1) != 0)
      {
        v48 = sub_10005FEB8();
        v72 = v13;
        sub_100032C48(&qword_100504C90);
        sub_10005FF10(v48);
        v13 = v72;
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v72 + 48) + 16 * v45 + 8));
        v49 = sub_100032C48(&qword_100504C98);
        _NativeDictionary._delete(at:)(v45, v13, &type metadata for String, v49, &protocol witness table for String);
        sub_1000356D4();
        sub_100046EEC();
        sub_10005FEF4();
      }
      else
      {
        sub_100046EEC();
      }
    }
  }
  v16 = __OFADD__(v12++, 1);
  if (v16)
  {
    __break(1u);
    goto LABEL_62;
  }
  if (v12 >= v71)
    goto LABEL_60;
  v17 = *(_QWORD *)(v70 + 8 * v12);
  if (v17)
  {
LABEL_23:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
    goto LABEL_24;
  }
  sub_10005FE5C();
  if (v18 == v16)
    goto LABEL_60;
  sub_10005FE40();
  if (v17)
    goto LABEL_22;
  sub_10005FE5C();
  if (v18 == v16)
    goto LABEL_60;
  sub_10005FE40();
  if (v17)
    goto LABEL_22;
  sub_10005FE5C();
  if (v18 == v16)
    goto LABEL_60;
  sub_10005FE40();
  if (v17)
    goto LABEL_22;
  sub_10005FE5C();
  if (v18 == v16)
    goto LABEL_60;
  sub_10005FE40();
  if (v17)
    goto LABEL_22;
  sub_10005FE5C();
  if (v18 == v16)
  {
LABEL_60:
    swift_release(v4);
    sub_10004F0C0();
    return;
  }
  sub_10005FE40();
  if (v17)
  {
LABEL_22:
    v12 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v71)
      goto LABEL_60;
    v17 = *(_QWORD *)(v70 + 8 * v12);
    ++v19;
    if (v17)
      goto LABEL_23;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_release(v72);
  __break(1u);
}

uint64_t sub_10005D3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BindingsStore.Binding(0);
  return static Date.> infix(_:_:)(a1 + *(int *)(v4 + 20), a2) & 1;
}

uint64_t sub_10005D418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  sub_10005FC8C(v0 + 112, (uint64_t)v4);
  sub_1000371CC();
  sub_10005D45C();
  v2 = v1;
  sub_100039950();
  return v2;
}

void sub_10005D45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t j;
  __int128 v64;
  __int128 v65[2];
  _QWORD *v66;

  sub_10005FC74();
  v2 = v1;
  v59 = *(_QWORD *)(type metadata accessor for BindingsStore.Binding(0) - 8);
  sub_10005FCA4();
  __chkstk_darwin(v3);
  sub_100046E44();
  v6 = v5 - v4;
  v7 = sub_100032C48(&qword_100504C70);
  sub_10005FCA4();
  __chkstk_darwin(v8);
  sub_10005FCF0();
  v58 = v9;
  sub_100032C48(&qword_100504C78);
  sub_10005FCA4();
  v11 = __chkstk_darwin(v10);
  v13 = (unint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v53 - v14);
  v53 = v2 + 64;
  sub_10005FD04();
  v54 = v16;
  v55 = v2;
  sub_1000371CC();
  v17 = 0;
  v18 = _swiftEmptyDictionarySingleton;
  v61 = v13;
  v62 = v7;
  if (!v0)
    goto LABEL_3;
LABEL_2:
  sub_10005FFC8();
  v56 = v0;
  v57 = v19;
  for (i = v20 | (v19 << 6); ; i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    v26 = *(_QWORD *)(v55 + 56);
    v27 = (_QWORD *)(*(_QWORD *)(v55 + 48) + 16 * i);
    v28 = v27[1];
    *(_QWORD *)&v64 = *v27;
    *((_QWORD *)&v64 + 1) = v28;
    v29 = *(_QWORD *)(v26 + 8 * i);
    v30 = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRetain(v28);
    v60 = v29;
    sub_100046EC0();
    v31 = 0;
    for (j = v30; ; v30 = j)
    {
      if (v31 == v30)
      {
        v32 = 1;
      }
      else
      {
        if (v31 >= *(_QWORD *)(v60 + 16))
          goto LABEL_41;
        v30 = v31 + 1;
        v33 = v58 + *(int *)(v7 + 48);
        sub_10005E5F0(v60+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v31, v33);
        v34 = (uint64_t)v13 + *(int *)(v7 + 48);
        *v13 = v31;
        sub_10005E634(v33, v34);
        v32 = 0;
      }
      v31 = v30;
      sub_100037020((uint64_t)v13, v32, 1, v7);
      sub_10005FA80((uint64_t)v13, (uint64_t)v15, &qword_100504C78);
      if (sub_1000352C8((uint64_t)v15, 1, v7) == 1)
        break;
      v35 = *v15;
      sub_10005E634((uint64_t)v15 + *(int *)(v7 + 48), v6);
      if (v35)
      {
        *(_QWORD *)&v65[0] = 35;
        *((_QWORD *)&v65[0] + 1) = 0xE100000000000000;
        if (__OFADD__(v35, 1))
          goto LABEL_40;
        v66 = (_QWORD *)(v35 + 1);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        String.append(_:)(v36);
        sub_100040C38();
        v37 = (Swift::String)v65[0];
        v65[0] = v64;
        swift_bridgeObjectRetain(*((_QWORD *)&v64 + 1));
        String.append(_:)(v37);
        sub_100035714();
        v38 = *((_QWORD *)&v65[0] + 1);
        v39 = *(_QWORD *)&v65[0];
      }
      else
      {
        v38 = *((_QWORD *)&v64 + 1);
        sub_100054E48();
        v39 = v64;
      }
      v40 = v6;
      sub_100032EB8(v6, (uint64_t)v65);
      v41 = sub_10005FEB8();
      v66 = v18;
      v42 = sub_100052C20(v39, v38);
      if (__OFADD__(v18[2], (v43 & 1) == 0))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v44 = v42;
      v45 = v43;
      sub_100032C48((uint64_t *)&unk_100504C80);
      if (sub_10005FF10(v41))
      {
        v46 = sub_100052C20(v39, v38);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_45;
        v44 = v46;
      }
      v18 = v66;
      if ((v45 & 1) != 0)
      {
        v48 = (_QWORD *)(v66[7] + 40 * v44);
        sub_100032F94(v48);
        sub_1000351FC(v65, (uint64_t)v48);
      }
      else
      {
        v66[(v44 >> 6) + 8] |= 1 << v44;
        v49 = (uint64_t *)(v18[6] + 16 * v44);
        *v49 = v39;
        v49[1] = v38;
        sub_1000351FC(v65, v18[7] + 40 * v44);
        v50 = v18[2];
        v51 = __OFADD__(v50, 1);
        v52 = v50 + 1;
        if (v51)
          goto LABEL_42;
        v18[2] = v52;
        sub_100054E48();
      }
      swift_bridgeObjectRelease(v38);
      sub_10005FEF4();
      v6 = v40;
      sub_10005E678(v40);
      v13 = v61;
      v7 = v62;
    }
    swift_bridgeObjectRelease(*((_QWORD *)&v64 + 1));
    swift_bridgeObjectRelease(v60);
    v0 = v56;
    v17 = v57;
    if (v56)
      goto LABEL_2;
LABEL_3:
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v22 >= v54)
      goto LABEL_38;
    v23 = *(_QWORD *)(v53 + 8 * v22);
    v24 = v17 + 1;
    if (!v23)
    {
      v24 = v17 + 2;
      if (v17 + 2 >= v54)
        goto LABEL_38;
      v23 = *(_QWORD *)(v53 + 8 * v24);
      if (!v23)
      {
        v24 = v17 + 3;
        if (v17 + 3 >= v54)
          goto LABEL_38;
        v23 = *(_QWORD *)(v53 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_16:
    v56 = (v23 - 1) & v23;
    v57 = v24;
  }
  v25 = v17 + 4;
  if (v17 + 4 >= v54)
  {
LABEL_38:
    swift_release(v55);
    sub_10004F0C0();
    return;
  }
  v23 = *(_QWORD *)(v53 + 8 * v25);
  if (v23)
  {
    v24 = v17 + 4;
    goto LABEL_16;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v54)
      goto LABEL_38;
    v23 = *(_QWORD *)(v53 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_16;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10005D910()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  sub_100032F94((_QWORD *)(v0 + 120));
  v1 = type metadata accessor for Logger(0);
  sub_10004F104(v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC3asd13BindingsStore_persister));
  swift_defaultActor_destroy(v0);
  sub_100028D0C();
}

uint64_t sub_10005D968()
{
  uint64_t v0;

  sub_10005D910();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10005D980()
{
  return type metadata accessor for BindingsStore(0);
}

uint64_t type metadata accessor for BindingsStore(uint64_t a1)
{
  return sub_10004E4E4(a1, qword_100504AC8, (uint64_t)&nominal type descriptor for BindingsStore);
}

uint64_t sub_10005D99C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_100408C80;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100408C98;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_10005DA34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

uint64_t sub_10005DADC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  sub_100032F94(a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10005DB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *sub_10005DB94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  sub_100057D9C(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_10005DBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_10005DC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100032F94((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10005DCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005DCD4);
}

uint64_t sub_10005DCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10004F358();
    return sub_1000352C8(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10005DD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005DD50);
}

uint64_t sub_10005DD50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_10004F358();
    return sub_100037020(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BindingsStore.Binding(uint64_t a1)
{
  return sub_10004E4E4(a1, qword_100504C38, (uint64_t)&nominal type descriptor for BindingsStore.Binding);
}

uint64_t sub_10005DDCC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100408C80;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

id sub_10005DE40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  NSString v9;
  Class isa;
  id v11;
  uint64_t v12;

  v5 = v4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v5, "initWithKey:updatedDate:value:", v9, isa, a4);

  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a3, v12);
  return v11;
}

void sub_10005DEDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD v33[9];

  sub_10005FDF8();
  sub_100032C48(&qword_100503D80);
  v32 = v3;
  v6 = sub_10005FF18(v2, v1);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_36;
  sub_10005FE80();
  v31 = v7;
  sub_10005FD58();
  v29 = v0;
  v30 = v8;
  sub_100060024();
  v9 = 0;
  if (!v4)
    goto LABEL_4;
LABEL_3:
  sub_100060010();
  for (i = v10 | (v9 << 6); ; i = v15 + (v9 << 6))
  {
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * i);
    if ((v32 & 1) == 0)
    {
      sub_1000470C4();
      v17 = v16;
    }
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    sub_10005FFBC((uint64_t)v33);
    Hasher._finalize()();
    sub_10005FD98();
    if (v18)
    {
      sub_10005FF88();
      while (++v21 != v22 || (v20 & 1) == 0)
      {
        v23 = v21 == v22;
        if (v21 == v22)
          v21 = 0;
        v20 |= v23;
        if (*(_QWORD *)(v5 + 8 * v21) != -1)
        {
          sub_10005FF74();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    sub_10005FF9C();
LABEL_27:
    sub_10005FCB0(v19);
    *(_QWORD *)(v25 + 8 * v24) = v16;
    ++*(_QWORD *)(v6 + 16);
    if (v4)
      goto LABEL_3;
LABEL_4:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v30)
    {
      sub_10005FD78();
      v0 = v29;
      v13 = v31;
      goto LABEL_31;
    }
    v13 = v31;
    ++v9;
    if (!v31[v12])
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v30)
        goto LABEL_29;
      if (!v31[v9])
        break;
    }
LABEL_15:
    sub_10005FFFC();
  }
  v14 = v12 + 2;
  if (v14 < v30)
  {
    if (!v31[v14])
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_39;
        if (v9 >= v30)
          goto LABEL_29;
        ++v14;
        if (v31[v9])
          goto LABEL_15;
      }
    }
    v9 = v14;
    goto LABEL_15;
  }
LABEL_29:
  sub_10005FD78();
  v0 = v29;
LABEL_31:
  if ((v32 & 1) != 0)
  {
    sub_10005FEFC();
    if (v27 != v28)
      *v13 = -1 << v26;
    else
      sub_10005FE2C(v26);
    *(_QWORD *)(v2 + 16) = 0;
  }
LABEL_36:
  sub_10005FD78();
  *v0 = v6;
}

Swift::Int sub_10005E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100032C48(&qword_100504CB0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v21[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v23, v22);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v23;
    v33[1] = v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v28) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v36)
    {
      swift_release(v5);
      v3 = v35;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_35;
      v19 = *(_QWORD *)(v37 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v36)
  {
    v19 = *(_QWORD *)(v37 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v36)
          goto LABEL_35;
        v19 = *(_QWORD *)(v37 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v35;
LABEL_37:
  if ((v38 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_100074B20(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_10005E3D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  _QWORD v32[9];
  __int128 v33[2];

  sub_10005FDF8();
  sub_100032C48((uint64_t *)&unk_100504D70);
  v31 = v3;
  v6 = sub_10005FF18(v2, v1);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  sub_10005FE80();
  v30 = v7;
  sub_10005FD58();
  v28 = v0;
  v29 = v8;
  sub_100060024();
  v9 = 0;
  if (!v4)
    goto LABEL_4;
LABEL_3:
  sub_100060010();
  for (i = v10 | (v9 << 6); ; i = v15 + (v9 << 6))
  {
    v16 = (__int128 *)(*(_QWORD *)(v2 + 56) + 40 * i);
    if ((v31 & 1) != 0)
    {
      sub_1000351FC(v16, (uint64_t)v33);
    }
    else
    {
      sub_100032EB8((uint64_t)v16, (uint64_t)v33);
      sub_1000470C4();
    }
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    sub_10005FFBC((uint64_t)v32);
    Hasher._finalize()();
    sub_10005FD98();
    if (v17)
    {
      sub_10005FF88();
      while (++v20 != v21 || (v19 & 1) == 0)
      {
        v22 = v20 == v21;
        if (v20 == v21)
          v20 = 0;
        v19 |= v22;
        if (*(_QWORD *)(v5 + 8 * v20) != -1)
        {
          sub_10005FF74();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    sub_10005FF9C();
LABEL_28:
    sub_10005FCB0(v18);
    sub_1000351FC(v33, v24 + 40 * v23);
    ++*(_QWORD *)(v6 + 16);
    if (v4)
      goto LABEL_3;
LABEL_4:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_39;
    if (v12 >= v29)
    {
      sub_10005FD78();
      v0 = v28;
      v13 = v30;
      goto LABEL_32;
    }
    v13 = v30;
    ++v9;
    if (!v30[v12])
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v29)
        goto LABEL_30;
      if (!v30[v9])
        break;
    }
LABEL_15:
    sub_10005FFFC();
  }
  v14 = v12 + 2;
  if (v14 < v29)
  {
    if (!v30[v14])
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_40;
        if (v9 >= v29)
          goto LABEL_30;
        ++v14;
        if (v30[v9])
          goto LABEL_15;
      }
    }
    v9 = v14;
    goto LABEL_15;
  }
LABEL_30:
  sub_10005FD78();
  v0 = v28;
LABEL_32:
  if ((v31 & 1) != 0)
  {
    sub_10005FEFC();
    if (v26 != v27)
      *v13 = -1 << v25;
    else
      sub_10005FE2C(v25);
    *(_QWORD *)(v2 + 16) = 0;
  }
LABEL_37:
  sub_10005FD78();
  *v0 = v6;
}

uint64_t sub_10005E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E678(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005E6B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10005D3CC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_10005E6D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  int64_t v115;
  char v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  Swift::Int v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v2 = v1;
  v140 = sub_10005FE20();
  v133 = *(_QWORD *)(v140 - 8);
  sub_10005FCA4();
  __chkstk_darwin(v3);
  sub_100059EB4();
  v130 = v4;
  sub_10005FE14();
  __chkstk_darwin(v5);
  v141 = (uint64_t)&v124 - v6;
  sub_10005FE14();
  __chkstk_darwin(v7);
  v138 = (uint64_t)&v124 - v8;
  sub_10005FE14();
  __chkstk_darwin(v9);
  v137 = (uint64_t)&v124 - v10;
  v11 = v0[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11)
        sub_10005F088(0, v11, 1, v0);
      goto LABEL_120;
    }
    goto LABEL_142;
  }
  v13 = v12;
  v139 = v0;
  v127 = sub_10003D3D4(v11 / 2);
  v132 = v14;
  if (v11 <= 0)
  {
LABEL_106:
    v16 = (char *)_swiftEmptyArrayStorage;
    v61 = _swiftEmptyArrayStorage[2];
LABEL_107:
    if (v61 < 2)
    {
LABEL_118:
      swift_bridgeObjectRelease(v16);
      if (v11 >= -1)
        goto LABEL_119;
      goto LABEL_146;
    }
    v117 = *v139;
    while (1)
    {
      v118 = v61 - 2;
      if (v61 < 2)
        break;
      if (!v117)
        goto LABEL_150;
      v105 = v16;
      v119 = *(_QWORD *)&v16[16 * v118 + 32];
      v120 = *(_QWORD *)&v16[16 * v61 + 24];
      sub_10005F260(v117 + *(_QWORD *)(v133 + 72) * v119, v117 + *(_QWORD *)(v133 + 72) * *(_QWORD *)&v16[16 * v61 + 16], v117 + *(_QWORD *)(v133 + 72) * v120, v132);
      if (v2)
        goto LABEL_104;
      if (v120 < v119)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v105 = sub_10005F670((uint64_t)v16);
      if (v118 >= *((_QWORD *)v105 + 2))
        goto LABEL_138;
      v121 = &v105[16 * v118 + 32];
      *(_QWORD *)v121 = v119;
      *((_QWORD *)v121 + 1) = v120;
      v122 = *((_QWORD *)v105 + 2);
      if (v61 > v122)
        goto LABEL_139;
      memmove(&v105[16 * v61 + 16], &v105[16 * v61 + 32], 16 * (v122 - v61));
      *((_QWORD *)v105 + 2) = v122 - 1;
      v61 = v122 - 1;
      v16 = v105;
      if (v122 <= 2)
        goto LABEL_118;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    return;
  }
  v126 = v13;
  v15 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  v17 = v11;
  v128 = v11;
  while (1)
  {
    v18 = v15;
    v19 = v15 + 1;
    v131 = v15;
    if (v15 + 1 >= v17)
    {
      ++v15;
      goto LABEL_31;
    }
    v134 = v2;
    v20 = *v139;
    v21 = *(_QWORD *)(v133 + 72);
    v22 = *v139 + v21 * v19;
    v136 = v17;
    v23 = v137;
    sub_10005E5F0(v22, v137);
    sub_10005FFB0(v20 + v21 * v15);
    v24 = static Date.> infix(_:_:)(v23 + *(int *)(v140 + 20), v17 + *(int *)(v140 + 20));
    sub_10005E678(v17);
    v17 = v136;
    sub_10005E678(v23);
    v15 += 2;
    v135 = v20;
    v142 = v21;
    if (v18 + 2 < v17)
    {
      v25 = v21 * v19;
      v26 = v20;
      v27 = v21 * v15;
      do
      {
        v28 = v137;
        sub_10005E5F0(v26 + v27, v137);
        sub_10005FFB0(v26 + v25);
        v29 = static Date.> infix(_:_:)(v28 + *(int *)(v140 + 20), v17 + *(int *)(v140 + 20));
        sub_10005E678(v17);
        sub_10005E678(v28);
        if (((v24 ^ v29) & 1) != 0)
        {
          v2 = v134;
          v18 = v131;
          v17 = v136;
          if ((v24 & 1) == 0)
            goto LABEL_31;
          goto LABEL_15;
        }
        ++v15;
        v26 += v142;
      }
      while (v15 < v136);
      v17 = v136;
      v15 = v136;
      v2 = v134;
      v18 = v131;
      if ((v24 & 1) == 0)
        goto LABEL_31;
LABEL_15:
      if (v15 < v18)
        goto LABEL_143;
      if (v18 >= v15)
        goto LABEL_31;
      v125 = v16;
      v134 = v2;
      v30 = 0;
      v31 = v142;
      v32 = v142 * (v15 - 1);
      v33 = v18;
      v34 = v15 * v142;
      v35 = v33;
      v36 = v33 * v142;
      v37 = v139;
      do
      {
        if (v35 != v15 + v30 - 1)
        {
          v38 = v135;
          if (!v135)
            goto LABEL_149;
          v39 = v135 + v36;
          v40 = v135 + v32;
          sub_10005E634(v135 + v36, v130);
          if (v36 < v32 || v39 >= v38 + v34)
          {
            sub_10005FEE8(v38 + v36, v38 + v32);
            v31 = v142;
          }
          else
          {
            v31 = v142;
            if (v36 != v32)
              swift_arrayInitWithTakeBackToFront(v39, v40, 1, v140);
          }
          sub_10005E634(v130, v40);
          v37 = v139;
        }
        ++v35;
        --v30;
        v32 -= v31;
        v34 -= v31;
        v36 += v31;
      }
      while (v35 < v15 + v30);
      v2 = v134;
      v16 = v125;
      v18 = v131;
      v17 = v136;
      goto LABEL_32;
    }
    v2 = v134;
    if ((v24 & 1) != 0)
      goto LABEL_15;
LABEL_31:
    v37 = v139;
LABEL_32:
    if (v15 < v17)
    {
      if (__OFSUB__(v15, v18))
        goto LABEL_141;
      if (v15 - v18 < v126)
      {
        if (__OFADD__(v18, v126))
          goto LABEL_144;
        if (v18 + v126 >= v17)
          v42 = v17;
        else
          v42 = v18 + v126;
        if (v42 < v18)
          goto LABEL_145;
        if (v15 != v42)
        {
          v125 = v16;
          v134 = v2;
          v43 = *(_QWORD *)(v133 + 72);
          v44 = v43 * (v15 - 1);
          v135 = v43;
          v45 = v15 * v43;
          v129 = v42;
          do
          {
            v46 = 0;
            v136 = v15;
            while (1)
            {
              v142 = v18;
              v47 = *v37;
              v48 = v45;
              v49 = v45 + v46 + *v37;
              v50 = v137;
              v51 = v37;
              sub_10005E5F0(v49, v137);
              v52 = v44;
              v53 = v44 + v46 + v47;
              v54 = v138;
              sub_10005E5F0(v53, v138);
              LOBYTE(v47) = static Date.> infix(_:_:)(v50 + *(int *)(v140 + 20), v54 + *(int *)(v140 + 20));
              sub_10005E678(v54);
              sub_10005E678(v50);
              if ((v47 & 1) == 0)
                break;
              v55 = *v51;
              if (!*v51)
                goto LABEL_147;
              v45 = v48;
              v56 = v55 + v48 + v46;
              v44 = v52;
              v57 = v55 + v52 + v46;
              sub_10005E634(v56, v141);
              sub_10005FEE8(v56, v57);
              sub_10005E634(v141, v57);
              v58 = v136;
              v46 -= v135;
              v18 = v142 + 1;
              v37 = v139;
              if (v136 == v142 + 1)
                goto LABEL_48;
            }
            v58 = v136;
            v44 = v52;
            v45 = v48;
            v37 = v51;
LABEL_48:
            v15 = v58 + 1;
            v44 += v135;
            v45 += v135;
            v18 = v131;
          }
          while (v15 != v129);
          v15 = v129;
          v2 = v134;
          v16 = v125;
        }
      }
    }
    if (v15 < v18)
      goto LABEL_140;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
    {
      v114 = (char *)sub_10005FE4C();
      v16 = sub_10005F580(v114, v115, v116, v16);
    }
    v60 = *((_QWORD *)v16 + 2);
    v59 = *((_QWORD *)v16 + 3);
    v61 = v60 + 1;
    if (v60 >= v59 >> 1)
      v16 = sub_10005F580((char *)(v59 > 1), v60 + 1, 1, v16);
    v134 = v2;
    *((_QWORD *)v16 + 2) = v61;
    v62 = v16 + 32;
    v63 = &v16[16 * v60 + 32];
    *(_QWORD *)v63 = v18;
    *((_QWORD *)v63 + 1) = v15;
    if (v60)
      break;
    v61 = 1;
LABEL_98:
    v17 = v139[1];
    v11 = v128;
    v2 = v134;
    if (v15 >= v17)
      goto LABEL_107;
  }
  while (1)
  {
    v64 = v61 - 1;
    if (v61 >= 4)
    {
      v69 = &v62[16 * v61];
      v70 = *((_QWORD *)v69 - 8);
      v71 = *((_QWORD *)v69 - 7);
      v75 = __OFSUB__(v71, v70);
      v72 = v71 - v70;
      if (v75)
        goto LABEL_125;
      v74 = *((_QWORD *)v69 - 6);
      v73 = *((_QWORD *)v69 - 5);
      v75 = __OFSUB__(v73, v74);
      v67 = v73 - v74;
      v68 = v75;
      if (v75)
        goto LABEL_126;
      v76 = v61 - 2;
      v77 = &v62[16 * v61 - 32];
      v79 = *(_QWORD *)v77;
      v78 = *((_QWORD *)v77 + 1);
      v75 = __OFSUB__(v78, v79);
      v80 = v78 - v79;
      if (v75)
        goto LABEL_127;
      v75 = __OFADD__(v67, v80);
      v81 = v67 + v80;
      if (v75)
        goto LABEL_129;
      if (v81 >= v72)
      {
        v99 = &v62[16 * v64];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v75 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v75)
          goto LABEL_135;
        v92 = v67 < v102;
        goto LABEL_87;
      }
    }
    else
    {
      if (v61 != 3)
      {
        v93 = *((_QWORD *)v16 + 4);
        v94 = *((_QWORD *)v16 + 5);
        v75 = __OFSUB__(v94, v93);
        v86 = v94 - v93;
        v87 = v75;
        goto LABEL_81;
      }
      v66 = *((_QWORD *)v16 + 4);
      v65 = *((_QWORD *)v16 + 5);
      v75 = __OFSUB__(v65, v66);
      v67 = v65 - v66;
      v68 = v75;
    }
    if ((v68 & 1) != 0)
      goto LABEL_128;
    v76 = v61 - 2;
    v82 = &v62[16 * v61 - 32];
    v84 = *(_QWORD *)v82;
    v83 = *((_QWORD *)v82 + 1);
    v85 = __OFSUB__(v83, v84);
    v86 = v83 - v84;
    v87 = v85;
    if (v85)
      goto LABEL_130;
    v88 = &v62[16 * v64];
    v90 = *(_QWORD *)v88;
    v89 = *((_QWORD *)v88 + 1);
    v75 = __OFSUB__(v89, v90);
    v91 = v89 - v90;
    if (v75)
      goto LABEL_132;
    if (__OFADD__(v86, v91))
      goto LABEL_134;
    if (v86 + v91 >= v67)
    {
      v92 = v67 < v91;
LABEL_87:
      if (v92)
        v64 = v76;
      goto LABEL_89;
    }
LABEL_81:
    if ((v87 & 1) != 0)
      goto LABEL_131;
    v95 = &v62[16 * v64];
    v97 = *(_QWORD *)v95;
    v96 = *((_QWORD *)v95 + 1);
    v75 = __OFSUB__(v96, v97);
    v98 = v96 - v97;
    if (v75)
      goto LABEL_133;
    if (v98 < v86)
      goto LABEL_98;
LABEL_89:
    v103 = v64 - 1;
    if (v64 - 1 >= v61)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    if (!*v139)
      goto LABEL_148;
    v104 = v15;
    v105 = v16;
    v106 = &v62[16 * v103];
    v107 = v62;
    v108 = *(_QWORD *)v106;
    v109 = v107;
    v110 = &v107[16 * v64];
    v111 = *((_QWORD *)v110 + 1);
    v112 = v134;
    sub_10005F260(*v139 + *(_QWORD *)(v133 + 72) * *(_QWORD *)v106, *v139 + *(_QWORD *)(v133 + 72) * *(_QWORD *)v110, *v139 + *(_QWORD *)(v133 + 72) * v111, v132);
    v134 = v112;
    if (v112)
      break;
    if (v111 < v108)
      goto LABEL_122;
    if (v64 > *((_QWORD *)v105 + 2))
      goto LABEL_123;
    *(_QWORD *)v106 = v108;
    *(_QWORD *)&v109[16 * v103 + 8] = v111;
    v113 = *((_QWORD *)v105 + 2);
    if (v64 >= v113)
      goto LABEL_124;
    v62 = v109;
    v16 = v105;
    v61 = v113 - 1;
    memmove(v110, v110 + 16, 16 * (v113 - 1 - v64));
    *((_QWORD *)v105 + 2) = v113 - 1;
    v15 = v104;
    if (v113 <= 2)
      goto LABEL_98;
  }
  v11 = v128;
  v2 = v134;
LABEL_104:
  swift_bridgeObjectRelease(v105);
  if (v11 < -1)
  {
    __break(1u);
    goto LABEL_106;
  }
LABEL_119:
  v123 = v127;
  *(_QWORD *)(v127 + 16) = 0;
  swift_bridgeObjectRelease(v123);
LABEL_120:
  sub_100046BF8();
}

void sub_10005EF70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v13 = _swiftEmptyArrayStorage;
LABEL_12:
      if (v4 != a3)
      {
        v16 = type metadata accessor for BindingsStore.Binding(0);
        sub_1000747E4(a2 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a3, v5, (unint64_t)v13+ ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80)));
        return;
      }
      goto LABEL_17;
    }
    v8 = sub_100032C48(&qword_100504CA0);
    v9 = *(_QWORD *)(type metadata accessor for BindingsStore.Binding(0) - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(unsigned __int8 *)(v9 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v5, v11 | 7);
    v14 = j__malloc_size(v13);
    if (v10)
    {
      if (v14 - v12 != 0x8000000000000000 || v10 != -1)
      {
        v13[2] = v5;
        v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

void sub_10005F088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a1;
  v27 = type metadata accessor for BindingsStore.Binding(0);
  __chkstk_darwin(v27);
  sub_10005FFDC();
  v28 = v7;
  sub_10005FE14();
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - v10;
  __chkstk_darwin(v9);
  v14 = (char *)&v22 - v13;
  v26 = a3;
  v23 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v30 = v15 * (v26 - 1);
    v25 = v15;
    v29 = v15 * v26;
    while (2)
    {
      v16 = 0;
      v17 = v24;
      do
      {
        v18 = *a4;
        sub_10005E5F0(v29 + v16 + *a4, (uint64_t)v14);
        sub_10005E5F0(v30 + v16 + v18, (uint64_t)v11);
        LOBYTE(v18) = static Date.> infix(_:_:)(&v14[*(int *)(v27 + 20)], &v11[*(int *)(v27 + 20)]);
        sub_10005E678((uint64_t)v11);
        sub_10005E678((uint64_t)v14);
        if ((v18 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = v19 + v29 + v16;
        v21 = v19 + v30 + v16;
        sub_10005E634(v20, v28);
        swift_arrayInitWithTakeFrontToBack(v20, v21, 1, v27);
        sub_10005E634(v28, v21);
        v16 -= v25;
        ++v17;
      }
      while (v26 != v17);
      v30 += v25;
      v29 += v25;
      if (++v26 != v23)
        continue;
      break;
    }
  }
  sub_100046BF8();
}

uint64_t sub_10005F260(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char v24;
  BOOL v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v36;
  int64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = sub_10005FE20();
  __chkstk_darwin(v47);
  sub_10005FFDC();
  v46 = v9;
  sub_10005FE14();
  result = __chkstk_darwin(v10);
  v45 = (uint64_t)&v40 - v12;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v15 = a2 - v4;
  if (a2 - v4 == 0x8000000000000000 && v14 == -1)
    goto LABEL_75;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_76;
  v19 = v15 / v14;
  v20 = v17 / v14;
  if (v15 / v14 >= v17 / v14)
  {
    result = sub_10003ECFC(a2, v17 / v14, a4);
    v28 = v20 * v14;
    v21 = a4 + v20 * v14;
    if (v28 < 1 || v4 >= a2)
      goto LABEL_69;
    v43 = a4;
    v44 = -v14;
    v41 = v14;
    v42 = v4;
    while (1)
    {
      v30 = a3;
      v31 = v44;
      v32 = v45;
      a3 += v44;
      sub_10005E5F0(v21 + v44, v45);
      sub_10005FF5C(a2 + v31);
      v33 = static Date.> infix(_:_:)(v32 + *(int *)(v47 + 20), v31 + *(int *)(v47 + 20));
      sub_10005E678(v31);
      result = sub_10005E678(v32);
      if ((v33 & 1) != 0)
      {
        if (v30 >= a2 && a3 < a2)
        {
          v36 = v42;
          a4 = v43;
          if (v30 != a2)
            result = sub_10005FD3C(a3, a2 + v31);
          a2 += v31;
          v14 = v41;
          goto LABEL_65;
        }
        result = sub_10005FD30(a3, a2 + v31);
        a2 += v31;
      }
      else
      {
        if (v30 >= v21 && a3 < v21)
        {
          a4 = v43;
          if (v30 != v21)
            result = sub_10005FD3C(a3, v21 + v31);
          v21 += v31;
          goto LABEL_64;
        }
        result = sub_10005FD30(a3, v21 + v31);
        v21 += v31;
      }
      a4 = v43;
LABEL_64:
      v14 = v41;
      v36 = v42;
LABEL_65:
      if (v21 <= a4 || a2 <= v36)
        goto LABEL_69;
    }
  }
  result = sub_10003ECFC(v4, v15 / v14, a4);
  v21 = a4 + v19 * v14;
  if (v19 * v14 >= 1 && a2 < a3)
  {
    do
    {
      v23 = v45;
      sub_10005E5F0(a2, v45);
      sub_10005FF5C(a4);
      v24 = static Date.> infix(_:_:)(v23 + *(int *)(v47 + 20), v5 + *(int *)(v47 + 20));
      sub_10005E678(v5);
      result = sub_10005E678(v23);
      if ((v24 & 1) != 0)
      {
        v5 = a2 + v14;
        if (v4 < a2 || v4 >= v5)
        {
          result = sub_10005FD30(v4, a2);
        }
        else if (v4 != a2)
        {
          result = sub_10005FD3C(v4, a2);
        }
      }
      else
      {
        if (v4 < a4 || v4 >= a4 + v14)
        {
          result = sub_10005FD30(v4, a4);
        }
        else if (v4 != a4)
        {
          result = sub_10005FD3C(v4, a4);
        }
        v5 = a2;
        a4 += v14;
      }
      v4 += v14;
      v27 = a4 >= v21 || v5 >= a3;
      a2 = v5;
    }
    while (!v27);
  }
  a2 = v4;
LABEL_69:
  v38 = v21 - a4;
  if (v14 != -1 || v38 != 0x8000000000000000)
  {
    sub_10003ECFC(a4, v38 / v14, a2);
    return 1;
  }
LABEL_77:
  __break(1u);
  return result;
}

char *sub_10005F580(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_100504CA8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  sub_100039950();
  return v11;
}

char *sub_10005F670(uint64_t a1)
{
  return sub_10005F580(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10005F684(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v28 = swift_bridgeObjectRetain(a1);
  v5 = (uint64_t *)(v28 + 48);
  while (1)
  {
    v6 = *(v5 - 1);
    v8 = *v5;
    v32[0] = *(v5 - 2);
    v7 = v32[0];
    v32[1] = v6;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v6);
    v11 = sub_100052C20(v32[0], v6);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    if (v9[3] < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_100032C48(&qword_100504CB8);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v18[7] + 8 * v11) = v8;
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v5 += 3;
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v28, 2);
  }
  sub_10005E0DC(v14, a2 & 1);
  v16 = sub_100052C20(v32[0], v6);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v11 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v23);
  v33 = v23;
  swift_errorRetain(v23);
  v24 = sub_100032C48((uint64_t *)&unk_100504CC0);
  if ((swift_dynamicCast(v24, &v33, v24, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease_n(v28, 2);
    return swift_errorRelease(v33);
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x80000001003E4770;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005F94C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

void sub_10005F998(uint64_t a1)
{
  sub_100091E20(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10005F9AC(uint64_t a1)
{
  sub_100091E44(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10005F9C0(uint64_t a1)
{
  sub_100091F14(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10005F9D4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10005FA54(uint64_t a1)
{
  uint64_t v1;

  return sub_10005C784(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_10005FA80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10005FEA8(a1, a2, a3);
  sub_10005FF68(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100028D0C();
}

unint64_t sub_10005FAAC()
{
  unint64_t result;

  result = qword_100504D08;
  if (!qword_100504D08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100504D08);
  }
  return result;
}

unint64_t sub_10005FAE8()
{
  unint64_t result;

  result = qword_100504D28;
  if (!qword_100504D28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100504D28);
  }
  return result;
}

void sub_10005FB24(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100035350(a2);
    atomic_store(sub_10005FF3C(v3), a1);
  }
  sub_100028D0C();
}

void sub_10005FB58(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_10005FF3C(v3), a1);
  }
  sub_100028D0C();
}

unint64_t sub_10005FB8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504D68;
  if (!qword_100504D68)
  {
    v1 = sub_100039884(255, &qword_100504518, NSObject_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100504D68);
  }
  return result;
}

void sub_10005FBDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10005FEA8(a1, a2, a3);
  sub_10005FF68(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100028D0C();
}

uint64_t sub_10005FC08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100504D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BindingsConfigResolver()
{
  return &type metadata for BindingsConfigResolver;
}

uint64_t sub_10005FC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(v0, v1, v2, v3);
}

uint64_t sub_10005FC8C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_10005FC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(a1, a2, v2, v3);
}

void sub_10005FCB0(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v5 = v3;
  v5[1] = v2;
}

uint64_t sub_10005FCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(a1, a2, v2, v3, 0);
}

uint64_t sub_10005FD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeFrontToBack(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_10005FD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeBackToFront(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

unint64_t sub_10005FD48()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100052C20(v0, v1);
}

uint64_t sub_10005FD78()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10005FD80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, *(_QWORD *)(v2 - 152), a1);
}

uint64_t sub_10005FDB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(v0, v1, v2, v3);
}

uint64_t sub_10005FDCC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

id sub_10005FDD4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10005FE20()
{
  return type metadata accessor for BindingsStore.Binding(0);
}

uint64_t sub_10005FE2C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100074B20(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_10005FE4C()
{
  return 0;
}

uint64_t sub_10005FE98()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void *sub_10005FEA0()
{
  uint64_t v0;

  return sub_10005A4E8(v0);
}

uint64_t sub_10005FEA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100032C48(a3);
}

uint64_t sub_10005FEB8()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10005FEC0()
{
  uint64_t v0;

  return sub_10004EA20(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 128));
}

uint64_t sub_10005FEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeFrontToBack(a1, a2, 1, *(_QWORD *)(v2 - 96));
}

uint64_t sub_10005FEF4()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

BOOL sub_10005FF10(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_10005FF18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

uint64_t sub_10005FF24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100041510(v0, v1);
}

void sub_10005FF30()
{
  void *v0;

}

uint64_t sub_10005FF3C(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_10005FF48()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005FF50()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10005FF5C(uint64_t a1)
{
  uint64_t v1;

  return sub_10005E5F0(a1, *(_QWORD *)(v1 - 88));
}

uint64_t sub_10005FF68@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10005FFB0(uint64_t a1)
{
  uint64_t v1;

  return sub_10005E5F0(a1, *(_QWORD *)(v1 - 112));
}

uint64_t sub_10005FFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_10005FFF0()
{
  uint64_t v0;

  return sub_1000397F4(0, v0);
}

uint64_t sub_100060024()
{
  uint64_t v0;

  return swift_retain(v0);
}

BOOL sub_100060030(uint64_t a1)
{
  return sub_10006004C(a1);
}

BOOL sub_10006004C(uint64_t a1)
{
  NSString v2;
  id v3;
  _OWORD v5[2];

  v2 = sub_10006F258();
  v3 = sub_10006EDF4((uint64_t)v2, "objectForKey:");
  sub_10006F278();
  if (a1)
  {
    _bridgeAnyObjectToAny(_:)(a1);
    sub_10006F200();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10004EB70((uint64_t)v5, &qword_100503A58);
  return a1 != 0;
}

float sub_1000600CC(uint64_t a1)
{
  NSString v2;
  id v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  char v43;
  __int128 v44;
  __int128 v45;

  v2 = sub_10006EDC4();
  v3 = sub_10006EDF4((uint64_t)v2, "objectForKey:");
  sub_10006F278();
  if (a1)
  {
    sub_10006F1B0();
    sub_10006F200();
    v4 = sub_100053FB8(&v44, &v45);
    sub_10006EBDC((uint64_t)v4, v5);
    v9 = sub_10006EBD0((uint64_t)&v42, v6, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Float, v7, v8);
    if ((v9 & 1) != 0)
    {
      v43 = 0;
      sub_10006EA64(v9, v10, v11, v12, v13, v14);
      return v42;
    }
    else
    {
      if (qword_100503420 != -1)
        swift_once(&qword_100503420, sub_1000330AC);
      v17 = sub_1000357DC();
      v18 = sub_10005680C(v17, (uint64_t)qword_1005185E8);
      v19 = static os_log_type_t.error.getter();
      if (sub_10006E93C(v18))
      {
        v20 = (uint8_t *)sub_10003308C(12);
        v21 = sub_10003308C(32);
        *(_QWORD *)&v44 = v21;
        sub_10006EEF8(4.8149e-34);
        v24 = sub_10006EF84(24, v22, v23);
        v32 = sub_10006EEE8(v24, v25, v26, v27, v28, v29, v30, v31, v41, v24);
        sub_10006F148((uint64_t)v32, v33);
        sub_100037174((void *)&_mh_execute_header, v18, v19, "Unexpected type value found in defaults for key: %s", v20);
        sub_10003716C(v21);
        sub_100033080(v21);
        sub_100033080((uint64_t)v20);
      }

      sub_100072200(0.0, 1000.0);
      v15 = v34;
      sub_10006EA64(v35, v36, v37, v38, v39, v40);
    }
    return v15;
  }
  else
  {
    sub_100072200(0.0, 1000.0);
  }
  return result;
}

uint64_t sub_1000602A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v4;
  NSObject *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  sub_100033D7C();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "objectForKey:", v4);

  if (v5)
  {
    sub_10006F100();
    sub_10006F114();
    v6 = sub_100053FB8(&v38, &v39);
    sub_10006EBDC((uint64_t)v6, v7);
    v11 = sub_10006EBD0((uint64_t)&v37, v8, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data, v9, v10);
    if ((v11 & 1) != 0)
    {
      result = sub_10006EA64(v11, v12, v13, v14, v15, v16);
      *(_OWORD *)a2 = v37;
    }
    else
    {
      if (qword_100503420 != -1)
        swift_once(&qword_100503420, sub_1000330AC);
      v20 = sub_1000357DC();
      sub_10005680C(v20, (uint64_t)qword_1005185E8);
      v21 = sub_10006E5E0();
      if (os_log_type_enabled(v5, v21))
      {
        v22 = (uint8_t *)sub_10003308C(12);
        v23 = sub_10003308C(32);
        *(_QWORD *)&v38 = v23;
        *(_DWORD *)v22 = 136315138;
        v24 = sub_100033D7C();
        sub_100036778(v24, v25, v26);
        sub_10006EC48();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, v28, v22 + 4, v22 + 12);
        sub_100037174((void *)&_mh_execute_header, v5, v21, "Unexpected type value found in defaults for key: %s", v22);
        sub_10003716C(v23);
        sub_100033080(v23);
        sub_100033080((uint64_t)v22);
      }

      if (qword_100503430 != -1)
        swift_once(&qword_100503430, sub_1000336E4);
      v29 = qword_100518618;
      v30 = unk_100518620;
      *(_QWORD *)a2 = qword_100518618;
      *(_QWORD *)(a2 + 8) = v30;
      v31 = sub_100033DD0(v29, v30);
      return sub_10006EA64(v31, v32, v33, v34, v35, v36);
    }
  }
  else
  {
    if (qword_100503430 != -1)
      swift_once(&qword_100503430, sub_1000336E4);
    v18 = qword_100518618;
    v19 = unk_100518620;
    *(_QWORD *)a2 = qword_100518618;
    *(_QWORD *)(a2 + 8) = v19;
    return sub_100033DD0(v18, v19);
  }
  return result;
}

double sub_1000604DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSString v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[8];
  _OWORD v19[2];
  _OWORD v20[2];

  sub_10004F358();
  sub_10006F280();
  __chkstk_darwin(v4);
  sub_10006EE38();
  v5 = sub_10006EDC4();
  v6 = objc_msgSend(a1, "objectForKey:", v5);

  if (v6)
  {
    sub_10006F100();
    sub_10006F114();
    sub_100053FB8(v19, v20);
    sub_100036FA0((uint64_t)v20, (uint64_t)v19);
    if ((swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    {
      v18[0] = 0;
      sub_100032F94(v20);
      return *(double *)&v17;
    }
    else
    {
      if (qword_100503420 != -1)
        swift_once(&qword_100503420, sub_1000330AC);
      v10 = sub_1000357DC();
      sub_10005680C(v10, (uint64_t)qword_1005185E8);
      v11 = sub_10006E5E0();
      if (sub_10006EB14(v6))
      {
        v12 = (uint8_t *)sub_10003308C(12);
        v13 = sub_10003308C(32);
        *(_QWORD *)&v19[0] = v13;
        *(_DWORD *)v12 = 136315138;
        v17 = sub_10006EF84(23, 0x80000001003E4950, (uint64_t *)v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v12 + 4, v12 + 12);
        sub_100037174((void *)&_mh_execute_header, v6, v11, "Unexpected type value found in defaults for key: %s", v12);
        sub_10003716C(v13);
        sub_100033080(v13);
        sub_100033080((uint64_t)v12);
      }

      v15 = static Date.distantPast.getter(v14);
      v8 = Date.timeIntervalSinceNow.getter(v15);
      sub_10006E7F0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_100032F94(v20);
    }
  }
  else
  {
    v9 = static Date.distantPast.getter(v7);
    v8 = Date.timeIntervalSinceNow.getter(v9);
    sub_10006E7F0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  return v8;
}

uint64_t sub_100060728(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  _OWORD v15[2];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "objectForKey:", v2);

  if (!v3)
    return 0x725F4E4F53414552;
  _bridgeAnyObjectToAny(_:)(v3);
  swift_unknownObjectRelease(v3);
  sub_100053FB8(v14, v15);
  sub_100036FA0((uint64_t)v15, (uint64_t)v14);
  if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    sub_100032F94(v15);
    return v12;
  }
  else
  {
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000352B0(v5, (uint64_t)qword_1005185E8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v14[0] = v10;
      *(_DWORD *)v9 = 136315138;
      v12 = sub_100036778(0xD00000000000001ALL, 0x80000001003E35B0, (uint64_t *)v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unexpected type value found in defaults for key: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    v4 = 0x725F4E4F53414552;
    sub_100032F94(v15);
  }
  return v4;
}

uint64_t sub_100060970@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _OWORD v23[2];

  v4 = sub_100032C48(&qword_100503A50);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "objectForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v8);
    sub_100053FB8(v22, v23);
    sub_100036FA0((uint64_t)v23, (uint64_t)v22);
    v9 = type metadata accessor for Date(0);
    if ((swift_dynamicCast(v6, v22, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      sub_100037020((uint64_t)v6, 0, 1, v9);
      sub_100032F94(v23);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a2, v6, v9);
    }
    else
    {
      sub_100037020((uint64_t)v6, 1, 1, v9);
      sub_10004EB70((uint64_t)v6, &qword_100503A50);
      if (qword_100503420 != -1)
        swift_once(&qword_100503420, sub_1000330AC);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_1000352B0(v13, (uint64_t)qword_1005185E8);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v22[0] = v18;
        *(_DWORD *)v17 = 136315138;
        v21 = sub_100036778(0xD000000000000016, 0x80000001003E35D0, (uint64_t *)v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v17 + 4, v17 + 12);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected type value found in defaults for key: %s", v17, 0xCu);
        swift_arrayDestroy(v18, 1);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }

      if (qword_100503440 != -1)
        swift_once(&qword_100503440, sub_100033EE8);
      v19 = sub_1000352B0(v9, (uint64_t)qword_100518630);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v19, v9);
      return sub_100032F94(v23);
    }
  }
  else
  {
    if (qword_100503440 != -1)
      swift_once(&qword_100503440, sub_100033EE8);
    v11 = type metadata accessor for Date(0);
    v12 = sub_1000352B0(v11, (uint64_t)qword_100518630);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, v12, v11);
  }
}

uint64_t sub_100060CE0(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  _OWORD v13[2];
  _OWORD v14[2];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v3);
    sub_100053FB8(v13, v14);
    sub_100036FA0((uint64_t)v14, (uint64_t)v13);
    if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v12[0] = 0;
      sub_100032F94(v14);
      return v11;
    }
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000352B0(v5, (uint64_t)qword_1005185E8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v13[0] = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = sub_100036778(0xD000000000000011, 0x80000001003E35F0, (uint64_t *)v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unexpected type value found in defaults for key: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_100032F94(v14);
  }
  return 0;
}

uint64_t sub_100060EFC(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v3);
    sub_100053FB8(v12, v13);
    sub_100036FA0((uint64_t)v13, (uint64_t)v12);
    if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      sub_100032F94(v13);
      return v11 & 1;
    }
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000352B0(v5, (uint64_t)qword_1005185E8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v12[0] = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = sub_100036778(0xD000000000000012, 0x80000001003E3610, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unexpected type value found in defaults for key: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_100032F94(v13);
  }
  return 0;
}

uint64_t sub_100061118(void *a1)
{
  return sub_10006113C(a1, 0xD00000000000001CLL, 0x80000001003E3550, byte_100518658);
}

uint64_t sub_10006113C(void *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  os_log_type_t v4;
  NSString v9;
  NSObject *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  __int128 v47;

  v9 = sub_10006F258();
  v10 = objc_msgSend(a1, "objectForKey:", v9);

  if (!v10)
    return *a4;
  sub_10006F100();
  sub_10006F114();
  v11 = sub_100053FB8(v46, &v47);
  sub_10006EBDC((uint64_t)v11, v12);
  v16 = sub_10006EBD0((uint64_t)&v45, v13, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool, v14, v15);
  if ((v16 & 1) != 0)
  {
    sub_10006EA64(v16, v17, v18, v19, v20, v21);
    return v45 & 1;
  }
  else
  {
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v23 = sub_1000357DC();
    sub_10005680C(v23, (uint64_t)qword_1005185E8);
    v24 = sub_10006E5E0();
    if (sub_10006EBE8(v24))
    {
      v25 = (uint8_t *)sub_10003308C(12);
      v26 = sub_10003308C(32);
      *(_QWORD *)&v46[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = sub_100036778(a2, a3, (uint64_t *)v46);
      v35 = sub_10006EEE8(v27, v28, v29, v30, v31, v32, v33, v34, v44, v27);
      sub_10006F1D0((uint64_t)v35, v36);
      sub_100037174((void *)&_mh_execute_header, v10, v4, "Unexpected type value found in defaults for key: %s", v25);
      sub_10003716C(v26);
      sub_100033080(v26);
      sub_100033080((uint64_t)v25);
    }

    v22 = *a4;
    sub_10006EA64(v37, v38, v39, v40, v41, v42);
  }
  return v22;
}

uint64_t sub_1000612F0(uint64_t a1)
{
  NSString v2;
  id v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v2 = sub_10006EDC4();
  v3 = sub_10006EDF4((uint64_t)v2, "objectForKey:");
  sub_10006F278();
  if (!a1)
    return 1685025392;
  sub_10006F1B0();
  sub_10006F200();
  v4 = sub_100053FB8(&v33, &v34);
  sub_10006EBDC((uint64_t)v4, v5);
  v9 = sub_10006EBD0((uint64_t)&v32, v6, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v7, v8);
  if ((v9 & 1) != 0)
  {
    sub_10006EA64(v9, v10, v11, v12, v13, v14);
    return v32;
  }
  else
  {
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v16 = sub_1000357DC();
    v17 = sub_10005680C(v16, (uint64_t)qword_1005185E8);
    v18 = static os_log_type_t.error.getter();
    if (sub_10006E93C(v17))
    {
      v19 = (uint8_t *)sub_10003308C(12);
      v20 = sub_10003308C(32);
      *(_QWORD *)&v33 = v20;
      sub_10006EEF8(4.8149e-34);
      sub_10006EF84(20, v21, v22);
      sub_10006EC48();
      sub_10006F148(v23, v24);
      sub_100037174((void *)&_mh_execute_header, v17, v18, "Unexpected type value found in defaults for key: %s", v19);
      sub_10003716C(v20);
      sub_100033080(v20);
      sub_100033080((uint64_t)v19);
    }

    v15 = 1685025392;
    sub_10006EA64(v25, v26, v27, v28, v29, v30);
  }
  return v15;
}

uint64_t sub_100061494(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_10006EDC4();
  v3 = objc_msgSend(a1, "dataForKey:", v2);

  if (v3)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = type metadata accessor for JSONDecoder(0);
    sub_100035780(v7);
    v8 = JSONDecoder.init()();
    v9 = sub_100032C48(&qword_100504FA8);
    v10 = sub_10006D64C(&qword_100504FC0, &qword_100504FC8, (uint64_t)&unk_100409408, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v13, v9, v4, v6, v9, v10);
    swift_release(v8);
    sub_100054CCC();
    return v13;
  }
  else
  {
    if (qword_100503450 != -1)
      swift_once(&qword_100503450, sub_100033FD0);
    v11 = qword_100518660;
    sub_100046EC0();
  }
  return v11;
}

uint64_t sub_100061708(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "dataForKey:", v2);

  if (v3)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v8 = JSONDecoder.init()();
    v9 = sub_100032C48(&qword_100504F28);
    v10 = sub_10006D48C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v13, v9, v4, v6, v9, v10);
    swift_release(v8);
    sub_100033030(v4, v6);
    return v13;
  }
  else
  {
    if (qword_100503438 != -1)
      swift_once(&qword_100503438, sub_100033E54);
    v11 = qword_100518628;
    swift_bridgeObjectRetain(qword_100518628);
  }
  return v11;
}

id sub_1000619D8()
{
  return objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
}

uint64_t sub_100061A04(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  NSString v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v11 = a1;
  v3 = type metadata accessor for JSONEncoder(0);
  sub_100035780(v3);
  JSONEncoder.init()();
  v4 = sub_100032C48(&qword_100504FA8);
  v5 = sub_10006D64C(&qword_100504FB0, &qword_100504FB8, (uint64_t)&unk_100409430, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of JSONEncoder.encode<A>(_:)(&v11, v4, v5);
  sub_10006E8EC();
  sub_10006F108();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = sub_10006EDC4();
  objc_msgSend(a2, "setObject:forKey:", isa, v7);

  v8 = sub_10006F108();
  return sub_100033030(v8, v9);
}

uint64_t sub_100061B9C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;
  NSString v11;
  uint64_t v13;

  v13 = a1;
  v3 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONEncoder.init()();
  v5 = sub_100032C48(&qword_100504F28);
  v6 = sub_10006D3F0();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v13, v5, v6);
  v9 = v8;
  swift_release(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setObject:forKey:", isa, v11);

  return sub_100033030(v7, v9);
}

void sub_100061D50(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100052BBC(a1), (v6 & 1) != 0))
  {
    sub_100036FA0(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_100028D0C();
  }
}

unint64_t sub_100061D9C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  v4 = sub_100052BEC(a1);
  if ((v5 & 1) == 0)
  {
    v2 = 0;
LABEL_5:
    v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  v6 = 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t sub_100061DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_10006F0C0(a1, a2);
    if ((v3 & 1) != 0)
      sub_100046EC0();
  }
  return sub_10004EF44();
}

void sub_100061E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_10006F0C0(a1, a2);
    if ((v5 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4));
  }
  sub_100028D0C();
}

uint64_t sub_100061E8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = sub_100052D00(a1), (v4 & 1) != 0))
    return swift_retain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  else
    return 0;
}

uint64_t sub_100061ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100052D00(a1), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(a2 + 56);
    v9 = type metadata accessor for ServerJSONFetchRetryState(0);
    sub_10006D5B0(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v7, a3);
    v10 = a3;
    v11 = 0;
    v12 = v9;
  }
  else
  {
    v12 = type metadata accessor for ServerJSONFetchRetryState(0);
    v10 = a3;
    v11 = 1;
  }
  return sub_100037020(v10, v11, 1, v12);
}

uint64_t sub_100061F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_10006F0C0(a1, a2);
    if ((v3 & 1) != 0)
      sub_100046EC0();
  }
  return sub_10004EF44();
}

uint64_t sub_100061FD8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100504D80);
  sub_1000352B0(v0, (uint64_t)qword_100504D80);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x4D696C6F69766152, 0xEE00726567616E61);
}

id sub_100062060()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RavioliManagerObjC()), "init");
  static RavioliManagerObjC.shared = (uint64_t)result;
  return result;
}

uint64_t *RavioliManagerObjC.shared.unsafeMutableAddressor()
{
  if (qword_100503498 != -1)
    swift_once(&qword_100503498, sub_100062060);
  return &static RavioliManagerObjC.shared;
}

id static RavioliManagerObjC.shared.getter()
{
  if (qword_100503498 != -1)
    swift_once(&qword_100503498, sub_100062060);
  return (id)static RavioliManagerObjC.shared;
}

id sub_100062120()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100032C48(&qword_100504FF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WalletMonitor();
  swift_allocObject(v8, 112, 15);
  v9 = v0;
  v10 = sub_1000565D8();
  sub_1000561DC();
  swift_release(v10);
  v11 = sub_100032C48(&qword_100504F10);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = sub_10006D87C((uint64_t)v7, 10000000000, v12);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager] = v13;
  swift_retain(v13);

  v19.receiver = v9;
  v19.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v19, "init");
  v15 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v4, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_1004D1468, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v13;
  v17 = sub_1000494E4((uint64_t)v4, (uint64_t)&unk_100505000, (uint64_t)v16);
  swift_release(v17);
  return v14;
}

uint64_t RavioliManager.__allocating_init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  RavioliManager.init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(a1, a2, a3);
  return v7;
}

uint64_t sub_100062310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_10050500C);
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_10006235C;
  return sub_100069744();
}

uint64_t sub_10006235C()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 24));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100062390()
{
  uint64_t v0;

  sub_100063B44();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

void RavioliManagerObjC.fetchRavioliDataFromStore(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;

  sub_10005FC74();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = sub_100054E50();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 64);
  __chkstk_darwin(v29);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v32);
  sub_10006EE68();
  v33 = sub_10006EA48();
  sub_100037020(v20, 1, 1, v33);
  sub_10006EA10((uint64_t)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
  sub_10006EAF0();
  v36 = (_QWORD *)swift_allocObject(&unk_1004D1120, v34, v35);
  v37 = sub_10006EF8C(v36);
  sub_10006EA10((uint64_t)v37, (uint64_t)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
  v39 = (_QWORD *)(v28 + v31);
  *v39 = v26;
  v39[1] = v24;
  sub_10006ED7C();
  sub_10004F24C();
  v40 = sub_1000494E4(v20, (uint64_t)&unk_100504DA8, v28);
  swift_release(v40);
  sub_10004F0C0();
}

uint64_t sub_1000624D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1000624EC, a4, 0);
}

uint64_t sub_1000624EC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 48) = sub_1000659FC();
  *(_QWORD *)(v0 + 56) = v1;
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100062520()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  unint64_t v4;

  v1 = sub_10006F070();
  v2(v1);
  v3 = sub_10006F070();
  sub_10003301C(v3, v4);
  return sub_10004ED88(*(uint64_t (**)(void))(v0 + 8));
}

#error "100062600: call analysis failed (funcsize=53)"

void sub_100062638(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Class isa;
  Class v5;

  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

uint64_t sub_10006268C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10004EC74((uint64_t)sub_1000626A4, 0);
}

uint64_t sub_1000626A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
  *(_QWORD *)(v0 + 48) = v1;
  return sub_10004EC74((uint64_t)sub_1000626C4, v1);
}

uint64_t sub_1000626C4()
{
  uint64_t v0;

  sub_10006792C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

void RavioliManagerObjC.requestRavioliFetchWithProbabiliticThrottle(bagID:notificationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  id v44;
  uint64_t v45;

  sub_10005FC74();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = sub_100054E50();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(_QWORD *)(v31 + 64);
  __chkstk_darwin(v30);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v33);
  v34 = sub_10006E808();
  v35 = type metadata accessor for TaskPriority(v34);
  sub_10006E6A4(v35, v36, v37, v35);
  sub_10006F054((uint64_t)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
  sub_10006EAF0();
  v40 = (_QWORD *)swift_allocObject(&unk_1004D1148, v38, v39);
  v41 = sub_10006EF8C(v40);
  sub_10006F054((uint64_t)v41, (uint64_t)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v42);
  v43 = (_QWORD *)(v29 + v32);
  *v43 = v27;
  v43[1] = v25;
  v44 = v20;
  sub_1000371CC();
  v45 = sub_1000494E4(v21, (uint64_t)&unk_100504DB8, v29);
  swift_release(v45);
  sub_10004F0C0();
}

uint64_t sub_1000627D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[43] = a6;
  v7[44] = a7;
  v7[41] = a4;
  v7[42] = a5;
  return swift_task_switch(sub_1000627F0, 0, 0);
}

uint64_t sub_1000627F0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, v0 + 304);
  v1 = (id)static ASDConfigurationManager.shared;
  sub_10006F220();

  sub_10006F1F4(v2, v3, &qword_100503A78);
  if (*(_QWORD *)(v0 + 152) == 1
    || (sub_10006EDBC((void *)(v0 + 16), (const void *)(v0 + 112)),
        sub_10003974C((uint64_t *)(v0 + 208)),
        sub_10006EF64(v0 + 44, v0 + 376),
        sub_10006EF64(v0 + 376, v0 + 368),
        (*(_BYTE *)(v0 + 372) & 1) != 0)
    || (v4 = *(float *)(v0 + 368), sub_1000725C0(), v4 >= v5))
  {
    v13 = (_QWORD *)swift_task_alloc(dword_100504EFC);
    *(_QWORD *)(v0 + 360) = v13;
    *v13 = v0;
    v13[1] = sub_1000629A4;
    v14 = sub_10006EB84(*(_QWORD *)(v0 + 336));
    return sub_10006268C(v14, v15, v16);
  }
  else
  {
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v6 = sub_1000357DC();
    v7 = (void *)sub_10005680C(v6, (uint64_t)qword_100504D80);
    v8 = static os_log_type_t.info.getter();
    if (sub_10004EFCC(v8))
    {
      v9 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v9);
      sub_100058F24((void *)&_mh_execute_header, v10, v11, "Skipping Ravioli fetch on bag due to probabilitic throttling");
      sub_100033080(v0 + 112);
    }

    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000629A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 360));
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

#error "100062A5C: call analysis failed (funcsize=50)"

void RavioliManagerObjC.triggerRavioliFetch(bagID:notificationId:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_10005FC74();
  v30 = v3;
  v31 = v4;
  v6 = v5;
  v29 = v7;
  v9 = v8;
  v10 = sub_100054E50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v14);
  sub_100054E18();
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
  v16 = sub_10006EA48();
  sub_10006E6A4(v16, v17, v18, v16);
  sub_10006EC08((uint64_t)v13, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  sub_10006EE10();
  v20 = v19 & 0xFFFFFFFFFFFFFFF8;
  v21 = ((v19 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (_QWORD *)swift_allocObject(&unk_1004D1170, v21 + 16, v22);
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v15;
  sub_10006EC08((uint64_t)v23 + v1, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
  v24 = (_QWORD *)((char *)v23 + v20);
  *v24 = v29;
  v24[1] = v6;
  v25 = (_QWORD *)((char *)v23 + v21);
  v26 = v31;
  *v25 = v30;
  v25[1] = v26;
  sub_10006ED7C();
  sub_10006E598();
  sub_10004F24C();
  v27 = sub_1000494E4(v2, (uint64_t)&unk_100504DC8, (uint64_t)v23);
  swift_release(v27);
  sub_10004F0C0();
}

uint64_t sub_100062BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  return swift_task_switch(sub_100062BEC, a4, 0);
}

uint64_t sub_100062BEC()
{
  uint64_t *v0;

  sub_100067BA0(v0[3], v0[4], v0[5], 1);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100062C24()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 48))();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

void RavioliManagerObjC.triggerImmediateRavioliFetch(bagID:notificationId:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_10005FC74();
  v36 = v2;
  v37 = v3;
  v5 = v4;
  v33 = v7;
  v34 = v6;
  v35 = v8;
  v10 = v9;
  v11 = sub_100054E50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v15);
  sub_100054E18();
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v17 = sub_10006113C(v16, 0xD00000000000001FLL, 0x80000001003E3670, byte_100518648);

  if ((v17 & 1) != 0)
  {
    v18 = sub_100040900((uint64_t)&unk_1004D11C0, 32);
    *(_QWORD *)(v18 + 16) = v33;
    *(_QWORD *)(v18 + 24) = v5;
    swift_retain(v5);
    RavioliManagerObjC.triggerRavioliFetch(bagID:notificationId:completion:)();
    swift_release(v18);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
    v20 = sub_10006EA48();
    sub_10006E6A4(v20, v21, v22, v20);
    sub_10006EC08((uint64_t)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    sub_10006EE10();
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    v25 = ((v23 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v27 = (_QWORD *)swift_allocObject(&unk_1004D1198, v25 + 16, v26);
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v19;
    sub_10006EC08((uint64_t)v27 + v17, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    v28 = (_QWORD *)((char *)v27 + v24);
    v29 = v35;
    *v28 = v34;
    v28[1] = v29;
    v30 = (_QWORD *)((char *)v27 + v25);
    *v30 = v33;
    v30[1] = v5;
    sub_10006ED7C();
    sub_1000371CC();
    swift_retain(v5);
    v31 = sub_1000494E4(v1, (uint64_t)&unk_100504DD8, (uint64_t)v27);
    swift_release(v31);
    sub_10004F0C0();
  }
}

uint64_t sub_100062E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v12;
  uint64_t v14;

  v8[2] = a8;
  v8[3] = v14;
  v12 = (_QWORD *)swift_task_alloc(dword_100504F6C);
  v8[4] = v12;
  *v12 = v8;
  v12[1] = sub_100062EC4;
  return sub_100066334(a5, a6, a7);
}

uint64_t sub_100062EC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_100040B24();
  v3 = *(_QWORD *)(v2 + 32);
  *v4 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc(v3);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100062F14()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100062F40()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void (**)(uint64_t))(v0 + 16);
  sub_10006EE00();
  v2(v1);
  sub_10006E690();
  sub_10006E690();
  return sub_10004ED88(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100062F9C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  sub_10005FC74();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = sub_100054E50();
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10006EE50();
  v17 = _Block_copy(v8);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v20 = v19;
  v21 = sub_100040900(v6, 24);
  *(_QWORD *)(v21 + 16) = v17;
  v22 = v14;
  v2(v0, v18, v20, v4, v21);

  sub_10006E934();
  sub_10006E8EC();
  sub_10006E7F0(v0, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  sub_10004F0C0();
}

void sub_100063074(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void sub_1000630D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_100032C48(&qword_100505020);
  sub_10004EDE8();
  __chkstk_darwin(v1);
  sub_1000356DC();
  v2 = sub_100054E50();
  sub_100035270(v2, static RavioliConstants.ravioliUUID);
  sub_1000352B0(v2, (uint64_t)static RavioliConstants.ravioliUUID);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001003E4990);
  sub_10006E6F8(v0);
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v4 = sub_10006F070();
    v5(v4);
    sub_1000399A0();
  }
}

uint64_t RavioliConstants.ravioliUUID.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005034A0 != -1)
    swift_once(&qword_1005034A0, sub_1000630D4);
  v0 = sub_100054E50();
  return sub_1000352B0(v0, (uint64_t)static RavioliConstants.ravioliUUID);
}

uint64_t static RavioliConstants.ravioliUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005034A0 != -1)
    swift_once(&qword_1005034A0, sub_1000630D4);
  v2 = sub_100054E50();
  v3 = sub_1000352B0(v2, (uint64_t)static RavioliConstants.ravioliUUID);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id sub_1000632D0()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  objc_super v10;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000352B0(v3, (uint64_t)qword_100504D80);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.fault.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "DefinedRavioliNotificationIds should not be initialised", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v10.receiver = v1;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void *DefinedRavioliNotificationIds.missingBag.unsafeMutableAddressor()
{
  return &static DefinedRavioliNotificationIds.missingBag;
}

unint64_t static DefinedRavioliNotificationIds.missingBag.getter()
{
  return 0xD000000000000011;
}

const char *DefinedRavioliNotificationIds.xpc.unsafeMutableAddressor()
{
  return "REASON_xpc";
}

uint64_t static DefinedRavioliNotificationIds.xpc.getter()
{
  return 0x785F4E4F53414552;
}

uint64_t sub_1000634C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_10004EC74((uint64_t)sub_1000634E0, 0);
}

uint64_t sub_1000634E0()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[4];
  v2 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
  v0[5] = (uint64_t)v2;
  v3 = objc_msgSend(objc_allocWithZone((Class)AKAppleIDSession), "init");
  objc_msgSend(v2, "set_appleIDContext:", v3);

  v4 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v2);
  v0[6] = (uint64_t)v4;
  type metadata accessor for RavioliFetcher(0);
  v5 = (uint64_t **)swift_task_alloc(dword_1005064DC);
  v0[7] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_1000635F4;
  v6 = sub_10006EB84(v0[2]);
  return sub_10009EAE0(v6, (uint64_t)v4, 0x6C7070612E6D6F63, 0xED00006473612E65, v7, v1);
}

uint64_t sub_1000635F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 56);
  *(_QWORD *)(*v3 + 64) = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    *(_QWORD *)(v6 + 72) = a2;
    *(_QWORD *)(v6 + 80) = a1;
  }
  sub_100040A54();
  return sub_100040964();
}

uint64_t sub_100063664()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return sub_10006EC3C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063698()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000636C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10050513C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10006372C;
  return sub_1000634C8(a1, a2, a3);
}

uint64_t sub_10006372C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = sub_100048CF8(*(_QWORD *)(*v1 + 16));
  v3 = (uint64_t (*)(uint64_t))v1[1];
  if (!v0)
    v2 = sub_10006F070();
  return v3(v2);
}

uint64_t *RavioliManager.init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v7 = *v3;
  swift_defaultActor_initialize(v3);
  v8 = *(_QWORD *)(*v3 + 112);
  sub_100054E50();
  sub_100032C48(&qword_100503528);
  sub_10005FB58((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  *(uint64_t *)((char *)v3 + v8) = sub_10006ED9C();
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128)) = 0;
  v9 = *(_QWORD *)(*v3 + 136);
  *(uint64_t *)((char *)v3 + v9) = sub_10006ED9C();
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 144)) = a2;
  v10 = *(_QWORD *)(v7 + 80);
  v11 = *(_QWORD *)(v10 - 8);
  sub_10006F054((uint64_t)v3 + *(_QWORD *)(*v3 + 104), a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  sub_100032EB8((uint64_t)a3, (uint64_t)v3 + *(_QWORD *)(*v3 + 152));
  v14 = type metadata accessor for ASAnalyticsManager();
  v15 = &off_1004D1008;
  *(_QWORD *)&v13 = sub_100040900(v14, 16);
  sub_100032F94(a3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  sub_1000351FC(&v13, (uint64_t)v3 + *(_QWORD *)(*v3 + 160));
  return v3;
}

uint64_t sub_1000638DC()
{
  return sub_10006D2E4();
}

uint64_t sub_1000638E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10006E5E8();
  sub_100054E50();
  sub_10006E4F8();
  v0 = swift_task_alloc(dword_100504DA4);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10006E530(v1);
  sub_10006E85C();
  return sub_1000624D0(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10006393C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10006EF30();
  sub_100054E50();
  sub_10006E97C();
  sub_10006E944();

  sub_10006E764();
  sub_10006EDB0();
  v1 = sub_10006EA18();
  return sub_10006E460(v1, v2, v3);
}

uint64_t sub_10006397C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10006E5E8();
  sub_100054E50();
  sub_10006E4F8();
  v0 = swift_task_alloc(dword_100504DB4);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10006E530(v1);
  sub_10006E85C();
  return sub_1000627D4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000639D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100054E50();
  sub_10006E600();
  v0 = swift_task_alloc(dword_100504DC4);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10006E874(v1);
  return sub_100062BC4(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100063A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006EF30();
  sub_100054E50();
  sub_10006E97C();
  sub_10006E944();
  sub_10006F11C();
  sub_10006E764();
  sub_10006EDB0();
  swift_release(*(_QWORD *)(v0 + ((v1 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  v2 = sub_10006EA18();
  return sub_10006E460(v2, v3, v4);
}

uint64_t sub_100063A94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100054E50();
  sub_10006E600();
  v0 = swift_task_alloc(dword_100504DD4);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10006E874(v1);
  return sub_100062E4C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100063B00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100063B24()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  sub_100028D0C();
}

void sub_100063B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;

  v1 = v0;
  v2 = sub_100032C48(&qword_100504FF0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000352B0(v9, (uint64_t)qword_100504D80);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start Calzone Monitor", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v15 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  if (*(_QWORD *)(v0 + v15))
  {
    v28 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v16, "Tried to start already running Calzone monitor - ignored", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    v18 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
    v19 = type metadata accessor for TaskPriority(0);
    sub_100037020((uint64_t)v8, 1, 1, v19);
    v20 = swift_allocObject(&unk_1004D1490, 24, 7);
    swift_weakInit(v20 + 16, v1);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v2);
    v21 = *(unsigned __int8 *)(v3 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = (v4 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_1004D14B8, v23 + 8, v21 | 7);
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v24 + v22, v5, v2);
    *(_QWORD *)(v24 + v23) = v20;
    v25 = sub_1000494E4((uint64_t)v8, (uint64_t)&unk_100505018, v24);
    v26 = *(_QWORD *)(v1 + v15);
    *(_QWORD *)(v1 + v15) = v25;
    swift_release(v26);
  }
}

Swift::Void __swiftcall RavioliManager.startWalletMonitor()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;

  sub_10005FC74();
  v31 = v2;
  v32 = v3;
  v4 = v0;
  v30 = *(NSObject **)v0;
  isa = v30[10].isa;
  v6 = *((_QWORD *)isa - 1);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v3);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v9);
  sub_10006EE68();
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v10 = sub_1000357DC();
  v11 = sub_10005680C(v10, (uint64_t)qword_100504D80);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v13 = 0;
    sub_10004ED40((void *)&_mh_execute_header, v11, v12, "start Calzone Monitor", v13);
    sub_100033080((uint64_t)v13);
  }

  v15 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  if (*(_QWORD *)(v0 + v15))
  {
    v30 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (sub_10006E5D8(v30))
    {
      v17 = (uint8_t *)sub_10003308C(2);
      *(_WORD *)v17 = 0;
      sub_10004ED40((void *)&_mh_execute_header, v30, v16, "Tried to start already running Calzone monitor - ignored", v17);
      sub_100033080((uint64_t)v17);
    }

  }
  else
  {
    v18 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
    v19 = sub_10006EA48();
    sub_10006E714(v1, v20, v21, v19);
    v22 = sub_100040900((uint64_t)&unk_1004D11E8, 24);
    ((void (*)(uint64_t, uint64_t))swift_weakInit)(v22 + 16, v4);
    sub_10006EA10((uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    v23 = *(unsigned __int8 *)(v6 + 80);
    v24 = (v23 + 48) & ~v23;
    v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject(&unk_1004D1210, v25 + 8, v23 | 7);
    v26[2].isa = 0;
    v26[3].isa = 0;
    v26[4].isa = isa;
    v26[5].isa = v30[11].isa;
    sub_10006EA10((uint64_t)v26 + v24, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    *(Class *)((char *)&v26->isa + v25) = (Class)v22;
    v27 = sub_1000494E4(v1, (uint64_t)&unk_100504DE8, (uint64_t)v26);
    v28 = *(_QWORD *)(v4 + v15);
    *(_QWORD *)(v4 + v15) = v27;
    swift_release(v28);
    sub_10004F0C0();
  }
}

uint64_t sub_10006406C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[51] = a4;
  v5[52] = a5;
  v6 = sub_100032C48(&qword_100505020);
  v5[53] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v5[54] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[55] = v8;
  v5[56] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100032C48(&qword_100504FF0);
  v5[57] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[58] = v10;
  v5[59] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100032C48(&qword_100505028);
  v5[60] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[61] = v12;
  v5[62] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100064148, 0, 0);
}

uint64_t sub_100064148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = v10[57];
  v12 = v10[52] + 16;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v10[58] + 16))(v10[59], v10[51], v11);
  sub_10005FB24(&qword_100505030, &qword_100504FF0);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v11, v13);
  sub_10005FC8C(v12, (uint64_t)(v10 + 41));
  sub_10005FB24(&qword_100505038, &qword_100505028);
  v10[63] = v14;
  v15 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v10[64] = v15;
  *v15 = v10;
  v15[1] = sub_100064238;
  v16 = sub_10006EFBC();
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_100064238()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 512));
  sub_100040A54();
  return sub_100040920();
}

void sub_10006427C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  char v13;
  uint64_t v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _WORD *v23;
  os_log_type_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  os_log_type_t v63;
  os_log_type_t v64;
  _WORD *v65;
  os_log_type_t v66;
  _WORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  sub_10006E734();
  if ((*(_BYTE *)(v11 + 568) & 1) != 0)
  {
    sub_10006E7C4(*(_QWORD *)(v11 + 488));
    sub_10006F048();
    if (!v13)
      swift_once(&qword_100503490, sub_100061FD8);
    v14 = sub_1000357DC();
    sub_10005680C(v14, (uint64_t)qword_100504D80);
    v15 = sub_10006E5E0();
    if (sub_10004EFCC(v15))
    {
      v16 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v16);
      sub_100058F24((void *)&_mh_execute_header, v17, v18, "Error - Calzone monitoring stopped");
      sub_100033080(v10);
    }

    goto LABEL_55;
  }
  sub_10006F048();
  if (!v13)
    swift_once(&qword_100503490, sub_100061FD8);
  v19 = sub_1000357DC();
  v20 = sub_1000352B0(v19, (uint64_t)qword_100504D80);
  *(_QWORD *)(v11 + 520) = v20;
  v21 = v20;
  Logger.logObject.getter(v20);
  v22 = sub_100056100();
  if (sub_10004EFCC(v22))
  {
    v23 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v23);
    sub_10004ED40((void *)&_mh_execute_header, v20, (os_log_type_t)v9, "Calzone monitor fired", v12);
    sub_100033080((uint64_t)v12);
  }

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    sub_10006E9E0();
    v24 = sub_100056100();
    if (sub_10004EFCC(v24))
    {
      v25 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v25);
      v28 = "Calzone cancelled";
LABEL_53:
      sub_100058F24((void *)&_mh_execute_header, v26, v27, v28);
      sub_100033080(v20);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  v29 = sub_10006F03C();
  *(_QWORD *)(v11 + 528) = v29;
  if (!v29)
  {
    sub_10006E9E0();
    v66 = sub_100056100();
    if (sub_10004EFCC(v66))
    {
      v67 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v67);
      v28 = "Ending monitor as RavioliManager has been released";
      goto LABEL_53;
    }
LABEL_54:

    sub_10006EF20();
LABEL_55:
    sub_10006EDCC();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    sub_10006E4C0(*(uint64_t (**)(void))(v11 + 8));
    return;
  }
  sub_10006F264();
  if (qword_1005034D8 != -1)
LABEL_59:
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v21);
  v30 = (id)static ASDConfigurationManager.shared;
  sub_10006F214();

  sub_10006F090(v31, v32, &qword_100503A78);
  if (*(_QWORD *)(v11 + 152) != 1)
  {
    sub_10006EB1C();
    sub_10006EED8();
    sub_100039724(v21);
    sub_10003974C((uint64_t *)v12);
    sub_10006EEC8();
    v33 = *(_QWORD *)(v11 + 400);
    *(_QWORD *)(v11 + 536) = v33;
    if (v33)
    {
      v34 = 0;
      *(_BYTE *)(v11 + 569) = *(_BYTE *)(v33 + 32);
      sub_10006EACC();
      sub_10006EFEC();
      while (1)
      {
        if (v9)
        {
          sub_10006ED08();
        }
        else
        {
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            goto LABEL_59;
          }
          sub_10006E9CC();
          if (v37 == v38)
            goto LABEL_56;
          sub_10006ECF8();
          if (!v39)
          {
            sub_10006ECE8();
            if (v37 == v38)
              goto LABEL_56;
            if (!*(_QWORD *)(v40 + 8 * v34))
            {
              sub_10006F22C();
              if (v37 == v38)
                goto LABEL_56;
              if (!*(_QWORD *)(v41 + 8 * v34))
              {
                sub_10006F208();
                if (v37 == v38)
                {
LABEL_56:
                  swift_release(*(_QWORD *)(v11 + 528));
                  goto LABEL_57;
                }
                if (!*(_QWORD *)(v42 + 8 * v44))
                {
                  while (1)
                  {
                    v34 = v44 + 1;
                    if (__OFADD__(v44, 1))
                      break;
                    if (v34 >= v43)
                      goto LABEL_56;
                    sub_10006F238();
                    if (v45)
                      goto LABEL_38;
                  }
                  __break(1u);
                  return;
                }
                v34 = v44;
              }
            }
          }
LABEL_38:
          sub_10006E7AC();
        }
        *(_QWORD *)(v11 + 552) = v9;
        *(_QWORD *)(v11 + 544) = v34;
        v46 = *(_BYTE *)(*(_QWORD *)(v35 + 56) + 32 * v36 + 27);
        sub_10006E598();
        if ((v46 & 1) != 0)
        {
          v55 = *(_QWORD *)(v11 + 424);
          sub_10006E8CC();
          sub_10006E6F8(v55);
          if (!v13)
          {
            sub_10006E934();
            sub_10006E774();
            sub_10004F018();
            sub_10006E4DC(v69, v70, v71);
            return;
          }
          v21 = *(NSObject **)(v11 + 520);
          sub_10004EB70(*(_QWORD *)(v11 + 424), &qword_100505020);
          v56 = sub_10006E598();
          Logger.logObject.getter(v56);
          v57 = sub_10006E5E0();
          if (!sub_10006E588(v57))
            goto LABEL_47;
          v58 = sub_10003308C(12);
          v20 = sub_10003308C(32);
          *(_DWORD *)v58 = a9;
          v59 = sub_10006E598();
          *(_QWORD *)(v58 + 4) = sub_10006E578(v59, v60);
          sub_10006E698();
          sub_10006EB6C();
          sub_100037174(v61, v62, v63, "Invalid UUID for JSON Bag: %s", (uint8_t *)v58);
          sub_10003716C(v20);
          sub_100033080(v20);
          v54 = v58;
LABEL_46:
          sub_100033080(v54);

        }
        else
        {
          v21 = *(NSObject **)(v11 + 520);
          v47 = sub_10006E598();
          Logger.logObject.getter(v47);
          v48 = sub_10006E5E0();
          if (sub_10006E588(v48))
          {
            v20 = sub_10003308C(12);
            v72 = sub_10003308C(32);
            *(_DWORD *)v20 = a9;
            v49 = sub_10006E598();
            *(_QWORD *)(v20 + 4) = sub_10006E578(v49, v50);
            sub_10006E698();
            sub_10006EB6C();
            sub_100037174(v51, v52, v53, "Configuration set to not trigger on payment card provisioning for bagID: %s", (uint8_t *)v20);
            sub_10006E8DC();
            sub_100033080(v72);
            v54 = v20;
            goto LABEL_46;
          }
LABEL_47:
          sub_10006EB78();

        }
      }
    }
  }
  sub_10006E9E0();
  v64 = sub_10006E5E0();
  if (sub_10004ECA8(v64))
  {
    v65 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v65);
    sub_10004ED40((void *)&_mh_execute_header, v21, (os_log_type_t)v20, "Invalid JSON bag configuration.", v12);
    sub_100033080((uint64_t)v12);
  }

LABEL_57:
  sub_10004F244();
  v68 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  sub_10006F19C(v68);
  sub_100040A54();
  sub_10006E4A4();
}

#error "100064878: call analysis failed (funcsize=109)"

uint64_t sub_100064984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  sub_10006EFD4();
  sub_100067BA0(v0, v1, v2, v3);
  sub_100040A54();
  return sub_100040920();
}

void sub_1000649C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_10006E734();
  sub_10006E7C4(v9[55]);
  v10 = v9[69];
  v11 = v9[68];
  sub_10006EFEC();
  while (v10)
  {
    sub_10006ED08();
LABEL_22:
    v9[69] = v10;
    v9[68] = v11;
    v23 = *(_BYTE *)(*(_QWORD *)(v12 + 56) + 32 * v13 + 27);
    sub_10006E598();
    if ((v23 & 1) != 0)
    {
      v34 = v9[53];
      sub_10006E8CC();
      sub_10006E6F8(v34);
      if (!v35)
      {
        sub_10006E934();
        sub_10006E774();
        sub_10004F018();
        sub_10006E4DC(v45, v46, v47);
        return;
      }
      v24 = (void *)v9[65];
      sub_10004EB70(v9[53], &qword_100505020);
      v36 = sub_10006E598();
      Logger.logObject.getter(v36);
      v37 = sub_10006E5E0();
      if (!sub_10006E588(v37))
        goto LABEL_30;
      v38 = sub_10003308C(12);
      v49 = sub_10003308C(32);
      *(_DWORD *)v38 = a9;
      v39 = sub_10006E598();
      *(_QWORD *)(v38 + 4) = sub_10006E578(v39, v40);
      sub_10006E698();
      sub_10006EB6C();
      sub_100037174(v41, v42, v43, "Invalid UUID for JSON Bag: %s", (uint8_t *)v38);
      sub_10003716C(v49);
      sub_100033080(v49);
      v33 = v38;
LABEL_29:
      sub_100033080(v33);

    }
    else
    {
      v24 = (void *)v9[65];
      v25 = sub_10006E598();
      Logger.logObject.getter(v25);
      v26 = sub_10006E5E0();
      if (sub_10006E588(v26))
      {
        v27 = sub_10003308C(12);
        v48 = sub_10003308C(32);
        *(_DWORD *)v27 = a9;
        v28 = sub_10006E598();
        *(_QWORD *)(v27 + 4) = sub_10006E578(v28, v29);
        sub_10006E698();
        sub_10006EB6C();
        sub_100037174(v30, v31, v32, "Configuration set to not trigger on payment card provisioning for bagID: %s", (uint8_t *)v27);
        sub_10006E8DC();
        sub_100033080(v48);
        v33 = v27;
        goto LABEL_29;
      }
LABEL_30:
      sub_10006EB78();

    }
  }
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  sub_10006E9CC();
  if (v14 == v15)
    goto LABEL_31;
  sub_10006ECF8();
  if (v16)
    goto LABEL_21;
  sub_10006ECE8();
  if (v14 == v15)
    goto LABEL_31;
  if (*(_QWORD *)(v17 + 8 * v11))
    goto LABEL_21;
  sub_10006F22C();
  if (v14 == v15)
    goto LABEL_31;
  if (*(_QWORD *)(v18 + 8 * v11))
  {
LABEL_21:
    sub_10006E7AC();
    goto LABEL_22;
  }
  sub_10006F208();
  if (v14 == v15)
  {
LABEL_31:
    swift_release(v9[66]);
    swift_release(v9[67]);
    v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    sub_10006F19C(v44);
    sub_100040A54();
    sub_10006E4A4();
    return;
  }
  if (*(_QWORD *)(v19 + 8 * v21))
  {
    v11 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v20)
      goto LABEL_31;
    sub_10006F238();
    if (v22)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100064C60()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 560));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100064CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7[53] = a6;
  v7[54] = a7;
  v7[51] = a4;
  v7[52] = a5;
  v10 = sub_100032C48(&qword_100505020);
  v7[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v7[56] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[57] = v12;
  v7[58] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.Failure);
  v7[59] = AssociatedTypeWitness;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[60] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[61] = swift_task_alloc(v15);
  v7[62] = swift_task_alloc(v15);
  v16 = *(_QWORD *)(a6 - 8);
  v7[63] = v16;
  v7[64] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness(0, a7, a6, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v7[65] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v7[66] = v18;
  v7[67] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100064DE8, 0, 0);
}

uint64_t sub_100064DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10006E5E8();
  v12 = v10[53];
  v11 = v10[54];
  v13 = v10[52] + 16;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v10[63] + 16))(v10[64], v10[51], v12);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v12, v11);
  sub_10005FC8C(v13, (uint64_t)(v10 + 41));
  v10[68] = swift_getAssociatedConformanceWitness(v10[54], v10[53], v10[65], &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v14 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v10[69] = v14;
  *v14 = v10;
  v14[1] = sub_100064EB8;
  sub_10006EFBC();
  sub_10006E85C();
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_100064EB8()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 552));
  sub_100040A54();
  return sub_100040920();
}

void sub_100064EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  char v13;
  uint64_t v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _WORD *v23;
  os_log_type_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  os_log_type_t v63;
  os_log_type_t v64;
  _WORD *v65;
  os_log_type_t v66;
  _WORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  sub_10006E734();
  if (*(_BYTE *)(v11 + 600) == 1)
  {
    sub_10006E7C4(*(_QWORD *)(v11 + 528));
    sub_10006F048();
    if (!v13)
      swift_once(&qword_100503490, sub_100061FD8);
    v14 = sub_1000357DC();
    sub_10005680C(v14, (uint64_t)qword_100504D80);
    v15 = sub_10006E5E0();
    if (sub_10004EFCC(v15))
    {
      v16 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v16);
      sub_100058F24((void *)&_mh_execute_header, v17, v18, "Error - Calzone monitoring stopped");
      sub_100033080(v10);
    }

    goto LABEL_55;
  }
  sub_10006F048();
  if (!v13)
    swift_once(&qword_100503490, sub_100061FD8);
  v19 = sub_1000357DC();
  v20 = sub_1000352B0(v19, (uint64_t)qword_100504D80);
  *(_QWORD *)(v11 + 560) = v20;
  v21 = v20;
  Logger.logObject.getter(v20);
  v22 = sub_100056100();
  if (sub_10004EFCC(v22))
  {
    v23 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v23);
    sub_10004ED40((void *)&_mh_execute_header, v20, (os_log_type_t)v9, "Calzone monitor fired", v12);
    sub_100033080((uint64_t)v12);
  }

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    sub_10006E9E0();
    v24 = sub_100056100();
    if (sub_10004EFCC(v24))
    {
      v25 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v25);
      v28 = "Calzone cancelled";
LABEL_53:
      sub_100058F24((void *)&_mh_execute_header, v26, v27, v28);
      sub_100033080(v20);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  v29 = sub_10006F03C();
  *(_QWORD *)(v11 + 568) = v29;
  if (!v29)
  {
    sub_10006E9E0();
    v66 = sub_100056100();
    if (sub_10004EFCC(v66))
    {
      v67 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v67);
      v28 = "Ending monitor as RavioliManager has been released";
      goto LABEL_53;
    }
LABEL_54:

    sub_10006EF20();
LABEL_55:
    sub_10006EC78();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_10006E4C0(*(uint64_t (**)(void))(v11 + 8));
    return;
  }
  sub_10006F264();
  if (qword_1005034D8 != -1)
LABEL_59:
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v21);
  v30 = (id)static ASDConfigurationManager.shared;
  sub_10006F214();

  sub_10006F090(v31, v32, &qword_100503A78);
  if (*(_QWORD *)(v11 + 152) != 1)
  {
    sub_10006EB1C();
    sub_10006EED8();
    sub_100039724(v21);
    sub_10003974C((uint64_t *)v12);
    sub_10006EEC8();
    v33 = *(_QWORD *)(v11 + 400);
    *(_QWORD *)(v11 + 576) = v33;
    if (v33)
    {
      v34 = 0;
      *(_BYTE *)(v11 + 601) = *(_BYTE *)(v33 + 32);
      sub_10006EACC();
      sub_10006EFEC();
      while (1)
      {
        if (v9)
        {
          sub_10006ED24();
        }
        else
        {
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            goto LABEL_59;
          }
          sub_10006E9CC();
          if (v37 == v38)
            goto LABEL_56;
          sub_10006ECF8();
          if (!v39)
          {
            sub_10006ECE8();
            if (v37 == v38)
              goto LABEL_56;
            if (!*(_QWORD *)(v40 + 8 * v34))
            {
              sub_10006F22C();
              if (v37 == v38)
                goto LABEL_56;
              if (!*(_QWORD *)(v41 + 8 * v34))
              {
                sub_10006F208();
                if (v37 == v38)
                {
LABEL_56:
                  swift_release(*(_QWORD *)(v11 + 568));
                  goto LABEL_57;
                }
                if (!*(_QWORD *)(v42 + 8 * v44))
                {
                  while (1)
                  {
                    v34 = v44 + 1;
                    if (__OFADD__(v44, 1))
                      break;
                    if (v34 >= v43)
                      goto LABEL_56;
                    sub_10006F238();
                    if (v45)
                      goto LABEL_38;
                  }
                  __break(1u);
                  return;
                }
                v34 = v44;
              }
            }
          }
LABEL_38:
          sub_10006E7AC();
        }
        *(_QWORD *)(v11 + 592) = v9;
        *(_QWORD *)(v11 + 584) = v34;
        v46 = *(_BYTE *)(*(_QWORD *)(v35 + 56) + 32 * v36 + 27);
        sub_10006E598();
        if ((v46 & 1) != 0)
        {
          v55 = *(_QWORD *)(v11 + 440);
          sub_10006E8CC();
          sub_10006E6F8(v55);
          if (!v13)
          {
            sub_10006E934();
            sub_10006E774();
            sub_10004F018();
            sub_10006E4DC(v69, v70, v71);
            return;
          }
          v21 = *(NSObject **)(v11 + 560);
          sub_10004EB70(*(_QWORD *)(v11 + 440), &qword_100505020);
          v56 = sub_10006E598();
          Logger.logObject.getter(v56);
          v57 = sub_10006E5E0();
          if (!sub_10006E588(v57))
            goto LABEL_47;
          v58 = sub_10003308C(12);
          v20 = sub_10003308C(32);
          *(_DWORD *)v58 = a9;
          v59 = sub_10006E598();
          *(_QWORD *)(v58 + 4) = sub_10006E578(v59, v60);
          sub_10006E698();
          sub_10006EB6C();
          sub_100037174(v61, v62, v63, "Invalid UUID for JSON Bag: %s", (uint8_t *)v58);
          sub_10003716C(v20);
          sub_100033080(v20);
          v54 = v58;
LABEL_46:
          sub_100033080(v54);

        }
        else
        {
          v21 = *(NSObject **)(v11 + 560);
          v47 = sub_10006E598();
          Logger.logObject.getter(v47);
          v48 = sub_10006E5E0();
          if (sub_10006E588(v48))
          {
            v20 = sub_10003308C(12);
            v72 = sub_10003308C(32);
            *(_DWORD *)v20 = a9;
            v49 = sub_10006E598();
            *(_QWORD *)(v20 + 4) = sub_10006E578(v49, v50);
            sub_10006E698();
            sub_10006EB6C();
            sub_100037174(v51, v52, v53, "Configuration set to not trigger on payment card provisioning for bagID: %s", (uint8_t *)v20);
            sub_10006E8DC();
            sub_100033080(v72);
            v54 = v20;
            goto LABEL_46;
          }
LABEL_47:

          sub_10006EB78();
        }
      }
    }
  }
  sub_10006E9E0();
  v64 = sub_10006E5E0();
  if (sub_10004ECA8(v64))
  {
    v65 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v65);
    sub_10004ED40((void *)&_mh_execute_header, v21, (os_log_type_t)v20, "Invalid JSON bag configuration.", v12);
    sub_100033080((uint64_t)v12);
  }

LABEL_57:
  sub_10004F244();
  *(_QWORD *)(v11 + 544) = swift_getAssociatedConformanceWitness(*(_QWORD *)(v11 + 432), *(_QWORD *)(v11 + 424), *(_QWORD *)(v11 + 520), &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v68 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  sub_10006E908(v68);
  sub_10006E4A4();
}

uint64_t sub_100065454()
{
  sub_10006EFD4();
  sub_100067FE8();
  sub_100040A54();
  return sub_100040920();
}

void sub_100065494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_10006E734();
  sub_10006E7C4(v9[57]);
  v10 = v9[74];
  v11 = v9[73];
  sub_10006EFEC();
  while (v10)
  {
    sub_10006ED24();
LABEL_22:
    v9[74] = v10;
    v9[73] = v11;
    v23 = *(_BYTE *)(*(_QWORD *)(v12 + 56) + 32 * v13 + 27);
    sub_10006E598();
    if ((v23 & 1) != 0)
    {
      v34 = v9[55];
      sub_10006E8CC();
      sub_10006E6F8(v34);
      if (!v35)
      {
        sub_10006E934();
        sub_10006E774();
        sub_10004F018();
        sub_10006E4DC(v45, v46, v47);
        return;
      }
      v24 = (void *)v9[70];
      sub_10004EB70(v9[55], &qword_100505020);
      v36 = sub_10006E598();
      Logger.logObject.getter(v36);
      v37 = sub_10006E5E0();
      if (!sub_10006E588(v37))
        goto LABEL_30;
      v38 = sub_10003308C(12);
      v49 = sub_10003308C(32);
      *(_DWORD *)v38 = a9;
      v39 = sub_10006E598();
      *(_QWORD *)(v38 + 4) = sub_10006E578(v39, v40);
      sub_10006E698();
      sub_10006EB6C();
      sub_100037174(v41, v42, v43, "Invalid UUID for JSON Bag: %s", (uint8_t *)v38);
      sub_10003716C(v49);
      sub_100033080(v49);
      v33 = v38;
LABEL_29:
      sub_100033080(v33);

    }
    else
    {
      v24 = (void *)v9[70];
      v25 = sub_10006E598();
      Logger.logObject.getter(v25);
      v26 = sub_10006E5E0();
      if (sub_10006E588(v26))
      {
        v27 = sub_10003308C(12);
        v48 = sub_10003308C(32);
        *(_DWORD *)v27 = a9;
        v28 = sub_10006E598();
        *(_QWORD *)(v27 + 4) = sub_10006E578(v28, v29);
        sub_10006E698();
        sub_10006EB6C();
        sub_100037174(v30, v31, v32, "Configuration set to not trigger on payment card provisioning for bagID: %s", (uint8_t *)v27);
        sub_10006E8DC();
        sub_100033080(v48);
        v33 = v27;
        goto LABEL_29;
      }
LABEL_30:

      sub_10006EB78();
    }
  }
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  sub_10006E9CC();
  if (v14 == v15)
    goto LABEL_31;
  sub_10006ECF8();
  if (v16)
    goto LABEL_21;
  sub_10006ECE8();
  if (v14 == v15)
    goto LABEL_31;
  if (*(_QWORD *)(v17 + 8 * v11))
    goto LABEL_21;
  sub_10006F22C();
  if (v14 == v15)
    goto LABEL_31;
  if (*(_QWORD *)(v18 + 8 * v11))
  {
LABEL_21:
    sub_10006E7AC();
    goto LABEL_22;
  }
  sub_10006F208();
  if (v14 == v15)
  {
LABEL_31:
    swift_release(v9[71]);
    swift_release(v9[72]);
    v9[68] = swift_getAssociatedConformanceWitness(v9[54], v9[53], v9[65], &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    sub_10006E908(v44);
    sub_10006E4A4();
    return;
  }
  if (*(_QWORD *)(v19 + 8 * v21))
  {
    v11 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v20)
      goto LABEL_31;
    sub_10006F238();
    if (v22)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

#error "100065880: call analysis failed (funcsize=137)"

Swift::Void __swiftcall RavioliManager.stopWalletMonitor()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  if (*(_QWORD *)(v0 + v1))
  {
    sub_10004F24C();
    Task.cancel()();
    sub_10004F244();
    v2 = *(_QWORD *)(v0 + v1);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;
  swift_release(v2);
}

uint64_t sub_1000659FC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[16];
  uint64_t v38[5];
  uint64_t v39;
  uint64_t v40;

  v0 = sub_100065E44();
  v2 = v1;
  if (v1 >> 60 != 15)
  {
    v3 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = JSONDecoder.init()();
    v5 = sub_10006D528();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v38, &type metadata for RavioliVerifier.ResponseDTO, v0, v2, &type metadata for RavioliVerifier.ResponseDTO, v5);
    swift_release(v4);
    v6 = v38[1];
    v7 = v38[3];
    v8 = v39;
    if (v40 == 1
      && (v9 = v38[0],
          v10 = v38[2],
          v11 = v38[4],
          swift_bridgeObjectRetain(v39),
          v12 = Data.init(base64Encoded:options:)(v11, v8, 0),
          v14 = v13,
          swift_bridgeObjectRelease(v8),
          v14 >> 60 != 15))
    {
      swift_bridgeObjectRetain(v7);
      v34 = Data.init(base64Encoded:options:)(v10, v7, 0);
      v29 = v28;
      swift_bridgeObjectRelease(v7);
      if (v29 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v6);
      }
      else
      {
        v33 = Data.init(base64Encoded:options:)(v9, v6, 0);
        v31 = v30;
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v6);
        if (v31 >> 60 != 15)
        {
          v32 = sub_10009651C(v33, v31, v12, v14, v34, v29);
          sub_10003301C(v33, v31);
          sub_10003301C(v34, v29);
          sub_10003301C(v12, v14);
          sub_10003301C(v0, v2);
          return v32;
        }
        sub_10003301C(v34, v29);
      }
      sub_10003301C(v12, v14);
    }
    else
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
    }
    v15 = sub_10006D564();
    v16 = swift_allocError(&type metadata for RavioliVerifier.CCVerificationError, v15, 0, 0);
    *v17 = 3;
    swift_willThrow(v16);
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v18 = type metadata accessor for Logger(0);
    sub_1000352B0(v18, (uint64_t)qword_100504D80);
    swift_errorRetain(v16);
    v19 = swift_errorRetain(v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v38[0] = v23;
      *(_DWORD *)v22 = 136315138;
      swift_getErrorValue(v16, v37, v36);
      v24 = Error.localizedDescription.getter(v36[1], v36[2]);
      v26 = v25;
      v35 = sub_100036778(v24, v25, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error verifying stored Ravioli: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
      sub_10003301C(v0, v2);

      swift_errorRelease(v16);
    }
    else
    {
      sub_10003301C(v0, v2);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
    return 0;
  }
  return v0;
}

uint64_t sub_100065E44()
{
  id v0;
  Class isa;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(PJXBDBF1h0EU80dy), "sharedInstance");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, "f55HW2T4cquHq2nn:", isa);

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100065EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100065F04, v3, 0);
}

uint64_t sub_100065F04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  *(_QWORD *)(v0 + 48) = sub_10006F09C();
  v1 = sub_100040900((uint64_t)&unk_1004D1350, 17);
  v2 = (_QWORD *)sub_10006E6B4(v1);
  v3 = sub_10006E9E8(v2, (uint64_t)sub_100065F50);
  return sub_10006EBF8(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100065F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10006E8A4();
  if (!v1)
  {
    *(_QWORD *)(v3 + 80) = v0;
    *(_QWORD *)(v3 + 88) = v2;
  }
  return sub_100040964();
}

uint64_t sub_100065FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10004EC74((uint64_t)sub_100065FB8, v3);
}

uint64_t sub_100065FB8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  *(_QWORD *)(v0 + 48) = sub_10006F09C();
  v1 = sub_100040900((uint64_t)&unk_1004D1350, 17);
  v2 = (_QWORD *)sub_10006E6B4(v1);
  v3 = sub_10006E9E8(v2, (uint64_t)sub_100066004);
  return sub_10006EBF8(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100066004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10006E8A4();
  if (!v1)
  {
    *(_QWORD *)(v3 + 80) = v0;
    *(_QWORD *)(v3 + 88) = v2;
  }
  return sub_100040964();
}

uint64_t sub_100066054()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(v2 + 16) = 1;
  sub_1000660D0(v1, v3, v2);
  sub_1000357E4();
  return sub_10006EC3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100066098()
{
  uint64_t v0;

  sub_1000660D0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56));
  sub_1000357E4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000660D0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  _BYTE v28[24];

  type metadata accessor for ASAnalyticsEvent(0);
  sub_10004EDE8();
  __chkstk_darwin(v7);
  sub_100046E44();
  v10 = v9 - v8;
  v11 = sub_10006F09C();
  v12 = v11 - a1;
  if (v11 < a1)
  {
    __break(1u);
  }
  else
  {
    a1 = a3 + 16;
    v3 = (double)v12 / 1000000000.0;
    sub_100032EFC((_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 160)), *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 160) + 24));
    sub_10005FC8C(a3 + 16, (uint64_t)v28);
    *(_BYTE *)v10 = *(_BYTE *)(a3 + 16);
    *(double *)(v10 + 8) = v3;
    v13 = sub_10006F108();
    swift_storeEnumTagMultiPayload(v13, v14, 5);
    sub_100099360(v10);
    sub_10006DBA0(v10, type metadata accessor for ASAnalyticsEvent);
    if (qword_100503490 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100503490, sub_100061FD8);
LABEL_3:
  v15 = sub_1000357DC();
  v16 = sub_1000352B0(v15, (uint64_t)qword_100504D80);
  v17 = sub_10006ECA8(a3);
  Logger.logObject.getter(v17);
  v18 = sub_100056100();
  if (sub_10006EB14(v16))
  {
    v19 = sub_10003308C(22);
    v20 = sub_10003308C(32);
    v27 = v20;
    *(_DWORD *)v19 = 136315394;
    sub_10005FC8C(a1, (uint64_t)v26);
    if (*(_BYTE *)(a3 + 16))
      v21 = 0x6564656563637573;
    else
      v21 = 0x44454C494146;
    if (*(_BYTE *)(a3 + 16))
      v22 = 0xE900000000000064;
    else
      v22 = 0xE600000000000000;
    v25 = sub_100036778(v21, v22, &v27);
    sub_10006F0AC((uint64_t)&v25, v23, v24, v19 + 12);
    sub_10006F1E8();
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 12) = 2048;
    v25 = *(_QWORD *)&v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v19 + 14, v19 + 22);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "Ravioli request %s taking %f seconds", (uint8_t *)v19, 0x16u);
    sub_10003716C(v20);
    sub_100033080(v20);
    sub_100033080(v19);

  }
  else
  {

    sub_10006F1E8();
  }
}

uint64_t sub_100066334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100066350, v3, 0);
}

uint64_t sub_100066350()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v3 = sub_1000357DC();
  sub_10005680C(v3, (uint64_t)qword_100504D80);
  v4 = sub_100056100();
  if (sub_10004EFCC(v4))
  {
    v5 = (_WORD *)sub_10003308C(2);
    sub_10006E7D8(v5);
    sub_100058F24((void *)&_mh_execute_header, v6, v7, "Performing Ravioli fetch");
    sub_100033080(v1);
  }

  v8 = (_QWORD *)swift_task_alloc(dword_100504F74);
  *(_QWORD *)(v2 + 48) = v8;
  *v8 = v2;
  v8[1] = sub_100066414;
  v9 = sub_10006EB84(*(_QWORD *)(v2 + 16));
  return sub_100065EE8(v9, v10, v11);
}

uint64_t sub_100066414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006E824();
  if (v1)
    return sub_1000409E0(*(uint64_t (**)(void))(v3 + 8));
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = v0;
  return sub_100040964();
}

uint64_t sub_100066464()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  sub_10006665C(v1, v2, *(_QWORD *)(v0 + 16));
  sub_100033030(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000664D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10004EC74((uint64_t)sub_1000664EC, v3);
}

uint64_t sub_1000664EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v3 = sub_1000357DC();
  sub_10005680C(v3, (uint64_t)qword_100504D80);
  v4 = sub_100056100();
  if (sub_10004EFCC(v4))
  {
    v5 = (_WORD *)sub_10003308C(2);
    sub_10006E7D8(v5);
    sub_100058F24((void *)&_mh_execute_header, v6, v7, "Performing Ravioli fetch");
    sub_100033080(v1);
  }

  v8 = (_QWORD *)swift_task_alloc(dword_100504EEC);
  *(_QWORD *)(v2 + 48) = v8;
  *v8 = v2;
  v8[1] = sub_1000665B0;
  v9 = sub_10006EB84(*(_QWORD *)(v2 + 16));
  return sub_100065FA0(v9, v10, v11);
}

uint64_t sub_1000665B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006E824();
  if (v1)
    return sub_1000409E0(*(uint64_t (**)(void))(v3 + 8));
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = v0;
  return sub_100040964();
}

uint64_t sub_100066600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = sub_10006ED84();
  sub_1000670A0(v1, v2, v3);
  v4 = sub_10006ED84();
  sub_100033030(v4, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006665C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  os_log_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  id v69;
  uint64_t v70;
  Class isa;
  Class v72;
  uint64_t v73;
  char *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  os_log_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD v102[3];
  char v103[8];
  uint64_t v104;
  uint64_t v105[5];
  uint64_t v106;
  uint64_t v107;

  v4 = v3;
  v8 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONDecoder.init()();
  v17 = sub_10006D528();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v105, &type metadata for RavioliVerifier.ResponseDTO, a1, a2, &type metadata for RavioliVerifier.ResponseDTO, v17);
  if (v3)
  {
    swift_release(v16);
LABEL_14:
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v34 = type metadata accessor for Logger(0);
    sub_1000352B0(v34, (uint64_t)qword_100504D80);
    swift_errorRetain(v4);
    v35 = swift_errorRetain(v4);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v99 = a2;
      v39 = (uint8_t *)v38;
      v40 = swift_slowAlloc(32, -1);
      v100 = v10;
      v41 = v40;
      v105[0] = v40;
      v101 = a1;
      *(_DWORD *)v39 = 136315138;
      swift_getErrorValue(v4, v103, v102);
      v42 = Error.localizedDescription.getter(v102[1], v102[2]);
      v44 = v43;
      v104 = sub_100036778(v42, v43, v105);
      a1 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error verifying or storing Ravioli: %s", v39, 0xCu);
      swift_arrayDestroy(v41, 1);
      v45 = v41;
      v10 = v100;
      swift_slowDealloc(v45, -1, -1);
      v46 = v39;
      a2 = v99;
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    sub_100033DD0(a1, a2);
    v47 = sub_100033DD0(a1, a2);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = swift_slowAlloc(32, -1);
      v105[0] = v101;
      *(_DWORD *)v50 = 136315138;
      static String.Encoding.utf8.getter();
      v51 = String.init(data:encoding:)(a1, a2, v10);
      if (v52)
      {
        v53 = v52;
      }
      else
      {
        v51 = 0x3866747520746F4ELL;
        v53 = 0xE800000000000000;
      }
      v104 = sub_100036778(v51, v53, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v53);
      sub_100033030(a1, a2);
      sub_100033030(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Ravioli data was: %s", v50, 0xCu);
      v54 = v101;
      swift_arrayDestroy(v101, 1);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      sub_100033030(a1, a2);
      sub_100033030(a1, a2);
    }

    swift_willThrow(v55);
    return;
  }
  v99 = a3;
  v101 = a1;
  swift_release(v16);
  v18 = v105[1];
  v19 = v105[3];
  v20 = v106;
  if (v107 != 1)
  {
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    a1 = v101;
LABEL_13:
    v32 = sub_10006D564();
    v4 = swift_allocError(&type metadata for RavioliVerifier.CCVerificationError, v32, 0, 0);
    *v33 = 3;
    swift_willThrow(v4);
    goto LABEL_14;
  }
  v100 = v10;
  v95 = v11;
  v96 = v105[0];
  v21 = v105[2];
  v22 = v105[4];
  swift_bridgeObjectRetain(v106);
  v97 = (os_log_t)Data.init(base64Encoded:options:)(v22, v20, 0);
  v24 = v23;
  swift_bridgeObjectRelease(v20);
  v98 = v24;
  if (v24 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
LABEL_12:
    v10 = v100;
    a1 = v101;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(v19);
  v25 = Data.init(base64Encoded:options:)(v21, v19, 0);
  v27 = v26;
  swift_bridgeObjectRelease(v19);
  if (v27 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    v28 = v97;
LABEL_11:
    sub_10003301C((uint64_t)v28, v98);
    goto LABEL_12;
  }
  v94 = v27;
  v96 = Data.init(base64Encoded:options:)(v96, v18, 0);
  v30 = v29;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v18);
  v31 = v97;
  if (v30 >> 60 == 15)
  {
    sub_10003301C(v25, v94);
    v28 = v31;
    goto LABEL_11;
  }
  v56 = v98;
  v57 = v94;
  v100 = (char *)sub_10009651C(v96, v30, (uint64_t)v97, v98, v25, v94);
  v58 = v96;
  v96 = v59;
  sub_10003301C(v58, v30);
  sub_10003301C(v25, v57);
  sub_10003301C((uint64_t)v31, v56);
  sub_100033030((uint64_t)v100, v96);
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v60 = type metadata accessor for Logger(0);
  v61 = sub_1000352B0(v60, (uint64_t)qword_100504D80);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter();
  v64 = os_log_type_enabled(v62, v63);
  v65 = v95;
  if (v64)
  {
    v66 = v61;
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Verified response", v67, 2u);
    v68 = v67;
    v61 = v66;
    swift_slowDealloc(v68, -1, -1);
  }

  v69 = objc_msgSend((id)objc_opt_self(PJXBDBF1h0EU80dy), "sharedInstance");
  v70 = v99;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v72 = Data._bridgeToObjectiveC()().super.isa;
  v105[0] = 0;
  objc_msgSend(v69, "c94QZ147F1UWY71l:jkjlhN0UgO78kW6q:error:", isa, v72, v105);

  v74 = (char *)v105[0];
  if (v105[0])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v70, v65);
    v75 = v74;
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    v78 = v77;
    if (os_log_type_enabled(v76, v77))
    {
      v79 = swift_slowAlloc(22, -1);
      LODWORD(v98) = v78;
      v80 = v79;
      v99 = swift_slowAlloc(64, -1);
      v105[0] = v99;
      *(_DWORD *)v80 = 136315394;
      v100 = v74;
      sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v97 = v76;
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v65, v81);
      v84 = v83;
      v104 = sub_100036778(v82, v83, v105);
      v101 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v80 + 4, v80 + 12);
      swift_bridgeObjectRelease(v84);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v65);
      *(_WORD *)(v80 + 12) = 2080;
      v85 = objc_msgSend(v75, "localizedDescription");
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v88 = v87;

      v74 = v100;
      v104 = sub_100036778(v86, v88, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v80 + 14, v80 + 22);

      swift_bridgeObjectRelease(v88);
      v89 = v97;
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "Error storing Ravioli data for bag: %s. Error: %s ", (uint8_t *)v80, 0x16u);
      v90 = v99;
      swift_arrayDestroy(v99, 2);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v80, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v65);
    }
  }
  v91 = Logger.logObject.getter(v73);
  v92 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v91, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Stored Ravioli", v93, 2u);
    swift_slowDealloc(v93, -1, -1);
  }

}

void sub_1000670A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  os_log_t v29;
  unint64_t v30;
  unint64_t v31;
  os_log_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  NSObject *v71;
  uint8_t *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  Class isa;
  Class v77;
  uint64_t v78;
  void *v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  _WORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[3];
  char v104[8];
  uint64_t v105;
  uint64_t v106[7];

  v5 = v3;
  type metadata accessor for String.Encoding(0);
  sub_10004EDE8();
  __chkstk_darwin(v9);
  v10 = sub_10006E808();
  v11 = type metadata accessor for UUID(v10);
  v12 = *(os_log_t *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONDecoder.init()();
  v17 = sub_10006D528();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v106, &type metadata for RavioliVerifier.ResponseDTO, a1, a2, &type metadata for RavioliVerifier.ResponseDTO, v17);
  if (v3)
  {
    swift_release(v16);
LABEL_14:
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_1000352B0(v35, (uint64_t)qword_100504D80);
    swift_errorRetain(v5);
    v37 = swift_errorRetain(v5);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = sub_10003308C(12);
      v100 = a2;
      v41 = (uint8_t *)v40;
      v42 = sub_10003308C(32);
      v101 = (void *)v4;
      v43 = v42;
      v106[0] = v42;
      v102 = a1;
      *(_DWORD *)v41 = 136315138;
      swift_getErrorValue(v5, v104, v103);
      v44 = Error.localizedDescription.getter(v103[1], v103[2]);
      v46 = sub_10006F130(v44, v45);
      v47 = sub_10006EFF8(v46);
      a1 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v48, v41 + 4, v41 + 12);
      sub_1000356D4();
      sub_10006E690();
      sub_10006E690();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error verifying or storing Ravioli: %s", v41, 0xCu);
      swift_arrayDestroy(v43, 1);
      v49 = v43;
      v4 = (uint64_t)v101;
      sub_100033080(v49);
      v50 = (uint64_t)v41;
      a2 = v100;
      sub_100033080(v50);
    }
    else
    {
      sub_10006E690();
      sub_10006E690();
    }

    sub_10006F0F4();
    v51 = sub_10006F0F4();
    v52 = v36;
    Logger.logObject.getter(v51);
    v53 = sub_100056100();
    if (os_log_type_enabled(v36, v53))
    {
      v54 = (uint8_t *)sub_10003308C(12);
      v102 = sub_10003308C(32);
      v106[0] = v102;
      *(_DWORD *)v54 = 136315138;
      static String.Encoding.utf8.getter();
      v55 = String.init(data:encoding:)(a1, a2, v4);
      if (v56)
      {
        v57 = v56;
      }
      else
      {
        v55 = 0x3866747520746F4ELL;
        v57 = 0xE800000000000000;
      }
      v58 = sub_100036778(v55, v57, v106);
      v59 = sub_10006EFF8(v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v57);
      sub_10006F0DC();
      sub_10006F0DC();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Ravioli data was: %s", v54, 0xCu);
      v61 = v102;
      swift_arrayDestroy(v102, 1);
      sub_100033080(v61);
      sub_100033080((uint64_t)v54);
    }
    else
    {
      sub_10006F0E8();
      sub_10006F0E8();
    }

    swift_willThrow(v62);
    goto LABEL_26;
  }
  v100 = a3;
  v102 = a1;
  swift_release(v16);
  v18 = v106[1];
  v19 = v106[3];
  if (v106[6] != 1)
  {
    sub_1000356D4();
    sub_100054E90();
    sub_100046EEC();
    a1 = v102;
LABEL_13:
    v33 = sub_10006D564();
    v5 = swift_allocError(&type metadata for RavioliVerifier.CCVerificationError, v33, 0, 0);
    *v34 = 3;
    swift_willThrow(v5);
    goto LABEL_14;
  }
  v101 = (void *)v4;
  v96 = v11;
  v97 = v106[0];
  v20 = v106[2];
  sub_100046EC0();
  sub_10004F018();
  v98 = (os_log_t)Data.init(base64Encoded:options:)(v21, v22, v23);
  v25 = v24;
  sub_1000356D4();
  v99 = v25;
  if (v25 >> 60 == 15)
  {
    sub_1000356D4();
    sub_100054E90();
    sub_100046EEC();
LABEL_12:
    v4 = (uint64_t)v101;
    a1 = v102;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(v19);
  v26 = Data.init(base64Encoded:options:)(v20, v19, 0);
  v28 = v27;
  sub_100054E90();
  if (v28 >> 60 == 15)
  {
    sub_1000356D4();
    sub_100054E90();
    sub_100046EEC();
    v29 = v98;
LABEL_11:
    sub_10003301C((uint64_t)v29, v99);
    goto LABEL_12;
  }
  v95 = v28;
  v97 = Data.init(base64Encoded:options:)(v97, v18, 0);
  v31 = v30;
  sub_1000356D4();
  sub_100054E90();
  sub_100046EEC();
  v32 = v98;
  if (v31 >> 60 == 15)
  {
    sub_10003301C(v26, v95);
    v29 = v32;
    goto LABEL_11;
  }
  v101 = (void *)sub_10009651C(v97, v31, (uint64_t)v98, v99, v26, v95);
  v63 = v97;
  v97 = v64;
  sub_10006ECC0(v63);
  sub_100033030((uint64_t)v101, v97);
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v65 = type metadata accessor for Logger(0);
  v66 = sub_1000352B0(v65, (uint64_t)qword_100504D80);
  v67 = v66;
  Logger.logObject.getter(v66);
  v68 = sub_100056100();
  v69 = sub_10006EE90(v68);
  v70 = v96;
  if (v69)
  {
    v71 = v66;
    v72 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v32, "Verified response", v72, 2u);
    v73 = (uint64_t)v72;
    v66 = v71;
    sub_100033080(v73);
  }

  v74 = objc_msgSend((id)objc_opt_self(PJXBDBF1h0EU80dy), "sharedInstance");
  v75 = v100;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v77 = Data._bridgeToObjectiveC()().super.isa;
  v106[0] = 0;
  objc_msgSend(v74, "c94QZ147F1UWY71l:jkjlhN0UgO78kW6q:error:", isa, v77, v106);

  v79 = (void *)v106[0];
  if (v106[0])
  {
    ((void (*)(char *, uint64_t, uint64_t))v12[2].isa)(v14, v75, v70);
    v80 = v79;
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (sub_10006EE90(v82))
    {
      v83 = sub_10003308C(22);
      LODWORD(v99) = (_DWORD)v74;
      v84 = v83;
      v100 = sub_10003308C(64);
      v106[0] = v100;
      *(_DWORD *)v84 = 136315394;
      v101 = v79;
      sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v98 = v81;
      v86 = dispatch thunk of CustomStringConvertible.description.getter(v70, v85);
      v105 = sub_10006F130(v86, v87);
      v102 = (uint64_t)v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v84 + 4, v84 + 12);
      sub_1000356D4();
      sub_10006EF10();
      *(_WORD *)(v84 + 12) = 2080;
      v88 = objc_msgSend(v80, "localizedDescription");
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v79 = v101;
      v105 = sub_100036778(v89, v91, v106);
      v66 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v84 + 14, v84 + 22);

      swift_bridgeObjectRelease(v91);
      v12 = v98;
      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v99, "Error storing Ravioli data for bag: %s. Error: %s ", (uint8_t *)v84, 0x16u);
      v92 = v100;
      swift_arrayDestroy(v100, 2);
      sub_100033080(v92);
      sub_100033080(v84);

    }
    else
    {

      sub_10006EF10();
    }
  }
  Logger.logObject.getter(v78);
  v93 = sub_100056100();
  if (os_log_type_enabled(v66, v93))
  {
    v94 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v94);
    _os_log_impl((void *)&_mh_execute_header, v66, v93, "Stored Ravioli", (uint8_t *)v12, 2u);
    sub_100033080((uint64_t)v12);
  }

LABEL_26:
  sub_100046BF8();
}

void sub_10006792C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _BYTE v21[24];
  uint64_t v22[12];
  _QWORD __src[12];
  _BYTE __dst[96];
  uint64_t v25;
  uint64_t v26;

  if ((a2 != 0xD000000000000011 || a3 != 0x80000001003E4790)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD000000000000011, 0x80000001003E4790, 0) & 1) == 0)
  {
    goto LABEL_16;
  }
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  swift_beginAccess(&static ASDConfigurationManager.shared, v21, 0, 0);
  v6 = (id)static ASDConfigurationManager.shared;
  sub_100084C20(v22);

  sub_10004EB34((uint64_t)v22, (uint64_t)__src, &qword_100503A78);
  if (__src[5] == 1)
    goto LABEL_16;
  memcpy(__dst, __src, sizeof(__dst));
  sub_10004EB34((uint64_t)&__dst[80], (uint64_t)&v25, &qword_100504F00);
  sub_100039724(&v25);
  sub_10003974C(v22);
  sub_10004EB34((uint64_t)&v25, (uint64_t)&v26, &qword_100504F00);
  v8 = v26;
  if (!v26)
    goto LABEL_16;
  v9 = UUID.uuidString.getter(v7);
  v11 = v10;
  sub_100061F58(v9, v10, v8);
  v13 = v12;
  v15 = v14;
  sub_100039820(&v25);
  swift_bridgeObjectRelease(v11);
  if (!v13)
    goto LABEL_16;
  swift_bridgeObjectRelease(v13);
  if ((v15 & 0xFF00) != 0x200 && (v15 & 0x100) == 0)
  {
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_1000352B0(v16, (uint64_t)qword_100504D80);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Lazy fetch is disabled.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
  else
  {
LABEL_16:
    sub_100067BA0(a1, a2, a3, 1);
  }
}

uint64_t sub_100067BA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _BYTE v56[24];
  _BYTE v57[24];
  char v58[24];

  v5 = v4;
  v53 = a2;
  v54 = a3;
  v8 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v8);
  v52 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v50 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v49 - v14;
  v16 = (uint64_t *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 112));
  swift_beginAccess(v16, v58, 0, 0);
  v55 = v16;
  v17 = *v16;
  swift_bridgeObjectRetain(v17);
  v18 = sub_100061E8C(a1, v17);
  swift_bridgeObjectRelease(v17);
  if (v18)
  {
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_1000352B0(v19, (uint64_t)qword_100504D80);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = a4;
      v24 = v11;
      v25 = v10;
      v26 = v15;
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cancelling running Ravioli fetch", v27, 2u);
      v28 = v27;
      v15 = v26;
      v10 = v25;
      v11 = v24;
      a4 = v23;
      swift_slowDealloc(v28, -1, -1);
    }

    Task.cancel()();
    swift_beginAccess(v55, v57, 33, 0);
    v29 = sub_1000537B0(a1);
    swift_endAccess(v57);
    swift_release(v18);
    swift_release(v29);
  }
  if ((a4 & 1) != 0)
    sub_10006A578(a1, v53, v54);
  v30 = (uint64_t *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136));
  swift_beginAccess(v30, v57, 0, 0);
  v31 = *v30;
  swift_bridgeObjectRetain(*v30);
  v32 = sub_100061E8C(a1, v31);
  swift_bridgeObjectRelease(v31);
  if (v32)
  {
    Task.cancel()();
    swift_release(v32);
  }
  swift_beginAccess(v30, v56, 33, 0);
  v33 = sub_1000537B0(a1);
  swift_endAccess(v56);
  swift_release(v33);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v34(v15, a1, v10);
  v35 = type metadata accessor for TaskPriority(0);
  v36 = (uint64_t)v15;
  v37 = v52;
  sub_100037020(v52, 1, 1, v35);
  v38 = v50;
  v34(v50, a1, v10);
  sub_10005FB24(&qword_100504F08, &qword_100504F10);
  v40 = v39;
  v41 = *(unsigned __int8 *)(v11 + 80);
  v42 = (v41 + 40) & ~v41;
  v43 = (v51 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = (char *)swift_allocObject(&unk_1004D1328, v43 + 16, v41 | 7);
  *((_QWORD *)v44 + 2) = v5;
  *((_QWORD *)v44 + 3) = v40;
  *((_QWORD *)v44 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v44[v42], v38, v10);
  v45 = &v44[v43];
  v46 = v54;
  *(_QWORD *)v45 = v53;
  *((_QWORD *)v45 + 1) = v46;
  swift_retain_n(v5, 2);
  swift_bridgeObjectRetain(v46);
  v47 = sub_1000494E4(v37, (uint64_t)&unk_100504F20, (uint64_t)v44);
  swift_beginAccess(v55, v56, 33, 0);
  sub_100053B4C(v47, v36);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v36, v10);
  return swift_endAccess(v56);
}

void sub_100067FE8()
{
  uint64_t *v0;
  uint64_t *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  NSObject **v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t WitnessTable;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject **v58;
  _BYTE v59[24];
  _BYTE v60[24];
  uint64_t v61;

  sub_10005FC74();
  v1 = v0;
  v3 = v2;
  v56 = v4;
  v57 = v5;
  v7 = v6;
  v8 = *v0;
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v9);
  sub_10005FCF0();
  v11 = v10;
  v12 = sub_100054E50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v54 = &v49[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = v15;
  __chkstk_darwin(v14);
  v17 = &v49[-v16];
  v53 = (_BYTE *)v8;
  v18 = (NSObject **)((char *)v1 + *(_QWORD *)(v8 + 112));
  sub_10005FC8C((uint64_t)v18, (uint64_t)&v61);
  v58 = v18;
  v19 = *v18;
  sub_100046EC0();
  v20 = sub_100061E8C(v7, (uint64_t)v19);
  sub_1000356D4();
  v55 = (uint64_t)v1;
  if (v20)
  {
    v50 = v3;
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v21 = sub_1000357DC();
    sub_10005680C(v21, (uint64_t)qword_100504D80);
    v22 = sub_100056100();
    if (sub_10006EBE8(v22))
    {
      v23 = v13;
      v24 = v12;
      v25 = (uint8_t *)sub_10003308C(2);
      *(_WORD *)v25 = 0;
      sub_10004ED40((void *)&_mh_execute_header, v19, (os_log_type_t)v3, "Cancelling running Ravioli fetch", v25);
      v26 = (uint64_t)v25;
      v12 = v24;
      v13 = v23;
      v1 = (uint64_t *)v55;
      sub_100033080(v26);
    }

    Task.cancel()();
    sub_10004EE40((uint64_t)v58, (uint64_t)v60, 33);
    sub_1000537B0(v7);
    swift_endAccess(v60);
    sub_10005FD78();
    sub_1000357E4();
    LOBYTE(v3) = v50;
  }
  if ((v3 & 1) != 0)
    sub_10006A70C();
  v27 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 136));
  sub_10005FC8C((uint64_t)v27, (uint64_t)v60);
  v28 = *v27;
  swift_bridgeObjectRetain(*v27);
  v29 = sub_100061E8C(v7, v28);
  sub_100035714();
  if (v29)
  {
    Task.cancel()();
    sub_10005FD78();
  }
  sub_10004EE40((uint64_t)v27, (uint64_t)v59, 33);
  sub_1000537B0(v7);
  swift_endAccess(v59);
  sub_1000357E4();
  sub_10006F190((uint64_t)v17);
  v30 = sub_10006EA48();
  v51 = v11;
  sub_10006E714(v11, v31, v32, v30);
  v33 = v54;
  sub_10006F190((uint64_t)v54);
  v34 = *((_QWORD *)v53 + 10);
  v35 = *((_QWORD *)v53 + 11);
  v37 = type metadata accessor for RavioliManager(255, v34, v35, v36);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RavioliManager<A>, v37);
  v39 = *(unsigned __int8 *)(v13 + 80);
  v40 = v12;
  v53 = v17;
  v41 = (v39 + 56) & ~v39;
  v42 = (v52 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (char *)swift_allocObject(&unk_1004D13C8, v42 + 16, v39 | 7);
  v44 = v55;
  *((_QWORD *)v43 + 2) = v55;
  *((_QWORD *)v43 + 3) = WitnessTable;
  *((_QWORD *)v43 + 4) = v34;
  *((_QWORD *)v43 + 5) = v35;
  *((_QWORD *)v43 + 6) = v44;
  (*(void (**)(char *, _BYTE *, uint64_t))(v13 + 32))(&v43[v41], v33, v40);
  v45 = &v43[v42];
  v46 = v57;
  *(_QWORD *)v45 = v56;
  *((_QWORD *)v45 + 1) = v46;
  sub_10006ECA8(v44);
  sub_100046EC0();
  v47 = sub_1000494E4(v51, (uint64_t)&unk_100504FE8, (uint64_t)v43);
  sub_10004EE40((uint64_t)v58, (uint64_t)v59, 33);
  v48 = (uint64_t)v53;
  sub_100053B4C(v47, (uint64_t)v53);
  sub_10006E7F0(v48, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  swift_endAccess(v59);
  sub_10004F0C0();
}

uint64_t sub_100068390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[16] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[17] = swift_task_alloc(v11);
  v7[18] = swift_task_alloc(v11);
  v12 = type metadata accessor for CancellationError(0);
  v7[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[20] = v13;
  v7[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100068430, a4, 0);
}

uint64_t sub_100068430()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  float *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_10006E5E8();
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v1 = v0[11];
  v2 = sub_1000357DC();
  v3 = sub_1000352B0(v2, (uint64_t)qword_100504D80);
  v0[22] = v3;
  sub_10006ED7C();
  sub_10006E9E0();
  v4 = sub_100056100();
  if (sub_10004ECA8(v4))
  {
    v5 = (float *)sub_10003308C(12);
    v6 = sub_10006EC1C(v5, 3.852e-34);
    sub_10006EDE0(v6, 1000000000.0, v7, v8, v9, v10);
    sub_10006E8EC();
    sub_100037174((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Ravioli fetch requested - sleeping %f", (uint8_t *)v5);
    sub_100033080((uint64_t)v5);
  }
  else
  {
    sub_10006E8EC();
  }

  sub_10006F1BC();
  v11 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to static Task<>.sleep(nanoseconds:) + 1));
  v0[23] = v11;
  sub_100048D84(v11, (uint64_t)sub_100068538);
  return sub_10006E964();
}

uint64_t sub_100068538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10006EA8C();
  if (v1)
    return sub_100040964();
  v4 = (_QWORD *)swift_task_alloc(dword_100504F6C);
  *(_QWORD *)(v0 + 200) = v4;
  *v4 = v2;
  v4[1] = sub_1000685A8;
  v5 = sub_10006EB84(*(_QWORD *)(v0 + 96));
  return sub_100066334(v5, v6, v7);
}

uint64_t sub_1000685A8()
{
  sub_10006EAAC();
  return sub_100040964();
}

#error "10006877C: call analysis failed (funcsize=138)"

uint64_t sub_100068830()
{
  uint64_t v0;

  sub_10006A864(*(_QWORD *)(v0 + 96));
  sub_10006E7E4();
  sub_100040B34();
  sub_100040A10();
  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

#error "1000689F8: call analysis failed (funcsize=138)"

uint64_t sub_100068AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[16] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[17] = swift_task_alloc(v11);
  v7[18] = swift_task_alloc(v11);
  v12 = type metadata accessor for CancellationError(0);
  v7[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[20] = v13;
  v7[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100068B4C, a4, 0);
}

uint64_t sub_100068B4C()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  float *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_10006E5E8();
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v1 = v0[11];
  v2 = sub_1000357DC();
  v3 = sub_1000352B0(v2, (uint64_t)qword_100504D80);
  v0[22] = v3;
  sub_10006ED7C();
  sub_10006E9E0();
  v4 = sub_100056100();
  if (sub_10004ECA8(v4))
  {
    v5 = (float *)sub_10003308C(12);
    v6 = sub_10006EC1C(v5, 3.852e-34);
    sub_10006EDE0(v6, 1000000000.0, v7, v8, v9, v10);
    sub_10006E8EC();
    sub_100037174((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Ravioli fetch requested - sleeping %f", (uint8_t *)v5);
    sub_100033080((uint64_t)v5);
  }
  else
  {
    sub_10006E8EC();
  }

  sub_10006F1BC();
  v11 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v0[23] = v11;
  sub_100048D84(v11, (uint64_t)sub_100068C54);
  return sub_10006E964();
}

uint64_t sub_100068C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10006EA8C();
  if (v1)
    return sub_100040964();
  v4 = (_QWORD *)swift_task_alloc(dword_100504EF4);
  *(_QWORD *)(v0 + 200) = v4;
  *v4 = v2;
  v4[1] = sub_100068CC4;
  v5 = sub_10006EB84(*(_QWORD *)(v0 + 96));
  return sub_1000664D4(v5, v6, v7);
}

uint64_t sub_100068CC4()
{
  sub_10006EAAC();
  return sub_100040964();
}

uint64_t sub_100068D08()
{
  uint64_t v0;

  sub_10006AB88();
  sub_10006E7E4();
  sub_100040B34();
  sub_100040A10();
  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

#error "100068ED0: call analysis failed (funcsize=138)"

#error "100069114: call analysis failed (funcsize=138)"

void sub_1000691C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  BOOL v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;

  v0 = type metadata accessor for ServerJSONFetchRetryState(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)objc_opt_self(NSUserDefaults);
  v8 = objc_msgSend(v7, "standardUserDefaults");
  v9 = sub_10006004C((uint64_t)v8);

  if (v9)
  {
    v10 = objc_msgSend(v7, "standardUserDefaults");
    v11 = sub_100060EFC(v10);

    if ((v11 & 1) != 0)
    {
      v12 = objc_msgSend(v7, "standardUserDefaults");
      v13 = sub_100060CE0(v12);

      v14 = objc_msgSend(v7, "standardUserDefaults");
      sub_100060970(v14, (uint64_t)v6);

      v15 = objc_msgSend(v7, "standardUserDefaults");
      v16 = sub_100060728(v15);
      v18 = v17;

      (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v2 + *(int *)(v0 + 20), v6, v3);
      *v2 = v13;
      v19 = (uint64_t *)((char *)v2 + *(int *)(v0 + 24));
      *v19 = v16;
      v19[1] = v18;
      v20 = sub_100032C48(&qword_100505068);
      v21 = sub_100032C48(&qword_100505070);
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(_QWORD *)(v22 + 72);
      v24 = *(unsigned __int8 *)(v22 + 80);
      v25 = (v24 + 32) & ~v24;
      v26 = swift_allocObject(v20, v25 + v23, v24 | 7);
      *(_OWORD *)(v26 + 16) = xmmword_1004077E0;
      v27 = v26 + v25;
      v28 = v27 + *(int *)(v21 + 48);
      if (qword_1005034A0 != -1)
        swift_once(&qword_1005034A0, sub_1000630D4);
      v29 = type metadata accessor for UUID(0);
      v30 = sub_1000352B0(v29, (uint64_t)static RavioliConstants.ravioliUUID);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v30, v29);
      sub_10006D5B0((uint64_t)v2, v28);
      sub_10005FB58((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v32 = Dictionary.init(dictionaryLiteral:)(v26, v29, v0, v31);
      v33 = objc_msgSend(v7, "standardUserDefaults");
      sub_100061B9C(v32, v33);
      swift_bridgeObjectRelease(v32);

      sub_10006DBA0((uint64_t)v2, type metadata accessor for ServerJSONFetchRetryState);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      sub_1000695C4();
    }
    else
    {
      sub_1000695C4();
    }
  }
  else
  {
    if (qword_100503490 != -1)
      swift_once(&qword_100503490, sub_100061FD8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_1000352B0(v34, (uint64_t)qword_100504D80);
    v39 = Logger.logObject.getter(v35);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v36, "No Ravioli cleanup required.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

void sub_1000695C4()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  id v8;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "removeObjectForKey:", v2);

  v3 = objc_msgSend(v0, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "removeObjectForKey:", v4);

  v5 = objc_msgSend(v0, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "removeObjectForKey:", v6);

  v7 = objc_msgSend(v0, "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "removeObjectForKey:", v8);

}

uint64_t sub_100069744()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[2] = v0;
  v2 = *(_QWORD *)(type metadata accessor for ServerJSONFetchRetryState(0) - 8);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100032C48(&qword_100505040) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v5);
  v1[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000697FC, v0, 0);
}

uint64_t sub_1000697FC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  sub_1000691C8();
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = sub_100061708(v2);
  *(_QWORD *)(v0 + 80) = v3;

  v4 = *(_BYTE *)(v3 + 32);
  *(_BYTE *)(v0 + 112) = v4;
  v5 = -1;
  v6 = -1 << v4;
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(v3 + 64);
  if (v7)
  {
    v8 = 0;
    v1 = (v7 - 1) & v7;
LABEL_5:
    sub_10006E9A8();
    v9 = sub_100032C48(&qword_100505048);
    sub_10006ED40(v9);
    sub_10006ED68();
    goto LABEL_12;
  }
  v10 = 63 - v6;
  if ((unint64_t)(63 - v6) <= 0x7F)
  {
    v8 = 0;
  }
  else
  {
    v11 = *(_QWORD **)(v0 + 80);
    if (v11[9])
    {
      v8 = 1;
LABEL_9:
      sub_10006F05C();
      goto LABEL_5;
    }
    if (v10 < 0xC0)
    {
      v8 = 1;
    }
    else
    {
      if (v11[10])
      {
        v8 = 2;
        goto LABEL_9;
      }
      if (v10 < 0x100)
      {
        v8 = 2;
      }
      else
      {
        if (v11[11])
        {
          v8 = 3;
          goto LABEL_9;
        }
        if (v10 < 0x140)
        {
          v8 = 3;
        }
        else
        {
          if (v11[12])
          {
            v8 = 4;
            goto LABEL_9;
          }
          if (v10 < 0x180)
          {
            v8 = 4;
          }
          else
          {
            if (v11[13])
            {
              v8 = 5;
              goto LABEL_9;
            }
            v21 = v10 >> 6;
            v22 = 14;
            while (v22 - 8 < v21)
            {
              if (v11[v22++])
              {
                v8 = v22 - 9;
                goto LABEL_9;
              }
            }
            v8 = v21 - 1;
          }
        }
      }
    }
  }
  v12 = sub_100032C48(&qword_100505048);
  sub_10006F00C(v12);
LABEL_12:
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 96) = v1;
  v13 = *(_QWORD *)(v0 + 72);
  sub_10004EB34(*(_QWORD *)(v0 + 64), v13, &qword_100505040);
  sub_100032C48(&qword_100505048);
  sub_10006E6F8(v13);
  if (v14)
  {
    swift_release(*(_QWORD *)(v0 + 80));
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 56));
    v15 = sub_10006ED84();
    sub_100054608(v15, v16);
    v17 = (_QWORD *)swift_task_alloc(dword_100505054);
    *(_QWORD *)(v0 + 104) = v17;
    *v17 = v0;
    v17[1] = sub_100069A78;
    v18 = sub_10006EB84(*(_QWORD *)(v0 + 56));
    return sub_10006EA50(v18, v19);
  }
}

uint64_t sub_100069A78()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 104));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100069AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  sub_10006DBA0(*(_QWORD *)(v0 + 32), type metadata accessor for ServerJSONFetchRetryState);
  result = sub_10006E7F0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v5 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v0 + 96))
  {
    sub_10006F05C();
LABEL_3:
    sub_10006E9A8();
    v6 = sub_100032C48(&qword_100505048);
    sub_10006ED40(v6);
    sub_10006ED68();
    goto LABEL_25;
  }
  v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  v8 = (1 << *(_BYTE *)(v0 + 112)) + 63;
  if (v7 < (uint64_t)(v8 >> 6))
  {
    v9 = *(_QWORD *)(v0 + 80) + 64;
    v10 = *(_QWORD *)(v9 + 8 * v7);
    if (v10)
    {
LABEL_7:
      v1 = (v10 - 1) & v10;
      v5 = v7;
      goto LABEL_3;
    }
    v11 = v8 >> 6;
    v12 = v5 + 2;
    ++v5;
    if (v7 + 1 < v11)
    {
      v10 = *(_QWORD *)(v9 + 8 * v12);
      if (v10)
      {
LABEL_10:
        v7 = v12;
        goto LABEL_7;
      }
      v5 = v7 + 1;
      if (v7 + 2 < v11)
      {
        v10 = *(_QWORD *)(v9 + 8 * (v7 + 2));
        if (v10)
        {
          v7 += 2;
          goto LABEL_7;
        }
        v5 = v7 + 2;
        if (v7 + 3 < v11)
        {
          v10 = *(_QWORD *)(v9 + 8 * (v7 + 3));
          if (v10)
          {
            v7 += 3;
            goto LABEL_7;
          }
          v12 = v7 + 4;
          v5 = v7 + 3;
          if (v7 + 4 < v11)
          {
            v10 = *(_QWORD *)(v9 + 8 * v12);
            if (v10)
              goto LABEL_10;
            while (1)
            {
              v7 = v12 + 1;
              if (__OFADD__(v12, 1))
                break;
              if (v7 >= v11)
              {
                v5 = v11 - 1;
                goto LABEL_24;
              }
              v10 = *(_QWORD *)(v9 + 8 * v7);
              ++v12;
              if (v10)
                goto LABEL_7;
            }
LABEL_29:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_24:
  v13 = sub_100032C48(&qword_100505048);
  sub_10006F00C(v13);
LABEL_25:
  *(_QWORD *)(v0 + 88) = v5;
  *(_QWORD *)(v0 + 96) = v1;
  v14 = *(_QWORD *)(v0 + 72);
  sub_10004EB34(*(_QWORD *)(v0 + 64), v14, &qword_100505040);
  v15 = sub_100032C48(&qword_100505048);
  if (sub_1000352C8(v14, 1, v15) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 80));
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B34();
    return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 56));
    v16 = sub_10004EF44();
    sub_100054608(v16, v17);
    v18 = (_QWORD *)swift_task_alloc(dword_100505054);
    *(_QWORD *)(v0 + 104) = v18;
    *v18 = v0;
    v18[1] = sub_100069A78;
    v19 = sub_10006EB84(*(_QWORD *)(v0 + 56));
    return sub_10006EA50(v19, v20);
  }
}

uint64_t sub_100069D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[54] = a2;
  v3[55] = v2;
  v3[53] = a1;
  v4 = type metadata accessor for ServerJSONFetchRetryState(0);
  v3[56] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[57] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[58] = v6;
  v3[59] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100032C48(&qword_1005039D8);
  v3[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v3[61] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[62] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v3[63] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v11);
  v3[65] = swift_task_alloc(v11);
  v3[66] = swift_task_alloc(v11);
  v12 = type metadata accessor for Date(0);
  v3[67] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[68] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[69] = swift_task_alloc(v14);
  v3[70] = swift_task_alloc(v14);
  return swift_task_switch(sub_100069E0C, v2, 0);
}

uint64_t sub_100069E0C()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  double v25;
  char v26;
  double v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;

  v1 = (uint64_t *)(v0 + 16);
  v2 = (void *)(v0 + 328);
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, v0 + 328);
  v3 = (id)static ASDConfigurationManager.shared;
  sub_10006F220();

  sub_10006F1F4(v4, v5, &qword_100503A78);
  if (*(_QWORD *)(v0 + 56) != 1)
  {
    v2 = (void *)(v0 + 208);
    sub_10006EDBC((void *)(v0 + 208), (const void *)(v0 + 16));
    sub_10003974C((uint64_t *)(v0 + 112));
    sub_10006EF64(v0 + 208, v0 + 368);
    sub_10006EF64(v0 + 368, v0 + 400);
    if ((*(_BYTE *)(v0 + 408) & 1) == 0)
    {
      v2 = (void *)(v0 + 352);
      v6 = *(_QWORD *)(v0 + 400);
      v1 = &qword_100503BC0;
      sub_10004EB34(v0 + 224, v0 + 352, &qword_100503BC0);
      v7 = sub_10006ED84();
      sub_10004EB34(v7, v8, &qword_100503BC0);
      if ((*(_BYTE *)(v0 + 392) & 1) == 0)
      {
        v16 = *(char **)(v0 + 432);
        v17 = *(double *)(v0 + 384);
        v18 = *(_QWORD *)v16;
        v19 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 544) + 16))(*(_QWORD *)(v0 + 560), &v16[*(int *)(*(_QWORD *)(v0 + 448) + 20)], *(_QWORD *)(v0 + 536));
        if (v18 >= v6)
        {
          if (qword_100503490 == -1)
          {
LABEL_19:
            v47 = *(_QWORD *)(v0 + 528);
            v48 = *(_QWORD *)(v0 + 488);
            v49 = *(_QWORD *)(v0 + 496);
            v50 = *(_QWORD *)(v0 + 424);
            v51 = sub_1000357DC();
            sub_1000352B0(v51, (uint64_t)qword_100504D80);
            v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v50, v48);
            v53 = Logger.logObject.getter(v52);
            v54 = static os_log_type_t.info.getter();
            v55 = sub_10006E93C(v53);
            v56 = *(_QWORD *)(v0 + 488);
            if (v55)
            {
              v57 = (uint8_t *)sub_10003308C(12);
              v58 = sub_10003308C(32);
              v75 = v58;
              *(_DWORD *)v57 = 136315138;
              sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
              v60 = dispatch thunk of CustomStringConvertible.description.getter(v56, v59);
              v62 = v61;
              *(_QWORD *)(v0 + 416) = sub_100036778(v60, v61, &v75);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v57 + 4, v57 + 12);
              swift_bridgeObjectRelease(v62);
              sub_10006EEA8();
              sub_100037174((void *)&_mh_execute_header, v53, v54, "Ravioli retry limit reached for %s", v57);
              sub_10003716C(v58);
              sub_100033080(v58);
              sub_100033080((uint64_t)v57);
            }
            else
            {
              sub_10006EEA8();
            }

            v63 = *(_QWORD *)(v0 + 560);
            v64 = *(_QWORD *)(v0 + 544);
            v65 = *(_QWORD *)(v0 + 536);
            sub_10006A864(*(_QWORD *)(v0 + 424));
            (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
            goto LABEL_11;
          }
LABEL_26:
          swift_once(&qword_100503490, sub_100061FD8);
          goto LABEL_19;
        }
        v20 = *(_QWORD *)(v0 + 552);
        v21 = *(_QWORD *)(v0 + 544);
        v22 = *(_QWORD *)(v0 + 536);
        v23 = Date.addingTimeInterval(_:)(v19, v17);
        Date.timeIntervalSinceNow.getter(v23);
        v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v24(v20, v22);
        sub_10006EF54();
        if (v26)
        {
          __break(1u);
        }
        else if (v25 > -1.0)
        {
          v74 = v24;
          sub_10006EF44();
          if (v28)
          {
            v73 = *(_QWORD *)(v0 + 560);
            v72 = *(_QWORD *)(v0 + 536);
            v29 = *(_QWORD *)(v0 + 512);
            v31 = *(_QWORD *)(v0 + 488);
            v30 = *(_QWORD *)(v0 + 496);
            v32 = *(_QWORD *)(v0 + 472);
            v70 = *(_QWORD *)(v0 + 480);
            v71 = *(_QWORD *)(v0 + 520);
            v67 = *(_QWORD *)(v0 + 464);
            v68 = *(_QWORD *)(v0 + 504);
            v66 = *(_QWORD *)(v0 + 456);
            v33 = *(_QWORD *)(v0 + 432);
            v34 = *(_QWORD *)(v0 + 440);
            v35 = *(_QWORD *)(v0 + 424);
            v69 = (unint64_t)v27;
            sub_10006F0A4(v71, v35);
            v36 = sub_10006EA48();
            sub_10006E6A4(v36, v37, v38, v36);
            sub_10006F0A4(v29, v35);
            sub_10006D5B0(v33, v32);
            sub_10005FB24(&qword_100504F08, &qword_100504F10);
            v40 = v39;
            v41 = *(unsigned __int8 *)(v30 + 80);
            v42 = (v41 + 48) & ~v41;
            v43 = *(unsigned __int8 *)(v66 + 80);
            v44 = (v68 + v43 + v42) & ~v43;
            v45 = (char *)swift_allocObject(&unk_1004D14E0, v44 + v67, v41 | v43 | 7);
            *((_QWORD *)v45 + 2) = v34;
            *((_QWORD *)v45 + 3) = v40;
            *((_QWORD *)v45 + 4) = v69;
            *((_QWORD *)v45 + 5) = v34;
            (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(&v45[v42], v29, v31);
            sub_100054608(v32, (uint64_t)&v45[v44]);
            sub_10006ECA8(v34);
            v46 = sub_1000494E4(v70, (uint64_t)&unk_100505060, (uint64_t)v45);
            sub_10004EE40(v34 + *(_QWORD *)(*(_QWORD *)v34 + 136), v0 + 304, 33);
            sub_100053B4C(v46, v71);
            (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v71, v31);
            swift_endAccess(v0 + 304);
            v74(v73, v72);
            goto LABEL_11;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
  }
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v9 = sub_1000357DC();
  sub_10005680C(v9, (uint64_t)qword_100504D80);
  v10 = sub_10006E5E0();
  if (sub_10004EFCC(v10))
  {
    v11 = (_WORD *)sub_10003308C(2);
    sub_10006E7D8(v11);
    sub_100058F24((void *)&_mh_execute_header, v12, v13, "Config for Ravioli retry is unavailable");
    sub_100033080((uint64_t)v1);
  }

LABEL_11:
  v14 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc(*(_QWORD *)(v0 + 560));
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_10006A3D0, a5, 0);
}

void sub_10006A3D0()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  sub_10006EC64();
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 48) = v2;
    sub_100048D84(v2, (uint64_t)sub_10006A420);
    sub_10006E7CC();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006A420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  return sub_100040964();
}

uint64_t sub_10006A480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_10006EC90();
  sub_100067BA0(v1, *(_QWORD *)(v2 + *(int *)(v3 + 24)), *(_QWORD *)(v2 + *(int *)(v3 + 24) + 8), 0);
  return sub_10004ED88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006A4C8()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;

  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v4 = sub_1000357DC();
  sub_10005680C(v4, (uint64_t)qword_100504D80);
  v5 = sub_100056100();
  if (sub_10004ECA8(v5))
  {
    v6 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v6);
    sub_10004ED40((void *)&_mh_execute_header, v0, v1, "Ravioli retry task cancelled", v3);
    sub_100033080((uint64_t)v3);
  }
  sub_10006E690();

  return sub_100048DF8(*(uint64_t (**)(void))(v2 + 8));
}

void sub_10006A578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100032C48(&qword_100504530);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)objc_opt_self(NSUserDefaults);
  v14 = objc_msgSend(v13, "standardUserDefaults");
  v15 = sub_100061708(v14);

  v21 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v16 = type metadata accessor for ServerJSONFetchRetryState(0);
  static Date.now.getter(v16);
  *v8 = 0;
  v17 = (_QWORD *)((char *)v8 + *(int *)(v16 + 24));
  *v17 = a2;
  v17[1] = a3;
  sub_100037020((uint64_t)v8, 0, 1, v16);
  swift_bridgeObjectRetain(a3);
  sub_100050240((uint64_t)v8, (uint64_t)v12);
  v18 = v21;
  v19 = objc_msgSend(v13, "standardUserDefaults");
  sub_100061B9C(v18, v19);
  swift_bridgeObjectRelease(v18);

}

void sub_10006A70C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10005FC74();
  v2 = v1;
  v18 = v3;
  v5 = v4;
  sub_100032C48(&qword_100504530);
  sub_10004EDE8();
  __chkstk_darwin(v6);
  sub_10006EE38();
  v7 = sub_100054E50();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100046E44();
  v11 = v10 - v9;
  v12 = sub_10006D48C();
  v13 = sub_10006D3F0();
  sub_1000333D0((uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v12, &v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v5, v7);
  v14 = sub_10006EC90();
  static Date.now.getter(v14);
  *v0 = 0;
  v15 = (_QWORD *)((char *)v0 + *(int *)(v14 + 24));
  *v15 = v18;
  v15[1] = v2;
  sub_100037020((uint64_t)v0, 0, 1, v14);
  sub_1000371CC();
  sub_100050240((uint64_t)v0, v11);
  v16 = v20;
  v19 = v20;
  v17 = sub_1000619D8();
  sub_10003344C((uint64_t)&v19, v17, (uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v12, v13);
  swift_bridgeObjectRelease(v16);

  sub_10004F0C0();
}

void sub_10006A864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = sub_100032C48(&qword_100504530);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - v9;
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v11 = type metadata accessor for Logger(0);
  sub_1000352B0(v11, (uint64_t)qword_100504D80);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12 = v32(v10, a1, v5);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v30 = a1;
    v17 = v16;
    v35 = v16;
    v31 = v4;
    *(_DWORD *)v15 = 136315138;
    sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v5, v18);
    v21 = v20;
    v34 = sub_100036778(v19, v20, &v35);
    v4 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Clearing Ravioli Retry for %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1);
    v22 = v17;
    a1 = v30;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  v23 = (void *)objc_opt_self(NSUserDefaults);
  v24 = objc_msgSend(v23, "standardUserDefaults");
  v25 = sub_100061708(v24);

  v35 = v25;
  v26 = (uint64_t)v33;
  v32(v33, a1, v5);
  v27 = type metadata accessor for ServerJSONFetchRetryState(0);
  sub_100037020((uint64_t)v4, 1, 1, v27);
  sub_100050240((uint64_t)v4, v26);
  v28 = v35;
  v29 = objc_msgSend(v23, "standardUserDefaults");
  sub_100061B9C(v28, v29);
  swift_bridgeObjectRelease(v28);

}

void sub_10006AB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_10005FC74();
  v1 = v0;
  sub_100032C48(&qword_100504530);
  sub_10004EDE8();
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100054E50();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100059EB4();
  v33 = v7;
  sub_10005FE14();
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - v9;
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v11 = sub_1000357DC();
  sub_1000352B0(v11, (uint64_t)qword_100504D80);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v12 = v32((uint64_t)v10, v1, v5);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)sub_10003308C(12);
    v16 = sub_10003308C(32);
    v30 = v1;
    v17 = v16;
    v35 = v16;
    v31 = v4;
    *(_DWORD *)v15 = 136315138;
    sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v5, v18);
    v34 = sub_100036778(v19, v20, &v35);
    v4 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v15 + 4, v15 + 12);
    sub_1000356D4();
    sub_10006EE28();
    sub_100037174((void *)&_mh_execute_header, v13, v14, "Clearing Ravioli Retry for %s", v15);
    sub_10003716C(v17);
    v21 = v17;
    v1 = v30;
    sub_100033080(v21);
    sub_100033080((uint64_t)v15);
  }
  else
  {
    sub_10006EE28();
  }

  v22 = sub_10006D48C();
  v23 = sub_10006D3F0();
  sub_1000333D0((uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v22, &v35);
  v24 = v33;
  sub_10006EC08(v33, v1, v32);
  v25 = sub_10006EC90();
  sub_10006E714((uint64_t)v4, v26, v27, v25);
  sub_100050240((uint64_t)v4, v24);
  v28 = v35;
  v34 = v35;
  v29 = sub_1000619D8();
  sub_10003344C((uint64_t)&v34, v29, (uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v22, v23);
  swift_bridgeObjectRelease(v28);

  sub_10004F0C0();
}

uint64_t sub_10006AE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(uint64_t, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  double v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  int v104;
  char *v105;
  id v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _BYTE v120[16];
  uint64_t v121;
  _BYTE v122[16];
  uint64_t v123[3];
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[6];
  _QWORD v127[12];
  _BYTE v128[96];
  _BYTE v129[16];
  _BYTE v130[16];
  uint64_t v131;
  char v132;
  char *v133;
  char v134;

  v3 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v109 = *(_QWORD *)(v6 - 8);
  v110 = (void (*)(char *, uint64_t, uint64_t))v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = (char *)type metadata accessor for ASAnalyticsEvent(0);
  __chkstk_darwin(v111);
  v112 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v117 = v9;
  v118 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v113 = (char *)&v103 - v15;
  v16 = __chkstk_darwin(v14);
  v115 = (uint64_t *)((char *)&v103 - v17);
  __chkstk_darwin(v16);
  v105 = (char *)&v103 - v18;
  v19 = sub_100032C48(&qword_100504530);
  v20 = __chkstk_darwin(v19);
  v107 = (uint64_t)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v103 - v22;
  v106 = (id)objc_opt_self(NSUserDefaults);
  v24 = objc_msgSend(v106, "standardUserDefaults");
  v25 = sub_100061708(v24);

  v125 = v25;
  v26 = type metadata accessor for ServerJSONFetchRetryState(0);
  v27 = swift_allocBox();
  v29 = v28;
  v30 = a1;
  sub_100061ECC(a1, v25, (uint64_t)v23);
  if (sub_1000352C8((uint64_t)v23, 1, v26) != 1)
  {
    v114 = v27;
    sub_100054608((uint64_t)v23, (uint64_t)v29);
    if (qword_1005034D8 != -1)
      swift_once(&qword_1005034D8, sub_100088AB0);
    swift_beginAccess(&static ASDConfigurationManager.shared, &v124, 0, 0);
    v31 = (id)static ASDConfigurationManager.shared;
    sub_100084C20(v126);

    sub_10004EB34((uint64_t)v126, (uint64_t)v127, &qword_100503A78);
    if (v127[5] == 1
      || (memcpy(v128, v127, sizeof(v128)),
          sub_10003974C((uint64_t *)v126),
          sub_10004EB34((uint64_t)v128, (uint64_t)v129, &qword_100504F88),
          sub_10004EB34((uint64_t)v129, (uint64_t)&v133, &qword_100504F88),
          (v134 & 1) != 0)
      || (v32 = v133,
          sub_10004EB34((uint64_t)&v128[16], (uint64_t)v130, &qword_100503BC0),
          sub_10004EB34((uint64_t)v130, (uint64_t)&v131, &qword_100503BC0),
          (v132 & 1) != 0))
    {
      swift_release(v114);
      goto LABEL_9;
    }
    v46 = *v29 + 1;
    v47 = v117;
    if (__OFADD__(*v29, 1))
    {
      __break(1u);
    }
    else
    {
      v1 = v131;
      *v29 = v46;
      a1 = (uint64_t)v115;
      if (v46 >= (uint64_t)v32)
      {
        v113 = v32;
        v115 = v29;
        if (qword_100503490 != -1)
          swift_once(&qword_100503490, sub_100061FD8);
        v63 = type metadata accessor for Logger(0);
        sub_1000352B0(v63, (uint64_t)qword_100504D80);
        v64 = v118;
        v65 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
        v66 = v105;
        v65(v105, v30, v47);
        v67 = v114;
        v68 = swift_retain_n(v114, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.debug.getter();
        v71 = v70;
        if (os_log_type_enabled(v69, v70))
        {
          v72 = swift_slowAlloc(32, -1);
          v110 = v65;
          v73 = v72;
          v109 = swift_slowAlloc(32, -1);
          v123[0] = v109;
          *(_DWORD *)v73 = 136315650;
          sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          LODWORD(v108) = v71;
          v75 = dispatch thunk of CustomStringConvertible.description.getter(v47, v74);
          v77 = v76;
          v121 = sub_100036778(v75, v76, v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v73 + 4, v73 + 12);
          swift_bridgeObjectRelease(v77);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v47);
          *(_WORD *)(v73 + 12) = 2048;
          v78 = v115;
          swift_beginAccess(v115, &v121, 0, 0);
          v79 = (char *)*v78;
          swift_release(v67);
          v119 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v73 + 14, v73 + 22);
          swift_release(v67);
          *(_WORD *)(v73 + 22) = 2048;
          v119 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v73 + 24, v73 + 32);
          _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v108, "Reached ravioli retry limit for %s - Tried %ld times limit %ld", (uint8_t *)v73, 0x20u);
          v80 = v109;
          swift_arrayDestroy(v109, 1);
          swift_slowDealloc(v80, -1, -1);
          v81 = v73;
          v65 = v110;
          swift_slowDealloc(v81, -1, -1);

        }
        else
        {
          swift_release(v67);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v47);
          swift_release(v67);

          v78 = v115;
        }
        v99 = v116;
        sub_10006A864(v30);
        sub_100032EFC((_QWORD *)(v99 + *(_QWORD *)(*(_QWORD *)v99 + 160)), *(_QWORD *)(v99 + *(_QWORD *)(*(_QWORD *)v99 + 160) + 24));
        v100 = sub_100032C48(&qword_100504F90);
        v101 = (uint64_t *)v112;
        v102 = &v112[*(int *)(v100 + 48)];
        swift_beginAccess(v78, v123, 0, 0);
        *v101 = *v78;
        v65(v102, v30, v47);
        swift_storeEnumTagMultiPayload(v101, v111, 4);
        sub_100099360((uint64_t)v101);
        sub_10006DBA0((uint64_t)v101, type metadata accessor for ASAnalyticsEvent);
        v98 = v67;
        goto LABEL_29;
      }
      v111 = v5;
      if (qword_100503490 == -1)
      {
LABEL_19:
        v48 = type metadata accessor for Logger(0);
        sub_1000352B0(v48, (uint64_t)qword_100504D80);
        v49 = v118;
        v50 = *(char **)(v118 + 16);
        v112 = (char *)v30;
        v105 = v50;
        ((void (*)(uint64_t, uint64_t, uint64_t))v50)(a1, v30, v47);
        v51 = v114;
        v52 = swift_retain_n(v114, 2);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.debug.getter();
        v55 = v54;
        if (os_log_type_enabled(v53, v54))
        {
          v56 = swift_slowAlloc(22, -1);
          v57 = swift_slowAlloc(32, -1);
          v123[0] = v57;
          *(_DWORD *)v56 = 136315394;
          v103 = v56 + 4;
          sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          v104 = v55;
          v59 = dispatch thunk of CustomStringConvertible.description.getter(v47, v58);
          v61 = v60;
          v121 = sub_100036778(v59, v60, v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v103, v56 + 12);
          swift_bridgeObjectRelease(v61);
          v118 = *(_QWORD *)(v49 + 8);
          ((void (*)(uint64_t, uint64_t))v118)(a1, v117);
          *(_WORD *)(v56 + 12) = 2048;
          swift_beginAccess(v29, &v119, 0, 0);
          v62 = *v29;
          swift_release(v114);
          v121 = v62;
          v47 = v117;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v56 + 14, v56 + 22);
          swift_release(v114);
          _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v104, "Ravioli request failed for %s. Attempts made: %ld", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy(v57, 1);
          swift_slowDealloc(v57, -1, -1);
          v51 = v114;
          swift_slowDealloc(v56, -1, -1);
        }
        else
        {
          swift_release(v51);
          v118 = *(_QWORD *)(v49 + 8);
          ((void (*)(uint64_t, uint64_t))v118)(a1, v47);
          swift_release(v51);
        }

        v82 = v108;
        static Date.now.getter(v83);
        swift_beginAccess(v29, v123, 1, 0);
        (*(void (**)(char *, char *, _QWORD))(v109 + 40))((char *)v29 + *(int *)(v26 + 20), v82, v110);
        v85 = v112;
        v84 = (uint64_t)v113;
        v86 = (void (*)(uint64_t, char *, uint64_t))v105;
        ((void (*)(char *, char *, uint64_t))v105)(v113, v112, v47);
        v87 = v107;
        sub_10006D5B0((uint64_t)v29, v107);
        sub_100037020(v87, 0, 1, v26);
        sub_100050240(v87, v84);
        v88 = v125;
        *(_QWORD *)&v89 = swift_bridgeObjectRetain(v125).n128_u64[0];
        v90 = objc_msgSend(v106, "standardUserDefaults", v89);
        sub_100061B9C(v88, v90);

        swift_bridgeObjectRelease(v88);
        v86(v84, v85, v47);
        v91 = type metadata accessor for TaskPriority(0);
        v92 = (uint64_t)v111;
        sub_100037020((uint64_t)v111, 1, 1, v91);
        sub_10005FB24(&qword_100504F08, &qword_100504F10);
        v94 = v93;
        v95 = (_QWORD *)swift_allocObject(&unk_1004D1378, 56, 7);
        v96 = v116;
        v95[2] = v116;
        v95[3] = v94;
        v95[4] = v1;
        v95[5] = v96;
        v95[6] = v51;
        swift_retain_n(v96, 2);
        swift_retain(v51);
        v97 = sub_1000494E4(v92, (uint64_t)&unk_100504FA0, (uint64_t)v95);
        swift_beginAccess(v96 + *(_QWORD *)(*(_QWORD *)v96 + 136), &v121, 33, 0);
        sub_100053B4C(v97, v84);
        ((void (*)(uint64_t, uint64_t))v118)(v84, v47);
        swift_endAccess(&v121);
        v98 = v51;
LABEL_29:
        swift_release(v98);
        return swift_bridgeObjectRelease(v125);
      }
    }
    swift_once(&qword_100503490, sub_100061FD8);
    goto LABEL_19;
  }
  sub_10004EB70((uint64_t)v23, &qword_100504530);
  swift_deallocBox(v27);
LABEL_9:
  v34 = v117;
  v33 = v118;
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v35 = type metadata accessor for Logger(0);
  sub_1000352B0(v35, (uint64_t)qword_100504D80);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 16))(v13, a1, v34);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v123[0] = v40;
    *(_DWORD *)v39 = 136315138;
    sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v34, v41);
    v44 = v43;
    v121 = sub_100036778(v42, v43, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease(v44);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v13, v34);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "No retry state or no max retries for %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v34);
  }

  return swift_bridgeObjectRelease(v125);
}

uint64_t sub_10006BA60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  os_log_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t WitnessTable;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  os_log_t v117;
  int v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  os_log_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[16];
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[3];
  uint64_t v141;
  uint64_t v142;
  _OWORD v143[6];
  _QWORD v144[12];
  _BYTE v145[16];
  uint64_t v146;
  _BYTE v147[16];
  _BYTE v148[16];
  uint64_t v149;
  char v150;
  uint64_t v151;
  char v152;

  v132 = *v1;
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v5);
  v6 = sub_10006E808();
  v7 = type metadata accessor for Date(v6);
  v127 = *(os_log_t *)(v7 - 8);
  v128 = v7;
  __chkstk_darwin(v7);
  sub_10005FCF0();
  v126 = v8;
  v129 = type metadata accessor for ASAnalyticsEvent(0);
  sub_10004EDE8();
  __chkstk_darwin(v9);
  sub_10005FCF0();
  v130 = v10;
  v11 = sub_100054E50();
  v12 = *(_QWORD *)(v11 - 8);
  v134 = v11;
  v135 = v12;
  __chkstk_darwin(v11);
  sub_100059EB4();
  v14 = v13;
  sub_10005FE14();
  __chkstk_darwin(v15);
  v131 = (uint64_t)&v116 - v16;
  sub_10005FE14();
  __chkstk_darwin(v17);
  v122 = (char *)&v116 - v18;
  sub_10005FE14();
  __chkstk_darwin(v19);
  v21 = (char *)&v116 - v20;
  sub_100032C48(&qword_100504530);
  sub_10004EDE8();
  __chkstk_darwin(v22);
  sub_100059EB4();
  v123 = v23;
  sub_10005FE14();
  __chkstk_darwin(v24);
  v26 = (char *)&v116 - v25;
  v27 = sub_10006D48C();
  v124 = sub_10006D3F0();
  v125 = v27;
  sub_1000333D0((uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v27, &v142);
  v28 = sub_10006EC90();
  v29 = swift_allocBox();
  v31 = v30;
  v32 = a1;
  sub_100061ECC(a1, v142, (uint64_t)v26);
  if (sub_1000352C8((uint64_t)v26, 1, v28) != 1)
  {
    v121 = v29;
    sub_100054608((uint64_t)v26, (uint64_t)v31);
    if (qword_1005034D8 != -1)
      swift_once(&qword_1005034D8, sub_100088AB0);
    sub_10005FC8C((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)&v141);
    v33 = (id)static ASDConfigurationManager.shared;
    sub_100084C20(v143);

    sub_10004EB34((uint64_t)v143, (uint64_t)v144, &qword_100503A78);
    if (v144[5] == 1
      || (sub_10006EDBC(v145, v144),
          sub_10003974C((uint64_t *)v143),
          sub_10006EFB4((uint64_t)v145, (uint64_t)v147),
          sub_10006EFB4((uint64_t)v147, (uint64_t)&v151),
          v152 == 1)
      || (v34 = v151,
          sub_10006EFB4((uint64_t)&v146, (uint64_t)v148),
          sub_10006EFB4((uint64_t)v148, (uint64_t)&v149),
          v150 == 1))
    {
      swift_release(v121);
      goto LABEL_9;
    }
    v52 = *v31 + 1;
    v53 = v134;
    if (__OFADD__(*v31, 1))
    {
      __break(1u);
    }
    else
    {
      v3 = v149;
      *v31 = v52;
      if (v52 >= v34)
      {
        if (qword_100503490 != -1)
          swift_once(&qword_100503490, sub_100061FD8);
        v76 = sub_1000357DC();
        v77 = sub_1000352B0(v76, (uint64_t)qword_100504D80);
        v78 = v135;
        sub_10006F1DC((uint64_t)v21);
        v79 = sub_10006ECA8(v121);
        Logger.logObject.getter(v79);
        v80 = sub_100056100();
        LODWORD(v132) = v80;
        if (os_log_type_enabled(v77, v80))
        {
          v81 = sub_10003308C(32);
          v128 = v34;
          v82 = v78;
          v83 = v81;
          v131 = sub_10003308C(32);
          v140[0] = v131;
          *(_DWORD *)v83 = 136315650;
          sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          v127 = v77;
          v85 = dispatch thunk of CustomStringConvertible.description.getter(v134, v84);
          v87 = sub_10006ED90(v85, v86);
          v88 = sub_10006F244(v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v88, v89, v83 + 4, v90);
          sub_1000356D4();
          (*(void (**)(char *, uint64_t))(v82 + 8))(v21, v134);
          *(_WORD *)(v83 + 12) = 2048;
          v91 = v31;
          sub_10005FC8C((uint64_t)v31, (uint64_t)&v138);
          v92 = *v31;
          sub_10006EE08();
          v136 = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v83 + 14, v83 + 22);
          sub_10006EE08();
          *(_WORD *)(v83 + 22) = 2048;
          v136 = v128;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v83 + 24, v83 + 32);
          v93 = v127;
          _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v132, "Reached ravioli retry limit for %s - Tried %ld times limit %ld", (uint8_t *)v83, 0x20u);
          v94 = v131;
          sub_10003716C(v131);
          sub_100033080(v94);
          sub_100033080(v83);

        }
        else
        {
          sub_10006EE08();
          (*(void (**)(char *, uint64_t))(v78 + 8))(v21, v53);
          sub_10006EE08();

          v91 = v31;
        }
        sub_10006AB88();
        sub_100032EFC((_QWORD *)(v133 + *(_QWORD *)(*(_QWORD *)v133 + 160)), *(_QWORD *)(v133 + *(_QWORD *)(*(_QWORD *)v133 + 160) + 24));
        v113 = sub_100032C48(&qword_100504F90);
        v114 = v130;
        v115 = (uint64_t)v130 + *(int *)(v113 + 48);
        sub_10005FC8C((uint64_t)v91, (uint64_t)v140);
        *v114 = *v91;
        sub_10006F1DC(v115);
        swift_storeEnumTagMultiPayload(v114, v129, 4);
        sub_100099360((uint64_t)v114);
        sub_10006DBA0((uint64_t)v114, type metadata accessor for ASAnalyticsEvent);
        goto LABEL_29;
      }
      if (qword_100503490 == -1)
      {
LABEL_19:
        v129 = v2;
        v54 = sub_1000357DC();
        v55 = sub_1000352B0(v54, (uint64_t)qword_100504D80);
        v56 = v135;
        v57 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v135 + 16);
        v58 = v122;
        v130 = (uint64_t *)v32;
        v120 = v57;
        v57((uint64_t)v122, (uint64_t *)v32, v53);
        v59 = v121;
        v60 = sub_10006ECA8(v121);
        Logger.logObject.getter(v60);
        v61 = sub_100056100();
        if (sub_10006EB14(v55))
        {
          v62 = sub_10003308C(22);
          v118 = v61;
          v63 = v59;
          v64 = v62;
          v119 = sub_10003308C(32);
          v140[0] = v119;
          *(_DWORD *)v64 = 136315394;
          sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          v117 = v55;
          v66 = dispatch thunk of CustomStringConvertible.description.getter(v53, v65);
          v138 = sub_10006ED90(v66, v67);
          sub_10006F0AC((uint64_t)&v138, v68, v69, v64 + 12);
          sub_1000356D4();
          v135 = *(_QWORD *)(v56 + 8);
          ((void (*)(char *, uint64_t))v135)(v58, v134);
          *(_WORD *)(v64 + 12) = 2048;
          v70 = (uint64_t)v31;
          sub_10005FC8C((uint64_t)v31, (uint64_t)&v136);
          v71 = *v31;
          sub_10006E8EC();
          v138 = v71;
          v53 = v134;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v64 + 14, v64 + 22);
          sub_10006E8EC();
          v72 = v117;
          _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "Ravioli request failed for %s. Attempts made: %ld", (uint8_t *)v64, 0x16u);
          v73 = v119;
          sub_10003716C(v119);
          sub_100033080(v73);
          v74 = v64;
          v59 = v63;
          sub_100033080(v74);

        }
        else
        {
          sub_10005FD78();
          v135 = *(_QWORD *)(v56 + 8);
          ((void (*)(char *, uint64_t))v135)(v58, v53);
          sub_10005FD78();

          v70 = (uint64_t)v31;
        }
        v95 = v126;
        static Date.now.getter(v75);
        sub_10004EE40(v70, (uint64_t)v140, 1);
        ((void (*)(uint64_t, uint64_t, uint64_t))v127[5].isa)(v70 + *(int *)(v28 + 20), v95, v128);
        v96 = (uint64_t)v130;
        v97 = v131;
        v120(v131, v130, v53);
        v98 = v123;
        sub_10006D5B0(v70, v123);
        sub_100037020(v98, 0, 1, v28);
        sub_100050240(v98, v97);
        v99 = v142;
        v138 = v142;
        swift_bridgeObjectRetain(v142);
        v100 = sub_1000619D8();
        sub_10003344C((uint64_t)&v138, v100, (uint64_t)&unk_1004CF9E8, (uint64_t)&off_1004CF9F8, v125, v124);

        swift_bridgeObjectRelease(v99);
        v101 = v96;
        v102 = v134;
        sub_10006F0A4(v97, v101);
        v103 = sub_10006EA48();
        v104 = v129;
        sub_10006E6A4(v103, v105, v106, v103);
        v108 = type metadata accessor for RavioliManager(255, *(_QWORD *)(v132 + 80), *(_QWORD *)(v132 + 88), v107);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RavioliManager<A>, v108);
        v110 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D13A0, 56);
        v111 = v133;
        v110[2] = v133;
        v110[3] = WitnessTable;
        v110[4] = v3;
        v110[5] = v111;
        v110[6] = v59;
        sub_10006ECA8(v111);
        swift_retain(v59);
        v112 = sub_1000494E4(v104, (uint64_t)&unk_100504FD8, (uint64_t)v110);
        sub_10004EE40(v111 + *(_QWORD *)(*(_QWORD *)v111 + 136), (uint64_t)&v138, 33);
        sub_100053B4C(v112, v97);
        ((void (*)(uint64_t, uint64_t))v135)(v97, v102);
        swift_endAccess(&v138);
LABEL_29:
        sub_10005FD78();
        return swift_bridgeObjectRelease(v142);
      }
    }
    swift_once(&qword_100503490, sub_100061FD8);
    goto LABEL_19;
  }
  sub_10004EB70((uint64_t)v26, &qword_100504530);
  swift_deallocBox(v29);
LABEL_9:
  v35 = v134;
  v36 = v135;
  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v37 = sub_1000357DC();
  sub_1000352B0(v37, (uint64_t)qword_100504D80);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v14, v32, v35);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = v14;
    v42 = (uint8_t *)sub_10003308C(12);
    v43 = v35;
    v44 = sub_10003308C(32);
    v140[0] = v44;
    *(_DWORD *)v42 = 136315138;
    sub_10005FB58(&qword_100504F60, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v43, v45);
    v48 = sub_10006ED90(v46, v47);
    v49 = sub_10006F244(v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50, v42 + 4, v42 + 12);
    sub_1000356D4();
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v41, v43);
    sub_100037174((void *)&_mh_execute_header, v39, v40, "No retry state or no max retries for %s", v42);
    sub_10003716C(v44);
    sub_100033080(v44);
    sub_100033080((uint64_t)v42);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v35);
  }

  return swift_bridgeObjectRelease(v142);
}

uint64_t sub_10006C50C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 48) = a5;
  *(double *)(v6 + 40) = a1;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 64) = v10;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 80) = type metadata accessor for ServerJSONFetchRetryState(0);
  *(_QWORD *)(v6 + 88) = swift_projectBox(a6);
  return swift_task_switch(sub_10006C590, a5, 0);
}

void sub_10006C590()
{
  uint64_t v0;
  double v1;
  char v2;
  char v3;
  _QWORD *v4;

  sub_10006EF54();
  if (v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -1.0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_10006EF44();
  if (!v3)
    goto LABEL_10;
  sub_10006EC64();
  if (v2)
  {
    v4 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 96) = v4;
    sub_100048D84(v4, (uint64_t)sub_10006C60C);
    sub_10006E7CC();
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10006C60C()
{
  sub_10006EA6C();
  return sub_100040964();
}

uint64_t sub_10006C650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  sub_10006E5E8();
  if (qword_1005034A0 != -1)
    swift_once(&qword_1005034A0, sub_1000630D4);
  sub_10006F0C8();
  v6 = sub_1000352B0(v3, (uint64_t)static RavioliConstants.ravioliUUID);
  sub_10006EC08(v1, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_10005FC8C(v0, v4);
  sub_10006ED54();
  v7 = sub_10006F07C();
  sub_100067BA0(v7, v8, v9, v10);
  sub_100035714();
  sub_10006EEB8();
  sub_10006F0B8();
  return sub_10006E94C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10006C6E4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 48) = a5;
  *(double *)(v6 + 40) = a1;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 64) = v10;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 80) = type metadata accessor for ServerJSONFetchRetryState(0);
  *(_QWORD *)(v6 + 88) = swift_projectBox(a6);
  return swift_task_switch(sub_10006C768, a5, 0);
}

void sub_10006C768()
{
  uint64_t v0;
  double v1;
  char v2;
  char v3;
  _QWORD *v4;

  sub_10006EF54();
  if (v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -1.0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_10006EF44();
  if (!v3)
    goto LABEL_10;
  sub_10006EC64();
  if (v2)
  {
    v4 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 96) = v4;
    sub_100048D84(v4, (uint64_t)sub_10006C7E4);
    sub_10006E7CC();
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10006C7E4()
{
  sub_10006EA6C();
  return sub_100040964();
}

uint64_t sub_10006C828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10006E5E8();
  if (qword_1005034A0 != -1)
    swift_once(&qword_1005034A0, sub_1000630D4);
  sub_10006F0C8();
  v6 = sub_1000352B0(v3, (uint64_t)static RavioliConstants.ravioliUUID);
  sub_10006EC08(v1, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_10005FC8C(v0, v4);
  sub_10006ED54();
  sub_10006F07C();
  sub_100067FE8();
  sub_100035714();
  sub_10006EEB8();
  sub_10006F0B8();
  return sub_10006E94C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10006C8BC()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;

  if (qword_100503490 != -1)
    swift_once(&qword_100503490, sub_100061FD8);
  v4 = sub_1000357DC();
  sub_10005680C(v4, (uint64_t)qword_100504D80);
  v5 = sub_100056100();
  if (sub_10004ECA8(v5))
  {
    v6 = (_WORD *)sub_10003308C(2);
    sub_10004EF2C(v6);
    sub_10004ED40((void *)&_mh_execute_header, v0, v1, "Retry task cancelled", v3);
    sub_100033080((uint64_t)v3);
  }
  sub_10006E690();

  sub_10006F0B8();
  return sub_100048DF8(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t RavioliManager.deinit()
{
  uint64_t v0;

  sub_10006E7C4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)));
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136)));
  sub_100032F94((_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)));
  sub_100032F94((_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160)));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t RavioliManager.__deallocating_deinit()
{
  uint64_t v0;

  RavioliManager.deinit();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10006CA0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x756F437972746572 && a2 == 0xEA0000000000746ELL)
  {
    v5 = 0xEA0000000000746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F437972746572, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x757165527473616CLL && a2 == 0xEB00000000747365)
  {
    v8 = 0xEB00000000747365;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x757165527473616CLL, 0xEB00000000747365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6163696669746F6ELL && a2 == 0xEE0064496E6F6974)
  {
    swift_bridgeObjectRelease(0xEE0064496E6F6974);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6163696669746F6ELL, 0xEE0064496E6F6974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10006CBA0()
{
  return 3;
}

uint64_t sub_10006CBA8(char a1)
{
  if (!a1)
    return 0x756F437972746572;
  if (a1 == 1)
    return 0x757165527473616CLL;
  return 0x6163696669746F6ELL;
}

uint64_t sub_10006CC18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v6 = v2;
  sub_100032C48(&qword_100505120);
  sub_10006F280();
  __chkstk_darwin(v8);
  sub_10006EE50();
  v9 = a1[3];
  v10 = a1[4];
  sub_100032EFC(a1, v9);
  v11 = sub_10006E1F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerJSONFetchRetryState.CodingKeys, &type metadata for ServerJSONFetchRetryState.CodingKeys, v11, v9, v10);
  v12 = *v6;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v23, v1);
  if (!v3)
  {
    v13 = type metadata accessor for ServerJSONFetchRetryState(0);
    v14 = (char *)v6 + *(int *)(v13 + 20);
    v22 = 1;
    v15 = type metadata accessor for Date(0);
    sub_10005FB58(&qword_100504310, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v22, v1, v15, v16);
    v17 = (uint64_t *)((char *)v6 + *(int *)(v13 + 24));
    v18 = *v17;
    v19 = v17[1];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v21, v1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
}

void sub_10006CD84(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  char v25;
  char v26;

  v20 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10005FCF0();
  v21 = sub_100032C48(&qword_100505130);
  v4 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_100046E44();
  v7 = v6 - v5;
  v8 = type metadata accessor for ServerJSONFetchRetryState(0);
  sub_10004EDE8();
  __chkstk_darwin(v9);
  sub_1000356DC();
  v10 = a1[3];
  v11 = a1[4];
  sub_100032EFC(a1, v10);
  v12 = sub_10006E1F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerJSONFetchRetryState.CodingKeys, &type metadata for ServerJSONFetchRetryState.CodingKeys, v12, v10, v11);
  if (v22)
  {
    sub_100032F94(a1);
  }
  else
  {
    v23 = a1;
    v26 = 0;
    *v2 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v21);
    v25 = 1;
    sub_10005FB58(&qword_1005043E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v25, v21, v20, v13);
    (*(void (**)(void))(v19 + 32))();
    v24 = 2;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v21);
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v21);
    v17 = (_QWORD *)((char *)v2 + *(int *)(v8 + 24));
    *v17 = v14;
    v17[1] = v16;
    sub_10006D5B0((uint64_t)v2, a2);
    sub_100032F94(v23);
    sub_10006DBA0((uint64_t)v2, type metadata accessor for ServerJSONFetchRetryState);
  }
  sub_100046BF8();
}

uint64_t sub_10006CFD8()
{
  char *v0;

  return sub_10006CBA8(*v0);
}

uint64_t sub_10006CFE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006CA0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006D004@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10006CBA0();
  *a1 = result;
  return result;
}

uint64_t sub_10006D028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006E1F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006E1F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10006D078(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006CD84(a1, a2);
}

uint64_t sub_10006D08C(_QWORD *a1)
{
  return sub_10006CC18(a1);
}

uint64_t sub_10006D0A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006D0C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006EF30();
  v1 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10006E944();
  sub_10006E764();
  swift_release(*(_QWORD *)(v0 + v1));
  v2 = sub_10006EA18();
  return sub_10006E460(v2, v3, v4);
}

uint64_t sub_10006D120()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10006E5E8();
  sub_10006EF6C();
  v1 = swift_task_alloc(dword_100504DE4);
  v2 = (_QWORD *)sub_100048D70(v1);
  *v2 = v0;
  v2[1] = sub_10004EC60;
  sub_10006E85C();
  return sub_100064CA4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t type metadata accessor for RavioliManagerObjC()
{
  return objc_opt_self(_TtC3asd18RavioliManagerObjC);
}

uint64_t type metadata accessor for RavioliConstants()
{
  return objc_opt_self(_TtC3asd16RavioliConstants);
}

uint64_t type metadata accessor for DefinedRavioliNotificationIds()
{
  return objc_opt_self(_TtC3asd29DefinedRavioliNotificationIds);
}

uint64_t sub_10006D210(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = &unk_100408E48;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_100408E60;
    v4[8] = &unk_100408E60;
    result = swift_initClassMetadata2(a1, 0, 9, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RavioliManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006DD14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RavioliManager);
}

uint64_t sub_10006D2D8()
{
  return sub_10006D2E4();
}

uint64_t sub_10006D2E4()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  void (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_10006EF30();
  v2 = v1;
  v3 = sub_100054E50();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = v5 | 7;
  v8 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10006E944();
  sub_10006F11C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  v2(*(_QWORD *)(v0 + v8 + 8));
  return sub_10006E460(v0, v8 + 16, v7);
}

uint64_t sub_10006D364()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10006E5E8();
  sub_100054E50();
  sub_10006E4F8();
  v0 = swift_task_alloc(dword_100504F1C);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10006E530(v1);
  sub_10006E85C();
  return sub_100068390(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for ServerJSONFetchRetryState(uint64_t a1)
{
  uint64_t result;

  result = qword_1005050D8;
  if (!qword_1005050D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServerJSONFetchRetryState);
  return result;
}

unint64_t sub_10006D3F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504F30;
  if (!qword_100504F30)
  {
    v1 = sub_100035350(&qword_100504F28);
    sub_10005FB58(&qword_100504F38, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_10005FB58(&qword_100504F40, type metadata accessor for ServerJSONFetchRetryState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100504F30);
  }
  return result;
}

unint64_t sub_10006D48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100504F48;
  if (!qword_100504F48)
  {
    v1 = sub_100035350(&qword_100504F28);
    sub_10005FB58(&qword_100504F50, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_10005FB58(&qword_100504F58, type metadata accessor for ServerJSONFetchRetryState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100504F48);
  }
  return result;
}

unint64_t sub_10006D528()
{
  unint64_t result;

  result = qword_100504F78;
  if (!qword_100504F78)
  {
    result = swift_getWitnessTable(&unk_10040AB38, &type metadata for RavioliVerifier.ResponseDTO);
    atomic_store(result, (unint64_t *)&qword_100504F78);
  }
  return result;
}

unint64_t sub_10006D564()
{
  unint64_t result;

  result = qword_100504F80;
  if (!qword_100504F80)
  {
    result = swift_getWitnessTable(&unk_10040AAF8, &type metadata for RavioliVerifier.CCVerificationError);
    atomic_store(result, (unint64_t *)&qword_100504F80);
  }
  return result;
}

uint64_t sub_10006D5A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006D5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServerJSONFetchRetryState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006D5F8()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10006F294();
  v0 = swift_task_alloc(dword_100504F9C);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10006EBAC(v1);
  return sub_10006C50C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10006D64C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100035350(&qword_100504FA8);
    sub_10005FB58(a2, type metadata accessor for PushPayload);
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006D6D4()
{
  uint64_t v0;

  sub_10006E944();
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10006D704()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10006F294();
  v0 = swift_task_alloc(dword_100504FD4);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10006EBAC(v1);
  return sub_10006C6E4(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10006D758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10006EF30();
  sub_100054E50();
  sub_10006E944();
  swift_release(*(_QWORD *)(v0 + 48));
  sub_10006E764();
  sub_10006EDB0();
  v1 = sub_10006EA18();
  return sub_10006E460(v1, v2, v3);
}

uint64_t sub_10006D7BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10006E5E8();
  sub_100054E50();
  sub_10006F030();
  v0 = swift_task_alloc(dword_100504FE4);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10006E530(v1);
  sub_10006E85C();
  return sub_100068AAC(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10006D83C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10006D860(uint64_t a1)
{
  uint64_t v1;

  sub_100063074(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10006D868()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10006D874(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100062638(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10006D87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[5];

  v19[3] = &type metadata for RavioliFetcherImpl;
  v19[4] = &off_1004D1518;
  swift_defaultActor_initialize(a3);
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 112);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100032C48(&qword_100503528);
  sub_10005FB58((unint64_t *)&qword_100503530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v10 = v9;
  *(_QWORD *)(a3 + v6) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v7, v8, v9);
  *(_QWORD *)(a3 + *(_QWORD *)(*(_QWORD *)a3 + 128)) = 0;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 136);
  *(_QWORD *)(a3 + v11) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v7, v8, v10);
  *(_QWORD *)(a3 + *(_QWORD *)(*(_QWORD *)a3 + 144)) = a2;
  v12 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 104);
  v13 = sub_100032C48(&qword_100504FF0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  sub_100032EB8((uint64_t)v19, a3 + *(_QWORD *)(*(_QWORD *)a3 + 152));
  v17 = type metadata accessor for ASAnalyticsManager();
  v18 = &off_1004D1008;
  *(_QWORD *)&v16 = swift_allocObject(v17, 16, 7);
  sub_100032F94(v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  sub_1000351FC(&v16, a3 + *(_QWORD *)(*(_QWORD *)a3 + 160));
  return a3;
}

uint64_t sub_10006DA1C()
{
  uint64_t v0;

  sub_10006E944();
  sub_10006F11C();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006DA40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = swift_task_alloc(dword_100504FFC);
  v8 = (_QWORD *)sub_100048D70(v7);
  *v8 = v2;
  v8[1] = sub_10004EC60;
  return sub_100062310(a1, v4, v5, v6);
}

uint64_t sub_10006DAA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10006EF30();
  v1 = *(_QWORD *)(sub_100032C48(&qword_100504FF0) - 8);
  v2 = (*(_QWORD *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10006E944();
  sub_10006E764();
  swift_release(*(_QWORD *)(v0 + v2));
  v3 = sub_10006EA18();
  return sub_10006E460(v3, v4, v5);
}

uint64_t sub_10006DB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_100032C48(&qword_100504FF0);
  sub_10006F030();
  sub_10006EF6C();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v7 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v8);
  v10 = swift_task_alloc(dword_100505014);
  v11 = (_QWORD *)sub_100048D70(v10);
  *v11 = v2;
  v11[1] = sub_10004EC60;
  return sub_10006406C(a1, v4, v5, v7, v9);
}

void sub_10006DBA0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10004F104(v2);
  sub_100028D0C();
}

uint64_t sub_10006DBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10006EF30();
  v1 = *(_QWORD *)(sub_100054E50() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = sub_10006EC90();
  sub_10006F030();
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v2 | v6 | 7;
  sub_10006E944();
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10006E7F0(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v9 = sub_10004F358();
  sub_10004F104(v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + *(int *)(v5 + 24) + 8));
  v10 = sub_10006F108();
  return sub_10006E460(v10, v11, v8);
}

uint64_t sub_10006DC6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10006E5E8();
  sub_100054E50();
  sub_10006F030();
  sub_10006EC90();
  v1 = swift_task_alloc(dword_10050505C);
  v2 = (_QWORD *)sub_100048D70(v1);
  *v2 = v0;
  v2[1] = sub_10004EC60;
  sub_10006E85C();
  return sub_10006A3B4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10006DD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

ValueMetadata *type metadata accessor for RavioliFetcherImpl()
{
  return &type metadata for RavioliFetcherImpl;
}

uint64_t *sub_10006DD50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return v4;
}

uint64_t sub_10006DE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10006DE58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

_QWORD *sub_10006DEDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_QWORD *sub_10006DF74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10006DFEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10006E074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E080);
}

uint64_t sub_10006E080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_10004F358();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_1000352C8(a1 + *(int *)(a3 + 20), a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10006E0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E108);
}

void sub_10006E108(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_10004F358();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    sub_100037020(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
    sub_1000399A0();
  }
}

uint64_t sub_10006E178(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100408EC0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10006E1F8()
{
  unint64_t result;

  result = qword_100505128;
  if (!qword_100505128)
  {
    result = swift_getWitnessTable(&unk_100408FFC, &type metadata for ServerJSONFetchRetryState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505128);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServerJSONFetchRetryState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerJSONFetchRetryState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006E308 + 4 * byte_100408D25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006E33C + 4 * byte_100408D20[v4]))();
}

uint64_t sub_10006E33C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006E34CLL);
  return result;
}

uint64_t sub_10006E358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006E360);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10006E364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E36C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerJSONFetchRetryState.CodingKeys()
{
  return &type metadata for ServerJSONFetchRetryState.CodingKeys;
}

unint64_t sub_10006E38C()
{
  unint64_t result;

  result = qword_100505140;
  if (!qword_100505140)
  {
    result = swift_getWitnessTable(&unk_100408FD4, &type metadata for ServerJSONFetchRetryState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505140);
  }
  return result;
}

unint64_t sub_10006E3CC()
{
  unint64_t result;

  result = qword_100505148;
  if (!qword_100505148)
  {
    result = swift_getWitnessTable(&unk_100408F44, &type metadata for ServerJSONFetchRetryState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505148);
  }
  return result;
}

unint64_t sub_10006E40C()
{
  unint64_t result;

  result = qword_100505150;
  if (!qword_100505150)
  {
    result = swift_getWitnessTable(&unk_100408F6C, &type metadata for ServerJSONFetchRetryState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505150);
  }
  return result;
}

uint64_t sub_10006E460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10006E474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
}

uint64_t sub_10006E488(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006E4A4()
{
  return ((uint64_t (*)(void))_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj)();
}

uint64_t sub_10006E4C0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006E4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10006E530(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10006E558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10006E568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10006E578(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return sub_100036778(v3, v2, (uint64_t *)va);
}

BOOL sub_10006E588(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006E598()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10006E5A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_10006E5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v13 + 12) = 2080;
  return swift_getErrorValue(v11, v12, a11);
}

BOOL sub_10006E5D8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10006E5E0()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10006E648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a14, v14, v16 + 22);
}

uint64_t sub_10006E660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v10 + 40) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v11, v9, v12 + 12);
}

uint64_t sub_10006E678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(v2, v3, a1, v1, 0);
}

uint64_t sub_10006E690()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10006E698()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10006E6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100037020(v4, 1, 1, a4);
}

uint64_t sub_10006E6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 56) = a1;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  v4 = v3[4];
  sub_100032EFC(v3, v3[3]);
  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v4 + 8) + 4));
}

uint64_t sub_10006E6F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000352C8(a1, 1, v1);
}

uint64_t sub_10006E714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037020(a1, 1, 1, a4);
}

uint64_t sub_10006E720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_arrayDestroy(a13, 2);
}

uint64_t sub_10006E750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a14, v15 + 80, a13, v14);
}

uint64_t sub_10006E764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10006E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_10006E788(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, os_log_type_t type)
{
  NSObject *v11;
  uint8_t *v12;

  _os_log_impl(a1, v11, type, a4, v12, 0x16u);
}

uint64_t sub_10006E79C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10006E7A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_100036778(a1, a2, (uint64_t *)va);
}

uint64_t sub_10006E7C4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_10006E7CC()
{
  return ((uint64_t (*)(void))static Task<>.sleep(nanoseconds:))();
}

_WORD *sub_10006E7D8(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10006E7E4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 168));
}

uint64_t sub_10006E7F0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

BOOL sub_10006E7F8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006E808()
{
  return 0;
}

uint64_t sub_10006E824()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 48);
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10006E84C()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10006E874(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = v3;
  a1[1] = v1;
  *(_QWORD *)(v5 + 16) = v4;
  return v2;
}

uint64_t sub_10006E8A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 64);
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10006E8CC()
{
  uint64_t v0;
  uint64_t v1;

  return UUID.init(uuidString:)(v1, v0);
}

uint64_t sub_10006E8DC()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10006E8EC()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10006E8F4(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10006E908(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 552) = a1;
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10006E934()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

BOOL sub_10006E93C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10006E944()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006E94C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006E964()
{
  return ((uint64_t (*)(void))static Task<>.sleep(nanoseconds:))();
}

uint64_t sub_10006E9A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2[6] + 16))(v2[8], *(_QWORD *)(v0 + 48) + *(_QWORD *)(v2[6] + 72) * v1, v2[5]);
}

uint64_t sub_10006E9E0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10006E9E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_10006EA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10006EA18()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006EA28(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float *v4;

  *v4 = a1;
  return swift_getErrorValue(v1, v3, v2);
}

uint64_t sub_10006EA48()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_10006EA50(uint64_t a1, uint64_t a2)
{
  return sub_100069D00(a1, a2);
}

uint64_t sub_10006EA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_100032F94((uint64_t *)va);
}

uint64_t sub_10006EA6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 96);
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10006EA8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 184);
  *v4 = *v1;
  *(_QWORD *)(v3 + 192) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10006EAAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 200);
  *v4 = *v1;
  *(_QWORD *)(v3 + 208) = v0;
  return swift_task_dealloc(v5);
}

BOOL sub_10006EB14(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void *sub_10006EB1C()
{
  uint64_t v0;
  const void *v1;

  return memcpy((void *)(v0 + 208), v1, 0x60uLL);
}

uint64_t sub_10006EB38(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10006EB44(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10006EB78()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10006EB84@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10006EB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 392) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v10 + 400, v9, v11);
}

double sub_10006EBAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_10006EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return swift_dynamicCast(a1, va, a3, a4, 6);
}

uint64_t sub_10006EBDC(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  return sub_100036FA0((uint64_t)va1, (uint64_t)va);
}

BOOL sub_10006EBE8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006EBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_10006EC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10006EC10()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

double sub_10006EC1C(float *a1, float a2)
{
  uint64_t v2;

  *a1 = a2;
  return (double)*(unint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144));
}

uint64_t sub_10006EC3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10006EC5C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10006EC78()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 536));
}

uint64_t sub_10006EC90()
{
  return type metadata accessor for ServerJSONFetchRetryState(0);
}

uint64_t sub_10006ECA8(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

void sub_10006ECB0(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10006ECC0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_10003301C(a1, v2);
  sub_10003301C(v3, v1);
  return sub_10003301C(v4, v5);
}

uint64_t sub_10006ED40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10006D5B0(v1, v2 + *(int *)(a1 + 48));
}

uint64_t sub_10006ED54()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 24) + 8));
}

uint64_t sub_10006ED68()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100037020(v0, 0, 1, v1);
}

uint64_t sub_10006ED7C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10006ED84()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006ED90(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100036778(a1, a2, (uint64_t *)(v2 + 208));
}

uint64_t sub_10006ED9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(v3, v0, v2, v1);
}

uint64_t sub_10006EDB0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + v1 + 8));
}

void *sub_10006EDBC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

NSString sub_10006EDC4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10006EDCC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 496));
}

uint64_t sub_10006EDE0(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  double *v7;

  *v7 = a1 / a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v6, a5, a6);
}

id sub_10006EDF4(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10006EE00()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10006EE08()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10006EE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10006EE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_10006EE90(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006EEA0()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_10006EEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10006EEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10006EEC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_10004EB34(v0, v2, v1);
}

void sub_10006EED8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_10004EB34(v2, v0, v1);
}

char *sub_10006EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

void sub_10006EEF8(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10006EF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10006EF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10006EF64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10004EB34(a1, a2, v2);
}

uint64_t sub_10006EF84(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_100036778(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

char *sub_10006EF8C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return (char *)a1 + v2;
}

BOOL sub_10006EFA4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10006EFB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10004EB34(a1, a2, v2);
}

uint64_t sub_10006EFBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006EFF8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_10006F00C(uint64_t a1)
{
  uint64_t v1;

  return sub_100037020(v1, 1, 1, a1);
}

uint64_t sub_10006F03C()
{
  uint64_t v0;

  return swift_weakLoadStrong(*(_QWORD *)(v0 + 416) + 16);
}

uint64_t sub_10006F054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10006F070()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006F07C()
{
  uint64_t v0;

  return v0;
}

void sub_10006F090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10004EB34(v3, v4, a3);
}

__uint64_t sub_10006F09C()
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
}

uint64_t sub_10006F0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_10006F0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t sub_10006F0B8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 72));
}

unint64_t sub_10006F0C0(uint64_t a1, uint64_t a2)
{
  return sub_100052C20(a1, a2);
}

uint64_t sub_10006F0DC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100033030(v0, v1);
}

uint64_t sub_10006F0E8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100033030(v1, v0);
}

uint64_t sub_10006F0F4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100033DD0(v1, v0);
}

uint64_t sub_10006F100()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_10006F108()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006F114()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10006F11C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10006F124(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_100036778(a1, a2, (uint64_t *)va);
}

uint64_t sub_10006F130(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100036778(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t sub_10006F148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_10006F160()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368));
}

uint64_t sub_10006F190(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

_QWORD *sub_10006F19C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 560) = result;
  *result = v2;
  result[1] = v1;
  return result;
}

uint64_t sub_10006F1B0()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_10006F1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_10006F1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_10006F1E8()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void sub_10006F1F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10004EB34(v3, v4, a3);
}

uint64_t sub_10006F200()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10006F214()
{
  _OWORD *v0;

  return sub_100084C20(v0);
}

uint64_t sub_10006F220()
{
  _OWORD *v0;

  return sub_100084C20(v0);
}

uint64_t sub_10006F244(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = a1;
  return v1 + 184;
}

NSString sub_10006F258()
{
  return String._bridgeToObjectiveC()();
}

void sub_10006F278()
{
  void *v0;

}

uint64_t sub_10006F2A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = sub_100046E14(v7, v8, a1, a2);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_100046E14(v14, v15, a1, a2) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006F364()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005051AC);
  *(_QWORD *)(v0 + 16) = v1;
  sub_10004EDB0(v1, (uint64_t)sub_10004EC60);
  return sub_10006F3A8();
}

uint64_t sub_10006F3A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = v0;
  v2 = sub_100032C48(&qword_100503A50);
  v1[3] = sub_1000408C4(*(_QWORD *)(v2 - 8));
  v3 = sub_10004F358();
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = sub_100072AD4(v4);
  v1[7] = sub_100072B24();
  v5 = sub_100072AA0();
  v1[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[9] = v6;
  v1[10] = sub_1000408C4(v6);
  sub_10004F018();
  return sub_100040964();
}

uint64_t sub_10006F428()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = sub_100061494(v1);
  *(_QWORD *)(v0 + 88) = v2;

  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 96) = v3;
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 72);
    *(_DWORD *)(v0 + 136) = *(_DWORD *)(v5 + 80);
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v5 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 112) = v4;
      v6 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 24);
      v7 = *(_QWORD *)(v0 + 32);
      sub_100072C60();
      sub_1000353A4(v11 + v9 * v10, v6);
      sub_100072C50();
      v12 = sub_100072C28();
      if (v13)
      {
        sub_100072D98();
        sub_100072D8C();
      }
      else
      {
        sub_100072CE8(v12);
      }
      sub_100072CC8();
      sub_100072D80();
      sub_100072BD0();
      if ((v6 & 1) != 0)
      {
        v16 = (_QWORD *)swift_task_alloc(dword_1005051B4);
        *(_QWORD *)(v0 + 128) = v16;
        *v16 = v0;
        v16[1] = sub_10006F578;
        v17 = sub_10006EB84(*(_QWORD *)(v0 + 80));
        return sub_100072B40(v17);
      }
      sub_100072CB0();
      sub_100072D4C(v14);
      sub_100072B64();
      sub_100072C10();
      if (v8 == v7)
        break;
      v4 = *(_QWORD *)(v0 + 112) + 1;
    }
    v15 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v15 = v2;
  }
  swift_bridgeObjectRelease(v15);
  sub_100072C88();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  return sub_100072B2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006F578()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 128));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_10006F5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v11;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 112) + 1;
  (*(void (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
  sub_100072C10();
  if (v2 == v1)
  {
LABEL_7:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    sub_100072C88();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    return sub_100072B2C(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    while (1)
    {
      ++*(_QWORD *)(v0 + 112);
      v3 = *(_QWORD *)(v0 + 80);
      v5 = *(_QWORD *)(v0 + 24);
      v4 = *(_QWORD *)(v0 + 32);
      sub_100072C60();
      sub_1000353A4(v8 + v7 * v6, v3);
      sub_100072C50();
      v9 = sub_100072C28();
      if (v10)
      {
        sub_100072D98();
        sub_100072D8C();
      }
      else
      {
        sub_100072CE8(v9);
      }
      sub_100072CC8();
      sub_100072D80();
      sub_100072BD0();
      if ((v3 & 1) != 0)
        break;
      sub_100072CB0();
      sub_100072D4C(v11);
      sub_100072B64();
      sub_100072C10();
      if (v5 == v4)
        goto LABEL_7;
    }
    v13 = (_QWORD *)swift_task_alloc(dword_1005051B4);
    *(_QWORD *)(v0 + 128) = v13;
    *v13 = v0;
    v13[1] = sub_10006F578;
    v14 = sub_10006EB84(*(_QWORD *)(v0 + 80));
    return sub_100072B40(v14);
  }
}

void sub_10006F6C0(uint64_t a1)
{
  char v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  double v14;
  uint64_t v15;
  double v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;

  sub_100072AA0();
  sub_10004EDE8();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v32 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = *(_BYTE *)(a1 + 32);
  sub_1000353A4(a1, (uint64_t)&v32 - v10);
  if ((v12 & 1) == 0)
  {
    sub_1000353E8((uint64_t)v11);
LABEL_5:
    if ((*(_BYTE *)(a1 + 48) & 1) != 0
      || (*(_BYTE *)(a1 + 64) & 1) != 0
      || (v14 = *(double *)(a1 + 40), sub_100072620(0.0, 1.0), v16 >= v14))
    {
      v20 = sub_1000353A4(a1, (uint64_t)v6);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)sub_10003308C(12);
        v24 = sub_10003308C(32);
        v33 = v24;
        *(_DWORD *)v23 = 136315138;
        if ((v6[32] & 1) != 0)
        {
          v25 = 0xE300000000000000;
          v26 = 7104878;
        }
        else
        {
          v32 = *((_QWORD *)v6 + 3);
          v28 = sub_100072A08();
          v26 = BinaryInteger.description.getter(&type metadata for UInt64, v28);
          v25 = v29;
        }
        v32 = sub_100036778(v26, v25, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v23 + 4, v23 + 12);
        sub_1000356D4();
        sub_100072CC0();
        sub_100037174((void *)&_mh_execute_header, v21, v22, "Push notification normal period - max delay: %s", v23);
        sub_100072AC4();
        sub_100033080(v24);
        sub_100033080((uint64_t)v23);

      }
      else
      {

        sub_100072CC0();
      }
      v30 = (double)*(unint64_t *)(a1 + 56);
      v31 = 0.0;
      if (*(_BYTE *)(a1 + 64))
        v30 = 0.0;
      if (!*(_BYTE *)(a1 + 32))
        v31 = (double)*(unint64_t *)(a1 + 24);
      if (v30 > v30 + v31)
        __break(1u);
    }
    else
    {
      v17 = v1 + OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
      Logger.logObject.getter(v15);
      v18 = sub_100072D08();
      if (sub_100072C18(v18))
      {
        v19 = (_WORD *)sub_10003308C(2);
        sub_10006E7D8(v19);
        sub_10004ED40((void *)&_mh_execute_header, a1, v17, "Push notification selected for slow start period", (uint8_t *)v6);
        sub_100033080((uint64_t)v6);
      }

    }
    return;
  }
  v13 = v11[48];
  sub_100035598((uint64_t)v11, (uint64_t)v9);
  if ((v13 & 1) != 0)
  {
    sub_100072D00();
    return;
  }
  v27 = v9[64];
  sub_100072D00();
  if ((v27 & 1) == 0)
    goto LABEL_5;
}

double sub_10006F9A8(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  double v3;
  double v4;
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  sub_10006F6C0(a1);
  v4 = 0.0;
  if ((v5 & 1) == 0)
  {
    v6 = *(double *)&v2;
    v7 = v3;
    if (*(double *)&v2 == v3)
    {
      return *(double *)&v2;
    }
    else
    {
      v8 = sub_10007228C(v2, *(double *)&v2, v3);
      v4 = v9;
      Logger.logObject.getter(v8);
      v10 = sub_100072D08();
      if (os_log_type_enabled(v1, v10))
      {
        v11 = sub_10003308C(22);
        v12 = sub_10003308C(32);
        v18 = v12;
        *(_DWORD *)v11 = 134218242;
        v17 = *(_QWORD *)&v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
        *(_WORD *)(v11 + 12) = 2080;
        v13 = sub_100072974(v6, v7);
        v15 = v14;
        v17 = sub_100036778(v13, v14, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 14, v11 + 22);
        swift_bridgeObjectRelease(v15);
        sub_100072CF8((void *)&_mh_execute_header, v1, v10, "Calculated delay for push %f out of delay range %s including slow start if requested", (uint8_t *)v11);
        sub_10003716C(v12);
        sub_100033080(v12);
        sub_100033080(v11);
      }

    }
  }
  return v4;
}

uint64_t sub_10006FB24(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[2];
  uint64_t (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a1;
  v34 = sub_100072AA0();
  sub_10004EDE8();
  __chkstk_darwin(v4);
  sub_100046E44();
  v7 = v6 - v5;
  v8 = sub_10004F358();
  v9 = *(uint64_t **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v30 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v30 - v17;
  static Date.now.getter(v16);
  static Date.+ infix(_:_:)(v15, a2);
  v32 = (void (*)(char *, uint64_t))v9[1];
  v32(v15, v8);
  v31 = (uint64_t (*)(char *, char *, uint64_t))v9[2];
  v19 = v31(v12, v18, v8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (sub_100072C98(v20))
  {
    v22 = sub_10003308C(22);
    v30[1] = v2;
    v23 = v22;
    v30[0] = sub_10003308C(32);
    v36 = v30[0];
    *(_DWORD *)v23 = 134218242;
    v35 = *(_QWORD *)&a2;
    v9 = &v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2080;
    v24 = sub_100072934();
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v8, v24);
    v35 = sub_100036778(v25, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 14, v23 + 22);
    sub_1000356D4();
    sub_100072CA0();
    sub_100072CF8((void *)&_mh_execute_header, v20, v21, "Scheduling operation from push in %f at %s", (uint8_t *)v23);
    v27 = v30[0];
    sub_10003716C(v30[0]);
    sub_100033080(v27);
    sub_100033080(v23);

  }
  else
  {

    sub_100072CA0();
  }
  sub_1000353A4(v33, v7);
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 1;
  v28 = v7 + *(int *)(v34 + 48);
  sub_100054964(v28, &qword_100503A50);
  v31((char *)v28, v18, v8);
  sub_100037020(v28, 0, 1, v8);
  sub_100033FE4(v7);
  sub_10006FDEC(v7, a2);
  ((void (*)(char *, uint64_t))v9)(v18, v8);
  return sub_100072CC0();
}

uint64_t sub_10006FDEC(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = sub_100072AA0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  __chkstk_darwin(v8);
  sub_100046E44();
  v11 = v10 - v9;
  v12 = type metadata accessor for TaskPriority(0);
  sub_10006E714(v11, v13, v14, v12);
  sub_1000353A4(a1, (uint64_t)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = (v15 + 48) & ~v15;
  v17 = swift_allocObject(&unk_1004D16D0, v16 + v7, v15 | 7);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(double *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = v2;
  sub_100035598((uint64_t)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  swift_retain(v2);
  sub_100084EE8();
  return swift_release(v18);
}

uint64_t sub_10006FEFC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 24) = a5;
  *(_QWORD *)(v6 + 32) = a6;
  *(double *)(v6 + 16) = a1;
  return swift_task_switch(sub_10006FF18, 0, 0);
}

void sub_10006FF18()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 16) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 40) = v3;
    sub_10004EDB0(v3, (uint64_t)sub_10006FFAC);
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10006FFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = *(uint64_t **)v1;
  v6 = v2;
  sub_100072D18(v2[5], &v6);
  if (v0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v4 = (_QWORD *)swift_task_alloc(dword_1005051B4);
  v2[6] = (uint64_t)v4;
  *v4 = v1;
  v4[1] = sub_100070020;
  v5 = sub_10006EB84(v2[4]);
  return sub_100070050(v5);
}

uint64_t sub_100070020()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 48));
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100070050(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_100072AA0();
  v2[5] = sub_1000408C4(*(_QWORD *)(v3 - 8));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_10007008C()
{
  NSObject *v0;
  _QWORD *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_1000353A4(v1[3], v1[5]);
  Logger.logObject.getter(v2);
  v3 = sub_100072D08();
  if (sub_100072C98(v0))
  {
    v4 = (uint8_t *)sub_10003308C(12);
    v5 = sub_10003308C(32);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_100076BB8();
    v8 = v7;
    v1[2] = sub_100036778(v6, v7, &v12);
    sub_10006F1D0((uint64_t)(v1 + 2), (uint64_t)(v1 + 3));
    swift_bridgeObjectRelease(v8);
    sub_100072C10();
    sub_100037174((void *)&_mh_execute_header, v0, v3, "Peforming delayed operation with command: %s", v4);
    sub_100072AC4();
    sub_100033080(v5);
    sub_100033080((uint64_t)v4);

  }
  else
  {

    sub_100072C10();
  }
  sub_10003433C();
  v9 = (_QWORD *)swift_task_alloc(dword_1005051D4);
  v1[6] = v9;
  *v9 = v1;
  v9[1] = sub_1000701E0;
  sub_10006EB84(v1[3]);
  sub_100072AA8();
  return sub_100071014(v10);
}

uint64_t sub_1000701E0()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 48));
  sub_100040B34();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100070210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;
  _BYTE v16[16];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 24;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)a1 & 1;
  v8 = *(_BYTE *)(a1 + 1) & 1;
  sub_100032EFC((_QWORD *)(v1 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager), *(_QWORD *)(v1 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager + 24));
  v9 = type metadata accessor for ASAnalyticsEvent(0);
  v14 = v9;
  v15 = &off_1004D2D68;
  v10 = sub_10004048C(v13);
  *(_BYTE *)v10 = v7;
  *((_BYTE *)v10 + 1) = v8;
  v10[1] = v2;
  *((_BYTE *)v10 + 16) = v3 & 1;
  v10[3] = v6;
  v10[4] = v4;
  swift_storeEnumTagMultiPayload(v10, v9, 6);
  v11 = sub_100032EFC(v13, v14);
  sub_1000727B0(v5, (uint64_t)v16);
  sub_1000727F8((uint64_t)v16);
  sub_100099360((uint64_t)v11);
  return sub_100032F94(v13);
}

uint64_t sub_10007030C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = v1;
  return sub_10004EC74((uint64_t)sub_100070320, v1);
}

uint64_t sub_100070320()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(unsigned __int8 **)(v0 + 96);
  *(_QWORD *)(v0 + 112) = sub_100076CB0(*v1);
  *(_QWORD *)(v0 + 120) = v2;
  *(double *)(v0 + 128) = sub_10006F9A8((uint64_t)v1);
  v3 = (_QWORD *)swift_task_alloc(dword_1005051C4);
  *(_QWORD *)(v0 + 136) = v3;
  *v3 = v0;
  v3[1] = sub_100070384;
  v4 = sub_10006EB84(*(_QWORD *)(v0 + 96));
  return sub_10007093C(v4);
}

uint64_t sub_100070384()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_BYTE *)(v1 + 152) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_1000703C4()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(double *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(_BYTE *)(v0 + 152) & 1) != 0)
  {
    *(_WORD *)(v0 + 56) = 256;
    *(double *)(v0 + 64) = v1;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v2;
    *(_QWORD *)(v0 + 88) = v3;
    swift_bridgeObjectRetain(v3);
    sub_100070210(v0 + 56);
    sub_100039950();
LABEL_5:
    sub_100039950();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_WORD *)(v0 + 16) = 0;
  *(double *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  swift_bridgeObjectRetain(v3);
  sub_100070210(v0 + 16);
  sub_100039950();
  if (v1 > 0.0)
  {
    sub_10006FB24(*(_QWORD *)(v0 + 96), *(double *)(v0 + 128));
    goto LABEL_5;
  }
  v5 = (_QWORD *)swift_task_alloc(dword_1005051D4);
  *(_QWORD *)(v0 + 144) = v5;
  *v5 = v0;
  v5[1] = sub_1000704B4;
  v6 = sub_10006EB84(*(_QWORD *)(v0 + 96));
  return sub_100071014(v6);
}

uint64_t sub_1000704B4()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 144));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_1000704EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100070514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  sub_100032C48(&qword_1005039D8);
  sub_10004EDE8();
  ((void (*)(void))__chkstk_darwin)();
  sub_100046E44();
  v4 = v3 - v2;
  v5 = *(_QWORD *)(sub_100072AA0() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - v9;
  v11 = sub_100072D44();
  sub_100076D78(v11, (uint64_t)v10);
  v12 = type metadata accessor for TaskPriority(0);
  sub_10006E714(v4, v13, v14, v12);
  sub_1000353A4((uint64_t)v10, (uint64_t)v8);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 40) & ~v15;
  v17 = (_QWORD *)swift_allocObject(&unk_1004D16A8, v16 + v6, v15 | 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v1;
  sub_100035598((uint64_t)v8, (uint64_t)v17 + v16);
  swift_retain(v1);
  v18 = sub_1000494E4(v4, (uint64_t)&unk_100505310, (uint64_t)v17);
  swift_release(v18);
  return sub_100072D00();
}

uint64_t sub_1000708E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1005051BC);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10004EC60;
  return sub_10007030C(a5);
}

uint64_t sub_10007093C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_100070950, v1);
}

uint64_t sub_100070950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (uint64_t *)(v1 + *(int *)(sub_100072AA0() + 52));
  v3 = *v2;
  *(_QWORD *)(v0 + 32) = *v2;
  if (v3 == 1)
    return sub_100048E00(0, *(uint64_t (**)(void))(v0 + 8));
  *(_QWORD *)(v0 + 40) = v2[1];
  v5 = (_QWORD *)swift_task_alloc(dword_1005051CC);
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_1000709D8;
  return sub_100070D10(v3);
}

uint64_t sub_1000709D8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_BYTE *)(v1 + 56) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100070A18(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  _BOOL8 v3;

  v2 = *(_BYTE *)(v1 + 56);
  v3 = (sub_100070A58(a1, *(_QWORD **)(v1 + 40)) & v2 & 1) == 0;
  return sub_100048E00(v3, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100070A58(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _WORD *v14;
  _QWORD *v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  if (!a2)
    goto LABEL_5;
  v4 = v2;
  sub_100055834();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    if ((sub_10006F2A8(v6, v7, a2) & 1) != 0)
    {
      swift_bridgeObjectRelease(v9);
LABEL_5:
      v10 = 1;
      return v10 & 1;
    }
    v33 = v8;
    v15 = sub_100055924();
    v16 = v15[2];
    if (v16)
    {
      v34 = v9;
      v36 = _swiftEmptyArrayStorage;
      sub_1000916B8(0, v16, 0);
      v17 = _swiftEmptyArrayStorage;
      v32 = v15;
      v18 = v15 + 5;
      do
      {
        v19 = *(v18 - 1);
        v20 = *v18;
        v36 = v17;
        v22 = v17[2];
        v21 = v17[3];
        swift_bridgeObjectRetain(v20);
        if (v22 >= v21 >> 1)
        {
          sub_1000916B8((char *)(v21 > 1), v22 + 1, 1);
          v17 = v36;
        }
        v18 += 6;
        v17[2] = v22 + 1;
        v23 = &v17[2 * v22];
        v23[4] = v19;
        v23[5] = v20;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease(v32);
      v9 = v34;
    }
    else
    {
      sub_100039950();
      v17 = _swiftEmptyArrayStorage;
    }
    v24 = sub_1000732FC((uint64_t)v17);
    v25 = sub_100072334((uint64_t)a2, v24);
    sub_1000356D4();
    if ((v25 & 1) != 0)
    {
      v26 = (v4 + OBJC_IVAR____TtC3asd19PushDispatchManager_logger);
      v27 = sub_100072D44();
      Logger.logObject.getter(v27);
      v28 = sub_100056100();
      if (sub_100072C98(v26))
      {
        v29 = (uint8_t *)sub_10003308C(12);
        v30 = sub_10003308C(32);
        v36 = (_QWORD *)v30;
        *(_DWORD *)v29 = 136315138;
        sub_100072D44();
        v35 = sub_100036778(v33, v9, (uint64_t *)&v36);
        sub_10006F1D0((uint64_t)&v35, (uint64_t)&v36);
        swift_bridgeObjectRelease_n(v9, 3);
        sub_100037174((void *)&_mh_execute_header, v26, v28, "Push filtered - Current region (%s) not in areas.", v29);
        sub_100072AC4();
        sub_100033080(v30);
        sub_100033080((uint64_t)v29);
      }
      else
      {
        swift_bridgeObjectRelease_n(v9, 2);
      }

    }
    else
    {
      swift_bridgeObjectRelease(v9);
    }
    v10 = v25 ^ 1;
  }
  else
  {
    v11 = v2 + OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
    v12 = Logger.logObject.getter(v6);
    v13 = static os_log_type_t.debug.getter();
    if (sub_100072C18(v13))
    {
      v14 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v14);
      sub_10004ED40((void *)&_mh_execute_header, v12, v11, "Push filtered - No current region found.", v3);
      sub_100033080((uint64_t)v3);
    }

    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_100070D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10004EC74((uint64_t)sub_100070D24, v1);
}

uint64_t sub_100070D24()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  os_log_type_t v8;
  _WORD *v9;

  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    if ((sub_10006F2A8(0x64756F6C4369, 0xE600000000000000, *(_QWORD **)(v2 + 16)) & 1) != 0)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1005045CC);
      *(_QWORD *)(v2 + 32) = v5;
      sub_10004EDB0(v5, (uint64_t)sub_100070E48);
      return sub_100055720();
    }
    if ((sub_100072B80() & 1) != 0)
    {
      v7 = (_QWORD *)swift_task_alloc(dword_1005045D4);
      *(_QWORD *)(v2 + 40) = v7;
      sub_10004EDB0(v7, (uint64_t)sub_100070F48);
      return sub_100072B54();
    }
    sub_10004EDE0();
    v8 = sub_100056100();
    if (sub_10004ECA8(v8))
    {
      v9 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v9);
      sub_10004ED40((void *)&_mh_execute_header, v0, v1, "Push filtered - Not logged into a required account type.", v3);
      sub_100033080((uint64_t)v3);
    }

  }
  return sub_100048E00(v4 == 0, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100070E48()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_BYTE *)(v1 + 48) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100070E84()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  _QWORD *v5;
  os_log_type_t v7;
  _WORD *v8;

  v4 = *(unsigned __int8 *)(v2 + 48);
  if ((v4 & 1) == 0)
  {
    if ((sub_100072B80() & 1) != 0)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1005045D4);
      *(_QWORD *)(v2 + 40) = v5;
      sub_10004EDB0(v5, (uint64_t)sub_100070F48);
      return sub_100072B54();
    }
    sub_10004EDE0();
    v7 = sub_100056100();
    if (sub_10004ECA8(v7))
    {
      v8 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v8);
      sub_10004ED40((void *)&_mh_execute_header, v0, v1, "Push filtered - Not logged into a required account type.", v3);
      sub_100033080((uint64_t)v3);
    }

  }
  return sub_100048E00(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100070F48()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_BYTE *)(v1 + 49) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100070F88()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;

  v4 = *(unsigned __int8 *)(v2 + 49);
  if ((v4 & 1) == 0)
  {
    sub_10004EDE0();
    v5 = sub_100056100();
    if (sub_10004ECA8(v5))
    {
      v6 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v6);
      sub_10004ED40((void *)&_mh_execute_header, v0, v1, "Push filtered - Not logged into a required account type.", v3);
      sub_100033080((uint64_t)v3);
    }

  }
  return sub_100048E00(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100071014(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_100072AA0();
  v2[5] = sub_1000408C4(*(_QWORD *)(v3 - 8));
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100071050()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;

  v1 = v0[3];
  v3 = v0[4];
  v2 = v0[5];
  v4 = OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
  v0[6] = OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
  v5 = (v3 + v4);
  v6 = sub_1000353A4(v1, v2);
  Logger.logObject.getter(v6);
  v7 = sub_1000371A8();
  v8 = os_log_type_enabled(v5, v7);
  v9 = v0[5];
  if (v8)
  {
    v19 = v0 + 2;
    v10 = (uint8_t *)sub_10003308C(12);
    v11 = sub_10003308C(32);
    v20 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = *(_QWORD *)(v9 + 16);
    v13 = v0[5];
    if (v12)
    {
      v14 = *(_QWORD *)(v13 + 8);
      v15 = v12;
    }
    else
    {
      v15 = 0xE300000000000000;
      v14 = 7104878;
    }
    swift_bridgeObjectRetain(v12);
    *v19 = sub_100036778(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v0 + 3, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    sub_1000353E8(v13);
    sub_100037174((void *)&_mh_execute_header, v5, v7, "Processing notification with id: %s", v10);
    sub_10003716C(v11);
    sub_100033080(v11);
    sub_100033080((uint64_t)v10);

  }
  else
  {

    sub_1000353E8(v9);
  }
  v16 = (uint64_t **)swift_task_alloc(dword_1005051C4);
  v0[7] = (uint64_t)v16;
  *v16 = v0;
  v16[1] = (uint64_t *)sub_1000711E8;
  v17 = sub_10006EB84(v0[3]);
  return sub_10007093C(v17);
}

uint64_t sub_1000711E8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F16C();
  sub_10004F18C();
  *(_BYTE *)(v1 + 72) = v0;
  sub_10004F260(v2);
  sub_10004F018();
  return sub_100040920();
}

uint64_t sub_100071228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
  {
    v3 = (void *)(*(_QWORD *)(v2 + 32) + *(_QWORD *)(v2 + 48));
    Logger.logObject.getter(a1);
    v4 = sub_1000371A8();
    if (sub_10004EFCC(v4))
    {
      v5 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v5);
      sub_100058F24((void *)&_mh_execute_header, v6, v7, "Push ignored due to filters");
      sub_100033080(v1);
    }

    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    v9 = (_QWORD *)swift_task_alloc(dword_1005051DC);
    *(_QWORD *)(v2 + 64) = v9;
    *v9 = v2;
    v9[1] = sub_1000712E8;
    v10 = sub_10006EB84(*(_QWORD *)(v2 + 24));
    return sub_100071324(v10);
  }
}

uint64_t sub_1000712E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = v1;
  sub_100072D18(*(_QWORD *)(v1 + 64), &v3);
  swift_task_dealloc(*(_QWORD *)(v1 + 40));
  return sub_10004ECB8((uint64_t (*)(void))v0[1]);
}

uint64_t sub_100071324(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[13] = a1;
  v2[14] = v1;
  v3 = sub_100032C48(&qword_100505020);
  v2[15] = sub_100072AD4(*(_QWORD *)(v3 - 8));
  v2[16] = sub_100072B24();
  v4 = sub_100072AA0();
  v2[17] = sub_1000408C4(*(_QWORD *)(v4 - 8));
  v5 = type metadata accessor for UUID(0);
  v2[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[19] = v6;
  v2[20] = sub_100072AD4(v6);
  v2[21] = sub_100072B24();
  v2[22] = sub_100072B24();
  v2[23] = sub_100072B24();
  sub_10004F018();
  return sub_100040964();
}

void sub_1000713B8()
{
  __asm { BR              X11 }
}

uint64_t sub_100071400()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = sub_10004EDE0();
  v4 = static os_log_type_t.info.getter();
  v5 = v4;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = (uint8_t *)sub_10003308C(2);
    *(_WORD *)v6 = 0;
    sub_10004ED40((void *)&_mh_execute_header, v3, (os_log_type_t)v5, "Ravioli Fetch Initiated", v6);
    sub_100033080((uint64_t)v6);
  }
  v7 = v2[13];

  if (!*(_QWORD *)(v7 + 16))
  {
    Logger.logObject.getter(v8);
    v9 = sub_100072D6C();
    if (sub_10004ECA8(v9))
    {
      v10 = (_WORD *)sub_10003308C(2);
      sub_10004EF2C(v10);
      sub_10004ED40((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Missing notificationId is push payload for fetch", (uint8_t *)v5);
      sub_100033080(v5);
    }

  }
  sub_100032EB8(v2[14] + 112, (uint64_t)v0);
  sub_100032EFC(v0, v2[5]);
  if (qword_1005034A0 != -1)
    swift_once(&qword_1005034A0, sub_1000630D4);
  v11 = v2[23];
  v12 = v2[18];
  v13 = v2[19];
  v14 = sub_1000352B0(v12, (uint64_t)static RavioliConstants.ravioliUUID);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v14, v12);
  v15 = *(_QWORD *)(v7 + 16);
  if (v15)
    v16 = *(_QWORD *)(v7 + 16);
  else
    v16 = 0x80000001003E4A20;
  v2[24] = v16;
  v17 = dword_100504EFC;
  swift_bridgeObjectRetain(v15);
  v18 = (uint64_t **)swift_task_alloc(v17);
  v2[25] = (uint64_t)v18;
  *v18 = v2;
  v18[1] = (uint64_t *)sub_100071A14;
  sub_10006EB84(v2[23]);
  sub_100072AA8();
  return sub_10006268C(v19, v20, v21);
}

uint64_t sub_100071A14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100040B24();
  v1 = v0[23];
  v2 = v0[18];
  v3 = v0[19];
  v4 = v0[14];
  sub_100048CF8(v0[25]);
  sub_1000356D4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_100071A84, v4, 0);
}

uint64_t sub_100071A84()
{
  uint64_t v0;

  sub_100032F94((_QWORD *)(v0 + 16));
  sub_100072A8C();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  return sub_10004096C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100071AD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 216);
  v3 = *v1;
  *(_QWORD *)(v3 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return sub_100040964();
  swift_task_dealloc(*(_QWORD *)(v3 + 184));
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  return sub_10004096C(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100071B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 224);
  sub_1000353A4(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 136);
    v6 = sub_10003308C(22);
    v16 = sub_10003308C(64);
    v17 = v16;
    *(_DWORD *)v6 = 136315394;
    swift_getErrorValue(v5, v0 + 80, v0 + 56);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 88) = sub_100036778(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4, v6 + 12);
    sub_1000356D4();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    *(_WORD *)(v6 + 12) = 2080;
    v9 = *(_QWORD *)(v15 + 16);
    v10 = *(_QWORD *)(v0 + 136);
    if (v9)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_QWORD *)(v15 + 16);
    }
    else
    {
      v12 = 0xE300000000000000;
      v11 = 7104878;
    }
    v13 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 96) = sub_100036778(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);
    sub_1000353E8(v10);
    sub_100072CF8((void *)&_mh_execute_header, v3, v4, "Config update failed with error (%s for notification %s", (uint8_t *)v6);
    swift_arrayDestroy(v16, 2);
    sub_100033080(v16);
    sub_100033080(v6);
    swift_errorRelease(v13);

  }
  else
  {
    sub_10005614C();

    sub_10005614C();
    sub_10005614C();
    sub_100072CC0();
  }
  sub_100072A8C();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071DAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[29];
  v2 = swift_task_alloc(32);
  v0[30] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[31] = v3;
  *v3 = v0;
  v3[1] = sub_100071E38;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100071E38()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 248));
  sub_100040B34();
  return sub_100040920();
}

uint64_t sub_100071E74()
{
  uint64_t v0;

  sub_100072A8C();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  return sub_10004096C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100071EB8()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 312));
  sub_1000356D4();
  return sub_100040964();
}

uint64_t sub_100071EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  if (v1 == v2)
  {
    sub_10006E714(*(_QWORD *)(v0 + 120), v3, v4, *(_QWORD *)(v0 + 144));
LABEL_6:
    sub_1000356D4();
    sub_100072A8C();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_100040BE8();
    return sub_10004096C(*(uint64_t (**)(void))(v0 + 8));
  }
  v5 = *(_QWORD *)(v0 + 296);
  sub_100072C60();
  result = v6();
  *(_QWORD *)(v0 + 296) = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    sub_100072AE8();
    if (v8)
      goto LABEL_6;
    sub_100072BB8();
    v9 = *(_QWORD *)(v5 + 16);
    if (v9)
      v10 = *(_QWORD *)(v5 + 16);
    else
      v10 = 0x80000001003E4A20;
    *(_QWORD *)(v0 + 304) = v10;
    v11 = dword_100504EFC;
    swift_bridgeObjectRetain(v9);
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 312) = v12;
    v13 = sub_100072B98(v12, (uint64_t)sub_100071EB8);
    return sub_10006268C(v13, v14, v15);
  }
  return result;
}

uint64_t sub_10007202C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100032F94((_QWORD *)(v0 + 112));

  sub_100032F94((_QWORD *)(v0 + 160));
  v1 = type metadata accessor for Logger(0);
  sub_10004F104(v1);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC3asd19PushDispatchManager_contextProvider));
  sub_100032F94((_QWORD *)(v0 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000720A0()
{
  uint64_t v0;

  sub_10007202C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000720B8()
{
  return type metadata accessor for PushDispatchManager(0);
}

uint64_t type metadata accessor for PushDispatchManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100505198;
  if (!qword_100505198)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushDispatchManager);
  return result;
}

uint64_t sub_1000720F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[1] = &unk_1004090E0;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1004090E0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_1004090E0;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100072198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10050686C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10004E8D0;
  return sub_1000A8B70(a1, a2, v6);
}

void sub_100072200(float a1, float a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 == a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_100072D24();
  if (v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v6 = v4;
  v7 = 0;
  swift_stdlib_random(&v7, 8);
  if (sub_100072C70((float)(v7 & 0xFFFFFF)) == a2)
    sub_100072200(v6, a1, a2);
}

uint64_t sub_10007228C(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_10007228C(v6, a2, a3);
  return result;
}

uint64_t sub_100072334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v25 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  while (!*(_QWORD *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      v22 = 1;
      v7 = a1;
      goto LABEL_24;
    }
  }
  v6 = (uint64_t *)(v25 + 16 * v5);
  v8 = *v6;
  v7 = v6[1];
  Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, v8, v7);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease(v7);
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (uint64_t *)(v12 + 16 * v11);
  v14 = v13[1];
  v15 = *v13 == v8 && v14 == v7;
  if (!v15 && (sub_100046E14(*v13, v14, v8, v7) & 1) == 0)
  {
    v16 = ~v10;
    for (i = v11 + 1; ; i = v18 + 1)
    {
      v18 = i & v16;
      if (((*(_QWORD *)(v4 + (((i & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v16)) & 1) == 0)
        break;
      v19 = (uint64_t *)(v12 + 16 * v18);
      v20 = v19[1];
      v21 = *v19 == v8 && v20 == v7;
      if (v21 || (sub_100046E14(*v19, v20, v8, v7) & 1) != 0)
        goto LABEL_23;
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  v22 = 0;
LABEL_24:
  swift_bridgeObjectRelease(v7);
  return v22;
}

uint64_t sub_1000724B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = sub_100072AA0();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  sub_100072CD8();
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100072D74();
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 80));
  v6 = sub_10004F358();
  if (!sub_100072BE8(v6))
    sub_100072BFC();
  v7 = sub_100072D58();
  if (!v8)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  }
  return sub_10006E460(v0, v1 + v2, v5 | 7);
}

uint64_t sub_100072540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100072AA0() - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10050530C);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_10004F13C(v5);
  return sub_1000708E8(v6, v7, v8, v3, v4);
}

void sub_1000725C0()
{
  char v0;
  unsigned int v1;

  sub_100072D24();
  if (v0)
  {
    __break(1u);
  }
  else
  {
    v1 = sub_10007269C(16777217);
    sub_100072C70((float)v1);
  }
}

void sub_100072620(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0)
    sub_100072728(0x20000000000001uLL);
  else
    __break(1u);
}

uint64_t sub_10007269C(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  int64_t v5;
  uint64_t v6;

  if ((_DWORD)result)
  {
    v1 = result;
    v2 = result;
    v6 = 0;
    swift_stdlib_random(&v6, 8);
    v3 = v6 * (unint64_t)v2;
    result = HIDWORD(v3);
    if (v3 < v1)
    {
      v4 = -v1 % v1;
      if (v4 > v3)
      {
        do
        {
          v6 = 0;
          swift_stdlib_random(&v6, 8);
          v5 = v6 * (unint64_t)v2;
        }
        while (v4 > v5);
        return v5 >> 32;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100072728(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000727B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_1005044D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000727F8(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100072820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = sub_100072AA0();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  sub_100072CD8();
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100072D74();
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 80));
  v6 = sub_10004F358();
  if (!sub_100072BE8(v6))
    sub_100072BFC();
  v7 = sub_100072D58();
  if (!v8)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  }
  return sub_10006E460(v0, v1 + v2, v5 | 7);
}

uint64_t sub_1000728AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100072AA0() - 8) + 80);
  v3 = *(double *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = v0 + ((v2 + 48) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_10050531C);
  *(_QWORD *)(v1 + 16) = v6;
  v7 = sub_10004F13C(v6);
  return sub_10006FEFC(v3, v7, v8, v9, v4, v5);
}

unint64_t sub_100072934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005042F0;
  if (!qword_1005042F0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1005042F0);
  }
  return result;
}

uint64_t sub_100072974(double a1, double a2)
{
  Swift::String v2;
  _QWORD v4[2];
  double v5;
  double v6;

  v5 = a2;
  v6 = a1;
  v4[0] = 0;
  v4[1] = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(&v6, v4, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 3943982;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)(&v5, v4, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

unint64_t sub_100072A08()
{
  unint64_t result;

  result = qword_100505328;
  if (!qword_100505328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100505328);
  }
  return result;
}

uint64_t sub_100072A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100503A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072A8C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 184));
}

uint64_t sub_100072AA0()
{
  return type metadata accessor for PushPayload(0);
}

uint64_t sub_100072AC4()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100072AD4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100072AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  sub_100037020(v2, 0, 1, v1);
  return sub_1000352C8(v2, 1, v1);
}

uint64_t sub_100072B24()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100072B2C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100072B40(uint64_t a1)
{
  return sub_100070050(a1);
}

uint64_t sub_100072B54()
{
  return sub_1000557C8();
}

uint64_t sub_100072B64()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100072B80()
{
  uint64_t v0;

  return sub_10006F2A8(0x73656E755469, 0xE600000000000000, *(_QWORD **)(v0 + 16));
}

uint64_t sub_100072B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 160);
}

uint64_t sub_100072BB8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[19] + 32))(v0[20], v0[15], v0[18]);
}

uint64_t sub_100072BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 120) = v4;
  return v4(v0, v2);
}

uint64_t sub_100072BE8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000352C8(v1, 1, a1);
}

uint64_t sub_100072BFC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_100072C10()
{
  uint64_t v0;

  return sub_1000353E8(v0);
}

BOOL sub_100072C18(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100072C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000352C8(v2, 1, v0);
  return *(_QWORD *)(v1 + 56);
}

uint64_t sub_100072C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100072A44(v0 + *(int *)(v2 + 48), v1);
}

float sub_100072C70(float a1)
{
  float v1;
  float v2;

  return (float)(v2 * (float)(a1 * 0.000000059605)) + v1;
}

uint64_t sub_100072C88()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

BOOL sub_100072C98(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100072CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(v1, v0);
}

uint64_t sub_100072CB0()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t sub_100072CC0()
{
  uint64_t v0;

  return sub_1000353E8(v0);
}

uint64_t sub_100072CC8()
{
  return static Date.now.getter();
}

uint64_t sub_100072CD8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100072CE8(uint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1[5] + 32))(a1, v1[3], v1[4]);
}

void sub_100072CF8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100072D00()
{
  uint64_t v0;

  return sub_1000353E8(v0);
}

uint64_t sub_100072D08()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100072D10()
{
  return Logger.logObject.getter();
}

uint64_t sub_100072D18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

void sub_100072D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003E094(a1, a2, 1, v2);
}

uint64_t sub_100072D44()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100072D4C(double a1)
{
  uint64_t v1;

  return sub_10006FDEC(v1, a1);
}

uint64_t sub_100072D58()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(v0 + 52));
}

uint64_t sub_100072D6C()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100072D74()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + v1 + 16));
}

uint64_t sub_100072D80()
{
  uint64_t v0;
  uint64_t v1;

  return static Date.< infix(_:_:)(v0, v1);
}

uint64_t sub_100072D8C()
{
  uint64_t *v0;
  uint64_t v1;

  return sub_100054964(v1, v0);
}

uint64_t sub_100072D98()
{
  return static Date.distantPast.getter();
}

_QWORD *sub_100072DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = *(unsigned __int8 *)(a2 + 136);
    swift_bridgeObjectRetain(a1);
    v6 = (_QWORD *)(v5 + 72);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = v6 - 1;
      if (v4)
      {
        v8 = v6 - 3;
        v9 = v6 - 2;
      }
      else
      {
        v9 = v6;
      }
      v10 = *v9;
      if (*v9)
      {
        v11 = *v8;
        swift_bridgeObjectRetain(*v9);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_10003DF90(0, v7[2] + 1, 1, (uint64_t)v7);
          v7 = v15;
        }
        v13 = v7[2];
        v12 = v7[3];
        if (v13 >= v12 >> 1)
        {
          sub_10003DF90(v12 > 1, v13 + 1, 1, (uint64_t)v7);
          v7 = v16;
        }
        v7[2] = v13 + 1;
        v14 = &v7[2 * v13];
        v14[4] = v11;
        v14[5] = v10;
      }
      v6 += 6;
      --v2;
    }
    while (v2);
    swift_release(a2);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

_QWORD *sub_100072EE4(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    v3 = *(_BYTE *)(a2 + 136);
    swift_bridgeObjectRetain(a1);
    v4 = *(unsigned __int8 *)(a1 + 32);
    if ((v3 & 1) != 0)
      __asm { BR              X9 }
    __asm { BR              X9 }
  }
  swift_release(a2);
  return _swiftEmptyArrayStorage;
}

void sub_100073110(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    objc_allocWithZone((Class)PKPublicChannel);
    swift_bridgeObjectRetain(v15);
    v16 = sub_1000745C4(v14, v15);
    if (v16)
    {
      v17 = v16;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v20);
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_21;
  v7 = v10 + 1;
  if (v10 + 1 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 2;
  if (v10 + 2 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 3;
  if (v10 + 3 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000732FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;

  v2 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100074B3C(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }
    while (v3);
    sub_100039950();
    return v10;
  }
  else
  {
    v7 = v2;
    sub_100039950();
  }
  return v7;
}

_QWORD *sub_1000733A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!((unint64_t)a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
LABEL_17:
  if (a1 < 0)
    v16 = a1;
  else
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  v3 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v3)
    goto LABEL_21;
LABEL_3:
  v4 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
    }
    else
    {
      if (v4 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      v5 = *(id *)(a1 + 8 * v4 + 32);
    }
    v6 = v5;
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_16;
    result = (_QWORD *)sub_100076764(v5);
    if (!v9)
      break;
    v10 = v9;
    sub_10007427C((uint64_t)result, v9, a2);
    v12 = v11;
    v13 = swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v6);
      specialized ContiguousArray._endMutation()(v15);
    }
    ++v4;
    if (v7 == v3)
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073518()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100505330);
  sub_1000352B0(v0, (uint64_t)qword_100505330);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000011, 0x80000001003E4C50);
}

uint64_t sub_100073598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000735B0, a4, 0);
}

uint64_t sub_1000735B0()
{
  uint64_t v0;

  sub_1000735D8();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000735D8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1005034C0 != -1)
    swift_once(&qword_1005034C0, sub_100084FC4);
  v2 = qword_1005186B8;
  v3 = swift_allocObject(&unk_1004D1758, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v8[4] = sub_1000768EC;
  v9 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000975C8;
  v8[3] = &unk_1004D1770;
  v4 = _Block_copy(v8);
  swift_release(v9);
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4);
  _Block_release(v4);

  v6 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 200) = v5;
  return swift_unknownObjectRelease(v6);
}

uint64_t sub_100073708(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v12, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for TaskPriority(0);
    sub_100037020((uint64_t)v5, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_1004D17A8, 40, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v7;
    v10 = sub_1000494E4((uint64_t)v5, (uint64_t)&unk_1005054A0, (uint64_t)v9);
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_1000737DC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100505374);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100076AD8;
  return sub_100073824();
}

uint64_t sub_100073824()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[6] = v0;
  v2 = type metadata accessor for ASAnalyticsEvent(0);
  v1[7] = v2;
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100073880, v0, 0);
}

uint64_t sub_100073880()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = sub_100076550();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 72) = v3;
  v4 = sub_100032C48(&qword_100505470);
  *v3 = v0;
  v3[1] = sub_100073924;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v1, v2, 0xD000000000000010, 0x80000001003E4C30, sub_10007658C, *(_QWORD *)(v0 + 48), v4);
}

uint64_t sub_100073924()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100073DBC;
  else
    v4 = sub_100073988;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

void sub_100073988()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t type;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45[2];

  v2 = *(_QWORD *)(v0 + 16);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    if (v3)
      goto LABEL_3;
LABEL_17:
    v5 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100076B5C();
  v3 = sub_100076BA4();
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = _swiftEmptyArrayStorage;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      else
        v6 = *(id *)(v2 + 8 * v4 + 32);
      v7 = v6;
      v8 = sub_100076764(v6);
      v1 = v9;

      if (v1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        {
          sub_100076BAC(0, v5[2] + 1);
          v5 = v13;
        }
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
        {
          sub_100076BAC(v10 > 1, v11 + 1);
          v5 = v14;
        }
        v5[2] = v11 + 1;
        v12 = &v5[2 * v11];
        v12[4] = v8;
        v12[5] = v1;
      }
      ++v4;
    }
    while (v3 != v4);
LABEL_18:
    sub_100035714();
    v15 = sub_1000732FC((uint64_t)v5);
    v16 = sub_100074370();
    v17 = sub_1000732FC((uint64_t)v16);
    swift_bridgeObjectRetain(v17);
    v18 = sub_10007422C(v15, v17);
    sub_100073110((uint64_t)v18);
    sub_100039968();
    sub_1000470C4();
    v19 = (unint64_t)sub_1000733A4(v2, v17);
    if (qword_1005034A8 != -1)
      swift_once(&qword_1005034A8, sub_100073518);
    v20 = type metadata accessor for Logger(0);
    sub_1000352B0(v20, (uint64_t)qword_100505330);
    sub_1000470C4();
    swift_bridgeObjectRetain(v15);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v44 = v19;
      v24 = sub_10003308C(22);
      v43 = sub_10003308C(64);
      v45[0] = v43;
      *(_DWORD *)v24 = 136315394;
      type = v23;
      v25 = swift_bridgeObjectRetain(v15);
      v26 = Set.description.getter(v25);
      v28 = v27;
      swift_bridgeObjectRelease(v15);
      *(_QWORD *)(v0 + 32) = sub_100036778(v26, v28, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      sub_1000371A0(v15);
      *(_WORD *)(v24 + 12) = 2080;
      sub_1000470C4();
      v30 = Set.description.getter(v29);
      v32 = v31;
      swift_bridgeObjectRelease(v17);
      *(_QWORD *)(v0 + 40) = sub_100036778(v30, v32, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease(v32);
      sub_1000371A0(v17);
      _os_log_impl((void *)&_mh_execute_header, v22, type, "Initial channels: %s, required channels: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v43, 2);
      sub_100033080(v43);
      v33 = v24;
      v19 = v44;
      sub_100033080(v33);
    }
    else
    {
      sub_1000371A0(v15);
      sub_1000371A0(v17);
    }

    if (v1 >> 62)
    {
      swift_bridgeObjectRetain(v1);
      v40 = sub_100076BA4();
      sub_100039998();
      if (!v40)
      {
LABEL_26:
        sub_100039998();
        if (v19 >> 62)
        {
          sub_100076B5C();
          v41 = sub_100076BA4();
          sub_100035714();
          if (!v41)
            goto LABEL_29;
        }
        else if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_29:
          sub_100035714();
          swift_task_dealloc(*(_QWORD *)(v0 + 64));
          (*(void (**)(void))(v0 + 8))();
          return;
        }
        sub_100076B48();
        sub_100076B84(v19, v37, v38, v39, (SEL *)&selRef_unsubscribeFromChannels_forTopic_);
        goto LABEL_29;
      }
    }
    else if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_26;
    }
    sub_100076B48();
    sub_100076B84(v1, v34, v35, v36, (SEL *)&selRef_subscribeToChannels_forTopic_);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t sub_100073DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (qword_1005034A8 != -1)
    swift_once(&qword_1005034A8, sub_100073518);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_1000352B0(v2, (uint64_t)qword_100505330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)sub_10003308C(12);
    v9 = (_QWORD *)sub_10003308C(8);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    *v9 = v10;
    sub_100076B7C();
    sub_100076B7C();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error getting channels: %@", v8, 0xCu);
    sub_100032C48(&qword_100505478);
    swift_arrayDestroy(v9, 1);
    sub_100033080((uint64_t)v9);
    sub_100033080((uint64_t)v8);
  }
  else
  {
    sub_100076B7C();
    sub_100076B7C();
  }
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 48);

  sub_100032EFC((_QWORD *)(v14 + 152), *(_QWORD *)(v14 + 176));
  v15 = 1685025392;
  if (*(_BYTE *)(v14 + 136))
    v15 = 0x786F62646E6173;
  v16 = 0xE400000000000000;
  if (*(_BYTE *)(v14 + 136))
    v16 = 0xE700000000000000;
  *(_BYTE *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 11;
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v16;
  swift_storeEnumTagMultiPayload(v12, v13, 3);
  sub_100099360(v12);
  swift_errorRelease(v11);
  sub_10004EA4C(v12);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100073FDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100032C48(&qword_100505490);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (void *)a2[14];
  v8 = a2[15];
  v9 = a2[16];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1004D1708, v11 + v6, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100076864;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000741B0;
  aBlock[3] = &unk_1004D1720;
  v13 = _Block_copy(aBlock);
  v14 = v16;
  swift_bridgeObjectRetain(v9);
  swift_release(v14);
  sub_100076718(v8, v9, (uint64_t)v13, v7);
  swift_bridgeObjectRelease(v9);
  _Block_release(v13);
}

uint64_t sub_100074130(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v6 = a2;
    swift_errorRetain(a2);
    v2 = sub_100032C48(&qword_100505490);
    return CheckedContinuation.resume(throwing:)(&v6, v2);
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
    if (a1)
      v4 = a1;
    v6 = v4;
    swift_bridgeObjectRetain(a1);
    v5 = sub_100032C48(&qword_100505490);
    return CheckedContinuation.resume(returning:)(&v6, v5);
  }
}

uint64_t sub_1000741B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  unint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_1000767C4();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

unint64_t *sub_10007422C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_100075748(a1, a2);
  sub_1000755B0(a1);
  return (unint64_t *)a2;
}

void sub_10007427C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  char v21;
  _QWORD v22[9];

  if (*(_QWORD *)(a3 + 16))
  {
    sub_100076B3C();
    Hasher.init(_seed:)(v22, *(_QWORD *)(v6 + 40));
    String.hash(into:)(v22, v4, v3);
    v7 = Hasher._finalize()();
    v8 = -1 << *(_BYTE *)(a3 + 32);
    v9 = v7 & ~v8;
    sub_100076B28();
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a3 + 48);
      v12 = (uint64_t *)(v11 + 16 * v9);
      v13 = v12[1];
      if ((*v12 != v4 || v13 != v3) && (sub_100076B94(*v12, v13) & 1) == 0)
      {
        v15 = ~v8;
        v16 = (v9 + 1) & v15;
        sub_100076B28();
        if ((v17 & 1) != 0)
        {
          do
          {
            v18 = (uint64_t *)(v11 + 16 * v16);
            v19 = v18[1];
            if (*v18 == v4 && v19 == v3)
              break;
            if ((sub_100076B94(*v18, v19) & 1) != 0)
              break;
            v16 = (v16 + 1) & v15;
            sub_100076B28();
          }
          while ((v21 & 1) != 0);
        }
      }
    }
  }
}

_QWORD *sub_100074370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];

  v1 = v0;
  v2 = sub_100032C48(&qword_100503BA8);
  inited = swift_initStackObject(v2, v16);
  *(_OWORD *)(inited + 16) = xmmword_1004077E0;
  *(_BYTE *)(inited + 32) = 0;
  if (sub_100055C38())
    v4 = 3;
  else
    v4 = 4;
  sub_10003E0A8();
  v6 = v5;
  *(_QWORD *)(v5 + 16) = 2;
  *(_BYTE *)(v5 + 33) = v4;
  if (os_variant_allows_internal_security_policies("com.apple.asd"))
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_100076B10();
      v6 = v14;
    }
    *(_QWORD *)(v6 + 16) = v7 + 1;
    *(_BYTE *)(v6 + v7 + 32) = 2;
  }
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v9 = sub_100061118(v8);

  if ((v9 & 1) != 0)
  {
    v9 = *(_QWORD *)(v6 + 16);
    if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_100076B10();
      v6 = v15;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    *(_BYTE *)(v6 + v9 + 32) = 1;
  }
  v10 = sub_100055924();
  swift_retain(v1);
  sub_100072DA4((uint64_t)v10, v1);
  sub_100039968();
  swift_retain(v1);
  swift_bridgeObjectRetain(v6);
  v12 = sub_100072EE4(v11, v1);
  sub_1000371A0(v6);
  sub_100076478(v9);
  return v12;
}

uint64_t sub_100074528()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 200))
    objc_msgSend(*(id *)(v0 + 192), "removeObserver:");

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 144));
  sub_100032F94((_QWORD *)(v0 + 152));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 200));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10007458C()
{
  uint64_t v0;

  sub_100074528();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PushCloudChannelsManager()
{
  return objc_opt_self(_TtC3asd24PushCloudChannelsManager);
}

id sub_1000745C4(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v2, "initWithChannelID:", v4);

  return v5;
}

void *sub_100074624()
{
  char *v0;
  size_t v1;
  char *v2;
  uint64_t v3;
  void *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  sub_100076B70();
  if (v3 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    if (&v2[v1] <= v0 || &v0[v1] <= v2)
      return memcpy(v2, v0, v1);
    sub_100040888();
    sub_100040AEC();
  }
  result = (void *)sub_1000408D4(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_1000746B4()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_100076B70();
  if (v3 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    v4 = v0 + 104 * v1;
    if (v2 + 104 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100076AE4(v2);
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100074750()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_100076B70();
  if (v3 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    v4 = v0 + 16 * v1;
    if (v2 + 16 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100076AE4(v2);
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000747E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100074A78(a1, a2, a3);
}

uint64_t sub_1000747F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if (a2 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    sub_100076B3C();
    v5 = v3 + 24 * v4;
    if (v2 + 24 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_100032C48(&qword_1005054A8);
      v8 = sub_100076AFC();
      return sub_100076AEC(v8);
    }
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100074894(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if (a2 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    sub_100076B3C();
    v5 = v3 + 8 * v4;
    if (v2 + 8 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_100032C48(&qword_100503C48);
      v8 = sub_100076AFC();
      return sub_100076AEC(v8);
    }
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100074934()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_100076B70();
  if (v3 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    v4 = v0 + 48 * v1;
    if (v2 + 48 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100076AE4(v2);
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000749CC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_100076B70();
  if (v3 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    v4 = v0 + (v1 << 6);
    if (v2 + (v1 << 6) > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100076AE4(v2);
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100074A60(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100074A78(a1, a2, a3);
}

uint64_t sub_100074A6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100074A78(a1, a2, a3);
}

uint64_t sub_100074A78(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  if (a2 < 0)
  {
    sub_100040888();
    sub_100040AFC();
  }
  else
  {
    sub_100076B3C();
    v7 = *(_QWORD *)(*(_QWORD *)(v6(0) - 8) + 72) * v3;
    v8 = a3 + v7;
    v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
    {
      v11 = sub_100076AFC();
      return sub_100076AEC(v11);
    }
    sub_100040888();
    sub_100040AEC();
  }
  result = sub_1000408D4(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  __break(1u);
  return result;
}

uint64_t sub_100074B20(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_100074B3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100074FC0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100074CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100032C48(&qword_100505488);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_100074B20(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100074FC0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100074CE8(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100075158();
      goto LABEL_22;
    }
    sub_100075308(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_100075158()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_100032C48(&qword_100505488);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

Swift::Int sub_100075308(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100032C48(&qword_100505488);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1000755B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_100075BB8(v15, v16);
    v18 = v17;
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v18);
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

unint64_t *sub_100075748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease(v17);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v40)
        goto LABEL_48;
      v13 = *(_QWORD *)(v41 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v40)
          goto LABEL_48;
        v13 = *(_QWORD *)(v41 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v40)
            goto LABEL_48;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v40)
              goto LABEL_48;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_10005495C(a1);
                return (unint64_t *)v2;
              }
              v13 = *(_QWORD *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v40)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v41 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_100075D44((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_10005495C(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_100075D44((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_10005495C(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100075BB8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100075158();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1000762C0(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t *sub_100075D44(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_46;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_46;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_14;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_46;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v38 = v9 + 6;
                while (v38 < v14)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }
                v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_100076034(v41, a2, v40, a3);
              }
              goto LABEL_14;
            }
          }
          v13 = v18;
        }
LABEL_14:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_15:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_32;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_22;
          }
        }
LABEL_32:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_22:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_100076034(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100032C48(&qword_100505488);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1000762C0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v24, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_OWORD *)(v17 + 16 * v2);
            v19 = (_OWORD *)(v17 + 16 * v6);
            v20 = v2 != v6 || v18 >= v19 + 1;
            v2 = v6;
            if (v20)
            {
              *v18 = *v19;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_100076478(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    sub_10003DF90(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v3 = v9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100074750();
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    *(_QWORD *)(v3 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

unint64_t sub_100076550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505468;
  if (!qword_100505468)
  {
    v1 = type metadata accessor for PushCloudChannelsManager();
    result = swift_getWitnessTable(&unk_1004091A8, v1);
    atomic_store(result, (unint64_t *)&qword_100505468);
  }
  return result;
}

void sub_10007658C(uint64_t a1)
{
  _QWORD *v1;

  sub_100073FDC(a1, v1);
}

void sub_100076594(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    sub_10003E150(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v3 = v9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = (*(_QWORD *)(v3 + 24) >> 1) - v10;
  v12 = type metadata accessor for LocalFeatureToggle(0);
  if (v11 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  sub_100074A78(a1 + v14, v2, v3 + v14 + *(_QWORD *)(v13 + 72) * v10);
  if (!v2)
  {
LABEL_14:
    sub_100039950();
    *v1 = v3;
    return;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFADD__(v15, v2);
  v17 = v15 + v2;
  if (!v16)
  {
    *(_QWORD *)(v3 + 16) = v17;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_10007668C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa;
  id v8;

  sub_1000767C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100039998();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, *a5, isa, v8);

}

void sub_100076718(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "getRegisteredChannelsForTopic:withCompletion:", v6, a3);

}

uint64_t sub_100076764(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "channelID");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_1000767C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505480;
  if (!qword_100505480)
  {
    v1 = objc_opt_self(PKPublicChannel);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100505480);
  }
  return result;
}

uint64_t sub_100076800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100032C48(&qword_100505490);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100076864()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_100076B3C();
  sub_100032C48(&qword_100505490);
  return sub_100074130(v1, v0);
}

uint64_t sub_1000768B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000768C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000768C8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000768EC(uint64_t a1)
{
  uint64_t v1;

  return sub_100073708(a1, v1);
}

uint64_t sub_1000768F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100076920()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10050549C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10007698C;
  return sub_1000737DC();
}

uint64_t sub_10007698C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return sub_10004ECB8(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t storeEnumTagSinglePayload for Channel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100076A18 + 4 * byte_10040913F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100076A4C + 4 * byte_10040913A[v4]))();
}

uint64_t sub_100076A4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100076A54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100076A5CLL);
  return result;
}

uint64_t sub_100076A68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100076A70);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100076A74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100076A7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Channel()
{
  return &type metadata for Channel;
}

unint64_t sub_100076A9C()
{
  unint64_t result;

  result = qword_1005054B0;
  if (!qword_1005054B0)
  {
    result = swift_getWitnessTable(&unk_100409218, &type metadata for Channel);
    atomic_store(result, (unint64_t *)&qword_1005054B0);
  }
  return result;
}

uint64_t sub_100076AE4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100076AEC(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100076AFC()
{
  uint64_t v0;

  return v0;
}

void sub_100076B10()
{
  sub_10003E0A8();
}

uint64_t sub_100076B48()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t sub_100076B5C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100076B7C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_100076B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;

  sub_10007668C(a1, v7, v5, v6, a5);
}

uint64_t sub_100076B94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100076BA4()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_100076BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DF90(a1, a2, 1, v2);
}

uint64_t sub_100076BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v22;
  Swift::String v23;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    sub_10007A0F8();
    swift_bridgeObjectRelease(0xE000000000000000);
    v23._countAndFlagsBits = Array.description.getter(v1, &type metadata for String);
    sub_10007A0B4(v23);
    v2 = sub_100040C38();
    sub_10007A084(v2, v3, v4, v5, v6, v7, v8, v9, 0x6F6C666B726F7720, (void *)0xEF203A7364695F77);
    sub_100040C38();
  }
  v10._object = *(void **)(v0 + 16);
  if (v10._object)
  {
    v10._countAndFlagsBits = *(_QWORD *)(v0 + 8);
    sub_10007A0B4(v10);
    sub_10007A084(v11, v12, v13, v14, v15, v16, v17, v18, 540697705, (void *)0xE400000000000000);
    sub_100040C38();
  }
  v22 = sub_100076CB0(*(_BYTE *)v0);
  swift_bridgeObjectRetain(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  sub_100039950();
  swift_bridgeObjectRelease(0xE000000000000000);
  return v22;
}

uint64_t sub_100076CB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100076CF0 + 4 * byte_100409240[a1]))(0x6464416863746566, 0xEF67614273736572);
}

uint64_t sub_100076CF0()
{
  return 0x6361437261656C63;
}

uint64_t sub_100076D10()
{
  return 0x6E6F436863746566;
}

uint64_t sub_100076D30()
{
  return 0x6F72506863746566;
}

uint64_t sub_100076D54()
{
  return 0x7265536863746566;
}

uint64_t sub_100076D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  char *v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t result;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  char v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  char v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  uint64_t v422;
  Swift::String v423;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  v5 = sub_100072AA0();
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v6 = a2 + *(int *)(v5 + 48);
  v7 = sub_10004F358();
  v8 = sub_100037020(v6, 1, 1, v7);
  v13 = (_OWORD *)(a2 + *(int *)(v5 + 52));
  *v13 = xmmword_100408640;
  if (!*(_QWORD *)(a1 + 16))
  {
    sub_100048EC0();
    v44 = sub_100077458();
    sub_100059ED4((uint64_t)&unk_1004D1918, v44);
    v46 = 3;
LABEL_31:
    *v45 = v46;
    swift_willThrow();
    swift_bridgeObjectRelease(*(_QWORD *)(a2 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(a2 + 72));
    swift_bridgeObjectRelease(*(_QWORD *)(a2 + 80));
    sub_1000774C4(v6, &qword_100503A50);
    return sub_10007A0E4();
  }
  strcpy((char *)&v420, "command");
  *((_QWORD *)&v420 + 1) = 0xE700000000000000;
  v14 = sub_100079F50(v8, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v9, v10, v11, v12);
  sub_100079F40((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v299, v317, v328, v338, v349, v359, v369, v375, v384, v393, v402,
    v411,
    v420);
  v29 = sub_100079F5C(v22, v23, v24, v25, v26, v27, v28);
  if (v421)
  {
    v37 = sub_100079F30(v29, v30, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v33, v34, v35, v36, v300);
    v42 = v360;
    if (!(_DWORD)v37)
      v42 = 0;
    v422 = v42;
    if ((_DWORD)v37)
      v43 = (void *)v370;
    else
      v43 = 0;
  }
  else
  {
    sub_100079F64(v29, &qword_100503A58, v31, v32, v33, v34, v35, v36, v300, v318, v329, v339, v350, v360);
    v422 = 0;
    v43 = 0;
  }
  *(_QWORD *)&v420 = 0x6163696669746F6ELL;
  *((_QWORD *)&v420 + 1) = 0xEF64695F6E6F6974;
  v47 = sub_100079F50(v37, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v38, v39, v40, v41);
  sub_100079F40((uint64_t)v47, v48, v49, v50, v51, v52, v53, v54, v301, v318, v329, v339, v350, v360, v370, v376, v385, v394, v403,
    v412,
    v420);
  v62 = sub_100079F5C(v55, v56, v57, v58, v59, v60, v61);
  if (v421)
  {
    v70 = sub_100079F30(v62, v63, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v66, v67, v68, v69, v302);
    v75 = v361;
    if (!(_DWORD)v70)
      v75 = 0;
    v341 = v75;
    if ((_DWORD)v70)
      v76 = v371;
    else
      v76 = 0;
  }
  else
  {
    sub_100079F64(v62, &qword_100503A58, v64, v65, v66, v67, v68, v69, v302, v319, v330, v340, v351, v361);
    v341 = 0;
    v76 = 0;
  }
  *(_QWORD *)&v420 = 0xD000000000000014;
  *((_QWORD *)&v420 + 1) = 0x80000001003E4C90;
  v77 = sub_100079F50(v70, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v71, v72, v73, v74);
  sub_100079F40((uint64_t)v77, v78, v79, v80, v81, v82, v83, v84, v303, v319, a2 + 72, v341, v2, v361, v371, v377, v386, v395, v404,
    v413,
    v420);
  v92 = sub_100079F5C(v85, v86, v87, v88, v89, v90, v91);
  if (v421)
  {
    v100 = sub_100079F30(v92, v93, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int, v96, v97, v98, v99, v304);
    if ((_DWORD)v100)
      v103 = v362;
    else
      v103 = 0;
    v104 = v100 ^ 1;
  }
  else
  {
    sub_100079F64(v92, &qword_100503A58, v94, v95, v96, v97, v98, v99, v304, v320, v331, v342, v352, v362);
    v103 = 0;
    v104 = 1;
  }
  v105 = sub_10007A050(v100, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v101, v102);
  sub_100079F40((uint64_t)v105, v106, v107, v108, v109, v110, v111, v112, v305, v320, v331, v342, v352, 0x6E6F6973726576, 0xE700000000000000, v378, v387, v396, v405,
    v414,
    v420);
  v120 = sub_100079F5C(v113, v114, v115, v116, v117, v118, v119);
  if (!v421)
  {
    sub_100079F64(v120, &qword_100503A58, v122, v123, v124, v125, v126, v127, v306, v321, v332, v343, v353, v363);
    if (v43)
      goto LABEL_29;
LABEL_30:
    sub_100048EC0();
    sub_10006E934();
    v131 = sub_100077458();
    sub_100059ED4((uint64_t)&unk_1004D1918, v131);
    v46 = 2;
    goto LABEL_31;
  }
  v128 = sub_100079F30(v120, v121, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int, v124, v125, v126, v127, v306);
  if (!v43)
    goto LABEL_30;
  if ((v128 & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRelease(v43);
    goto LABEL_30;
  }
  v423._countAndFlagsBits = v422;
  v423._object = v43;
  v129 = sub_100077B34(v423);
  if (v129 == 5)
  {
    sub_100048EC0();
    sub_10006E934();
    v130 = sub_100077458();
    sub_100059ED4((uint64_t)&unk_1004D1918, v130);
    v46 = 0;
    goto LABEL_31;
  }
  if (v363 != 1)
  {
    sub_100048EC0();
    sub_10006E934();
    v169 = sub_100077458();
    sub_100059ED4((uint64_t)&unk_1004D1918, v169);
    v46 = 1;
    goto LABEL_31;
  }
  *(_BYTE *)a2 = v129;
  v133 = swift_bridgeObjectRelease(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v343;
  *(_QWORD *)(a2 + 16) = v76;
  if (v103 < 0)
    v136 = 1;
  else
    v136 = v104;
  if (v136)
    v137 = 0;
  else
    v137 = v103;
  *(_QWORD *)(a2 + 24) = v137;
  *(_BYTE *)(a2 + 32) = v136;
  v138 = sub_10007A050(v133, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v134, v135);
  sub_100079F40((uint64_t)v138, v139, v140, v141, v142, v143, v144, v145, v307, (uint64_t)v13, v332, v343, v353, 0xD000000000000013, 0x80000001003E4CB0, v379, v388, v397, v406,
    v415,
    v420);
  v153 = sub_100079F5C(v146, v147, v148, v149, v150, v151, v152);
  if (!v421)
  {
    sub_100079F64(v153, &qword_100503A58, v155, v156, v157, v158, v159, v160, v308, v322, v333, v344, v354, v364);
    goto LABEL_45;
  }
  v161 = sub_100079F30(v153, v154, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int, v157, v158, v159, v160, v308);
  if ((v161 & 1) == 0)
  {
LABEL_45:
    v167 = (_QWORD *)v333;
    goto LABEL_46;
  }
  v166 = v364;
  v167 = (_QWORD *)v333;
  if (v364 > 0)
  {
    v168 = 0;
    goto LABEL_47;
  }
LABEL_46:
  v166 = 0;
  v168 = 1;
LABEL_47:
  *(_QWORD *)(a2 + 56) = v166;
  *(_BYTE *)(a2 + 64) = v168;
  *(_QWORD *)&v420 = 0x7364697575;
  *((_QWORD *)&v420 + 1) = 0xE500000000000000;
  v170 = sub_100079F50(v161, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v162, v163, v164, v165);
  sub_100079F40((uint64_t)v170, v171, v172, v173, v174, v175, v176, v177, v309, v322, v333, v344, v354, v364, v372, v380, v389, v398, v407,
    v416,
    v420);
  v185 = sub_100079F5C(v178, v179, v180, v181, v182, v183, v184);
  if (v421)
  {
    v192 = sub_100032C48(&qword_100503E60);
    if (sub_100079F30(v192, v193, (uint64_t)&type metadata for Any + 8, v192, v194, v195, v196, v197, v310))v198 = v365;
    else
      v198 = 0;
  }
  else
  {
    sub_100079F64(v185, &qword_100503A58, v186, v187, v188, v189, v190, v191, v310, v323, v334, v345, v355, v365);
    v198 = 0;
  }
  v199 = swift_bridgeObjectRelease(*(_QWORD *)(a2 + 80));
  *(_QWORD *)(a2 + 80) = v198;
  *(_QWORD *)&v420 = 0xD000000000000016;
  *((_QWORD *)&v420 + 1) = 0x80000001003E4CD0;
  v204 = sub_100079F50(v199, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v200, v201, v202, v203);
  sub_100079F40((uint64_t)v204, v205, v206, v207, v208, v209, v210, v211, v311, v323, v334, v345, v355, v365, v373, v381, v390, v399, v408,
    v417,
    v420);
  v219 = sub_100079F5C(v212, v213, v214, v215, v216, v217, v218);
  if (v421)
  {
    v227 = sub_100079F30(v219, v220, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Double, v223, v224, v225, v226, v312);
    v232 = v366;
    if (!(_DWORD)v227)
      v232 = 0;
    v233 = v227 ^ 1;
  }
  else
  {
    sub_100079F64(v219, &qword_100503A58, v221, v222, v223, v224, v225, v226, v312, v324, v335, v346, v356, v366);
    v232 = 0;
    v233 = 1;
  }
  *(_QWORD *)(a2 + 40) = v232;
  *(_BYTE *)(a2 + 48) = v233;
  *(_QWORD *)(a2 + 88) = 1;
  strcpy((char *)&v420, "workflow_ids");
  BYTE13(v420) = 0;
  HIWORD(v420) = -5120;
  v234 = sub_100079F50(v227, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v228, v229, v230, v231);
  sub_100079F40((uint64_t)v234, v235, v236, v237, v238, v239, v240, v241, v313, v324, v335, v346, v356, v366, v374, v382, v391, v400, v409,
    v418,
    v420);
  v249 = sub_100079F5C(v242, v243, v244, v245, v246, v247, v248);
  if (v421)
  {
    v256 = sub_100032C48(&qword_100503E60);
    if (sub_100079F30(v256, v257, (uint64_t)&type metadata for Any + 8, v256, v258, v259, v260, v261, v314))v262 = v367;
    else
      v262 = 0;
  }
  else
  {
    sub_100079F64(v249, &qword_100503A58, v250, v251, v252, v253, v254, v255, v314, v325, v336, v347, v357, v367);
    v262 = 0;
  }
  v263 = swift_bridgeObjectRelease(*v167);
  *v167 = v262;
  v266 = sub_10007A050(v263, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v264, v265);
  sub_100079F40((uint64_t)v266, v267, v268, v269, v270, v271, v272, v273, v315, v325, v336, v347, v357, 0x737265746C6966, 0xE700000000000000, v383, v392, v401, v410,
    v419,
    v420);
  v274 = sub_100048EC0();
  v281 = sub_100079F5C(v274, v275, v276, v277, v278, v279, v280);
  if (!v421)
  {
    sub_100079F64(v281, &qword_100503A58, v282, v283, v284, v285, v286, v287, v316, v326, v337, v348, v358, v368);
    v294 = v327;
    goto LABEL_66;
  }
  v288 = sub_100032C48(&qword_1005054C0);
  v294 = (_QWORD *)v326;
  if ((sub_100079F30(v288, v289, (uint64_t)&type metadata for Any + 8, v288, v290, v291, v292, v293, v316) & 1) == 0)
  {
LABEL_66:
    v298 = 0;
    v296 = 1;
    goto LABEL_67;
  }
  sub_10008F900(v368);
  v296 = sub_1000774FC(v295);
  v298 = v297;
  swift_bridgeObjectRelease(v368);
LABEL_67:
  result = sub_10007A0E4();
  *v294 = v296;
  v294[1] = v298;
  return result;
}

uint64_t type metadata accessor for PushPayload(uint64_t a1)
{
  uint64_t result;

  result = qword_100505520;
  if (!qword_100505520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushPayload);
  return result;
}

unint64_t sub_100077458()
{
  unint64_t result;

  result = qword_1005054B8;
  if (!qword_1005054B8)
  {
    result = swift_getWitnessTable(&unk_100409458, &unk_1004D1918);
    atomic_store(result, (unint64_t *)&qword_1005054B8);
  }
  return result;
}

uint64_t sub_100077494(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void sub_1000774C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100032C48(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100028D0C();
}

uint64_t sub_1000774FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  sub_10007A0BC();
  *(_QWORD *)&v36 = v3;
  *((_QWORD *)&v36 + 1) = v2 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
  v4 = AnyHashable.init<A>(_:)(&v31, &v36);
  sub_10007A094((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v27, v29, v30, v31, v32, v33, v34, v35, v36);
  sub_100054814((uint64_t)&v31);
  if (v37)
  {
    v12 = sub_100032C48(&qword_100503E60);
    if (sub_10007A038(v12, v13))
      v14 = v29;
    else
      v14 = 0;
  }
  else
  {
    sub_1000774C4((uint64_t)&v36, &qword_100503A58);
    v14 = 0;
  }
  v29 = 0x7361657261;
  v30 = 0xE500000000000000;
  swift_bridgeObjectRetain(v14);
  v15 = AnyHashable.init<A>(_:)(&v31, &v29);
  sub_10007A094((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(a1);
  sub_100054814((uint64_t)&v31);
  if (v37)
  {
    v23 = sub_100032C48(&qword_100503E60);
    if (sub_10007A038(v23, v24))
      v25 = v29;
    else
      v25 = 0;
    if (!v14)
    {
      if (v25)
        return v14;
      return 1;
    }
  }
  else
  {
    sub_1000774C4((uint64_t)&v36, &qword_100503A58);
    if (!v14)
      return 1;
  }
  sub_100039950();
  return v14;
}

uint64_t sub_10007764C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;

  v3 = 0xE000000000000000;
  if (a1)
  {
    v4 = a1;
    sub_10007A0F8();
    swift_bridgeObjectRelease(0xE000000000000000);
    sub_10007A0BC();
    v13 = v6;
    v14 = v5 | 0xEE005B203A200000;
    v15._countAndFlagsBits = Array.description.getter(v4, &type metadata for String);
    sub_10007A0B4(v15);
    sub_100040C38();
    sub_10007A0A4();
    a1 = v13;
    v3 = v14;
  }
  v7 = v3;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease(v3);
  if (a2)
  {
    v16._countAndFlagsBits = Array.description.getter(a2, &type metadata for String);
    sub_10007A0B4(v16);
    sub_100039950();
    sub_10007A0A4();
    v8 = 0x203A736165726120;
    v9 = 0xE90000000000005BLL;
  }
  else
  {
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  sub_100039950();
  v11._countAndFlagsBits = 125;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0x20737265746C6946;
}

uint64_t sub_100077774(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7079546E69676F6CLL && a2 == 0xEA00000000007365)
  {
    v5 = 0xEA00000000007365;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546E69676F6CLL, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7361657261 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7361657261, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int sub_100077864(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_1000778A8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7361657261;
  else
    return 0x7079546E69676F6CLL;
}

void sub_1000778E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = sub_100032C48(&qword_1005055D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10006EE50();
  v5 = a1[3];
  v6 = a1[4];
  sub_100032EFC(a1, v5);
  v7 = sub_100079A08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PushPayload.Filters.CodingKeys, &type metadata for PushPayload.Filters.CodingKeys, v7, v5, v6);
  sub_100032C48(&qword_100503E60);
  sub_1000798E8(&qword_100503E80, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_100079FA4();
  if (!v1)
    sub_100079FA4();
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100046BF8();
}

uint64_t sub_1000779E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_100032C48(&qword_1005055C0);
  __chkstk_darwin(v3);
  sub_100046E44();
  v4 = a1[3];
  v5 = a1[4];
  sub_100032EFC(a1, v4);
  v6 = sub_100079A08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PushPayload.Filters.CodingKeys, &type metadata for PushPayload.Filters.CodingKeys, v6, v4, v5);
  if (v1)
  {
    v8 = 0;
    sub_100032F94(a1);
    swift_bridgeObjectRelease(0);
  }
  else
  {
    sub_100032C48(&qword_100503E60);
    sub_1000798E8(&qword_100503E68, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100079F80();
    v8 = v9;
    sub_100079F80();
    sub_10007A0D4();
    sub_100032F94(a1);
  }
  return v8;
}

unint64_t sub_100077B34(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004CF4C0, v2);
  sub_100039950();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

Swift::Int sub_100077B78()
{
  char *v0;

  return sub_100077864(*v0);
}

uint64_t sub_100077B80()
{
  char *v0;

  return sub_1000778A8(*v0);
}

uint64_t sub_100077B88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100077774(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100077BAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100079A08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077BD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100079A08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077BFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000779E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_100077C24(_QWORD *a1)
{
  sub_1000778E0(a1);
}

uint64_t sub_100077C3C()
{
  uint64_t *v0;

  return sub_10007764C(*v0, v0[1]);
}

void sub_100077C44()
{
  sub_100039C28();
}

void sub_100077C50()
{
  unsigned __int8 *v0;

  sub_1000582D0(*v0);
}

void sub_100077C58()
{
  sub_100058468();
}

void sub_100077C60(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10005853C(a1, *v1);
}

unint64_t sub_100077C68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100077B34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100077C94@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100076CB0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100077CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100079EEC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100077D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100079EEC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100077D64()
{
  unsigned __int8 *v0;

  sub_100078F60(*v0);
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.CCVerificationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100077E18(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100077E64 + 4 * byte_10040924A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100077E98 + 4 * byte_100409245[v4]))();
}

uint64_t sub_100077E98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100077EA8);
  return result;
}

uint64_t sub_100077EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100077EBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100077EC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077EC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PushPayload.PushPayloadErrors()
{
  sub_100035800();
}

_QWORD *sub_100077EE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_QWORD *)(a1 + 56) = a2[7];
    v8 = a2[9];
    v9 = a2[10];
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    v11 = *(int *)(a3 + 48);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    *(_QWORD *)(a1 + 72) = v8;
    v14 = type metadata accessor for Date(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (sub_1000352C8((uint64_t)v13, 1, v14))
    {
      v15 = sub_100032C48(&qword_100503A50);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      sub_100037020((uint64_t)v12, 0, 1, v14);
    }
    v17 = *(int *)(a3 + 52);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = *v19;
    if (*v19 == 1)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = v19[1];
      *(_QWORD *)v18 = v20;
      *((_QWORD *)v18 + 1) = v21;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
    }
  }
  return v4;
}

uint64_t sub_100078070(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (uint64_t)a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for Date(0);
  if (!sub_1000352C8(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 52));
  result = *v6;
  if (*v6 != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(v6[1]);
  }
  return result;
}

uint64_t sub_100078118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(int *)(a3 + 48);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 72) = v7;
  v13 = type metadata accessor for Date(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (sub_1000352C8((uint64_t)v12, 1, v13))
  {
    v14 = sub_100032C48(&qword_100503A50);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    sub_100037020((uint64_t)v11, 0, 1, v13);
  }
  v15 = *(int *)(a3 + 52);
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  if (*v17 == 1)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = v17[1];
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_10007827C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v15 = *(int *)(a3 + 48);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = type metadata accessor for Date(0);
  v19 = sub_1000352C8((uint64_t)v16, 1, v18);
  v20 = sub_1000352C8((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      sub_100037020((uint64_t)v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v16, v18);
LABEL_6:
    v22 = sub_100032C48(&qword_100503A50);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v21 + 24))(v16, v17, v18);
LABEL_7:
  v23 = *(int *)(a3 + 52);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a1 + v23);
  v27 = *v25;
  if (v26 != 1)
  {
    if (v27 != 1)
    {
      *v24 = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v26);
      v29 = v24[1];
      v30 = v25[1];
      v24[1] = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v29);
      return a1;
    }
    sub_100078494((_QWORD *)(a1 + v23));
    goto LABEL_12;
  }
  if (v27 == 1)
  {
LABEL_12:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    return a1;
  }
  *v24 = v27;
  v28 = v25[1];
  v24[1] = v28;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  return a1;
}

_QWORD *sub_100078494(_QWORD *a1)
{
  sub_100040E9C(a1);
  return a1;
}

uint64_t sub_1000784C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = *(int *)(a3 + 48);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 72) = v6;
  v10 = type metadata accessor for Date(0);
  if (sub_1000352C8((uint64_t)v9, 1, v10))
  {
    v11 = sub_100032C48(&qword_100503A50);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    sub_100037020((uint64_t)v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 52)) = *(_OWORD *)(a2 + *(int *)(a3 + 52));
  return a1;
}

uint64_t sub_1000785D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(int *)(a3 + 48);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = sub_1000352C8((uint64_t)v11, 1, v13);
  v15 = sub_1000352C8((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      sub_100037020((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = sub_100032C48(&qword_100503A50);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  v18 = *(int *)(a3 + 52);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = *(_QWORD *)(a1 + v18);
  if (v21 != 1)
  {
    if (*v20 != 1)
    {
      *v19 = *v20;
      swift_bridgeObjectRelease(v21);
      v22 = v19[1];
      v19[1] = v20[1];
      swift_bridgeObjectRelease(v22);
      return a1;
    }
    sub_100078494(v19);
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t sub_100078794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000787A0);
}

uint64_t sub_1000787A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100032C48(&qword_100503A50);
    return sub_1000352C8(a1 + *(int *)(a3 + 48), a2, v9);
  }
}

uint64_t sub_100078824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078830);
}

uint64_t sub_100078830(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = sub_100032C48(&qword_100503A50);
    return sub_100037020(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

void sub_1000788A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1004092A8;
  v4[1] = &unk_1004092C0;
  v4[2] = &unk_1004092D8;
  v4[3] = &unk_1004092D8;
  v4[4] = &unk_1004092D8;
  v4[5] = &unk_1004092F0;
  v4[6] = &unk_1004092F0;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10007894C(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    v4[9] = &unk_100409308;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
  }
}

void sub_10007894C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100505530)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100505530);
  }
}

void sub_1000789A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100028D0C();
}

uint64_t *sub_1000789D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_100078A30(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100078A84(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for PushPayload.Filters()
{
  sub_100035800();
}

unint64_t sub_100078AE4()
{
  unint64_t result;

  result = qword_100505580;
  if (!qword_100505580)
  {
    result = swift_getWitnessTable(&unk_1004093E0, &unk_1004D1918);
    atomic_store(result, (unint64_t *)&qword_100505580);
  }
  return result;
}

uint64_t sub_100078B20(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  unint64_t v19;
  char v21;

  if (a1 == 0x646E616D6D6F63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E616D6D6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6163696669746F6ELL && a2 == 0xEE0064496E6F6974)
  {
    v8 = 0xEE0064496E6F6974;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6163696669746F6ELL, 0xEE0064496E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001003E4CF0)
  {
    v9 = 0x80000001003E4CF0;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001003E4CF0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001003E4D10)
  {
    v10 = 0x80000001003E4D10;
LABEL_28:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001003E4D10, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x80000001003E4D30;
    if (a2 == 0x80000001003E4D30)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003E4D30, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0x776F6C666B726F77 && a2 == 0xEB00000000736449)
  {
    v13 = 0xEB00000000736449;
    goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C666B726F77, 0xEB00000000736449, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v13);
    return 5;
  }
  if (a1 == 0x7364697575 && a2 == 0xE500000000000000)
  {
    v15 = 0xE500000000000000;
    goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7364697575, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v17 = 0xE700000000000000;
    goto LABEL_57;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v17);
    return 7;
  }
  if (a1 == 0x656C756465686373 && a2 == 0xED0000656D695464)
  {
    v19 = 0xED0000656D695464;
    goto LABEL_65;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C756465686373, 0xED0000656D695464, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v19);
    return 8;
  }
  if (a1 == 0x737265746C6966 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 9;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737265746C6966, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_100078F58()
{
  return 10;
}

void sub_100078F60(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_100058ED8();
}

uint64_t sub_100078F9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100078FD0 + 4 * byte_10040924F[a1]))(0x646E616D6D6F63, 0xE700000000000000);
}

uint64_t sub_100078FD0()
{
  return 0x6163696669746F6ELL;
}

unint64_t sub_100078FF4()
{
  return 0xD000000000000012;
}

unint64_t sub_10007902C()
{
  return 0xD000000000000011;
}

uint64_t sub_100079048()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_100079068()
{
  return 0x7364697575;
}

uint64_t sub_10007907C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100079090()
{
  return 0x656C756465686373;
}

uint64_t sub_1000790B4()
{
  return 0x737265746C6966;
}

uint64_t sub_1000790C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v26;
  char v27;

  v3 = v1;
  v5 = sub_100032C48(&qword_100505588);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10006EE50();
  v7 = a1[3];
  v8 = a1[4];
  sub_100032EFC(a1, v7);
  v9 = sub_1000797F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PushPayload.CodingKeys, &type metadata for PushPayload.CodingKeys, v9, v7, v8);
  LOBYTE(v26) = *(_BYTE *)v3;
  v27 = 0;
  v10 = sub_100079834();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &unk_1004D1B48, v10);
  if (!v2)
  {
    sub_10007A06C(1);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v11, v12, v13, v14);
    sub_10007A020(*(_QWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), 2);
    sub_10007A06C(3);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v17, v18);
    sub_10007A020(*(_QWORD *)(v3 + 56), *(unsigned __int8 *)(v3 + 64), 4);
    *(_QWORD *)&v26 = *(_QWORD *)(v3 + 72);
    v27 = 5;
    sub_100032C48(&qword_100503E60);
    sub_1000798E8(&qword_100503E80, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100079FC4();
    *(_QWORD *)&v26 = *(_QWORD *)(v3 + 80);
    v27 = 6;
    sub_100079FC4();
    v19 = *(_QWORD *)(v3 + 88);
    LOBYTE(v26) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v26, v5);
    v20 = sub_100072AA0();
    v21 = v3 + *(int *)(v20 + 48);
    LOBYTE(v26) = 8;
    v22 = sub_10004F358();
    sub_100079948(&qword_100504310, (uint64_t)&protocol conformance descriptor for Date);
    sub_100079FFC(v21, (uint64_t)&v26, v5, v22, v23);
    v26 = *(_OWORD *)(v3 + *(int *)(v20 + 52));
    v27 = 9;
    v24 = sub_100079870();
    sub_100079FFC((uint64_t)&v26, (uint64_t)&v27, v5, (uint64_t)&unk_1004D1990, v24);
  }
  return sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

void sub_100079338(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char v53;

  v3 = sub_100032C48(&qword_100503A50);
  __chkstk_darwin(v3);
  sub_100046E44();
  v46 = v5 - v4;
  v48 = sub_100032C48(&qword_1005055A8);
  __chkstk_darwin(v48);
  sub_100046E44();
  v6 = sub_100072AA0();
  __chkstk_darwin(v6);
  sub_100046E44();
  v9 = v8 - v7;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 32) = 1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *(_QWORD *)(v9 + 56) = 0;
  *(_BYTE *)(v9 + 64) = 1;
  *(_QWORD *)(v8 - v7 + 72) = 0;
  v10 = (_QWORD *)(v8 - v7 + 72);
  *(_QWORD *)(v9 + 80) = 0;
  v12 = v8 - v7 + *(int *)(v11 + 48);
  v13 = sub_10004F358();
  v51 = v12;
  sub_100037020(v12, 1, 1, v13);
  v49 = (uint64_t *)(v9 + *(int *)(v6 + 52));
  *(_OWORD *)v49 = xmmword_100408640;
  v15 = a1[3];
  v14 = a1[4];
  sub_100032EFC(a1, v15);
  v16 = sub_1000797F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PushPayload.CodingKeys, &type metadata for PushPayload.CodingKeys, v16, v15, v14);
  if (v50)
  {
    sub_100032F94(a1);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 72));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 80));
    sub_1000774C4(v51, &qword_100503A50);
    sub_100077494(*v49, v49[1]);
  }
  else
  {
    sub_1000798AC();
    sub_10007A0EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v48, v17, v19);
    *(_BYTE *)v9 = v52[0];
    v20 = sub_100079FE4(1);
    *(_QWORD *)(v9 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v20);
    *(_QWORD *)(v9 + 16) = v21;
    *(_QWORD *)(v9 + 24) = sub_10007A008(2);
    *(_BYTE *)(v9 + 32) = v22 & 1;
    v23 = sub_100079FE4(3);
    *(_QWORD *)(v9 + 40) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v23, v24);
    *(_BYTE *)(v9 + 48) = v25 & 1;
    *(_QWORD *)(v9 + 56) = sub_10007A008(4);
    *(_BYTE *)(v9 + 64) = v26 & 1;
    v27 = sub_100032C48(&qword_100503E60);
    sub_1000798E8(&qword_100503E68, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10007A0EC();
    v45 = v28;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, v29, v48, v27, v28);
    *v10 = v52[0];
    v53 = 6;
    sub_10007A0EC();
    sub_100079F6C(v27, v30, v31, v32, v45);
    *(_QWORD *)(v9 + 80) = v52[0];
    v33 = sub_100079FE4(7);
    *(_QWORD *)(v9 + 88) = KeyedDecodingContainer.decode(_:forKey:)(v33, v34);
    LOBYTE(v52[0]) = 8;
    sub_100079948(&qword_1005043E0, (uint64_t)&protocol conformance descriptor for Date);
    sub_100079F6C(v13, (uint64_t)v52, v36, v37, v35);
    sub_100079984(v46, v51);
    v53 = 9;
    sub_1000799CC();
    sub_10007A0EC();
    sub_100079F6C(v38, v39, v40, v41, v42);
    sub_10007A05C();
    v43 = v52[0];
    v44 = v52[1];
    sub_10007A0E4();
    *v49 = v43;
    v49[1] = v44;
    sub_1000353A4(v9, a2);
    sub_100032F94(a1);
    sub_1000353E8(v9);
  }
  sub_100046BF8();
}

void sub_1000796F8(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_100058ED8();
}

uint64_t sub_100079730()
{
  unsigned __int8 *v0;

  return sub_100078F9C(*v0);
}

uint64_t sub_100079738@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100078B20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007975C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100078F58();
  *a1 = result;
  return result;
}

uint64_t sub_100079780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000797F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000797A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000797F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000797D0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100079338(a1, a2);
}

uint64_t sub_1000797E4(_QWORD *a1)
{
  return sub_1000790C8(a1);
}

unint64_t sub_1000797F8()
{
  unint64_t result;

  result = qword_100505590;
  if (!qword_100505590)
  {
    result = swift_getWitnessTable(&unk_10040975C, &type metadata for PushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505590);
  }
  return result;
}

unint64_t sub_100079834()
{
  unint64_t result;

  result = qword_100505598;
  if (!qword_100505598)
  {
    result = swift_getWitnessTable(&unk_100409734, &unk_1004D1B48);
    atomic_store(result, (unint64_t *)&qword_100505598);
  }
  return result;
}

unint64_t sub_100079870()
{
  unint64_t result;

  result = qword_1005055A0;
  if (!qword_1005055A0)
  {
    result = swift_getWitnessTable(&unk_100409350, &unk_1004D1990);
    atomic_store(result, (unint64_t *)&qword_1005055A0);
  }
  return result;
}

unint64_t sub_1000798AC()
{
  unint64_t result;

  result = qword_1005055B0;
  if (!qword_1005055B0)
  {
    result = swift_getWitnessTable(&unk_10040970C, &unk_1004D1B48);
    atomic_store(result, (unint64_t *)&qword_1005055B0);
  }
  return result;
}

uint64_t sub_1000798E8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100035350(&qword_100503E60);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100079948(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for Date(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_100028D0C();
}

uint64_t sub_100079984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100503A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000799CC()
{
  unint64_t result;

  result = qword_1005055B8;
  if (!qword_1005055B8)
  {
    result = swift_getWitnessTable(&unk_100409378, &unk_1004D1990);
    atomic_store(result, (unint64_t *)&qword_1005055B8);
  }
  return result;
}

unint64_t sub_100079A08()
{
  unint64_t result;

  result = qword_1005055C8;
  if (!qword_1005055C8)
  {
    result = swift_getWitnessTable(&unk_1004096BC, &type metadata for PushPayload.Filters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005055C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PushPayload.Filters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100079A90 + 4 * byte_10040925E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100079AC4 + 4 * byte_100409259[v4]))();
}

uint64_t sub_100079AC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079ACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100079AD4);
  return result;
}

uint64_t sub_100079AE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100079AE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100079AEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079AF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushPayload.Filters.CodingKeys()
{
  return &type metadata for PushPayload.Filters.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PushPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PushPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100079BE4 + 4 * byte_100409268[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100079C18 + 4 * byte_100409263[v4]))();
}

uint64_t sub_100079C18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079C20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100079C28);
  return result;
}

uint64_t sub_100079C34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100079C3CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100079C40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079C48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushPayload.CodingKeys()
{
  return &type metadata for PushPayload.CodingKeys;
}

uint64_t sub_100079C64(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100079CB0 + 4 * byte_100409272[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100079CE4 + 4 * byte_10040926D[v4]))();
}

uint64_t sub_100079CE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100079CF4);
  return result;
}

uint64_t sub_100079D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100079D08);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100079D0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079D14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PushPayload.Command()
{
  sub_100035800();
}

unint64_t sub_100079D30()
{
  unint64_t result;

  result = qword_1005055D8;
  if (!qword_1005055D8)
  {
    result = swift_getWitnessTable(&unk_100409524, &unk_1004D1B48);
    atomic_store(result, (unint64_t *)&qword_1005055D8);
  }
  return result;
}

unint64_t sub_100079D70()
{
  unint64_t result;

  result = qword_1005055E0;
  if (!qword_1005055E0)
  {
    result = swift_getWitnessTable(&unk_1004095DC, &type metadata for PushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005055E0);
  }
  return result;
}

unint64_t sub_100079DB0()
{
  unint64_t result;

  result = qword_1005055E8;
  if (!qword_1005055E8)
  {
    result = swift_getWitnessTable(&unk_100409694, &type metadata for PushPayload.Filters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005055E8);
  }
  return result;
}

unint64_t sub_100079DF0()
{
  unint64_t result;

  result = qword_1005055F0;
  if (!qword_1005055F0)
  {
    result = swift_getWitnessTable(&unk_100409604, &type metadata for PushPayload.Filters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005055F0);
  }
  return result;
}

unint64_t sub_100079E30()
{
  unint64_t result;

  result = qword_1005055F8;
  if (!qword_1005055F8)
  {
    result = swift_getWitnessTable(&unk_10040962C, &type metadata for PushPayload.Filters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005055F8);
  }
  return result;
}

unint64_t sub_100079E70()
{
  unint64_t result;

  result = qword_100505600;
  if (!qword_100505600)
  {
    result = swift_getWitnessTable(&unk_10040954C, &type metadata for PushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505600);
  }
  return result;
}

unint64_t sub_100079EB0()
{
  unint64_t result;

  result = qword_100505608;
  if (!qword_100505608)
  {
    result = swift_getWitnessTable(&unk_100409574, &type metadata for PushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505608);
  }
  return result;
}

unint64_t sub_100079EEC()
{
  unint64_t result;

  result = qword_100505610;
  if (!qword_100505610)
  {
    result = swift_getWitnessTable(&unk_1004094AC, &unk_1004D1B48);
    atomic_store(result, (unint64_t *)&qword_100505610);
  }
  return result;
}

uint64_t sub_100079F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  return swift_dynamicCast((uint64_t *)va, va1, a3, a4, 6);
}

void sub_100079F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21)
{
  uint64_t v21;

  sub_100061D50((uint64_t)&a16, v21, &a21);
}

_QWORD *sub_100079F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  return AnyHashable.init<A>(_:)((uint64_t *)va, va1);
}

uint64_t sub_100079F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_100054814((uint64_t)va);
}

void sub_100079F64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1000774C4((uint64_t)va, a2);
}

uint64_t sub_100079F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, v5, a1, a5);
}

uint64_t sub_100079F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 81, v0, v1, v2);
}

uint64_t sub_100079FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 72, v3 - 81, v0, v1, v2);
}

uint64_t sub_100079FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 96, v3 - 65, v0, v1, v2);
}

uint64_t sub_100079FE4@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_100079FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10007A008@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_10007A020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_10007A038(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  return swift_dynamicCast((uint64_t *)va, va1, v2 + 8, a1, 6);
}

_QWORD *sub_10007A050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  return AnyHashable.init<A>(_:)((uint64_t *)va1, (uint64_t *)va);
}

uint64_t sub_10007A05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_10007A06C(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
}

void sub_10007A084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v10;

  v10._countAndFlagsBits = a9;
  v10._object = a10;
  String.append(_:)(v10);
}

void sub_10007A094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17)
{
  uint64_t v17;

  sub_100061D50((uint64_t)&a12, v17, &a17);
}

void sub_10007A0A4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 93;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_10007A0B4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10007A0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10007A0E4()
{
  uint64_t *v0;

  return sub_100077494(*v0, v0[1]);
}

void sub_10007A0F8()
{
  _StringGuts.grow(_:)(17);
}

uint64_t sub_10007A104(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 == 1685025392 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((sub_100076B94(1685025392, 0xE400000000000000) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x786F62646E6173 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
  }
  else
  {
    if ((sub_100076B94(0x786F62646E6173, 0xE700000000000000) & 1) == 0)
    {
      if (qword_1005034B0 != -1)
        swift_once(&qword_1005034B0, sub_10007A324);
      v9 = type metadata accessor for Logger(0);
      sub_1000352B0(v9, (uint64_t)qword_100505618);
      swift_bridgeObjectRetain(a2);
      v11 = Logger.logObject.getter(v10);
      v13 = static os_log_type_t.fault.getter(v11, v12);
      if (os_log_type_enabled(v11, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        v17 = v15;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain(a2);
        v16 = sub_100036778(a1, a2, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 4, v14 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v11, v13, "Unexpected push environment name: %s setting to prod", v14, 0xCu);
        swift_arrayDestroy(v15, 1);
        sub_100033080(v15);
        sub_100033080((uint64_t)v14);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      return 0;
    }
    v8 = a2;
  }
  swift_bridgeObjectRelease(v8);
  return 1;
}

uint64_t sub_10007A324()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100505618);
  sub_1000352B0(v0, (uint64_t)qword_100505618);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000011, 0x80000001003E4C50);
}

id sub_10007A3A4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PushCoordinator()), "init");
  static PushCoordinator.shared = (uint64_t)result;
  return result;
}

uint64_t *PushCoordinator.shared.unsafeMutableAddressor()
{
  if (qword_1005034B8 != -1)
    swift_once(&qword_1005034B8, sub_10007A3A4);
  return &static PushCoordinator.shared;
}

id static PushCoordinator.shared.getter()
{
  if (qword_1005034B8 != -1)
    swift_once(&qword_1005034B8, sub_10007A3A4);
  return (id)static PushCoordinator.shared;
}

uint64_t static PushCoordinator.configurePush()()
{
  uint64_t result;

  if (qword_1005034B8 != -1)
    return swift_once(&qword_1005034B8, sub_10007A3A4);
  return result;
}

id sub_10007A4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  objc_super v19;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v9 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_pushServiceManager] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_pdsManager] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_cloudChannelManager] = a3;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a3);
  v12 = objc_msgSendSuper2(&v19, "init");
  type metadata accessor for TaskPriority(0);
  sub_10007C6E0();
  v13 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D1D90, 40);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a2;
  swift_retain(a2);
  v14 = v12;
  v15 = sub_1000494E4((uint64_t)v11, (uint64_t)&unk_1005056A8, (uint64_t)v13);
  swift_release(v15);
  sub_10007C6E0();
  v16 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D1DB8, 40);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a3;
  v17 = sub_1000494E4((uint64_t)v11, (uint64_t)&unk_1005056B8, (uint64_t)v16);
  swift_release(v17);

  swift_release(a1);
  swift_release(a2);
  return v14;
}

uint64_t sub_10007A624()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10050614C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10007C6A8;
  return sub_100097ACC();
}

uint64_t sub_10007A66C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100505374);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10007C6A8;
  return sub_100073824();
}

id sub_10007A6B4()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  id v31;
  objc_class *ObjectType;
  id v33;
  _BYTE v34[24];
  __int128 v35[2];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v33 = v0;
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = sub_1000612F0((uint64_t)v2);
  v5 = v4;

  v6 = sub_10007A104(v3, v5);
  type metadata accessor for ODIAccountManager(0);
  static ODIAccountManager.shared.getter(v35);
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  swift_beginAccess(&static ASDConfigurationManager.shared, v34, 0, 0);
  v7 = sub_10007BF44(v35, (uint64_t)(id)static ASDConfigurationManager.shared);
  v8 = objc_msgSend(objc_allocWithZone((Class)Vr3QrKl7Yn9l4CTz), "init");
  v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100503498 != -1)
    swift_once(&qword_100503498, sub_100062060);
  v10 = (void *)static RavioliManagerObjC.shared;
  v11 = (void *)static ASDConfigurationManager.shared;
  v12 = type metadata accessor for ASAnalyticsManager();
  v13 = (uint64_t *)sub_100040900(v12, 16);
  v14 = v10;
  v15 = v11;
  v31 = v8;
  swift_retain(v7);
  v16 = sub_10007C014((uint64_t)v14, v31, v7, (uint64_t)v15, v13);
  v17 = sub_10007C1E8(0xD000000000000012, 0x80000001003E4DE0, v16, v6);

  v18 = (void *)static ASDConfigurationManager.shared;
  v19 = (uint64_t *)sub_100040900(v12, 16);
  v20 = v18;
  v21 = v9;
  v22 = sub_10007C2D0(0xD000000000000012, 0x80000001003E4DE0, v6, v20, v21, v19);
  v23 = (void *)v17[3];
  v24 = (uint64_t *)sub_100040900(v12, 16);
  swift_retain(v7);
  v25 = v21;
  v26 = sub_10007C3C4(v23, 0xD000000000000012, 0x80000001003E4DE0, v7, v6, v25, v24);
  v27 = objc_allocWithZone(ObjectType);
  v28 = sub_10007A4A0((uint64_t)v17, v22, v26);

  swift_release(v7);
  v29 = swift_getObjectType(v33);
  swift_deallocPartialClassInstance(v33, v29, 32, 7);
  return v28;
}

Swift::Void __swiftcall PushCoordinator.registerICloud()()
{
  sub_10007AB08((uint64_t)&unk_1004D1C60, (uint64_t)&unk_1004D1C88, (uint64_t)&unk_100505638, (uint64_t)&unk_1005040F0);
}

uint64_t sub_10007A9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10007AA0C, 0, 0);
}

uint64_t sub_10007AA0C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100506154);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10007C6B0;
  return sub_100097D44();
}

uint64_t sub_10007AA64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_100505634);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10007C6B4(v1);
  return sub_10007A9F4(v2, v3, v4, v5);
}

Swift::Void __swiftcall PushCoordinator.unregister()()
{
  sub_10007AB08((uint64_t)&unk_1004D1CB0, (uint64_t)&unk_1004D1CD8, (uint64_t)&unk_100505648, (uint64_t)&unk_100505650);
}

uint64_t sub_10007AB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];

  v9 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v11, 1, 1, v12);
  v13 = (_QWORD *)sub_100040900(a1, 40);
  v13[2] = 0;
  v14 = v13 + 2;
  v13[3] = 0;
  v13[4] = v4;
  v15 = sub_1000352C8((uint64_t)v11, 1, v12);
  v16 = v4;
  if (v15 == 1)
  {
    sub_1000570E4((uint64_t)v11);
    v17 = 0;
    v18 = 0;
    v19 = 7168;
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v19 = v20 | 0x1C00;
    v21 = *v14;
    if (*v14)
    {
      v22 = v13[3];
      ObjectType = swift_getObjectType(*v14);
      swift_unknownObjectRetain(v21);
      v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v22);
      v18 = v24;
      swift_unknownObjectRelease(v21);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
  }
  v25 = sub_100040900(a2, 32);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = v13;
  if (v18 | v17)
  {
    v29[0] = 0;
    v29[1] = 0;
    v26 = v29;
    v29[2] = v17;
    v29[3] = v18;
  }
  else
  {
    v26 = 0;
  }
  v27 = swift_task_create(v19, v26, (char *)&type metadata for () + 8, a4, v25);
  return swift_release(v27);
}

uint64_t sub_10007ACC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10007ACDC, 0, 0);
}

uint64_t sub_10007ACDC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100506164);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10007AD30;
  return sub_100098B80();
}

uint64_t sub_10007AD30()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return sub_10004ECB8(*(uint64_t (**)(void))(v2 + 8));
}

id sub_10007ADEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  id v11;

  if (!a2)
  {
    v9 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  v11 = objc_msgSend(v5, "initWithEnvironmentName:namedDelegatePort:queue:", v9, v10, a5);

  return v11;
}

id sub_10007AE94(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v10;

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = 0;
  v5 = objc_msgSend(v2, "initWithClientID:error:", v4, &v10);

  v6 = v10;
  if (v5)
  {
    v7 = v10;
  }
  else
  {
    v8 = v10;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_10007AF60()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007AF8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_100505644);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10007C6B4(v1);
  return sub_10007ACC4(v2, v3, v4, v5);
}

uint64_t sub_10007AFD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007AFFC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc(dword_1005040EC);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10004EFF8(v1);
  return sub_10004EF7C(v2, v3, v4, v5);
}

uint64_t type metadata accessor for PushCoordinator()
{
  return objc_opt_self(_TtC3asd15PushCoordinator);
}

uint64_t storeEnumTagSinglePayload for PushEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007B0B0 + 4 * byte_1004097B1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007B0E4 + 4 * byte_1004097AC[v4]))();
}

uint64_t sub_10007B0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007B0F4);
  return result;
}

uint64_t sub_10007B100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007B108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10007B10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushEnvironment()
{
  return &type metadata for PushEnvironment;
}

unint64_t sub_10007B134()
{
  unint64_t result;

  result = qword_100505698;
  if (!qword_100505698)
  {
    result = swift_getWitnessTable(&unk_100409818, &type metadata for PushEnvironment);
    atomic_store(result, &qword_100505698);
  }
  return result;
}

void sub_10007B170(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "_setOpportunisticTopics:", isa);

}

id sub_10007B1C8(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  objc_super v7;
  _QWORD v8[5];

  v8[3] = type metadata accessor for PushDispatchManager(0);
  v8[4] = &off_1004D1688;
  v8[0] = a1;
  v4 = a2;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000012, 0x80000001003E4E40);
  sub_100032EB8((uint64_t)v8, (uint64_t)v4 + OBJC_IVAR____TtCC3asd18PushServiceManager12PushDelegate_pushDispatchManager);

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for PushServiceManager.PushDelegate(0);
  v5 = objc_msgSendSuper2(&v7, "init");
  sub_100032F94(v8);
  return v5;
}

id sub_10007B2A0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  _QWORD v10[3];
  uint64_t v11;
  _UNKNOWN **v12;

  v11 = type metadata accessor for PushDispatchManager(0);
  v12 = &off_1004D1688;
  v10[0] = a1;
  v2 = objc_allocWithZone((Class)type metadata accessor for PushServiceManager.PushDelegate(0));
  v3 = sub_1000574E4((uint64_t)v10, v11);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v6 + 16))(v5);
  v7 = sub_10007B1C8(*v5, v2);
  sub_100032F94(v10);
  return v7;
}

_QWORD *sub_10007B360(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  _QWORD *result;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD v45[5];
  _QWORD v46[5];

  v44 = a4;
  v42 = a1;
  v43 = a2;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = type metadata accessor for PushDispatchManager(0);
  v46[4] = &off_1004D1688;
  v46[0] = a3;
  v17 = sub_100057148();
  static DispatchQoS.unspecified.getter(v17);
  v45[0] = _swiftEmptyArrayStorage;
  v18 = sub_100057184();
  v19 = sub_100032C48(&qword_100504800);
  v20 = sub_1000571C4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v45, v19, v20, v11, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  v21 = v42;
  a5[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001003E4E00, v16, v13, v10, 0);
  a5[6] = 0xD000000000000019;
  a5[7] = 0x80000001003E4E20;
  v22 = v43;
  a5[4] = v21;
  a5[5] = v22;
  sub_100032EB8((uint64_t)v46, (uint64_t)v45);
  v23 = sub_1000574E4((uint64_t)v45, v45[3]);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = *v25;
  swift_bridgeObjectRetain(v22);
  v28 = sub_10007B2A0(v27);
  sub_100032F94(v45);
  v29 = &APSEnvironmentProduction;
  a5[8] = v28;
  if ((v44 & 1) != 0)
    v29 = &APSEnvironmentDevelopment;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v29);
  v32 = v31;
  v33 = a5[6];
  v34 = a5[7];
  v35 = (void *)a5[2];
  objc_allocWithZone((Class)APSConnection);
  swift_bridgeObjectRetain(v34);
  v36 = v35;
  result = sub_10007ADEC(v30, v32, v33, v34, v35);
  if (result)
  {
    v38 = result;
    a5[3] = result;
    objc_msgSend(result, "setDelegate:", v28);
    v39 = sub_100032C48(&qword_100503BA0);
    v40 = swift_allocObject(v39, 48, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1004077E0;
    *(_QWORD *)(v40 + 32) = v21;
    *(_QWORD *)(v40 + 40) = v22;
    sub_10007B170(v40, v38);
    sub_100032F94(v46);
    return a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B680(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v8 = type metadata accessor for ASDConfigurationManager();
  v9 = &off_1004D2198;
  *(_QWORD *)&v7 = a2;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x6F43656369766544, 0xED0000747865746ELL);
  sub_1000351FC(a1, a3 + 16);
  sub_1000351FC(&v7, a3 + 56);
  return a3;
}

uint64_t sub_10007B73C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];

  v12 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v21[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[3] = type metadata accessor for RavioliManagerObjC();
  v23[4] = &off_1004D1228;
  v23[0] = a1;
  v22[3] = type metadata accessor for ASDConfigurationManager();
  v22[4] = &off_1004D21B0;
  v22[0] = a4;
  v21[3] = type metadata accessor for ASAnalyticsManager();
  v21[4] = &off_1004D1008;
  v21[0] = a5;
  swift_defaultActor_initialize(a6);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000011, 0x80000001003E4C50);
  sub_100032EB8((uint64_t)v23, a6 + 112);
  *(_QWORD *)(a6 + 152) = a2;
  sub_100032EB8((uint64_t)v22, a6 + 160);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC3asd19PushDispatchManager_contextProvider) = a3;
  sub_100032EB8((uint64_t)v21, a6 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager);
  v15 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_1004D1E30, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a6;
  v17 = a2;
  swift_retain(a3);
  swift_retain(a6);
  v18 = sub_1000494E4((uint64_t)v14, (uint64_t)&unk_1005056D0, (uint64_t)v16);

  swift_release(a3);
  swift_release(v18);
  sub_100032F94(v21);
  sub_100032F94(v22);
  sub_100032F94(v23);
  return a6;
}

uint64_t sub_10007B934(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  _QWORD v26[5];

  v15 = a5 & 1;
  v16 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v16);
  v18 = (char *)&v26[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = type metadata accessor for ASAnalyticsManager();
  v26[4] = &off_1004D1008;
  v26[0] = a7;
  swift_defaultActor_initialize(a8);
  *(_QWORD *)(a8 + 200) = 0;
  *(_QWORD *)(a8 + 112) = a1;
  *(_QWORD *)(a8 + 120) = a2;
  *(_QWORD *)(a8 + 128) = a3;
  *(_BYTE *)(a8 + 136) = v15;
  *(_QWORD *)(a8 + 144) = a4;
  sub_100032EB8((uint64_t)v26, a8 + 152);
  *(_QWORD *)(a8 + 192) = a6;
  v19 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v18, 1, 1, v19);
  v20 = (_QWORD *)swift_allocObject(&unk_1004D1DE0, 40, 7);
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = a8;
  v21 = a1;
  swift_retain(a4);
  v22 = a6;
  swift_retain(a8);
  v23 = sub_1000494E4((uint64_t)v18, (uint64_t)&unk_1005056C0, (uint64_t)v20);

  swift_release(a4);
  swift_release(v23);
  sub_100032F94(v26);
  return a8;
}

uint64_t sub_10007BAA8(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  v13 = a3 & 1;
  v14 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[3] = type metadata accessor for ASAnalyticsManager();
  v33[4] = &off_1004D1008;
  v33[0] = a6;
  swift_defaultActor_initialize(a7);
  *(_QWORD *)(a7 + 200) = 0;
  *(_BYTE *)(a7 + 208) = 0;
  *(_QWORD *)(a7 + 120) = a1;
  *(_QWORD *)(a7 + 128) = a2;
  *(_BYTE *)(a7 + 136) = v13;
  *(_QWORD *)(a7 + 184) = a4;
  sub_100032EB8((uint64_t)v33, a7 + 144);
  *(_QWORD *)(a7 + 192) = a5;
  objc_allocWithZone((Class)PDSRegistrar);
  v17 = a4;
  v18 = a5;
  *(_QWORD *)(a7 + 112) = sub_10007AE94(0x6C7070612E6D6F63, 0xED00006473612E65);
  if (qword_1005034F0 != -1)
    swift_once(&qword_1005034F0, sub_100097668);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_1000352B0(v19, (uint64_t)qword_100506108);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v32 = v24;
    *(_DWORD *)v23 = 136315138;
    v30 = sub_100036778(0x6C7070612E6D6F63, 0xED00006473612E65, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v23 + 4, v23 + 12);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "PDS Registrar configured for clientID: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }

  v25 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v16, 1, 1, v25);
  v26 = (_QWORD *)swift_allocObject(&unk_1004D1E08, 40, 7);
  v26[2] = 0;
  v26[3] = 0;
  v26[4] = a7;
  swift_retain(a7);
  v27 = sub_1000494E4((uint64_t)v16, (uint64_t)&unk_1005056C8, (uint64_t)v26);

  swift_release(v27);
  sub_100032F94(v33);
  return a7;
}

uint64_t sub_10007BF44(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[3];
  uint64_t ObjectType;
  _UNKNOWN **v15;

  ObjectType = swift_getObjectType(a2);
  v15 = &off_1004D2198;
  v13[0] = a2;
  v4 = type metadata accessor for DeviceContextProvider(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = sub_1000574E4((uint64_t)v13, ObjectType);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_10007B680(a1, *v8, v5);
  sub_100032F94(v13);
  return v10;
}

uint64_t sub_10007C014(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  v10 = *a5;
  v35 = type metadata accessor for RavioliManagerObjC();
  v36 = &off_1004D1228;
  v34[0] = a1;
  v32 = type metadata accessor for ASDConfigurationManager();
  v33 = &off_1004D21B0;
  v31[0] = a4;
  v29 = v10;
  v30 = &off_1004D1008;
  v28[0] = a5;
  v11 = type metadata accessor for PushDispatchManager(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = sub_1000574E4((uint64_t)v34, v35);
  __chkstk_darwin(v13);
  v15 = (_QWORD *)((char *)&v28[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = sub_1000574E4((uint64_t)v31, v32);
  __chkstk_darwin(v17);
  v19 = (_QWORD *)((char *)&v28[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  v21 = sub_1000574E4((uint64_t)v28, v29);
  __chkstk_darwin(v21);
  v23 = (_QWORD *)((char *)&v28[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_10007B73C(*v15, a2, a3, *v19, *v23, v12);
  sub_100032F94(v28);
  sub_100032F94(v31);
  sub_100032F94(v34);
  return v25;
}

_QWORD *sub_10007C1E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v17[3];
  uint64_t v18;
  _UNKNOWN **v19;

  v7 = a4 & 1;
  v18 = type metadata accessor for PushDispatchManager(0);
  v19 = &off_1004D1688;
  v17[0] = a3;
  v8 = type metadata accessor for PushServiceManager();
  v9 = (_QWORD *)swift_allocObject(v8, 72, 7);
  v10 = sub_1000574E4((uint64_t)v17, v18);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v17[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10007B360(a1, a2, *v12, v7, v9);
  sub_100032F94(v17);
  return v14;
}

uint64_t sub_10007C2D0(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t *a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v21 = *a6;
  v22 = &off_1004D1008;
  v10 = a3 & 1;
  v20[0] = a6;
  v11 = type metadata accessor for PushManagerPDS();
  v12 = swift_allocObject(v11, 209, 15);
  v13 = sub_1000574E4((uint64_t)v20, v21);
  __chkstk_darwin(v13);
  v15 = (_QWORD *)((char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = sub_10007BAA8(a1, a2, v10, a4, a5, *v15, v12);
  sub_100032F94(v20);
  return v17;
}

uint64_t sub_10007C3C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t *a7)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  v23 = *a7;
  v24 = &off_1004D1008;
  v12 = a5 & 1;
  v22[0] = a7;
  v13 = type metadata accessor for PushCloudChannelsManager();
  v14 = swift_allocObject(v13, 208, 15);
  v15 = sub_1000574E4((uint64_t)v22, v23);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)&v22[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_10007B934(a1, a2, a3, a4, v12, a6, *v17, v14);
  sub_100032F94(v22);
  return v19;
}

uint64_t sub_10007C4CC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_1005056A4);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10007C6B4(v1);
  return sub_10007A624();
}

uint64_t sub_10007C51C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_1005056B4);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10007C6B4(v1);
  return sub_10007A66C();
}

uint64_t sub_10007C56C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_100505464);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10007C6B4(v1);
  return sub_100073598(v2, v3, v4, v5);
}

uint64_t sub_10007C5BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_1005062C4);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10007C6B4(v1);
  return sub_100097794(v2, v3, v4, v5);
}

uint64_t sub_10007C608()
{
  uint64_t v0;

  sub_100048CD8();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10007C630()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007C65C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10007C6D0();
  v0 = swift_task_alloc(dword_1005052FC);
  v1 = (_QWORD *)sub_100048D70(v0);
  sub_10007C6B4(v1);
  return sub_10006F364();
}

uint64_t sub_10007C6B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10007C6E0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100037020(v0, 1, 1, v1);
}

uint64_t sub_10007C6F4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v11 = 0;
  v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC3asd15ContactsManager_accessQueue);
  v3 = sub_100040900((uint64_t)&unk_1004D1F10, 32);
  *(_QWORD *)(v3 + 16) = &v11;
  *(_QWORD *)(v3 + 24) = v0;
  v4 = sub_100040900((uint64_t)&unk_1004D1F38, 32);
  *(_QWORD *)(v4 + 16) = sub_10007D22C;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_10007D244;
  v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EC10;
  aBlock[3] = &unk_1004D1F50;
  v5 = _Block_copy(aBlock);
  v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 102, 24, 30, 1);
  result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v3);
    return v8;
  }
  return result;
}

void sub_10007C82C(id *a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a2 + OBJC_IVAR____TtC3asd15ContactsManager__contact);
  v4 = *a1;
  *a1 = v2;
  v3 = v2;

}

uint64_t sub_10007C864(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v17;

  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100046E44();
  v8 = v7 - v6;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10006EE68();
  static DispatchWorkItemFlags.barrier.getter();
  v11 = sub_100040900((uint64_t)&unk_1004D1EC0, 32);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10007D1E8;
  v17 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EC2C;
  aBlock[3] = &unk_1004D1ED8;
  v12 = _Block_copy(aBlock);
  v13 = a1;
  v14 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v2, v12);
  _Block_release(v12);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  return swift_release(v17);
}

void sub_10007C9D0(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v3 = *(id *)(a1 + OBJC_IVAR____TtC3asd15ContactsManager__contact);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC3asd15ContactsManager__contact) = a2;
  v2 = a2;

}

uint64_t sub_10007CA04(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  NSString *v17;
  NSString *v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;

  v4 = v2;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  sub_10006EE68();
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  sub_100046E44();
  v9 = v8 - v7;
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  sub_100046E44();
  v13 = v12 - v11;
  v14 = sub_100032C48(&qword_100505830);
  v15 = sub_100040900(v14, 72);
  *(_OWORD *)(v15 + 16) = xmmword_100409840;
  *(_QWORD *)(v15 + 32) = CNContactGivenNameKey;
  *(_QWORD *)(v15 + 40) = CNContactFamilyNameKey;
  *(_QWORD *)(v15 + 48) = CNContactPhoneNumbersKey;
  *(_QWORD *)(v15 + 56) = CNContactEmailAddressesKey;
  *(_QWORD *)(v15 + 64) = CNContactPostalAddressesKey;
  v31 = v15;
  specialized Array._endMutation()(v15);
  *(_QWORD *)(v2 + 24) = v31;
  v26 = OBJC_IVAR____TtC3asd15ContactsManager_accessQueue;
  sub_100039884(0, (unint64_t *)&qword_100505E80, OS_dispatch_queue_ptr);
  v16 = CNContactGivenNameKey;
  v17 = CNContactFamilyNameKey;
  v18 = CNContactPhoneNumbersKey;
  v19 = CNContactEmailAddressesKey;
  v20 = static OS_dispatch_queue.Attributes.concurrent.getter(CNContactPostalAddressesKey);
  static DispatchQoS.unspecified.getter(v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  *(_QWORD *)(v2 + v26) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x80000001003E4EB0, v9, v13, v3, 0);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3asd15ContactsManager__contact) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  v21 = v2 + OBJC_IVAR____TtC3asd15ContactsManager_logger;
  v22 = type metadata accessor for Logger(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  v24 = a1;
  sub_10007CEDC();

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v22);
  return v4;
}

void sub_10007CC54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  _QWORD v16[5];
  _QWORD *v17;

  v3 = v2;
  v6 = Logger.logObject.getter(a1);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering observer for MeCard change", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v10 = CNContactStoreMeContactDidChangeNotification;
  v11 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v12 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D1F88, 40);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  v16[4] = sub_10007D278;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000975C8;
  v16[3] = &unk_1004D1FA0;
  v13 = _Block_copy(v16);
  v14 = v17;
  swift_retain(v3);
  swift_retain(a2);
  swift_release(v14);
  v15 = objc_msgSend(v9, "addObserverForName:object:queue:usingBlock:", v10, 0, v11, v13);
  _Block_release(v13);
  swift_unknownObjectRelease(v15);

}

uint64_t sub_10007CE20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  result = sub_10007CEDC();
  if ((result & 1) != 0)
  {
    v5 = Logger.logObject.getter(result);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "MeContactDidChange notification received. Triggering handler.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    return a3();
  }
  return result;
}

uint64_t sub_10007CEDC()
{
  uint64_t v0;
  id v1;
  Class isa;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  id v16;

  v1 = *(id *)(v0 + 16);
  sub_100032C48(&qword_100505820);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v16 = 0;
  v3 = objc_msgSend(v1, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", isa, &v16);

  v4 = v16;
  if (!v3)
  {
    v11 = v16;
    v12 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v13);
    swift_errorRelease(v12);
    return 0;
  }
  v5 = v16;
  v6 = v3;
  v7 = sub_10007C6F4();
  if (v7)
  {
    v8 = (void *)v7;
    sub_100039884(0, &qword_100505828, CNContact_ptr);
    v9 = v6;
    v10 = static NSObject.== infix(_:_:)(v9, v8);

    if ((v10 & 1) != 0)
    {

      return 0;
    }
  }
  else
  {

  }
  v15 = v6;
  sub_10007C864(v3);

  return 1;
}

uint64_t sub_10007D050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3asd15ContactsManager_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t sub_10007D0C4()
{
  uint64_t v0;

  sub_10007D050();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007D0E8()
{
  return type metadata accessor for ContactsManager(0);
}

uint64_t type metadata accessor for ContactsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100505720;
  if (!qword_100505720)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContactsManager);
  return result;
}

uint64_t sub_10007D128(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10007D1BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10007D1E8()
{
  uint64_t v0;

  sub_10007C9D0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10007D1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007D200(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007D208()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10007D22C()
{
  uint64_t v0;

  sub_10007C82C(*(id **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10007D234()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10007D244()
{
  uint64_t v0;

  sub_10008EBF4(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10007D24C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007D278(uint64_t a1)
{
  uint64_t v1;

  return sub_10007CE20(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_10007D294@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 500:
      v3 = (unsigned int *)&enum case for HTTPStatusCode.httpInternalServerError(_:);
      break;
    case 501:
      v3 = (unsigned int *)&enum case for HTTPStatusCode.httpNotImplemented(_:);
      break;
    case 502:
      v3 = (unsigned int *)&enum case for HTTPStatusCode.httpBadGateway(_:);
      break;
    case 503:
      v3 = (unsigned int *)&enum case for HTTPStatusCode.httpServiceUnavailable(_:);
      break;
    case 504:
      v3 = (unsigned int *)&enum case for HTTPStatusCode.httpGatewayTimeout(_:);
      break;
    default:
      switch(a1)
      {
        case 400:
          v3 = (unsigned int *)&enum case for HTTPStatusCode.httpBadRequest(_:);
          break;
        case 401:
          v3 = (unsigned int *)&enum case for HTTPStatusCode.httpUnauthorized(_:);
          break;
        case 402:
LABEL_12:
          *a2 = a1;
          v3 = (unsigned int *)&enum case for HTTPStatusCode.httpUnknownStatus(_:);
          break;
        case 403:
          v3 = (unsigned int *)&enum case for HTTPStatusCode.httpForbidden(_:);
          break;
        case 404:
          v3 = (unsigned int *)&enum case for HTTPStatusCode.httpNotFound(_:);
          break;
        default:
          switch(a1)
          {
            case 428:
              v3 = (unsigned int *)&enum case for HTTPStatusCode.httpPreconditionRequired(_:);
              goto LABEL_25;
            case 429:
              v3 = (unsigned int *)&enum case for HTTPStatusCode.httpTooManyRequests(_:);
              goto LABEL_25;
            case 430:
            case 431:
            case 432:
              goto LABEL_12;
            case 433:
              v3 = (unsigned int *)&enum case for HTTPStatusCode.httpAuthKitReprovision(_:);
              goto LABEL_25;
            case 434:
              v3 = (unsigned int *)&enum case for HTTPStatusCode.httpAuthKitResync(_:);
              goto LABEL_25;
            default:
              switch(a1)
              {
                case 304:
                  v3 = (unsigned int *)&enum case for HTTPStatusCode.httpNotModified(_:);
                  break;
                case 301:
                  v3 = (unsigned int *)&enum case for HTTPStatusCode.httpMovedPermanently(_:);
                  break;
                case 200:
                  v3 = (unsigned int *)&enum case for HTTPStatusCode.httpSuccess(_:);
                  break;
                default:
                  goto LABEL_12;
              }
              break;
          }
          break;
      }
      break;
  }
LABEL_25:
  v4 = *v3;
  v5 = type metadata accessor for HTTPStatusCode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t sub_10007D420(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t *v35;

  sub_1000548C0(v34);
  v4 = v34[0];
  v5 = v34[1];
  v6 = v34[3];
  v7 = v34[4];
  v8 = (unint64_t)(v34[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v35 = a2 + 7;
  v31 = v8;
  v32 = v5;
  do
  {
    do
    {
LABEL_2:
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v6 << 6);
      }
      else
      {
        v12 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_41;
        if (v12 >= v8)
          goto LABEL_39;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        v14 = v6 + 1;
        if (!v13)
        {
          v14 = v6 + 2;
          if (v6 + 2 >= v8)
            goto LABEL_39;
          v13 = *(_QWORD *)(v5 + 8 * v14);
          if (!v13)
          {
            v14 = v6 + 3;
            if (v6 + 3 >= v8)
              goto LABEL_39;
            v13 = *(_QWORD *)(v5 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 4;
              if (v6 + 4 >= v8)
                goto LABEL_39;
              v13 = *(_QWORD *)(v5 + 8 * v14);
              if (!v13)
              {
                v14 = v6 + 5;
                if (v6 + 5 >= v8)
                  goto LABEL_39;
                v13 = *(_QWORD *)(v5 + 8 * v14);
                if (!v13)
                {
                  v15 = v6 + 6;
                  while (v15 < v8)
                  {
                    v13 = *(_QWORD *)(v5 + 8 * v15++);
                    if (v13)
                    {
                      v14 = v15 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_39:
                  swift_bridgeObjectRelease(a2);
                  swift_release(v4);
                  return 0;
                }
              }
            }
          }
        }
LABEL_19:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v6 = v14;
      }
      v16 = a2[2];
    }
    while (!v16);
    v17 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    v18 = *v17;
    v19 = v17[1];
    v20 = a2[4];
    v21 = a2[5];
    if (v20 != *v17 || v21 != v19)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v17, v17[1], 0);
      if ((result & 1) == 0)
        continue;
    }
    v30 = v4;
LABEL_37:
    swift_release(v30);
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  while (v16 == 1);
  v33 = v6;
  v23 = v4;
  v24 = v35;
  v25 = 1;
  while (1)
  {
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    v27 = *(v24 - 1);
    v28 = *v24;
    v29 = v27 == v18 && v28 == v19;
    if (v29 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v18, v19, 0), (result & 1) != 0))
    {
      v30 = v23;
      goto LABEL_37;
    }
    v24 += 2;
    ++v25;
    if (v26 == v16)
    {
      v4 = v23;
      v8 = v31;
      v5 = v32;
      v6 = v33;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10007D634(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23[24];
  _QWORD *v24;

  v4 = *(_QWORD *)(a1 + 16);
  result = swift_beginAccess(a2, v23, 0, 0);
  if (v4)
  {
    v6 = 0;
    v7 = a1 + 40;
    v21 = v4;
    v19 = v4 - 1;
    v20 = _swiftEmptyArrayStorage;
    do
    {
      v8 = (uint64_t *)(v7 + 16 * v6);
      v9 = v6;
      while (1)
      {
        if (v9 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return result;
        }
        v10 = *(v8 - 1);
        v11 = *v8;
        v6 = v9 + 1;
        v22[2] = v10;
        v22[3] = v11;
        v12 = a2[1];
        v22[0] = *a2;
        v22[1] = v12;
        v13 = sub_100039848();
        swift_bridgeObjectRetain(v11);
        if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v22, &type metadata for String, &type metadata for String, v13, v13))break;
        result = swift_bridgeObjectRelease(v11);
        v8 += 2;
        ++v9;
        if (v21 == v6)
          goto LABEL_15;
      }
      v14 = v20;
      result = swift_isUniquelyReferenced_nonNull_native(v20);
      v24 = v20;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1000916B8(0, v20[2] + 1, 1);
        v14 = v24;
      }
      v16 = v14[2];
      v15 = v14[3];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        result = (uint64_t)sub_1000916B8((char *)(v15 > 1), v16 + 1, 1);
        v17 = v16 + 1;
        v14 = v24;
      }
      v14[2] = v17;
      v20 = v14;
      v18 = &v14[2 * v16];
      v18[4] = v10;
      v18[5] = v11;
      v7 = a1 + 40;
    }
    while (v19 != v9);
  }
  else
  {
    v20 = _swiftEmptyArrayStorage;
  }
LABEL_15:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v20;
}

uint64_t sub_10007D7E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for AssessmentConfig.Sources(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v2[25] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000357DC();
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = sub_1000409B8();
  v2[29] = sub_1000409B8();
  v2[30] = sub_1000409B8();
  v2[31] = sub_1000409B8();
  v2[32] = sub_1000409B8();
  v2[33] = sub_1000409B8();
  v2[34] = sub_1000409B8();
  v2[35] = sub_1000409B8();
  sub_100040A54();
  return sub_100040920();
}

void sub_10007D898()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(uint8_t *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  _WORD *v59;
  void *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  _WORD *v66;
  void *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v115;
  _QWORD **v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint8_t *v120;
  void (*v121)(_QWORD, _QWORD);
  void (*v122)(_QWORD, _QWORD);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD, _QWORD);
  void (*v126)(uint64_t, _QWORD *);
  uint64_t v127[2];

  v3 = *(_QWORD *)(v0 + 168);
  if (!*(_QWORD *)(v3 + 16))
  {
    v97 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 160) = _swiftEmptyDictionarySingleton;
    v98 = type metadata accessor for BindingsGuesser(0);
    sub_100032EFC((_QWORD *)(v97 + *(int *)(v98 + 24)), *(_QWORD *)(v97 + *(int *)(v98 + 24) + 24));
    v99 = (_QWORD *)swift_task_alloc(async function pointer to BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)[1]);
    *(_QWORD *)(v0 + 648) = v99;
    sub_10004EDB0(v99, (uint64_t)sub_100080364);
LABEL_73:
    sub_100083CB8();
    BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v100);
    return;
  }
  v4 = *(_BYTE *)(v3 + 32);
  v118 = (_QWORD *)(v0 + 120);
  *(_BYTE *)(v0 + 680) = v4;
  v5 = 1 << v4;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = (v6 & *(_QWORD *)(v3 + 64));
  *(_DWORD *)(v0 + 656) = enum case for AssessmentConfig.Sources.accountsiCloud(_:);
  *(_DWORD *)(v0 + 660) = enum case for AssessmentConfig.Sources.accountsiTunes(_:);
  *(_DWORD *)(v0 + 664) = enum case for AssessmentConfig.Sources.CoreTelephony(_:);
  *(_DWORD *)(v0 + 668) = enum case for AssessmentConfig.Sources.MeCard(_:);
  v8 = ACAccountTypeIdentifierAppleAccount;
  *(_QWORD *)(v0 + 288) = ACAccountTypeIdentifieriTunesStore;
  *(_QWORD *)(v0 + 296) = v8;
  swift_bridgeObjectRetain(v3);
  v119 = 0;
  v9 = 0;
  v10 = _swiftEmptyDictionarySingleton;
  v116 = (_QWORD **)(v0 + 144);
  while (1)
  {
    *(_QWORD *)(v0 + 304) = v10;
    if (!v7)
    {
      v11 = __OFADD__(v9++, 1);
      if (v11)
        goto LABEL_84;
      v12 = (1 << *(_BYTE *)(v0 + 680)) + 63;
      v13 = *(_QWORD *)(v0 + 168);
      if (v9 >= (uint64_t)(v12 >> 6))
      {
LABEL_78:
        swift_release(v13);
        sub_100081E98((uint64_t)v10);
        swift_bridgeObjectRelease(v10);
        v109 = sub_100084138();
        sub_100083D1C((uint64_t)v109);
        sub_100084254();
        if (!v110)
        {
          sub_1000356D4();
          sub_100083BB4();
          sub_100040B34();
          sub_100040A10();
          sub_100040A7C();
          sub_100040A74();
          sub_100040B4C();
          sub_100040BE8();
          sub_100040B0C();
          sub_100083F30();
          sub_100083CB8();
          __asm { BR              X1 }
        }
        v111 = sub_100083EC4();
        v112 = (_QWORD *)sub_100083F18(v111);
        sub_100083AB0(v112, (uint64_t)_swiftEmptyArrayStorage);
        sub_100046EC0();
        v113 = (_QWORD *)sub_100083FB0();
        *(_QWORD *)(v0 + 640) = v113;
        sub_100083B84(v113, (uint64_t)sub_1000801C0);
        goto LABEL_73;
      }
      v14 = v13 + 64;
      if (!*(_QWORD *)(v13 + 64 + 8 * v9))
      {
        v15 = v12 >> 6;
        v16 = v9 + 1;
        if (v9 + 1 >= v15)
          goto LABEL_78;
        if (!*(_QWORD *)(v14 + 8 * v16))
        {
          v16 = v9 + 2;
          if (v9 + 2 >= v15)
            goto LABEL_78;
          if (!*(_QWORD *)(v14 + 8 * v16))
          {
            v16 = v9 + 3;
            if (v9 + 3 >= v15)
              goto LABEL_78;
            if (!*(_QWORD *)(v14 + 8 * v16))
            {
              while (1)
              {
                v9 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_86;
                if (v9 >= v15)
                  goto LABEL_78;
                ++v16;
                if (*(_QWORD *)(v14 + 8 * v9))
                  goto LABEL_17;
              }
            }
          }
        }
        v9 = v16;
      }
    }
LABEL_17:
    sub_100083F38(v9);
    v18 = *v17;
    *(_QWORD *)(v0 + 328) = *v17;
    v19 = (uint8_t *)v17[1];
    *(_QWORD *)(v0 + 336) = v19;
    sub_100083C00(v20, v21);
    sub_100083E0C((uint64_t)v19);
    v22 = sub_100083E0C((uint64_t)v1);
    Logger.logObject.getter(v22);
    v23 = sub_100056100();
    v24 = sub_100084108(v23);
    v25 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 208);
    v26 = *(_QWORD *)(v0 + 216);
    if (v24)
    {
      v124 = *(_QWORD *)(v0 + 280);
      v25 = sub_10003308C(12);
      v10 = (_QWORD *)sub_10003308C(32);
      v127[0] = (uint64_t)v10;
      *(_DWORD *)v25 = 136315138;
      sub_1000371CC();
      *(_QWORD *)(v25 + 4) = sub_1000841F8(v18, v28, v127);
      sub_100037188((uint64_t)v19);
      sub_1000371A0((uint64_t)v1);
      sub_100037174((void *)&_mh_execute_header, v7, (os_log_type_t)v2, "handleFetchBindings guessing for key %s", (uint8_t *)v25);
      swift_arrayDestroy(v10, 1);
      sub_100033080((uint64_t)v10);
      sub_100033080(v25);

      v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v29(v124, v27);
    }
    else
    {
      sub_1000371A0((uint64_t)v19);
      sub_1000371A0((uint64_t)v1);

      v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v29(v25, v27);
    }
    sub_100083DC4();
    if (v30)
      break;
    sub_100035714();
    v1 = _swiftEmptyArrayStorage;
LABEL_59:
    v2 = sub_100083AE0();
    sub_100083A3C();
    sub_100083D84();
    if (v11)
      goto LABEL_83;
    v86 = v84;
    v87 = v85;
    sub_100032C48(&qword_100505840);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v2, (Swift::Int)v29))
    {
      v88 = sub_100083EDC();
      if ((v87 & 1) != (v89 & 1))
      {
        sub_100083CB8();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v115);
        return;
      }
      v86 = v88;
    }
    v10 = *v116;
    if ((v87 & 1) != 0)
    {
      v90 = v10[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v90 + 8 * v86));
      *(_QWORD *)(v90 + 8 * v86) = v1;
    }
    else
    {
      v92 = *(_QWORD *)(v0 + 328);
      v91 = *(_QWORD *)(v0 + 336);
      v10[(v86 >> 6) + 8] |= 1 << v86;
      v93 = (_QWORD *)(v10[6] + 16 * v86);
      *v93 = v92;
      v93[1] = v91;
      *(_QWORD *)(v10[7] + 8 * v86) = v1;
      v94 = v10[2];
      v11 = __OFADD__(v94, 1);
      v95 = v94 + 1;
      if (v11)
        goto LABEL_85;
      v96 = *(_QWORD *)(v0 + 336);
      v10[2] = v95;
      swift_bridgeObjectRetain(v96);
    }
    sub_100083E50();
    sub_1000356D4();
    sub_10008408C();
    v9 = *(_QWORD *)(v0 + 312);
    v7 = *(NSObject **)(v0 + 320);
  }
  swift_beginAccess(v118, v0 + 96, 1, 0);
  sub_10008418C();
  v122 = v29;
  v125 = v29;
  v121 = v29;
  v33 = (void (*)(uint8_t *, uint64_t))v29;
  v1 = _swiftEmptyArrayStorage;
  while (1)
  {
    *(_QWORD *)(v0 + 408) = v32;
    *(_QWORD *)(v0 + 416) = v1;
    *(_QWORD *)(v0 + 392) = v31;
    *(_QWORD *)(v0 + 400) = v25;
    *(_QWORD *)(v0 + 376) = v119;
    *(_QWORD *)(v0 + 384) = v29;
    v34 = *(_QWORD *)(v0 + 344);
    if (v32 >= *(_QWORD *)(v34 + 16))
      break;
    v35 = sub_100083C1C(v34);
    if (!v36)
      goto LABEL_45;
    v37 = *(_QWORD *)(v0 + 192);
    *(_DWORD *)(v0 + 672) = *(_DWORD *)(v37 + 80);
    *(_QWORD *)(v0 + 440) = *(_QWORD *)(v37 + 72);
    *(_QWORD *)(v0 + 448) = *(_QWORD *)(v37 + 16);
    v38 = swift_bridgeObjectRetain(v35);
    v39 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 520) = v39;
      *(_QWORD *)(v0 + 504) = v33;
      *(_QWORD *)(v0 + 512) = v33;
      *(_QWORD *)(v0 + 488) = v121;
      *(_QWORD *)(v0 + 496) = v33;
      *(_QWORD *)(v0 + 472) = v125;
      *(_QWORD *)(v0 + 480) = v122;
      *(_QWORD *)(v0 + 456) = v2;
      *(_QWORD *)(v0 + 464) = v10;
      v40 = *(unsigned int *)(v0 + 656);
      v42 = *(_QWORD *)(v0 + 192);
      v41 = *(NSObject **)(v0 + 200);
      v19 = *(uint8_t **)(v0 + 184);
      (*(void (**)(NSObject *, unint64_t, uint8_t *, __n128))(v0 + 448))(v41, *(_QWORD *)(v0 + 424)+ ((*(unsigned __int8 *)(v0 + 672) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 672))+ *(_QWORD *)(v0 + 440) * v39, v19, v38);
      if ((*(unsigned int (**)(NSObject *, uint8_t *))(v42 + 88))(v41, v19) == (_DWORD)v40)
      {
        sub_100083E14();
        sub_100083C90();
        v101 = sub_100083A50();
        sub_10008401C(v101, v102);
        v103 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)[1]);
        *(_QWORD *)(v0 + 536) = v103;
        v104 = sub_10007E2EC;
LABEL_76:
        sub_100083BDC(v103, (uint64_t)v104);
        sub_100083CB8();
        dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)();
        return;
      }
      sub_100084260();
      if (v43)
      {
        sub_100083E14();
        sub_100083C90();
        v105 = sub_100083A50();
        sub_10008402C(v105, v106);
        v103 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)[1]);
        *(_QWORD *)(v0 + 560) = v103;
        v104 = sub_10007ECB8;
        goto LABEL_76;
      }
      sub_100084248();
      if (v43)
      {
        v107 = sub_100084158();
        sub_100084218(v107);
        v108 = (_QWORD *)swift_task_alloc(async function pointer to static ODIDeviceInfo.shared.getter[1]);
        *(_QWORD *)(v0 + 584) = v108;
        sub_10004EDB0(v108, (uint64_t)sub_10007F6F8);
        sub_100083CB8();
        static ODIDeviceInfo.shared.getter();
        return;
      }
      sub_10008423C();
      if (v43)
      {
        v44 = sub_100083ED0();
        if (v45)
        {
          sub_100083A90(v44, v45);
          v46 = sub_100083A80();
          Logger.logObject.getter(v46);
          v47 = sub_100056100();
          v48 = sub_10006EBE8(v47);
          v19 = *(uint8_t **)(v0 + 248);
          v40 = *(_QWORD *)(v0 + 208);
          if (v48)
          {
            v49 = sub_10003308C(12);
            v18 = sub_10003308C(32);
            v127[0] = v18;
            *(_DWORD *)v49 = 136315138;
            v120 = v19;
            v19 = (uint8_t *)v2;
            v117 = v40;
            v40 = (uint64_t)v10;
            v50 = *(_QWORD *)(v0 + 120);
            v51 = *(_QWORD *)(v0 + 128);
            swift_bridgeObjectRetain(v51);
            v52 = v50;
            v2 = (uint64_t)v19;
            *(_QWORD *)(v49 + 4) = sub_100036778(v52, v51, v127);
            v53 = v51;
            v10 = (_QWORD *)v40;
            swift_bridgeObjectRelease(v53);
            sub_100037174((void *)&_mh_execute_header, v41, (os_log_type_t)v1, "fetchBindings found value from Me Card = %s", (uint8_t *)v49);
            sub_10003716C(v18);
            sub_100033080(v18);
            sub_100033080(v49);

            v54 = v120;
            v55 = v117;
          }
          else
          {

            v54 = v19;
            v55 = v40;
          }
          v33(v54, v55);
        }
      }
      else
      {
        v56 = sub_100083A70(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 352));
        Logger.logObject.getter(v56);
        v57 = sub_100056100();
        if (sub_10004EFCC(v57))
        {
          v59 = (_WORD *)sub_10003308C(2);
          sub_10006E7D8(v59);
          sub_100083D78();
          sub_1000560D0(v60, v61, v62, "fetchBindings no value found");
          sub_100033080(v40);
        }
        sub_1000840B4();
        v33(v19, v40);
        sub_100083FB8(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
      }
      sub_100083C4C();
      if (v63)
        break;
      sub_100083D64();
      if (v43)
      {
        sub_10008406C();
        v25 = *(_QWORD *)(v0 + 400);
        goto LABEL_45;
      }
    }
    sub_100083B9C();
    v64 = sub_100083A80();
    Logger.logObject.getter(v64);
    v65 = sub_100056100();
    if (sub_10004EFCC(v65))
    {
      v66 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v66);
      sub_100083D78();
      sub_1000560D0(v67, v68, v69, "fetchBindings value found, skipping to next key");
      sub_100033080(v40);
    }
    sub_100083CD4();
    sub_100083EA8();
    v25 = *(_QWORD *)(v0 + 392);
    v2 = v25;
    v10 = (_QWORD *)v25;
    v122 = (void (*)(_QWORD, _QWORD))v25;
    v125 = (void (*)(_QWORD, _QWORD))v25;
    v121 = (void (*)(_QWORD, _QWORD))v25;
    v33 = (void (*)(uint8_t *, uint64_t))v25;
LABEL_45:
    v70 = *(_QWORD *)(v0 + 376);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 416));
    v72 = sub_10007D634(v71, v118);
    v119 = v70;
    v73 = *(_QWORD *)(v72 + 16);
    swift_bridgeObjectRelease(v72);
    if (v73)
    {
      v74 = *(NSObject **)(v0 + 224);
      v75 = sub_100083A70(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 352));
      Logger.logObject.getter(v75);
      v76 = sub_100056100();
      v77 = sub_100037190(v76);
      v78 = *(_QWORD *)(v0 + 224);
      v10 = *(_QWORD **)(v0 + 208);
      if (v77)
      {
        v126 = *(void (**)(uint64_t, _QWORD *))(v0 + 360);
        v19 = (uint8_t *)sub_10003308C(12);
        v123 = v78;
        v79 = sub_10003308C(32);
        v127[0] = v79;
        *(_DWORD *)v19 = 136315138;
        v25 = (uint64_t)(v19 + 12);
        v2 = (uint64_t)(v19 + 4);
        sub_100046E84();
        *(_QWORD *)(v0 + 136) = sub_1000840D4();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v116, v19 + 4, v19 + 12);
        sub_100035714();
        sub_100037174((void *)&_mh_execute_header, v74, (os_log_type_t)v18, "fetchBindings similar value already present, skipping %s", v19);
        sub_10003716C(v79);
        sub_100033080(v79);
        sub_100033080((uint64_t)v19);

        v126(v123, v10);
        v29 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      }
      else
      {
        sub_100084140();
        ((void (*)(uint64_t, _QWORD *))v19)(v78, v10);
        v29 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
      }
      sub_10008418C();
      v1 = *(_QWORD **)(v0 + 416);
      v122 = v29;
      v125 = v29;
      v121 = v29;
      v33 = (void (*)(uint8_t *, uint64_t))v29;
    }
    else
    {
      v29 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
      sub_100046EC0();
      v80 = sub_10005FEB8();
      v1 = *(_QWORD **)(v0 + 416);
      if ((v80 & 1) == 0)
      {
        sub_100083E6C(0, v1[2] + 1);
        v1 = v82;
      }
      v18 = v1[2];
      v81 = v1[3];
      v19 = (uint8_t *)(v18 + 1);
      if (v18 >= v81 >> 1)
      {
        sub_100083E6C(v81 > 1, v18 + 1);
        v1 = v83;
      }
      v1[2] = v19;
      sub_100084230((uint64_t)&v1[2 * v18]);
    }
    sub_100083D98();
    if (v43)
    {
      sub_100084064();
      goto LABEL_59;
    }
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
}

uint64_t sub_10007E2EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  sub_1000356D4();
  sub_100040A54();
  return sub_100040920();
}

#error "10007E550: call analysis failed (funcsize=588)"

uint64_t sub_10007ECB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  sub_1000356D4();
  sub_100040A54();
  return sub_100040920();
}

#error "10007EF44: call analysis failed (funcsize=617)"

uint64_t sub_10007F6F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100040B24();
  v4 = v3[73];
  v5 = v3[72];
  *v6 = *v1;
  v3[74] = a1;
  swift_task_dealloc(v4);
  v7 = sub_100082C64();
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v5, v7);
  return swift_task_switch(sub_10007F764, v8, v9);
}

uint64_t sub_10007F764()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 600) = dispatch thunk of ODIDeviceInfo.getCTPhoneNumber(useDefaultVoiceNumber:)(1);
  swift_release(v1);
  sub_100040A54();
  return sub_100040920();
}

#error "10007F9DC: call analysis failed (funcsize=630)"

uint64_t sub_1000801C0()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 640));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_1000801F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v0 + 632);
  sub_100082538(*(_QWORD *)(v0 + 152));
  v4 = v3;
  sub_100039998();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  v6 = *(_QWORD *)(v0 + 632);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10008420C(0, *(_QWORD *)(v6 + 16) + 1);
    v6 = v16;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 >= v7 >> 1)
  {
    sub_10008420C(v7 > 1, v8 + 1);
    v6 = v17;
  }
  v9 = *(_QWORD *)(v0 + 616);
  v10 = *(_QWORD *)(v0 + 624) + 1;
  *(_QWORD *)(v6 + 16) = v8 + 1;
  *(_QWORD *)(v6 + 8 * v8 + 32) = v4;
  if (v10 == v9)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 608));
    sub_100083F00();
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_100040BE8();
    sub_100040B0C();
    sub_100083F30();
    swift_task_dealloc(v1);
    return sub_100083C9C(v6, *(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 624) + 1;
    *(_QWORD *)(v0 + 632) = v6;
    *(_QWORD *)(v0 + 624) = v12;
    v13 = (_QWORD *)(*(_QWORD *)(v0 + 176) + *(int *)(v0 + 676));
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v0 + 608) + 8 * v12 + 32);
    sub_100032EFC(v13, v13[3]);
    sub_100046EC0();
    v14 = (_QWORD *)sub_100083FB0();
    *(_QWORD *)(v0 + 640) = v14;
    v15 = sub_100083B84(v14, (uint64_t)sub_1000801C0);
    return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v15);
  }
}

uint64_t sub_100080364()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 648));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100080398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100032C48(&qword_100503C40);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1004077E0;
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v0 + 160);
  sub_100083F00();
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  sub_100040B0C();
  sub_100083F30();
  swift_task_dealloc(v1);
  return sub_100083C9C(v3, *(uint64_t (**)(void))(v0 + 8));
}

id sub_100080424(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(char *, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  char **v52;
  id result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v63 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v64 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BindingsKeys(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a1;
  v69 = a2;
  v11 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v12 = v11(v10, enum case for BindingsKeys.firstName(_:), v7);
  v13 = BindingsKeys.rawValue.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v66 = v13;
  v67 = v15;
  v17 = sub_100039848();
  v18 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v15);
  if (!v18)
    goto LABEL_9;
  v68 = a1;
  v69 = a2;
  v19 = v11(v10, enum case for BindingsKeys.documentFirstName(_:), v7);
  v20 = BindingsKeys.rawValue.getter(v19);
  v22 = v21;
  v16(v10, v7);
  v66 = v20;
  v67 = v22;
  v23 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v22);
  if (!v23)
  {
LABEL_9:
    v52 = &selRef_aa_firstName;
    return (id)sub_100083268(a3, (SEL *)v52);
  }
  v68 = a1;
  v69 = a2;
  v24 = v11(v10, enum case for BindingsKeys.lastName(_:), v7);
  v25 = BindingsKeys.rawValue.getter(v24);
  v27 = v26;
  v16(v10, v7);
  v66 = v25;
  v67 = v27;
  v28 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v27);
  if (!v28)
    goto LABEL_10;
  v68 = a1;
  v69 = a2;
  v29 = v11(v10, enum case for BindingsKeys.documentLastName(_:), v7);
  v30 = BindingsKeys.rawValue.getter(v29);
  v32 = v31;
  v16(v10, v7);
  v66 = v30;
  v67 = v32;
  v33 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v32);
  if (!v33)
  {
LABEL_10:
    v52 = &selRef_aa_lastName;
    return (id)sub_100083268(a3, (SEL *)v52);
  }
  v68 = a1;
  v69 = a2;
  v34 = v11(v10, enum case for BindingsKeys.email(_:), v7);
  v35 = BindingsKeys.rawValue.getter(v34);
  v37 = v36;
  v16(v10, v7);
  v66 = v35;
  v67 = v37;
  v38 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v37);
  if (!v38)
    goto LABEL_13;
  v68 = a1;
  v69 = a2;
  v39 = v11(v10, enum case for BindingsKeys.documentEmail(_:), v7);
  v40 = BindingsKeys.rawValue.getter(v39);
  v42 = v41;
  v16(v10, v7);
  v66 = v40;
  v67 = v42;
  v43 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v66, &type metadata for String, &type metadata for String, v17, v17);
  swift_bridgeObjectRelease(v42);
  if (!v43)
  {
LABEL_13:
    result = objc_msgSend(a3, "accountType");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v54 = sub_1000831FC(result);
    v56 = v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifieriTunesStore);
    v59 = v58;
    if (v56)
    {
      if (v54 == v57 && v56 == v58)
      {
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v59);
LABEL_26:
        v52 = &selRef_appleID;
        return (id)sub_100083268(a3, (SEL *)v52);
      }
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v57, v58, 0);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v59);
      if ((v61 & 1) != 0)
        goto LABEL_26;
    }
    else
    {
      swift_bridgeObjectRelease(v58);
    }
    v52 = &selRef_aa_primaryEmail;
    return (id)sub_100083268(a3, (SEL *)v52);
  }
  v45 = v64;
  v44 = v65;
  v46 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v62, v63);
  v47 = swift_bridgeObjectRetain_n(a2, 2);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v68 = v51;
    *(_DWORD *)v50 = 136446210;
    swift_bridgeObjectRetain(a2);
    v66 = sub_100036778(a1, a2, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unhandled bindingsKey %{public}s for Accounts", v50, 0xCu);
    swift_arrayDestroy(v51, 1);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v46);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  }
  return 0;
}

uint64_t sub_1000809B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  uint64_t (*v18)(char *, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  unint64_t v136;
  id v137;
  id v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  id v144;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  id v152;
  id v153;
  uint64_t v154;
  id v155;
  void *v156;
  id v157;
  id v158;
  id v159;
  uint64_t v160;
  id v161;
  void *v162;
  id v163;
  uint64_t v164;
  id v165;
  void *v166;
  id v167;
  uint64_t v168;
  id v169;
  void *v170;
  id v171;
  uint64_t v172;
  id v173;
  void *v174;
  id v175;
  uint64_t v176;
  id v177;
  void *v178;
  id v179;
  id v180;
  id v181;
  uint64_t v182;
  id v183;
  void *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  id v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD v213[5];

  v208 = a2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v202 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v206 = (char *)&v202 - v9;
  v10 = type metadata accessor for BindingsKeys(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v202 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPContactsManager();
  swift_allocObject(v14, 40, 7);
  v15 = sub_10008EFB8();
  v213[3] = v14;
  v213[4] = &off_1004D2B98;
  v213[0] = v15;
  sub_100032EFC(v213, v14);
  v16 = (void *)sub_10008ECD4();
  if (!v16)
  {
    v139 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v142 = 0;
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "No MeContact available", v142, 2u);
      swift_slowDealloc(v142, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_30;
  }
  v203 = v2;
  v204 = v4;
  v205 = v5;
  v207 = v16;
  v17 = v208;
  v211 = a1;
  v212 = v208;
  v18 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v19 = v18(v13, enum case for BindingsKeys.firstName(_:), v10);
  v20 = BindingsKeys.rawValue.getter(v19);
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  v209 = v20;
  v210 = v22;
  v24 = sub_100039848();
  v25 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
  swift_bridgeObjectRelease(v22);
  if (!v25)
    goto LABEL_26;
  v211 = a1;
  v212 = v17;
  v26 = v18(v13, enum case for BindingsKeys.documentFirstName(_:), v10);
  v27 = BindingsKeys.rawValue.getter(v26);
  v29 = v28;
  v23(v13, v10);
  v209 = v27;
  v210 = v29;
  v30 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
  swift_bridgeObjectRelease(v29);
  if (!v30)
  {
LABEL_26:
    v137 = v207;
    v138 = objc_msgSend(v207, "givenName");
LABEL_32:
    v144 = v138;
    v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);

    goto LABEL_33;
  }
  v211 = a1;
  v212 = v17;
  v31 = v18(v13, enum case for BindingsKeys.lastName(_:), v10);
  v32 = BindingsKeys.rawValue.getter(v31);
  v34 = v33;
  v23(v13, v10);
  v209 = v32;
  v210 = v34;
  v35 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
  swift_bridgeObjectRelease(v34);
  if (!v35)
    goto LABEL_31;
  v211 = a1;
  v212 = v17;
  v36 = v18(v13, enum case for BindingsKeys.documentLastName(_:), v10);
  v37 = BindingsKeys.rawValue.getter(v36);
  v39 = v38;
  v23(v13, v10);
  v209 = v37;
  v210 = v39;
  v40 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
  swift_bridgeObjectRelease(v39);
  if (!v40)
  {
LABEL_31:
    v137 = v207;
    v138 = objc_msgSend(v207, "familyName");
    goto LABEL_32;
  }
  v211 = a1;
  v212 = v17;
  v41 = v18(v13, enum case for BindingsKeys.email(_:), v10);
  v42 = BindingsKeys.rawValue.getter(v41);
  v44 = v43;
  v23(v13, v10);
  v209 = v42;
  v210 = v44;
  v45 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
  swift_bridgeObjectRelease(v44);
  if (v45)
  {
    v211 = a1;
    v212 = v17;
    v46 = v18(v13, enum case for BindingsKeys.documentEmail(_:), v10);
    v47 = BindingsKeys.rawValue.getter(v46);
    v49 = v48;
    v23(v13, v10);
    v209 = v47;
    v210 = v49;
    v50 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
    swift_bridgeObjectRelease(v49);
    if (v50)
    {
      v211 = a1;
      v212 = v17;
      v51 = v18(v13, enum case for BindingsKeys.phoneNumber(_:), v10);
      v52 = BindingsKeys.rawValue.getter(v51);
      v54 = v53;
      v23(v13, v10);
      v209 = v52;
      v210 = v54;
      v55 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v54);
      if (!v55)
        goto LABEL_40;
      v211 = a1;
      v212 = v17;
      v56 = v18(v13, enum case for BindingsKeys.documentPhoneNumber(_:), v10);
      v57 = BindingsKeys.rawValue.getter(v56);
      v59 = v58;
      v23(v13, v10);
      v209 = v57;
      v210 = v59;
      v60 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v59);
      if (!v60)
      {
LABEL_40:
        v146 = v207;
        v153 = objc_msgSend(v207, "phoneNumbers");
        v154 = sub_100032C48(&qword_100505860);
        v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v153, v154);

        if ((unint64_t)v149 >> 62)
        {
          if (v149 < 0)
            v188 = v149;
          else
            v188 = v149 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v149);
          v189 = _CocoaArrayWrapper.endIndex.getter(v188);
          swift_bridgeObjectRelease(v149);
          if (!v189)
            goto LABEL_96;
        }
        else if (!*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_96;
        }
        sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
        if ((v149 & 0xC000000000000001) != 0)
          v155 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
        else
          v155 = *(id *)(v149 + 32);
        v156 = v155;
        swift_bridgeObjectRelease(v149);
        v157 = objc_msgSend(v156, "value");

        v158 = objc_msgSend(v157, "stringValue");
        goto LABEL_50;
      }
      v211 = a1;
      v212 = v17;
      v61 = v18(v13, enum case for BindingsKeys.street(_:), v10);
      v62 = BindingsKeys.rawValue.getter(v61);
      v64 = v63;
      v23(v13, v10);
      v209 = v62;
      v210 = v64;
      v65 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v64);
      if (!v65)
        goto LABEL_45;
      v211 = a1;
      v212 = v17;
      v66 = v18(v13, enum case for BindingsKeys.documentStreet(_:), v10);
      v67 = BindingsKeys.rawValue.getter(v66);
      v69 = v68;
      v23(v13, v10);
      v209 = v67;
      v210 = v69;
      v70 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v69);
      if (!v70)
        goto LABEL_45;
      v211 = a1;
      v212 = v17;
      v71 = v18(v13, enum case for BindingsKeys.street1(_:), v10);
      v72 = BindingsKeys.rawValue.getter(v71);
      v74 = v73;
      v23(v13, v10);
      v209 = v72;
      v210 = v74;
      v75 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v74);
      if (!v75)
        goto LABEL_45;
      v211 = a1;
      v212 = v17;
      v76 = v18(v13, enum case for BindingsKeys.documentStreet1(_:), v10);
      v77 = BindingsKeys.rawValue.getter(v76);
      v79 = v78;
      v23(v13, v10);
      v209 = v77;
      v210 = v79;
      v80 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v79);
      if (!v80)
      {
LABEL_45:
        v146 = v207;
        v159 = objc_msgSend(v207, "postalAddresses");
        v160 = sub_100032C48(&qword_100505860);
        v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v159, v160);

        if ((unint64_t)v149 >> 62)
        {
          if (v149 < 0)
            v190 = v149;
          else
            v190 = v149 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v149);
          v191 = _CocoaArrayWrapper.endIndex.getter(v190);
          swift_bridgeObjectRelease(v149);
          if (!v191)
            goto LABEL_96;
        }
        else if (!*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_96;
        }
        sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
        if ((v149 & 0xC000000000000001) != 0)
          v161 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
        else
          v161 = *(id *)(v149 + 32);
        v162 = v161;
        swift_bridgeObjectRelease(v149);
        v157 = objc_msgSend(v162, "value");

        v158 = objc_msgSend(v157, "street");
        goto LABEL_50;
      }
      v211 = a1;
      v212 = v17;
      v81 = v18(v13, enum case for BindingsKeys.city(_:), v10);
      v82 = BindingsKeys.rawValue.getter(v81);
      v84 = v83;
      v23(v13, v10);
      v209 = v82;
      v210 = v84;
      v85 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v84);
      if (!v85)
        goto LABEL_52;
      v211 = a1;
      v212 = v17;
      v86 = v18(v13, enum case for BindingsKeys.documentCity(_:), v10);
      v87 = BindingsKeys.rawValue.getter(v86);
      v89 = v88;
      v23(v13, v10);
      v209 = v87;
      v210 = v89;
      v90 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v89);
      if (!v90)
      {
LABEL_52:
        v146 = v207;
        v163 = objc_msgSend(v207, "postalAddresses");
        v164 = sub_100032C48(&qword_100505860);
        v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v163, v164);

        if ((unint64_t)v149 >> 62)
        {
          if (v149 < 0)
            v192 = v149;
          else
            v192 = v149 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v149);
          v193 = _CocoaArrayWrapper.endIndex.getter(v192);
          swift_bridgeObjectRelease(v149);
          if (!v193)
            goto LABEL_96;
        }
        else if (!*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_96;
        }
        sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
        if ((v149 & 0xC000000000000001) != 0)
          v165 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
        else
          v165 = *(id *)(v149 + 32);
        v166 = v165;
        swift_bridgeObjectRelease(v149);
        v157 = objc_msgSend(v166, "value");

        v158 = objc_msgSend(v157, "city");
        goto LABEL_50;
      }
      v211 = a1;
      v212 = v17;
      v91 = v18(v13, enum case for BindingsKeys.state(_:), v10);
      v92 = BindingsKeys.rawValue.getter(v91);
      v94 = v93;
      v23(v13, v10);
      v209 = v92;
      v210 = v94;
      v95 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v94);
      if (!v95)
        goto LABEL_57;
      v211 = a1;
      v212 = v17;
      v96 = v18(v13, enum case for BindingsKeys.documentState(_:), v10);
      v97 = BindingsKeys.rawValue.getter(v96);
      v99 = v98;
      v23(v13, v10);
      v209 = v97;
      v210 = v99;
      v100 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v99);
      if (!v100)
      {
LABEL_57:
        v146 = v207;
        v167 = objc_msgSend(v207, "postalAddresses");
        v168 = sub_100032C48(&qword_100505860);
        v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v167, v168);

        if ((unint64_t)v149 >> 62)
        {
          if (v149 < 0)
            v194 = v149;
          else
            v194 = v149 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v149);
          v195 = _CocoaArrayWrapper.endIndex.getter(v194);
          swift_bridgeObjectRelease(v149);
          if (!v195)
            goto LABEL_96;
        }
        else if (!*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_96;
        }
        sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
        if ((v149 & 0xC000000000000001) != 0)
          v169 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
        else
          v169 = *(id *)(v149 + 32);
        v170 = v169;
        swift_bridgeObjectRelease(v149);
        v157 = objc_msgSend(v170, "value");

        v158 = objc_msgSend(v157, "state");
        goto LABEL_50;
      }
      v211 = a1;
      v212 = v17;
      v101 = v18(v13, enum case for BindingsKeys.postalCode(_:), v10);
      v102 = BindingsKeys.rawValue.getter(v101);
      v104 = v103;
      v23(v13, v10);
      v209 = v102;
      v210 = v104;
      v105 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
      swift_bridgeObjectRelease(v104);
      if (v105)
      {
        v211 = a1;
        v212 = v17;
        v106 = v18(v13, enum case for BindingsKeys.documentPostalCode(_:), v10);
        v107 = BindingsKeys.rawValue.getter(v106);
        v109 = v108;
        v23(v13, v10);
        v209 = v107;
        v210 = v109;
        v110 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
        swift_bridgeObjectRelease(v109);
        if (v110)
        {
          v211 = a1;
          v212 = v17;
          v111 = v18(v13, enum case for BindingsKeys.country(_:), v10);
          v112 = BindingsKeys.rawValue.getter(v111);
          v114 = v113;
          v23(v13, v10);
          v209 = v112;
          v210 = v114;
          v115 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
          swift_bridgeObjectRelease(v114);
          if (v115)
          {
            v211 = a1;
            v212 = v17;
            v116 = v18(v13, enum case for BindingsKeys.documentCountry(_:), v10);
            v117 = BindingsKeys.rawValue.getter(v116);
            v119 = v118;
            v23(v13, v10);
            v209 = v117;
            v210 = v119;
            v120 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
            swift_bridgeObjectRelease(v119);
            if (v120)
            {
              v211 = a1;
              v212 = v17;
              v121 = v18(v13, enum case for BindingsKeys.isoCountryCode(_:), v10);
              v122 = BindingsKeys.rawValue.getter(v121);
              v124 = v123;
              v23(v13, v10);
              v209 = v122;
              v210 = v124;
              v125 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
              swift_bridgeObjectRelease(v124);
              if (v125)
              {
                v211 = a1;
                v212 = v17;
                v126 = v18(v13, enum case for BindingsKeys.documentIsoCountryCode(_:), v10);
                v127 = BindingsKeys.rawValue.getter(v126);
                v129 = v128;
                v23(v13, v10);
                v209 = v127;
                v210 = v129;
                v130 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v209, &type metadata for String, &type metadata for String, v24, v24);
                swift_bridgeObjectRelease(v129);
                if (v130)
                {
                  (*(void (**)(char *, uint64_t, uint64_t))(v205 + 16))(v206, v203, v204);
                  v131 = swift_bridgeObjectRetain_n(v17, 2);
                  v132 = Logger.logObject.getter(v131);
                  v133 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v132, v133))
                  {
                    v134 = (uint8_t *)swift_slowAlloc(12, -1);
                    v135 = swift_slowAlloc(32, -1);
                    v211 = v135;
                    *(_DWORD *)v134 = 136446210;
                    v136 = v208;
                    swift_bridgeObjectRetain(v208);
                    v209 = sub_100036778(a1, v136, &v211);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v134 + 4, v134 + 12);
                    swift_bridgeObjectRelease_n(v136, 3);
                    _os_log_impl((void *)&_mh_execute_header, v132, v133, "Unhandled bindingsKey %{public}s for Me Card", v134, 0xCu);
                    swift_arrayDestroy(v135, 1);
                    swift_slowDealloc(v135, -1, -1);
                    swift_slowDealloc(v134, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v208, 2);
                  }

                  (*(void (**)(char *, uint64_t))(v205 + 8))(v206, v204);
                  goto LABEL_30;
                }
              }
              v181 = objc_msgSend(v207, "postalAddresses");
              v182 = sub_100032C48(&qword_100505860);
              v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v181, v182);

              if ((unint64_t)v149 >> 62)
              {
                if (v149 < 0)
                  v200 = v149;
                else
                  v200 = v149 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v149);
                v201 = _CocoaArrayWrapper.endIndex.getter(v200);
                swift_bridgeObjectRelease(v149);
                if (v201)
                  goto LABEL_74;
              }
              else if (*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_74:
                sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
                if ((v149 & 0xC000000000000001) != 0)
                  v183 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
                else
                  v183 = *(id *)(v149 + 32);
                v184 = v183;
                swift_bridgeObjectRelease(v149);
                v179 = objc_msgSend(v184, "value");

                v180 = objc_msgSend(v179, "ISOCountryCode");
LABEL_77:
                v185 = v180;

                v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
                goto LABEL_33;
              }
              goto LABEL_127;
            }
          }
          v175 = objc_msgSend(v207, "postalAddresses");
          v176 = sub_100032C48(&qword_100505860);
          v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v175, v176);

          if ((unint64_t)v149 >> 62)
          {
            if (v149 < 0)
              v198 = v149;
            else
              v198 = v149 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v149);
            v199 = _CocoaArrayWrapper.endIndex.getter(v198);
            swift_bridgeObjectRelease(v149);
            if (v199)
              goto LABEL_69;
          }
          else if (*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_69:
            sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
            if ((v149 & 0xC000000000000001) != 0)
              v177 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
            else
              v177 = *(id *)(v149 + 32);
            v178 = v177;
            swift_bridgeObjectRelease(v149);
            v179 = objc_msgSend(v178, "value");

            v180 = objc_msgSend(v179, "country");
            goto LABEL_77;
          }
LABEL_127:

          goto LABEL_97;
        }
      }
      v146 = v207;
      v171 = objc_msgSend(v207, "postalAddresses");
      v172 = sub_100032C48(&qword_100505860);
      v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v171, v172);

      if ((unint64_t)v149 >> 62)
      {
        if (v149 < 0)
          v196 = v149;
        else
          v196 = v149 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v149);
        v197 = _CocoaArrayWrapper.endIndex.getter(v196);
        swift_bridgeObjectRelease(v149);
        if (v197)
          goto LABEL_64;
      }
      else if (*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_64:
        sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
        if ((v149 & 0xC000000000000001) != 0)
          v173 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
        else
          v173 = *(id *)(v149 + 32);
        v174 = v173;
        swift_bridgeObjectRelease(v149);
        v157 = objc_msgSend(v174, "value");

        v158 = objc_msgSend(v157, "postalCode");
LABEL_50:
        v152 = v158;

LABEL_51:
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);

        goto LABEL_33;
      }
LABEL_96:

LABEL_97:
      swift_bridgeObjectRelease(v149);
      v143 = 0;
      goto LABEL_33;
    }
  }
  v146 = v207;
  v147 = objc_msgSend(v207, "emailAddresses");
  v148 = sub_100032C48(&qword_100505860);
  v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v147, v148);

  if ((unint64_t)v149 >> 62)
  {
    if (v149 < 0)
      v186 = v149;
    else
      v186 = v149 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v149);
    v187 = _CocoaArrayWrapper.endIndex.getter(v186);
    swift_bridgeObjectRelease(v149);
    if (!v187)
      goto LABEL_96;
  }
  else if (!*(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_96;
  }
  sub_100038D00(0, (v149 & 0xC000000000000001) == 0, v149);
  if ((v149 & 0xC000000000000001) != 0)
    v150 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v149);
  else
    v150 = *(id *)(v149 + 32);
  v151 = v150;
  swift_bridgeObjectRelease(v149);
  v152 = objc_msgSend(v151, "value");

  if (v152)
    goto LABEL_51;

LABEL_30:
  v143 = 0;
LABEL_33:
  sub_100032F94(v213);
  return v143;
}

void sub_100081E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;

  v2 = sub_1000357DC();
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v53 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000371CC();
  v5 = sub_100082EE8(v4);
  swift_bridgeObjectRelease(a1);
  sub_10003DEA8(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v7 = v6;
  v9 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  v10 = v9 + 1;
  if (v9 < v8 >> 1)
    goto LABEL_2;
LABEL_52:
  sub_10003DEA8(v8 > 1, v10, 1, v7);
  v7 = v51;
LABEL_2:
  v11 = 0;
  *(_QWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 8 * v9 + 32) = _swiftEmptyDictionarySingleton;
  v70 = (unint64_t *)v7;
  v12 = v5[8];
  v56 = v5;
  v57 = v5 + 8;
  v13 = 1 << *((_BYTE *)v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v10 = v14 & v12;
  v58 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v12) != 0)
  {
LABEL_5:
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v11 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if ((uint64_t)v8 >= v58)
      goto LABEL_46;
    v17 = v57[v8];
    ++v11;
    if (!v17)
    {
      v11 = v8 + 1;
      if ((uint64_t)(v8 + 1) >= v58)
        goto LABEL_46;
      v17 = v57[v11];
      if (!v17)
      {
        v11 = v8 + 2;
        if ((uint64_t)(v8 + 2) >= v58)
          goto LABEL_46;
        v17 = v57[v11];
        if (!v17)
        {
          v18 = v8 + 3;
          if (v18 >= v58)
            goto LABEL_46;
          v17 = v57[v18];
          if (!v17)
          {
            while (1)
            {
              v11 = v18 + 1;
              if (__OFADD__(v18, 1))
                break;
              if (v11 >= v58)
                goto LABEL_46;
              v17 = v57[v11];
              ++v18;
              if (v17)
                goto LABEL_19;
            }
            __break(1u);
LABEL_54:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return;
          }
          v11 = v18;
        }
      }
    }
LABEL_19:
    v10 = (v17 - 1) & v17;
    v16 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_20:
    v9 = *(_QWORD *)(v5[7] + 8 * v16);
    v63 = *(_QWORD *)(v9 + 16);
    if (v63)
      break;
    v21 = _swiftEmptyArrayStorage;
LABEL_42:
    sub_100046DEC();
    v70 = v21;
    v7 = (uint64_t)v21;
    if (v10)
      goto LABEL_5;
  }
  v59 = v10;
  v60 = v11;
  v19 = (uint64_t *)(v5[6] + 16 * v16);
  v7 = v19[1];
  v67 = *v19;
  v62 = v9 + 32;
  sub_1000470C4();
  sub_100046EC0();
  v20 = 0;
  v21 = _swiftEmptyArrayStorage;
  v61 = v9;
  while (1)
  {
    v8 = *(_QWORD *)(v9 + 16);
    if (v20 >= v8)
    {
      __break(1u);
      goto LABEL_51;
    }
    v5 = v70;
    v66 = v70[2];
    if (v66)
      break;
LABEL_39:
    if (++v20 == v63)
    {
      sub_1000356D4();
      sub_100046DEC();
      v5 = v56;
      v10 = v59;
      v11 = v60;
      goto LABEL_42;
    }
  }
  v64 = v20;
  v22 = (uint64_t *)(v62 + 16 * v20);
  v10 = v22[1];
  v65 = *v22;
  sub_1000371CC();
  swift_bridgeObjectRetain(v5);
  v23 = 0;
  while (1)
  {
    v24 = v5;
    v25 = v5[v23 + 4];
    sub_1000470C4();
    sub_1000371CC();
    v26 = sub_100046EC0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    v68 = (_QWORD *)v25;
    sub_100052C20(v67, v7);
    sub_1000840E4();
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      break;
    v33 = v28;
    v5 = v29;
    sub_100032C48(&qword_100505858);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      v34 = sub_100052C20(v67, v7);
      if ((v5 & 1) != (v35 & 1))
        goto LABEL_54;
      v33 = v34;
    }
    v36 = v68;
    if ((v5 & 1) != 0)
    {
      v37 = (_QWORD *)(v68[7] + 16 * v33);
      swift_bridgeObjectRelease(v37[1]);
      *v37 = v65;
      v37[1] = v10;
    }
    else
    {
      v68[(v33 >> 6) + 8] |= 1 << v33;
      v38 = (_QWORD *)(v36[6] + 16 * v33);
      *v38 = v67;
      v38[1] = v7;
      v39 = (_QWORD *)(v36[7] + 16 * v33);
      *v39 = v65;
      v39[1] = v10;
      v40 = v36[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_45;
      v36[2] = v42;
      sub_1000470C4();
    }
    sub_100046DEC();
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
    {
      sub_100084200(0, v21[2] + 1);
      v21 = v45;
    }
    v44 = v21[2];
    v43 = v21[3];
    if (v44 >= v43 >> 1)
    {
      sub_100084200(v43 > 1, v44 + 1);
      v21 = v46;
    }
    ++v23;
    v21[2] = v44 + 1;
    v21[v44 + 4] = (unint64_t)v36;
    v5 = v24;
    if (v66 == v23)
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v24);
      v9 = v61;
      v20 = v64;
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  swift_release(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v52, v55);
  v47 = sub_1000470C4();
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)sub_10003308C(12);
    *(_DWORD *)v50 = 134349056;
    v68 = *(_QWORD **)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v50 + 4, v50 + 12);
    sub_100046DEC();
    sub_100037174((void *)&_mh_execute_header, v48, v49, "Created %{public}ld permutations", v50);
    sub_100033080((uint64_t)v50);

  }
  else
  {

    sub_100046DEC();
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
  swift_beginAccess(&v70, &v68, 0, 0);
  sub_10004F0C0();
}

_QWORD *sub_1000823F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_100091748(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *v4;
      v12 = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v6 = sub_100032C48(&qword_100503C58);
      v7 = sub_100032C48(&qword_100503C48);
      swift_dynamicCast(&v13, &v12, v6, v7, 7);
      v8 = v13;
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100091748(0, v2[2] + 1, 1);
        v2 = v14;
      }
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_100091748(v9 > 1, v10 + 1, 1);
        v2 = v14;
      }
      v2[2] = v10 + 1;
      v2[v10 + 4] = v8;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_100082538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[120];

  v88 = a1;
  v1 = type metadata accessor for BindingsKeys(0);
  v2 = __chkstk_darwin(v1);
  v87 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v86 = (uint64_t)&v79 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v79 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v79 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v79 - v12;
  v85 = sub_100032C48(&qword_100503BA0);
  inited = swift_initStackObject(v85, v92);
  v82 = xmmword_1004098D0;
  *(_OWORD *)(inited + 16) = xmmword_1004098D0;
  sub_100083BF8((uint64_t)v13, enum case for BindingsKeys.street1(_:));
  v15 = sub_1000840F0();
  v17 = v16;
  sub_100083B7C((uint64_t)v13);
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v17;
  v18 = sub_100083BF8((uint64_t)v11, enum case for BindingsKeys.street2(_:));
  v84 = v11;
  v19 = BindingsKeys.rawValue.getter(v18);
  v21 = v20;
  sub_100083B7C((uint64_t)v11);
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v21;
  v22 = sub_100083BF8((uint64_t)v8, enum case for BindingsKeys.city(_:));
  v80 = v8;
  v23 = BindingsKeys.rawValue.getter(v22);
  v25 = v24;
  sub_100083B7C((uint64_t)v8);
  *(_QWORD *)(inited + 64) = v23;
  *(_QWORD *)(inited + 72) = v25;
  v26 = v86;
  sub_100083BF8(v86, enum case for BindingsKeys.state(_:));
  v27 = sub_100084184();
  v29 = v28;
  sub_100083B7C(v26);
  *(_QWORD *)(inited + 80) = v27;
  *(_QWORD *)(inited + 88) = v29;
  v30 = v87;
  sub_100083BF8(v87, enum case for BindingsKeys.postalCode(_:));
  v31 = sub_100084184();
  v33 = v32;
  sub_100083B7C(v30);
  *(_QWORD *)(inited + 96) = v31;
  *(_QWORD *)(inited + 104) = v33;
  v34 = v85;
  v35 = swift_initStackObject(v85, &v91);
  v81 = xmmword_100407820;
  *(_OWORD *)(v35 + 16) = xmmword_100407820;
  v36 = sub_100083BF8((uint64_t)v13, enum case for BindingsKeys.addressLat(_:));
  v79 = v13;
  v37 = BindingsKeys.rawValue.getter(v36);
  v39 = v38;
  sub_100083B7C((uint64_t)v13);
  *(_QWORD *)(v35 + 32) = v37;
  *(_QWORD *)(v35 + 40) = v39;
  v40 = (uint64_t)v84;
  sub_100083BF8((uint64_t)v84, enum case for BindingsKeys.addressLon(_:));
  v41 = sub_1000840F0();
  v43 = v42;
  sub_100083B7C(v40);
  *(_QWORD *)(v35 + 48) = v41;
  *(_QWORD *)(v35 + 56) = v43;
  v83 = sub_1000829E0(v88, (_QWORD *)inited, v35);
  swift_setDeallocating(v35);
  sub_1000566D8();
  swift_setDeallocating(inited);
  sub_1000566D8();
  v44 = swift_initStackObject(v34, &v90);
  *(_OWORD *)(v44 + 16) = v82;
  v45 = (uint64_t)v79;
  sub_100083BF8((uint64_t)v79, enum case for BindingsKeys.documentStreet1(_:));
  v46 = sub_1000840F0();
  v48 = v47;
  sub_100083B7C(v45);
  *(_QWORD *)(v44 + 32) = v46;
  *(_QWORD *)(v44 + 40) = v48;
  v49 = (uint64_t)v84;
  v50 = sub_100083BF8((uint64_t)v84, enum case for BindingsKeys.documentStreet2(_:));
  v51 = BindingsKeys.rawValue.getter(v50);
  v53 = v52;
  sub_100083B7C(v49);
  *(_QWORD *)(v44 + 48) = v51;
  *(_QWORD *)(v44 + 56) = v53;
  v54 = (uint64_t)v80;
  sub_100083BF8((uint64_t)v80, enum case for BindingsKeys.documentCity(_:));
  v55 = sub_100084184();
  v57 = v56;
  sub_100083B7C(v54);
  *(_QWORD *)(v44 + 64) = v55;
  *(_QWORD *)(v44 + 72) = v57;
  v58 = v86;
  v59 = sub_100083BF8(v86, enum case for BindingsKeys.documentState(_:));
  v60 = BindingsKeys.rawValue.getter(v59);
  v62 = v61;
  sub_100083B7C(v58);
  *(_QWORD *)(v44 + 80) = v60;
  *(_QWORD *)(v44 + 88) = v62;
  v63 = v87;
  v64 = sub_100083BF8(v87, enum case for BindingsKeys.documentPostalCode(_:));
  v65 = BindingsKeys.rawValue.getter(v64);
  v67 = v66;
  sub_100083B7C(v63);
  *(_QWORD *)(v44 + 96) = v65;
  *(_QWORD *)(v44 + 104) = v67;
  v68 = swift_initStackObject(v85, &v89);
  *(_OWORD *)(v68 + 16) = v81;
  sub_100083BF8(v45, enum case for BindingsKeys.documentAddressLat(_:));
  v69 = sub_1000840F0();
  v71 = v70;
  sub_100083B7C(v45);
  *(_QWORD *)(v68 + 32) = v69;
  *(_QWORD *)(v68 + 40) = v71;
  v72 = sub_100083BF8(v49, enum case for BindingsKeys.documentAddressLon(_:));
  v73 = BindingsKeys.rawValue.getter(v72);
  v75 = v74;
  sub_100083B7C(v49);
  *(_QWORD *)(v68 + 48) = v73;
  *(_QWORD *)(v68 + 56) = v75;
  v76 = v88;
  v77 = sub_1000829E0(v88, (_QWORD *)v44, v68);
  swift_setDeallocating(v68);
  sub_1000566D8();
  swift_setDeallocating(v44);
  sub_1000566D8();
  sub_100046E84();
  v78 = sub_100082BE8((uint64_t)v83, v76);
  sub_100082BE8((uint64_t)v77, v78);
  sub_10004F0C0();
}

_QWORD *sub_1000829E0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a2;
  swift_bridgeObjectRetain(a2);
  v6 = swift_bridgeObjectRetain(a1);
  LOBYTE(v4) = sub_10007D420(v6, v4);
  swift_bridgeObjectRelease(a1);
  if ((v4 & 1) == 0)
    return _swiftEmptyDictionarySingleton;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain(a3);
    v30 = a3;
    v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v10 = *(v8 - 1);
      v9 = *v8;
      swift_bridgeObjectRetain(*v8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v12 = sub_100052C20(v10, v9);
      v14 = _swiftEmptyDictionarySingleton[2];
      v15 = (v13 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        break;
      v17 = v12;
      v18 = v13;
      sub_100032C48(&qword_100505858);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16))
      {
        v19 = sub_100052C20(v10, v9);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_18;
        v17 = v19;
      }
      if ((v18 & 1) != 0)
      {
        v21 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
        swift_bridgeObjectRelease(v21[1]);
        *v21 = 0;
        v21[1] = 0xE000000000000000;
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1 << v17;
        v22 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v17);
        *v22 = v10;
        v22[1] = v9;
        v23 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
        *v23 = 0;
        v23[1] = 0xE000000000000000;
        v24 = _swiftEmptyDictionarySingleton[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_17;
        _swiftEmptyDictionarySingleton[2] = v26;
        swift_bridgeObjectRetain(v9);
      }
      v8 += 2;
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(0x8000000000000000);
      if (!--v7)
      {
        swift_bridgeObjectRelease(v30);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_10008FC3C((uint64_t)_swiftEmptyDictionarySingleton);
    v29 = v28;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    return (_QWORD *)v29;
  }
  return result;
}

uint64_t sub_100082BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_100082CDC(a1, (uint64_t)sub_1000831C8, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

unint64_t sub_100082C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505848;
  if (!qword_100505848)
  {
    v1 = type metadata accessor for ODIDeviceInfo(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ODIDeviceInfo, v1);
    atomic_store(result, (unint64_t *)&qword_100505848);
  }
  return result;
}

uint64_t type metadata accessor for BindingsGuesser(uint64_t a1)
{
  uint64_t result;

  result = qword_1005058C0;
  if (!qword_1005058C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BindingsGuesser);
  return result;
}

uint64_t sub_100082CDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59[8];

  v7 = (_QWORD *)a3;
  sub_1000832C4(a1, a2, a3, v59);
  sub_1000371CC();
  v9 = swift_retain(v7);
  sub_1000841EC(v9, v10, v11, v12, v13, v14, v15, v16, (uint64_t)v7, a1, v43, v44, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, v50,
    v51,
    v52,
    *((uint64_t *)&v52 + 1),
    v53,
    v54,
    v55,
    v56);
  v17 = v57;
  if (!v57)
  {
LABEL_14:
    swift_release(v41);
    swift_bridgeObjectRelease(v42);
    sub_10005495C(v59[0]);
    return swift_release(v59[6]);
  }
  while (1)
  {
    v18 = v56;
    sub_1000351FC(&v58, (uint64_t)&v52);
    v19 = sub_1000840A4();
    sub_1000840E4();
    if (__OFADD__(v21, v22))
      break;
    v23 = v20;
    if (v7[3] >= v21 + v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v20 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_100032C48((uint64_t *)&unk_100504C80);
        v7 = a5;
        _NativeDictionary.copy()();
        if ((v23 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      v7 = a5;
      sub_10005E3D4();
      v24 = sub_1000840A4();
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_17;
      v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_9:
        v26 = 5 * v19;
        sub_100032EB8(*(_QWORD *)(*a5 + 56) + 8 * v26, (uint64_t)&v43);
        sub_100032EB8((uint64_t)&v43, (uint64_t)&v48);
        sub_100032F94(&v43);
        sub_100032F94(&v52);
        swift_bridgeObjectRelease(v17);
        v27 = (_QWORD *)(*(_QWORD *)(*a5 + 56) + 8 * v26);
        sub_100032F94(v27);
        v28 = sub_1000351FC(&v48, (uint64_t)v27);
        goto LABEL_13;
      }
    }
    v7 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v36 = (_QWORD *)(v7[6] + 16 * v19);
    *v36 = v18;
    v36[1] = v17;
    v28 = sub_1000351FC(&v52, v7[7] + 40 * v19);
    v37 = v7[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_16;
    v7[2] = v39;
LABEL_13:
    sub_1000841EC(v28, v29, v30, v31, v32, v33, v34, v35, v41, v42, v43, v44, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, v50,
      v51,
      v52,
      *((uint64_t *)&v52 + 1),
      v53,
      v54,
      v55,
      v56);
    v17 = v57;
    a4 = 1;
    if (!v57)
      goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t *sub_100082EE8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v12;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100074B20(0, v6, v8);
    v9 = sub_100083044(v8, v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_100074B20(0, v6, v10);
    v2 = sub_100083044(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

unint64_t *sub_100083044(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_10009E318(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_10009E318(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_10009E318(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 16))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_10009E318(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_10009E318(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_10009E318(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10008318C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100032EB8(a4, a1);
  swift_bridgeObjectRetain(a3);
  return a2;
}

uint64_t sub_1000831C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_10008318C((uint64_t)(a2 + 2), *a1, a1[1], (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000831FC(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "identifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100083268(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1000832C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100083300@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_100032EB8(*(_QWORD *)(v3 + 56) + 40 * v10, (uint64_t)v26);
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v18 < v15)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_1000834EC((uint64_t)&v25, (uint64_t)v23);
  if (*((_QWORD *)&v23[0] + 1))
  {
    v21[0] = v23[0];
    v21[1] = v23[1];
    v21[2] = v23[2];
    v22 = v24;
    v19(v21);
    return sub_100083534((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1000834EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100504CE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083534(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_100505850);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for BindingsGuesserSourceFactory()
{
  return &type metadata for BindingsGuesserSourceFactory;
}

uint64_t *sub_100083584(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    v10 = *(int *)(a3 + 24);
    v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v11;
    (**(void (***)(void))(v11 - 8))();
  }
  return a1;
}

uint64_t sub_100083648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_100032F94((_QWORD *)(a1 + *(int *)(a2 + 20)));
  return sub_100032F94((_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100083698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  v9 = *(int *)(a3 + 24);
  v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v10;
  (**(void (***)(void))(v10 - 8))();
  return a1;
}

uint64_t sub_100083730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  sub_100057D9C((_QWORD *)(a1 + *(int *)(a3 + 20)), (_QWORD *)(a2 + *(int *)(a3 + 20)));
  sub_100057D9C((_QWORD *)(a1 + *(int *)(a3 + 24)), (_QWORD *)(a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t sub_1000837A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  return a1;
}

uint64_t sub_100083824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_100032F94((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_100032F94((_QWORD *)(a1 + v11));
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  return a1;
}

uint64_t sub_1000838C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000838D0);
}

uint64_t sub_1000838D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000357DC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_1000352C8(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100083948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083954);
}

uint64_t sub_100083954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000357DC();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100037020(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1000839C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100083A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 144) = v2;
  return sub_100052C20(v0, v1);
}

uint64_t sub_100083A50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100032EFC(v0, v2);
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
}

uint64_t sub_100083A70@<X0>(uint64_t (*a1)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 208));
}

uint64_t sub_100083A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_100083A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_bridgeObjectRelease(v3);
}

_QWORD *sub_100083AB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  v2[79] = a2;
  v2[78] = 0;
  v2[19] = *(_QWORD *)(v2[76] + 32);
  return sub_100032EFC(a1, a1[3]);
}

uint64_t sub_100083AE0()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 304));
}

uint64_t sub_100083AF0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100083B0C()
{
  return ((uint64_t (*)(void))BindingsHelpers.getStaticBindings(bindings:excludeAppleID:))();
}

uint64_t sub_100083B28()
{
  return ((uint64_t (*)(void))static ODIDeviceInfo.shared.getter)();
}

uint64_t sub_100083B44()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_100083B60()
{
  return ((uint64_t (*)(void))dispatch thunk of ODIAccountManagerProtocol.getAccount(with:))();
}

uint64_t sub_100083B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100083B84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100083B9C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
}

uint64_t sub_100083BB4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 280));
}

uint64_t sub_100083BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100083BDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100083BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100083C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v4 + 344) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v2);
  v5 = *(uint64_t (**)(uint64_t))(a2 + 16);
  *(_QWORD *)(v4 + 352) = v5;
  return v5(v3);
}

uint64_t sub_100083C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(a1 + 8 * v1 + 32);
  *(_QWORD *)(v2 + 424) = result;
  *(_QWORD *)(v2 + 432) = *(_QWORD *)(result + 16);
  return result;
}

void sub_100083C34()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_100083C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, unint64_t, _QWORD);

  return v5(*(_QWORD *)(v4 + 200), a1 + ((v3 + 32) & ~(unint64_t)v3) + v2 * a2, *(_QWORD *)(v4 + 184));
}

uint64_t sub_100083C90()
{
  return static ODIAccountManager.shared.getter();
}

uint64_t sub_100083C9C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100083CD4()
{
  void *v0;

}

uint64_t sub_100083CE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t sub_100083D00()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t sub_100083D1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 608) = a1;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_100083D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 192);
  *(_DWORD *)(v1 + 672) = *(_DWORD *)(v2 + 80);
  *(_QWORD *)(v1 + 440) = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v1 + 448) = *(_QWORD *)(v2 + 16);
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100083D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_beginAccess(a16, a10, 1, 0);
}

void sub_100083DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 + 376) = a17;
  *(_QWORD *)(v18 + 384) = v17;
}

void sub_100083DC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[45] = v0;
  v1[15] = 0;
  v1[16] = 0xE000000000000000;
  v1[46] = *(_QWORD *)(v2 + 16);
}

uint64_t sub_100083E0C(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 3);
}

uint64_t sub_100083E14()
{
  return type metadata accessor for ODIAccountManager(0);
}

uint64_t sub_100083E1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4[39] = a2;
  v4[40] = v3;
  v4[41] = *(_QWORD *)(*(_QWORD *)(result + 48) + 16 * v2);
  return result;
}

uint64_t sub_100083E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t sub_100083E50()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_100083E5C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100036778(v0, v1, (uint64_t *)(v2 - 88));
}

void sub_100083E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DF90(a1, a2, 1, v2);
}

void sub_100083E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DF90(a1, a2, 1, v2);
}

void sub_100083E84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_100083EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100083EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;

  return a15(v15, v16);
}

uint64_t sub_100083EC4()
{
  return type metadata accessor for BindingsGuesser(0);
}

uint64_t sub_100083ED0()
{
  uint64_t v0;

  return sub_1000809B0(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

unint64_t sub_100083EDC()
{
  uint64_t v0;

  return sub_100052C20(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

uint64_t sub_100083EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v23 + 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a22, v24, v22);
}

uint64_t sub_100083F00()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 280));
}

uint64_t sub_100083F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(a1 + 24);
  *(_DWORD *)(v2 + 676) = v3;
  return v1 + v3;
}

uint64_t sub_100083F28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 96))();
}

uint64_t sub_100083F30()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_100083F38(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 312) = a1;
  *(_QWORD *)(v2 + 320) = v1;
}

uint64_t sub_100083F54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100036778(a1, v3, a3);
}

uint64_t sub_100083F5C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100083F68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

id sub_100083F84(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(v2 + 328);
  v4 = *(_QWORD *)(v2 + 336);
  sub_100032F94(a1);
  return sub_100080424(v3, v4, v1);
}

uint64_t sub_100083FA8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100083FB0()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100083FB8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100083FC4(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

BOOL sub_100083FD0()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

void sub_100084004(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[65] = a1;
  v8[63] = *(_QWORD *)(v11 - 96);
  v8[64] = a8;
  v8[61] = v10;
  v8[62] = v9;
}

void sub_10008401C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 528) = a2;
}

void sub_10008402C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 552) = a2;
}

uint64_t sub_10008403C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 424);
}

void sub_10008404C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_100084064()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10008406C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
}

uint64_t sub_10008408C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100084094(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 128));
}

unint64_t sub_1000840A4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100052C20(v1, v0);
}

void sub_1000840B4()
{
  void *v0;

}

uint64_t sub_1000840C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 96))(v0, v1);
}

uint64_t sub_1000840D4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100036778(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000840F0()
{
  return BindingsKeys.rawValue.getter();
}

uint64_t sub_1000840F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

BOOL sub_100084108(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100084118()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_100032EFC(v2, v1);
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

_QWORD *sub_100084138()
{
  uint64_t v0;

  return sub_1000823F8(v0);
}

void sub_100084140()
{
  void *v0;

}

uint64_t sub_100084148()
{
  return static ODIAccountManager.shared.getter();
}

uint64_t sub_100084158()
{
  return type metadata accessor for ODIDeviceInfo(0);
}

uint64_t sub_10008417C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  return sub_10007D634(a1, a16);
}

uint64_t sub_100084184()
{
  return BindingsKeys.rawValue.getter();
}

uint64_t sub_1000841A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000841AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 336);
  *(_QWORD *)(v2 + 16) = a1;
  return swift_bridgeObjectRetain(v3);
}

__n128 sub_1000841B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  __n128 result;

  *(_QWORD *)(v21 - 96) = v19;
  *(_QWORD *)(v21 - 88) = a1;
  result = a19;
  *v20 = a19.n128_u32[0];
  return result;
}

void sub_1000841CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 64) |= v1;
}

uint64_t sub_1000841E0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000841EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  return sub_100083300((uint64_t)&a26);
}

uint64_t sub_1000841F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100036778(a1, v3, a3);
}

void sub_100084200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DEA8(a1, a2, 1, v2);
}

void sub_10008420C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DEBC(a1, a2, 1, v2);
}

uint64_t sub_100084218(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 576) = result;
  return result;
}

void sub_100084224()
{
  uint64_t v0;

  sub_100081E98(v0);
}

void sub_100084230(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v1;
}

void sub_100084254()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 616) = *(_QWORD *)(v0 + 16);
}

uint64_t sub_10008426C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    LODWORD(v2) = 0;
    v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~(_DWORD)v2) == 0)
        v4 = 0;
      v2 = v4 | v2;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t sub_1000842C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t sub_100084310(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_100084318(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_100084320(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

uint64_t sub_100084328(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_100084330(unsigned __int8 a1)
{
  char *v1;
  char v2;

  v2 = *v1;
  if ((*v1 & a1) != 0)
    *v1 = v2 & ~a1;
  return sub_100084704((v2 & a1));
}

uint64_t sub_100084358(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = *v1 & a1;
  if (result)
    *v1 &= ~a1;
  return result;
}

uint64_t sub_10008437C(char a1)
{
  char *v1;
  char v2;

  v2 = *v1;
  *v1 |= a1;
  return sub_100084704((v2 & a1));
}

uint64_t sub_10008439C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1000843B4(uint64_t result)
{
  _BYTE *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_1000843C4(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_1000843D4(int a1, int a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000843DC(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000843E4(uint64_t result)
{
  _BYTE *v1;

  *v1 &= ~(_BYTE)result;
  return result;
}

uint64_t sub_1000843F4(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

uint64_t sub_100084404(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  sub_100032EFC(a1, a1[3]);
  v4 = sub_100047028();
  dispatch thunk of Decoder.singleValueContainer()(v4);
  if (v2)
  {
    sub_100032F94(a1);
  }
  else
  {
    sub_100032EFC(v7, v7[3]);
    v5 = sub_100047028();
    v1 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5);
    sub_100032F94(v7);
    sub_100032F94(a1);
  }
  return v1;
}

uint64_t sub_1000844A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100084404(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1000844CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100084688();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100084518@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = j___s3asd14RavioliManagerC14monitoringTask33_B5E58E12329358626A8B49370FDD58A1LLScTyyts5NeverOGSgvpfi();
  *a1 = result;
  return result;
}

BOOL sub_10008453C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100040870(*a1, *v1);
}

uint64_t sub_100084548@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10003B890(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100084574@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100084328(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000845A0(_QWORD *a1, uint64_t *a2)
{
  return sub_100040864(a1, *a2);
}

uint64_t sub_1000845A8(uint64_t *a1)
{
  return sub_10004087C(*a1);
}

uint64_t sub_1000845B0(uint64_t *a1)
{
  return sub_100040868(*a1);
}

BOOL sub_1000845B8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100040878(*a1, *v1);
}

BOOL sub_1000845C4(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100040874(*a1, *v1);
}

ValueMetadata *type metadata accessor for DataProtectionClassOptions()
{
  return &type metadata for DataProtectionClassOptions;
}

uint64_t sub_1000845E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000842C0(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100084608()
{
  unint64_t result;

  result = qword_100505900;
  if (!qword_100505900)
  {
    result = swift_getWitnessTable(&unk_1004099DC, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100505900);
  }
  return result;
}

unint64_t sub_100084648()
{
  unint64_t result;

  result = qword_100505908;
  if (!qword_100505908)
  {
    result = swift_getWitnessTable(&unk_1004099AC, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100505908);
  }
  return result;
}

unint64_t sub_100084688()
{
  unint64_t result;

  result = qword_100505910;
  if (!qword_100505910)
  {
    result = swift_getWitnessTable(&unk_100409A04, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100505910);
  }
  return result;
}

unint64_t sub_1000846C8()
{
  unint64_t result;

  result = qword_100505918;
  if (!qword_100505918)
  {
    result = swift_getWitnessTable(&unk_100409A3C, &type metadata for DataProtectionClassOptions);
    atomic_store(result, (unint64_t *)&qword_100505918);
  }
  return result;
}

uint64_t sub_100084704@<X0>(int a1@<W8>)
{
  int v1;

  return a1 | (v1 << 8);
}

uint64_t sub_100084710@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_100032C48(&qword_100503920);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "stringForKey:", v7);

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    URL.init(string:)(v9, v11);
    swift_bridgeObjectRelease(v11);
    v12 = type metadata accessor for URL(0);
    if (sub_1000352C8((uint64_t)v6, 1, v12) == 1)
    {
      sub_1000774C4((uint64_t)v6, &qword_100503920);
      if (qword_100503420 != -1)
        swift_once(&qword_100503420, sub_1000330AC);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_1000352B0(v13, (uint64_t)qword_1005185E8);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        v24 = v18;
        *(_DWORD *)v17 = 136315138;
        v23 = sub_100036778(0xD000000000000014, 0x80000001003E3510, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 4, v17 + 12);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid URL in defaults for key: %s", v17, 0xCu);
        swift_arrayDestroy(v18, 1);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }

      if (qword_100503428 != -1)
        swift_once(&qword_100503428, sub_100033618);
      v19 = sub_1000352B0(v12, (uint64_t)qword_100518600);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, v19, v12);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a2, v6, v12);
    }
  }
  else
  {
    if (qword_100503428 != -1)
      swift_once(&qword_100503428, sub_100033618);
    v21 = type metadata accessor for URL(0);
    v22 = sub_1000352B0(v21, (uint64_t)qword_100518600);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a2, v22, v21);
  }
}

void sub_100084A3C(void *a1, float a2)
{
  uint64_t v3;
  NSString v4;
  float v5;

  v5 = a2;
  v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v5, &type metadata for Float);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setObject:forKey:", v3, v4);
  swift_unknownObjectRelease(v3);

}

void sub_100084AC4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  unint64_t v7;

  v6 = a1;
  v7 = a2;
  sub_100033DD0(a1, a2);
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v6, &type metadata for Data);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setObject:forKey:", v4, v5, v6, v7);
  swift_unknownObjectRelease(v4);

}

void sub_100084B58(void *a1, double a2)
{
  uint64_t v3;
  NSString v4;
  double v5;

  v5 = a2;
  v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v5, &type metadata for Double);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setObject:forKey:", v3, v4);
  swift_unknownObjectRelease(v3);

}

uint64_t *ASDConfigurationManager.shared.unsafeMutableAddressor()
{
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  return &static ASDConfigurationManager.shared;
}

uint64_t sub_100084C20@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  _OWORD v14[6];

  v2 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  JSONDecoder.init()();
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_1000602A8(v3, (uint64_t)v13);

  v4 = v13[0];
  v5 = v13[1];
  v6 = sub_10008C9EC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, &type metadata for OuterConfig, v4, v5, &type metadata for OuterConfig, v6);
  sub_100033030(v4, v5);
  result = sub_1000357E4();
  v8 = v14[1];
  v9 = v14[2];
  v10 = v14[3];
  v11 = v14[4];
  v12 = v14[5];
  *a1 = v14[0];
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  a1[5] = v12;
  return result;
}

uint64_t sub_100084DBC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_100084DE0 + 4 * byte_100409BB0[a2 >> 62]))();
}

BOOL sub_100084DE0(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0;
}

void sub_100084E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[4];

  v2 = sub_10008EA70();
  v3 = sub_10008EBE0(v1, 1, v2);
  if (v4)
  {
    sub_10008EB7C(v3, &qword_1005039D8);
  }
  else
  {
    TaskPriority.rawValue.getter(v3);
    sub_10008E9EC();
  }
  v5 = *(_QWORD *)(v0 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
    swift_unknownObjectRetain(v5);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
    v10 = v9;
    swift_unknownObjectRelease(v5);
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = sub_100032C48(&qword_100505BC0);
  if (v10 | v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    v12 = v13;
    v13[2] = v8;
    v13[3] = v10;
  }
  else
  {
    v12 = 0;
  }
  sub_10008EACC(v11, (uint64_t)v12, v11);
  sub_100040A2C();
}

void sub_100084EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[4];

  v2 = sub_10008EA70();
  v3 = sub_10008EBE0(v1, 1, v2);
  if (v4)
  {
    sub_10008EB7C(v3, &qword_1005039D8);
  }
  else
  {
    TaskPriority.rawValue.getter(v3);
    v5 = sub_10008E9EC();
  }
  v6 = *(_QWORD *)(v0 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v0 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
    swift_unknownObjectRetain(v6);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
    v11 = v10;
    v5 = swift_unknownObjectRelease(v6);
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  if (v11 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    v12 = v13;
    v13[2] = v9;
    v13[3] = v11;
  }
  else
  {
    v12 = 0;
  }
  sub_10008EACC(v5, (uint64_t)v12, (uint64_t)&type metadata for () + 8);
  sub_100040A2C();
}

NSString sub_100084FC4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1005186B8 = (uint64_t)result;
  return result;
}

uint64_t sub_100084FF8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100505920);
  sub_1000352B0(v0, (uint64_t)qword_100505920);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000010, 0x80000001003E5050);
}

void sub_100085078()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10008509C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 6583137 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(6583137, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100085110()
{
  return 6583137;
}

uint64_t sub_100085120(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[96];
  _BYTE v15[96];

  v2 = v1;
  v4 = sub_100032C48(&qword_100505CE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1[3];
  v9 = a1[4];
  sub_100032EFC(a1, v8);
  v10 = sub_10008E168();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OuterConfig.CodingKeys, &type metadata for OuterConfig.CodingKeys, v10, v8, v9);
  sub_100046118(v2, (uint64_t)v15, &qword_100503A78);
  sub_100046118((uint64_t)v15, (uint64_t)v14, &qword_100503A78);
  v11 = sub_10008E1E0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, v12, v4, &unk_1004D22E0, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100085244@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v5 = sub_100032C48(&qword_100505CD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032EFC(a1, v9);
  v11 = sub_10008E168();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OuterConfig.CodingKeys, &type metadata for OuterConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100032F94(a1);
  v12 = sub_10008E1A4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1004D22E0, v13, v5, &unk_1004D22E0, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v25;
  v23 = v24;
  v20 = v27;
  v21 = v26;
  v19 = v28;
  v14 = v29;
  v15 = v30;
  result = sub_100032F94(a1);
  v17 = v22;
  *(_OWORD *)a2 = v23;
  *(_OWORD *)(a2 + 16) = v17;
  v18 = v20;
  *(_OWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 48) = v18;
  *(_OWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v15;
  return result;
}

void sub_1000853BC(uint64_t a1)
{
  sub_10008589C(a1);
}

uint64_t sub_1000853DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008509C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100085404(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E168();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008542C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E168();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100085454@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[96];

  result = (void *)sub_100085244(a1, (uint64_t)v5);
  if (!v2)
    return memcpy(a2, v5, 0x60uLL);
  return result;
}

uint64_t sub_10008549C(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[96];

  memcpy(v4, v1, sizeof(v4));
  return sub_100085120(a1);
}

uint64_t sub_1000854EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 7366003 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7366003, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7759218 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7759218, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000855C0(char a1)
{
  if ((a1 & 1) != 0)
    return 7759218;
  else
    return 7366003;
}

void sub_1000855E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  sub_100046C44();
  a22 = v25;
  a23 = v26;
  a10 = v27;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = sub_100032C48(&qword_100505CB0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_10006EE68();
  v36 = v33[3];
  v37 = v33[4];
  sub_100032EFC(v33, v36);
  v38 = sub_10008E028();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ASDConfig.AirlineNameFormat.CodingKeys, &type metadata for ASDConfig.AirlineNameFormat.CodingKeys, v38, v36, v37);
  a13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v31, v29, &a13, v34);
  if (!v23)
  {
    a12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a10, &a12, v34);
  }
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v24, v34);
  sub_100046BF8();
}

uint64_t sub_1000856D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = sub_100032C48(&qword_100505C70);
  sub_100046E54();
  __chkstk_darwin(v4);
  sub_100054E18();
  v5 = a1[3];
  v6 = a1[4];
  sub_100032EFC(a1, v5);
  v7 = sub_10008E028();
  sub_10008EBC4((uint64_t)&type metadata for ASDConfig.AirlineNameFormat.CodingKeys, (uint64_t)&type metadata for ASDConfig.AirlineNameFormat.CodingKeys, v7, v5);
  if (v1)
  {
    sub_100046C94();
  }
  else
  {
    v11 = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)(&v11, v3);
    sub_10008E954(v6, v9);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v10, v3);
    sub_10008E908();
    sub_100032F94(a1);
    sub_100046DEC();
  }
  return v6;
}

uint64_t sub_10008580C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6C62617369447369 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease(0xEA00000000006465);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C62617369447369, 0xEA00000000006465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_10008589C(uint64_t a1)
{
  sub_100046FF8(a1);
  sub_10008EB5C();
  sub_100046F54();
  sub_100058ED8();
}

uint64_t sub_1000858C0()
{
  return 0x6C62617369447369;
}

void sub_1000858DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_100032C48(&qword_100505CB8);
  sub_100046E54();
  __chkstk_darwin(v4);
  sub_100054E18();
  sub_10008E9CC();
  v5 = sub_10008E064();
  sub_10008E974((uint64_t)&type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys, v6, v5);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v7, v3);
  sub_10008E908();
  sub_100046E70();
}

uint64_t sub_10008596C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;

  v5 = sub_100032C48(&qword_100505C80);
  sub_100046E54();
  __chkstk_darwin(v6);
  sub_10006EE68();
  v7 = a1[3];
  v8 = sub_100032EFC(a1, v7);
  v9 = sub_10008E064();
  v10 = sub_10008EBC4((uint64_t)&type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys, (uint64_t)&type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys, v9, v7);
  if (!v1)
  {
    v8 = KeyedDecodingContainer.decode(_:forKey:)(v10, v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  }
  sub_100046C94();
  return v8 & 1;
}

uint64_t sub_100085A4C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x5255656372756F73 && a2 == 0xE90000000000004CLL)
  {
    v5 = 0xE90000000000004CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5255656372756F73, 0xE90000000000004CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7246657461647075 && a2 == 0xEF79636E65757165)
  {
    v8 = 0xEF79636E65757165;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7246657461647075, 0xEF79636E65757165, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001003E5160;
    if (a2 == 0x80000001003E5160)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003E5160, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001003E41B0)
  {
    v10 = 0x80000001003E41B0;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001003E41B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_27;
  }
  if (a1 == 0xD000000000000025 && a2 == 0x80000001003E5180)
  {
    swift_bridgeObjectRelease(0x80000001003E5180);
    return 4;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000001003E5180, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100085C7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100085CB4 + 4 * byte_100409BB4[a1]))(0x5255656372756F73, 0xE90000000000004CLL);
}

uint64_t sub_100085CB4()
{
  return 0x7246657461647075;
}

unint64_t sub_100085CD8()
{
  return 0xD000000000000010;
}

unint64_t sub_100085CF4()
{
  return 0xD000000000000015;
}

void sub_100085D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;

  sub_100046C44();
  a25 = v27;
  a26 = v28;
  v44 = v29;
  v43 = v30;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = sub_100032C48(&qword_100505CC0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = v36[3];
  v39 = v36[4];
  sub_100032EFC(v36, v40);
  v41 = sub_10008E0A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys, &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys, v41, v40, v39);
  a16 = 0;
  sub_10008EAA4(v34, v32, (uint64_t)&a16);
  if (!v26)
  {
    a15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v44 & 1, &a15, v37);
    sub_10008EB3C();
    sub_10008E8DC(v42, (uint64_t)&a14);
    a13 = 3;
    sub_10008E8DC(HIWORD(v44), (uint64_t)&a13);
    a12 = 4;
    sub_10008E8DC(HIBYTE(v44), (uint64_t)&a12);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  sub_100046BF8();
}

uint64_t sub_100085E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v13[3];
  uint64_t v14;
  uint64_t v15;

  sub_100046C44();
  v14 = v1;
  v15 = v2;
  v4 = v3;
  v5 = sub_100032C48(&qword_100505C90);
  __chkstk_darwin(v5);
  v6 = v4[3];
  v7 = v4[4];
  sub_100032EFC(v4, v6);
  v8 = sub_10008E0A0();
  sub_10008EBC4((uint64_t)&type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys, (uint64_t)&type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys, v8, v6);
  if (v0)
  {
    sub_100032F94(v4);
  }
  else
  {
    v13[2] = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13[2], v5);
    sub_10008E954(v7, v10);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13[1], v5);
    sub_10008EB3C();
    sub_10008E994((uint64_t)v13);
    v12 = 3;
    sub_10008E994((uint64_t)&v12);
    v11 = 4;
    sub_10008E994((uint64_t)&v11);
    sub_10008E964();
    sub_100032F94(v4);
    sub_100039998();
  }
  return v7;
}

uint64_t sub_100086048(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  char v13;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x43786F62646E6173 && a2 == 0xEE006C656E6E6168)
  {
    v8 = 0xEE006C656E6E6168;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x43786F62646E6173, 0xEE006C656E6E6168, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x80000001003E51B0;
    if (a2 == 0x80000001003E51B0)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003E51B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 1936680295 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1936680295, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x6F6973756C637865 && a2 == 0xED000065646F4D6ELL)
  {
    swift_bridgeObjectRelease(0xED000065646F4D6ELL);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973756C637865, 0xED000065646F4D6ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100086294()
{
  return 5;
}

uint64_t sub_10008629C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000862D4 + 4 * byte_100409BB9[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000862D4()
{
  return 0x43786F62646E6173;
}

unint64_t sub_1000862F8()
{
  return 0xD000000000000011;
}

uint64_t sub_100086314()
{
  return 1936680295;
}

uint64_t sub_100086324()
{
  return 0x6F6973756C637865;
}

void sub_100086348()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v0;
  v4 = sub_100032C48(&qword_100505CC8);
  sub_100046E54();
  __chkstk_darwin(v5);
  sub_10008E9CC();
  v6 = sub_10008E0DC();
  sub_10008E974((uint64_t)&type metadata for ASDConfig.ServiceAreaConfig.CodingKeys, v7, v6);
  v8 = *v0;
  v9 = v0[1];
  v22 = 0;
  sub_10008EAA4(v8, v9, (uint64_t)&v22);
  if (!v1)
  {
    v10 = v0[2];
    v11 = v0[3];
    v21 = 1;
    sub_10008EA94(v10, v11, (uint64_t)&v21);
    sub_10008EB3C();
    sub_10008EA94(v12, v13, (uint64_t)&v20);
    v19 = v0[6];
    v18 = 3;
    v14 = sub_100032C48(&qword_100503E60);
    sub_10008E118((uint64_t)&qword_100503E80);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v4, v14, v15);
    v16 = *((unsigned __int8 *)v3 + 56);
    v17 = 4;
    sub_10008E8DC(v16, (uint64_t)&v17);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100046E70();
}

void sub_1000864A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_100046C44();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  v30 = v29;
  v31 = sub_100032C48(&qword_100505CA0);
  sub_10008EAF8();
  __chkstk_darwin(v32);
  sub_10008EAB4();
  v33 = v28[4];
  sub_100032EFC(v28, v28[3]);
  sub_10008E0DC();
  sub_10008EB84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v34, v35, v36, v37, v33);
  if (v24)
  {
    sub_100046C94();
  }
  else
  {
    a14 = 0;
    sub_10008E944();
    v40 = KeyedDecodingContainer.decode(_:forKey:)(v38, v39);
    v42 = v41;
    v55 = v40;
    sub_10008E954(v40, v41);
    sub_10008E944();
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v43);
    v56 = v45;
    v54 = v44;
    sub_10008EB3C();
    swift_bridgeObjectRetain();
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12);
    v47 = v46;
    v48 = sub_100032C48(&qword_100503E60);
    a11 = 3;
    sub_10008E118((uint64_t)&qword_100503E68);
    v50 = v49;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, &a11, v31, v48, v50);
    swift_bridgeObjectRetain();
    sub_10008E944();
    LOBYTE(v48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v51, v52);
    sub_10008E8AC();
    sub_100046C94();
    sub_10006E934();
    sub_100035714();
    swift_bridgeObjectRelease(v56);
    sub_100039998();
    *(_QWORD *)v30 = v55;
    *(_QWORD *)(v30 + 8) = v42;
    *(_QWORD *)(v30 + 16) = v54;
    *(_QWORD *)(v30 + 24) = v56;
    *(_QWORD *)(v30 + 32) = v53;
    *(_QWORD *)(v30 + 40) = v47;
    *(_QWORD *)(v30 + 48) = v57;
    *(_BYTE *)(v30 + 56) = v48;
  }
  sub_100046BF8();
}

uint64_t sub_100086748()
{
  char *v0;

  return sub_1000855C0(*v0);
}

uint64_t sub_100086750@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000854EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086774(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E028();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008679C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E028();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000867C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000856D8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

#error "100086800: call analysis failed (funcsize=7)"

void sub_10008680C(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_10008EB5C();
  sub_100046F54();
  sub_100058ED8();
}

uint64_t sub_100086838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008580C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100086860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E064();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086888(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E064();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000868B0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10008596C(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

void sub_1000868DC(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000858DC(a1, *v1);
}

uint64_t sub_1000868F8()
{
  unsigned __int8 *v0;

  return sub_100085C7C(*v0);
}

uint64_t sub_100086900@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100085A4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E0A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008694C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E0A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100086974@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = sub_100085E84();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6 & 1;
    *(_BYTE *)(a1 + 25) = BYTE1(v6);
    *(_BYTE *)(a1 + 26) = BYTE2(v6);
    *(_BYTE *)(a1 + 27) = HIBYTE(v6);
  }
  return result;
}

#error "1000869F4: call analysis failed (funcsize=17)"

uint64_t sub_100086A04()
{
  unsigned __int8 *v0;

  return sub_10008629C(*v0);
}

uint64_t sub_100086A0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100086048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086A30@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100086294();
  *a1 = result;
  return result;
}

uint64_t sub_100086A54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E0DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008E0DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100086AA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  double result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[25];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t vars0;
  uint64_t vars8;

  sub_1000864A0(a1, a2, a3, a4, a5, a6, a7, a8, v12, v14, SBYTE4(v14), SBYTE5(v14), SBYTE6(v14), SHIBYTE(v14), v15, v17, v18, v20, v21,
    v22,
    v23,
    v24,
    vars0,
    vars8);
  if (!v9)
  {
    *a9 = v13;
    a9[1] = v16;
    a9[2] = *(_OWORD *)v19;
    result = *(double *)&v19[9];
    *(_OWORD *)((char *)a9 + 41) = *(_OWORD *)&v19[9];
  }
  return result;
}

void sub_100086AEC()
{
  sub_100086348();
}

uint64_t sub_100086B00(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v15;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001003E5070;
    if (a2 == 0x80000001003E5070)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003E5070, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x80000001003E5090)
  {
    v6 = 0x80000001003E5090;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001003E5090, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000020 && a2 == 0x80000001003E50B0)
  {
    v7 = 0x80000001003E50B0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000001003E50B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001003E50E0)
  {
    v8 = 0x80000001003E50E0;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001003E50E0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001003E5100)
  {
    v9 = 0x80000001003E5100;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001003E5100, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x4D32566568636163 && a2 == 0xED00006567417861)
  {
    v11 = 0xED00006567417861;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4D32566568636163, 0xED00006567417861, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000011)
  {
    v12 = 0x80000001003E5120;
    if (a2 == 0x80000001003E5120)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003E5120, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003E5140)
  {
    v13 = 0x80000001003E5140;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003E5140, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x4165636976726573 && a2 == 0xEC00000073616572)
  {
    swift_bridgeObjectRelease(0xEC00000073616572);
    return 8;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4165636976726573, 0xEC00000073616572, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_100086E98()
{
  return 9;
}

void sub_100086EA0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100046FF8(a1);
  Hasher._combine(_:)(v1);
  sub_100046F54();
  sub_100058ED8();
}

uint64_t sub_100086ED0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100086F08 + 4 * byte_100409BBE[a1]))(0xD000000000000011, 0x80000001003E5070);
}

uint64_t sub_100086F08(uint64_t a1)
{
  return a1 + 13;
}

uint64_t sub_100086F90()
{
  return 0x4165636976726573;
}

void sub_100086FB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[20];
  _BYTE v20[4];
  _BYTE v21[8];
  _BYTE v22[15];
  char v23;
  _BYTE v24[16];
  _BYTE v25[8];

  v3 = sub_100032C48(&qword_100505A80);
  sub_100046E54();
  __chkstk_darwin(v4);
  sub_10008E9CC();
  v5 = sub_10008C3F0();
  sub_10008E974((uint64_t)&type metadata for ASDConfig.CodingKeys, v6, v5);
  v7 = *v0;
  v8 = *((unsigned __int8 *)v0 + 8);
  v19[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, v19, v3);
  if (!v1)
  {
    sub_10008E9B4(v0[2], *((unsigned __int8 *)v0 + 24), 1);
    v9 = *((unsigned int *)v0 + 7);
    v10 = *((_BYTE *)v0 + 32);
    v19[0] = 2;
    v20[0] = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v9 | ((unint64_t)v10 << 32), v19, v3);
    sub_100046C5C((uint64_t)(v0 + 5), (uint64_t)v25);
    sub_100046C5C((uint64_t)v25, (uint64_t)v19);
    v20[0] = 3;
    v11 = sub_100054E98();
    sub_10008C5A4((uint64_t)&unk_100505A88);
    sub_100079FFC((uint64_t)v19, (uint64_t)v20, v3, v11, v12);
    sub_100046C5C((uint64_t)(v0 + 6), (uint64_t)v24);
    sub_100046C5C((uint64_t)v24, (uint64_t)v19);
    v20[0] = 4;
    v13 = sub_10008C62C();
    sub_100079FFC((uint64_t)v19, (uint64_t)v20, v3, (uint64_t)&unk_1004CFEC8, v13);
    sub_10008E9B4(v0[8], *((unsigned __int8 *)v0 + 72), 5);
    sub_100046C5C((uint64_t)v0 + 73, (uint64_t)&v23);
    sub_100046C5C((uint64_t)&v23, (uint64_t)v19);
    v20[0] = 6;
    v14 = sub_10008C668();
    sub_100079FFC((uint64_t)v19, (uint64_t)v20, v3, (uint64_t)&unk_1004D2738, v14);
    sub_100046C5C((uint64_t)(v0 + 10), (uint64_t)v22);
    sub_100046C5C((uint64_t)v22, (uint64_t)v19);
    v20[0] = 7;
    v15 = sub_100054E98();
    sub_10008C5A4((uint64_t)&unk_100505AB0);
    sub_100079FFC((uint64_t)v19, (uint64_t)v20, v3, v15, v16);
    sub_100046C5C((uint64_t)(v0 + 11), (uint64_t)v21);
    sub_100046C5C((uint64_t)v21, (uint64_t)v19);
    v20[0] = 8;
    v17 = sub_100054E98();
    sub_10008CA28((uint64_t)&unk_100505AC0);
    sub_100079FFC((uint64_t)v19, (uint64_t)v20, v3, v17, v18);
  }
  sub_100046CE4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100046E70();
}

void sub_1000872C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  sub_100046C44();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  v30 = v29;
  v31 = sub_100032C48(&qword_100505A18);
  sub_10008EAF8();
  __chkstk_darwin(v32);
  sub_10008EAB4();
  v33 = v28[4];
  sub_100032EFC(v28, v28[3]);
  sub_10008C3F0();
  sub_10008EB84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v34, v35, v36, v37, v33);
  if (v24)
    goto LABEL_3;
  sub_10008E944();
  v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v38, v39);
  v42 = v41;
  v43 = sub_10008EA5C();
  a10 = v44;
  v74 = v43;
  LOBYTE(v75) = 2;
  sub_10008E944();
  v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v73 = v42;
  v45 = sub_100054E98();
  a14 = 3;
  sub_10008C4E0((uint64_t)&unk_100505A30);
  sub_10008E938(v45, (uint64_t)&a14, v31, v45, v46);
  v49 = v75;
  a14 = 4;
  v50 = sub_10008C468();
  swift_bridgeObjectRetain();
  sub_10008EBB0();
  sub_10008E938(v51, v52, v53, v54, v50);
  if (v50)
  {
    sub_10008E8AC();
    sub_100039998();
LABEL_3:
    v47 = 0;
    v48 = 0;
    goto LABEL_4;
  }
  v55 = v75;
  LOBYTE(v75) = 5;
  v71 = v55;
  sub_10004EA20(v55, v76);
  v56 = sub_10008EA5C();
  v69 = v57;
  v70 = v56;
  a14 = 6;
  sub_10008C4A4();
  sub_10008EBB0();
  sub_10008E938(v58, v59, v60, v61, v62);
  v68 = v40;
  v63 = sub_100054E98();
  a14 = 7;
  sub_10008C4E0((uint64_t)&unk_100505A58);
  sub_10008E938(v63, (uint64_t)&a14, v31, v63, v64);
  v65 = sub_100032C48(&qword_100505A68);
  a14 = 8;
  sub_10008CA28((uint64_t)&unk_100505A70);
  v67 = v66;
  swift_bridgeObjectRetain();
  sub_10008E938(v65, (uint64_t)&a14, v31, v65, v67);
  sub_10008E8AC();
  if (!v67)
  {
    swift_bridgeObjectRetain();
    sub_10004EA20(v71, v76);
    swift_bridgeObjectRetain();
    sub_10008E918();
    sub_100039998();
    sub_100032F94(v28);
    sub_100039998();
    sub_10008E918();
    swift_bridgeObjectRelease(v75);
    sub_100046DEC();
    *(_QWORD *)v30 = v68;
    *(_BYTE *)(v30 + 8) = v73 & 1;
    *(_QWORD *)(v30 + 16) = v74;
    *(_BYTE *)(v30 + 24) = a10 & 1;
    *(_DWORD *)(v30 + 28) = v72;
    *(_BYTE *)(v30 + 32) = BYTE4(v72) & 1;
    *(_QWORD *)(v30 + 40) = v49;
    *(_QWORD *)(v30 + 48) = v71;
    *(_QWORD *)(v30 + 56) = v76;
    *(_QWORD *)(v30 + 64) = v70;
    *(_BYTE *)(v30 + 72) = v69 & 1;
    *(_BYTE *)(v30 + 73) = 5;
    *(_QWORD *)(v30 + 80) = v75;
    *(_QWORD *)(v30 + 88) = v75;
    goto LABEL_8;
  }
  sub_100046DEC();
  sub_10008E918();
  sub_100039998();
  v47 = 1;
  v48 = 1;
LABEL_4:
  sub_100032F94(v28);
  sub_100039998();
  if (v47)
    sub_10008E918();
  if (v48)
    sub_100046DEC();
LABEL_8:
  sub_100046BF8();
}

void sub_10008767C()
{
  unsigned __int8 *v0;

  sub_100086EA0(*v0);
}

void sub_100087694(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_100046F54();
  sub_100058ED8();
}

uint64_t sub_1000876C8()
{
  unsigned __int8 *v0;

  return sub_100086ED0(*v0);
}

uint64_t sub_1000876D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100086B00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000876F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100086E98();
  *a1 = result;
  return result;
}

uint64_t sub_100087718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008C3F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100087740(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008C3F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100087768(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11[12];

  sub_1000872C4(a1, a2, a3, a4, a5, a6, a7, a8, v11[0], v11[1], SWORD1(v11[1]), SWORD2(v11[1]), SBYTE6(v11[1]), SHIBYTE(v11[1]), v11[2], v11[3], v11[4], v11[5], v11[6],
    v11[7],
    v11[8],
    v11[9],
    v11[10],
    v11[11]);
  if (!v9)
    memcpy(a9, v11, 0x60uLL);
}

void sub_1000877B0()
{
  const void *v0;
  _BYTE v1[96];

  memcpy(v1, v0, sizeof(v1));
  sub_100086FB0();
}

void sub_100087800()
{
  qword_1005186C0 = 0x40F5180000000000;
}

void ASDConfigurationManager.configDictionaryForCoreODI.getter()
{
  sub_10008788C();
  Dictionary._bridgeToObjectiveC()();
  sub_100039950();
  sub_100028D0C();
}

uint64_t sub_10008788C()
{
  uint64_t v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  _BYTE v31[16];
  uint64_t v32;
  __int128 v33;
  void *v34;
  uint64_t v35[5];
  __int128 v36;
  void *v37;
  _BYTE v38[104];

  v0 = sub_100032C48(&qword_100505B88);
  inited = swift_initStackObject(v0, v38);
  *(_OWORD *)(inited + 16) = xmmword_1004077E0;
  strcpy((char *)v35, "daemonVersion");
  HIWORD(v35[1]) = -4864;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v35);
  v2 = objc_msgSend((id)objc_opt_self(ASDUtils), "daemonVersion");
  *(_QWORD *)(inited + 96) = sub_100039884(0, (unint64_t *)&qword_100503520, NSString_ptr);
  *(_QWORD *)(inited + 72) = v2;
  v32 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v3 = sub_100087F94();
  *(_QWORD *)&v33 = 0x49444F65726F63;
  *((_QWORD *)&v33 + 1) = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v35, &v33);
  sub_100061D50((uint64_t)v35, v3, &v33);
  sub_100054814((uint64_t)v35);
  if (v34)
  {
    sub_100053FB8(&v33, &v36);
    v4 = (void *)objc_opt_self(NSJSONSerialization);
    v5 = v37;
    v6 = sub_100032EFC(&v36, (uint64_t)v37);
    v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v5);
    v35[0] = 0;
    v8 = objc_msgSend(v4, "dataWithJSONObject:options:error:", v7, 0, v35);
    swift_unknownObjectRelease(v7);
    v9 = (id)v35[0];
    if (v8)
    {
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      *(_QWORD *)&v33 = 0x49444F65726F63;
      *((_QWORD *)&v33 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)(v35, &v33);
      v34 = &type metadata for Data;
      *(_QWORD *)&v33 = v10;
      *((_QWORD *)&v33 + 1) = v12;
      sub_100050324((uint64_t)&v33, (uint64_t)v35);
    }
    else
    {
      v15 = v9;
      v16 = _convertNSErrorToError(_:)(v9);

      swift_willThrow(v17);
      if (qword_1005034C8 != -1)
        swift_once(&qword_1005034C8, sub_100084FF8);
      v18 = type metadata accessor for Logger(0);
      sub_1000352B0(v18, (uint64_t)qword_100505920);
      swift_errorRetain(v16);
      v19 = swift_errorRetain(v16);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v35[0] = v23;
        *(_DWORD *)v22 = 136315138;
        swift_getErrorValue(v16, v31, v30);
        v24 = Error.localizedDescription.getter(v30[1], v30[2]);
        v26 = v25;
        *(_QWORD *)&v33 = sub_100036778(v24, v25, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 8, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease(v26);
        swift_errorRelease(v16);
        swift_errorRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error encoding coreODIConfig data: %s", v22, 0xCu);
        swift_arrayDestroy(v23, 1);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }
      else
      {
        swift_errorRelease(v16);
        swift_errorRelease(v16);
      }

      *(_QWORD *)&v33 = 0x49444F65726F63;
      *((_QWORD *)&v33 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)(v35, &v33);
      v27 = sub_10003370C(32123, 0xE200000000000000);
      v34 = &type metadata for Data;
      *(_QWORD *)&v33 = v27;
      *((_QWORD *)&v33 + 1) = v28;
      sub_100050324((uint64_t)&v33, (uint64_t)v35);
      swift_errorRelease(v16);
    }
    sub_100032F94(&v36);
  }
  else
  {
    sub_1000774C4((uint64_t)&v33, &qword_100503A58);
    *(_QWORD *)&v36 = 0x49444F65726F63;
    *((_QWORD *)&v36 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)(v35, &v36);
    v13 = sub_10003370C(32123, 0xE200000000000000);
    v37 = &type metadata for Data;
    *(_QWORD *)&v36 = v13;
    *((_QWORD *)&v36 + 1) = v14;
    sub_100050324((uint64_t)&v36, (uint64_t)v35);
  }
  sub_10008801C((uint64_t)&v32, v3);
  swift_bridgeObjectRelease(v3);
  return v32;
}

void ASDConfigurationManager.cacheV2MaxAge.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v0 = sub_100084C20(&v7);
  sub_10008EB30(v0, v1, &qword_100503A78, v2, v3, v4, v5, v6, v7, *((uint64_t *)&v7 + 1), v8, v9, v10, v11, v12, v13, v14, v15, v16,
    v17,
    v18);
  if (v19 != 1)
    sub_10003974C((uint64_t *)&v7);
}

uint64_t ASDConfigurationManager.payloadWorkflowTTLs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD __src[12];
  _BYTE __dst[96];
  uint64_t v24[2];
  uint64_t v25;

  v0 = sub_100084C20(&v11);
  sub_10008EB30(v0, v1, &qword_100503A78, v2, v3, v4, v5, v6, v11, *((uint64_t *)&v11 + 1), v12, v13, v14, v15, v16, v17, v18, v19, v20,
    v21,
    __src[0]);
  if (__src[5] == 1
    || (memcpy(__dst, __src, sizeof(__dst)),
        sub_100046118((uint64_t)&__dst[48], (uint64_t)v24, &qword_1005043C8),
        sub_10004EB08(v24),
        sub_10003974C((uint64_t *)&v11),
        sub_100046118((uint64_t)v24, (uint64_t)&v25, &qword_1005043C8),
        !v25))
  {
    v9 = sub_100039884(0, &qword_100503A68, NSNumber_ptr);
    return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v9, &protocol witness table for String);
  }
  else
  {
    sub_100041368(v25);
    v8 = v7;
    sub_100040C38();
    sub_100039950();
  }
  return v8;
}

uint64_t sub_100087F94()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  swift_getObjectType(v0);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_1000602A8(v1, (uint64_t)&v6);

  v2 = v6;
  v3 = v7;
  v4 = sub_100088CE8(v6, v7);
  sub_100033030(v2, v3);
  return v4;
}

void sub_10008801C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int128 v36;
  uint64_t v37;
  id v38[6];
  __int128 v39;
  uint64_t v40;

  *(_QWORD *)&v36 = 0x7365727574616566;
  *((_QWORD *)&v36 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)(v38, &v36);
  sub_100061D50((uint64_t)v38, a2, &v36);
  sub_100054814((uint64_t)v38);
  if (v37)
  {
    sub_100053FB8(&v36, &v39);
    v3 = (void *)objc_opt_self(NSJSONSerialization);
    v4 = v40;
    v5 = sub_100032EFC(&v39, v40);
    v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
    v38[0] = 0;
    v7 = objc_msgSend(v3, "dataWithJSONObject:options:error:", v6, 0, v38);
    swift_unknownObjectRelease(v6);
    v8 = v38[0];
    if (v7)
    {
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      v12 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13 = JSONDecoder.init()();
      v14 = sub_100032C48(&qword_100505B90);
      sub_10008CA28((uint64_t)&unk_100505B98);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v38, v14, v9, v11, v14, v15);
      swift_release(v13);
      v31 = v38[0];
      v32 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v38[4] = (id)sub_100039884(0, &qword_100505BA8, NSUserDefaults_ptr);
      v38[5] = &off_1004D3850;
      v38[0] = v31;
      v38[1] = v32;
      sub_1000A6118();
      v34 = v33;
      v35[0] = 0x7365727574616566;
      v35[1] = 0xE800000000000000;
      AnyHashable.init<A>(_:)(&v36, v35);
      v35[3] = sub_100032C48(&qword_100505BB0);
      v35[0] = v34;
      sub_100050324((uint64_t)v35, (uint64_t)&v36);
      sub_100033030(v9, v11);
      sub_10008CAB8(v38);
    }
    else
    {
      v22 = v8;
      v23 = _convertNSErrorToError(_:)(v8);

      swift_willThrow(v24);
      swift_errorRelease(v23);
      if (qword_1005034C8 != -1)
        swift_once(&qword_1005034C8, sub_100084FF8);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_1000352B0(v25, (uint64_t)qword_100505920);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = (void *)swift_slowAlloc(32, -1);
        v38[0] = v30;
        *(_DWORD *)v29 = 136315138;
        *(_QWORD *)&v36 = sub_100036778(0x7365727574616566, 0xE800000000000000, (uint64_t *)v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v29 + 4, v29 + 12);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Could not parse values of object '%s'.", v29, 0xCu);
        swift_arrayDestroy(v30, 1);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }

    }
    sub_100032F94(&v39);
  }
  else
  {
    sub_1000774C4((uint64_t)&v36, &qword_100503A58);
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_1000352B0(v16, (uint64_t)qword_100505920);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (void *)swift_slowAlloc(32, -1);
      v38[0] = v21;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)&v36 = sub_100036778(0x7365727574616566, 0xE800000000000000, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Config data does not contain '%s' key.", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

Swift::Void __swiftcall ASDConfigurationManager.pushInitialCoreODIConfig()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFAbsoluteTime *v16;
  id v17;
  dispatch_semaphore_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  uint64_t v29;

  v3 = type metadata accessor for DispatchTime(0);
  sub_10008EAF8();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v10);
  sub_100054E18();
  v11 = dispatch_semaphore_create(0);
  Current = CFAbsoluteTimeGetCurrent();
  v13 = type metadata accessor for TaskPriority(0);
  sub_10006E714(v1, v14, v15, v13);
  v16 = (CFAbsoluteTime *)swift_allocObject(&unk_1004D2180, 56, 7);
  v16[2] = 0.0;
  v16[3] = 0.0;
  *((_QWORD *)v16 + 4) = v0;
  *((_QWORD *)v16 + 5) = v11;
  v16[6] = Current;
  v17 = v0;
  v18 = v11;
  v19 = sub_1000494E4(v1, (uint64_t)&unk_100505940, (uint64_t)v16);
  v20 = swift_release(v19);
  static DispatchTime.now()(v20);
  + infix(_:_:)(v7, 1.5);
  v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v21(v7, v3);
  v22 = OS_dispatch_semaphore.wait(timeout:)(v9) & 1;
  v21(v9, v3);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v22, 0) & 1) == 0)
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v23 = sub_1000357DC();
    v24 = sub_10005680C(v23, (uint64_t)qword_100505920);
    v26 = static os_log_type_t.fault.getter(v24, v25);
    if (sub_10004ECA8(v26))
    {
      v27 = (uint8_t *)sub_10003308C(2);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v3, "Failed to set the config into CoreODI in expected time. Continuing despite risk of errors", v27, 2u);
      sub_100033080((uint64_t)v27);
      v28 = v18;
      v18 = v24;
    }
    else
    {
      v28 = v24;
    }

  }
}

uint64_t sub_100088778(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  *(double *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 32) = a6;
  v7 = (_QWORD *)swift_task_alloc(dword_10050594C);
  *(_QWORD *)(v6 + 48) = v7;
  *v7 = v6;
  v7[1] = sub_1000887C8;
  return ASDConfigurationManager.updateCoreODI()();
}

uint64_t sub_1000887C8()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 48));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_1000887FC()
{
  uint64_t v0;
  os_log_type_t v1;
  NSObject *v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  os_log_type_t v11;

  v2 = *(NSObject **)(v0 + 32);
  v3 = *(double *)(v0 + 40);
  OS_dispatch_semaphore.signal()();
  v4 = CFAbsoluteTimeGetCurrent() - v3;
  if (v4 <= 0.75)
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v10 = sub_1000357DC();
    sub_10005680C(v10, (uint64_t)qword_100505920);
    v11 = sub_100056100();
    if (sub_10006EBE8(v11))
    {
      v8 = (uint8_t *)sub_10003308C(12);
      *(_DWORD *)v8 = 134217984;
      *(double *)(v0 + 16) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      v9 = "Updated CoreODI config in: %f";
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v5 = sub_1000357DC();
    v2 = sub_10005680C(v5, (uint64_t)qword_100505920);
    v7 = static os_log_type_t.fault.getter(v2, v6);
    if (sub_10006EBE8(v7))
    {
      v8 = (uint8_t *)sub_10003308C(12);
      *(_DWORD *)v8 = 134217984;
      *(double *)(v0 + 24) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      v9 = "Longer than expected update time for CoreODI config: %f";
LABEL_10:
      sub_100037174((void *)&_mh_execute_header, v2, v1, v9, v8);
      sub_100033080((uint64_t)v8);
    }
  }

  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ASDConfigurationManager.updateCoreODI()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_1000560DC((uint64_t)sub_10008899C);
}

uint64_t sub_10008899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for ConfigManager(0);
  *(_QWORD *)(v0 + 24) = static ConfigManager.shared.getter();
  *(_QWORD *)(v0 + 32) = sub_10008788C();
  sub_10008C994((uint64_t)&unk_100505950);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100088A44, v3, v4);
}

uint64_t sub_100088A44()
{
  uint64_t v0;

  dispatch thunk of ConfigManager.setConfiguration(configDict:)(*(_QWORD *)(v0 + 32));
  sub_100039950();
  sub_1000357E4();
  return sub_100048DF8(*(uint64_t (**)(void))(v0 + 8));
}

id sub_100088AB0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASDConfigurationManager()), "init");
  static ASDConfigurationManager.shared = (uint64_t)result;
  return result;
}

uint64_t sub_100088ADC()
{
  uint64_t v0;

  sub_10006E944();

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100088B0C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(double *)(v0 + 48);
  v3 = swift_task_alloc(dword_10050593C);
  v4 = (_QWORD *)sub_100048D70(v3);
  v5 = sub_10008EA34(v4);
  return sub_100088778(v2, v5, v6, v7, v8, v1);
}

id static ASDConfigurationManager.shared.getter()
{
  _BYTE v1[24];

  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10004EE40((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v1, 0);
  return (id)static ASDConfigurationManager.shared;
}

void static ASDConfigurationManager.shared.setter(uint64_t a1)
{
  void *v2;
  _BYTE v3[24];

  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10004EE40((uint64_t)&static ASDConfigurationManager.shared, (uint64_t)v3, 1);
  v2 = (void *)static ASDConfigurationManager.shared;
  static ASDConfigurationManager.shared = a1;

}

uint64_t (*static ASDConfigurationManager.shared.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10004EE40((uint64_t)&static ASDConfigurationManager.shared, a1, 33);
  return j__swift_endAccess;
}

uint64_t sub_100088CE8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30[4];
  uint64_t v31;
  uint64_t v32;

  if ((sub_100084DBC(a1, a2) & 1) != 0)
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_1000352B0(v2, (uint64_t)qword_100505920);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No stored config found.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  }
  else
  {
    v8 = (void *)objc_opt_self(NSJSONSerialization);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v30[0] = 0;
    v10 = objc_msgSend(v8, "JSONObjectWithData:options:error:", isa, 0, v30);

    v11 = v30[0];
    if (v10)
    {
      _bridgeAnyObjectToAny(_:)(v10);
      swift_unknownObjectRelease(v10);
      sub_100036FA0((uint64_t)&v31, (uint64_t)v30);
      v12 = sub_100032C48(&qword_100505BB8);
      if (swift_dynamicCast(&v29, v30, (char *)&type metadata for Any + 8, v12, 6))
      {
        v13 = v29;
      }
      else
      {
        if (qword_1005034C8 != -1)
          swift_once(&qword_1005034C8, sub_100084FF8);
        v24 = type metadata accessor for Logger(0);
        v25 = sub_1000352B0(v24, (uint64_t)qword_100505920);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unexpected config data received", v28, 2u);
          swift_slowDealloc(v28, -1, -1);
        }

        v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      }
      sub_100032F94(&v31);
    }
    else
    {
      v14 = v11;
      v15 = _convertNSErrorToError(_:)(v11);

      swift_willThrow(v16);
      if (qword_1005034C8 != -1)
        swift_once(&qword_1005034C8, sub_100084FF8);
      v17 = type metadata accessor for Logger(0);
      sub_1000352B0(v17, (uint64_t)qword_100505920);
      swift_errorRetain(v15);
      v18 = swift_errorRetain(v15);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v21 = 138412290;
        swift_errorRetain(v15);
        v23 = _swift_stdlib_bridgeErrorToNSError(v15);
        v31 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);
        *v22 = v23;
        swift_errorRelease(v15);
        swift_errorRelease(v15);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Config data could not be parsed. Is it a valid JSON? %@", v21, 0xCu);
        sub_100032C48(&qword_100505478);
        swift_arrayDestroy(v22, 1);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        swift_errorRelease(v15);
        swift_errorRelease(v15);
      }

      v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      swift_errorRelease(v15);
    }
    return v13;
  }
}

id sub_1000891A4()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  objc_super v21;
  _QWORD aBlock[6];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC3asd23ASDConfigurationManager_notificationCenter;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = v0;
  *(_QWORD *)&v0[v5] = objc_msgSend(v6, "defaultCenter");
  if (qword_1005034D0 != -1)
    swift_once(&qword_1005034D0, sub_100087800);
  v8 = *(double *)&qword_1005186C0;
  v9 = swift_allocObject(&unk_1004D2328, 24, 7);
  *(_QWORD *)(v9 + 16) = ObjectType;
  v10 = sub_100032C48(&qword_100505AE0);
  swift_allocObject(v10, 176, 15);
  v11 = sub_10008A7A8(0, 0xC000000000000000, (uint64_t)sub_10008944C, 0, (uint64_t)&unk_100505AD8, v9, v8);
  *(_QWORD *)&v7[OBJC_IVAR____TtC3asd23ASDConfigurationManager_fetcher] = v11;
  swift_retain(v11);
  v12 = objc_msgSend(v6, "defaultCenter");
  if (qword_1005034C0 != -1)
    swift_once(&qword_1005034C0, sub_100084FC4);
  v13 = qword_1005186B8;
  aBlock[4] = sub_100089B68;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000975C8;
  aBlock[3] = &unk_1004D2340;
  v14 = _Block_copy(aBlock);
  v15 = objc_msgSend(v12, "addObserverForName:object:queue:usingBlock:", v13, 0, 0, v14);
  _Block_release(v14);

  *(_QWORD *)&v7[OBJC_IVAR____TtC3asd23ASDConfigurationManager_updateObservationToken] = v15;
  v21.receiver = v7;
  v21.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v21, "init");
  v17 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v4, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_1004D2378, 48, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v11;
  v18[5] = ObjectType;
  sub_100084EE8();
  swift_release(v19);
  return v16;
}

id sub_10008944C()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
  v1 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v0);

  return v1;
}

uint64_t sub_1000894B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for Locale(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLComponents(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100032C48(&qword_100503920);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLQueryItem(0);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100032C48(&qword_100505B48);
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v2[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[19] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v13);
  v2[21] = swift_task_alloc(v13);
  v2[22] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000895F4, 0, 0);
}

uint64_t sub_1000895F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[22];
  v2 = v0[17];
  v3 = v0[10];
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_100084710(v4, v1);

  URLComponents.init(url:resolvingAgainstBaseURL:)(v1, 0);
  if (sub_1000352C8(v2, 1, v3) || (v5 = (_QWORD *)URLComponents.queryItems.getter()) == 0)
  {
    swift_bridgeObjectRelease(0);
    v5 = _swiftEmptyArrayStorage;
  }
  v0[23] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_100505B54);
  v0[24] = v6;
  *v6 = v0;
  v6[1] = sub_1000896C4;
  return sub_100089A90();
}

uint64_t sub_1000896C4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_100040B24();
  v2[2] = v0;
  v2[3] = v1;
  v2[4] = v3;
  v4 = v2[24];
  *v5 = *v0;
  v2[25] = v3;
  swift_task_dealloc(v4);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_10008970C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (*(_QWORD *)(v0 + 200))
  {
    v1 = *(_QWORD *)(v0 + 184);
    URLQueryItem.init(name:value:)(0x69737265765F736FLL, 0xEA00000000006E6FLL, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 200));
    sub_1000356D4();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    v3 = *(_QWORD *)(v0 + 184);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10008EBCC(0, *(_QWORD *)(v3 + 16) + 1);
      v3 = v39;
    }
    v5 = *(_QWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    if (v5 >= v4 >> 1)
    {
      sub_10008EBCC(v4 > 1, v5 + 1);
      v3 = v40;
    }
    v7 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v3 + 16) = v5 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v5, v6, v8);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
  }
  if (sub_1000352C8(*(_QWORD *)(v0 + 136), 1, *(_QWORD *)(v0 + 80)))
    sub_1000356D4();
  else
    URLComponents.queryItems.setter(v3);
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 80);
  if (sub_1000352C8(v9, 1, v10))
  {
    sub_10006E714(*(_QWORD *)(v0 + 104), v11, v12, *(_QWORD *)(v0 + 144));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 88);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v9, v10);
    URLComponents.url.getter(v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v10);
  }
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 152) + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 176), v16);
  v18 = sub_1000352C8(v17, 1, v16);
  v19 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 104);
  if (v18 == 1)
  {
    sub_10006EA10(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
    sub_1000774C4(v21, &qword_100503920);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    sub_10006EA10(v19, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  }
  v22 = *(_QWORD *)(v0 + 176);
  v43 = *(_QWORD *)(v0 + 144);
  v44 = *(_QWORD *)(v0 + 160);
  v45 = *(_QWORD *)(v0 + 128);
  v46 = *(_QWORD *)(v0 + 104);
  v47 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  v41 = *(_QWORD *)(v0 + 56);
  v42 = *(_QWORD *)(v0 + 152);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(*(_QWORD *)(v0 + 168), 0, 60.0);
  v25 = objc_msgSend((id)objc_opt_self(ASDUtils), "daemonVersion");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  v30._countAndFlagsBits = 0x6973726556647361;
  v30._object = (void *)0xEA00000000006E6FLL;
  URLRequest.addValue(_:forHTTPHeaderField:)(v29, v30);
  sub_100040C38();
  v31 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  v32 = Locale.identifier.getter();
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v41);
  v35._countAndFlagsBits = v32;
  v35._object = v34;
  v36._countAndFlagsBits = 0x656C61636F6CLL;
  v36._object = (void *)0xE600000000000000;
  URLRequest.addValue(_:forHTTPHeaderField:)(v35, v36);
  sub_100040C38();
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v22, v43);
  sub_10008EB68(v37, &qword_100505B48);
  sub_10008EA2C();
  sub_100083F30();
  swift_task_dealloc(v44);
  sub_100040BE8();
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  sub_100040A10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089A90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = sub_100032C48(&qword_1005044D8);
  *v1 = v0;
  v1[1] = sub_100089B28;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x56746375646F7270, 0xEE006E6F69737265, sub_10008A330, 0, v2);
}

uint64_t sub_100089B28()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 32));
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100089B5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100089B68()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[4];

  v0 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v0);
  v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_1004D23A0, 32, 7);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = sub_1000352C8((uint64_t)v2, 1, v3);
  if ((_DWORD)v5 == 1)
  {
    sub_1000774C4((uint64_t)v2, &qword_1005039D8);
    v6 = 0;
    v7 = 0;
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v5);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
    v8 = v9 | 0x1C00;
    v10 = *(_QWORD *)(v4 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)(v4 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v7 = v13;
      swift_unknownObjectRelease(v10);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
  v14 = swift_allocObject(&unk_1004D23C8, 32, 7);
  *(_QWORD *)(v14 + 16) = &unk_100505B40;
  *(_QWORD *)(v14 + 24) = v4;
  if (v7 | v6)
  {
    v18[0] = 0;
    v18[1] = 0;
    v15 = v18;
    v18[2] = v6;
    v18[3] = v7;
  }
  else
  {
    v15 = 0;
  }
  v16 = swift_task_create(v8, v15, (char *)&type metadata for () + 8, &unk_1005040F0, v14);
  return swift_release(v16);
}

uint64_t sub_100089D1C()
{
  return swift_task_switch(sub_100089D30, 0, 0);
}

uint64_t sub_100089D30()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1005034D8 != -1)
    swift_once(&qword_1005034D8, sub_100088AB0);
  sub_10004EE40((uint64_t)&static ASDConfigurationManager.shared, v0 + 16, 0);
  v1 = (void *)static ASDConfigurationManager.shared;
  *(_QWORD *)(v0 + 40) = static ASDConfigurationManager.shared;
  v2 = dword_10050594C;
  v1;
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100089DCC;
  return ASDConfigurationManager.updateCoreODI()();
}

uint64_t sub_100089DCC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  sub_100040B24();
  v2 = *(void **)(v1 + 40);
  sub_100048CF8(*(_QWORD *)(v1 + 48));

  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100089DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 64) = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v4 + 72) = v5;
  *v5 = v4;
  v5[1] = sub_100089E54;
  return static Task<>.sleep(nanoseconds:)(15000000000);
}

uint64_t sub_100089E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = sub_10008EA10();
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v2 + 8))();
  v5 = (_QWORD *)swift_task_alloc(dword_100505AFC);
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v2;
  v5[1] = sub_100089EBC;
  return sub_10008A968();
}

uint64_t sub_100089EBC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  *(_BYTE *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  sub_100040A54();
  return sub_100040920();
}

uint64_t sub_100089F20()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if (qword_1005034C8 != -1)
    swift_once(&qword_1005034C8, sub_100084FF8);
  v3 = sub_1000357DC();
  sub_10005680C(v3, (uint64_t)qword_100505920);
  v4 = sub_100056100();
  if (sub_10004ECA8(v4))
  {
    v5 = *(unsigned __int8 *)(v2 + 96);
    v6 = (uint8_t *)sub_10003308C(12);
    v7 = sub_10003308C(32);
    *(_DWORD *)v6 = 136315138;
    v11 = v7;
    if (v5)
      v8 = 1163219540;
    else
      v8 = 0x45534C4146;
    if (v5)
      v9 = 0xE400000000000000;
    else
      v9 = 0xE500000000000000;
    *(_QWORD *)(v2 + 56) = sub_100036778(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 56, v2 + 64, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v9);
    sub_100037174((void *)&_mh_execute_header, v0, v1, "Needed config update: %s", v6);
    sub_10003716C(v7);
    sub_100033080(v7);
    sub_100033080((uint64_t)v6);
  }

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10008A088()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (qword_1005034C8 != -1)
    swift_once(&qword_1005034C8, sub_100084FF8);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = sub_1000357DC();
  v4 = sub_1000352B0(v3, (uint64_t)qword_100505920);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  Logger.logObject.getter(v5);
  v6 = sub_10008EBD8();
  v7 = sub_10008EA84(v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v9 = (uint8_t *)sub_10003308C(12);
    v10 = sub_10003308C(32);
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_10008EB50(v8);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100036778(v11, v12, &v14);
    sub_10008EB24(v0 + 48, v0 + 56);
    sub_1000356D4();
    sub_100056130();
    sub_100056130();
    sub_100037174((void *)&_mh_execute_header, v4, v1, "Failed to update config: %s", v9);
    sub_100072AC4();
    sub_100033080(v10);
    sub_100033080((uint64_t)v9);

    sub_100056130();
  }
  else
  {
    sub_100056130();
    sub_100056130();
    sub_100056130();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A234()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_1000560DC((uint64_t)sub_10008A244);
}

uint64_t sub_10008A244()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100505B04);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10008A298;
  return sub_10008AC1C();
}

uint64_t sub_10008A298()
{
  uint64_t (**v0)(void);

  sub_100048CF8(*((_QWORD *)*v0 + 3));
  return sub_10004ECB8(v0[1]);
}

uint64_t sub_10008A2CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_1000560DC((uint64_t)sub_10008A2DC);
}

uint64_t sub_10008A2DC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100505AFC);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10008A298;
  return sub_10008A968();
}

uint64_t sub_10008A330(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v26 = a1;
  v27 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100032C48(&qword_100505B58);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100039884(0, (unint64_t *)&qword_100505E80, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v25 = static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v6);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1004D23F0, v14 + v8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10008C964;
  v33 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EC2C;
  aBlock[3] = &unk_1004D2408;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v16);
  v31 = _swiftEmptyArrayStorage;
  sub_10008C994((uint64_t)&unk_100505B60);
  v18 = v17;
  v19 = sub_100032C48(&qword_100505B68);
  sub_10008C9C4((uint64_t)&unk_100505B70);
  v20 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v19, v21, v27, v18);
  v22 = (void *)v25;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v2, v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
  return swift_release(v33);
}

uint64_t sub_10008A614()
{
  NSString v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = String._bridgeToObjectiveC()();
  v1 = MGCopyAnswer(v0, 0);

  if (v1)
  {
    v7 = v1;
    v2 = swift_dynamicCast(&v8, &v7, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v3 = v8;
    v4 = v9;
    if (!v2)
    {
      v3 = 0;
      v4 = 0;
    }
    v8 = v3;
    v9 = v4;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v5 = sub_100032C48(&qword_100505B58);
  return CheckedContinuation.resume(returning:)(&v8, v5);
}

id ASDConfigurationManager.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC3asd23ASDConfigurationManager_notificationCenter], "removeObserver:", *(_QWORD *)&v0[OBJC_IVAR____TtC3asd23ASDConfigurationManager_updateObservationToken]);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_10008A7A8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  id v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  Class isa;
  _BYTE v21[80];

  swift_defaultActor_initialize(v7);
  *(_QWORD *)(v7 + 152) = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  *(_BYTE *)(v7 + 160) = 0;
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)(v7 + 168) = v13;
  v14 = sub_100032C48(&qword_100504520);
  inited = swift_initStackObject(v14, v21);
  *(_OWORD *)(inited + 16) = xmmword_1004077E0;
  strcpy((char *)(inited + 32), "asdConfigData");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  sub_100033DD0(a1, a2);
  sub_100033DD0(a1, a2);
  v16 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "registerDefaults:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

  sub_100033030(a1, a2);
  sub_100033030(a1, a2);
  *(_QWORD *)(v7 + 120) = a5;
  *(_QWORD *)(v7 + 128) = a6;
  *(double *)(v7 + 112) = a7;
  *(_QWORD *)(v7 + 136) = a3;
  *(_QWORD *)(v7 + 144) = a4;
  return v7;
}

uint64_t sub_10008A968()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for Date(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  return swift_task_switch(sub_10008A9E4, v0, 0);
}

uint64_t sub_10008A9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v7 = sub_1000604DC(*(void **)(v6 + 168));
  Date.init(timeIntervalSinceReferenceDate:)(v7);
  v8 = static Date.+ infix(_:_:)(v2, *(double *)(v6 + 112));
  Date.init()(v8);
  v9 = static Date.< infix(_:_:)(v1, v3);
  *(_BYTE *)(v0 + 88) = v9 & 1;
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 64) = v10;
  v10(v3, v5);
  v11 = sub_10008EBA4();
  ((void (*)(uint64_t))v10)(v11);
  if ((v9 & 1) != 0)
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v12 = sub_1000357DC();
    sub_10005680C(v12, (uint64_t)qword_100505920);
    v13 = sub_100056100();
    if (sub_10004EFCC(v13))
    {
      v14 = (_WORD *)sub_10003308C(2);
      *v14 = 0;
      sub_10008E984((void *)&_mh_execute_header, v9, v15, "Config update required");
      sub_100033080((uint64_t)v14);
    }

    v16 = (_QWORD *)swift_task_alloc(dword_100505B04);
    *(_QWORD *)(v0 + 72) = v16;
    *v16 = v0;
    v16[1] = sub_10008AB54;
    return sub_10008AC1C();
  }
  else
  {
    sub_10008E924();
    sub_100040B34();
    sub_100040A10();
    sub_100040A7C();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 88));
  }
}

uint64_t sub_10008AB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = sub_10008EA10();
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc(v2);
  if (v1)
    v3 = sub_10008ABE0;
  else
    v3 = sub_10008ABA4;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 16), 0);
}

uint64_t sub_10008ABA4()
{
  uint64_t v0;

  sub_10008E924();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  return sub_10008E9A4(*(unsigned __int8 *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008ABE0()
{
  uint64_t v0;

  sub_10008E924();
  sub_100040B34();
  sub_100040A10();
  sub_100040A7C();
  return sub_10008E9A4(0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008AC1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1[19] = v0;
  v2 = type metadata accessor for Date(0);
  v1[20] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[21] = v3;
  v1[22] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HTTPStatusCode(0);
  v1[23] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[24] = v5;
  v1[25] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100032C48(&qword_100505B08);
  v1[26] = v6;
  v1[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100032C48(&qword_100505B10) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[28] = swift_task_alloc(v7);
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v1[31] = swift_task_alloc(v7);
  v1[32] = swift_task_alloc(v7);
  v1[33] = swift_task_alloc(v7);
  v8 = type metadata accessor for URLRequest(0);
  v1[34] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[35] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[36] = swift_task_alloc(v10);
  v1[37] = swift_task_alloc(v10);
  return swift_task_switch(sub_10008AD9C, v0, 0);
}

uint64_t sub_10008AD9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  sub_10008EADC();
  v2 = *(_QWORD *)(v1 + 152);
  if (*(_BYTE *)(v2 + 160) == 1)
  {
    if (qword_1005034C8 != -1)
      swift_once(&qword_1005034C8, sub_100084FF8);
    v3 = sub_1000357DC();
    sub_10005680C(v3, (uint64_t)qword_100505920);
    v4 = sub_100056100();
    if (sub_10004EFCC(v4))
    {
      v5 = (_WORD *)sub_10003308C(2);
      *v5 = 0;
      sub_10008E984((void *)&_mh_execute_header, v0, v6, "Config update already in progress - skipping requested update");
      sub_100033080((uint64_t)v5);
    }

    v7 = sub_100032C48(&qword_100505B18);
    sub_10008C9C4((uint64_t)&unk_100505B20);
    sub_100059ED4(v7, v8);
    v10 = swift_storeEnumTagMultiPayload(v9, v7, 3);
    swift_willThrow(v10);
    v11 = sub_10008E8BC();
    v17 = v12;
    swift_task_dealloc(v11);
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_100040BE8();
    sub_100040B0C();
    sub_100083F30();
    sub_10008EA2C();
    sub_100040B34();
    swift_task_dealloc(v17);
    return sub_10008E8EC(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    *(_BYTE *)(v2 + 160) = 1;
    v14 = *(int **)(v2 + 120);
    v15 = *v14;
    v16 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v1 + 304) = v16;
    *v16 = v1;
    v16[1] = sub_10008AF74;
    return ((uint64_t (*)(_QWORD))((char *)v14 + v15))(*(_QWORD *)(v1 + 296));
  }
}

uint64_t sub_10008AF74()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 304));
  return sub_100040920();
}

uint64_t sub_10008AFDC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  sub_10008EADC();
  v22 = v2;
  v23 = v3;
  v21 = v0;
  if (qword_1005034C8 != -1)
    swift_once(&qword_1005034C8, sub_100084FF8);
  v4 = v0[36];
  v5 = v0[37];
  v6 = v0[35];
  v7 = sub_1000357DC();
  v0[39] = sub_1000352B0(v7, (uint64_t)qword_100505920);
  v8 = sub_10006EA10(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[34];
  if (v11)
  {
    v13 = (uint8_t *)sub_10003308C(12);
    v14 = sub_10003308C(32);
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    sub_10008C994((uint64_t)&unk_100505B30);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v1 = v17;
    v0[18] = sub_100036778(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v1);
    sub_10008EB08();
    sub_100037174((void *)&_mh_execute_header, v9, v10, "Requesting config with request: %s", v13);
    sub_100072AC4();
    sub_100033080(v14);
    sub_100033080((uint64_t)v13);
  }
  else
  {
    sub_10008EB08();
  }

  v0[40] = v1;
  v0[41] = (*(uint64_t (**)(void))(v0[19] + 136))();
  v18 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v0[42] = v18;
  *v18 = v0;
  v18[1] = sub_10008B1E8;
  return ((uint64_t (*)(_QWORD, _QWORD))NSURLSession.data(for:delegate:))(v0[37], 0);
}

uint64_t sub_10008B1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 336);
  *(_QWORD *)(v5 + 344) = a1;
  *(_QWORD *)(v5 + 352) = a2;
  *(_QWORD *)(v5 + 360) = a3;
  *(_QWORD *)(v5 + 368) = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = *(_QWORD *)(v5 + 152);
    v8 = sub_10008BC50;
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 152);

    v8 = sub_10008B2B4;
    v7 = v9;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10008B2B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  Class isa;
  id v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _WORD *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  _BOOL8 v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v1 = v0[45];
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v6 = (void *)v3;
    v7 = (void *)v0[45];
    v8 = (_QWORD *)v0[33];
    v9 = v0[23];
    sub_100033DD0(v0[43], v0[44]);
    v10 = v7;
    sub_10007D294((uint64_t)objc_msgSend(v6, "statusCode"), v8);

    sub_100037020((uint64_t)v8, 0, 1, v9);
  }
  else
  {
    v11 = v0[43];
    v12 = v0[44];
    sub_10006E714(v0[33], v4, v5, v0[23]);
    sub_100033DD0(v11, v12);
  }
  v13 = v0[32];
  v14 = v0[26];
  v15 = v0[27];
  v16 = v0[23];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[24] + 104))(v13, enum case for HTTPStatusCode.httpSuccess(_:), v16);
  sub_100037020(v13, 0, 1, v16);
  v17 = v15 + *(int *)(v14 + 48);
  v18 = sub_10008EBA4();
  sub_10008C820(v18, v19);
  sub_10008C820(v13, v17);
  sub_10008EBE0(v15, 1, v16);
  if (v22)
  {
    v20 = v0[23];
    sub_1000774C4(v0[32], &qword_100505B10);
    sub_10008EBE0(v17, 1, v20);
    if (v22)
    {
      sub_1000774C4(v0[27], &qword_100505B10);
      sub_10008EB70();
      goto LABEL_16;
    }
  }
  else
  {
    v21 = v0[23];
    sub_10008C820(v0[27], v0[31]);
    sub_10008EBE0(v17, 1, v21);
    if (!v22)
    {
      v27 = v0[32];
      v26 = v0[33];
      v29 = v0[30];
      v28 = v0[31];
      v30 = v0[27];
      v32 = v0[24];
      v31 = v0[25];
      v33 = v0[23];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v31, v17, v33);
      sub_10008C994((uint64_t)&unk_100505B28);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v31, v33, v34);
      v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v36(v31, v33);
      sub_1000774C4(v27, &qword_100505B10);
      v36(v28, v33);
      sub_1000774C4(v30, &qword_100505B10);
      sub_10008C820(v26, v29);
      if ((v35 & 1) != 0)
        goto LABEL_16;
      goto LABEL_14;
    }
    v23 = v0[31];
    v24 = v0[23];
    v25 = v0[24];
    sub_1000774C4(v0[32], &qword_100505B10);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  }
  sub_1000774C4(v0[27], &qword_100505B08);
  sub_10008EB70();
LABEL_14:
  v37 = v0[30];
  sub_10008EBE0(v37, 1, v0[23]);
  if (!v22)
  {
    v66 = v0[43];
    v65 = v0[44];
    v67 = v0[33];
    v68 = v0[29];
    sub_1000774C4(v37, &qword_100505B10);
    sub_100033030(v66, (unint64_t)v65);
    v69 = sub_10008C820(v67, v68);
    Logger.logObject.getter(v69);
    v70 = sub_10008EBD8();
    v71 = os_log_type_enabled(v65, v70);
    v72 = v0[29];
    if (v71)
    {
      v73 = v0 + 17;
      v74 = v0[28];
      v75 = v0[23];
      v76 = (uint8_t *)sub_10003308C(12);
      v77 = sub_10003308C(32);
      v134 = v77;
      *(_DWORD *)v76 = 136315138;
      sub_10008C820(v72, v74);
      v78 = sub_1000352C8(v74, 1, v75);
      v79 = v0[28];
      if (v78 == 1)
      {
        sub_1000774C4(v0[28], &qword_100505B10);
        v80 = 0xE300000000000000;
        v81 = 7104878;
      }
      else
      {
        v103 = v0[24];
        v132 = v0[23];
        v81 = HTTPStatusCode.description.getter();
        v80 = v104;
        v105 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
        v73 = v0 + 17;
        v105(v79, v132);
      }
      v106 = v0[29];
      v0[17] = sub_100036778(v81, v80, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, v0 + 18, v76 + 4, v76 + 12);
      sub_1000356D4();
      sub_1000774C4(v106, &qword_100505B10);
      sub_100037174((void *)&_mh_execute_header, v65, v70, "Config update response not success: %s", v76);
      sub_10003716C(v77);
      sub_100033080(v77);
      sub_100033080((uint64_t)v76);
    }
    else
    {
      sub_10008EB7C(v71, &qword_100505B10);
    }

    v107 = v0[44];
    v108 = (void *)v0[45];
    v109 = v0[43];
    v127 = (void (*)(uint64_t, uint64_t))v0[40];
    v110 = v0[33];
    v131 = v0[19];
    v111 = sub_100032C48(&qword_100505B18);
    sub_10008C9C4((uint64_t)&unk_100505B20);
    sub_100059ED4(v111, v112);
    v114 = v113;
    sub_10008C820(v110, v113);
    v115 = swift_storeEnumTagMultiPayload(v114, v111, 1);
    swift_willThrow(v115);

    v116 = sub_100033030(v109, v107);
    sub_10008EB68(v116, &qword_100505B10);
    v101 = sub_10008EBA4();
    goto LABEL_31;
  }
LABEL_16:
  sub_1000774C4(v0[30], &qword_100505B10);
  v38 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[12] = 0;
  v40 = objc_msgSend(v38, "JSONObjectWithData:options:error:", isa, 0, v0 + 12);

  v41 = (void *)v0[12];
  v43 = v0[43];
  v42 = v0[44];
  if (!v40)
  {
    v82 = v41;
    sub_10008EB98();
    v83 = _convertNSErrorToError(_:)(v41);

    ((void (*)(void))swift_willThrow)();
    sub_10006EE00();
    v84 = sub_10006EE00();
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)sub_10003308C(12);
      v88 = sub_10003308C(32);
      v134 = v88;
      *(_DWORD *)v87 = 136315138;
      sub_10008EB50(v83);
      v89 = Error.localizedDescription.getter(v0[7], v0[8]);
      v0[15] = sub_100036778(v89, v90, &v134);
      sub_10008EB24((uint64_t)(v0 + 15), (uint64_t)(v0 + 16));
      sub_1000356D4();
      sub_10006E690();
      sub_10006E690();
      sub_100037174((void *)&_mh_execute_header, v85, v86, "Config decode error: %s", v87);
      sub_100072AC4();
      sub_100033080(v88);
      sub_100033080((uint64_t)v87);
    }
    else
    {
      sub_10006E690();
      sub_10006E690();
    }

    v91 = v0[44];
    v92 = (void *)v0[45];
    v93 = v0[43];
    v127 = (void (*)(uint64_t, uint64_t))v0[40];
    v94 = v0[37];
    v95 = v0[34];
    v131 = v0[19];
    v96 = sub_100032C48(&qword_100505B18);
    sub_10008C9C4((uint64_t)&unk_100505B20);
    sub_100059ED4(v96, v97);
    *v98 = v83;
    swift_storeEnumTagMultiPayload(v98, v96, 2);
    v99 = sub_10006EE00();
    swift_willThrow(v99);

    sub_100033030(v93, v91);
    v100 = sub_10006E690();
    sub_10008EB68(v100, &qword_100505B10);
    v101 = v94;
    v102 = v95;
LABEL_31:
    v127(v101, v102);
    *(_BYTE *)(v131 + 160) = 0;
    v117 = sub_10008E8BC();
    v133 = v118;
    swift_task_dealloc(v117);
    sub_100040A10();
    sub_100040A7C();
    sub_100040A74();
    sub_100040B4C();
    sub_100040BE8();
    sub_100040B0C();
    sub_100083F30();
    sub_10008EA2C();
    sub_100040B34();
    swift_task_dealloc(v133);
    v64 = (uint64_t (*)(void))v0[1];
    return v64();
  }
  v45 = v0[21];
  v44 = v0[22];
  v46 = v0[19];
  v128 = v0[20];
  v47 = v41;
  _bridgeAnyObjectToAny(_:)(v40);
  swift_unknownObjectRelease(v40);
  sub_100032F94(v0 + 2);
  sub_100084AC4(v43, v42, *(void **)(v46 + 168));
  sub_10008EB98();
  v48 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v49 = static Date.now.getter();
  v50 = Date.timeIntervalSinceReferenceDate.getter(v49);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v128);
  sub_100084B58(v48, v50);

  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (_WORD *)sub_10003308C(2);
    *v54 = 0;
    sub_10008E984((void *)&_mh_execute_header, v52, v55, "Config update completed");
    sub_100033080((uint64_t)v54);
  }
  v57 = v0[44];
  v56 = (void *)v0[45];
  v58 = v0[43];
  v59 = (void (*)(uint64_t, uint64_t))v0[40];
  v60 = v0[37];
  v62 = v0[33];
  v61 = v0[34];
  v120 = v0[36];
  v121 = v0[32];
  v122 = v0[31];
  v123 = v0[30];
  v124 = v0[29];
  v125 = v0[28];
  v126 = v0[27];
  v129 = v0[25];
  v130 = v0[22];
  v63 = v0[19];

  sub_10008BE78();
  sub_100033030(v58, v57);
  sub_1000774C4(v62, &qword_100505B10);
  v59(v60, v61);
  *(_BYTE *)(v63 + 160) = 0;
  sub_10008EA2C();
  swift_task_dealloc(v120);
  sub_100040A74();
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  v64 = (uint64_t (*)(void))v0[1];
  return v64();
}

uint64_t sub_10008BC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  sub_10008EADC();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  v28 = *(NSObject **)(v24 + 368);

  sub_10006EE00();
  v29 = sub_10006EE00();
  Logger.logObject.getter(v29);
  v30 = sub_10008EBD8();
  if (sub_10008EA84(v30))
  {
    v31 = *(_QWORD *)(v24 + 368);
    v32 = (uint8_t *)sub_10003308C(12);
    v33 = sub_10003308C(32);
    a12 = v33;
    *(_DWORD *)v32 = 136315138;
    swift_getErrorValue(v31, v24 + 112, v24 + 72);
    v34 = Error.localizedDescription.getter(*(_QWORD *)(v24 + 80), *(_QWORD *)(v24 + 88));
    *(_QWORD *)(v24 + 128) = sub_100036778(v34, v35, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 128, v24 + 136, v32 + 4, v32 + 12);
    sub_1000356D4();
    swift_errorRelease(v31);
    swift_errorRelease(v31);
    sub_100037174((void *)&_mh_execute_header, v28, v25, "Config update request failed: %s", v32);
    sub_10003716C(v33);
    sub_100033080(v33);
    sub_100033080((uint64_t)v32);
  }
  else
  {
    v36 = *(_QWORD *)(v24 + 368);
    swift_errorRelease(v36);
    swift_errorRelease(v36);
  }

  v37 = *(_QWORD *)(v24 + 368);
  v38 = *(void (**)(uint64_t))(v24 + 320);
  v39 = *(_QWORD *)(v24 + 152);
  v40 = sub_100032C48(&qword_100505B18);
  sub_10008C9C4((uint64_t)&unk_100505B20);
  sub_100059ED4(v40, v41);
  *v42 = v37;
  v43 = swift_storeEnumTagMultiPayload(v42, v40, 0);
  swift_willThrow(v43);
  v44 = sub_10008EBA4();
  v38(v44);
  *(_BYTE *)(v39 + 160) = 0;
  v45 = sub_10008E8BC();
  v48 = v46;
  swift_task_dealloc(v45);
  sub_100040A10();
  sub_100040A7C();
  sub_100040A74();
  sub_100040B4C();
  sub_100040BE8();
  sub_100040B0C();
  sub_100083F30();
  sub_10008EA2C();
  sub_100040B34();
  swift_task_dealloc(v48);
  return sub_10008E8EC(*(uint64_t (**)(void))(v24 + 8));
}

id sub_10008BE78()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  if (qword_1005034C0 != -1)
    swift_once(&qword_1005034C0, sub_100084FC4);
  return objc_msgSend(v1, "postNotificationName:object:", qword_1005186B8, 0);
}

uint64_t sub_10008BED4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 144));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10008BF10()
{
  uint64_t v0;

  v0 = sub_10008BED4();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ASDConfigurationManager()
{
  return objc_opt_self(_TtC3asd23ASDConfigurationManager);
}

uint64_t sub_10008BF48(uint64_t a1)
{
  _QWORD v2[7];

  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for () + 64;
  v2[3] = (char *)&value witness table for () + 64;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[5] = &unk_100409CE0;
  v2[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 7, v2, a1 + 96);
}

uint64_t type metadata accessor for ConfigurationFetcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006DD14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConfigurationFetcher);
}

uint64_t sub_10008BFCC(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(a1[5]);
  v2 = a1[6];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[7]);
  }
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t sub_10008C010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = (_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v6;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10008C0D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 7);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_DWORD *)(a1 + 28) = v5;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = a2[6];
  if (!v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v8)
  {
    sub_10008C208((_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
LABEL_8:
  v10 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12);
  return a1;
}

_QWORD *sub_10008C208(_QWORD *a1)
{
  sub_100040E9C(a1);
  return a1;
}

void *initializeWithTake for OuterConfig(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_10008C244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a2 + 48);
  if (!v5)
    goto LABEL_5;
  if (!v6)
  {
    sub_10008C208((_QWORD *)(a1 + 48));
LABEL_5:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10008C324(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10008C378(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

void type metadata accessor for ASDConfig()
{
  sub_100035800();
}

unint64_t sub_10008C3F0()
{
  unint64_t result;

  result = qword_100505A20;
  if (!qword_100505A20)
  {
    result = swift_getWitnessTable(&unk_10040A10C, &type metadata for ASDConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505A20);
  }
  return result;
}

unint64_t sub_10008C42C()
{
  unint64_t result;

  result = qword_100505A38;
  if (!qword_100505A38)
  {
    result = swift_getWitnessTable(&unk_10040A0E4, &unk_1004D27B8);
    atomic_store(result, (unint64_t *)&qword_100505A38);
  }
  return result;
}

unint64_t sub_10008C468()
{
  unint64_t result;

  result = qword_100505A40;
  if (!qword_100505A40)
  {
    result = swift_getWitnessTable(&unk_1004078F8, &unk_1004CFEC8);
    atomic_store(result, (unint64_t *)&qword_100505A40);
  }
  return result;
}

unint64_t sub_10008C4A4()
{
  unint64_t result;

  result = qword_100505A48;
  if (!qword_100505A48)
  {
    result = swift_getWitnessTable(&unk_10040A0BC, &unk_1004D2738);
    atomic_store(result, (unint64_t *)&qword_100505A48);
  }
  return result;
}

void sub_10008C4E0(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;

  if (!sub_10008EA50(a1))
  {
    sub_10008EA04(0, v3);
    v2();
    atomic_store(sub_10008EB18((uint64_t)&protocol conformance descriptor for <> [A : B]), v1);
  }
  sub_100046F94();
}

unint64_t sub_10008C52C()
{
  unint64_t result;

  result = qword_100505A60;
  if (!qword_100505A60)
  {
    result = swift_getWitnessTable(&unk_10040A094, &unk_1004D26A8);
    atomic_store(result, (unint64_t *)&qword_100505A60);
  }
  return result;
}

unint64_t sub_10008C568()
{
  unint64_t result;

  result = qword_100505A78;
  if (!qword_100505A78)
  {
    result = swift_getWitnessTable(&unk_10040A06C, &unk_1004D2618);
    atomic_store(result, (unint64_t *)&qword_100505A78);
  }
  return result;
}

void sub_10008C5A4(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;

  if (!sub_10008EA50(a1))
  {
    sub_10008EA04(0, v3);
    v2();
    atomic_store(sub_10008EB18((uint64_t)&protocol conformance descriptor for <> [A : B]), v1);
  }
  sub_100046F94();
}

unint64_t sub_10008C5F0()
{
  unint64_t result;

  result = qword_100505A90;
  if (!qword_100505A90)
  {
    result = swift_getWitnessTable(&unk_10040A044, &unk_1004D27B8);
    atomic_store(result, (unint64_t *)&qword_100505A90);
  }
  return result;
}

unint64_t sub_10008C62C()
{
  unint64_t result;

  result = qword_100505A98;
  if (!qword_100505A98)
  {
    result = swift_getWitnessTable(&unk_1004078D0, &unk_1004CFEC8);
    atomic_store(result, (unint64_t *)&qword_100505A98);
  }
  return result;
}

unint64_t sub_10008C668()
{
  unint64_t result;

  result = qword_100505AA8;
  if (!qword_100505AA8)
  {
    result = swift_getWitnessTable(&unk_10040A01C, &unk_1004D2738);
    atomic_store(result, (unint64_t *)&qword_100505AA8);
  }
  return result;
}

unint64_t sub_10008C6A4()
{
  unint64_t result;

  result = qword_100505AB8;
  if (!qword_100505AB8)
  {
    result = swift_getWitnessTable(&unk_100409FF4, &unk_1004D26A8);
    atomic_store(result, (unint64_t *)&qword_100505AB8);
  }
  return result;
}

unint64_t sub_10008C6E0()
{
  unint64_t result;

  result = qword_100505AC8;
  if (!qword_100505AC8)
  {
    result = swift_getWitnessTable(&unk_100409FCC, &unk_1004D2618);
    atomic_store(result, &qword_100505AC8);
  }
  return result;
}

uint64_t sub_10008C71C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008C72C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_100505AD4);
  v6 = (_QWORD *)sub_100048D70(v5);
  *v6 = v2;
  v6[1] = sub_10004EC60;
  return sub_1000894B8(a1, v4);
}

uint64_t sub_10008C780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008C790(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10008C798()
{
  uint64_t v0;

  sub_10006E944();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008C7C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_100505AEC);
  v1 = (_QWORD *)sub_100048D70(v0);
  v2 = sub_10008EA34(v1);
  return sub_100089DFC(v2, v3, v4, v5);
}

uint64_t sub_10008C820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100032C48(&qword_100505B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C868()
{
  uint64_t v0;

  sub_10006E944();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C888()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(dword_100505B3C);
  v2 = (_QWORD *)sub_100048D70(v1);
  *v2 = v0;
  v2[1] = sub_10004EC60;
  sub_100057514();
  return sub_100089D1C();
}

uint64_t sub_10008C8DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100032C48(&qword_100505B58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008C964()
{
  sub_100032C48(&qword_100505B58);
  return sub_10008A614();
}

void sub_10008C994(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_10008EA50(a1))
  {
    v3 = v2(255);
    atomic_store(sub_10005FF3C(v3), v1);
  }
  sub_100028D0C();
}

void sub_10008C9C4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10008EA50(a1))
  {
    v3 = sub_10008EA04(0, v2);
    atomic_store(sub_10005FF3C(v3), v1);
  }
  sub_100028D0C();
}

unint64_t sub_10008C9EC()
{
  unint64_t result;

  result = qword_100505B80;
  if (!qword_100505B80)
  {
    result = swift_getWitnessTable(&unk_100409F64, &type metadata for OuterConfig);
    atomic_store(result, (unint64_t *)&qword_100505B80);
  }
  return result;
}

void sub_10008CA28(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;

  if (!sub_10008EA50(a1))
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_100035350(v2);
    v6();
    atomic_store(swift_getWitnessTable(v5, v7), v1);
  }
  sub_100046F94();
}

unint64_t sub_10008CA7C()
{
  unint64_t result;

  result = qword_100505BA0;
  if (!qword_100505BA0)
  {
    result = swift_getWitnessTable(&unk_10040B208, &type metadata for RemoteFeatureToggle);
    atomic_store(result, (unint64_t *)&qword_100505BA0);
  }
  return result;
}

_QWORD *sub_10008CAB8(_QWORD *a1)
{
  destroy for FeatureToggleResolver(a1);
  return a1;
}

uint64_t destroy for OuterConfig(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = a1[5];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    v3 = a1[6];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(a1[7]);
    }
    swift_bridgeObjectRelease(a1[10]);
    return swift_bridgeObjectRelease(a1[11]);
  }
  return result;
}

_QWORD *initializeWithCopy for OuterConfig(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __src[5];
  if (v4 == 1)
  {
    memcpy(__dst, __src, 0x60uLL);
  }
  else
  {
    *__dst = *__src;
    *((_BYTE *)__dst + 8) = *((_BYTE *)__src + 8);
    __dst[2] = __src[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
    *((_DWORD *)__dst + 7) = *((_DWORD *)__src + 7);
    *((_BYTE *)__dst + 32) = *((_BYTE *)__src + 32);
    __dst[5] = v4;
    v6 = __src + 6;
    v5 = __src[6];
    swift_bridgeObjectRetain(v4);
    if (v5)
    {
      v7 = __src[7];
      __dst[6] = v5;
      __dst[7] = v7;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
    }
    else
    {
      *((_OWORD *)__dst + 3) = *v6;
    }
    __dst[8] = __src[8];
    *((_WORD *)__dst + 36) = *((_WORD *)__src + 36);
    v8 = __src[10];
    v9 = __src[11];
    __dst[10] = v8;
    __dst[11] = v9;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  return __dst;
}

_QWORD *assignWithCopy for OuterConfig(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = __dst[5];
  v5 = __src[5];
  if (v4 != 1)
  {
    if (v5 == 1)
    {
      sub_10008CE3C(__dst);
      goto LABEL_7;
    }
    v10 = *__src;
    *((_BYTE *)__dst + 8) = *((_BYTE *)__src + 8);
    *__dst = v10;
    v11 = __src[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
    __dst[2] = v11;
    LODWORD(v11) = *((_DWORD *)__src + 7);
    *((_BYTE *)__dst + 32) = *((_BYTE *)__src + 32);
    *((_DWORD *)__dst + 7) = v11;
    __dst[5] = __src[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v4);
    v12 = __dst[6];
    v13 = __src[6];
    if (v12)
    {
      if (v13)
      {
        __dst[6] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v12);
        v14 = __dst[7];
        __dst[7] = __src[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v14);
LABEL_17:
        v16 = __src[8];
        *((_BYTE *)__dst + 72) = *((_BYTE *)__src + 72);
        __dst[8] = v16;
        *((_BYTE *)__dst + 73) = *((_BYTE *)__src + 73);
        v17 = __dst[10];
        __dst[10] = __src[10];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v17);
        v18 = __dst[11];
        __dst[11] = __src[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v18);
        return __dst;
      }
      sub_10008C208(__dst + 6);
    }
    else if (v13)
    {
      __dst[6] = v13;
      __dst[7] = __src[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    *((_OWORD *)__dst + 3) = *((_OWORD *)__src + 3);
    goto LABEL_17;
  }
  if (v5 == 1)
  {
LABEL_7:
    memcpy(__dst, __src, 0x60uLL);
    return __dst;
  }
  v6 = *__src;
  *((_BYTE *)__dst + 8) = *((_BYTE *)__src + 8);
  *__dst = v6;
  v7 = __src[2];
  *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
  __dst[2] = v7;
  LODWORD(v7) = *((_DWORD *)__src + 7);
  *((_BYTE *)__dst + 32) = *((_BYTE *)__src + 32);
  *((_DWORD *)__dst + 7) = v7;
  __dst[5] = __src[5];
  v9 = __src + 6;
  v8 = __src[6];
  swift_bridgeObjectRetain();
  if (v8)
  {
    __dst[6] = v8;
    __dst[7] = __src[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)__dst + 3) = *v9;
  }
  v15 = __src[8];
  *((_BYTE *)__dst + 72) = *((_BYTE *)__src + 72);
  __dst[8] = v15;
  *((_BYTE *)__dst + 73) = *((_BYTE *)__src + 73);
  __dst[10] = __src[10];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return __dst;
}

_QWORD *sub_10008CE3C(_QWORD *a1)
{
  sub_10008BFCC(a1);
  return a1;
}

_QWORD *assignWithTake for OuterConfig(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __dst[5];
  if (v4 == 1)
    goto LABEL_4;
  v5 = __src[5];
  if (v5 != 1)
  {
    *__dst = *__src;
    *((_BYTE *)__dst + 8) = *((_BYTE *)__src + 8);
    __dst[2] = __src[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)__src + 24);
    *((_DWORD *)__dst + 7) = *((_DWORD *)__src + 7);
    *((_BYTE *)__dst + 32) = *((_BYTE *)__src + 32);
    __dst[5] = v5;
    swift_bridgeObjectRelease(v4);
    v6 = __dst[6];
    v7 = __src[6];
    if (v6)
    {
      if (v7)
      {
        __dst[6] = v7;
        swift_bridgeObjectRelease(v6);
        v8 = __dst[7];
        __dst[7] = __src[7];
        swift_bridgeObjectRelease(v8);
LABEL_10:
        __dst[8] = __src[8];
        *((_WORD *)__dst + 36) = *((_WORD *)__src + 36);
        v9 = __dst[10];
        __dst[10] = __src[10];
        swift_bridgeObjectRelease(v9);
        v10 = __dst[11];
        __dst[11] = __src[11];
        swift_bridgeObjectRelease(v10);
        return __dst;
      }
      sub_10008C208(__dst + 6);
    }
    *((_OWORD *)__dst + 3) = *((_OWORD *)__src + 3);
    goto LABEL_10;
  }
  sub_10008CE3C(__dst);
LABEL_4:
  memcpy(__dst, __src, 0x60uLL);
  return __dst;
}

uint64_t getEnumTagSinglePayload for OuterConfig(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;
  int v4;
  BOOL v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 96))
    {
      v2 = *(_DWORD *)a1 + 2147483645;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v4 = v3 - 1;
      if (v4 < 0)
        v4 = -1;
      v5 = __OFSUB__(v4, 1);
      v2 = v4 - 1;
      if (v2 < 0 != v5)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OuterConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OuterConfig()
{
  return &type metadata for OuterConfig;
}

uint64_t sub_10008D048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void sub_10008D050(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  sub_10008D6F0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 0, 3, v4);
  }
}

uint64_t *sub_10008D0C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v14 = *a2;
        swift_errorRetain(v14);
        *a1 = v14;
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_13;
      case 1:
        v15 = type metadata accessor for HTTPStatusCode(0);
        if (sub_1000352C8((uint64_t)a2, 1, v15))
        {
          v16 = sub_100032C48(&qword_100505B10);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
          sub_100037020((uint64_t)a1, 0, 1, v15);
        }
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_13;
      case 0:
        v9 = *a2;
        swift_errorRetain(v9);
        *a1 = v9;
        v10 = a1;
        v11 = a3;
        v12 = 0;
LABEL_13:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_10008D210(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      return swift_errorRelease(*a1);
    case 1:
      v4 = type metadata accessor for HTTPStatusCode(0);
      result = sub_1000352C8((uint64_t)a1, 1, v4);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 0:
      return swift_errorRelease(*a1);
  }
  return result;
}

_QWORD *sub_10008D290(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = *a2;
      swift_errorRetain(v11);
      *a1 = v11;
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_11;
    case 1:
      v12 = type metadata accessor for HTTPStatusCode(0);
      if (sub_1000352C8((uint64_t)a2, 1, v12))
      {
        v13 = sub_100032C48(&qword_100505B10);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        sub_100037020((uint64_t)a1, 0, 1, v12);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_11;
    case 0:
      v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *sub_10008D3B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v12 = *a2;
        swift_errorRetain(v12);
        *a1 = v12;
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_12;
      case 1:
        v13 = type metadata accessor for HTTPStatusCode(0);
        if (sub_1000352C8((uint64_t)a2, 1, v13))
        {
          v14 = sub_100032C48(&qword_100505B10);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
          sub_100037020((uint64_t)a1, 0, 1, v13);
        }
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_12;
      case 0:
        v8 = *a2;
        swift_errorRetain(v8);
        *a1 = v8;
        v9 = a1;
        v10 = a3;
        v11 = 0;
LABEL_12:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v6 + 64));
  }
  return a1;
}

void *sub_10008D4F8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for HTTPStatusCode(0);
    if (sub_1000352C8((uint64_t)a2, 1, v6))
    {
      v7 = sub_100032C48(&qword_100505B10);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      sub_100037020((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10008D5D4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for HTTPStatusCode(0);
      if (sub_1000352C8((uint64_t)a2, 1, v7))
      {
        v8 = sub_100032C48(&qword_100505B10);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        sub_100037020((uint64_t)a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_10008D6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t type metadata accessor for ConfigurationFetcher.ConfigManagerError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006DD14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConfigurationFetcher.ConfigManagerError);
}

void sub_10008D6F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100505C50)
  {
    v2 = type metadata accessor for HTTPStatusCode(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100505C50);
  }
}

uint64_t getEnumTagSinglePayload for ASDConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 8) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v5 = v6 - 9;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ASDConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10008D818 + 4 * byte_100409BCC[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10008D84C + 4 * byte_100409BC7[v4]))();
}

uint64_t sub_10008D84C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008D854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008D85CLL);
  return result;
}

uint64_t sub_10008D868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008D870);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10008D874(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008D87C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.CodingKeys()
{
  return &type metadata for ASDConfig.CodingKeys;
}

uint64_t sub_10008D898(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t sub_10008D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_10008D93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 sub_10008D9E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10008DA04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t sub_10008DA70(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10008DAB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASDConfig.ServiceAreaConfig()
{
  sub_100035800();
}

uint64_t sub_10008DB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10008DB48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  return a1;
}

__n128 sub_10008DBBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10008DBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_10008DC14(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 28))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10008DC54(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASDConfig.ASServerJSONBagConfiguration()
{
  sub_100035800();
}

uint64_t sub_10008DCA4(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10008DD3C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008DD88 + 4 * byte_100409BD6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10008DDBC + 4 * byte_100409BD1[v4]))();
}

uint64_t sub_10008DDBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008DDC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008DDCCLL);
  return result;
}

uint64_t sub_10008DDD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008DDE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10008DDE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008DDEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ASDConfig.ASPushNotificationsConfiguration()
{
  sub_100035800();
}

void sub_10008DE08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_100028D0C();
}

uint64_t sub_10008DE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 sub_10008DE8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_10008DEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_10008DEDC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10008DF1C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ASDConfig.AirlineNameFormat()
{
  sub_100035800();
}

unint64_t sub_10008DF6C()
{
  unint64_t result;

  result = qword_100505C58;
  if (!qword_100505C58)
  {
    result = swift_getWitnessTable(&unk_100409F14, &type metadata for ASDConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C58);
  }
  return result;
}

unint64_t sub_10008DFAC()
{
  unint64_t result;

  result = qword_100505C60;
  if (!qword_100505C60)
  {
    result = swift_getWitnessTable(&unk_100409E84, &type metadata for ASDConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C60);
  }
  return result;
}

unint64_t sub_10008DFEC()
{
  unint64_t result;

  result = qword_100505C68;
  if (!qword_100505C68)
  {
    result = swift_getWitnessTable(&unk_100409EAC, &type metadata for ASDConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C68);
  }
  return result;
}

unint64_t sub_10008E028()
{
  unint64_t result;

  result = qword_100505C78;
  if (!qword_100505C78)
  {
    result = swift_getWitnessTable(&unk_10040A634, &type metadata for ASDConfig.AirlineNameFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C78);
  }
  return result;
}

unint64_t sub_10008E064()
{
  unint64_t result;

  result = qword_100505C88;
  if (!qword_100505C88)
  {
    result = swift_getWitnessTable(&unk_10040A5E4, &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C88);
  }
  return result;
}

unint64_t sub_10008E0A0()
{
  unint64_t result;

  result = qword_100505C98;
  if (!qword_100505C98)
  {
    result = swift_getWitnessTable(&unk_10040A594, &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505C98);
  }
  return result;
}

unint64_t sub_10008E0DC()
{
  unint64_t result;

  result = qword_100505CA8;
  if (!qword_100505CA8)
  {
    result = swift_getWitnessTable(&unk_10040A544, &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505CA8);
  }
  return result;
}

void sub_10008E118(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!sub_10008EA50(a1))
  {
    v3 = v2;
    v4 = sub_100035350(&qword_100503E60);
    atomic_store(swift_getWitnessTable(v3, v4), v1);
  }
  sub_100046F94();
}

unint64_t sub_10008E168()
{
  unint64_t result;

  result = qword_100505CD8;
  if (!qword_100505CD8)
  {
    result = swift_getWitnessTable(&unk_10040A4F4, &type metadata for OuterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505CD8);
  }
  return result;
}

unint64_t sub_10008E1A4()
{
  unint64_t result;

  result = qword_100505CE0;
  if (!qword_100505CE0)
  {
    result = swift_getWitnessTable(&unk_100409D54, &unk_1004D22E0);
    atomic_store(result, (unint64_t *)&qword_100505CE0);
  }
  return result;
}

unint64_t sub_10008E1E0()
{
  unint64_t result;

  result = qword_100505CF0;
  if (!qword_100505CF0)
  {
    result = swift_getWitnessTable(&unk_100409D2C, &unk_1004D22E0);
    atomic_store(result, (unint64_t *)&qword_100505CF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OuterConfig.CodingKeys()
{
  return &type metadata for OuterConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for ASDConfig.ServiceAreaConfig.CodingKeys()
{
  return &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys;
}

uint64_t _s3asd9ASDConfigV17ServiceAreaConfigV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10008E29C + 4 * byte_100409BE0[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10008E2D0 + 4 * byte_100409BDB[v4]))();
}

uint64_t sub_10008E2D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E2D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008E2E0);
  return result;
}

uint64_t sub_10008E2EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008E2F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10008E2F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E300(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.ASServerJSONBagConfiguration.CodingKeys()
{
  return &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AssessmentPayloadError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s3asd11OuterConfigV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10008E3AC + 4 * byte_100409BE5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10008E3CC + 4 * byte_100409BEA[v4]))();
}

_BYTE *sub_10008E3AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10008E3CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008E3D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008E3DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008E3E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008E3EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.ASPushNotificationsConfiguration.CodingKeys()
{
  return &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASDConfig.AirlineNameFormat.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008E454 + 4 * byte_100409BF4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10008E488 + 4 * byte_100409BEF[v4]))();
}

uint64_t sub_10008E488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008E498);
  return result;
}

uint64_t sub_10008E4A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008E4ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10008E4B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E4B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.AirlineNameFormat.CodingKeys()
{
  return &type metadata for ASDConfig.AirlineNameFormat.CodingKeys;
}

unint64_t sub_10008E4D8()
{
  unint64_t result;

  result = qword_100505CF8;
  if (!qword_100505CF8)
  {
    result = swift_getWitnessTable(&unk_10040A1EC, &type metadata for ASDConfig.AirlineNameFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505CF8);
  }
  return result;
}

unint64_t sub_10008E518()
{
  unint64_t result;

  result = qword_100505D00;
  if (!qword_100505D00)
  {
    result = swift_getWitnessTable(&unk_10040A2A4, &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D00);
  }
  return result;
}

unint64_t sub_10008E558()
{
  unint64_t result;

  result = qword_100505D08;
  if (!qword_100505D08)
  {
    result = swift_getWitnessTable(&unk_10040A35C, &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D08);
  }
  return result;
}

unint64_t sub_10008E598()
{
  unint64_t result;

  result = qword_100505D10;
  if (!qword_100505D10)
  {
    result = swift_getWitnessTable(&unk_10040A414, &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D10);
  }
  return result;
}

unint64_t sub_10008E5D8()
{
  unint64_t result;

  result = qword_100505D18;
  if (!qword_100505D18)
  {
    result = swift_getWitnessTable(&unk_10040A4CC, &type metadata for OuterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D18);
  }
  return result;
}

unint64_t sub_10008E618()
{
  unint64_t result;

  result = qword_100505D20;
  if (!qword_100505D20)
  {
    result = swift_getWitnessTable(&unk_10040A43C, &type metadata for OuterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D20);
  }
  return result;
}

unint64_t sub_10008E658()
{
  unint64_t result;

  result = qword_100505D28;
  if (!qword_100505D28)
  {
    result = swift_getWitnessTable(&unk_10040A464, &type metadata for OuterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D28);
  }
  return result;
}

unint64_t sub_10008E698()
{
  unint64_t result;

  result = qword_100505D30;
  if (!qword_100505D30)
  {
    result = swift_getWitnessTable(&unk_10040A384, &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D30);
  }
  return result;
}

unint64_t sub_10008E6D8()
{
  unint64_t result;

  result = qword_100505D38;
  if (!qword_100505D38)
  {
    result = swift_getWitnessTable(&unk_10040A3AC, &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D38);
  }
  return result;
}

unint64_t sub_10008E718()
{
  unint64_t result;

  result = qword_100505D40;
  if (!qword_100505D40)
  {
    result = swift_getWitnessTable(&unk_10040A2CC, &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D40);
  }
  return result;
}

unint64_t sub_10008E758()
{
  unint64_t result;

  result = qword_100505D48;
  if (!qword_100505D48)
  {
    result = swift_getWitnessTable(&unk_10040A2F4, &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D48);
  }
  return result;
}

unint64_t sub_10008E798()
{
  unint64_t result;

  result = qword_100505D50;
  if (!qword_100505D50)
  {
    result = swift_getWitnessTable(&unk_10040A214, &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D50);
  }
  return result;
}

unint64_t sub_10008E7D8()
{
  unint64_t result;

  result = qword_100505D58;
  if (!qword_100505D58)
  {
    result = swift_getWitnessTable(&unk_10040A23C, &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D58);
  }
  return result;
}

unint64_t sub_10008E818()
{
  unint64_t result;

  result = qword_100505D60;
  if (!qword_100505D60)
  {
    result = swift_getWitnessTable(&unk_10040A15C, &type metadata for ASDConfig.AirlineNameFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D60);
  }
  return result;
}

unint64_t sub_10008E858()
{
  unint64_t result;

  result = qword_100505D68;
  if (!qword_100505D68)
  {
    result = swift_getWitnessTable(&unk_10040A184, &type metadata for ASDConfig.AirlineNameFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100505D68);
  }
  return result;
}

uint64_t sub_10008E8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10008E8BC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 296);
}

uint64_t sub_10008E8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v2);
}

uint64_t sub_10008E8EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10008E908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10008E918()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000397F4(v0, v1);
}

uint64_t sub_10008E924()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 64))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10008E938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10008E954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 66) = 1;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10008E964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10008E974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_10008E984(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  uint8_t *v5;

  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t sub_10008E994(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_10008E9A4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10008E9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 136) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 136, v3);
}

_QWORD *sub_10008E9CC()
{
  _QWORD *v0;

  return sub_100032EFC(v0, v0[3]);
}

uint64_t sub_10008E9EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10008EA04(uint64_t a1, uint64_t *a2)
{
  return sub_100035350(a2);
}

uint64_t sub_10008EA10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  result = *(_QWORD *)(v2 + 72);
  *v3 = *v0;
  return result;
}

uint64_t sub_10008EA2C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10008EA34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10008EA50(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_10008EA5C()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 96, v0);
}

uint64_t sub_10008EA70()
{
  return type metadata accessor for TaskPriority(0);
}

BOOL sub_10008EA84(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10008EA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10008EAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10008EACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return swift_task_create(v5, a2, a3, v4, v3);
}

uint64_t sub_10008EB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10008EB18(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_10008EB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2, v3);
}

void sub_10008EB30(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_100046118((uint64_t)&a9, (uint64_t)&a21, a3);
}

void sub_10008EB3C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 2;
}

uint64_t sub_10008EB48()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96));
}

uint64_t sub_10008EB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_getErrorValue(a1, v2, v1);
}

void sub_10008EB5C()
{
  Hasher._combine(_:)(0);
}

void sub_10008EB68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000774C4(v2, a2);
}

uint64_t sub_10008EB70()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10008C820(v1, v0);
}

void sub_10008EB7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000774C4(v2, a2);
}

uint64_t sub_10008EB98()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100033030(v1, v0);
}

uint64_t sub_10008EBA4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10008EBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, a4, v4);
}

void sub_10008EBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003E164(a1, a2, 1, v2);
}

uint64_t sub_10008EBD8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10008EBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000352C8(a1, a2, a3);
}

void sub_10008EBF4(void (*a1)(void))
{
  a1();
  sub_100028D0C();
}

void sub_10008EC10(uint64_t a1)
{
  (*(void (**)(void))(a1 + 32))();
  sub_100028D0C();
}

uint64_t sub_10008EC2C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10008EC58()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100035270(v0, qword_100505D70);
  sub_1000352B0(v0, (uint64_t)qword_100505D70);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0x73746361746E6F43, 0xE800000000000000);
}

uint64_t sub_10008ECD4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v11 = 0;
  v2 = *(NSObject **)(v0 + 24);
  v3 = sub_10008F820((uint64_t)&unk_1004D2C10);
  *(_QWORD *)(v3 + 16) = &v11;
  *(_QWORD *)(v3 + 24) = v0;
  v4 = sub_10008F820((uint64_t)&unk_1004D2C38);
  *(_QWORD *)(v4 + 16) = sub_10008F7D4;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_10008F7EC;
  v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EC10;
  aBlock[3] = &unk_1004D2C50;
  v5 = _Block_copy(aBlock);
  v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 114, 33, 30, 1);
  result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v3);
    return v8;
  }
  return result;
}

void sub_10008EDFC(id *a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a2 + 32);
  v4 = *a1;
  *a1 = v2;
  v3 = v2;

}

uint64_t sub_10008EE2C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v17;

  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100046E44();
  v8 = v7 - v6;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10006EE68();
  static DispatchWorkItemFlags.barrier.getter();
  v11 = sub_10008F820((uint64_t)&unk_1004D2BC0);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10008F790;
  v17 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EC2C;
  aBlock[3] = &unk_1004D2BD8;
  v12 = _Block_copy(aBlock);
  v13 = a1;
  v14 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v2, v12);
  _Block_release(v12);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  return swift_release(v17);
}

void sub_10008EF8C(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2;
  v2 = a2;

}

_QWORD *sub_10008EFB8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  id v19;
  _QWORD aBlock[5];
  _QWORD *v22;

  v2 = v0;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100046E44();
  v7 = v6 - v5;
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  sub_100046E44();
  v11 = v10 - v9;
  v12 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v12);
  sub_10006EE68();
  v2[2] = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  sub_100039884(0, (unint64_t *)&qword_100505E80, OS_dispatch_queue_ptr);
  v13 = static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter(v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  v2[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001003E5220, v11, v1, v7, 0);
  v2[4] = 0;
  sub_10008F380();
  v14 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v15 = CNContactStoreMeContactDidChangeNotification;
  v16 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  aBlock[4] = sub_10008F808;
  v22 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000975C8;
  aBlock[3] = &unk_1004D2C78;
  v17 = _Block_copy(aBlock);
  v18 = v22;
  swift_retain(v2);
  swift_release(v18);
  v19 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", v15, 0, v16, v17);
  _Block_release(v17);
  swift_unknownObjectRelease(v19);

  return v2;
}

void sub_10008F208()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (qword_1005034E0 != -1)
    swift_once(&qword_1005034E0, sub_10008EC58);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000352B0(v0, (uint64_t)qword_100505D70);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Me Contact changed", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_10008F380();
  if ((v5 & 1) == 0)
  {
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Ignoring notification since values that we care about did not change", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
}

uint64_t sub_10008F380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSString *v4;
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[16];
  id v36;

  v1 = sub_100032C48(&qword_100505830);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100409840;
  *(_QWORD *)(v2 + 32) = CNContactGivenNameKey;
  *(_QWORD *)(v2 + 40) = CNContactFamilyNameKey;
  *(_QWORD *)(v2 + 48) = CNContactPhoneNumbersKey;
  *(_QWORD *)(v2 + 56) = CNContactEmailAddressesKey;
  *(_QWORD *)(v2 + 64) = CNContactPostalAddressesKey;
  v36 = (id)v2;
  specialized Array._endMutation()(v2);
  v3 = *(void **)(v0 + 16);
  v4 = CNContactGivenNameKey;
  v5 = CNContactFamilyNameKey;
  v6 = CNContactPhoneNumbersKey;
  v7 = CNContactEmailAddressesKey;
  v8 = CNContactPostalAddressesKey;
  sub_100032C48(&qword_100505820);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  v36 = 0;
  v10 = objc_msgSend(v3, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", isa, &v36);

  v11 = v36;
  if (!v10)
  {
    v19 = v36;
    v20 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v21);
    if (qword_1005034E0 != -1)
      swift_once(&qword_1005034E0, sub_10008EC58);
    v22 = type metadata accessor for Logger(0);
    sub_1000352B0(v22, (uint64_t)qword_100505D70);
    swift_errorRetain(v20);
    v23 = swift_errorRetain(v20);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void *)swift_slowAlloc(32, -1);
      v36 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_getErrorValue(v20, v35, v34);
      v28 = Error.localizedDescription.getter(v34[1], v34[2]);
      v30 = v29;
      v33 = sub_100036778(v28, v29, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      sub_10006E690();
      sub_10006E690();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ignoring error getting MeContact %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1);
      sub_100033080((uint64_t)v27);
      sub_100033080((uint64_t)v26);

      sub_10006E690();
    }
    else
    {
      sub_10006E690();
      sub_10006E690();
      sub_10006E690();

    }
    return 0;
  }
  v12 = v10;
  v13 = v11;
  v14 = v12;
  v15 = sub_10008ECD4();
  if (!v15)
  {

    goto LABEL_10;
  }
  v16 = (void *)v15;
  sub_100039884(0, &qword_100505828, CNContact_ptr);
  v17 = v14;
  v18 = static NSObject.== infix(_:_:)(v17, v16);

  if ((v18 & 1) == 0)
  {
LABEL_10:
    v31 = v14;
    sub_10008EE2C(v10);

    return 1;
  }

  return 0;
}

id *sub_10008F6F8()
{
  id *v0;

  return v0;
}

uint64_t sub_10008F724()
{
  uint64_t v0;

  sub_10008F6F8();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DIPContactsManager()
{
  return objc_opt_self(_TtC3asd18DIPContactsManager);
}

uint64_t sub_10008F764()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10008F790()
{
  uint64_t v0;

  sub_10008EF8C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10008F798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008F7A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10008F7B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10008F7D4()
{
  uint64_t v0;

  sub_10008EDFC(*(id **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10008F7DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10008F7EC()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_100028D0C();
}

void sub_10008F808()
{
  sub_10008F208();
}

uint64_t sub_10008F820(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10008F82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  sub_100037020((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D2CF8, 48);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)sub_100040900((uint64_t)&unk_1004D2D20, 48);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_100505F28;
  v9[5] = v8;
  v10 = sub_1000914D4((uint64_t)v6, (uint64_t)&unk_100505F38, (uint64_t)v9);
  return swift_release(v10);
}

void sub_10008F900(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100032C48(&qword_100505F08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v28 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(v4 + 63) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  sub_10009230C();
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    sub_1000547D8(*(_QWORD *)(a1 + 56) + 40 * i, (uint64_t)v46);
    v44 = v16;
    v45 = v15;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v32[0] = v16;
    v32[1] = v15;
    swift_bridgeObjectRetain(v15);
    sub_1000922E0((uint64_t)&v33, (uint64_t)v32, (uint64_t)&type metadata for String, (uint64_t)&type metadata for AnyHashable);
    v30[0] = v41;
    v30[1] = v42;
    v31 = v43;
    sub_1000922E0((uint64_t)v36, (uint64_t)v30, (uint64_t)&type metadata for AnyHashable, (uint64_t)&type metadata for Any + 8);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_100053FB8(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_100053FB8(v40, v30);
    AnyHashable._rawHashValue(seed:)(v3[5]);
    sub_1000922F8();
    if (((v19 << v18) & ~v7[v17]) == 0)
    {
      sub_10005FF88();
      while (++v21 != v22 || (v20 & 1) == 0)
      {
        v23 = v21 == v22;
        if (v21 == v22)
          v21 = 0;
        v20 |= v23;
        if (v7[v21] != -1)
        {
          sub_10005FF74();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    sub_10005FF9C();
LABEL_31:
    sub_10009235C();
    *(_QWORD *)((char *)v7 + v24) |= v25;
    v27 = v3[6] + 40 * v26;
    *(_OWORD *)v27 = v33;
    *(_OWORD *)(v27 + 16) = v34;
    *(_QWORD *)(v27 + 32) = v35;
    sub_100053FB8(v30, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_35;
    if (v11 >= v29)
      goto LABEL_33;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v29)
        goto LABEL_33;
      v12 = *(_QWORD *)(v28 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v29)
          goto LABEL_33;
        v12 = *(_QWORD *)(v28 + 8 * v8);
        if (!v12)
        {
          v13 = v11 + 3;
          if (v13 >= v29)
          {
LABEL_33:
            swift_release(a1);
            sub_10004F244();
            return;
          }
          v12 = *(_QWORD *)(v28 + 8 * v13);
          v8 = v13;
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v29)
      goto LABEL_33;
    v12 = *(_QWORD *)(v28 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
}

void sub_10008FC3C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  __int128 v41[2];
  __int128 v42;
  __int128 v43[2];
  __int128 v44[3];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100032C48((uint64_t *)&unk_100504D70);
    v2 = (_QWORD *)sub_1000922E8();
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v36 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v35 = (unint64_t)(63 - v3) >> 6;
  sub_1000371CC();
  v37 = 0;
  v6 = &type metadata for String;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        sub_10009230C();
        v8 = v7 | (v37 << 6);
      }
      else
      {
        v9 = v37 + 1;
        if (__OFADD__(v37, 1))
          goto LABEL_38;
        if (v9 >= v35)
        {
LABEL_35:
          sub_10005495C(a1);
          return;
        }
        v10 = *(_QWORD *)(v36 + 8 * v9);
        v11 = v37 + 1;
        if (!v10)
        {
          sub_100092338();
          if (v12 == v13)
            goto LABEL_35;
          sub_100092320();
          if (!v10)
          {
            sub_100092338();
            if (v12 == v13)
              goto LABEL_35;
            sub_100092320();
            if (!v10)
            {
              sub_100092338();
              if (v12 == v13)
                goto LABEL_35;
              sub_100092320();
              if (!v10)
              {
                v15 = v14 + 4;
                if (v15 >= v35)
                  goto LABEL_35;
                v10 = *(_QWORD *)(v36 + 8 * v15);
                if (!v10)
                {
                  while (!__OFADD__(v15, 1))
                  {
                    sub_100092338();
                    if (v12 == v13)
                      goto LABEL_35;
                    sub_100092320();
                    v15 = v16 + 1;
                    if (v10)
                      goto LABEL_29;
                  }
                  goto LABEL_39;
                }
                v11 = v15;
              }
            }
          }
        }
LABEL_29:
        v5 = (v10 - 1) & v10;
        v8 = __clz(__rbit64(v10)) + (v11 << 6);
        v37 = v11;
      }
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v19 = *v17;
      v18 = v17[1];
      v20 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v8);
      v21 = *v20;
      v22 = v20[1];
      v39 = v19;
      v40 = v18;
      v38[0] = v21;
      v38[1] = v22;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v22);
      v23 = sub_100032C48(&qword_1005044C0);
      sub_1000922E0((uint64_t)v41, (uint64_t)v38, (uint64_t)v6, v23);
      v24 = v39;
      v25 = v40;
      sub_1000351FC(v41, (uint64_t)v43);
      sub_1000351FC(v43, (uint64_t)v44);
      sub_1000351FC(v44, (uint64_t)&v42);
      v26 = sub_100052C20(v24, v25);
      v27 = v26;
      if ((v28 & 1) == 0)
        break;
      v29 = v6;
      v30 = (uint64_t *)(v2[6] + 16 * v26);
      swift_bridgeObjectRelease(v30[1]);
      *v30 = v24;
      v30[1] = v25;
      v6 = v29;
      v31 = (_QWORD *)(v2[7] + 40 * v27);
      sub_100032F94(v31);
      sub_1000351FC(&v42, (uint64_t)v31);
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v26;
    v32 = (uint64_t *)(v2[6] + 16 * v26);
    *v32 = v24;
    v32[1] = v25;
    sub_1000351FC(&v42, v2[7] + 40 * v26);
    v33 = v2[2];
    v13 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v13)
      goto LABEL_37;
    v2[2] = v34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_10008FF2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100032C48(&qword_100505F08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    sub_100036FA0(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v41);
    *(_QWORD *)&v40 = v18;
    *((_QWORD *)&v40 + 1) = v17;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v18;
    *((_QWORD *)&v38[0] + 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_100053FB8(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_100053FB8(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_100053FB8(v37, v38);
    sub_100053FB8(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v19 = -1 << *((_BYTE *)v3 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~v7[v20 >> 6]) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = v7[v21];
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~v7[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)((char *)v7 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v27 = v3[6] + 40 * v22;
    *(_OWORD *)v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
    *(_QWORD *)(v27 + 32) = v32;
    result = (uint64_t)sub_100053FB8(&v34, (_OWORD *)(v3[7] + 32 * v22));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v28)
      goto LABEL_36;
    v13 = *(_QWORD *)(v29 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_36;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_36;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_36;
          v13 = *(_QWORD *)(v29 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_36:
    swift_release(v3);
    sub_10005495C(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v29 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v28)
      goto LABEL_36;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000902EC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[7];
  __int128 v45[2];
  uint64_t v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100032C48(&qword_100505F08);
    v2 = (_QWORD *)sub_1000922E8();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  v34 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 8;
  sub_1000371CC();
  swift_retain(v2);
  v7 = 0;
  if (!v5)
    goto LABEL_9;
LABEL_8:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (1)
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v20 = *v18;
    v19 = v18[1];
    sub_100032EB8(*(_QWORD *)(a1 + 56) + 40 * v9, (uint64_t)v48);
    *(_QWORD *)&v47 = v20;
    *((_QWORD *)&v47 + 1) = v19;
    *(_OWORD *)&v44[5] = v47;
    v45[0] = v48[0];
    v45[1] = v48[1];
    v46 = v49;
    v36[0] = v20;
    v36[1] = v19;
    swift_bridgeObjectRetain(v19);
    sub_1000922E0((uint64_t)&v37, (uint64_t)v36, (uint64_t)&type metadata for String, (uint64_t)&type metadata for AnyHashable);
    sub_1000351FC(v45, (uint64_t)v35);
    v21 = sub_100032C48(&qword_1005044C0);
    sub_1000922E0((uint64_t)v40, (uint64_t)v35, v21, (uint64_t)&type metadata for Any + 8);
    v41 = v37;
    v42 = v38;
    v43 = v39;
    sub_100053FB8(v40, v44);
    v37 = v41;
    v38 = v42;
    v39 = v43;
    sub_100053FB8(v44, v35);
    sub_100053FB8(v35, &v41);
    AnyHashable._rawHashValue(seed:)(v2[5]);
    sub_1000922F8();
    if (((v24 << v23) & ~v6[v22]) == 0)
    {
      sub_10005FF88();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        v28 = v26 == v27;
        if (v26 == v27)
          v26 = 0;
        v25 |= v28;
        if (v6[v26] != -1)
        {
          sub_10005FF74();
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    sub_10005FF9C();
LABEL_38:
    sub_10009235C();
    *(_QWORD *)((char *)v6 + v29) |= v30;
    v32 = v2[6] + 40 * v31;
    *(_OWORD *)v32 = v37;
    *(_OWORD *)(v32 + 16) = v38;
    *(_QWORD *)(v32 + 32) = v39;
    sub_100053FB8(&v41, (_OWORD *)(v2[7] + 32 * v31));
    ++v2[2];
    if (v5)
      goto LABEL_8;
LABEL_9:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_42;
    if (v10 >= v33)
      goto LABEL_40;
    v11 = *(_QWORD *)(v34 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      sub_100092350();
      if (v13 == v14)
        goto LABEL_40;
      sub_10009232C();
      if (!v11)
      {
        sub_100092350();
        if (v13 == v14)
          goto LABEL_40;
        sub_10009232C();
        if (!v11)
        {
          sub_100092350();
          if (v13 == v14)
            goto LABEL_40;
          sub_10009232C();
          if (!v11)
            break;
        }
      }
    }
LABEL_28:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v7 = v12;
  }
  v16 = v15 + 4;
  if (v16 >= v33)
  {
LABEL_40:
    swift_release(v2);
    sub_10005495C(a1);
    return;
  }
  v11 = *(_QWORD *)(v34 + 8 * v16);
  if (v11)
  {
    v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_100092350();
    if (v13 == v14)
      goto LABEL_40;
    sub_10009232C();
    v16 = v17 + 1;
    if (v11)
      goto LABEL_28;
  }
LABEL_43:
  __break(1u);
}

id sub_100090678()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  id result;
  uint64_t v6;

  v0 = sub_1000357DC();
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  variable initialization expression of AssessmentPayloadStore.assessmentPayloadFilter();
  v3 = objc_msgSend((id)objc_opt_self(PJXBDBF1h0EU80dy), "sharedInstance");
  v4 = objc_allocWithZone((Class)sub_10009190C());
  result = sub_1000907A8((uint64_t)v2, v3);
  static AssessmentPayloadStore.shared = (uint64_t)result;
  return result;
}

uint64_t *AssessmentPayloadStore.shared.unsafeMutableAddressor()
{
  if (qword_1005034E8 != -1)
    swift_once(&qword_1005034E8, sub_100090678);
  return &static AssessmentPayloadStore.shared;
}

id static AssessmentPayloadStore.shared.getter()
{
  if (qword_1005034E8 != -1)
    swift_once(&qword_1005034E8, sub_100090678);
  return (id)static AssessmentPayloadStore.shared;
}

id sub_1000907A8(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  objc_super v12;

  v5 = v2;
  variable initialization expression of AssessmentPayloadStore.assessmentPayloadFilter();
  v6 = &v5[OBJC_IVAR____TtC3asd22AssessmentPayloadStore_logger];
  v7 = sub_1000357DC();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager] = a2;
  v9 = a2;

  v12.receiver = v5;
  v12.super_class = (Class)sub_10009190C();
  v10 = objc_msgSendSuper2(&v12, "init");

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v10;
}

uint64_t sub_100090874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10009088C, 0, 0);
}

uint64_t sub_10009088C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;

  v1 = *(void **)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager);
  sub_100050B20();
  v3 = v2;
  v4 = sub_10008FF2C(v2);
  swift_bridgeObjectRelease(v3);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v1, "vcOgjK76yFB2scHf:", isa);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AssessmentPayloadStore.fetch(for:withBindings:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for AssessmentPayloadFilter(0);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AssessmentPayload(0);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[9] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v8);
  v4[11] = swift_task_alloc(v8);
  return sub_100040920();
}

uint64_t sub_1000909E8()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(void **)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager);
  v2 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v1, "vrh8HnMA51ekK59p:error:", v2, v0 + 16);

  v4 = *(void **)(v0 + 16);
  if (!v3)
  {
    v17 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v18);
    sub_100092344();
    sub_100040A10();
    sub_100040A7C();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = sub_100090F38();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v7);
  v9 = v4;

  sub_100090F74(v6 + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_assessmentPayloadFilter, v5);
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v20 = v8;
    else
      v20 = v8 & 0xFFFFFFFFFFFFFF8;
    sub_1000371CC();
    v10 = _CocoaArrayWrapper.endIndex.getter(v20);
    sub_100039950();
    if (v10)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_4:
      sub_1000917D8(0, v10 & ~(v10 >> 63), 0);
      if (v10 < 0)
        __break(1u);
      v11 = 0;
      v12 = *(_QWORD *)(v0 + 72);
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
        else
          v13 = *(id *)(v8 + 8 * v11 + 32);
        sub_100051008(v13, *(uint64_t **)(v0 + 80));
        v15 = _swiftEmptyArrayStorage[2];
        v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1)
          sub_1000917D8(v14 > 1, v15 + 1, 1);
        v16 = *(_QWORD *)(v0 + 80);
        ++v11;
        _swiftEmptyArrayStorage[2] = v15 + 1;
        sub_100091814(v16, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v15);
      }
      while (v10 != v11);
    }
  }
  sub_100039950();
  *(_QWORD *)(v0 + 96) = _swiftEmptyArrayStorage;
  v21 = (_QWORD *)swift_task_alloc(dword_1005063D4);
  *(_QWORD *)(v0 + 104) = v21;
  *v21 = v0;
  v21[1] = sub_100090C98;
  return sub_10009B178(*(_QWORD *)(v0 + 88), (uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 40));
}

uint64_t sub_100090C98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  sub_100091898(*(_QWORD *)(v2 + 56), type metadata accessor for AssessmentPayloadFilter);
  sub_100039950();
  if (v0)
    v4 = sub_100090ECC;
  else
    v4 = sub_100090D60;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100090D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  v6 = sub_100091858();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2, v3, v6);
  v9 = *(_QWORD *)(v0 + 88);
  if (v1)
  {
    sub_100091898(*(_QWORD *)(v0 + 88), type metadata accessor for AssessmentPayload);
    swift_release(v5);
    v10 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v10);
    sub_100040A10();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = v7;
    v13 = v8;
    v14 = *(_QWORD *)(v0 + 56);
    sub_100091898(*(_QWORD *)(v0 + 88), type metadata accessor for AssessmentPayload);
    swift_release(v5);
    swift_task_dealloc(v9);
    sub_100040A7C();
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v12, v13);
  }
}

uint64_t sub_100090ECC()
{
  uint64_t v0;

  sub_100092344();
  sub_100040A10();
  sub_100040A7C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100090F38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505EA0;
  if (!qword_100505EA0)
  {
    v1 = objc_opt_self(AssessmentPayloadRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100505EA0);
  }
  return result;
}

uint64_t sub_100090F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssessmentPayloadFilter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091030(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v4[5] = v11;
  v12 = dword_100505E94;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_1000910F8;
  return AssessmentPayloadStore.fetch(for:withBindings:)(v8, v10, v11);
}

uint64_t sub_1000910F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v9 = *(_QWORD *)(*v3 + 40);
  v8 = *(_QWORD *)(*v3 + 48);
  v10 = *(_QWORD *)(*v3 + 32);
  v11 = *(void **)(*v3 + 16);
  v12 = *v3;
  swift_task_dealloc(v8);

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  if (v4)
  {
    v13 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v15 = (void *)v13;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100033030(a1, a2);
    v13 = 0;
    v15 = isa;
  }
  v16 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v16)[2](v16, isa, v13);

  _Block_release(v16);
  return (*(uint64_t (**)(void))(v12 + 8))();
}

uint64_t sub_1000911E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_100040920();
}

uint64_t sub_100091248()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  Class isa;
  id v4;
  void *v5;
  id v6;
  id v7;

  v1 = *(void **)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager);
  v2 = String._bridgeToObjectiveC()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 16) = 0;
  v4 = objc_msgSend(v1, "p2quZc9tU4GFOh5B:lPUBHlyPyUveJuEq:WithError:", v2, isa, v0 + 16);

  v5 = *(void **)(v0 + 16);
  if (v4)
  {
    v6 = v5;

  }
  else
  {
    v7 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void AssessmentPayloadStore.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("asd.AssessmentPayloadStore", 26, "init()", 6, 0);
  __break(1u);
}

id AssessmentPayloadStore.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_10009190C();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10009142C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100048C2C;
  return v6();
}

uint64_t sub_100091480(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100048C2C;
  return v7();
}

uint64_t sub_1000914D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (sub_1000352C8(a1, 1, v6) == 1)
  {
    sub_1000570E4(a1);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_1004D2D48, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_100505F48, v15);
}

uint64_t sub_100091610(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100091674;
  return v6(a1);
}

uint64_t sub_100091674()
{
  uint64_t v0;

  sub_100048CD8();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_10009169C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100091B84(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000916B8(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100091C58(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1000916D4(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100091D38(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_1000916F0(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000921A4(a1, a2, a3, *v3, &qword_100504CA0, type metadata accessor for BindingsStore.Binding, (void (*)(uint64_t, uint64_t, char *))sub_10003ECFC, (void (*)(uint64_t, uint64_t, char *))sub_1000747E4);
  *v3 = v4;
}

void sub_10009172C(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100091E44(a1, a2, a3, *v3);
  *v3 = v4;
}

void sub_100091748(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100091F14(a1, a2, a3, *v3);
  *v3 = v4;
}

char *sub_100091764(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100091FDC(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100091780(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1000920C4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10009179C(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000921A4(a1, a2, a3, *v3, &qword_100503C28, type metadata accessor for LocalFeatureToggle, (void (*)(uint64_t, uint64_t, char *))sub_10003EF08, (void (*)(uint64_t, uint64_t, char *))sub_100074A60);
  *v3 = v4;
}

void sub_1000917D8(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000921A4(a1, a2, a3, *v3, &qword_100505F68, type metadata accessor for AssessmentPayload, (void (*)(uint64_t, uint64_t, char *))sub_10003EF14, (void (*)(uint64_t, uint64_t, char *))sub_100074A6C);
  *v3 = v4;
}

uint64_t sub_100091814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssessmentPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100091858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100505EB0;
  if (!qword_100505EB0)
  {
    v1 = type metadata accessor for AssessmentPayload(255);
    result = swift_getWitnessTable(&unk_1004087B8, v1);
    atomic_store(result, (unint64_t *)&qword_100505EB0);
  }
  return result;
}

uint64_t sub_100091898(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AssessmentPayloadStore(uint64_t a1)
{
  uint64_t result;

  result = qword_100505EE8;
  if (!qword_100505EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AssessmentPayloadStore);
  return result;
}

uint64_t sub_10009190C()
{
  return type metadata accessor for AssessmentPayloadStore(0);
}

uint64_t sub_100091914(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = v4[0];
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100091990()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000919CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100505F14);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048C80(v1, (uint64_t)sub_100048288);
  return sub_100048C6C(v2, v3, v4, v5, v6);
}

uint64_t sub_100091A1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100505F24);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100048C80(v1, (uint64_t)sub_100048C2C);
  return sub_100048C6C(v2, v3, v4, v5, v6);
}

uint64_t sub_100091A6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100505F34);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100048C2C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100505F30 + dword_100505F30))(a1, v4, v5, v6);
}

uint64_t sub_100091AF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100091B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100505F44);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10007C608;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100505F40 + dword_100505F40))(a1, v4);
}

_QWORD *sub_100091B84(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_1005039D0);
    v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * v12 - 64;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_10003EA2C(a4 + 4, v8, v11 + 4);
    a4[2] = 0;
  }
  else
  {
    sub_100074624();
  }
  swift_release(a4);
  return v11;
}

char *sub_100091C58(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_100503BA0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_10003EBA0((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100074750();
  }
  swift_release(a4);
  return v11;
}

char *sub_100091D38(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_100505F50);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10003ED08(v13, v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000747F0((uint64_t)v13, v8);
  }
  swift_release(a4);
  return v11;
}

void sub_100091E20(char a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000921A4(a1, a2, a3, a4, &qword_100504CA0, type metadata accessor for BindingsStore.Binding, (void (*)(uint64_t, uint64_t, char *))sub_10003ECFC, (void (*)(uint64_t, uint64_t, char *))sub_1000747E4);
}

void sub_100091E44(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;

  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_100032C48(&qword_100503C30);
    v12 = (char *)sub_100040900(v11, 104 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 104);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10003EAB4((char *)(a4 + 32), v9, v12 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000746B4();
  }
  sub_10004F244();
}

void sub_100091F14(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_100032C48(&qword_100503C40);
    v12 = (char *)sub_100040900(v11, 8 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_10003ED68(v14, v9, v12 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100074894((uint64_t)v14, v9);
  }
  sub_10004F244();
}

char *sub_100091FDC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_100505F58);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_10003EDF0((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100074934();
  }
  swift_release(a4);
  return v11;
}

char *sub_1000920C4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100032C48(&qword_100505F60);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_10003EE50((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000749CC();
  }
  swift_release(a4);
  return v11;
}

void sub_1000921A4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  if ((a3 & 1) != 0)
  {
    sub_1000408F0();
    if (v14 != v15)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1000408E0();
    }
  }
  else
  {
    v13 = a2;
  }
  v16 = *(_QWORD *)(a4 + 16);
  if (v13 <= v16)
    v17 = *(_QWORD *)(a4 + 16);
  else
    v17 = v13;
  if (!v17)
  {
    v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v18 = sub_100032C48(a5);
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (_QWORD *)swift_allocObject(v18, v22 + v20 * v17, v21 | 7);
  v24 = j__malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v24 - v22 == 0x8000000000000000 && v20 == -1)
    goto LABEL_23;
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  v26 = *(unsigned __int8 *)(*(_QWORD *)(a6(0) - 8) + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = (char *)v23 + v27;
  v29 = a4 + v27;
  if ((a1 & 1) != 0)
  {
    a7(v29, v16, v28);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a8(v29, v16, v28);
  }
  sub_10004F244();
}

uint64_t sub_1000922E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7);
}

uint64_t sub_1000922E8()
{
  uint64_t v0;

  return static _DictionaryStorage.allocate(capacity:)(v0);
}

uint64_t sub_100092344()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 88));
}

uint64_t sub_100092370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  char v15[80];
  uint64_t v16;

  v1 = v0;
  v2 = sub_100032C48(&qword_100505F70);
  inited = swift_initStackObject(v2, v15);
  *(_OWORD *)(inited + 16) = xmmword_100407820;
  *(_QWORD *)(inited + 32) = 0x724565646F636564;
  *(_QWORD *)(inited + 40) = 0xEB00000000726F72;
  v4 = sub_100093808();
  *(_QWORD *)(inited + 48) = sub_100093810(v4);
  strcpy((char *)(inited + 56), "filterIgnored");
  *(_WORD *)(inited + 70) = -4864;
  v5 = sub_100093808();
  v6 = sub_100093810(v5);
  *(_QWORD *)(inited + 72) = v6;
  v7 = sub_1000399FC((uint64_t)v6, &qword_100504518, NSObject_ptr);
  v8 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v7, &protocol witness table for String);
  v16 = v8;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {

  }
  else
  {
    v9 = v8;
    v10 = objc_msgSend(sub_100093808(), "initWithDouble:", *(double *)(v1 + 8));
    swift_isUniquelyReferenced_nonNull_native(v9);
    sub_100053FC8((uint64_t)v10, 0x79616C6564, 0xE500000000000000);
    v16 = v9;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (*(_QWORD *)(v1 + 32))
  {
    v11 = String._bridgeToObjectiveC()();
    v12 = v16;
    swift_isUniquelyReferenced_nonNull_native(v16);
    sub_100053FC8((uint64_t)v11, 0x646E616D6D6F63, 0xE700000000000000);
    v13 = v12;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {

    return v16;
  }
  return v13;
}

void sub_100092574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = type metadata accessor for ASAnalyticsEvent(0);
  __chkstk_darwin();
  sub_100046E44();
  v4 = v3 - v2;
  sub_100092CAC(v0, v3 - v2);
  v5 = (char *)sub_100092608 + 4 * byte_10040A760[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_100092608()
{
  uint64_t v0;

  sub_1000937F4();
  return v0 + 4;
}

void sub_1000926DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  type metadata accessor for UUID(0);
  __chkstk_darwin();
  sub_100046E44();
  v1 = type metadata accessor for ASAnalyticsEvent(0);
  __chkstk_darwin();
  sub_100046E44();
  v4 = v3 - v2;
  sub_100092CAC(v0, v3 - v2);
  v5 = (char *)sub_1000927A0 + 4 * word_10040A768[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000927A0()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  __n128 *inited;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = sub_100032C48(&qword_100505F70);
  inited = (__n128 *)swift_initStackObject(v3, v0 + 64);
  sub_1000937C8(inited, (__n128)xmmword_1004077E0);
  v5 = sub_1000937FC();
  inited[3].n128_u64[0] = v2;
  v6 = sub_1000399FC(v5, &qword_100504518, NSObject_ptr);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v6, &protocol witness table for String);
}

uint64_t type metadata accessor for ASAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100505FE8;
  if (!qword_100505FE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ASAnalyticsEvent);
  return result;
}

uint64_t sub_100092CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASAnalyticsEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100092CF0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

_QWORD *sub_100092D18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_11;
      case 1u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_11;
      case 2u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = a2[2];
        v16 = a2[3];
        a1[2] = v15;
        a1[3] = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_11;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_11;
      case 4u:
        *a1 = *a2;
        v17 = *(int *)(sub_100032C48(&qword_100504F90) + 48);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        v9 = a1;
        v10 = a3;
        v11 = 4;
        goto LABEL_11;
      case 6u:
        *(_WORD *)a1 = *(_WORD *)a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v21 = a2[4];
        a1[3] = a2[3];
        a1[4] = v21;
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 6;
LABEL_11:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

double sub_100092ED4(_QWORD *a1, uint64_t a2)
{
  double result;
  char *v4;
  uint64_t v5;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1[1]).n128_u64[0];
      break;
    case 2u:
      swift_bridgeObjectRelease(a1[1]);
      goto LABEL_4;
    case 3u:
LABEL_4:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1[3]).n128_u64[0];
      break;
    case 4u:
      v4 = (char *)a1 + *(int *)(sub_100032C48(&qword_100504F90) + 48);
      v5 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      break;
    case 6u:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1[4]).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_100092F78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_9;
    case 1u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_9;
    case 2u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[2];
      v13 = a2[3];
      a1[2] = v12;
      a1[3] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_9;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_9;
    case 4u:
      *a1 = *a2;
      v14 = *(int *)(sub_100032C48(&qword_100504F90) + 48);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_9;
    case 6u:
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      v18 = a2[4];
      a1[3] = a2[3];
      a1[4] = v18;
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 6;
LABEL_9:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10009310C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10004EA4C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 0;
        goto LABEL_10;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 1;
        goto LABEL_10;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 2;
        goto LABEL_10;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 3;
        goto LABEL_10;
      case 4u:
        *a1 = *a2;
        v9 = *(int *)(sub_100032C48(&qword_100504F90) + 48);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        v6 = a1;
        v7 = a3;
        v8 = 4;
        goto LABEL_10;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *((_BYTE *)a1 + 1) = *((_BYTE *)a2 + 1);
        v13 = a2[1];
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        a1[1] = v13;
        a1[3] = a2[3];
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 6;
LABEL_10:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_QWORD *sub_1000932E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 4)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_100032C48(&qword_100504F90) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 4);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100093394(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10004EA4C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 4)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_100032C48(&qword_100504F90) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 4);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100093450(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[7];

  v5[0] = &unk_10040A7C8;
  v5[1] = &unk_10040A7E0;
  v5[2] = &unk_10040A7F8;
  v5[3] = &unk_10040A7F8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for Builtin.Int64 + 64, *(_QWORD *)(result - 8) + 64);
    v5[4] = v4;
    v5[5] = &unk_10040A810;
    v5[6] = &unk_10040A828;
    swift_initEnumMetadataMultiPayload(a1, 256, 7, v5);
    return 0;
  }
  return result;
}

uint64_t destroy for ASAnalyticsEvent.PushAnalytic(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASAnalyticsEvent.PushAnalytic(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASAnalyticsEvent.PushAnalytic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASAnalyticsEvent.PushAnalytic()
{
  return &type metadata for ASAnalyticsEvent.PushAnalytic;
}

uint64_t storeEnumTagSinglePayload for ASAnalyticsEvent.PushRegistrationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100093708 + 4 * byte_10040A799[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009373C + 4 * byte_10040A794[v4]))();
}

uint64_t sub_10009373C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009374CLL);
  return result;
}

uint64_t sub_100093758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100093760);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100093764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009376C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASAnalyticsEvent.PushRegistrationType()
{
  return &type metadata for ASAnalyticsEvent.PushRegistrationType;
}

unint64_t sub_10009378C()
{
  unint64_t result;

  result = qword_100506020;
  if (!qword_100506020)
  {
    result = swift_getWitnessTable(&unk_10040A8B8, &type metadata for ASAnalyticsEvent.PushRegistrationType);
    atomic_store(result, (unint64_t *)&qword_100506020);
  }
  return result;
}

NSString sub_1000937C8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x776F6C666B726F77;
  a1[2].n128_u64[1] = 0xEA00000000004449;
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000937F4()
{
  uint64_t v0;

  return sub_10004EA4C(v0);
}

uint64_t sub_1000937FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_100093808()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 2784));
}

id sub_100093810(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(a1, *(SEL *)(v2 + 2016), v1);
}

BOOL sub_10009381C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  os_log_type_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  os_log_type_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo(0);
  v0 = *(_QWORD *)(v51 - 8);
  v1 = __chkstk_darwin(v51);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v48 - v4;
  v6 = type metadata accessor for GenerativeModelsAvailability.Availability(0);
  v7 = *(uint64_t (***)(uint64_t, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  sub_100046E44();
  v10 = v9 - v8;
  v11 = type metadata accessor for GenerativeModelsAvailability.Parameters(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100046E44();
  v15 = v14 - v13;
  v16 = type metadata accessor for GenerativeModelsAvailability(0);
  v52 = *(_QWORD *)(v16 - 8);
  v53 = v16;
  __chkstk_darwin(v16);
  sub_100046E44();
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)(0xD000000000000020, 0x80000001003E54D0);
  static GenerativeModelsAvailability.current(parameters:)(v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  GenerativeModelsAvailability.availability.getter(v17);
  v18 = v7[11](v10, v6);
  if (v18 == enum case for GenerativeModelsAvailability.Availability.restricted(_:))
  {
    sub_10009447C(v7[1]);
LABEL_9:
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v33 = sub_1000357DC();
    v34 = sub_1000352B0(v33, (uint64_t)qword_1005185E8);
    v35 = (void *)Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (sub_100094488(v36))
    {
      v37 = (_WORD *)sub_10003308C(2);
      *v37 = 0;
      sub_100094468((void *)&_mh_execute_header, v38, v39, "GM state is available/restricted.");
      sub_100033080((uint64_t)v37);
    }

    sub_100094458();
    return 1;
  }
  if (v18 == enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
  {
    sub_10009447C(v7[12]);
    v19 = v51;
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 32))(v5, v10, v51);
    v21 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter(v20);
    v22 = sub_100093CD0(v21);
    sub_1000356D4();
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v23 = sub_1000357DC();
    sub_1000352B0(v23, (uint64_t)qword_1005185E8);
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v0 + 16))(v3, v5, v19);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = sub_10003308C(18);
      v50 = sub_10003308C(32);
      v55 = v50;
      *(_DWORD *)v28 = 136315394;
      v48 = v28 + 4;
      v29 = sub_100052A64(&qword_100506028, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo);
      v49 = v27;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v19, v29);
      v54 = sub_100036778(v30, v31, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48, v28 + 12);
      sub_1000356D4();
      sub_100094498();
      *(_WORD *)(v28 + 12) = 1024;
      LODWORD(v54) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 4, v28 + 14, v28 + 18);
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v49, "GM state is unavailable. Reason: %s. Resolution: %{BOOL}d", (uint8_t *)v28, 0x12u);
      v32 = v50;
      swift_arrayDestroy(v50, 1);
      sub_100033080(v32);
      sub_100033080(v28);

    }
    else
    {

      sub_100094498();
    }
    ((void (*)(char *, uint64_t))v0)(v5, v19);
    sub_100094458();
  }
  else
  {
    if (v18 == enum case for GenerativeModelsAvailability.Availability.available(_:))
      goto LABEL_9;
    if (qword_100503420 != -1)
      swift_once(&qword_100503420, sub_1000330AC);
    v40 = sub_1000357DC();
    v41 = sub_1000352B0(v40, (uint64_t)qword_1005185E8);
    v42 = (void *)Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (sub_100094488(v43))
    {
      v44 = (_WORD *)sub_10003308C(2);
      *v44 = 0;
      sub_100094468((void *)&_mh_execute_header, v45, v46, "GM state is unknown.");
      sub_100033080((uint64_t)v44);
    }

    sub_100094458();
    sub_10009447C(v7[1]);
    return 0;
  }
  return v22;
}

BOOL sub_100093CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;

  v2 = sub_100032C48(&qword_100506030);
  v3 = *(_QWORD *)(type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason(0)
                 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10040A8E0;
  v8 = v7 + v6;
  sub_100094450(v8, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.deviceNotCapable(_:));
  sub_100094450(v8 + v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.selectedLanguageIneligible(_:));
  sub_100094450(v8 + 2 * v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.selectedSiriLanguageIneligible(_:));
  sub_100094450(v8 + 3 * v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.regionIneligible(_:));
  sub_100094450(v8 + 4 * v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.localeIneligible(_:));
  sub_100094450(v8 + 5 * v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.countryLocationIneligible(_:));
  sub_100094450(v8 + 6 * v4, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.mdmAndParentalControl(_:));
  v9 = (_QWORD *)sub_1000941B8(v7);
  sub_100093E14(v9, a1);
  LOBYTE(a1) = v10;
  sub_1000356D4();
  return (a1 & 1) == 0;
}

void sub_100093E14(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t, __n128);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason(0);
  v42 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v35 - v8;
  v10 = *(_QWORD *)(a2 + 56);
  v36 = a2 + 56;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & v10;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v41 = a1 + 7;
  swift_bridgeObjectRetain_n(a1, 2);
  v38 = a2;
  v14 = swift_bridgeObjectRetain(a2);
  v15 = 0;
  if (!v13)
    goto LABEL_6;
LABEL_5:
  v16 = __clz(__rbit64(v13));
  v17 = (v13 - 1) & v13;
  v40 = v15;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    v39 = v17;
    v23 = v42[9];
    v24 = (void (*)(char *, unint64_t, uint64_t, __n128))v42[2];
    v24(v9, *(_QWORD *)(v38 + 48) + v23 * i, v4, v14);
    if (a1[2])
    {
      v25 = a1;
      v26 = a1[5];
      v27 = sub_100052A64(&qword_100506038, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
      v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
      a1 = v25;
      v29 = -1 << *((_BYTE *)v25 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)((char *)v41 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
      {
        v31 = ~v29;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v24)(v7, a1[6] + v30 * v23, v4);
          v32 = sub_100052A64(&qword_100506040, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
          v33 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v9, v4, v32);
          v34 = (void (*)(char *, uint64_t))v42[1];
          v34(v7, v4);
          if ((v33 & 1) != 0)
            break;
          v30 = (v30 + 1) & v31;
          a1 = v25;
          if (((*(_QWORD *)((char *)v41 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            goto LABEL_31;
        }
        v34(v9, v4);
        swift_release(v38);
        swift_bridgeObjectRelease(v25);
        goto LABEL_34;
      }
    }
    v34 = (void (*)(char *, uint64_t))v42[1];
LABEL_31:
    v34(v9, v4);
    v13 = v39;
    v15 = v40;
    if (v39)
      goto LABEL_5;
LABEL_6:
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v19 >= v37)
      goto LABEL_35;
    v20 = *(_QWORD *)(v36 + 8 * v19);
    v21 = v15 + 1;
    if (!v20)
    {
      v21 = v15 + 2;
      if (v15 + 2 >= v37)
        goto LABEL_35;
      v20 = *(_QWORD *)(v36 + 8 * v21);
      if (!v20)
      {
        v21 = v15 + 3;
        if (v15 + 3 >= v37)
          goto LABEL_35;
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          v21 = v15 + 4;
          if (v15 + 4 >= v37)
            goto LABEL_35;
          v20 = *(_QWORD *)(v36 + 8 * v21);
          if (!v20)
          {
            v21 = v15 + 5;
            if (v15 + 5 >= v37)
              goto LABEL_35;
            v20 = *(_QWORD *)(v36 + 8 * v21);
            if (!v20)
            {
              v22 = v15 + 6;
              if (v15 + 6 >= v37)
              {
LABEL_35:
                swift_release(v38);
                swift_bridgeObjectRelease(a1);
                v25 = a1;
LABEL_34:
                swift_bridgeObjectRelease(v25);
                return;
              }
              v20 = *(_QWORD *)(v36 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  v21 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_37;
                  if (v21 >= v37)
                    goto LABEL_35;
                  v20 = *(_QWORD *)(v36 + 8 * v21);
                  ++v22;
                  if (v20)
                    goto LABEL_23;
                }
              }
              v21 = v15 + 6;
            }
          }
        }
      }
    }
LABEL_23:
    v17 = (v20 - 1) & v20;
    v40 = v21;
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_1000941B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason(0);
  v35 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v30 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
    v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_100032C48(&qword_100506048);
  result = static _SetStorage.allocate(capacity:)(v8);
  v10 = (_QWORD *)result;
  v32 = *(_QWORD *)(a1 + 16);
  if (!v32)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }
  v11 = 0;
  v34 = result + 56;
  v12 = *(unsigned __int8 *)(v35 + 80);
  v30 = a1;
  v31 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(_QWORD *)(a1 + 16))
  {
    v13 = *(_QWORD *)(v35 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
    v14(v7, v31 + v13 * v11, v2);
    v15 = v10[5];
    v16 = sub_100052A64(&qword_100506038, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
    v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16);
    v18 = -1 << *((_BYTE *)v10 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    v21 = *(_QWORD *)(v34 + 8 * (v19 >> 6));
    v22 = 1 << v19;
    if (((1 << v19) & v21) != 0)
    {
      v33 = v11;
      v23 = ~v18;
      while (1)
      {
        v14(v5, v10[6] + v19 * v13, v2);
        v24 = sub_100052A64(&qword_100506040, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2, v24);
        v26 = *(void (**)(char *, uint64_t))(v35 + 8);
        v26(v5, v2);
        if ((v25 & 1) != 0)
          break;
        v19 = (v19 + 1) & v23;
        v20 = v19 >> 6;
        v21 = *(_QWORD *)(v34 + 8 * (v19 >> 6));
        v22 = 1 << v19;
        if ((v21 & (1 << v19)) == 0)
        {
          a1 = v30;
          v11 = v33;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v26)(v7, v2);
      a1 = v30;
      v11 = v33;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v34 + 8 * v20) = v22 | v21;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v35 + 32))(v10[6] + v19 * v13, v7, v2);
      v27 = v10[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_18;
      v10[2] = v29;
    }
    if (++v11 == v32)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100094450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100094458()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 112) + 8))(v0, *(_QWORD *)(v1 - 104));
}

void sub_100094468(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10009447C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

BOOL sub_100094488(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100094498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GlobalLocationHelper.boundingRectAround(lat:lon:radiusMetres:)(asd::CoordRange *__return_ptr retstr, Swift::Double lat, Swift::Double lon, Swift::Double radiusMetres)
{
  double v4;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  Swift::Bool v14;
  Swift::Bool v15;
  double v16;
  unint64_t v17;
  double v18;
  double v19;

  if (radiusMetres >= 0.0 && lat >= -90.0 && lat <= 90.0 && lon >= -180.0 && lon <= 180.0)
  {
    v8 = radiusMetres / (v4 * 6.28318531) * 360.0;
    v9 = v8 + lat;
    v10 = lat - v8;
    if (lat - v8 >= -90.0)
      v11 = lat - v8;
    else
      v11 = 0.0;
    if (v9 <= 90.0)
      v12 = v8 + lat;
    else
      v12 = 0.0;
    v13 = 0.0;
    if (v9 > 90.0 || v10 < -90.0)
    {
      v14 = 0;
      v15 = 1;
      v16 = 0.0;
LABEL_15:
      retstr->southLimit.value = v11;
      retstr->southLimit.is_nil = v10 < -90.0;
      retstr->northLimit.value = v12;
      retstr->northLimit.is_nil = v9 > 90.0;
      retstr->eastLimit.value = v13;
      retstr->eastLimit.is_nil = v15;
      retstr->westLimit.value = v16;
      retstr->westLimit.is_nil = v15;
      retstr->spansAntimeridian = v14;
      return;
    }
    v19 = v8 + lat;
    v18 = radiusMetres / (cos(lat * 3.14159265 / 180.0) * ((v4 + v4) * 3.14159265)) * 360.0;
    if (v18 >= 180.0)
    {
      v14 = 0;
      v15 = 1;
      v16 = 0.0;
      v9 = v19;
      v13 = 0.0;
      goto LABEL_15;
    }
    v13 = v18 + lon;
    v16 = lon - v18;
    if (v13 <= 180.0)
    {
      v9 = v19;
      if (v16 >= -180.0)
      {
        v14 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      v13 = v13 + -360.0;
      if (v16 >= -180.0)
      {
        v14 = 1;
        v9 = v19;
        goto LABEL_26;
      }
      v9 = v19;
    }
    v16 = v16 + 360.0;
    v14 = 1;
LABEL_26:
    v15 = 0;
    goto LABEL_15;
  }
  v17 = sub_1000946B4();
  swift_allocError(&unk_1004D3008, v17, 0, 0);
  swift_willThrow();
}

unint64_t sub_1000946B4()
{
  unint64_t result;

  result = qword_100506050;
  if (!qword_100506050)
  {
    result = swift_getWitnessTable(&unk_10040A9C4, &unk_1004D3008);
    atomic_store(result, (unint64_t *)&qword_100506050);
  }
  return result;
}

uint64_t CoordRange.southLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CoordRange.southLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.southLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.northLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CoordRange.northLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.northLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.eastLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CoordRange.eastLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.eastLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.westLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t CoordRange.westLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.westLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.spansAntimeridian.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t CoordRange.spansAntimeridian.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

uint64_t (*CoordRange.spansAntimeridian.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

void *GlobalLocationHelper.meanEarthRadiusMetres.unsafeMutableAddressor()
{
  return &static GlobalLocationHelper.meanEarthRadiusMetres;
}

double static GlobalLocationHelper.meanEarthRadiusMetres.getter()
{
  return 6371000.0;
}

__n128 initializeWithCopy for CoordRange(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoordRange(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 58))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 57);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoordRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = a2 + 1;
  }
  return result;
}

void type metadata accessor for CoordRange()
{
  sub_100035800();
}

void type metadata accessor for GlobalLocationHelper()
{
  sub_100035800();
}

uint64_t sub_1000948AC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000948EC + 4 * byte_10040A910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10009490C + 4 * byte_10040A915[v4]))();
}

_BYTE *sub_1000948EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10009490C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100094914(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10009491C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100094924(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10009492C(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for GlobalLocationHelper.Error()
{
  sub_100035800();
}

unint64_t sub_100094948()
{
  unint64_t result;

  result = qword_100506058;
  if (!qword_100506058)
  {
    result = swift_getWitnessTable(&unk_10040A99C, &unk_1004D3008);
    atomic_store(result, (unint64_t *)&qword_100506058);
  }
  return result;
}

Swift::Int sub_100094984()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_1000949C8(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100094A04(int a1)
{
  uint64_t v1;
  id v2;

  v1 = a1;
  v2 = objc_allocWithZone((Class)NSError);
  sub_10003D250(0xD000000000000010, 0x80000001003E55B0, v1, 0);
}

uint64_t ASBiomeMaterializedViewer.run(query:inputColNames:inputColTypes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = type metadata accessor for Configuration(0);
  __chkstk_darwin(v5);
  sub_100046E44();
  v8 = v7 - v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100046E44();
  v13 = v12 - v11;
  v14 = type metadata accessor for SQLDatabase(0);
  __chkstk_darwin(v14);
  sub_100046E44();
  if (*(_QWORD *)(v17 + 16) == *(_QWORD *)(v16 + 16))
  {
    v34 = v15;
    v35 = v8;
    v29 = a1;
    v30 = a2;
    v31 = v17;
    v32 = v16;
    v33 = v2;
    v18 = type metadata accessor for Library.Databases.ApplePay.Security.Features(0);
    v19 = sub_100094CD8();
    result = static DatabaseResource.database(useCase:)(0x666F72702D647361, 0xEB00000000656C69, v18, v19);
    if (!v36)
    {
      SQLDatabase.databasePath()(result);
      v21 = URL.path(percentEncoded:)(0);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
      Configuration.init()(v22);
      v23 = type metadata accessor for DatabaseQueue(0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      v25 = DatabaseQueue.init(path:configuration:)(v21._countAndFlagsBits, v21._object, v35);
      __chkstk_darwin(v25);
      v26 = v30;
      *(&v29 - 6) = v29;
      *(&v29 - 5) = v26;
      v27 = v32;
      *(&v29 - 4) = v31;
      *(&v29 - 3) = v27;
      *(&v29 - 2) = v33;
      v28 = sub_100032C48(&qword_100506068);
      DatabaseQueue.read<A>(_:)(&v37, sub_10009587C, &v29 - 8, v28);
      sub_100095CA0();
      swift_release(v25);
      return v37;
    }
  }
  else
  {
    sub_100094A04(137101);
    return swift_willThrow(v24);
  }
  return result;
}

unint64_t sub_100094CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100506060;
  if (!qword_100506060)
  {
    v1 = type metadata accessor for Library.Databases.ApplePay.Security.Features(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Library.Databases.ApplePay.Security.Features, v1);
    atomic_store(result, (unint64_t *)&qword_100506060);
  }
  return result;
}

void sub_100094D18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  Swift::OpaquePointer v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  sqlite3_stmt *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  sqlite3_stmt *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  sqlite3_stmt *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  sqlite3_stmt *v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  _BOOL8 v52;
  Swift::Int v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  _BOOL8 v65;
  Swift::Int v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  _BOOL8 v76;
  Swift::Int v77;
  unint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  _BOOL8 v87;
  Swift::Int v88;
  unint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t (*v100)();
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD v114[2];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;

  v7 = v6;
  v107 = a4;
  v108 = a5;
  v12 = type metadata accessor for StatementArguments(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Row(0);
  v117 = 0;
  v115 = 0u;
  v116 = 0u;
  StatementArguments.init()();
  v16 = static Row.fetchCursor(_:sql:arguments:adapter:)(a1, a2, a3, v15, &v115);
  if (v6)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_100095AE4((uint64_t)&v115);
  }
  else
  {
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_100095AE4((uint64_t)&v115);
    v18 = sub_10009589C();
    v19 = _swiftEmptyArrayStorage;
    v21._rawValue = v107;
    v20 = (unint64_t)v108;
    v110 = v108 + 4;
    v103 = v107 + 5;
    v104 = a6;
    v105 = v17;
    while (1)
    {
      v113 = v18;
      if (!v18)
        break;
      v106 = v19;
      v109 = v7;
      v112 = *((_QWORD *)v21._rawValue + 2);
      if (v112)
      {
        v22 = 0;
        v111 = *(_QWORD *)(v20 + 16);
        v23 = v103;
        v24 = _swiftEmptyDictionarySingleton;
        v25 = v113;
        while (v111 != v22)
        {
          v27 = *(v23 - 1);
          v26 = *v23;
          v28 = v22 >> 31;
          switch(v110[v22])
          {
            case 1:
              v20 = (unint64_t)&type metadata for Double;
              *((_QWORD *)&v116 + 1) = &type metadata for Double;
              v29 = swift_bridgeObjectRetain();
              v30 = Row._checkIndex(_:file:line:)(v22, "/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/Row.swift", 62, 2, 825, v29);
              v31 = Row.sqliteStatement.getter(v30);
              if (v31)
              {
                if (v28)
                  goto LABEL_79;
                v21._rawValue = (void *)v31;
                v32 = (sqlite3_stmt *)__chkstk_darwin(v31);
                v20 = (unint64_t)(&v102 - 4);
                *(&v102 - 2) = v25;
                *(&v102 - 1) = v22;
                v33 = sqlite3_column_type(v32, v22);
                if ((_DWORD)v33 == 5)
                  goto LABEL_88;
                *(_QWORD *)&v114[0] = Double.init(sqliteStatement:index:)(v21, v22);
              }
              else
              {
                v71 = v109;
                Row.fastDecode<A>(_:atUncheckedIndex:)(v114, &type metadata for Double, v22, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
                v109 = v71;
                if (v71)
                  goto LABEL_93;
              }
              *(_QWORD *)&v115 = *(_QWORD *)&v114[0];
              sub_100053FB8(&v115, v114);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
              v118 = v24;
              v73 = sub_100052C20(v27, v26);
              v75 = v24[2];
              v76 = (v74 & 1) == 0;
              v77 = v75 + v76;
              if (__OFADD__(v75, v76))
                goto LABEL_77;
              v20 = v73;
              v21._rawValue = v74;
              sub_100032C48(&qword_100504528);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v77))
              {
                v78 = sub_100052C20(v27, v26);
                if (((uint64_t)v21._rawValue & 1) != (v79 & 1))
                  goto LABEL_87;
                v20 = v78;
              }
              v24 = v118;
              if (((uint64_t)v21._rawValue & 1) != 0)
                goto LABEL_59;
              v118[(v20 >> 6) + 8] |= 1 << v20;
              v80 = (uint64_t *)(v24[6] + 16 * v20);
              *v80 = v27;
              v80[1] = v26;
              sub_100053FB8(v114, (_OWORD *)(v24[7] + 32 * v20));
              v81 = v24[2];
              v58 = __OFADD__(v81, 1);
              v59 = v81 + 1;
              if (v58)
                goto LABEL_86;
              goto LABEL_61;
            case 2:
              v20 = (unint64_t)&type metadata for Int32;
              *((_QWORD *)&v116 + 1) = &type metadata for Int32;
              v43 = swift_bridgeObjectRetain();
              v44 = Row._checkIndex(_:file:line:)(v22, "/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/Row.swift", 62, 2, 825, v43);
              v45 = Row.sqliteStatement.getter(v44);
              if (v45)
              {
                if (v28)
                  goto LABEL_81;
                v21._rawValue = (void *)v45;
                v46 = (sqlite3_stmt *)__chkstk_darwin(v45);
                v20 = (unint64_t)(&v102 - 4);
                *(&v102 - 2) = v25;
                *(&v102 - 1) = v22;
                v33 = sqlite3_column_type(v46, v22);
                if ((_DWORD)v33 == 5)
                  goto LABEL_88;
                v33 = sqlite3_column_int64((sqlite3_stmt *)v21._rawValue, v22);
                if (v33 != (int)v33)
                  goto LABEL_88;
                LODWORD(v114[0]) = v33;
              }
              else
              {
                v82 = v109;
                Row.fastDecode<A>(_:atUncheckedIndex:)(v114, &type metadata for Int32, v22, &type metadata for Int32, &protocol witness table for Int32, &protocol witness table for Int32);
                v109 = v82;
                if (v82)
                  goto LABEL_93;
              }
              LODWORD(v115) = v114[0];
              sub_100053FB8(&v115, v114);
              v83 = swift_isUniquelyReferenced_nonNull_native(v24);
              v118 = v24;
              v84 = sub_100052C20(v27, v26);
              v86 = v24[2];
              v87 = (v85 & 1) == 0;
              v88 = v86 + v87;
              if (__OFADD__(v86, v87))
                goto LABEL_78;
              v20 = v84;
              v21._rawValue = v85;
              sub_100032C48(&qword_100504528);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v83, v88))
              {
                v89 = sub_100052C20(v27, v26);
                if (((uint64_t)v21._rawValue & 1) != (v90 & 1))
                  goto LABEL_87;
                v20 = v89;
              }
              v24 = v118;
              if (((uint64_t)v21._rawValue & 1) != 0)
                goto LABEL_59;
              v118[(v20 >> 6) + 8] |= 1 << v20;
              v92 = (uint64_t *)(v24[6] + 16 * v20);
              *v92 = v27;
              v92[1] = v26;
              sub_100053FB8(v114, (_OWORD *)(v24[7] + 32 * v20));
              v93 = v24[2];
              v58 = __OFADD__(v93, 1);
              v59 = v93 + 1;
              if (v58)
                goto LABEL_84;
              goto LABEL_61;
            case 3:
              v20 = (unint64_t)&type metadata for Int64;
              *((_QWORD *)&v116 + 1) = &type metadata for Int64;
              v34 = swift_bridgeObjectRetain();
              v35 = Row._checkIndex(_:file:line:)(v22, "/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/Row.swift", 62, 2, 825, v34);
              v36 = Row.sqliteStatement.getter(v35);
              if (v36)
              {
                if (v28)
                  goto LABEL_82;
                v21._rawValue = (void *)v36;
                v37 = (sqlite3_stmt *)__chkstk_darwin(v36);
                v20 = (unint64_t)(&v102 - 4);
                *(&v102 - 2) = v25;
                *(&v102 - 1) = v22;
                v33 = sqlite3_column_type(v37, v22);
                if ((_DWORD)v33 == 5)
                  goto LABEL_88;
                *(_QWORD *)&v114[0] = Int64.init(sqliteStatement:index:)(v21, v22);
              }
              else
              {
                v47 = v109;
                Row.fastDecode<A>(_:atUncheckedIndex:)(v114, &type metadata for Int64, v22, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
                v109 = v47;
                if (v47)
                  goto LABEL_93;
              }
              *(_QWORD *)&v115 = *(_QWORD *)&v114[0];
              sub_100053FB8(&v115, v114);
              v48 = swift_isUniquelyReferenced_nonNull_native(v24);
              v118 = v24;
              v49 = sub_100052C20(v27, v26);
              v51 = v24[2];
              v52 = (v50 & 1) == 0;
              v53 = v51 + v52;
              if (__OFADD__(v51, v52))
                goto LABEL_75;
              v20 = v49;
              v21._rawValue = v50;
              sub_100032C48(&qword_100504528);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v48, v53))
              {
                v54 = sub_100052C20(v27, v26);
                if (((uint64_t)v21._rawValue & 1) != (v55 & 1))
                  goto LABEL_87;
                v20 = v54;
              }
              v24 = v118;
              if (((uint64_t)v21._rawValue & 1) != 0)
                goto LABEL_59;
              v118[(v20 >> 6) + 8] |= 1 << v20;
              v56 = (uint64_t *)(v24[6] + 16 * v20);
              *v56 = v27;
              v56[1] = v26;
              sub_100053FB8(v114, (_OWORD *)(v24[7] + 32 * v20));
              v57 = v24[2];
              v58 = __OFADD__(v57, 1);
              v59 = v57 + 1;
              if (v58)
                goto LABEL_83;
              goto LABEL_61;
            case 4:
              v20 = (unint64_t)&type metadata for String;
              *((_QWORD *)&v116 + 1) = &type metadata for String;
              v38 = swift_bridgeObjectRetain();
              v39 = Row._checkIndex(_:file:line:)(v22, "/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/Row.swift", 62, 2, 825, v38);
              v40 = Row.sqliteStatement.getter(v39);
              if (v40)
              {
                if (v28)
                  goto LABEL_80;
                v21._rawValue = (void *)v40;
                v41 = (sqlite3_stmt *)__chkstk_darwin(v40);
                v20 = (unint64_t)(&v102 - 4);
                *(&v102 - 2) = v25;
                *(&v102 - 1) = v22;
                v42 = sqlite3_column_type(v41, v22);
                if ((_DWORD)v42 == 5)
                {
                  __chkstk_darwin(v42);
                  *(&v102 - 2) = (uint64_t)sub_100095BF0;
                  *(&v102 - 1) = v20;
                  v100 = sub_100095BF8;
                  goto LABEL_92;
                }
                v114[0] = String.init(sqliteStatement:index:)(v21, v22);
              }
              else
              {
                v60 = v109;
                Row.fastDecode<A>(_:atUncheckedIndex:)(v114, &type metadata for String, v22, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
                v109 = v60;
                if (v60)
                  goto LABEL_93;
              }
              v115 = v114[0];
              sub_100053FB8(&v115, v114);
              v61 = swift_isUniquelyReferenced_nonNull_native(v24);
              v118 = v24;
              v62 = sub_100052C20(v27, v26);
              v64 = v24[2];
              v65 = (v63 & 1) == 0;
              v66 = v64 + v65;
              if (__OFADD__(v64, v65))
                goto LABEL_76;
              v20 = v62;
              v21._rawValue = v63;
              sub_100032C48(&qword_100504528);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v61, v66))
              {
                v67 = sub_100052C20(v27, v26);
                if (((uint64_t)v21._rawValue & 1) != (v68 & 1))
                  goto LABEL_87;
                v20 = v67;
              }
              v24 = v118;
              if (((uint64_t)v21._rawValue & 1) != 0)
              {
LABEL_59:
                v91 = (_QWORD *)(v24[7] + 32 * v20);
                sub_100032F94(v91);
                sub_100053FB8(v114, v91);
              }
              else
              {
                v118[(v20 >> 6) + 8] |= 1 << v20;
                v69 = (uint64_t *)(v24[6] + 16 * v20);
                *v69 = v27;
                v69[1] = v26;
                sub_100053FB8(v114, (_OWORD *)(v24[7] + 32 * v20));
                v70 = v24[2];
                v58 = __OFADD__(v70, 1);
                v59 = v70 + 1;
                if (v58)
                  goto LABEL_85;
LABEL_61:
                v24[2] = v59;
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRelease(v26);
              swift_bridgeObjectRelease(0x8000000000000000);
              v25 = v113;
              ++v22;
              v23 += 2;
              if (v112 == v22)
                goto LABEL_65;
              break;
            default:
              swift_bridgeObjectRelease(v106);
              swift_bridgeObjectRelease(v24);
              sub_100094A04(137102);
              swift_willThrow(v99);
              swift_release(v25);
              swift_release(v105);
              return;
          }
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        v33 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
LABEL_88:
        __chkstk_darwin(v33);
        *(&v102 - 2) = (uint64_t)sub_100095C98;
        *(&v102 - 1) = v20;
        v100 = sub_100095C9C;
LABEL_92:
        v101 = v109;
        static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(v21._rawValue, v22, v100);
        v109 = v101;
LABEL_93:
        swift_unexpectedError(v109, "GRDBInternal/Row.swift", 22, 1, 278);
        __break(1u);
        JUMPOUT(0x10009586CLL);
      }
      v24 = _swiftEmptyDictionarySingleton;
LABEL_65:
      v19 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
      {
        sub_10003E178(0, v19[2] + 1, 1, (uint64_t)v19);
        v19 = v97;
      }
      v20 = (unint64_t)v108;
      v94 = v109;
      v21._rawValue = v107;
      v17 = v105;
      v96 = v19[2];
      v95 = v19[3];
      if (v96 >= v95 >> 1)
      {
        sub_10003E178(v95 > 1, v96 + 1, 1, (uint64_t)v19);
        v19 = v98;
      }
      v19[2] = v96 + 1;
      v19[v96 + 4] = v24;
      swift_release(v113);
      v18 = sub_10009589C();
      v7 = v94;
      a6 = v104;
      if (v94)
      {
        swift_release(v17);
        swift_bridgeObjectRelease(v19);
        return;
      }
    }
    swift_release(v17);
    *a6 = v19;
  }
}

void sub_10009587C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100094D18(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(_QWORD **)(v2 + 40), a2);
}

uint64_t sub_10009589C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = v0;
  v4 = *v0;
  if ((dispatch thunk of _DatabaseCursor._isDone.getter(*v0, &protocol witness table for RowCursor) & 1) != 0)
    return 0;
  v6 = dispatch thunk of DatabaseCursor.statement.getter(v4, &protocol witness table for RowCursor);
  v7 = type metadata accessor for Row(0);
  swift_retain(v3);
  Statement.step<A>(_:)(&v8, sub_100095C80, v3, v7);
  swift_release(v6);
  result = swift_release(v3);
  if (!v2)
  {
    result = v8;
    if (!v8)
    {
      dispatch thunk of _DatabaseCursor._isDone.setter(1, v4, &protocol witness table for RowCursor);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ASBiomeMaterializedViewer()
{
  return objc_opt_self(_TtC3asd25ASBiomeMaterializedViewer);
}

uint64_t sub_100095AE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100032C48(&qword_100506098);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100095B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_100032C48(&qword_1005060A0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = a2;
  v7 = enum case for RowKey.columnIndex(_:);
  v8 = type metadata accessor for RowKey(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  sub_100037020((uint64_t)v6, 0, 1, v8);
  v9 = swift_retain(a1);
  return RowDecodingContext.init(row:key:)(v9, v6);
}

uint64_t sub_100095BF0()
{
  uint64_t v0;

  return sub_100095B24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100095BF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

_QWORD *sub_100095C18(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  result = dispatch thunk of _DatabaseCursor._element(sqliteStatement:)(&v4, a1, *a2, &protocol witness table for RowCursor);
  if (!v2)
    return (_QWORD *)v4;
  return result;
}

_QWORD *sub_100095C58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_100095C18(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

_QWORD *sub_100095C80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  return sub_100095C58(a1, v2, a2);
}

uint64_t sub_100095CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 104));
}

ValueMetadata *type metadata accessor for RavioliVerifier()
{
  return &type metadata for RavioliVerifier;
}

uint64_t sub_100095CC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 1684366707 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684366707, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65646F4368747561 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4368747561, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100095DFC(char a1)
{
  if (!a1)
    return 1684366707;
  if (a1 == 1)
    return 0x65646F4368747561;
  return 0x6E6F6973726576;
}

void sub_100095E4C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v5 = sub_100032C48(&qword_1005060E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032EFC(a1, v9);
  v11 = sub_1000970C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys, &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100032F94(a1);
  }
  else
  {
    v26 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
    v14 = v13;
    v23 = v12;
    v25 = 1;
    swift_bridgeObjectRetain();
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
    v17 = v16;
    v21 = v15;
    v24 = 2;
    swift_bridgeObjectRetain();
    v22 = v17;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100032F94(a1);
    v19 = v22;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v14);
    *a2 = v23;
    a2[1] = v14;
    a2[2] = v21;
    a2[3] = v19;
    a2[4] = v18;
  }
}

uint64_t sub_10009606C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7469726765746E69 && a2 == 0xEE006B6365684379)
  {
    swift_bridgeObjectRelease(0xEE006B6365684379);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7469726765746E69, 0xEE006B6365684379, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10009616C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7469726765746E69;
  else
    return 1635017060;
}

void sub_1000961A8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  char v22;

  v5 = sub_100032C48(&qword_1005060B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032EFC(a1, v9);
  v11 = sub_100096CFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RavioliVerifier.ResponseDTO.CodingKeys, &type metadata for RavioliVerifier.ResponseDTO.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100032F94(a1);
  }
  else
  {
    LOBYTE(v21[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v21, v5);
    v14 = v13;
    v22 = 1;
    v15 = sub_100096D38();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for RavioliVerifier.IntegrityCheckJSON, &v22, v5, &type metadata for RavioliVerifier.IntegrityCheckJSON, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v21[0];
    v16 = v21[1];
    v19 = v21[2];
    v18 = v21[3];
    v20 = v21[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100032F94(a1);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v14);
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v17;
    a2[3] = v16;
    a2[4] = v19;
    a2[5] = v18;
    a2[6] = v20;
  }
}

uint64_t sub_100096394()
{
  char *v0;

  return sub_100095DFC(*v0);
}

uint64_t sub_10009639C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100095CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000963C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000970C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000963E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000970C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100096410@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100095E4C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100096454()
{
  char *v0;

  return sub_10009616C(*v0);
}

uint64_t sub_10009645C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009606C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100096480(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100096CFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000964A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100096CFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000964D0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000961A8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10009651C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  unsigned int v44;

  sub_100033DD0(a5, a6);
  sub_1000968A0(a5, a6);
  v9 = v8;
  sub_100033030(a5, a6);
  v10 = sub_1000972A8();
  sub_100033DD0(v10, v11);
  v12 = sub_1000972A8();
  sub_1000968A0(v12, v13);
  v15 = v14;
  v16 = sub_1000972A8();
  sub_100033030(v16, v17);
  v18 = sub_10009729C();
  sub_100033DD0(v18, v19);
  v20 = sub_10009729C();
  sub_1000968A0(v20, v21);
  v23 = v22;
  v24 = sub_10009729C();
  sub_100033030(v24, v25);
  v26 = sub_10009729C();
  v27 = Data.count.getter(v26);
  v28 = (_BYTE *)swift_slowAlloc(v27, -1);
  v29 = Data.count.getter(a5);
  if ((v29 & 0x8000000000000000) != 0)
    goto LABEL_27;
  if (HIDWORD(v29) || HIDWORD(*(_QWORD *)(v23 + 16)))
    goto LABEL_26;
  v30 = sub_1000972A8();
  v31 = Data.count.getter(v30);
  if ((v31 & 0x8000000000000000) != 0)
  {
LABEL_27:
    sub_100040888();
    v42 = "Negative value is not representable";
    v43 = 35;
    goto LABEL_28;
  }
  if (HIDWORD(v31))
  {
LABEL_26:
    sub_100040888();
    v42 = "Not enough bits to represent the passed value";
    v43 = 45;
LABEL_28:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v42, v43, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  v44 = ((uint64_t (*)(void))noErr.getter)();
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
  {
    sub_10009688C();
    v9 = v39;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
  {
    sub_10009688C();
    v23 = v40;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
  {
    sub_10009688C();
    v15 = v41;
  }
  sub_10027ADA4();
  v32 = v44;
  if (v44 == noErr.getter(v33))
  {
    if (v27)
    {
      if (*v28)
      {
        v34 = 1;
        if (v27 != 1)
        {
          while (v28[v34])
          {
            if (v27 == ++v34)
            {
              v34 = v27;
              goto LABEL_23;
            }
          }
          if (v34 < 0)
            __break(1u);
        }
      }
      else
      {
        v34 = 0;
      }
    }
    else
    {
      v34 = 0;
    }
LABEL_23:
    v32 = sub_100033C50(0, v34, (uint64_t)v28, v27);
    sub_10009728C();
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v35 = sub_10006D564();
    v36 = swift_allocError(&type metadata for RavioliVerifier.CCVerificationError, v35, 0, 0);
    *v37 = 3;
    swift_willThrow(v36);
    sub_10009728C();
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v23);
  }
  return v32;
}

void sub_100096850(uint64_t a1)
{
  sub_10003D490(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100096864(uint64_t a1)
{
  sub_10003D560(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100096878(uint64_t a1)
{
  sub_10003DE94(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10009688C()
{
  sub_10003D4A4();
}

void sub_1000968A0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_10009691C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_100032C48(&qword_1005039D0);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_100033DD0(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_100033030(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000969F0);
    }
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.CCVerificationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100096A54 + 4 * byte_10040AA35[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100096A88 + 4 * asc_10040AA30[v4]))();
}

uint64_t sub_100096A88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096A90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100096A98);
  return result;
}

uint64_t sub_100096AA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100096AACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100096AB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096AB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.CCVerificationError()
{
  return &type metadata for RavioliVerifier.CCVerificationError;
}

_QWORD *initializeWithCopy for RavioliVerifier.ResponseDTO(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for RavioliVerifier.ResponseDTO(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

_QWORD *assignWithTake for RavioliVerifier.ResponseDTO(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.ResponseDTO(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.ResponseDTO(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.ResponseDTO()
{
  return &type metadata for RavioliVerifier.ResponseDTO;
}

unint64_t sub_100096CC0()
{
  unint64_t result;

  result = qword_1005060A8;
  if (!qword_1005060A8)
  {
    result = swift_getWitnessTable(&unk_10040AAD0, &type metadata for RavioliVerifier.CCVerificationError);
    atomic_store(result, (unint64_t *)&qword_1005060A8);
  }
  return result;
}

unint64_t sub_100096CFC()
{
  unint64_t result;

  result = qword_1005060B8;
  if (!qword_1005060B8)
  {
    result = swift_getWitnessTable(&unk_10040AC64, &type metadata for RavioliVerifier.ResponseDTO.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060B8);
  }
  return result;
}

unint64_t sub_100096D38()
{
  unint64_t result;

  result = qword_1005060C0;
  if (!qword_1005060C0)
  {
    result = swift_getWitnessTable(&unk_10040AC3C, &type metadata for RavioliVerifier.IntegrityCheckJSON);
    atomic_store(result, (unint64_t *)&qword_1005060C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.ResponseDTO.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100096DC0 + 4 * byte_10040AA3F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100096DF4 + 4 * byte_10040AA3A[v4]))();
}

uint64_t sub_100096DF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100096E04);
  return result;
}

uint64_t sub_100096E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100096E18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100096E1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096E24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.ResponseDTO.CodingKeys()
{
  return &type metadata for RavioliVerifier.ResponseDTO.CodingKeys;
}

uint64_t destroy for RavioliVerifier.IntegrityCheckJSON(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for RavioliVerifier.IntegrityCheckJSON(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for RavioliVerifier.IntegrityCheckJSON(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for RavioliVerifier.IntegrityCheckJSON(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.IntegrityCheckJSON()
{
  return &type metadata for RavioliVerifier.IntegrityCheckJSON;
}

unint64_t sub_100097008()
{
  unint64_t result;

  result = qword_1005060C8;
  if (!qword_1005060C8)
  {
    result = swift_getWitnessTable(&unk_10040AC14, &type metadata for RavioliVerifier.ResponseDTO.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060C8);
  }
  return result;
}

unint64_t sub_100097048()
{
  unint64_t result;

  result = qword_1005060D0;
  if (!qword_1005060D0)
  {
    result = swift_getWitnessTable(&unk_10040AB84, &type metadata for RavioliVerifier.ResponseDTO.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060D0);
  }
  return result;
}

unint64_t sub_100097088()
{
  unint64_t result;

  result = qword_1005060D8;
  if (!qword_1005060D8)
  {
    result = swift_getWitnessTable(&unk_10040ABAC, &type metadata for RavioliVerifier.ResponseDTO.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060D8);
  }
  return result;
}

unint64_t sub_1000970C4()
{
  unint64_t result;

  result = qword_1005060E8;
  if (!qword_1005060E8)
  {
    result = swift_getWitnessTable(&unk_10040AD6C, &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009714C + 4 * byte_10040AA49[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100097180 + 4 * byte_10040AA44[v4]))();
}

uint64_t sub_100097180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100097190);
  return result;
}

uint64_t sub_10009719C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000971A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000971A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000971B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.IntegrityCheckJSON.CodingKeys()
{
  return &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys;
}

unint64_t sub_1000971D0()
{
  unint64_t result;

  result = qword_1005060F0;
  if (!qword_1005060F0)
  {
    result = swift_getWitnessTable(&unk_10040AD44, &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060F0);
  }
  return result;
}

unint64_t sub_100097210()
{
  unint64_t result;

  result = qword_1005060F8;
  if (!qword_1005060F8)
  {
    result = swift_getWitnessTable(&unk_10040ACB4, &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005060F8);
  }
  return result;
}

unint64_t sub_100097250()
{
  unint64_t result;

  result = qword_100506100;
  if (!qword_100506100)
  {
    result = swift_getWitnessTable(&unk_10040ACDC, &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100506100);
  }
  return result;
}

uint64_t sub_10009728C()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_10009729C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000972A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000972B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = sub_100032C48((uint64_t *)&unk_100504CC0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_100097308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  sub_1000396E0((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), &qword_1005062C8);
  return swift_continuation_throwingResume(a1);
}

uint64_t sub_100097350(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_100097360(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_DWORD *)(a2 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 32) = v2;
  return swift_continuation_throwingResume();
}

_QWORD *sub_10009737C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
LABEL_7:
        v8 = v7;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_20;
        v10 = objc_msgSend(v7, "userID");
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        if (v11 == a2 && v13 == a3)
        {

          swift_bridgeObjectRelease(a3);
        }
        else
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, a2, a3, 0);
          v16 = swift_bridgeObjectRelease(v13);
          if ((v15 & 1) != 0)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
            v17 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
            v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v8);
            specialized ContiguousArray._endMutation()(v18);
          }
        }
        ++v6;
        if (v9 == v5)
          goto LABEL_25;
      }
      if (v6 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      v5 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v5)
        goto LABEL_25;
    }
    v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }
LABEL_25:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

Class sub_100097544(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_100039884(0, &qword_100504518, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000975C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  sub_10006ED7C();
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100097668()
{
  uint64_t v0;

  v0 = sub_1000357DC();
  sub_100035270(v0, qword_100506108);
  sub_1000352B0(v0, (uint64_t)qword_100506108);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006473612E65, 0xD000000000000011, 0x80000001003E4C50);
}

uint64_t sub_1000976E4()
{
  uint64_t v1[12];
  _QWORD __src[12];
  _BYTE __dst[102];
  char v4;
  char v5;

  sub_100084C20(v1);
  sub_1000396E0((uint64_t)v1, (uint64_t)__src, &qword_100503A78);
  if (__src[5] == 1)
    return 0;
  memcpy(__dst, __src, 0x60uLL);
  sub_10003974C(v1);
  sub_1000396E0((uint64_t)&__dst[73], (uint64_t)&v4, &qword_100505AA0);
  sub_1000396E0((uint64_t)&v4, (uint64_t)&v5, &qword_100505AA0);
  if (v5 == 2)
    return 0;
  else
    return v5 & 1;
}

uint64_t sub_100097794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return sub_10004EC74((uint64_t)sub_1000977A8, a4);
}

uint64_t sub_1000977A8()
{
  uint64_t v0;

  sub_1000977D0();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000977D0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1005034C0 != -1)
    swift_once(&qword_1005034C0, sub_100084FC4);
  v2 = qword_1005186B8;
  v3 = swift_allocObject(&unk_1004D34A8, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v10 = v3;
  v4 = sub_10009970C((uint64_t)sub_1000975C8, (uint64_t)_NSConcreteStackBlock, 1107296256, v8, v9);
  swift_release(v10);
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4);
  _Block_release(v4);

  v6 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 200) = v5;
  return swift_unknownObjectRelease(v6);
}

uint64_t sub_1000978F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = sub_100032C48(&qword_1005039D8);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v12, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for TaskPriority(0);
    sub_100037020((uint64_t)v5, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_1004D34F8, 40, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v7;
    v10 = sub_1000494E4((uint64_t)v5, (uint64_t)&unk_1005062B8, (uint64_t)v9);
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_1000979CC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10050614C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100099598;
  return sub_100097ACC();
}

uint64_t sub_100097A14()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v1 = objc_msgSend(v0, "aida_accountForPrimaryiCloudAccount");
  if (!v1)
  {

    return 0;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "aida_dsid");
  if (!v3)
  {

    return 0;
  }
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

uint64_t sub_100097ACC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_100097AE0, v0);
}

uint64_t sub_100097AE0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + 208) & 1) != 0)
    return sub_10004ED88(*(uint64_t (**)(void))(v0 + 8));
  v2 = sub_100097A14();
  v4 = v3;
  *(_QWORD *)(v0 + 24) = v3;
  if ((sub_1000976E4() & 1) != 0 || !v4)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_100506164);
    *(_QWORD *)(v0 + 40) = v6;
    sub_100099624(v6, (uint64_t)sub_100097BC4);
    return sub_100098B80();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_10050615C);
    *(_QWORD *)(v0 + 32) = v5;
    sub_100099624(v5, (uint64_t)sub_100097B94);
    return sub_100097DA0(v2, v4);
  }
}

uint64_t sub_100097B94()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 32));
  sub_1000356D4();
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100097BC4()
{
  uint64_t v0;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v0 + 40));
  return sub_100040920();
}

uint64_t sub_100097C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v3 = sub_1000357DC();
    v4 = (id)sub_10005680C(v3, (uint64_t)qword_100506108);
    v5 = static os_log_type_t.info.getter();
    if (sub_10004EFCC(v5))
    {
      v6 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v6);
      sub_100058F24((void *)&_mh_execute_header, v7, v8, "Push disabled - not registering with PDS");
      sub_100033080(v0);
    }
  }
  else
  {
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v9 = sub_1000357DC();
    v10 = (void *)sub_10005680C(v9, (uint64_t)qword_100506108);
    v11 = static os_log_type_t.info.getter();
    if (sub_10004EFCC(v11))
    {
      v12 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v12);
      sub_100058F24((void *)&_mh_execute_header, v13, v14, "Couldn't find current user - not registering with PDS and removing Ravioli if present");
      sub_100033080(v0);
    }

    v4 = objc_msgSend(objc_allocWithZone((Class)Vr3QrKl7Yn9l4CTz), "init");
    objc_msgSend(v4, "hiMi2bftgysHNCmu");
  }

  return sub_10004ED88(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100097D44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_100097D58, v0);
}

uint64_t sub_100097D58()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 208) = 0;
  v1 = (_QWORD *)swift_task_alloc(dword_10050614C);
  *(_QWORD *)(v0 + 24) = v1;
  sub_100099624(v1, (uint64_t)sub_100099594);
  return sub_100097ACC();
}

uint64_t sub_100097DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  v3[27] = type metadata accessor for ASAnalyticsEvent(0);
  v3[28] = sub_100072B24();
  v3[29] = sub_100072B24();
  v3[30] = sub_100072B24();
  return swift_task_switch(sub_100097E44, v2, 0);
}

uint64_t sub_100097E44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 208) + 112);
  *(_QWORD *)(v2 + 248) = v3;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = v2 + 160;
    v4 = sub_1000996C0((uint64_t)sub_100097FF8);
    *(_QWORD *)(v2 + 80) = _NSConcreteStackBlock;
    v5 = v2 + 80;
    *(_QWORD *)(v5 + 8) = 0x40000000;
    objc_msgSend(sub_100099724(v4, (uint64_t)sub_100098A3C), "activeUsersWithCompletion:", v5);
    return sub_1000995F4();
  }
  else
  {
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v7 = sub_1000357DC();
    sub_10005680C(v7, (uint64_t)qword_100506108);
    v8 = sub_10006E5E0();
    if (sub_10004EFCC(v8))
    {
      v9 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v9);
      sub_100058F24((void *)&_mh_execute_header, v10, v11, "PushManagerPDS has nil PDSRegistrar - Can't register dsid");
      sub_100033080(v1);
    }
    v12 = *(_QWORD *)(v2 + 208);

    sub_1000996F8((_QWORD *)(v12 + 144), *(_QWORD *)(v12 + 168));
    if (*(_BYTE *)(v12 + 136))
    {
      if (*(_BYTE *)(v12 + 136) == 1)
        sub_1000995D4();
      else
        sub_1000995C0();
    }
    else
    {
      sub_100099650();
    }
    v16 = *(_QWORD *)(v2 + 240);
    v17 = *(_QWORD *)(v2 + 216);
    *(_BYTE *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 1;
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v14;
    sub_10009966C(v13, v17);
    sub_10009968C();
    sub_1000937F4();
    sub_100099678();
    sub_100040B34();
    sub_100040A10();
    return sub_10004ED88(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100097FF8()
{
  uint64_t v0;
  uint64_t v1;

  sub_100099604();
  *(_QWORD *)(v0 + 256) = v1;
  return sub_100040920();
}

uint64_t sub_10009807C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  id v33;
  unsigned int v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 160);
  sub_100046EC0();
  v4 = (uint64_t)sub_10009737C(v3, v2, v1);
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_10:
    v14 = sub_1000356D4();
    goto LABEL_21;
  }
LABEL_36:
  if (v4 < 0)
    v72 = v4;
  else
    v72 = v4 & 0xFFFFFFFFFFFFFF8;
  v5 = _CocoaArrayWrapper.endIndex.getter(v72);
  if (!v5)
    goto LABEL_10;
LABEL_3:
  v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = sub_100099718();
    else
      v7 = (uint64_t)sub_1000996E0();
    v8 = (void *)v7;
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v10 = *(void **)(v0 + 248);
    *(_QWORD *)(v0 + 184) = 0;
    v11 = objc_msgSend(v10, "removeAllRegistrationsFromUser:error:", v8, v0 + 184);
    v12 = *(void **)(v0 + 184);
    if (!v11)
      break;
    v13 = v12;

    ++v6;
    if (v9 == v5)
      goto LABEL_10;
  }
  v15 = v12;
  sub_1000356D4();
  _convertNSErrorToError(_:)(v12);

  swift_willThrow(v16);
  if (qword_1005034F0 != -1)
    swift_once(&qword_1005034F0, sub_100097668);
  v17 = sub_1000357DC();
  sub_10005680C(v17, (uint64_t)qword_100506108);
  v18 = sub_10006E5E0();
  if (os_log_type_enabled((os_log_t)v4, v18))
  {
    v19 = (_WORD *)sub_10003308C(2);
    *v19 = 0;
    sub_100099754((void *)&_mh_execute_header, v4, v18, "Error getting or removing registrations for existing users.");
    sub_100033080((uint64_t)v19);
  }
  v20 = *(_QWORD *)(v0 + 208);

  sub_1000996F8((_QWORD *)(v20 + 144), *(_QWORD *)(v20 + 168));
  if (*(_BYTE *)(v20 + 136))
  {
    if (*(_BYTE *)(v20 + 136) == 1)
      sub_1000995D4();
    else
      sub_1000995C0();
  }
  else
  {
    sub_100099650();
  }
  v23 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 216);
  *(_BYTE *)v23 = 1;
  *(_QWORD *)(v23 + 8) = 4;
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v21;
  swift_storeEnumTagMultiPayload(v23, v24, 3);
  sub_100099360(v23);
  sub_100076B7C();
  v14 = sub_10004EA4C(v23);
LABEL_21:
  v25 = *(void **)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 200);
  v27 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v0 + 192);
  sub_1000399FC(v14, &qword_1005062A0, PDSUser_ptr);
  sub_100046EC0();
  v29 = sub_100098AA8(v28, v26);
  sub_1000399FC((uint64_t)v29, &qword_1005062A8, PDSRegistration_ptr);
  v31 = *(_QWORD *)(v27 + 120);
  v30 = *(_QWORD *)(v27 + 128);
  v32 = *(unsigned __int8 *)(v27 + 136);
  sub_100054E48();
  v33 = sub_100098B08(v31, v30, v32);
  *(_QWORD *)(v0 + 144) = 0;
  v34 = sub_1000996EC(v25, "ensureRegistrationPresent:forUser:error:", (uint64_t)v33);
  v35 = *(void **)(v0 + 144);
  if (v34)
  {
    v36 = *(void **)(v0 + 248);
    v37 = v35;

  }
  else
  {
    v77 = v33;
    v38 = v35;
    v39 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v40);
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v41 = sub_1000357DC();
    v42 = sub_1000352B0(v41, (uint64_t)qword_100506108);
    swift_errorRetain(v39);
    sub_10006ED7C();
    swift_errorRetain(v39);
    v43 = sub_10006ED7C();
    Logger.logObject.getter(v43);
    v44 = sub_1000996B0();
    v45 = sub_1000996A0(v44);
    v46 = *(_QWORD *)(v0 + 208);
    if (v45)
    {
      v76 = v29;
      v47 = sub_10003308C(22);
      v78 = sub_10003308C(64);
      *(_DWORD *)v47 = 136315394;
      swift_getErrorValue(v39, v0 + 152, v0 + 120);
      v48 = sub_1000995E8();
      *(_QWORD *)(v0 + 168) = sub_100099730(v48, v49, v50, v51, v52, v53, v54, v55, v0 + 120, v0 + 168, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v0 + 176, v47 + 4, v47 + 12);
      sub_1000356D4();
      sub_100099698();
      sub_100099698();
      *(_WORD *)(v47 + 12) = 2080;
      v56 = sub_100054E48();
      *(_QWORD *)(v0 + 176) = sub_1000996D0(v56, v57, v58, v59, v60, v61, v62, v63, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease(v30);
      sub_1000996B8(v75);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v42, "Error thrown ensuring registering Push user: %s for topic %s", (uint8_t *)v47, 0x16u);
      sub_10009973C();
      sub_100033080(v78);
      v64 = v47;
      v29 = v76;
      sub_100033080(v64);
    }
    else
    {
      sub_100099698();
      sub_100099698();
      sub_1000996B8(v46);
    }

    sub_1000996F8((_QWORD *)(*(_QWORD *)(v0 + 208) + 144), *(_QWORD *)(*(_QWORD *)(v0 + 208) + 168));
    if (v32)
    {
      if (v32 == 1)
        sub_1000995D4();
      else
        sub_1000995C0();
    }
    else
    {
      sub_100099634();
    }
    v68 = *(void **)(v0 + 248);
    v69 = *(_QWORD *)(v0 + 216);
    v70 = *(_QWORD *)(v0 + 224);
    *(_BYTE *)v70 = 1;
    *(_QWORD *)(v70 + 8) = 3;
    *(_QWORD *)(v70 + 16) = v67;
    *(_QWORD *)(v70 + 24) = v66;
    sub_10009966C(v65, v69);
    sub_10009968C();

    sub_100099698();
    sub_1000937F4();
  }
  sub_100099678();
  sub_100040B34();
  sub_100040A10();
  return sub_1000995A4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000985B8(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  unsigned __int8 v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;

  swift_willThrow(a1);
  if (qword_1005034F0 != -1)
    swift_once(&qword_1005034F0, sub_100097668);
  v3 = sub_1000357DC();
  sub_10005680C(v3, (uint64_t)qword_100506108);
  v4 = sub_10006E5E0();
  if (os_log_type_enabled(v1, v4))
  {
    v5 = (_WORD *)sub_10003308C(2);
    *v5 = 0;
    sub_100099754((void *)&_mh_execute_header, v1, v4, "Error getting or removing registrations for existing users.");
    sub_100033080((uint64_t)v5);
  }
  v6 = *(_QWORD *)(v2 + 208);

  sub_1000996F8((_QWORD *)(v6 + 144), *(_QWORD *)(v6 + 168));
  if (*(_BYTE *)(v6 + 136))
  {
    if (*(_BYTE *)(v6 + 136) == 1)
      sub_1000995D4();
    else
      sub_1000995C0();
  }
  else
  {
    sub_100099634();
  }
  v9 = *(_QWORD *)(v2 + 232);
  v10 = *(_QWORD *)(v2 + 216);
  *(_BYTE *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 4;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  swift_storeEnumTagMultiPayload(v9, v10, 3);
  sub_100099360(v9);
  sub_10006E690();
  v11 = sub_10004EA4C(v9);
  v12 = *(void **)(v2 + 248);
  v13 = *(_QWORD *)(v2 + 200);
  v14 = *(_QWORD *)(v2 + 208);
  v15 = *(_QWORD *)(v2 + 192);
  sub_1000399FC(v11, &qword_1005062A0, PDSUser_ptr);
  sub_100046EC0();
  v16 = sub_100098AA8(v15, v13);
  sub_1000399FC((uint64_t)v16, &qword_1005062A8, PDSRegistration_ptr);
  v18 = *(_QWORD *)(v14 + 120);
  v17 = *(_QWORD *)(v14 + 128);
  v19 = *(unsigned __int8 *)(v14 + 136);
  sub_100054E48();
  v20 = sub_100098B08(v18, v17, v19);
  *(_QWORD *)(v2 + 144) = 0;
  v21 = sub_1000996EC(v12, "ensureRegistrationPresent:forUser:error:", (uint64_t)v20);
  v22 = *(void **)(v2 + 144);
  if ((v21 & 1) != 0)
  {
    v23 = *(void **)(v2 + 248);
    v24 = v22;

  }
  else
  {
    v62 = v16;
    v25 = v22;
    v26 = _convertNSErrorToError(_:)(v22);

    swift_willThrow(v27);
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v28 = sub_1000352B0(v3, (uint64_t)qword_100506108);
    swift_errorRetain(v26);
    sub_10006ED7C();
    swift_errorRetain(v26);
    v29 = sub_10006ED7C();
    v30 = v28;
    Logger.logObject.getter(v29);
    v31 = sub_1000996B0();
    v32 = sub_1000996A0(v31);
    v33 = *(_QWORD *)(v2 + 208);
    if (v32)
    {
      v61 = *(_QWORD *)(v2 + 208);
      v34 = sub_10003308C(22);
      v63 = sub_10003308C(64);
      *(_DWORD *)v34 = 136315394;
      swift_getErrorValue(v26, v2 + 152, v2 + 120);
      v35 = sub_1000995E8();
      *(_QWORD *)(v2 + 168) = sub_100099730(v35, v36, v37, v38, v39, v40, v41, v42, v58, v2 + 120, v2 + 168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v2 + 176, v34 + 4, v34 + 12);
      sub_1000356D4();
      sub_100099684();
      sub_100099684();
      *(_WORD *)(v34 + 12) = 2080;
      v43 = sub_100054E48();
      *(_QWORD *)(v2 + 176) = sub_1000996D0(v43, v44, v45, v46, v47, v48, v49, v50, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 176, v2 + 184, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v17);
      sub_1000996B8(v61);
      _os_log_impl((void *)&_mh_execute_header, v26, v30, "Error thrown ensuring registering Push user: %s for topic %s", (uint8_t *)v34, 0x16u);
      sub_10009973C();
      sub_100033080(v63);
      sub_100033080(v34);
    }
    else
    {
      sub_100099684();
      sub_100099684();
      sub_1000996B8(v33);
    }

    v51 = sub_1000996F8((_QWORD *)(*(_QWORD *)(v2 + 208) + 144), *(_QWORD *)(*(_QWORD *)(v2 + 208) + 168));
    if (v19)
    {
      v52 = 0xE700000000000000;
      if (v19 == 1)
        v53 = 0x786F62646E6173;
      else
        v53 = 0x6E776F6E6B6E55;
    }
    else
    {
      v53 = 0x69746375646F7270;
      v52 = 0xEA00000000006E6FLL;
    }
    v54 = *(void **)(v2 + 248);
    v55 = *(_QWORD *)(v2 + 216);
    v56 = *(_QWORD *)(v2 + 224);
    *(_BYTE *)v56 = 1;
    *(_QWORD *)(v56 + 8) = 3;
    *(_QWORD *)(v56 + 16) = v53;
    *(_QWORD *)(v56 + 24) = v52;
    sub_10009966C((uint64_t)v51, v55);
    sub_10009968C();

    sub_100099684();
    sub_1000937F4();
  }
  sub_100099678();
  sub_100040B34();
  sub_100040A10();
  return sub_1000995A4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100098A3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1000972B8(v3, (uint64_t)a3);
  v6 = sub_100039884(0, &qword_1005062A0, PDSUser_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v6);
  return sub_100097350(v3, v7);
}

id sub_100098AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "userWithDSID:", v4);

  return v5;
}

id sub_100098B08(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithTopic:pushEnvironment:", v7, a3);

  return v8;
}

uint64_t sub_100098B80()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10004EC74((uint64_t)sub_100098B94, v0);
}

uint64_t sub_100098B94()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 208) = 1;
  v1 = (_QWORD *)swift_task_alloc(dword_10050616C);
  *(_QWORD *)(v0 + 24) = v1;
  sub_100099624(v1, (uint64_t)sub_100098BE0);
  return sub_100098C0C();
}

uint64_t sub_100098BE0()
{
  uint64_t v0;
  uint64_t v1;

  sub_100040B24();
  sub_100048CF8(*(_QWORD *)(v1 + 24));
  return sub_10004ECB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100098C0C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = v0;
  return sub_100040920();
}

uint64_t sub_100098C68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 160) + 112);
  *(_QWORD *)(v2 + 168) = v3;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = v2 + 152;
    v4 = sub_1000996C0((uint64_t)sub_100098DB0);
    *(_QWORD *)(v2 + 80) = _NSConcreteStackBlock;
    v5 = v2 + 80;
    *(_QWORD *)(v5 + 8) = 0x40000000;
    objc_msgSend(sub_100099724(v4, (uint64_t)sub_100098A3C), "activeUsersWithCompletion:", v5);
    return sub_1000995F4();
  }
  else
  {
    if (qword_1005034F0 != -1)
      swift_once(&qword_1005034F0, sub_100097668);
    v7 = sub_1000357DC();
    sub_10005680C(v7, (uint64_t)qword_100506108);
    v8 = sub_10006E5E0();
    if (sub_10004EFCC(v8))
    {
      v9 = (_WORD *)sub_10003308C(2);
      sub_10006E7D8(v9);
      sub_100058F24((void *)&_mh_execute_header, v10, v11, "PushManagerPDS has nil PDSRegistrar - Can't unregister dsid");
      sub_100033080(v1);
    }

    return sub_10004ED88(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100098DB0()
{
  uint64_t v0;
  uint64_t v1;

  sub_100099604();
  *(_QWORD *)(v0 + 176) = v1;
  return sub_100040920();
}

uint64_t sub_100098E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;
  void *v11;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 152);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_10:
    v11 = *(void **)(v0 + 168);
    sub_1000356D4();

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_18:
  if (v1 < 0)
    v23 = v1;
  else
    v23 = v1 & 0xFFFFFFFFFFFFFF8;
  sub_100046EC0();
  v2 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_1000356D4();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v4 = sub_100099718();
    else
      v4 = (uint64_t)sub_1000996E0();
    v5 = (void *)v4;
    v6 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    v7 = *(void **)(v0 + 168);
    *(_QWORD *)(v0 + 80) = 0;
    v8 = objc_msgSend(v7, "removeAllRegistrationsFromUser:error:", v5, v0 + 80);
    v9 = *(void **)(v0 + 80);
    if (!v8)
      break;
    v10 = v9;

    ++v3;
    if (v6 == v2)
      goto LABEL_10;
  }
  v13 = v9;
  sub_1000356D4();
  v14 = _convertNSErrorToError(_:)(v9);

  swift_willThrow(v15);
  if (qword_1005034F0 != -1)
    swift_once(&qword_1005034F0, sub_100097668);
  v16 = sub_1000357DC();
  sub_1000352B0(v16, (uint64_t)qword_100506108);
  swift_errorRetain(v14);
  v17 = swift_errorRetain(v14);
  Logger.logObject.getter(v17);
  v18 = sub_1000996B0();
  if (os_log_type_enabled(v14, v18))
  {
    v24 = *(void **)(v0 + 168);
    v19 = (_DWORD *)swift_slowAlloc(12, -1);
    v20 = sub_10003308C(32);
    v25 = v20;
    *v19 = 136315138;
    swift_getErrorValue(v14, v0 + 144, v0 + 120);
    v21 = sub_1000995E8();
    *(_QWORD *)(v0 + 80) = sub_100036778(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 1, v19 + 3);
    sub_1000356D4();
    sub_100076B7C();
    sub_100076B7C();
    sub_100099748((void *)&_mh_execute_header, v14, v18, "Error thrown unregistering Push user: %s");
    swift_arrayDestroy(v20, 1);
    sub_100033080(v20);
    sub_100033080((uint64_t)v19);

    sub_100076B7C();
  }
  else
  {

    sub_100076B7C();
    sub_100076B7C();
    sub_100076B7C();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000990E4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v12;
  uint64_t v13;

  v2 = *(NSObject **)(v1 + 176);
  swift_willThrow(a1);
  v3 = *(_QWORD *)(v1 + 176);
  if (qword_1005034F0 != -1)
    swift_once(&qword_1005034F0, sub_100097668);
  v4 = sub_1000357DC();
  sub_1000352B0(v4, (uint64_t)qword_100506108);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  Logger.logObject.getter(v5);
  v6 = sub_1000996B0();
  if (os_log_type_enabled(v2, v6))
  {
    v12 = *(void **)(v1 + 168);
    v7 = (_DWORD *)sub_10003308C(12);
    v8 = sub_10003308C(32);
    v13 = v8;
    *v7 = 136315138;
    swift_getErrorValue(v3, v1 + 144, v1 + 120);
    v9 = sub_1000995E8();
    *(_QWORD *)(v1 + 80) = sub_100036778(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v7 + 1, v7 + 3);
    sub_1000356D4();
    sub_10006E690();
    sub_10006E690();
    sub_100099748((void *)&_mh_execute_header, v2, v6, "Error thrown unregistering Push user: %s");
    swift_arrayDestroy(v8, 1);
    sub_100033080(v8);
    sub_100033080((uint64_t)v7);

    sub_10006E690();
  }
  else
  {

    sub_10006E690();
    sub_10006E690();
    sub_10006E690();

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000992C4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 200))
    objc_msgSend(*(id *)(v0 + 192), "removeObserver:");

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  sub_100032F94((_QWORD *)(v0 + 144));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 200));
  swift_defaultActor_destroy(v0);
  return v0;
}

