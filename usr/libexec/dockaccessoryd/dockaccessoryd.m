void sub_100006B10(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wakeTuples"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wakeTuples"));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      v9 = *(_QWORD *)v22;
      do
      {
        v10 = 0;
        v11 = v7;
        do
        {
          if (*(_QWORD *)v22 != v9)
            objc_enumerationMutation(v4);
          v12 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v10);
          v13 = *(void **)(a1 + 32);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dnsName"));
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_wakeWithTuple:dnsName:", v12, v14));

          v8 |= v7 == 0;
          v10 = (char *)v10 + 1;
          v11 = v7;
        }
        while (v6 != v10);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v6);

      if ((v8 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      v7 = v4;
    }

    v7 = 0;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    return;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dnsName"));

  v16 = *(_QWORD *)(a1 + 40);
  if (v15)
  {
    v17 = *(void **)(a1 + 32);
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dnsName"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_wakeWithTuple:dnsName:", 0));
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v18);

  }
  else
  {
    v20 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", 9));
    (*(void (**)(uint64_t))(v16 + 16))(v16);

  }
}

void sub_100007094(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("Accessory.LPM"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271638;
  qword_100271638 = v2;

}

void sub_100008458(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6752, 0));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "fragmentationStream:didCloseWithError:", *(_QWORD *)(a1 + 32), v3);

}

void sub_100008560(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPacketTransactionIdentifier"));
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPacketTransactionIdentifier"));
    v5 = objc_msgSend(v4, "unsignedCharValue");
    v6 = objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier");

    if (v6 != v5)
    {
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentPacketTransactionIdentifier"));
      objc_msgSend(v7, "__removeAllPendingPacketsWithTransactionIdentifier:", objc_msgSend(v8, "unsignedCharValue"));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6723, 0));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      v11 = *(void **)(a1 + 32);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentPacketTransactionIdentifier"));
      objc_msgSend(v10, "fragmentationStream:didReceiveData:transactionIdentifier:error:", v11, 0, objc_msgSend(v12, "unsignedCharValue"), v9);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "__addFragmentationPacket:", *(_QWORD *)(a1 + 40));
  v13 = objc_msgSend(*(id *)(a1 + 32), "__isTransactionCompleteWithTransactionIdentifier:", objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier"));
  v14 = *(void **)(a1 + 32);
  if (v13)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "__transactionDataWithTransactionIdentifier:", objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier")));
    if (v15)
      v17 = 0;
    else
      v17 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6732, 0));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v16, "fragmentationStream:didReceiveData:transactionIdentifier:error:", *(_QWORD *)(a1 + 32), v15, objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier"), v17);

    objc_msgSend(*(id *)(a1 + 32), "setCurrentPacketTransactionIdentifier:", 0);
    objc_msgSend(*(id *)(a1 + 32), "__removeAllPendingPacketsWithTransactionIdentifier:", objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier"));

  }
  else
  {
    v17 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier")));
    objc_msgSend(v14, "setCurrentPacketTransactionIdentifier:");
  }

}

void sub_100008D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008D94(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = objc_msgSend(*(id *)(a1 + 32), "transactionIdentifier");
  if (v7 == objc_msgSend(v9, "transactionIdentifier")
    && (v8 = objc_msgSend(*(id *)(a1 + 32), "offset"), v8 < objc_msgSend(v9, "offset")))
  {
    *a4 = 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3 + 1;
  }

}

__CFString *HAPDiagnosticsSnapshotFormatAsString(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("HAPDiagnosticsSnapshotFormatZip");
  if (a1 == 1)
    v1 = CFSTR("HAPDiagnosticsSnapshotFormatText");
  else
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPDiagnosticsSnapshotFormat %ld"), a1));
  return v1;
}

uint64_t sub_100011768(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned __int8 v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  __CFString *v15;
  NSObject *v16;
  id v17;
  __CFString *v18;
  const char *v19;
  id v20;
  __CFString *v21;
  uint64_t v22;
  int v24;
  NSObject *v25;
  __int16 v26;
  id v27;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[HAPMetadata getSharedInstance](HAPMetadata, "getSharedInstance"));
  v8 = v6;
  if (!a1)
  {
    v17 = sub_10007CCE4(0, v7);
    v10 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v18 = sub_10007CD2C(0);
      v14 = objc_claimAutoreleasedReturnValue(v18);
      v24 = 138543362;
      v25 = v14;
      v19 = "%{public}@### Characteristic has nil properties";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v24, 0xCu);
LABEL_13:

    }
LABEL_14:
    v22 = 0;
    goto LABEL_20;
  }
  if ((a1 & 0xF) == 0)
  {
    v20 = sub_10007CCE4(0, v7);
    v10 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v21 = sub_10007CD2C(0);
      v14 = objc_claimAutoreleasedReturnValue(v21);
      v24 = 138543362;
      v25 = v14;
      v19 = "%{public}@### Characteristic is missing valid properties";
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "getDefaultCharacteristicProperties:", v5));
  v10 = v9;
  if (!v9)
    goto LABEL_19;
  v11 = -[NSObject unsignedIntegerValue](v9, "unsignedIntegerValue");
  if ((a1 & 2) == 0 && (v11 & 2) != 0)
  {
    v13 = sub_10007CCE4(0, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = sub_10007CD2C(0);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v24 = 138543618;
      v25 = v16;
      v26 = 2112;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@### HomeKit Characteristic '%@' does not support secureRead.", (uint8_t *)&v24, 0x16u);

    }
    goto LABEL_13;
  }
  if ((a1 & 0x80) != 0 || (v11 & 0x80) == 0 || (v22 = 0, (a1 & 4) != 0) && a2)
LABEL_19:
    v22 = 1;
LABEL_20:

  return v22;
}

id sub_100012548(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint32_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", a1));
  if (a1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 4;
    do
    {
      if (a1 >= v5)
        v6 = v5;
      else
        v6 = a1;
      v7 = v6 + v3;
      v9 = 0;
      v9 = arc4random();
      v4 += 4;
      objc_msgSend(v2, "appendBytes:length:", &v9, v7);
      v5 += 4;
      v3 -= 4;
    }
    while (v4 < a1);
  }
  return v2;
}

uint64_t sub_1000125E4()
{
  unsigned int bytes;

  bytes = 0;
  if (SecRandomCopyBytes(kSecRandomDefault, 4uLL, &bytes))
    return arc4random();
  else
    return bytes;
}

void sub_1000126A0(id a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("hds"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR(".")));
  v1 = HMFCreateOSLogHandle(v4, HMFHomeKitLoggingSubsystem);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271650;
  qword_100271650 = v2;

}

void sub_100013BB0(uint64_t a1, uint64_t a2)
{
  DataStreamPendingRequest *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  DataStreamPendingRequest *v14;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v3 = -[DataStreamPendingRequest initWithIdentifier:protocol:topic:payload:callback:]([DataStreamPendingRequest alloc], "initWithIdentifier:protocol:topic:payload:callback:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "pendingRequests"));
    objc_msgSend(v4, "addObject:", v3);

    v5 = *(id *)(a1 + 64);
    v7 = sub_10007CCE4((uint64_t)v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = sub_10007CD2C(v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}@DataStream pending the request: %@", (uint8_t *)&v11, 0x16u);

    }
  }
}

id sub_100015E90(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  const __CFString *v9;
  const __CFString *v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = a1;
  v6 = (objc_class *)objc_opt_class(v4, v5);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v3)
    v9 = CFSTR(".");
  else
    v9 = &stru_10023F210;
  if (v3)
    v10 = v3;
  else
    v10 = &stru_10023F210;
  v11 = objc_msgSend(v4, "hash");

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.CoreHAP.%@%@%@.%tu"), v8, v9, v10, v11));
  v13 = objc_retainAutorelease(v12);
  v14 = objc_msgSend(v13, "UTF8String");

  return v14;
}

BOOL sub_100015F64(char a1)
{
  return (a1 & 1) == 0;
}

id sub_100015F70(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v14;

  v5 = a3;
  v6 = v5;
  v7 = 0;
  if (a1 && a2 && v5)
  {
    v8 = a1;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uppercaseString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByAppendingString:", v9));
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataUsingEncoding:", 4, 0, 0, 0, 0, 0, 0, 0, 0)));
    if (CC_SHA512(objc_msgSend(v11, "bytes"), (CC_LONG)objc_msgSend(v11, "length"), (unsigned __int8 *)&v14))
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v14, 4));
    else
      v12 = 0;

    v7 = objc_msgSend(v12, "isEqual:", v8);
  }

  return v7;
}

_UNKNOWN **sub_1000160AC()
{
  return &off_100245630;
}

BOOL sub_1000160B8()
{
  void *v0;
  _BOOL8 v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[HMFProductInfo productInfo](HMFProductInfo, "productInfo"));
  v1 = objc_msgSend(v0, "productVariant") == (id)3;

  return v1;
}

void sub_10001C770(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = *(id *)(a1 + 32);
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = 138543874;
    v12 = v7;
    v13 = 2048;
    v14 = v8;
    v15 = 2048;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Traffic class changed from %lu -> %lu, notifying protocol", (uint8_t *)&v11, 0x20u);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "streamProtocol"));
  objc_msgSend(v10, "evaluateOptionsForSocket:", *(_QWORD *)(a1 + 32));

}

void sub_10001CA60(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "streamProtocol"));
  objc_msgSend(v2, "sendData:socket:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

}

void sub_10001CAEC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001CBD0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "streamProtocol"));
  objc_msgSend(v2, "unregisterSocket:", *(_QWORD *)(a1 + 32));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v3, "socket:didFailWithError:", v4);
  else
    objc_msgSend(v3, "socketDidClose:", v4);

}

void sub_10001CCE0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001CCF4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "socketDidReceiveData:", *(_QWORD *)(a1 + 32));

}

id sub_10001DB34(void *a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  int v24;
  void *v25;
  __int16 v26;
  id v27;

  v7 = a1;
  if ((unint64_t)objc_msgSend(v7, "length") > 2)
  {
    objc_msgSend(v7, "getBytes:length:", a2, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", 1, (char *)objc_msgSend(v7, "length") - 1));

    if ((*a2 & 2) != 0)
    {
      objc_msgSend(v14, "getBytes:length:", a3, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subdataWithRange:", 1, (char *)objc_msgSend(v14, "length") - 1));

      objc_msgSend(v21, "getBytes:length:", a4, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subdataWithRange:", 1, (char *)objc_msgSend(v21, "length") - 1));

      v7 = v22;
      v13 = v7;
    }
    else
    {
      v16 = sub_10007CCE4(0, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = sub_10007CD2C(0);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v20 = *a2;
        v24 = 138543618;
        v25 = v19;
        v26 = 1024;
        LODWORD(v27) = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Unexpected PDU Type in controlfield 0x%02x - expecting a response", (uint8_t *)&v24, 0x12u);

      }
      v13 = 0;
      v7 = v14;
    }
  }
  else
  {
    v9 = sub_10007CCE4(0, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(0);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v24 = 138543618;
      v25 = v12;
      v26 = 2048;
      v27 = objc_msgSend(v7, "length");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Insufficient length %tu - dropping", (uint8_t *)&v24, 0x16u);

    }
    v13 = 0;
  }

  return v13;
}

void sub_10001F024(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("HAPHAPProtocolMessages"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271660;
  qword_100271660 = v2;

}

id sub_10001F5F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetSession");
}

id sub_10001F698(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleAuthExchangeData:withHeader:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_10001F86C(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  id v16;
  uint8_t buf[4];
  void *v18;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
    v5 = objc_opt_respondsToSelector(v4, "authSession:authenticateUUID:token:");

    v6 = *(void **)(a1 + 32);
    if ((v5 & 1) != 0)
    {
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "provisionUUID"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token1"));
      objc_msgSend(v16, "authSession:authenticateUUID:token:", v7, v8, v9);

    }
    else
    {
      v10 = v6;
      v12 = sub_10007CCE4((uint64_t)v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = sub_10007CD2C(v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        *(_DWORD *)buf = 138543362;
        v18 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement authenticateUUID:token1:token2:", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "_reportAuthFailure");
    }
  }
  else
  {
    objc_msgSend(v3, "_reportAuthFailure");
  }
}

id sub_10001FFC8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sendTokenUpdateRequest:", *(_QWORD *)(a1 + 40));
}

void sub_100020378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000203A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000203B8(uint64_t a1)
{

}

void sub_1000203C0(_QWORD *a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), *(id *)(a1[4] + 56));
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 72));
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
}

void sub_100020694(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("HAPAuthSession"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271670;
  qword_100271670 = v2;

}

const __CFString *sub_100020918(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("HAPAuthMethodUnknown");
  else
    return off_100236C70[a1];
}

uint64_t sub_10002093C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 2;
  v2 = 4;
  v3 = 5;
  if ((a1 & 0x10) != 0)
    v3 = 6;
  if ((a1 & 8) == 0)
    v2 = v3;
  if ((a1 & 2) == 0)
    v1 = v2;
  v4 = 1;
  if ((a1 & 5) == 0)
    v4 = v1;
  if (a1)
    return v4;
  else
    return 0;
}

unint64_t sub_10002228C(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  unint64_t result;
  int v5;

  result = 0;
  v5 = -6743;
  switch(a2)
  {
    case 1:
      v5 = 0;
      result = (char)*a1;
      if (a3)
        goto LABEL_8;
      return result;
    case 2:
      v5 = 0;
      result = (__int16)(a1[1] << 8) | (unint64_t)*a1;
      if (a3)
        goto LABEL_8;
      return result;
    case 4:
      v5 = 0;
      result = *(int *)a1;
      goto LABEL_7;
    case 8:
      v5 = 0;
      result = *(_QWORD *)a1;
      if (!a3)
        return result;
      goto LABEL_8;
    default:
LABEL_7:
      if (a3)
LABEL_8:
        *a3 = v5;
      return result;
  }
}

id sub_10002234C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (a1 == (char)a1)
  {
    LOBYTE(v3) = a1;
    v1 = 1;
  }
  else
  {
    v3 = a1;
    v1 = 8;
  }
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v3, v1));
}

uint64_t sub_100022530(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;

  result = 0;
  v5 = -6743;
  switch(a2)
  {
    case 1:
      v5 = 0;
      result = *a1;
      if (a3)
        goto LABEL_8;
      return result;
    case 2:
      v5 = 0;
      result = *(unsigned __int16 *)a1;
      if (a3)
        goto LABEL_8;
      return result;
    case 4:
      v5 = 0;
      result = *(unsigned int *)a1;
      goto LABEL_7;
    case 8:
      v5 = 0;
      result = *(_QWORD *)a1;
      if (!a3)
        return result;
      goto LABEL_8;
    default:
LABEL_7:
      if (a3)
LABEL_8:
        *a3 = v5;
      return result;
  }
}

id sub_1000225E0(unint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;
  char v5;
  char v6;
  char v7;

  if (a1 > 0xFF)
  {
    if (a1 >> 16)
    {
      v3 = a1;
      if (HIDWORD(a1))
      {
        v4 = BYTE4(a1);
        v5 = BYTE5(a1);
        v6 = BYTE6(a1);
        v7 = HIBYTE(a1);
        v1 = 8;
      }
      else
      {
        v1 = 4;
      }
    }
    else
    {
      LOWORD(v3) = a1;
      v1 = 2;
    }
  }
  else
  {
    LOBYTE(v3) = a1;
    v1 = 1;
  }
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v3, v1));
}

id sub_100022878(int a1, unint64_t a2, unint64_t a3, unint64_t *a4, _QWORD *a5)
{
  unint64_t v6;
  void *v10;
  id v11;
  uint64_t Next;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;

  v6 = a2;
  if (a2 >= a3)
  {
    v11 = 0;
    v10 = 0;
LABEL_15:
    *a4 = v6;
    if (v10)
      v15 = v10;
    else
      v15 = v11;
    v16 = v15;
    v17 = 0;
    goto LABEL_19;
  }
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    Next = TLV8GetNext(v6, a3, &v25, &v24, &v23, &v22);
    if ((_DWORD)Next)
      break;
    if (!v24)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hmfErrorWithCode:](NSError, "hmfErrorWithCode:", 3));
      if (!v21)
        goto LABEL_15;
      v17 = v21;
      if (a5)
      {
        v20 = objc_retainAutorelease(v21);
        v17 = v20;
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    if (v25 != a1)
      goto LABEL_15;
    if (v10)
    {
      v13 = v10;
    }
    else
    {
      if (!v11)
      {
        v14 = objc_alloc((Class)NSData);
        v11 = objc_msgSend(v14, "initWithBytesNoCopy:length:freeWhenDone:", v24, v23, 0);
        v10 = 0;
        goto LABEL_11;
      }
      v13 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v11);
      v10 = v13;
    }
    objc_msgSend(v13, "appendBytes:length:");
LABEL_11:
    v6 = v22;
    if (v22 >= a3)
      goto LABEL_15;
  }
  if (a5)
  {
    v19 = sub_100040DDC(Next);
    v20 = (id)objc_claimAutoreleasedReturnValue(v19);
    v17 = 0;
LABEL_25:
    v16 = 0;
    *a5 = v20;
    goto LABEL_19;
  }
  v17 = 0;
LABEL_27:
  v16 = 0;
LABEL_19:

  return v16;
}

uint64_t sub_100022C34(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = TLV8BufferAppendUInt64(a1, 0, a2);
  if (!(_DWORD)result)
    return TLV8BufferAppendUInt64(a1, 6, 1);
  return result;
}

uint64_t sub_100022CCC(void *a1)
{
  id v1;
  id v2;
  char *v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "bytes");
  v3 = (char *)objc_msgSend(v1, "length");

  v6 = 0;
  v7 = 0;
  result = TLV8Get(v2, &v3[(_QWORD)v2], 6, &v7, &v6, 0);
  if (!(_DWORD)result)
  {
    if (v6 != 1)
      return 4294960553;
    if (*v7 != 2)
      return 4294960587;
    if (TLV8Get(v2, &v3[(_QWORD)v2], 7, &v7, &v6, 0))
      return 0;
    if (v6 != 1)
      return 4294960553;
    v5 = *v7 - 1;
    if (v5 > 5)
      return 4294960559;
    else
      return dword_1001DD43C[(char)v5];
  }
  return result;
}

const __CFString *sub_1000242BC(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("response");
  if (a1)
    return v1;
  else
    return CFSTR("request");
}

__CFString *HAPDataStreamTransportCommandAsString(uint64_t a1)
{
  if (a1)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPDataStreamTransportCommand %ld"), a1));
  else
    return CFSTR("HAPDataStreamTransportCommandStartSession");
}

__CFString *HAPDataStreamTransportCommandStatusAsString(unint64_t a1)
{
  if (a1 >= 3)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPDataStreamTransportCommandStatus %ld"), a1));
  else
    return off_100236D18[a1];
}

__CFString *HAPDataStreamTransportProtocolAsString(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("HAPDataStreamTransportProtocolTCP");
  if (a1 == 1)
    v1 = CFSTR("HAPDataStreamTransportProtocolHAP");
  else
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPDataStreamTransportProtocol %ld"), a1));
  return v1;
}

id sub_100026598(__int16 a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v3 = v2;
  if ((a1 & 0x40) != 0)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingString:", CFSTR(": Hidden")));

    v3 = (void *)v6;
    if ((a1 & 1) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a1 & 1) == 0)
  {
    goto LABEL_3;
  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Notify")));

  v3 = (void *)v7;
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Broadcast")));

  v3 = (void *)v8;
  if ((a1 & 2) == 0)
  {
LABEL_5:
    if ((a1 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Read")));

  v3 = (void *)v9;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Write")));

  v3 = (void *)v10;
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": AAD")));

    v3 = (void *)v12;
    if ((a1 & 0x100) == 0)
      return v3;
    goto LABEL_9;
  }
LABEL_16:
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Timed Write")));

  v3 = (void *)v11;
  if ((a1 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((a1 & 0x100) != 0)
  {
LABEL_9:
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": ENC")));

    v3 = (void *)v4;
  }
  return v3;
}

id sub_1000271A4(char a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v3 = v2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_7:
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Hidden")));

    v3 = (void *)v7;
    if ((a1 & 4) == 0)
      return v3;
    goto LABEL_4;
  }
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingString:", CFSTR(": Primary")));

  v3 = (void *)v6;
  if ((a1 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 4) != 0)
  {
LABEL_4:
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(": Configurable")));

    v3 = (void *)v4;
  }
  return v3;
}

void sub_1000286B8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100271678;
  qword_100271678 = (uint64_t)v1;

}

uint64_t sub_100029FA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10002A060(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(id *)(a1 + 32);
    v4 = sub_10007CCE4((uint64_t)v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(v2);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v10 = 138543362;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Received EOF from accessory.", (uint8_t *)&v10, 0xCu);

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 1;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingReads"));
    objc_msgSend(v8, "hmf_enqueueMultiple:", *(_QWORD *)(a1 + 40));

  }
  return objc_msgSend(*(id *)(a1 + 32), "_pumpReadDataIfPossible");
}

id sub_10002A204(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v2 = *(id *)(a1 + 32);
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(_QWORD *)(a1 + 40);
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Received remote close with error: %@", (uint8_t *)&v10, 0x16u);

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 1;
  objc_msgSend(*(id *)(a1 + 32), "setPendingError:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "_pumpReadDataIfPossible");
}

uint64_t sub_10002A3AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10002A500(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10002B5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002B5FC(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v5;
  NSObject *v6;
  id v7;

  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workQueue"));
    dispatch_assert_queue_V2(v6);

    objc_msgSend(v5, "_stopWithError:", v7);
  }

}

void sub_10002B770(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  _BYTE v23[128];

  v3 = a2;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v9 = *(id *)(a1 + 32);
        v11 = sub_10007CCE4((uint64_t)v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = sub_10007CD2C(v9);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          *(_DWORD *)buf = 138543362;
          v22 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{public}@Handling characteristics value updated", buf, 0xCu);

        }
        v15 = *(void **)(a1 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "value"));
        objc_msgSend(v15, "_handleInterruptCharacteristicValue:", v16);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v5);
  }

}

void sub_10002B978(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "transportDidOpen:", *(_QWORD *)(a1 + 32));

}

void sub_10002BA24(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "transportDidClose:", *(_QWORD *)(a1 + 32));

}

void sub_10002BAFC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "transport:didFailWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10002BBD4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "transport:didReceiveRawFrame:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10002C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002C588(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  NSObject *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workQueue"));
    dispatch_assert_queue_V2(v5);

    objc_msgSend(v4, "_handleCompletionWithResponseTuples:", v6);
  }

}

uint64_t sub_10002CE98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10002E11C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "dataStreamSetupOperation:didFailWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10002E218(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "dataStreamSetupOperation:didSucceedWithTransport:sessionEncryption:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10002F218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002F244(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if (objc_msgSend(v3, "conformsToProtocol:", &OBJC_PROTOCOL___DataStreamHAPSetupOperationDelegate))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));

    if (v2)
    {
      objc_msgSend(v2, "dataStreamInitializationSetupOperation:didCompleteSupportReadWithStatus:", *(_QWORD *)(a1 + 32), 0);

    }
  }
  else
  {

  }
}

void sub_10002F2D0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    if (!objc_msgSend(v5, "conformsToProtocol:", &OBJC_PROTOCOL___DataStreamHAPSetupOperationDelegate))
    {
LABEL_5:

      v4 = v7;
      goto LABEL_6;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));

    v4 = v7;
    if (v6)
    {
      objc_msgSend(v6, "dataStreamInitializationSetupOperation:didCompleteSupportReadWithStatus:", v7, a2 != 0);
      v5 = v6;
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_10002F694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002F6C0(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "continueStreamSetupWithResponse:", v5);

}

uint64_t sub_1000304E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

__CFString *HAPStagingNotReadyReasonsAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_14;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_11;
    switch(v3)
    {
      case 1:
        v5 = CFSTR("HAPStagingNotReadyReasonOther");
        break;
      case 4:
        v5 = CFSTR("HAPStagingNotReadyReasonConnectivity");
        break;
      case 2:
        v5 = CFSTR("HAPStagingNotReadyReasonLowBattery");
        break;
      default:
        goto LABEL_11;
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_11:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_14:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

__CFString *HAPUpdateNotReadyReasonsAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (a1)
  {
    v3 = 1;
    v4 = a1;
    do
    {
      if ((v3 & a1) != 0)
      {
        v5 = v3 - 1;
        if ((unint64_t)(v3 - 1) <= 7 && ((0x8Bu >> v5) & 1) != 0)
        {
          v4 &= ~v3;
          objc_msgSend(v2, "addObject:", *(&off_100236F10 + v5));
        }
      }
      v3 *= 2;
    }
    while (v3 - 1 < a1);
    if (v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
      objc_msgSend(v2, "addObject:", v6);

    }
  }
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

void sub_1000321A0(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("hms.transport"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271690;
  qword_100271690 = v2;

}

__CFString *sub_10003D668(unsigned int a1)
{
  if (a1 >= 7)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<unknown status: %d>"), a1));
  else
    return off_100237060[(__int16)a1];
}

__CFString *HAPOperatingStateAsString(unint64_t a1)
{
  if (a1 >= 3)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPOperatingState %ld"), a1));
  else
    return off_100237098[a1];
}

uint64_t sub_10003E000(uint64_t a1, char **a2, void *a3, void *a4, void *a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  size_t v15;
  char *v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  int v35;
  unsigned int v36;

  v36 = 0;
  v8 = a5;
  v10 = objc_opt_class(HAPSecuritySession, v9);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) == 0)
  {
    v12 = 0;
    goto LABEL_17;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_handleLocalPairingIdentityRequestWithStatus:", &v36));
  v12 = v11;
  if (v36)
    goto LABEL_15;
  if (a2)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
    v14 = objc_msgSend(v13, "lengthOfBytesUsingEncoding:", 4);

    if (!v14)
      goto LABEL_18;
    v15 = (size_t)v14 + 1;
    v16 = (char *)malloc_type_calloc(v15, 1uLL, 0x100004077774924uLL);
    if (!v16)
    {
      v35 = -6728;
      goto LABEL_20;
    }
    v17 = v16;
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier")));
    strlcpy(v17, (const char *)objc_msgSend(v18, "UTF8String"), v15);

    *a2 = v17;
  }
  if (!a3)
    goto LABEL_11;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));

  if (!v19)
    goto LABEL_17;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "data"));
  v22 = objc_msgSend(v21, "length");
  v23 = (id)HMFPairingKeyLength;

  if (v22 != v23)
  {
LABEL_18:
    v35 = -6743;
    goto LABEL_20;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));
  v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "data")));
  memcpy(a3, objc_msgSend(v25, "bytes"), (size_t)v22);

LABEL_11:
  if (a4)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "privateKey"));

    if (v26)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "privateKey"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "data"));
      v29 = objc_msgSend(v28, "length");
      v30 = (id)HMFPairingKeyLength;

      if (v29 == v30)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "privateKey"));
        v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "data")));
        memcpy(a4, objc_msgSend(v32, "bytes"), (size_t)v29);

        goto LABEL_15;
      }
      goto LABEL_18;
    }
LABEL_17:
    v35 = -6727;
LABEL_20:
    v36 = v35;
  }
LABEL_15:
  v33 = v36;

  return v33;
}

uint64_t sub_10003E268(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v24;
  unsigned int v25;

  v25 = 0;
  v7 = a4;
  v9 = objc_opt_class(HAPSecuritySession, v8);
  if ((objc_opt_isKindOfClass(v7, v9) & 1) == 0)
  {
    v12 = 0;
    v10 = 0;
    goto LABEL_11;
  }
  v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", a1, a2, 4);
  if (!v10)
  {
    v12 = 0;
    v24 = -6705;
    goto LABEL_15;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_handlePeerPairingIdentityRequestWithIdentifier:status:", v10, &v25));
  v12 = v11;
  if (!v25)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
    v14 = objc_msgSend(v10, "isEqualToString:", v13);

    if ((v14 & 1) == 0)
    {
      v24 = -6748;
      goto LABEL_15;
    }
    if (a3)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));

      if (v15)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "data"));
        v18 = objc_msgSend(v17, "length");
        v19 = (id)HMFPairingKeyLength;

        if (v18 == v19)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "publicKey"));
          v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "data")));
          memcpy(a3, objc_msgSend(v21, "bytes"), (size_t)v18);

          goto LABEL_9;
        }
        v24 = -6743;
LABEL_15:
        v25 = v24;
        goto LABEL_9;
      }
LABEL_11:
      v24 = -6727;
      goto LABEL_15;
    }
  }
LABEL_9:
  v22 = v25;

  return v22;
}

void sub_10003EAC4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 40))
  {
    v2 = *(id *)(a1 + 48);
    v4 = sub_10007CCE4((uint64_t)v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = sub_10007CD2C(v2);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v16 = 138543362;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Handling setup exchange data", (uint8_t *)&v16, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 48), "_processSetupExchangeData:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v8 = *(id *)(a1 + 48);
    v10 = sub_10007CCE4((uint64_t)v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sub_10007CD2C(v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = *(_QWORD *)(a1 + 40);
      v16 = 138543618;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@Invalid setup exchange data: %@", (uint8_t *)&v16, 0x16u);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6705, 0));
    objc_msgSend(*(id *)(a1 + 48), "_closeWithError:", v15);

  }
}

void sub_10003ED28(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  unint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  __CFString *v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;

  v33 = 0;
  v34 = 0;
  v32 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "state") != (id)1)
  {
    v10 = *(id *)(a1 + 32);
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "state");
      if (v16 > 3)
        v17 = CFSTR("unknown");
      else
        v17 = off_100237120[v16];
      *(_DWORD *)buf = 138543618;
      v36 = v15;
      v37 = 2112;
      v38 = (void *)v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to handle setup exchange data in state '%@'", buf, 0x16u);

    }
    goto LABEL_16;
  }
  v2 = *(void **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = v2;
    v5 = sub_10007CCE4((uint64_t)v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = sub_10007CD2C(v3);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v36 = v8;
      v37 = 2112;
      v38 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Closing security session due to setup exchange error: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", *(_QWORD *)(a1 + 40));
    return;
  }
  v18 = PairingSessionExchange(objc_msgSend(v2, "pairingSession"), objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "bytes"), objc_msgSend(*(id *)(a1 + 48), "length"), &v34, &v33, &v32);
  if (!(_DWORD)v18)
  {
    if (v32)
      objc_msgSend(*(id *)(a1 + 32), "_handleSetupExchangeComplete");
    v25 = objc_alloc((Class)NSData);
    v10 = objc_msgSend(v25, "initWithBytesNoCopy:length:", v34, v33);
    if (!objc_msgSend(v10, "length"))
      goto LABEL_17;
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    -[NSObject securitySession:didReceiveSetupExchangeData:](v13, "securitySession:didReceiveSetupExchangeData:", *(_QWORD *)(a1 + 32), v10);
LABEL_16:

LABEL_17:
    return;
  }
  if ((_DWORD)v18 != -6767)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithOSStatus:](NSError, "errorWithOSStatus:", v18));
    v13 = objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Operation Cancelled."), CFSTR("Failed to get the pairing exchange data."), 0, v10));
    v26 = *(id *)(a1 + 32);
    v28 = sub_10007CCE4((uint64_t)v26, v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = sub_10007CD2C(v26);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)buf = 138543618;
      v36 = v31;
      v37 = 2112;
      v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to process exchange data with error: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", v13);
    goto LABEL_16;
  }
  v19 = *(id *)(a1 + 32);
  v21 = sub_10007CCE4((uint64_t)v19, v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    v23 = sub_10007CD2C(v19);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    *(_DWORD *)buf = 138543362;
    v36 = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@Session lookup failed, reset resumeSessionID, and retrying", buf, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "_initializeSetupSession:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setState:", 0);
  objc_msgSend(*(id *)(a1 + 32), "open");
}

void sub_10003F83C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  _BYTE v27[32];

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "pairingSession");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "saltData")));
  v6 = objc_msgSend(v5, "bytes");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "saltData"));
  v8 = objc_msgSend(v7, "length");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "infoData")));
  v10 = objc_msgSend(v9, "bytes");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "infoData"));
  v12 = PairingSessionDeriveKey(v4, v6, v8, v10, objc_msgSend(v11, "length"), 32, v27);

  if (v12)
  {
    v13 = *(id *)(a1 + 32);
    v15 = sub_10007CCE4((uint64_t)v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = sub_10007CD2C(v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
      v21 = 138543874;
      v22 = v18;
      v23 = 2112;
      v24 = v19;
      v25 = 2048;
      v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to derive addional key '%@' with error: %ld", (uint8_t *)&v21, 0x20u);

    }
  }
  else
  {
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27, 32));
    v20 = *(void **)(a1 + 40);
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v13, v16);
  }

}

id sub_10003FC3C(uint64_t a1)
{
  uint64_t v2;
  id result;

  v2 = mach_absolute_time();
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = UpTicksToMilliseconds(v2);
  result = objc_msgSend(*(id *)(a1 + 32), "role");
  if (result == (id)1)
    return objc_msgSend(*(id *)(a1 + 32), "_notifyOpening");
  if (!result)
    return _objc_msgSend(*(id *)(a1 + 32), "_initiateClientSessionSetupExchange");
  return result;
}

id sub_10003FE10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", 0);
}

id sub_10003FEB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", *(_QWORD *)(a1 + 40));
}

void sub_10003FFD8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10004014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100040164(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100040174(uint64_t a1)
{

}

void sub_10004017C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "encryption"));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encrypt:additionalAuthenticatedData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
  else if (*(_QWORD *)(a1 + 64))
  {
    **(_QWORD **)(a1 + 64) = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6709, 0));
  }
}

void sub_100040490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000404B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "encryption"));
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v9 = 0;
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "decrypt:additionalAuthenticatedData:error:", v3, v4, &v9));
    v6 = v9;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v5;

    if (v6 && objc_msgSend(v6, "code") != (id)-6764)
    {
      if (*(_QWORD *)(a1 + 64))
        **(_QWORD **)(a1 + 64) = objc_retainAutorelease(v6);
      objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", v6);
    }

  }
  else if (*(_QWORD *)(a1 + 64))
  {
    **(_QWORD **)(a1 + 64) = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), -6709, 0));
  }
}

void sub_1000405F4(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("Security.Session"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1002716A0;
  qword_1002716A0 = v2;

}

id sub_100040DDC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _OWORD *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _OWORD v21[6];
  int v22;

  if (!(_DWORD)a1)
    return 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  DebugGetErrorString(a1, v21, 100);
  v19[0] = NSLocalizedDescriptionKey;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Failed with OSStatus code %d (%s)"), a1, v21));
  v20[0] = v2;
  v19[1] = NSUnderlyingErrorKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithOSStatus:](NSError, "errorWithOSStatus:", a1));
  v20[1] = v3;
  v4 = 2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));

  if ((int)a1 > -6761)
  {
    switch(a1)
    {
      case 0xFFFFE598:
      case 0xFFFFE599:
      case 0xFFFFE59A:
      case 0xFFFFE59F:
      case 0xFFFFE5A0:
      case 0xFFFFE5BB:
      case 0xFFFFE5BC:
      case 0xFFFFE5BD:
      case 0xFFFFE5BE:
        v4 = 33;
        break;
      case 0xFFFFE59B:
      case 0xFFFFE59C:
      case 0xFFFFE59D:
      case 0xFFFFE5A3:
      case 0xFFFFE5A5:
      case 0xFFFFE5A6:
      case 0xFFFFE5A7:
      case 0xFFFFE5A8:
      case 0xFFFFE5AA:
      case 0xFFFFE5AB:
      case 0xFFFFE5AC:
      case 0xFFFFE5AD:
      case 0xFFFFE5AE:
      case 0xFFFFE5AF:
      case 0xFFFFE5B0:
      case 0xFFFFE5B1:
      case 0xFFFFE5B4:
      case 0xFFFFE5B5:
      case 0xFFFFE5B6:
      case 0xFFFFE5B7:
      case 0xFFFFE5B8:
      case 0xFFFFE5B9:
      case 0xFFFFE5BA:
      case 0xFFFFE5BF:
      case 0xFFFFE5C0:
      case 0xFFFFE5C1:
      case 0xFFFFE5C2:
      case 0xFFFFE5C3:
      case 0xFFFFE5C5:
      case 0xFFFFE5C6:
      case 0xFFFFE5C8:
      case 0xFFFFE5C9:
      case 0xFFFFE5CD:
      case 0xFFFFE5CE:
      case 0xFFFFE5D1:
        goto LABEL_15;
      case 0xFFFFE59E:
        v4 = 37;
        break;
      case 0xFFFFE5A1:
      case 0xFFFFE5A2:
      case 0xFFFFE5A9:
        v4 = 44;
        break;
      case 0xFFFFE5A4:
      case 0xFFFFE5B3:
      case 0xFFFFE5C4:
      case 0xFFFFE5C7:
      case 0xFFFFE5CC:
        goto LABEL_6;
      case 0xFFFFE5B2:
        v4 = 32;
        break;
      case 0xFFFFE5CA:
      case 0xFFFFE5CF:
      case 0xFFFFE5D0:
        break;
      case 0xFFFFE5CB:
        goto LABEL_14;
      case 0xFFFFE5D2:
        v4 = 4;
        break;
      default:
        if ((a1 - 35) > 0x1E || ((1 << (a1 - 35)) & 0x42010001) == 0)
          goto LABEL_15;
LABEL_14:
        v4 = 30;
        break;
    }
  }
  else
  {
    switch((_DWORD)a1)
    {
      case 0xFFFEEA18:
        v4 = 43;
        break;
      case 0xFFFFE58B:
        v4 = 41;
        break;
      case 0xFFFFE590:
LABEL_6:
        v4 = 42;
        break;
      default:
LABEL_15:
        if ((a1 - 200400) >= 0x64)
        {
          if ((a1 - 200500) >= 0x64)
          {
            if ((a1 + 25298) <= 0xFFFFFFFD)
            {
              v8 = sub_10007CCE4(0, v6);
              v9 = objc_claimAutoreleasedReturnValue(v8);
              if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              {
                v10 = sub_10007CD2C(0);
                v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
                *(_DWORD *)buf = 138543874;
                v14 = v11;
                v15 = 1024;
                v16 = a1;
                v17 = 2080;
                v18 = v21;
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Treating OSStatus %d (%s) as Generic error", buf, 0x1Cu);

              }
            }
            v4 = 10;
          }
          else
          {
            v4 = 46;
          }
        }
        else
        {
          v4 = 45;
        }
        break;
    }
  }
  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("DKErrorDomain"), v4, v5));

  return v12;
}

uint64_t sub_10004228C(uint64_t result)
{
  uint64_t v1;

  result = result;
  v1 = 3;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
    case 6:
      return v1;
    case 2:
      return 5;
    case 3:
      return 16;
    case 4:
      return 9;
    case 5:
      return 17;
    default:
      return 1;
  }
}

__CFString *HAPOperatingStateAbnormalReasonsAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_14;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_11;
    switch(v3)
    {
      case 1:
        v5 = CFSTR("HAPOperatingStateAbnormalReasonOther");
        break;
      case 4:
        v5 = CFSTR("HAPOperatingStateAbnormalReasonHighTemperature");
        break;
      case 2:
        v5 = CFSTR("HAPOperatingStateAbnormalReasonLowTemperature");
        break;
      default:
        goto LABEL_11;
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_11:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_14:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

id sub_1000437C4(uint64_t a1)
{
  id result;
  void *v3;

  result = objc_msgSend(*(id *)(a1 + 32), "isOpen");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setOpen:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "controlOutputStreamDidOpen:", *(_QWORD *)(a1 + 32));

    return _objc_msgSend(*(id *)(a1 + 32), "sendNextPayloadFragment");
  }
  return result;
}

id sub_100043890(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_closeWithError:", 0);
}

void sub_100043A94(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100043AC4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && (objc_msgSend(WeakRetained, "isCancelled") & 1) == 0)
  {
    v4 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100043B54;
    v5[3] = &unk_100237150;
    v6 = v3;
    objc_msgSend(v4, "_sendNextPayloadFragmentWithCompletionHandler:", v5);

  }
}

id sub_100043B54(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "cancelWithError:", a2);
  else
    return objc_msgSend(v2, "finish");
}

void sub_100043B68(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100043C08;
  v6[3] = &unk_100236AD0;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = WeakRetained;
  v8 = v4;
  v5 = WeakRetained;
  dispatch_async(v3, v6);

}

void sub_100043C08(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  v3 = *(void **)(a1 + 40);
  if (v2)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    objc_msgSend(v3, "_closeWithError:", v6);

  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 40), "remainingControlPayloadLength");
    v5 = *(void **)(a1 + 40);
    if (v4)
      _objc_msgSend(v5, "sendNextPayloadFragment");
    else
      _objc_msgSend(v5, "_complete");
  }
}

void sub_100043D44(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;

  v2 = *(void **)(a1 + 32);
  v24 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_nextPacketWithMaximumLength:error:", objc_msgSend(v2, "mtuLength"), &v24));
  v5 = v24;
  if (v3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    if (v7)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100043FD4;
      v22[3] = &unk_1002371A0;
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(id *)(a1 + 40);
      v22[4] = *(_QWORD *)(a1 + 32);
      v23 = v9;
      objc_msgSend(v7, "controlOutputStream:didReceiveRequestToSendControlPacket:completionHandler:", v8, v3, v22);
      v10 = v23;
    }
    else
    {
      v17 = sub_10007CCE4(0, v6);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = sub_10007CD2C(0);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
        *(_DWORD *)buf = 138543618;
        v26 = v20;
        v27 = 2112;
        v28 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@[%@] The stream delegate is missing, closing session", buf, 0x16u);

      }
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_13;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 3, CFSTR("Operation not supported."), CFSTR("The stream delegate is missing."), 0, 0));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

LABEL_13:
    goto LABEL_14;
  }
  v11 = sub_10007CCE4(0, v4);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = sub_10007CD2C(0);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortDescription"));
    *(_DWORD *)buf = 138543874;
    v26 = v14;
    v27 = 2112;
    v28 = v15;
    v29 = 2112;
    v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@[%@] Failed to get the next control packet with error: %@", buf, 0x20u);

  }
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    (*(void (**)(uint64_t, id))(v16 + 16))(v16, v5);
LABEL_14:

}

void sub_100043FD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100044084;
    v5[3] = &unk_100236E80;
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    dispatch_async(v4, v5);

  }
}

uint64_t sub_100044084(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

DataStreamBulkSendPendingSessionContext *__cdecl sub_10004469C(id a1, id a2)
{
  id v2;
  id v3;
  id v4;
  DataStreamBulkSendPendingSessionContext *v5;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)HMFTimer), "initWithTimeInterval:options:", 0, 5.0);
  v4 = objc_msgSend(objc_alloc((Class)HMFTimer), "initWithTimeInterval:options:", 0, 10.0);
  v5 = -[DataStreamBulkSendPendingSessionContext initWithSessionStartCallback:handleOpenRequestResponseTimer:sendCloseEventTimer:]([DataStreamBulkSendPendingSessionContext alloc], "initWithSessionStartCallback:handleOpenRequestResponseTimer:sendCloseEventTimer:", v2, v3, v4);

  return v5;
}

id sub_100045864(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_startSessionCandidate:queue:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_100045914(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_rejectSessionCandidate:status:", *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

id sub_1000459F8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cancelSessionWithIdentifier:reason:hadReceivedEof:completion:", *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 58), *(_QWORD *)(a1 + 48));
}

void sub_100045FE0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  __CFString *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;

  v3 = a2;
  v4 = *(id *)(a1 + 32);
  v6 = sub_10007CCE4((uint64_t)v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_10007CD2C(v4);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v16 = 138543618;
      v17 = v10;
      v18 = 2112;
      v19 = v3;
      v11 = "%{public}@Failed to send open response: %@";
      v12 = v8;
      v13 = OS_LOG_TYPE_ERROR;
      v14 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v16, v14);

    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v15 = sub_10007CD2C(v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v16 = 138543362;
    v17 = v10;
    v11 = "%{public}@Sent open response";
    v12 = v8;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 12;
    goto LABEL_6;
  }

}

uint64_t sub_100046358(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_10004752C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_openSessionForFileType:reason:metadata:queue:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

void sub_100047918(uint64_t a1, void *a2, void *a3, void *a4)
{
  DataStreamBulkSendSession *v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  _BOOL4 v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  __CFString *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  DataStreamBulkSendSession *v37;
  DataStreamBulkSendSession *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  __CFString *v45;
  void *v46;
  DataStreamBulkSendSession *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  DataStreamBulkSendOpenSessionResult *v53;
  void *v54;
  id v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  __CFString *v59;
  void *v60;
  __CFString *v61;
  void *v62;
  void *v63;
  void *v64;
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  DataStreamBulkSendSession *v70;
  __int16 v71;
  void *v72;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  dispatch_assert_queue_V2(v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingBulkSendSessionContextBySessionIdentifier"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", *(_QWORD *)(a1 + 40)));

  v13 = *(id *)(a1 + 32);
  v15 = sub_10007CCE4((uint64_t)v13, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
  if (v12)
  {
    if (v17)
    {
      v18 = sub_10007CD2C(v13);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v66 = v19;
      v67 = 2112;
      v68 = v20;
      v69 = 2112;
      v70 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%{public}@Received bulk send open response for session with identifier: %@ error: %@", buf, 0x20u);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingBulkSendSessionContextBySessionIdentifier"));
    objc_msgSend(v21, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

    if (objc_msgSend(v12, "shouldCloseSessionWithTimeoutReason"))
    {
      v22 = *(id *)(a1 + 32);
      v24 = sub_10007CCE4((uint64_t)v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        v26 = sub_10007CD2C(v22);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v28 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v66 = v27;
        v67 = 2112;
        v68 = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%{public}@Session with identifier: %@ has timed out, sending close event to accessory", buf, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 32), "_sendCloseMessageWithIdentifier:reason:completion:", *(_QWORD *)(a1 + 40), 6, &stru_1002372C0);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("DKErrorDomain"), 12, 0));
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

    }
    else if (v7)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "hmf_numberForKey:", CFSTR("status")));
      v34 = v33;
      if (v33)
      {
        v64 = v33;
        v35 = (unsigned __int16)objc_msgSend(v33, "integerValue");
        if (v35)
        {
          v36 = v35;
          v37 = (DataStreamBulkSendSession *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hmf_numberForKey:", CFSTR("status")));
          v38 = v37;
          if (v37)
          {
            if (-[DataStreamBulkSendSession integerValue](v37, "integerValue") == (id)2)
              v39 = 29;
            else
              v39 = 11;
            if (-[DataStreamBulkSendSession integerValue](v38, "integerValue") == (id)9)
              v40 = 3;
            else
              v40 = v39;
          }
          else
          {
            v40 = 11;
          }
          v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("DKErrorDomain"), v40, 0));
          v55 = *(id *)(a1 + 32);
          v57 = sub_10007CCE4((uint64_t)v55, v56);
          v58 = objc_claimAutoreleasedReturnValue(v57);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            v59 = sub_10007CD2C(v55);
            v63 = v54;
            v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
            v61 = sub_10003D668(v36);
            v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            *(_DWORD *)buf = 138544130;
            v66 = v60;
            v67 = 2112;
            v68 = v62;
            v69 = 2112;
            v70 = v38;
            v71 = 2112;
            v72 = v63;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%{public}@Received non-success status in header: %@ payload status: %@. Mapped to error: %@", buf, 0x2Au);

            v54 = v63;
          }

          (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        }
        else
        {
          v47 = [DataStreamBulkSendSession alloc];
          v48 = *(void **)(a1 + 32);
          v49 = *(_QWORD *)(a1 + 40);
          v50 = *(_QWORD *)(a1 + 48);
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "logIdentifier"));
          v38 = -[DataStreamBulkSendSession initWithProtocol:sessionIdentifier:queue:logIdentifier:](v47, "initWithProtocol:sessionIdentifier:queue:logIdentifier:", v48, v49, v50, v51);

          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeBulkSendSessions"));
          objc_msgSend(v52, "setObject:forKey:", v38, *(_QWORD *)(a1 + 40));

          v53 = -[DataStreamBulkSendOpenSessionResult initWithSession:payload:]([DataStreamBulkSendOpenSessionResult alloc], "initWithSession:payload:", v38, v9);
          (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

        }
        v34 = v64;
      }
      else
      {
        v41 = *(id *)(a1 + 32);
        v43 = sub_10007CCE4((uint64_t)v41, v42);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = sub_10007CD2C(v41);
          v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          *(_DWORD *)buf = 138543362;
          v66 = v46;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}@Could not find a status in header", buf, 0xCu);

        }
        v38 = (DataStreamBulkSendSession *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("DKErrorDomain"), 24, 0));
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }

    }
  }
  else
  {
    if (v17)
    {
      v30 = sub_10007CD2C(v13);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v32 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v66 = v31;
      v67 = 2112;
      v68 = v32;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%{public}@Could not find pending bulk send session context for session identifier: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_sendCloseMessageWithIdentifier:reason:completion:", *(_QWORD *)(a1 + 40), 6, &stru_1002372A0);
  }

}

void sub_100049A6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100049A90(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browser"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accessoryCache"));
  objc_msgSend(v1, "saveCacheToDisk:", v2);

}

void sub_10004A8A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;

  v3 = a2;
  v4 = *(id *)(a1 + 32);
  v6 = sub_10007CCE4((uint64_t)v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = sub_10007CD2C(v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v13 = 138543618;
    v14 = v9;
    v15 = 2112;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Removed accessory server that its pairing was cancelled post pair-setup with error %@", (uint8_t *)&v13, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 32), "setPendingRemovePairing:", 2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
  v11 = objc_msgSend(v10, "isPerformingGeneralScan");

  if ((v11 & 1) == 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
    objc_msgSend(v12, "stopDiscoveringAccessoryServers");

  }
}

uint64_t sub_10004A9D0(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_10004AA84(uint64_t a1)
{
  id *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  id v13;
  void *v14;
  __CFString *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  _QWORD v26[4];
  _QWORD *v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id location;
  uint8_t buf[4];
  id v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  uint64_t v37;

  v2 = (id *)(a1 + 32);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10004AE34;
  v29[3] = &unk_100237338;
  objc_copyWeak(&v30, &location);
  v3 = objc_retainBlock(v29);
  if ((objc_msgSend(*v2, "isPaired") & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredAccessoryCharacteriticsPendingRead"));
      objc_msgSend(v4, "addObjectsFromArray:", *(_QWORD *)(a1 + 40));

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveryContext"));
    v6 = objc_msgSend(v5, "isDiscovering");

    v7 = *(void **)(a1 + 32);
    if (v6)
    {
      v8 = v7;
      v10 = sub_10007CCE4((uint64_t)v8, v9);
      v11 = (id)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = sub_10007CD2C(v8);
        v13 = (id)objc_claimAutoreleasedReturnValue(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveryContext"));
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v14, "discoveryType")));
        v16 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        v33 = v13;
        v34 = 2112;
        v35 = v15;
        v36 = 2112;
        v37 = v16;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}@Discovering in progress for type: %@. Pending characteristic types to read: %@", buf, 0x20u);

      }
    }
    else
    {
      v24 = objc_msgSend(v7, "connectReason");
      v25 = *(void **)(a1 + 32);
      if (v24 == 2)
      {
        objc_msgSend(*(id *)(a1 + 32), "setHasBeenDiscovered:", 1);
        objc_msgSend(*(id *)(a1 + 32), "_discoverWithType:completionHandler:", 3, 0);
      }
      else
      {
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10004AFC8;
        v26[3] = &unk_100237388;
        objc_copyWeak(&v28, &location);
        v27 = v3;
        objc_msgSend(v25, "_discoverWithType:completionHandler:", 2, v26);

        objc_destroyWeak(&v28);
      }
    }
  }
  else
  {
    v17 = *(id *)(a1 + 32);
    v19 = sub_10007CCE4((uint64_t)v17, v18);
    v20 = (id)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = sub_10007CD2C(v17);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      *(_DWORD *)buf = 138543618;
      v33 = v22;
      v34 = 2112;
      v35 = CFSTR("Discovery on an unpaired accessory is not allowed");
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@%@", buf, 0x16u);

    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 3, CFSTR("Discovery on an unpaired accessory is not allowed"), 0, 0, 0));
    ((void (*)(_QWORD *, _QWORD, void *))v3[2])(v3, 0, v23);

  }
  objc_destroyWeak(&v30);
  objc_destroyWeak(&location);
}

void sub_10004ADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004AE34(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  char v10;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "pendingRemovePairing") == (id)1)
  {
    objc_msgSend(WeakRetained, "_removePairingOfAccessoryServerCancelledMidPairing");
  }
  else
  {
    objc_msgSend(WeakRetained, "setHasBeenDiscovered:", v5 == 0);
    if (objc_msgSend(WeakRetained, "_delegateRespondsToSelector:", "accessoryServer:didDiscoverAccessories:transaction:error:"))
    {
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegateQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10004AF20;
      block[3] = &unk_100236BE0;
      v10 = a2;
      block[4] = WeakRetained;
      v9 = v5;
      dispatch_async(v7, block);

    }
  }

}

void sub_10004AF20(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v2, "accessoryServer:didDiscoverAccessories:transaction:error:", *(_QWORD *)(a1 + 32), 0, 0, *(_QWORD *)(a1 + 40));

  }
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accessories"));
  v5 = objc_msgSend(v4, "copy");
  objc_msgSend(v6, "accessoryServer:didDiscoverAccessories:transaction:error:", v3, v5, 0, *(_QWORD *)(a1 + 40));

}

void sub_10004AFC8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 1, CFSTR("Discovery failed"), 0, 0, v3));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10004B0E8;
    v6[3] = &unk_100237388;
    objc_copyWeak(&v8, (id *)(a1 + 40));
    v7 = *(id *)(a1 + 32);
    objc_msgSend(WeakRetained, "_discoverWithType:completionHandler:", 0, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_10004B0D4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004B0E8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 1, CFSTR("Discovery failed"), 0, 0, v3));
    (*(void (**)(_QWORD, id, void *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(WeakRetained, "isIncompatibleUpdate"), v5);

  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004B218;
    v7[3] = &unk_100237360;
    objc_copyWeak(&v10, (id *)(a1 + 40));
    v6 = *(id *)(a1 + 32);
    v8 = 0;
    v9 = v6;
    objc_msgSend(WeakRetained, "_readPendingDiscoveredCharacteritiscTypesWithCompletion:", v7);

    objc_destroyWeak(&v10);
  }

}

void sub_10004B204(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004B218(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "primaryAccessory"));
  objc_msgSend(v2, "updateForAccessoryInformationService");

  (*(void (**)(_QWORD, id, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(WeakRetained, "isIncompatibleUpdate"), *(_QWORD *)(a1 + 32));
}

id sub_10004B624(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "removeObject:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 32), "count");
  if (!result)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  return result;
}

void sub_10004B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004B95C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v19[8];

  v18 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v4, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v6 = v5;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "userInfo"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  v10 = objc_opt_class(NSError, v9);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
    v11 = v8;
  else
    v11 = 0;
  v12 = v11;

  if (!v12)
    v8 = v18;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004BAD8;
  v19[3] = &unk_1002373D8;
  v13 = *(_QWORD *)(a1 + 56);
  v19[4] = WeakRetained;
  v19[6] = v13;
  v19[7] = v6;
  v14 = v8;
  v19[5] = v14;
  sub_10004BAD8((uint64_t)v19);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "discoveryContext"));
  objc_msgSend(v15, "setDiscovering:", 0);

  v16 = objc_retainBlock(*(id *)(a1 + 40));
  v17 = v16;
  if (v16)
    (*((void (**)(id, id))v16 + 2))(v16, v18);

  objc_msgSend(WeakRetained, "incrementHAPBTLEMetricsDiscoveryCount");
}

void sub_10004BAD8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48)));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v11 = objc_msgSend(*(id *)(a1 + 40), "code");
      v12 = 138544386;
      v13 = v7;
      v14 = 2112;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Discovered BTLE accessory with type: %{key:discoveryType}@,                                              %{key:duration}@, error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v12, 0x34u);

    }
  }

}

void sub_10004BC38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  __CFString *v20;
  void *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  id v33;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v5 = v4;
    v7 = sub_10007CCE4((uint64_t)v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_10007CD2C(v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48)));
      *(_DWORD *)buf = 138543874;
      v29 = v10;
      v30 = 2112;
      v31 = v11;
      v32 = 2112;
      v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to connect to the accessory during discovery type: %@ with error: %@", buf, 0x20u);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "completionHandler"));
    if (v12)
    {
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10004BEE4;
      v25[3] = &unk_1002369C8;
      v26 = v3;
      v27 = v12;
      dispatch_async(v13, v25);

    }
  }
  else
  {
    objc_msgSend(v4, "setDiscoveryContext:", *(_QWORD *)(a1 + 40));
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(id *)(a1 + 32);
    v17 = sub_10007CCE4((uint64_t)v15, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    if (v14 == 3)
    {
      if (v19)
      {
        v20 = sub_10007CD2C(v15);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        *(_DWORD *)buf = 138543362;
        v29 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%{public}@Ack-ed accessory notification", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "_cancelDiscoveryWithError:", 0);
      objc_msgSend(*(id *)(a1 + 32), "disconnectWithCompletionHandler:", 0);
    }
    else
    {
      if (v19)
      {
        v22 = sub_10007CD2C(v15);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v29 = v23;
        v30 = 2048;
        v31 = v24;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%{public}@Starting attribute database discovery type: %tu", buf, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 32), "_discoverServices");
    }
  }

}

void sub_10004BEE4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 8, CFSTR("Discovery failed."), CFSTR("Failed to connect."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_10004C36C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10004C4B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "discoveryRetries")));
      v9 = 138543618;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Rediscovering BTLE accessory with retries: %{key:retries}@", (uint8_t *)&v9, 0x16u);

    }
  }

}

uint64_t sub_10004D218(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10004EAB8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "UUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("E604E95D-A759-4817-87D3-AA005083A0D1")));
  if ((objc_msgSend(v2, "isEqual:", v3) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "UUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("00000051-0000-1000-8000-4D69736D6574")));
    v4 = (uint64_t)objc_msgSend(v5, "isEqual:", v6);

  }
  return v4;
}

id sub_10004FC48(void *a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "UUID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("000000A5-0000-1000-8000-4D69736D6574")));
  v3 = objc_msgSend(v1, "isEqual:", v2);

  return v3;
}

id sub_10004FE68(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v9;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));

  v9 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "reverseTransformedValue:format:error:", v5, 2, &v9));
  v7 = v9;

  if (a2 && !v6)
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Invalid Characteristic Instance ID value."), 0, 0, v7));

  return v6;
}

id sub_1000500F4(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v9;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "value"));

  v9 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "reverseTransformedValue:format:error:", v5, 2, &v9));
  v7 = v9;

  if (a2 && !v6)
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Invalid Service Instance ID value."), 0, 0, v7));

  return v6;
}

void sub_100050D28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  __CFString *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;

  v5 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  if (v7)
  {
    v9 = v8;
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)buf = 138543618;
      v32 = v14;
      v33 = 2112;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get signature from characteristic with error: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_handleReadCharacteristicSignature:error:", *(_QWORD *)(a1 + 40), v7);
  }
  else
  {
    v30 = 0;
    v15 = objc_msgSend((id)objc_opt_class(v8, v6), "parseSignatureResponse:error:", v5, &v30);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = v30;
    v18 = *(void **)(a1 + 32);
    if (v16)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "discoveryContext"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "characteristicSignatures"));
      objc_msgSend(v20, "setObject:forKey:", v16, *(_QWORD *)(a1 + 40));

      v21 = *(void **)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v23 = 0;
    }
    else
    {
      v24 = v18;
      v26 = sub_10007CCE4((uint64_t)v24, v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = sub_10007CD2C(v24);
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        *(_DWORD *)buf = 138543618;
        v32 = v29;
        v33 = 2112;
        v34 = v17;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic signature response with error: %@", buf, 0x16u);

      }
      v21 = *(void **)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v23 = v17;
    }
    objc_msgSend(v21, "_handleReadCharacteristicSignature:error:", v22, v23);

  }
}

void sub_100051B3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  id v30;
  __CFString *v31;
  void *v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;

  v5 = a2;
  v7 = a3;
  if (v7 && *(_QWORD *)(a1 + 32))
  {
    v8 = *(id *)(a1 + 40);
    v10 = sub_10007CCE4((uint64_t)v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sub_10007CD2C(v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      *(_DWORD *)buf = 138543618;
      v35 = v13;
      v36 = 2112;
      v37 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to get signature from service with error: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "_handleReadServiceSignature:error:", *(_QWORD *)(a1 + 32), v7);
  }
  else
  {
    v14 = (void *)objc_opt_class(*(_QWORD *)(a1 + 40), v6);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v33 = 0;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "parseServiceSignatureResponse:serviceInstanceID:serviceType:error:", v5, v15, v16, &v33));
    v18 = v33;
    if (v17 || !*(_QWORD *)(a1 + 32))
    {
      v19 = *(id *)(a1 + 40);
      v21 = sub_10007CCE4((uint64_t)v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v23 = sub_10007CD2C(v19);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "description"));
        *(_DWORD *)buf = 138543618;
        v35 = v24;
        v36 = 2112;
        v37 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%{public}@%@", buf, 0x16u);

      }
      v26 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "discoveryContext"));
      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "serviceSignatures"));
      -[NSObject setObject:forKey:](v27, "setObject:forKey:", v17, *(_QWORD *)(a1 + 32));
      v28 = 0;
    }
    else
    {
      v26 = *(id *)(a1 + 40);
      v30 = sub_10007CCE4((uint64_t)v26, v29);
      v27 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v31 = sub_10007CD2C(v26);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        *(_DWORD *)buf = 138543618;
        v35 = v32;
        v36 = 2112;
        v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse service signature response with error: %@", buf, 0x16u);

      }
      v28 = v18;
    }

    objc_msgSend(*(id *)(a1 + 40), "_handleReadServiceSignature:error:", *(_QWORD *)(a1 + 32), v28);
  }

}

uint64_t sub_1000528EC(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v11;
  unsigned __int8 v12;
  __int16 v13;
  unsigned __int8 v14;
  unsigned __int16 v15;

  v5 = a1;
  if ((unint64_t)objc_msgSend(v5, "length") > 6)
  {
    if (!a2)
      goto LABEL_11;
    objc_msgSend(v5, "getBytes:length:", &v11, 7);
    *(_BYTE *)a2 = v11;
    v7 = v12;
    *(_BYTE *)(a2 + 1) = v12;
    *(_WORD *)(a2 + 2) = v13;
    v8 = v14;
    *(_BYTE *)(a2 + 4) = v14;
    v9 = v15;
    *(_WORD *)(a2 + 6) = v15;
    if (!v7 && v8 == 1 && !v9)
    {
LABEL_11:
      v6 = 1;
      goto LABEL_12;
    }
    if (a3)
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Invalid characteristic format descriptor value."), 0, 0, 0));
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_12;
  }
  v6 = 0;
  *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Invalid characteristic format descriptor value length."), 0, 0, 0));
LABEL_12:

  return v6;
}

uint64_t sub_100052A00(unsigned __int8 a1, _QWORD *a2, _QWORD *a3)
{
  char v4;
  void *v5;

  v4 = a1 - 1;
  if ((a1 - 1) < 0x1Bu && ((0x50AAAA9u >> v4) & 1) != 0)
  {
    if (a2)
      *a2 = qword_1001DD508[v4];
    return 1;
  }
  else
  {
    if (a3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid characteristic format type, %u"), a1));
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v5, 0, 0, 0));

    }
    return 0;
  }
}

uint64_t sub_100052AC0(int a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  void *v6;

  if (HIWORD(a1) > 0x2730u)
  {
    switch(HIWORD(a1))
    {
      case 0x2731u:
        v4 = 5;
        if (!a2)
          return 1;
        break;
      case 0x2763u:
        v4 = 2;
        if (!a2)
          return 1;
        break;
      case 0x27ADu:
        v4 = 4;
        if (!a2)
          return 1;
        break;
      default:
        goto LABEL_21;
    }
LABEL_19:
    *a2 = v4;
    return 1;
  }
  switch(HIWORD(a1))
  {
    case 0x2700u:
      v4 = 0;
      if (!a2)
        return 1;
      goto LABEL_19;
    case 0x2703u:
      v4 = 1;
      if (!a2)
        return 1;
      goto LABEL_19;
    case 0x272Fu:
      v4 = 3;
      if (!a2)
        return 1;
      goto LABEL_19;
  }
LABEL_21:
  if (a3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid characteristic unit type, %04x"), HIWORD(a1)));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v6, 0, 0, 0));

  }
  return 0;
}

BOOL sub_100052BE4(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  __CFString *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  NSObject *v29;
  __CFString *v30;
  void *v31;
  id v32;
  NSObject *v33;
  __CFString *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;

  v7 = a1;
  v8 = a3;
  if (!objc_msgSend(v7, "length") || (objc_msgSend(v7, "length") & 1) != 0)
  {
    if (a4)
    {
      v12 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("The characteristic valid range value length must be a multiple of 2."), 0, 0, 0));
      goto LABEL_9;
    }
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  if ((unint64_t)(a2 - 12) < 4 || a2 == 9)
  {
    if (a4)
    {
      v9 = sub_1000741FC(a2);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Characteristics with format type '%@' do not support valid ranges"), v10));

      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v11, 0, 0, 0));
    }
    goto LABEL_8;
  }
  v14 = (unint64_t)objc_msgSend(v7, "length") >> 1;
  v15 = (unint64_t)objc_msgSend(v7, "length") >> 1;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", 0, v14));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", v14, v15));
  v37 = a2 - 11;
  if ((unint64_t)(a2 - 11) >= 3)
    v18 = a2;
  else
    v18 = 2;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
  v40 = 0;
  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "reverseTransformedValue:format:error:", v16, v18, &v40));
  v21 = v40;

  v38 = (void *)v20;
  if (v20)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
    v39 = v21;
    v36 = v17;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "reverseTransformedValue:format:error:", v17, v18, &v39));
    v25 = v39;

    v12 = v24 != 0;
    if (v24)
    {
      v27 = v38;
      if (v37 > 2)
      {
        objc_msgSend(v8, "setMinimumValue:", v38);
        objc_msgSend(v8, "setMaximumValue:", v24);
      }
      else
      {
        if ((uint64_t)objc_msgSend(v38, "longLongValue") >= 1)
          objc_msgSend(v8, "setMinLength:", v38);
        objc_msgSend(v8, "setMaxLength:", v24);
      }
    }
    else
    {
      v32 = sub_10007CCE4(0, v26);
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = sub_10007CD2C(0);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        *(_DWORD *)buf = 138543618;
        v42 = v35;
        v43 = 2112;
        v44 = v25;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform upper value with error: %@", buf, 0x16u);

      }
      v17 = v36;
      v27 = v38;
      if (a4)
        *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to parse upper value"), 0, 0, v25));
    }

  }
  else
  {
    v28 = sub_10007CCE4(0, v22);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = sub_10007CD2C(0);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)buf = 138543618;
      v42 = v31;
      v43 = 2112;
      v44 = v21;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform lower value with error: %@", buf, 0x16u);

    }
    v27 = 0;
    v12 = 0;
    if (a4)
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to parse lower value"), 0, 0, v21));
    v25 = v21;
  }

LABEL_9:
  return v12;
}

BOOL sub_100053030(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  __CFString *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __CFString *v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;

  v7 = a1;
  v8 = a3;
  if (!objc_msgSend(v7, "length"))
  {
    if (a4)
    {
      v12 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("The characteristic step value length must be greater than 0."), 0, 0, 0));
      goto LABEL_8;
    }
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  if ((unint64_t)(a2 - 11) < 5 || a2 == 9)
  {
    if (a4)
    {
      v9 = sub_1000741FC(a2);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Characteristics with format type '%@' do not support step value"), v10));

      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v11, 0, 0, 0));
    }
    goto LABEL_7;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
  v22 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "reverseTransformedValue:format:error:", v7, a2, &v22));
  v16 = v22;

  v12 = v15 != 0;
  if (v15)
  {
    objc_msgSend(v8, "setStepValue:", v15);
  }
  else
  {
    v18 = sub_10007CCE4(0, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = sub_10007CD2C(0);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_DWORD *)buf = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform step value with error: %@", buf, 0x16u);

    }
    if (a4)
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to parse step value"), 0, 0, v16));
  }

LABEL_8:
  return v12;
}

BOOL sub_10005329C(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  _BOOL8 v20;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  __CFString *v29;
  void *v30;
  id v31;
  NSObject *v32;
  __CFString *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;

  v7 = a1;
  v8 = a3;
  if (!objc_msgSend(v7, "length"))
  {
    if (a4)
    {
      v10 = CFSTR("The characteristic valid values length must be greater than 0.");
      v11 = 0;
LABEL_15:
      v20 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v10, v11, 0, 0));
      goto LABEL_17;
    }
LABEL_16:
    v20 = 0;
    goto LABEL_17;
  }
  if ((unint64_t)(a2 - 16) >= 0xFFFFFFFFFFFFFFF5)
  {
    if (a4)
    {
      v12 = sub_1000741FC(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Characteristics with format type '%@' do not support valid values"), v13));

      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v14, 0, 0, 0));
    }
    goto LABEL_16;
  }
  if ((unint64_t)(a2 - 1) > 3)
    v9 = -1;
  else
    v9 = qword_1001DD5E0[a2 - 1];
  if (((unint64_t)objc_msgSend(v7, "length") & v9) != 0)
  {
    v16 = sub_10007CCE4(0, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = sub_10007CD2C(0);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      *(_DWORD *)buf = 138543362;
      v36 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values, total size is not a multiple of the format size", buf, 0xCu);

    }
    if (a4)
    {
      v10 = CFSTR("Failed to extract valid values");
      v11 = CFSTR("Total size is not a multiple of the format's size");
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v22 = sub_10005669C(v7, a2);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v24 = objc_msgSend(v23, "count");
  v20 = v24 != 0;
  if (v24)
  {
    objc_msgSend(v23, "sortUsingComparator:", &stru_1002374B8);
    v27 = sub_10007CCE4(0, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v29 = sub_10007CD2C(0);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      *(_DWORD *)buf = 138543618;
      v36 = v30;
      v37 = 2112;
      v38 = v23;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "%{public}@[HAPBTLE] Setting valid values to : %@", buf, 0x16u);

    }
    objc_msgSend(v8, "setValidValues:", v23);
  }
  else
  {
    v31 = sub_10007CCE4(0, v25);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = sub_10007CD2C(0);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      *(_DWORD *)buf = 138543362;
      v36 = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values", buf, 0xCu);

    }
    if (a4)
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to extract valid values"), 0, 0, 0));
  }

LABEL_17:
  return v20;
}

uint64_t sub_100053604(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  __CFString *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  void *v28;
  unsigned __int8 v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  __CFString *v36;
  void *v37;
  id v38;
  NSObject *v39;
  __CFString *v40;
  void *v41;
  id v42;
  NSObject *v43;
  __CFString *v44;
  void *v45;
  _QWORD *v47;
  void *v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;

  v7 = a1;
  v8 = a3;
  if (objc_msgSend(v7, "length") && (objc_msgSend(v7, "length") & 1) == 0)
  {
    if ((unint64_t)(a2 - 16) < 0xFFFFFFFFFFFFFFF5)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "validValues"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v9));

      if ((unint64_t)(a2 - 1) > 3)
        v11 = -1;
      else
        v11 = qword_1001DD5E0[a2 - 1];
      if (((unint64_t)objc_msgSend(v7, "length") & v11) != 0)
      {
        v17 = sub_10007CCE4(0, v16);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = sub_10007CD2C(0);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          *(_DWORD *)buf = 138543362;
          v50 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid value range, total size is not a multiple of the format's size", buf, 0xCu);

        }
        v12 = 0;
        if (a4)
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to extract valid value range"), CFSTR("Total size is not a multiple of the format's size"), 0, 0));
        goto LABEL_40;
      }
      v21 = sub_10005669C(v7, a2);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if ((objc_msgSend(v22, "count") & 1) != 0)
      {
        v38 = sub_10007CCE4(0, v23);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v40 = sub_10007CD2C(0);
          v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          *(_DWORD *)buf = 138543362;
          v50 = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid value range, valid value ranges are not pairs", buf, 0xCu);

        }
        if (a4)
        {
          v12 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to extract valid value range"), CFSTR("Valid value ranges are not pairs"), 0, 0));
LABEL_39:

LABEL_40:
          goto LABEL_41;
        }
      }
      else
      {
        v47 = a4;
        v48 = v8;
        if (objc_msgSend(v22, "count"))
        {
          v24 = 0;
          do
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndex:", v24));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndex:", v24 | 1));
            v27 = (char *)objc_msgSend(v25, "integerValue");
            if ((uint64_t)v27 <= (uint64_t)objc_msgSend(v26, "integerValue"))
            {
              do
              {
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v27));
                v29 = objc_msgSend(v10, "containsObject:", v28);

                if ((v29 & 1) == 0)
                {
                  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v27));
                  objc_msgSend(v10, "addObject:", v30);

                }
              }
              while ((uint64_t)v27++ < (uint64_t)objc_msgSend(v26, "integerValue"));
            }

            v24 += 2;
          }
          while (v24 < (unint64_t)objc_msgSend(v22, "count"));
        }
        if (objc_msgSend(v10, "count"))
        {
          objc_msgSend(v10, "sortUsingComparator:", &stru_100237C78);
          v34 = sub_10007CCE4(0, v33);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            v36 = sub_10007CD2C(0);
            v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
            *(_DWORD *)buf = 138543618;
            v50 = v37;
            v51 = 2112;
            v52 = v10;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%{public}@[HAPBTLE] Setting valid values to : %@", buf, 0x16u);

          }
          v8 = v48;
          objc_msgSend(v48, "setValidValues:", v10);
          v12 = 1;
          goto LABEL_39;
        }
        v42 = sub_10007CCE4(0, v32);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          v44 = sub_10007CD2C(0);
          v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          *(_DWORD *)buf = 138543362;
          v50 = v45;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values", buf, 0xCu);

        }
        if (v47)
        {
          v12 = 0;
          *v47 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Failed to extract valid values"), 0, 0, 0));
          goto LABEL_39;
        }
      }
      v12 = 0;
      goto LABEL_39;
    }
    if (a4)
    {
      v13 = sub_1000741FC(a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Characteristics with format type '%@' do not support valid values"), v14));

      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v15, 0, 0, 0));
    }
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_10:
    v12 = 0;
    goto LABEL_41;
  }
  v12 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("The characteristic valid values range length must be even"), 0, 0, 0));
LABEL_41:

  return v12;
}

BOOL sub_100053E84(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  id v6;
  __int16 v8;

  v5 = a1;
  v6 = objc_msgSend(v5, "length");
  if ((unint64_t)v6 <= 1)
  {
    if (a3)
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("The service properties value is missing."), 0, 0, 0));
  }
  else
  {
    v8 = 0;
    objc_msgSend(v5, "getBytes:length:", &v8, 2);
    if (a2)
      *a2 = v8 & 7;
  }

  return (unint64_t)v6 > 1;
}

uint64_t sub_100053F38(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v11;

  v5 = a1;
  v6 = a2;
  if ((unint64_t)objc_msgSend(v5, "length") < 2 || (objc_msgSend(v5, "length") & 1) != 0)
  {
    v9 = 0;
    if (a3)
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Linked services has invalid value field."), 0, 0, 0));
  }
  else
  {
    if ((unint64_t)objc_msgSend(v5, "length") >= 2)
    {
      do
      {
        v7 = v5;
        v11 = 0;
        objc_msgSend(v5, "getBytes:length:", &v11, 2);
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v11));
        objc_msgSend(v6, "addObject:", v8);

        v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", 2, (char *)objc_msgSend(v7, "length") - 2));
      }
      while ((unint64_t)objc_msgSend(v5, "length") > 1);
    }
    v9 = 1;
  }

  return v9;
}

void sub_100054178(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "UUID"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "domain"));
      v11 = objc_msgSend(a1[6], "code");
      v12 = 138544130;
      v13 = v7;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to read characteristic signature: %{key:type}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v12, 0x2Au);

    }
  }

}

void sub_1000543CC(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "UUID"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "domain"));
      v11 = objc_msgSend(a1[6], "code");
      v12 = 138544130;
      v13 = v7;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to read service signature: %{key:type}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v12, 0x2Au);

    }
  }

}

id sub_10005669C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v3, "length")));
  if ((unint64_t)(a2 - 1) > 3)
    v5 = 0;
  else
    v5 = qword_1001DD600[a2 - 1];
  if (objc_msgSend(v3, "length"))
  {
    v6 = 0;
    do
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subdataWithRange:", v6, v5));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
      v12 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "reverseTransformedValue:format:error:", v7, a2, &v12));
      v10 = v12;

      if (!v10 && (objc_msgSend(v4, "containsObject:", v9) & 1) == 0)
        objc_msgSend(v4, "addObject:", v9);

      v6 += v5;
    }
    while (v6 < (unint64_t)objc_msgSend(v3, "length"));
  }

  return v4;
}

int64_t sub_1000567CC(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a2, "compare:", a3);
}

void sub_10005695C(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  uint64_t v38;
  _BYTE v39[128];

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count")));
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v4 = *v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v32;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v6)
          objc_enumerationMutation(v4);
        v8 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v3, "containsObject:", v8))
        {
          v19 = *(id *)(a1 + 40);
          v21 = sub_10007CCE4((uint64_t)v19, v20);
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = sub_10007CD2C(v19);
            v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
            *(_DWORD *)buf = 138543618;
            v36 = v24;
            v37 = 2112;
            v38 = v8;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@Not sending requests due to duplicate characteristic: %@", buf, 0x16u);

          }
          objc_msgSend(*(id *)(a1 + 48), "markWithReason:", CFSTR("Calling completion handler"));
          if (*(_QWORD *)(a1 + 64))
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Duplicate characteristic read of %@."), v8));
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 11, v25, CFSTR("Client requested to read characteristic twice."), 0, 0));

            (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
          }
          objc_msgSend(*(id *)(a1 + 48), "end");
          objc_msgSend(*(id *)(a1 + 48), "invalidate");

          goto LABEL_19;
        }
        objc_msgSend(v3, "addObject:", v8);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      if (v5)
        continue;
      break;
    }
  }

  if (*(double *)(a1 + 72) > 0.0)
  {
    v9 = *(id *)(a1 + 40);
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 138543618;
      v36 = v14;
      v37 = 2048;
      v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{public}@Request timeouts are not supported, request may not timeout within %f seconds", buf, 0x16u);

    }
  }
  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  v16 = *(void **)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 32);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100056D14;
  v27[3] = &unk_1002374E0;
  v18 = *(_QWORD *)(a1 + 56);
  v28 = *(id *)(a1 + 48);
  objc_copyWeak(&v30, (id *)buf);
  v29 = *(id *)(a1 + 64);
  objc_msgSend(v16, "_readCharacteristicValues:queue:completionHandler:", v17, v18, v27);

  objc_destroyWeak(&v30);
  objc_destroyWeak((id *)buf);
LABEL_19:

}

void sub_100056CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100056D14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];

  v5 = a2;
  v25 = a3;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v26 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v29;
    v27 = v7;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));

        if (!v13)
        {
          v14 = WeakRetained;
          v16 = sub_10007CCE4((uint64_t)v14, v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            v18 = sub_10007CD2C(v14);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "characteristic"));
            v21 = WeakRetained;
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "value"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "characteristic"));
            *(_DWORD *)buf = 138543874;
            v33 = v19;
            v34 = 2112;
            v35 = v22;
            v36 = 2112;
            v37 = v23;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%{public}@Read value '%@' for characteristic %@", buf, 0x20u);

            WeakRetained = v21;
            v7 = v27;

          }
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(v26 + 32), "markWithReason:", CFSTR("Calling completion handler"));
  v24 = *(_QWORD *)(v26 + 40);
  if (v24)
    (*(void (**)(uint64_t, id, id))(v24 + 16))(v24, v7, v25);
  objc_msgSend(*(id *)(v26 + 32), "end");
  objc_msgSend(*(id *)(v26 + 32), "invalidate");

}

void sub_100057290(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instanceID"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "type"));
      v16 = 138544130;
      v17 = v12;
      v18 = 2112;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      v22 = 2112;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Read response for characteristic %@/%@ with error: %@", (uint8_t *)&v16, 0x2Au);

    }
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[HAPCharacteristicResponseTuple responseTupleForCharacteristic:error:](HAPCharacteristicResponseTuple, "responseTupleForCharacteristic:error:", v5, v6));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_100057404(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v2 = *(id *)(a1 + 32);
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138543362;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Completed multiple read requests", buf, 0xCu);

  }
  v8 = *(NSObject **)(a1 + 40);
  if (v8)
  {
    v9 = *(void **)(a1 + 56);
    if (v9)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10005753C;
      v10[3] = &unk_100236E80;
      v12 = v9;
      v11 = *(id *)(a1 + 48);
      dispatch_async(v8, v10);

    }
  }
}

uint64_t sub_10005753C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1000579AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,char a21)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  __HMFActivityScopeLeave(&a21);
  _Unwind_Resume(a1);
}

void sub_1000579E0(void *a1, void *a2, int a3, void *a4, void *a5)
{
  void (**v9)(id, id, void *);
  unint64_t v10;
  unint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a1;
  v9 = a2;
  v10 = a4;
  v11 = a5;
  v12 = (void *)v11;
  if (v9)
  {
    if (v10 | v11)
    {
      v13 = a3 - 1;
      if ((a3 - 1) > 2)
      {
        v15 = 0;
        v14 = 1;
      }
      else
      {
        v14 = qword_1001DD620[v13];
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", off_100237C98[v13], v17));
      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", v14, v15, v12, 0, v10));

    }
    else
    {
      v16 = 0;
    }
    v9[2](v9, v17, v16);

  }
}

void sub_100057AF8(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  unsigned __int8 v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  __CFString *v32;
  id v33;
  void *v34;
  void *v35;
  unsigned int v36;
  id v37;
  id v38;
  void *v39;
  __CFString *v40;
  id v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  __CFString *v45;
  void *v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  __CFString *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  id v63;
  __int16 v64;
  unint64_t v65;
  __int16 v66;
  id v67;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v9 = WeakRetained;
  if (v6)
  {
    objc_msgSend(a1[4], "setValue:", 0);
    v10 = v9;
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 138543618;
      v61 = v15;
      v62 = 2112;
      v63 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to read from characteristic with error: %@", buf, 0x16u);

    }
    v17 = sub_10007CCE4(0, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = sub_10007CD2C(0);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "instanceID"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
      v23 = objc_msgSend(v6, "code");
      *(_DWORD *)buf = 138544130;
      v61 = v20;
      v62 = 2112;
      v63 = v21;
      v64 = 2112;
      v65 = (unint64_t)v22;
      v66 = 2048;
      v67 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Read failed for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

    }
    sub_1000579E0(a1[4], a1[5], 1, v6, CFSTR("Read request failed."));
  }
  else
  {
    v58 = 0;
    v59 = 0;
    v57 = 0;
    v24 = objc_msgSend((id)objc_opt_class(WeakRetained, v8), "parseReadResponse:value:notificationContext:error:", v5, &v59, &v58, &v57);
    v25 = v59;
    v26 = v58;
    v27 = v57;
    v28 = a1[4];
    if ((v24 & 1) != 0)
    {
      objc_msgSend(v28, "setValue:", v25);
      objc_msgSend(a1[4], "setNotificationContext:", v26);
      v30 = sub_10007CCE4(0, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = sub_10007CD2C(0);
        v33 = v25;
        v34 = (void *)objc_claimAutoreleasedReturnValue(v32);
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "instanceID"));
        v36 = objc_msgSend(v5, "statusCode");
        *(_DWORD *)buf = 138543874;
        v61 = v34;
        v62 = 2112;
        v63 = v35;
        v64 = 2048;
        v65 = v36;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);

        v25 = v33;
      }

      objc_msgSend(v9, "_updatePropertiesFromCharacteristic:", a1[4]);
      v37 = a1[4];
      v38 = a1[5];
      v39 = 0;
      v40 = 0;
    }
    else
    {
      objc_msgSend(v28, "setValue:", 0);
      objc_msgSend(a1[4], "setNotificationContext:", 0);
      v41 = v9;
      v43 = sub_10007CCE4((uint64_t)v41, v42);
      v44 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = sub_10007CD2C(v41);
        v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        *(_DWORD *)buf = 138543618;
        v61 = v46;
        v62 = 2112;
        v63 = v27;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic read response with error: %@", buf, 0x16u);

      }
      v48 = sub_10007CCE4(0, v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v50 = sub_10007CD2C(0);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "instanceID"));
        v56 = v26;
        v53 = v25;
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "domain"));
        v55 = objc_msgSend(v27, "code");
        *(_DWORD *)buf = 138544130;
        v61 = v51;
        v62 = 2112;
        v63 = v52;
        v64 = 2112;
        v65 = (unint64_t)v54;
        v66 = 2048;
        v67 = v55;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

        v25 = v53;
        v26 = v56;

      }
      v37 = a1[4];
      v38 = a1[5];
      v40 = CFSTR("Read response invalid.");
      v39 = v27;
    }
    sub_1000579E0(v37, v38, 1, v39, v40);

  }
}

void sub_100058834(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  __int128 v9;
  char v10;
  void *i;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  id obj;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *group;
  _QWORD block[4];
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  char v46;
  _QWORD v47[5];
  id v48;
  NSObject *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;

  v1 = a1;
  if (*(double *)(a1 + 72) > 0.0)
  {
    v2 = *(id *)(a1 + 32);
    v4 = sub_10007CCE4((uint64_t)v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = sub_10007CD2C(v2);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = *(void **)(v1 + 72);
      *(_DWORD *)buf = 138543618;
      v56 = v7;
      v57 = 2048;
      v58 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Request timeouts are not supported, request may not timeout within %f seconds", buf, 0x16u);

    }
  }
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(v1 + 40), "count")));
  group = dispatch_group_create();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = *(id *)(v1 + 40);
  v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
  v10 = 0;
  if (v38)
  {
    v36 = *(_QWORD *)v51;
    *(_QWORD *)&v9 = 138543618;
    v34 = v9;
    do
    {
      for (i = 0; i != v38; i = (char *)i + 1)
      {
        v12 = v1;
        if (*(_QWORD *)v51 != v36)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
        dispatch_group_enter(group);
        v14 = objc_msgSend(v13, "writeType") == (id)1;
        if (objc_msgSend(v13, "includeResponseValue"))
          v15 = 3;
        else
          v15 = 1;
        if (objc_msgSend(v13, "timedWrite", v34))
          v17 = v15 | 4;
        else
          v17 = v15;
        v18 = sub_10007CCE4(0, v16);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v20 = sub_10007CD2C(0);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "characteristic"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "instanceID"));
          *(_DWORD *)buf = v34;
          v56 = v21;
          v57 = 2112;
          v58 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Sending write for characteristic %{key:characteristicId}@", buf, 0x16u);

        }
        v10 |= v14;

        v1 = v12;
        v24 = *(void **)(v12 + 32);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "characteristic"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "authorizationData"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "contextData"));
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 3221225472;
        v47[2] = sub_100058C84;
        v47[3] = &unk_100237530;
        v47[4] = *(_QWORD *)(v12 + 32);
        v48 = v37;
        v49 = group;
        objc_msgSend(v24, "_writeValue:toCharacteristic:authorizationData:contextData:options:completionHandler:", v25, v26, v27, v28, v17, v47);

      }
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
    }
    while (v38);
  }

  v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "clientQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100058DF8;
  block[3] = &unk_1002375A8;
  v30 = *(id *)(v1 + 48);
  v31 = *(_QWORD *)(v1 + 32);
  v41 = v30;
  v42 = v31;
  v43 = *(id *)(v1 + 56);
  v32 = *(id *)(v1 + 64);
  v44 = v37;
  v45 = v32;
  v46 = v10 & 1;
  v33 = v37;
  dispatch_group_notify(group, v29, block);

}

void sub_100058C84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instanceID"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "type"));
      v16 = 138544130;
      v17 = v12;
      v18 = 2112;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      v22 = 2112;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Write response for characteristic %@/%@ with error: %@", (uint8_t *)&v16, 0x2Au);

    }
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[HAPCharacteristicResponseTuple responseTupleForCharacteristic:error:](HAPCharacteristicResponseTuple, "responseTupleForCharacteristic:error:", v5, v6));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

id sub_100058DF8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  void **v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  void *v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;

  objc_msgSend(*(id *)(a1 + 32), "begin");
  v2 = *(id *)(a1 + 40);
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138543362;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Completed multiple write requests", buf, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "markWithReason:", CFSTR("Calling completion handler"));
  v8 = *(NSObject **)(a1 + 48);
  if (v8)
  {
    v9 = *(void **)(a1 + 64);
    if (v9)
    {
      v17 = _NSConcreteStackBlock;
      v18 = 3221225472;
      v19 = sub_100058FF4;
      v20 = &unk_100236E80;
      v22 = v9;
      v21 = *(id *)(a1 + 56);
      dispatch_async(v8, &v17);

    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend(*(id *)(a1 + 32), "markWithReason:", CFSTR("Disconnecting"));
    v10 = *(id *)(a1 + 40);
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 138543362;
      v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@Finished writes for short action, Disconnecting", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "_suspendConnectionIdleTimer");
    objc_msgSend(*(id *)(a1 + 40), "_handleConnectionIdleTimeout");
  }
  objc_msgSend(*(id *)(a1 + 32), "end", v17, v18, v19, v20);
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

uint64_t sub_100058FF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10005963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,char a26)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  __HMFActivityScopeLeave(&a26);
  _Unwind_Resume(a1);
}

void sub_100059678(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  unsigned __int8 v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  __CFString *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  __CFString *v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  __CFString *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  id v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  id v60;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (!v6)
  {
    v23 = *(id *)(a1 + 40);
    v25 = v23;
    if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    {
      v51 = 0;
      v52 = v23;
      v27 = objc_msgSend((id)objc_opt_class(v8, v24), "parseWriteResponse:value:error:", v5, &v52, &v51);
      v26 = v52;

      v28 = v51;
      v29 = v28;
      if ((v27 & 1) == 0)
      {
        v37 = v8;
        v39 = sub_10007CCE4((uint64_t)v37, v38);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          v41 = sub_10007CD2C(v37);
          v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          *(_DWORD *)buf = 138543618;
          v54 = v42;
          v55 = 2112;
          v56 = v29;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic write response with error: %@", buf, 0x16u);

        }
        v44 = sub_10007CCE4(0, v43);
        v45 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          v46 = sub_10007CD2C(0);
          v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "domain"));
          v50 = objc_msgSend(v29, "code");
          *(_DWORD *)buf = 138544130;
          v54 = v47;
          v55 = 2112;
          v56 = v48;
          v57 = 2112;
          v58 = (unint64_t)v49;
          v59 = 2048;
          v60 = v50;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

        }
        sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v29, CFSTR("Write response failed."));

        goto LABEL_19;
      }

    }
    else
    {
      v26 = v23;
    }
    objc_msgSend(*(id *)(a1 + 32), "setValue:", v26);
    v31 = sub_10007CCE4(0, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = sub_10007CD2C(0);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
      v36 = objc_msgSend(v5, "statusCode");
      *(_DWORD *)buf = 138543874;
      v54 = v34;
      v55 = 2112;
      v56 = v35;
      v57 = 2048;
      v58 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);

    }
    sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, 0, 0);
LABEL_19:

    goto LABEL_20;
  }
  v9 = WeakRetained;
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = sub_10007CD2C(v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138543618;
    v54 = v14;
    v55 = 2112;
    v56 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to write to characteristic with error: %@", buf, 0x16u);

  }
  v16 = sub_10007CCE4(0, v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = sub_10007CD2C(0);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    v22 = objc_msgSend(v6, "code");
    *(_DWORD *)buf = 138544130;
    v54 = v19;
    v55 = 2112;
    v56 = v20;
    v57 = 2112;
    v58 = (unint64_t)v21;
    v59 = 2048;
    v60 = v22;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Write failed for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

  }
  sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v6, CFSTR("Write request failed."));
LABEL_20:

}

void sub_100059C10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
  dispatch_assert_queue_V2(v6);

  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, id))(v7 + 16))(v7, *(_QWORD *)(a1 + 40), v5);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_performTimedWriteExecuteForCharacteristic:value:options:completionHandler:", v10, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestOperationQueue"));
  v9 = objc_msgSend(v8, "isSuspended");

  if (v9)
    objc_msgSend(*(id *)(a1 + 32), "_resumeAllOperations");

}

void sub_10005A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  __HMFActivityScopeLeave(va);
  _Unwind_Resume(a1);
}

void sub_10005A068(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  __CFString *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  __CFString *v29;
  void *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  __CFString *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  id v49;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v42 = 138543618;
      v43 = v12;
      v44 = 2112;
      v45 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare timed write to characteristic with error: %@", (uint8_t *)&v42, 0x16u);

    }
    v14 = sub_10007CCE4(0, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_10007CD2C(0);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instanceID"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
      v20 = objc_msgSend(v6, "code");
      v42 = 138544130;
      v43 = v17;
      v44 = 2112;
      v45 = v18;
      v46 = 2112;
      v47 = (unint64_t)v19;
      v48 = 2048;
      v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with error: %{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v42, 0x2Au);

    }
    v21 = *(void **)(a1 + 40);
    v22 = *(void **)(a1 + 48);
    v23 = CFSTR("Prepare timed write request failed.");
    v24 = v6;
    goto LABEL_7;
  }
  if (!objc_msgSend(v5, "statusCode"))
  {
    v21 = *(void **)(a1 + 40);
    v22 = *(void **)(a1 + 48);
    v24 = 0;
    v23 = 0;
LABEL_7:
    sub_1000579E0(v21, v22, 2, v24, v23);
    goto LABEL_14;
  }
  v25 = *(id *)(a1 + 32);
  v27 = sub_10007CCE4((uint64_t)v25, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = sub_10007CD2C(v25);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v42 = 138543618;
    v43 = v30;
    v44 = 1024;
    LODWORD(v45) = objc_msgSend(v5, "statusCode");
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@Received response to prepare write with status code: 0x%02x", (uint8_t *)&v42, 0x12u);

  }
  v32 = sub_10007CCE4(0, v31);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v34 = sub_10007CD2C(0);
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instanceID"));
    v37 = objc_msgSend(v5, "statusCode");
    v42 = 138543874;
    v43 = v35;
    v44 = 2112;
    v45 = v36;
    v46 = 2048;
    v47 = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with HAP error: %{key:errorCode}lu", (uint8_t *)&v42, 0x20u);

  }
  v39 = *(void **)(a1 + 40);
  v38 = *(void **)(a1 + 48);
  v40 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_10004228C((uint64_t)objc_msgSend(v5, "statusCode")));
  v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  sub_1000579E0(v39, v38, 2, v41, CFSTR("Prepare timed write response returned non-zero status code."));

LABEL_14:
}

void sub_10005A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  __HMFActivityScopeLeave(&a21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005A6CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  unsigned __int8 v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  id v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  __CFString *v51;
  void *v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  __CFString *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  id v70;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (v6)
  {
    v9 = WeakRetained;
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)buf = 138543618;
      v64 = v14;
      v65 = 2112;
      v66 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write to characteristic with error: %@", buf, 0x16u);

    }
    v16 = sub_10007CCE4(0, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = sub_10007CD2C(0);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
      v22 = objc_msgSend(v6, "code");
      *(_DWORD *)buf = 138544130;
      v64 = v19;
      v65 = 2112;
      v66 = v20;
      v67 = 2112;
      v68 = (unint64_t)v21;
      v69 = 2048;
      v70 = v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Timed write for characteristic %{key:characteristicId}@, failed with error: %{key:errorDomain}@, %{key:errorCode}ld", buf, 0x2Au);

    }
    sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v6, CFSTR("Execute timed write request failed."));
    goto LABEL_24;
  }
  if (!objc_msgSend(v5, "statusCode"))
  {
    v33 = *(id *)(a1 + 40);
    v35 = v33;
    if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    {
      v61 = 0;
      v62 = v33;
      v37 = objc_msgSend((id)objc_opt_class(v8, v34), "parseWriteResponse:value:error:", v5, &v62, &v61);
      v36 = v62;

      v38 = v61;
      v39 = v38;
      if ((v37 & 1) == 0)
      {
        v47 = v8;
        v49 = sub_10007CCE4((uint64_t)v47, v48);
        v50 = objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          v51 = sub_10007CD2C(v47);
          v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
          *(_DWORD *)buf = 138543618;
          v64 = v52;
          v65 = 2112;
          v66 = v39;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic execute response with error: %@", buf, 0x16u);

        }
        v54 = sub_10007CCE4(0, v53);
        v55 = objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v56 = sub_10007CD2C(0);
          v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "domain"));
          v60 = objc_msgSend(v39, "code");
          *(_DWORD *)buf = 138544130;
          v64 = v57;
          v65 = 2112;
          v66 = v58;
          v67 = 2112;
          v68 = (unint64_t)v59;
          v69 = 2048;
          v70 = v60;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

        }
        sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v39, CFSTR("Execute timed write response invalid."));

        goto LABEL_23;
      }

    }
    else
    {
      v36 = v33;
    }
    objc_msgSend(*(id *)(a1 + 32), "setValue:", v36);
    v41 = sub_10007CCE4(0, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = sub_10007CD2C(0);
      v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
      v46 = objc_msgSend(v5, "statusCode");
      *(_DWORD *)buf = 138543874;
      v64 = v44;
      v65 = 2112;
      v66 = v45;
      v67 = 2048;
      v68 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);

    }
    sub_1000579E0(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, 0, 0);
LABEL_23:

    goto LABEL_24;
  }
  v24 = sub_10007CCE4(0, v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = sub_10007CD2C(0);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceID"));
    *(_DWORD *)buf = 138543874;
    v64 = v27;
    v65 = 2112;
    v66 = v28;
    v67 = 2048;
    v68 = objc_msgSend(v5, "statusCode");
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with HAP error: %{key:errorCode}lu", buf, 0x20u);

  }
  v29 = *(void **)(a1 + 32);
  v30 = *(void **)(a1 + 48);
  v31 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_10004228C((uint64_t)objc_msgSend(v5, "statusCode")));
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  sub_1000579E0(v29, v30, 2, v32, CFSTR("Execute response returned non-zero status code."));

LABEL_24:
}

id sub_10005AE8C(void *a1, uint64_t a2, void *a3, int a4, void *a5, _QWORD *a6, double a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t appended;
  uint64_t v21;
  void *v22;
  void *v23;
  id v25;
  unint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v13 = a3;
  v14 = a5;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v15 = a1;
  TLV8BufferInit(&v28, 0xFFFFLL);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[HAPDataValueTransformer defaultDataValueTransformer](HAPDataValueTransformer, "defaultDataValueTransformer"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "transformedValue:format:error:", v15, a2, a6));

  if (!v17)
  {
    v22 = 0;
LABEL_18:
    v21 = 0;
    goto LABEL_4;
  }
  v19 = objc_retainAutorelease(v17);
  appended = TLV8BufferAppend(&v28, 1, objc_msgSend(v19, "bytes"), objc_msgSend(v19, "length"));
  if (!(_DWORD)appended)
  {
    if (!v13
      || (v25 = objc_retainAutorelease(v13),
          appended = TLV8BufferAppend(&v28, 2, objc_msgSend(v25, "bytes"), objc_msgSend(v25, "length")),
          !(_DWORD)appended))
    {
      if (a7 <= 0.0)
        goto LABEL_24;
      v26 = (unint64_t)(a7 * 10.0);
      if (!v26)
      {
        v22 = 0;
        v21 = 4294960559;
        goto LABEL_4;
      }
      appended = TLV8BufferAppendUInt64(&v28, 8, v26);
      if (!(_DWORD)appended)
      {
LABEL_24:
        if (!a4 || (appended = TLV8BufferAppendUInt64(&v28, 9, 1), !(_DWORD)appended))
        {
          if (!objc_msgSend(v14, "length", v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
                  v45,
                  v46,
                  v47,
                  v48)
            || (v27 = objc_retainAutorelease(v14),
                appended = TLV8BufferAppend(&v28, 28, objc_msgSend(v27, "bytes"), objc_msgSend(v27, "length")),
                !(_DWORD)appended))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v28));
            if (!v22)
            {
              v21 = 4294960568;
              goto LABEL_4;
            }
            goto LABEL_18;
          }
        }
      }
    }
  }
  v21 = appended;
  v22 = 0;
LABEL_4:
  TLV8BufferFree(&v28, v18);
  if (a6 && (_DWORD)v21)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithOSStatus:](NSError, "errorWithOSStatus:", v21));
    *a6 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Write failed."), CFSTR("Failed to create write request body."), 0, v23));

  }
  return v22;
}

id sub_10005BA38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_enableEvents:forCharacteristics:withCompletionHandler:queue:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

id sub_10005BA4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_enableEvents:forCharacteristics:withCompletionHandler:queue:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_10005C59C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005C600(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10005C614(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005C624(uint64_t a1)
{

}

void sub_10005C62C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(v5, "setEventNotificationsEnabled:", *(_BYTE *)(a1 + 56) == 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "service"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accessory"));

    v9 = *(id *)(a1 + 32);
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "instanceID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instanceID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "type"));
      v19 = 138544386;
      v20 = v14;
      v21 = 2112;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      v25 = 2112;
      v26 = v17;
      v27 = 2112;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Enable event response for characteristic %@/%@/%@ with error: %@", (uint8_t *)&v19, 0x34u);

    }
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[HAPCharacteristicResponseTuple responseTupleForCharacteristic:error:](HAPCharacteristicResponseTuple, "responseTupleForCharacteristic:error:", v5, v6));
  if (v18)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v18);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_10005C800(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005C8D0;
  v5[3] = &unk_1002376C0;
  v10 = *(_QWORD *)(a1 + 72);
  v5[4] = v3;
  v6 = v2;
  v9 = *(id *)(a1 + 64);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v3, "_readCharacteristicValues:queue:completionHandler:", v6, v4, v5);

}

void sub_10005C8D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  __CFString *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  __CFString *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  _QWORD block[4];
  id v45;
  id v46;
  _QWORD v47[5];
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  id v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a3);
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v50;
      v43 = a1;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v50 != v17)
            objc_enumerationMutation(v5);
          v19 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "error"));

          if (v20)
          {
            v21 = *(id *)(a1 + 32);
            v23 = sub_10007CCE4((uint64_t)v21, v22);
            v24 = objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              v25 = sub_10007CD2C(v21);
              v26 = v5;
              v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
              v28 = v17;
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "characteristic"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "error"));
              *(_DWORD *)buf = 138543874;
              v54 = v27;
              v55 = 2112;
              v56 = v29;
              v57 = 2112;
              v58 = v30;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to read value for characteristic, %@, with error: %@", buf, 0x20u);

              v17 = v28;
              v5 = v26;
              a1 = v43;
            }

            v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "error"));
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
            v33 = *(void **)(v32 + 40);
            *(_QWORD *)(v32 + 40) = v31;

          }
        }
        v16 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
      }
      while (v16);
    }
    v34 = *(id *)(a1 + 32);
    v36 = sub_10007CCE4((uint64_t)v34, v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      v38 = sub_10007CD2C(v34);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      v40 = objc_msgSend(v5, "count");
      *(_DWORD *)buf = 138543618;
      v54 = v39;
      v55 = 2048;
      v56 = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%{public}@Read values for %lu Characteristics supporting Events", buf, 0x16u);

    }
    v6 = 0;
    if (objc_msgSend(*(id *)(a1 + 40), "count")
      && objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:"))
    {
      v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_10005CCFC;
      v47[3] = &unk_100236AD0;
      v42 = *(void **)(a1 + 40);
      v47[4] = *(_QWORD *)(a1 + 32);
      v48 = v42;
      dispatch_async(v41, v47);

    }
  }
  v7 = *(id *)(a1 + 32);
  v9 = sub_10007CCE4((uint64_t)v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = sub_10007CD2C(v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)buf = 138543362;
    v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@Completed multiple enable event requests", buf, 0xCu);

  }
  v13 = *(void **)(a1 + 64);
  if (v13)
  {
    v14 = *(NSObject **)(a1 + 48);
    if (v14)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10005CD74;
      block[3] = &unk_100236E80;
      v46 = v13;
      v45 = *(id *)(a1 + 56);
      dispatch_async(v14, block);

    }
  }

}

id sub_10005CCFC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stateNumber"));
  objc_msgSend(v2, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", v3, v4, v5, 0);

  return _objc_msgSend(*(id *)(a1 + 32), "setStateChanged:", 0);
}

uint64_t sub_10005CD74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_10005CD88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_10005CD9C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

uint64_t sub_10005D20C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10005D220(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10005D234(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable events on characteristic with error %@", buf, 0x16u);

    }
  }
  else
  {
    objc_msgSend(v5, "setEventNotificationsEnabled:", *(unsigned __int8 *)(a1 + 56));
  }
  v13 = *(void **)(a1 + 48);
  if (v13)
  {
    v14 = *(NSObject **)(a1 + 40);
    if (v14)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10005D3BC;
      block[3] = &unk_100236E08;
      v18 = v13;
      v16 = v5;
      v17 = v6;
      dispatch_async(v14, block);

    }
  }

}

uint64_t sub_10005D3BC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10005D4EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(result + 16))(result, *(_QWORD *)(a1 + 32), a2);
  return result;
}

void sub_10005D994(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[5];
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "error"));

        if (!v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "characteristic"));
          objc_msgSend(v4, "addObject:", v12);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "count")
    && objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:"))
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10005DB68;
    v14[3] = &unk_100236AD0;
    v14[4] = *(_QWORD *)(a1 + 32);
    v15 = v4;
    dispatch_async(v13, v14);

  }
}

void sub_10005DB68(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stateNumber"));
  objc_msgSend(v5, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", v3, v2, v4, 0);

}

void sub_10005E70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005E73C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  unsigned int v25;
  id v26;
  unsigned __int8 v27;
  id v28;
  id v29;
  uint64_t v30;
  CFAbsoluteTime Current;
  id v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  __CFString *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;

  v5 = a2;
  v6 = a3;
  v7 = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = sub_10007CCE4((uint64_t)v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = sub_10007CD2C(v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 56)));
    *(_DWORD *)buf = 138543874;
    v44 = v12;
    v45 = 2112;
    v46 = v13;
    v47 = 2112;
    v48 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@Did configure for broadcast key generation type: %@ with error: %@", buf, 0x20u);

  }
  if (v6)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Failed to configure for broadcast key")));
      v15 = CFSTR("Protocol config request failed.");
      v16 = v14;
      v17 = v6;
LABEL_11:
      v26 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 1, v16, v15, 0, v17));

      (*(void (**)(double))(*(_QWORD *)(a1 + 40) + 16))(0.0);
LABEL_20:

    }
  }
  else
  {
    if (!objc_msgSend(v5, "statusCode"))
    {
      v41 = 0;
      v42 = 0;
      v40 = 0;
      v27 = objc_msgSend((id)objc_opt_class(v7, v18), "parseProtocolConfigurationResponse:key:stateNumber:error:", v5, &v42, &v41, &v40);
      v28 = v42;
      v29 = v41;
      v26 = v40;
      if ((v27 & 1) != 0)
      {
        v30 = *(_QWORD *)(a1 + 40);
        if (v30)
        {
          Current = CFAbsoluteTimeGetCurrent();
          (*(void (**)(uint64_t, id, id, uint64_t, _QWORD, CFAbsoluteTime))(v30 + 16))(v30, v28, v29, 1, 0, Current);
        }
      }
      else
      {
        v32 = v7;
        v34 = sub_10007CCE4((uint64_t)v32, v33);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = sub_10007CD2C(v32);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          *(_DWORD *)buf = 138543618;
          v44 = v37;
          v45 = 2112;
          v46 = v26;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse protocol configuration response with error: %@", buf, 0x16u);

        }
        if (*(_QWORD *)(a1 + 40))
        {
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Failed to configure service %@."), *(_QWORD *)(a1 + 32)));
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, v38, CFSTR("Protocol config response was invalid."), 0, v26));

          (*(void (**)(double))(*(_QWORD *)(a1 + 40) + 16))(0.0);
        }
      }

      goto LABEL_20;
    }
    v19 = v7;
    v21 = sub_10007CCE4((uint64_t)v19, v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = sub_10007CD2C(v19);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = objc_msgSend(v5, "statusCode");
      *(_DWORD *)buf = 138543618;
      v44 = v24;
      v45 = 1024;
      LODWORD(v46) = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@Protocol Config failed with status: %d", buf, 0x12u);

    }
    if (*(_QWORD *)(a1 + 40))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Protocol Config failed")));
      v15 = CFSTR("Response with failure status code");
      v16 = v14;
      v17 = 0;
      goto LABEL_11;
    }
  }

}

void sub_10005F12C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005F208;
  v5[3] = &unk_100237788;
  objc_copyWeak(&v7, &location);
  v6 = *(id *)(a1 + 56);
  objc_msgSend(v2, "_configureCharacteristics:queue:withCompletionHandler:", v3, v4, v5);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_10005F1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005F208(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  _BYTE v32[128];

  v5 = a2;
  v22 = a1;
  v23 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error", v22));

        if (!v13)
        {
          v14 = WeakRetained;
          v16 = sub_10007CCE4((uint64_t)v14, v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            v18 = sub_10007CD2C(v14);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "characteristic"));
            *(_DWORD *)buf = 138543618;
            v29 = v19;
            v30 = 2112;
            v31 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%{public}@Configured characteristic %@", buf, 0x16u);

          }
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v9);
  }

  v21 = *(_QWORD *)(v22 + 32);
  if (v21)
    (*(void (**)(uint64_t, id, id))(v21 + 16))(v21, v7, v23);

}

void sub_10005F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005F7B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instanceID"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "type"));
      v16 = 138544130;
      v17 = v12;
      v18 = 2112;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      v22 = 2112;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Enable event response for characteristic %@/%@ with error: %@", (uint8_t *)&v16, 0x2Au);

    }
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[HAPCharacteristicResponseTuple responseTupleForCharacteristic:error:](HAPCharacteristicResponseTuple, "responseTupleForCharacteristic:error:", v5, v6));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_10005F92C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v2 = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138543362;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Completed multiple broadcast enable requests", buf, 0xCu);

  }
  v8 = *(NSObject **)(a1 + 32);
  if (v8)
  {
    v9 = *(void **)(a1 + 48);
    if (v9)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10005FA6C;
      v10[3] = &unk_100236E80;
      v12 = v9;
      v11 = *(id *)(a1 + 40);
      dispatch_async(v8, v10);

    }
  }

}

uint64_t sub_10005FA6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10005FD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_10005FDC8(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  __CFString *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (v6)
  {
    v9 = WeakRetained;
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)buf = 138543618;
      v39 = v14;
      v40 = 2112;
      v41 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure characteristic with error: %@", buf, 0x16u);

    }
    sub_1000579E0(a1[4], a1[5], 3, v6, CFSTR("Configure Characteristic request failed."));
  }
  else if (objc_msgSend(v5, "statusCode"))
  {
    v16 = v8;
    v18 = sub_10007CCE4((uint64_t)v16, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = sub_10007CD2C(v16);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_DWORD *)buf = 138543618;
      v39 = v21;
      v40 = 1024;
      LODWORD(v41) = objc_msgSend(v5, "statusCode");
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@Configure characteristic failed with status: %d", buf, 0x12u);

    }
    v23 = a1[4];
    v22 = a1[5];
    v24 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_10004228C((uint64_t)objc_msgSend(v5, "statusCode")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    sub_1000579E0(v23, v22, 3, v25, CFSTR("Response with failure status code"));

  }
  else
  {
    v37 = 0;
    v26 = objc_msgSend((id)objc_opt_class(v8, v15), "parseCharacteristicConfigurationResponse:error:", v5, &v37);
    v27 = v37;
    if ((v26 & 1) != 0)
    {
      sub_1000579E0(a1[4], a1[5], 3, 0, 0);
    }
    else
    {
      v28 = v8;
      v30 = sub_10007CCE4((uint64_t)v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = sub_10007CD2C(v28);
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        *(_DWORD *)buf = 138543618;
        v39 = v33;
        v40 = 2112;
        v41 = v27;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic configuration response with error: %@", buf, 0x16u);

      }
      v35 = a1[4];
      v34 = a1[5];
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", 12));
      sub_1000579E0(v35, v34, 3, v36, CFSTR("Configure characteristic response invalid."));

    }
  }

}

void sub_100060204(uint64_t a1)
{
  const __CFString *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  const __CFString *v23;

  objc_msgSend(*(id *)(a1 + 32), "setPairingActivity:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setPairingRequest:", *(_QWORD *)(a1 + 48));
  if (objc_msgSend(*(id *)(a1 + 32), "isPaired"))
  {
    v2 = CFSTR("Pairing not supported on paired accessory.");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 18, CFSTR("Pairing not supported on paired accessory."), 0, 0, 0));
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isPairing"))
  {
    v2 = CFSTR("An existing pairing session is already in progress.");
    v4 = objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 4, CFSTR("An existing pairing session is already in progress."), 0, 0, 0));

    v3 = (void *)v4;
  }
  v5 = *(id *)(a1 + 32);
  v7 = sub_10007CCE4((uint64_t)v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v3)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = sub_10007CD2C(v5);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)buf = 138543618;
      v21 = v11;
      v22 = 2112;
      v23 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@%@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_notifyDelegatesPairingStopped:", v3);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v12 = sub_10007CD2C(v5);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      *(_DWORD *)buf = 138543362;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@Starting Pair Setup", buf, 0xCu);

    }
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_100060474;
    v17 = &unk_100236AD0;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(id *)(a1 + 48);
    sub_100060474((uint64_t)&v14);
    objc_msgSend(*(id *)(a1 + 32), "setPairingDisconnectionError:", 0, v14, v15, v16, v17, v18);
    objc_msgSend(*(id *)(a1 + 32), "setPairing:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_checkForAuthPrompt:", objc_msgSend(*(id *)(a1 + 48), "requiresUserConsent"));

  }
}

void sub_100060474(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  uint64_t v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = HMFBooleanToString(objc_msgSend(*(id *)(a1 + 40), "requiresUserConsent"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v9;
      v14 = 2048;
      v15 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Start pairing with BTLE accessory that needsConsent: %{key:needsConsent}@, protocolVersion: %{key:protocolVersion}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_1000605D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  char v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;

  v3 = a2;
  v4 = *(id *)(a1 + 32);
  v6 = sub_10007CCE4((uint64_t)v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_10007CD2C(v4);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *(_DWORD *)buf = 138543618;
      v20 = v10;
      v21 = 2112;
      v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to discover the accessory with error: %@", buf, 0x16u);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Pairing Failed."), CFSTR("Failed to discovery the accessory."), 0, v3));
    objc_msgSend(*(id *)(a1 + 32), "_pairingCompletedWithError:", v11);

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v12 = sub_10007CD2C(v4);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = HMFBooleanToString(*(unsigned __int8 *)(a1 + 40));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@Determining if MFi Pair Setup is supported, consentRequired: %@", buf, 0x16u);

    }
    v16 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000607CC;
    v17[3] = &unk_100237800;
    v17[4] = v16;
    v18 = *(_BYTE *)(a1 + 40);
    objc_msgSend(v16, "_getPairingFeaturesWithCompletionHandler:", v17);
  }

}

void sub_1000607CC(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  const __CFString *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __CFString *v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  HAPAccessoryInfo *v24;
  void *v25;
  void *v26;
  HAPAccessoryInfo *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  __CFString *v33;
  void *v34;
  void *v35;
  HAPAccessoryInfo *v36;
  void *v37;
  void *v38;
  HAPAccessoryInfo *v39;
  NSObject *v40;
  HAPAccessoryInfo *v41;
  HAPAccessoryInfo *v42;
  id v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  __CFString *v47;
  void *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  __CFString *v53;
  _QWORD block[5];
  HAPAccessoryInfo *v55;
  _QWORD v56[5];
  HAPAccessoryInfo *v57;
  uint64_t v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  id v62;

  v5 = a3;
  if (v5)
  {
    v6 = *(id *)(a1 + 32);
    v8 = sub_10007CCE4((uint64_t)v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = sub_10007CD2C(v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)buf = 138543618;
      v60 = v11;
      v61 = 2112;
      v62 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to get the pairing features with error: %@", buf, 0x16u);

    }
    v12 = CFSTR("Failed to get the pairing features.");
    v13 = 2;
    v14 = v5;
    goto LABEL_5;
  }
  if (a2 != 5 && a2)
  {
    v35 = *(void **)(a1 + 32);
    if (a2 != 1 || !*(_BYTE *)(a1 + 40))
    {
      objc_msgSend(v35, "continuePairingAfterAuthPrompt");
      goto LABEL_6;
    }
    if (objc_msgSend(v35, "_delegateRespondsToSelector:", "accessoryServer:requestUserPermission:accessoryInfo:error:"))
    {
      v36 = [HAPAccessoryInfo alloc];
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "category"));
      v39 = -[HAPAccessoryInfo initWithName:manufacturer:modelName:category:certificationStatus:denylisted:ppid:](v36, "initWithName:manufacturer:modelName:category:certificationStatus:denylisted:ppid:", v37, 0, 0, v38, 0, 0, 0);

      v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100060D48;
      block[3] = &unk_100236AD0;
      block[4] = *(_QWORD *)(a1 + 32);
      v55 = v39;
      v41 = v39;
      dispatch_async(v40, block);

      v42 = v55;
LABEL_27:

      goto LABEL_6;
    }
    v29 = *(id *)(a1 + 32);
    v52 = sub_10007CCE4((uint64_t)v29, v51);
    v32 = objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v53 = sub_10007CD2C(v29);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v53);
      *(_DWORD *)buf = 138543362;
      v60 = v34;
      goto LABEL_16;
    }
  }
  else
  {
    v16 = *(id *)(a1 + 32);
    v18 = sub_10007CCE4((uint64_t)v16, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = sub_10007CD2C(v16);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = sub_100020918(a2);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      *(_DWORD *)buf = 138543618;
      v60 = v21;
      v61 = 2112;
      v62 = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%{public}@Incompatible auth %@, prompting user", buf, 0x16u);

    }
    if (objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", "accessoryServer:requestUserPermission:accessoryInfo:error:"))
    {
      v24 = [HAPAccessoryInfo alloc];
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "category"));
      v27 = -[HAPAccessoryInfo initWithName:manufacturer:modelName:category:certificationStatus:denylisted:ppid:](v24, "initWithName:manufacturer:modelName:category:certificationStatus:denylisted:ppid:", v25, 0, 0, v26, 0, 0, 0);

      if (a2)
      {
        v28 = 4;
      }
      else
      {
        v43 = *(id *)(a1 + 32);
        v45 = sub_10007CCE4((uint64_t)v43, v44);
        v46 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          v47 = sub_10007CD2C(v43);
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          *(_DWORD *)buf = 138543362;
          v60 = v48;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%{public}@The accessory does not support pair setup auth, prompting for user permission to pair the accessory", buf, 0xCu);

        }
        v28 = 0;
      }
      objc_msgSend(*(id *)(a1 + 32), "setWaitingForAuth:", 1);
      v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3221225472;
      v56[2] = sub_100060D00;
      v56[3] = &unk_1002377D8;
      v50 = *(_QWORD *)(a1 + 32);
      v57 = v27;
      v58 = v28;
      v56[4] = v50;
      v41 = v27;
      dispatch_async(v49, v56);

      v42 = v57;
      goto LABEL_27;
    }
    v29 = *(id *)(a1 + 32);
    v31 = sub_10007CCE4((uint64_t)v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = sub_10007CD2C(v29);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      *(_DWORD *)buf = 138543362;
      v60 = v34;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, the pairing requires additional authentication and the delegate does not support additional authentication requests", buf, 0xCu);

    }
  }

  v12 = CFSTR("The delegate is missing.");
  v13 = 9;
  v14 = 0;
LABEL_5:
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", v13, CFSTR("Pairing Failed."), v12, 0, v14));
  objc_msgSend(*(id *)(a1 + 32), "_pairingCompletedWithError:", v15);

LABEL_6:
}

void sub_100060D00(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:requestUserPermission:accessoryInfo:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);

}

void sub_100060D48(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:requestUserPermission:accessoryInfo:error:", *(_QWORD *)(a1 + 32), 3, *(_QWORD *)(a1 + 40), 0);

}

void sub_100060FE0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[7];

  v9 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  if (!v6)
    v6 = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000610C0;
  v10[3] = &unk_1002377D8;
  v10[4] = *(_QWORD *)(a1 + 32);
  v10[6] = a2;
  v7 = v6;
  v10[5] = v7;
  sub_1000610C0((uint64_t)v10);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v9);

}

void sub_1000610C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = sub_100020918(*(_QWORD *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v11 = objc_msgSend(*(id *)(a1 + 40), "code");
      v12 = 138544130;
      v13 = v7;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Received pairing features of BTLE accessory with authMethod: %{key:authMethod}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v12, 0x2Au);

    }
  }

}

void sub_1000611F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  id v11;
  void (*v12)(void);
  id v13;
  uint8_t buf[24];

  v4 = a3;
  if (v4)
  {
    v5 = *(id *)(a1 + 32);
    v7 = sub_10007CCE4((uint64_t)v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_10007CD2C(v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to read the Pairing Features characteristic", buf, 0xCu);

    }
    v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 1, CFSTR("Pairing Failed."), CFSTR("Failed to read the Pairing Features characteristic"), 0, v4));
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    v13 = 0;
    *(_QWORD *)buf = 0;
    objc_msgSend(*(id *)(a1 + 32), "_parsePairingFeaturesCharacteristic:authMethod:error:", *(_QWORD *)(a1 + 40), buf, &v13);
    v11 = v13;
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  v12();

}

id sub_10006155C(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000615B0;
  v3[3] = &unk_100237150;
  v3[4] = v1;
  return objc_msgSend(v1, "connectWithCompletionHandler:", v3);
}

void sub_1000615B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  __CFString *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v5 = v4;
    v7 = sub_10007CCE4((uint64_t)v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_10007CD2C(v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *(_DWORD *)buf = 138543618;
      v25 = v10;
      v26 = 2112;
      v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to connect to the accessory with error: %@", buf, 0x16u);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Failed to connect to accessory."), 0, 0, v3));
    objc_msgSend(*(id *)(a1 + 32), "_pairingCompletedWithError:", v11);
  }
  else
  {
    objc_msgSend(v4, "setWaitingForAuth:", 0);
    v12 = *(id *)(a1 + 32);
    v14 = sub_10007CCE4((uint64_t)v12, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = sub_10007CD2C(v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = sub_100020918((unint64_t)objc_msgSend(*(id *)(a1 + 32), "authMethod"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      *(_DWORD *)buf = 138543618;
      v25 = v17;
      v26 = 2112;
      v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%{public}@Starting the Pair Setup session with authMethods: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "setBadPairSetupCode:", 0);
    v20 = objc_msgSend(*(id *)(a1 + 32), "_getPairSetupType");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "pairSetupSession:pairSetupType:enhancedEncryption:", *(_QWORD *)(a1 + 32), v20, objc_msgSend(*(id *)(a1 + 32), "enhancedEncryption")));

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
    objc_msgSend(v22, "pauseScans");

    objc_msgSend(*(id *)(a1 + 32), "setPairSetupSession:", v11);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10006183C;
    v23[3] = &unk_100236AA8;
    v23[4] = *(_QWORD *)(a1 + 32);
    sub_10006183C((uint64_t)v23);
    objc_msgSend(v11, "start");
  }

}

void sub_10006183C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = objc_msgSend(*(id *)(a1 + 32), "_getPairSetupType");
      v9 = 138543618;
      v10 = v7;
      v11 = 2048;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Starting pair setup session with BTLE accessory pairSetupType: %{key:pairSetupType}ld", (uint8_t *)&v9, 0x16u);

    }
  }

}

void sub_100061998(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "setWaitingForAuth:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "isPairing"))
  {
    v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Pairing cancelled."), 0, 0, 0));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairSetupSession"));

    v3 = *(void **)(a1 + 32);
    if (v2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pairSetupSession"));
      objc_msgSend(v4, "stopWithError:", v11);

    }
    else
    {
      objc_msgSend(v3, "_pairingCompletedWithError:", v11);
    }

  }
  else if (!objc_msgSend(*(id *)(a1 + 32), "pendingRemovePairing"))
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isPaired") & 1) != 0
      || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyStore")),
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier")),
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "readControllerPairingKeyForAccessory:error:", v6, 0)),
          v6,
          v5,
          v7,
          v7))
    {
      objc_msgSend(*(id *)(a1 + 32), "setPendingRemovePairing:", 1);
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveryContext"));
      if (!v8
        || (v9 = (void *)v8,
            v10 = objc_msgSend(*(id *)(a1 + 32), "isSecuritySessionOpen"),
            v9,
            v10))
      {
        objc_msgSend(*(id *)(a1 + 32), "_removePairingOfAccessoryServerCancelledMidPairing");
      }
    }
  }
}

void sub_100061D1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[7];

  v7 = a2;
  v3 = sub_100085434(*(void **)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  if (!v6)
    v6 = v7;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100061DE8;
  v8[3] = &unk_100236EA8;
  v8[4] = *(_QWORD *)(a1 + 40);
  v8[5] = v4;
  v8[6] = v6;
  sub_100061DE8((uint64_t)v8);

}

void sub_100061DE8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "domain"));
      v10 = objc_msgSend(*(id *)(a1 + 48), "code");
      v11 = 138544130;
      v12 = v7;
      v13 = 2112;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Pair Setup operation failed for accessory in state: %{key:pairingState}@                                              with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v11, 0x2Au);

    }
  }

}

void sub_100061F04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;

  v5 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "value"));
  if (v5)
  {
    v8 = *(id *)(a1 + 32);
    v10 = sub_10007CCE4((uint64_t)v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sub_10007CD2C(v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v23 = 138543618;
      v24 = v13;
      v25 = 2112;
      v26 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to send Pair Setup exchange data with error: %@", (uint8_t *)&v23, 0x16u);

    }
    v14 = v5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_11;
  }
  v15 = objc_opt_class(NSData, v6);
  if ((objc_opt_isKindOfClass(v7, v15) & 1) != 0)
  {
    v14 = 0;
    goto LABEL_11;
  }
  v16 = *(id *)(a1 + 32);
  v18 = sub_10007CCE4((uint64_t)v16, v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v20 = sub_10007CD2C(v16);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v23 = 138543618;
    v24 = v21;
    v25 = 2112;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@The Pair Setup exchange response value, %@, is invalid", (uint8_t *)&v23, 0x16u);

  }
  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Pairing Failed."), CFSTR("Invalid Pair Setup exchange response."), 0, 0));
  if (v14)
    goto LABEL_5;
LABEL_11:
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairSetupSession"));
  objc_msgSend(v22, "receivedSetupExchangeData:error:", v7, v14);

  objc_msgSend(*(id *)(a1 + 40), "setValue:", 0);
}

void sub_100062348(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "pairSetupBackoffTimeInterval");
  objc_msgSend(v4, "accessoryServer:didReceiveBadPasswordThrottleAttemptsWithDelay:", v2, (uint64_t)v3);

}

void sub_10006239C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:promptUserForPasswordWithType:", *(_QWORD *)(a1 + 32), 1);

}

void sub_10006247C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void (**v4)(id, _QWORD, void *);

  v4 = (void (**)(id, _QWORD, void *))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "setupCodeCompletionHandler"));
  if (v4)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      v3 = 0;
    }
    else
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid setup code."), CFSTR("The setup code is nil"), 0, 0));
      v2 = *(_QWORD *)(a1 + 40);
    }
    v4[2](v4, v2, v3);
    objc_msgSend(*(id *)(a1 + 32), "setSetupCodeCompletionHandler:", 0);

  }
  objc_msgSend(*(id *)(a1 + 32), "_resumeConnectionIdleTimer");

}

void sub_10006283C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[7];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v4, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v6 = v5;

  v14 = v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userInfo"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  v9 = v14;
  if (v8)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10006299C;
  v15[3] = &unk_1002377D8;
  v15[4] = *(_QWORD *)(a1 + 40);
  v15[6] = v6;
  v11 = v9;
  v15[5] = v11;
  sub_10006299C((uint64_t)v15);
  v12 = *(void **)(a1 + 40);
  if (v14)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "authSession"));
    objc_msgSend(v12, "authSession:authComplete:", v13, v14);

  }
  else
  {
    objc_msgSend(v12, "authenticateAccessory");
  }

}

void sub_10006299C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v10 = objc_msgSend(*(id *)(a1 + 40), "code");
      v11 = 138544130;
      v12 = v7;
      v13 = 2112;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Received accessory info for accessory with duration: %{key:duration}@,                                                  error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v11, 0x2Au);

    }
  }

}

void sub_100062AD4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "authenticatedProtocolInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "modelName"));
  objc_msgSend(v6, "accessoryServer:validateCert:model:", v3, v2, v5);

}

void sub_100062E8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void ***v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  NSObject *v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *, void *);
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;

  v2 = *(_QWORD *)(a1 + 32);
  v25 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[HAPPairingUtilities createAddPairingRequestForPairingIdentity:error:](HAPPairingUtilities, "createAddPairingRequestForPairingIdentity:error:", v2, &v25));
  v4 = v25;
  if (v3)
  {
    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_1000630F0;
    v18 = &unk_1002378C8;
    v5 = *(void **)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = v5;
    v21 = *(id *)(a1 + 56);
    v6 = objc_retainBlock(&v15);
    objc_msgSend(*(id *)(a1 + 40), "_sendPairingRequestData:completionHandler:", v3, v6, v15, v16, v17, v18, v19);

    v7 = v20;
LABEL_3:

    goto LABEL_4;
  }
  v8 = *(id *)(a1 + 40);
  v10 = sub_10007CCE4((uint64_t)v8, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = sub_10007CD2C(v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *(_DWORD *)buf = 138543618;
    v27 = v13;
    v28 = 2112;
    v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to create add pairing request payload with error: %@", buf, 0x16u);

  }
  v14 = *(NSObject **)(a1 + 48);
  if (v14 && *(_QWORD *)(a1 + 56))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100063088;
    block[3] = &unk_1002369C8;
    v23 = v4;
    v24 = *(id *)(a1 + 56);
    dispatch_async(v14, block);

    v7 = v23;
    goto LABEL_3;
  }
LABEL_4:

}

void sub_100063088(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Add pairing failed."), CFSTR("Failed to create add pairing request payload."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000630F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  NSObject *v13;
  id v14;
  unsigned __int8 v15;
  NSObject *v16;
  void *v17;
  id *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  _QWORD block[4];
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v31 = 0;
    v15 = +[HAPPairingUtilities parseAddPairingResponse:error:](HAPPairingUtilities, "parseAddPairingResponse:error:", v5, &v31);
    v14 = v31;
    if ((v15 & 1) != 0)
    {
      v16 = *(NSObject **)(a1 + 40);
      if (!v16)
        goto LABEL_17;
      v17 = *(void **)(a1 + 48);
      if (!v17)
        goto LABEL_17;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1000634C0;
      v26[3] = &unk_100236DC0;
      v18 = &v27;
      v27 = v17;
      dispatch_async(v16, v26);
    }
    else
    {
      v19 = *(id *)(a1 + 32);
      v21 = sub_10007CCE4((uint64_t)v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = sub_10007CD2C(v19);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)buf = 138543618;
        v36 = v24;
        v37 = 2112;
        v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to add pairing, peer responded with error: %@", buf, 0x16u);

      }
      v25 = *(NSObject **)(a1 + 40);
      if (!v25 || !*(_QWORD *)(a1 + 48))
        goto LABEL_17;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100063458;
      v28[3] = &unk_1002369C8;
      v18 = &v29;
      v29 = v14;
      v30 = *(id *)(a1 + 48);
      dispatch_async(v25, v28);

    }
LABEL_17:

    goto LABEL_18;
  }
  v7 = *(id *)(a1 + 32);
  v9 = sub_10007CCE4((uint64_t)v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11 = sub_10007CD2C(v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)buf = 138543618;
    v36 = v12;
    v37 = 2112;
    v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to add pairing with error: %@", buf, 0x16u);

  }
  v13 = *(NSObject **)(a1 + 40);
  if (v13 && *(_QWORD *)(a1 + 48))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000633F0;
    block[3] = &unk_1002369C8;
    v33 = v6;
    v34 = *(id *)(a1 + 48);
    dispatch_async(v13, block);

    v14 = v33;
    goto LABEL_17;
  }
LABEL_18:

}

void sub_1000633F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Add pairing failed."), CFSTR("Add pairing write failed."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100063458(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Add pairing failed."), CFSTR("The peer failed to add the pairing."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_1000634C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000635B4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void ***v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *, void *);
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessoryCache"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "peripheralInfo"));
  objc_msgSend(v3, "resetBroadcastKeyConfig");

  v4 = *(_QWORD *)(a1 + 40);
  v26 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[HAPPairingUtilities createRemovePairingRequestForPairingIdentity:error:](HAPPairingUtilities, "createRemovePairingRequestForPairingIdentity:error:", v4, &v26));
  v6 = v26;
  if (v5)
  {
    v16 = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_100063844;
    v19 = &unk_1002378C8;
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(id *)(a1 + 48);
    v22 = *(id *)(a1 + 56);
    v7 = objc_retainBlock(&v16);
    objc_msgSend(*(id *)(a1 + 32), "_sendPairingRequestData:completionHandler:", v5, v7, v16, v17, v18, v19, v20);

    v8 = v21;
LABEL_3:

    goto LABEL_4;
  }
  v9 = *(id *)(a1 + 32);
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = sub_10007CD2C(v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138543618;
    v28 = v14;
    v29 = 2112;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to create remove pairing request payload with error: %@", buf, 0x16u);

  }
  v15 = *(NSObject **)(a1 + 48);
  if (v15 && *(_QWORD *)(a1 + 56))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000637DC;
    block[3] = &unk_1002369C8;
    v24 = v6;
    v25 = *(id *)(a1 + 56);
    dispatch_async(v15, block);

    v8 = v24;
    goto LABEL_3;
  }
LABEL_4:

}

void sub_1000637DC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Remove pairing failed."), CFSTR("Failed to create remove pairing request payload."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100063844(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  NSObject *v13;
  id v14;
  unsigned __int8 v15;
  NSObject *v16;
  void *v17;
  id *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  _QWORD block[4];
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v31 = 0;
    v15 = +[HAPPairingUtilities parseRemovePairingResponse:error:](HAPPairingUtilities, "parseRemovePairingResponse:error:", v5, &v31);
    v14 = v31;
    if ((v15 & 1) != 0)
    {
      v16 = *(NSObject **)(a1 + 40);
      if (!v16)
        goto LABEL_17;
      v17 = *(void **)(a1 + 48);
      if (!v17)
        goto LABEL_17;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100063C14;
      v26[3] = &unk_100236DC0;
      v18 = &v27;
      v27 = v17;
      dispatch_async(v16, v26);
    }
    else
    {
      v19 = *(id *)(a1 + 32);
      v21 = sub_10007CCE4((uint64_t)v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = sub_10007CD2C(v19);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)buf = 138543618;
        v36 = v24;
        v37 = 2112;
        v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove pairing, peer responded with error: %@", buf, 0x16u);

      }
      v25 = *(NSObject **)(a1 + 40);
      if (!v25 || !*(_QWORD *)(a1 + 48))
        goto LABEL_17;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100063BAC;
      v28[3] = &unk_1002369C8;
      v18 = &v29;
      v29 = v14;
      v30 = *(id *)(a1 + 48);
      dispatch_async(v25, v28);

    }
LABEL_17:

    goto LABEL_18;
  }
  v7 = *(id *)(a1 + 32);
  v9 = sub_10007CCE4((uint64_t)v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11 = sub_10007CD2C(v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)buf = 138543618;
    v36 = v12;
    v37 = 2112;
    v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove pairing with error: %@", buf, 0x16u);

  }
  v13 = *(NSObject **)(a1 + 40);
  if (v13 && *(_QWORD *)(a1 + 48))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100063B44;
    block[3] = &unk_1002369C8;
    v33 = v6;
    v34 = *(id *)(a1 + 48);
    dispatch_async(v13, block);

    v14 = v33;
    goto LABEL_17;
  }
LABEL_18:

}

void sub_100063B44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Remove pairing failed."), CFSTR("Remove pairing write failed."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100063BAC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Remove pairing failed."), CFSTR("The peer failed to remove the pairing."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100063C14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100063F34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_100063F70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100063F80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  __CFString *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  id v36;
  id v37;
  _QWORD v38[4];
  NSObject *v39;
  id v40;
  id v41;
  _QWORD block[4];
  id v43;
  id v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;

  v3 = a2;
  v4 = objc_loadWeakRetained((id *)(a1 + 56));
  v6 = sub_10007CCE4((uint64_t)v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = sub_10007CD2C(v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)buf = 138543618;
    v47 = v9;
    v48 = 2112;
    v49 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}@Request to remove current controller completed with error %@", buf, 0x16u);

  }
  v10 = v3;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "browser"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v11, "deRegisterAccessoryWithIdentifier:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "keyStore"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v45 = 0;
  v15 = objc_msgSend(v13, "removeAccessoryKeyForName:error:", v14, &v45);
  v16 = v45;

  if ((v15 & 1) == 0)
  {
    v17 = v4;
    v19 = sub_10007CCE4((uint64_t)v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = sub_10007CD2C(v17);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      *(_DWORD *)buf = 138543618;
      v47 = v22;
      v48 = 2112;
      v49 = v16;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}@Failed to remove the current controller keychain entry with error: %@", buf, 0x16u);

    }
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "keyStore"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v44 = v16;
  v25 = objc_msgSend(v23, "deletePeripheralIdentifierForAccessoryIdentifier:error:", v24, &v44);
  v26 = v44;

  if ((v25 & 1) == 0)
  {
    v27 = v4;
    v29 = sub_10007CCE4((uint64_t)v27, v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = sub_10007CD2C(v27);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "identifier"));
      *(_DWORD *)buf = 138543874;
      v47 = v32;
      v48 = 2112;
      v49 = v33;
      v50 = 2112;
      v51 = v26;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%{public}@Failed to remove the peripheral keychain entry for %@ with error: %@", buf, 0x20u);

    }
  }
  v34 = *(NSObject **)(a1 + 32);
  if (v34)
  {
    v35 = *(void **)(a1 + 40);
    if (v35)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100064334;
      block[3] = &unk_100236DC0;
      v43 = v35;
      dispatch_async(v34, block);

      v34 = *(NSObject **)(a1 + 32);
    }
  }
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100064344;
  v38[3] = &unk_1002378F0;
  v39 = v34;
  v36 = *(id *)(a1 + 48);
  v40 = v10;
  v41 = v36;
  v37 = v10;
  objc_msgSend(v4, "disconnectWithCompletionHandler:", v38);

}

uint64_t sub_100064334(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100064344(uint64_t a1)
{
  NSObject *v1;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v1 = *(NSObject **)(a1 + 32);
  if (v1)
  {
    v3 = *(void **)(a1 + 48);
    if (v3)
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1000643D4;
      v4[3] = &unk_100236E80;
      v6 = v3;
      v5 = *(id *)(a1 + 40);
      dispatch_async(v1, v4);

    }
  }
}

uint64_t sub_1000643D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000644A0(id *a1)
{
  void *v2;
  id v3;
  id *v4;
  void ***v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  NSObject *v12;
  id v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *, void *);
  void *v17;
  id v18;
  id v19;
  id v20;
  _QWORD block[4];
  id v22;
  id v23;
  id v24;
  _BYTE location[12];
  __int16 v26;
  id v27;

  v24 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[HAPPairingUtilities createListPairingsRequest:](HAPPairingUtilities, "createListPairingsRequest:", &v24));
  v3 = v24;
  if (v2)
  {
    v4 = a1 + 4;
    objc_initWeak((id *)location, a1[4]);
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_100064708;
    v17 = &unk_100237940;
    objc_copyWeak(&v20, (id *)location);
    v18 = a1[5];
    v19 = a1[6];
    v5 = objc_retainBlock(&v14);
    objc_msgSend(*v4, "_sendPairingRequestData:completionHandler:", v2, v5, v14, v15, v16, v17);

    objc_destroyWeak(&v20);
    objc_destroyWeak((id *)location);
  }
  else
  {
    v6 = a1[4];
    v8 = sub_10007CCE4((uint64_t)v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = sub_10007CD2C(v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v11;
      v26 = 2112;
      v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to create list pairings request payload with error: %@", location, 0x16u);

    }
    v12 = a1[5];
    if (v12)
    {
      v13 = a1[6];
      if (v13)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000646F4;
        block[3] = &unk_100236E80;
        v23 = v13;
        v22 = v3;
        dispatch_async(v12, block);

      }
    }
  }

}

void sub_1000646D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1000646F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_100064708(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  __CFString *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD block[4];
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (!v6)
  {
    v30 = 0;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[HAPPairingUtilities parseListPairingsResponse:error:](HAPPairingUtilities, "parseListPairingsResponse:error:", v5, &v30));
    v16 = v30;
    if (!v17)
    {
      v18 = v8;
      v20 = sub_10007CCE4((uint64_t)v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = sub_10007CD2C(v18);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        *(_DWORD *)buf = 138543618;
        v35 = v23;
        v36 = 2112;
        v37 = v16;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to list pairings, peer responded with error: %@", buf, 0x16u);

      }
    }
    v24 = *(NSObject **)(a1 + 32);
    if (v24)
    {
      v25 = *(void **)(a1 + 40);
      if (v25)
      {
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100064A28;
        v26[3] = &unk_100236E08;
        v29 = v25;
        v27 = v17;
        v28 = v16;
        dispatch_async(v24, v26);

      }
    }

    goto LABEL_15;
  }
  v9 = WeakRetained;
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = sub_10007CD2C(v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138543618;
    v35 = v14;
    v36 = 2112;
    v37 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get pairings with error: %@", buf, 0x16u);

  }
  v15 = *(NSObject **)(a1 + 32);
  if (v15 && *(_QWORD *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000649BC;
    block[3] = &unk_1002369C8;
    v32 = v6;
    v33 = *(id *)(a1 + 40);
    dispatch_async(v15, block);

    v16 = v32;
LABEL_15:

  }
}

void sub_1000649BC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("List pairings failed."), CFSTR("List pairings write failed."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100064A28(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100064C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064C50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  id v30;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (!v6)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v18 = objc_opt_class(NSData, v17);
    if ((objc_opt_isKindOfClass(v15, v18) & 1) == 0)
    {
      v20 = v8;
      v22 = sub_10007CCE4((uint64_t)v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = sub_10007CD2C(v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v27 = 138543362;
        v28 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}@Pairing operation failed, the response value is invalid", (uint8_t *)&v27, 0xCu);

      }
      if (*(_QWORD *)(a1 + 32))
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Pairing operation failed."), CFSTR("Pairing response is invalid."), 0, 0));
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

      }
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(a1 + 32);
    if (!v19)
    {
LABEL_10:

      goto LABEL_11;
    }
    v16 = *(void (**)(void))(v19 + 16);
LABEL_9:
    v16();
    goto LABEL_10;
  }
  v9 = WeakRetained;
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = sub_10007CD2C(v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v27 = 138543618;
    v28 = v14;
    v29 = 2112;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to write pairing request data with error: %@", (uint8_t *)&v27, 0x16u);

  }
  if (*(_QWORD *)(a1 + 32))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Pairing operation failed."), CFSTR("Pairing write failed."), 0, v6));
    v16 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    goto LABEL_9;
  }
LABEL_11:

}

void sub_100065040(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006505C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id *v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  void *v22;
  NSObject *v23;
  _QWORD v24[5];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD block[4];
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (!v3)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "identifyCharacteristic"));
    if (v13)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100065424;
      v24[3] = &unk_100237990;
      v14 = &v25;
      v15 = *(id *)(a1 + 32);
      v24[4] = v5;
      v25 = v15;
      v16 = objc_retainBlock(v24);
      objc_msgSend(v5, "_writeValue:toCharacteristic:authorizationData:contextData:options:completionHandler:", &__kCFBooleanTrue, v13, 0, 0, 0, v16);

    }
    else
    {
      v17 = v5;
      v19 = sub_10007CCE4((uint64_t)v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = sub_10007CD2C(v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        *(_DWORD *)buf = 138543362;
        v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@Identify failed, missing the Identify characteristic", buf, 0xCu);

      }
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_13;
      v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "clientQueue"));
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1000653BC;
      v26[3] = &unk_100236DC0;
      v14 = &v27;
      v27 = *(id *)(a1 + 32);
      dispatch_async(v23, v26);

    }
LABEL_13:

    goto LABEL_14;
  }
  v6 = WeakRetained;
  v8 = sub_10007CCE4((uint64_t)v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = sub_10007CD2C(v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_DWORD *)buf = 138543618;
    v32 = v11;
    v33 = 2112;
    v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Cancelling operation, identity discovery failed with error: %@", buf, 0x16u);

  }
  if (*(_QWORD *)(a1 + 32))
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "clientQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100065354;
    block[3] = &unk_1002369C8;
    v29 = v3;
    v30 = *(id *)(a1 + 32);
    dispatch_async(v12, block);

    v13 = v29;
    goto LABEL_13;
  }
LABEL_14:

}

void sub_100065354(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Identify failed."), CFSTR("Discovery of the Identify characteristic failed."), 0, *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000653BC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Identify failed."), CFSTR("Missing Identify characteristic."), 0, 0));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100065424(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v4 = a3;
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000654D4;
    v6[3] = &unk_100236E80;
    v8 = *(id *)(a1 + 40);
    v7 = v4;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_1000654D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100065A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;
  id *v27;
  id *v28;
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v30 - 128));
  _Unwind_Resume(a1);
}

void sub_100065AEC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && (objc_msgSend(WeakRetained, "isCancelled") & 1) == 0)
  {
    v4 = *(void **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100065BD4;
    v6[3] = &unk_1002379B8;
    objc_copyWeak(&v9, (id *)(a1 + 56));
    v7 = v3;
    v8 = *(id *)(a1 + 40);
    objc_msgSend(v4, "_reallySendRequest:completionHandler:", v5, v6);

    objc_destroyWeak(&v9);
  }

}

void sub_100065BC0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100065BD4(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v7)
  {
    objc_msgSend(a1[4], "cancelWithError:", v7);
  }
  else
  {
    v4 = objc_alloc((Class)HMFTimer);
    objc_msgSend(a1[5], "timeoutInterval");
    v5 = objc_msgSend(v4, "initWithTimeInterval:options:", 1);
    objc_msgSend(v5, "setDelegate:", WeakRetained);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "clientQueue"));
    objc_msgSend(v5, "setDelegateQueue:", v6);

    objc_msgSend(a1[5], "setResponseTimer:", v5);
    objc_msgSend(WeakRetained, "_requestResponseForRequest:", a1[5]);

  }
}

void sub_100065CA0(id *a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v3 = objc_loadWeakRetained(a1 + 7);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "clientQueue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100065D74;
  v7[3] = &unk_100237558;
  v7[4] = WeakRetained;
  v8 = a1[4];
  v5 = a1[5];
  v9 = v3;
  v10 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void sub_100065D74(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint8_t buf[4];
  void *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_pendingResponseForRequest:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingRequests"));
  objc_msgSend(v3, "removeObject:", *(_QWORD *)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingResponses"));
  objc_msgSend(v4, "removeObject:", v2);

  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
    (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v2, v6);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "_outstandingRequests"))
  {
    v7 = *(id *)(a1 + 32);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543362;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%{public}@Resuming connection idle timer as there are no outstanding requests", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 32), "_resumeConnectionIdleTimer");
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  if (v13 && (objc_msgSend(*(id *)(a1 + 32), "_shouldIgnoreRetryDiscoveryError:", v13) & 1) == 0)
  {
    v14 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100065F58;
    v15[3] = &unk_1002378A0;
    v15[4] = v14;
    v16 = *(id *)(a1 + 48);
    objc_msgSend(v14, "disconnectWithCompletionHandler:", v15);

  }
}

void sub_100065F58(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;

  if (a2)
  {
    v3 = *(id *)(a1 + 32);
    v5 = sub_10007CCE4((uint64_t)v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = sub_10007CD2C(v3);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v11 = 138543362;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to disconnect from the accessory, resetting the server", (uint8_t *)&v11, 0xCu);

    }
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    objc_msgSend(v9, "_resetWithError:", v10);

  }
}

void sub_100066104(id *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  HAPBTLETransactionIdentifier *v22;
  void *v23;
  HAPBTLETransactionIdentifier *v24;
  HAPBTLEControlOutputStream *v25;
  void *v26;
  HAPBTLEControlOutputStream *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  __CFString *v33;
  void *v34;
  void **v35;
  uint64_t v36;
  void (*v37)(uint64_t, void *);
  void *v38;
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;

  v2 = a1[4];
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = a1[5];
    *(_DWORD *)buf = 138543618;
    v42 = v7;
    v43 = 2112;
    v44 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Sending request: %@", buf, 0x16u);

  }
  v9 = a1[4];
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = sub_10007CD2C(v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "characteristic"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "type"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "characteristic"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "instanceID"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "serialize"));
    *(_DWORD *)buf = 138544130;
    v42 = v14;
    v43 = 2112;
    v44 = v16;
    v45 = 2112;
    v46 = v18;
    v47 = 2112;
    v48 = v19;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{public}@Serialized Request '%@/%@' -> %@", buf, 0x2Au);

  }
  v20 = objc_msgSend(a1[4], "_maximumControlWriteLengthForRequest:", a1[5]);
  if (v20)
  {
    v21 = v20;
    v22 = [HAPBTLETransactionIdentifier alloc];
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "identifier"));
    v24 = -[HAPBTLETransactionIdentifier initWithUnsignedCharValue:](v22, "initWithUnsignedCharValue:", objc_msgSend(v23, "unsignedCharValue"));

    v25 = [HAPBTLEControlOutputStream alloc];
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "serialize"));
    v27 = -[HAPBTLEControlOutputStream initWithControlType:transactionIdentifier:controlPayload:mtuLength:timeoutInterval:](v25, "initWithControlType:transactionIdentifier:controlPayload:mtuLength:timeoutInterval:", 0, v24, v26, v21, 4.0);

    -[HAPBTLEControlOutputStream setDelegate:](v27, "setDelegate:", a1[4]);
    v35 = _NSConcreteStackBlock;
    v36 = 3221225472;
    v37 = sub_1000664D0;
    v38 = &unk_100237A30;
    v39 = a1[4];
    v40 = a1[6];
    -[HAPBTLEControlOutputStream setCompletionHandler:](v27, "setCompletionHandler:", &v35);
    objc_msgSend(a1[4], "_suspendConnectionIdleTimer", v35, v36, v37, v38, v39);
    objc_msgSend(a1[5], "setControlOutputStream:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "pendingRequests"));
    objc_msgSend(v28, "addObject:", a1[5]);

    -[HAPBTLEControlOutputStream open](v27, "open");
LABEL_11:

    return;
  }
  v29 = a1[4];
  v31 = sub_10007CCE4((uint64_t)v29, v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v33 = sub_10007CD2C(v29);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    *(_DWORD *)buf = 138543362;
    v42 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine the control write length", buf, 0xCu);

  }
  if (a1[6])
  {
    v24 = (HAPBTLETransactionIdentifier *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 1, CFSTR("Control write failed."), CFSTR("Failed to determine the control write length"), 0, 0));
    (*((void (**)(void))a1[6] + 2))();
    goto LABEL_11;
  }
}

void sub_1000664D0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientQueue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100066578;
  v7[3] = &unk_100236E80;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_100066578(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100066940(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  __CFString *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v19 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_encryptDataAndGenerateAuthTag:error:", v3, &v19));
  v5 = v19;
  if (v4)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cbCharacteristic"));
    v7 = *(void **)(a1 + 32);
    if (v6)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "peripheral"));
      -[NSObject writeValue:forCharacteristic:type:](v8, "writeValue:forCharacteristic:type:", v4, v6, 1);
    }
    else
    {
      v8 = v7;
      v14 = sub_10007CCE4((uint64_t)v8, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = sub_10007CD2C(v8);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v21 = v17;
        v22 = 2112;
        v23 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@Missing mapped characteristic for characteristic: %@", buf, 0x16u);

      }
    }
  }
  else
  {
    v6 = *(id *)(a1 + 32);
    v10 = sub_10007CCE4((uint64_t)v6, v9);
    v8 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543618;
      v21 = v12;
      v22 = 2112;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to encrypt raw data payload with error: %@", buf, 0x16u);

    }
  }

}

void sub_100067B28(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:didUpdateValuesForCharacteristic:value:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100068A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100068A30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  __CFString *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v6)
  {
    v9 = WeakRetained;
    v11 = sub_10007CCE4((uint64_t)v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_10007CD2C(v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v24 = 138543618;
      v25 = v14;
      v26 = 2112;
      v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to send Protocol Exchange error: %@", (uint8_t *)&v24, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    if (objc_msgSend(v5, "statusCode"))
    {
      v15 = v8;
      v17 = sub_10007CCE4((uint64_t)v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = sub_10007CD2C(v15);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v24 = 138543618;
        v25 = v20;
        v26 = 1024;
        LODWORD(v27) = objc_msgSend(v5, "statusCode");
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@Protocol Exchange failed with status: %d", (uint8_t *)&v24, 0x12u);

      }
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 8, 0));
      (*(void (**)(uint64_t, void *, _QWORD))(v21 + 16))(v21, v22, 0);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 32);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "body"));
      (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v22);
    }

  }
}

void sub_10006999C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000699C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  id v29;

  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "value"));

  if (v5)
  {
    v10 = WeakRetained;
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v26 = 138543618;
      v27 = v15;
      v28 = 2112;
      v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to send security session exchange data with error: %@", (uint8_t *)&v26, 0x16u);

    }
    v16 = v5;
LABEL_10:
    v18 = v16;
    goto LABEL_11;
  }
  v17 = objc_opt_class(NSData, v9);
  if ((objc_opt_isKindOfClass(v8, v17) & 1) == 0)
  {
    v19 = WeakRetained;
    v21 = sub_10007CCE4((uint64_t)v19, v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = sub_10007CD2C(v19);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v26 = 138543618;
      v27 = v24;
      v28 = 2112;
      v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}@The security session exchange response value, %@, is invalid", (uint8_t *)&v26, 0x16u);

    }
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 12, CFSTR("Security session setup exchange failed."), CFSTR("Invalid Pair Verify exchange response."), 0, 0));
    goto LABEL_10;
  }
  v18 = 0;
LABEL_11:
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "securitySession"));
  objc_msgSend(v25, "receivedSetupExchangeData:error:", v8, v18);

  objc_msgSend(*(id *)(a1 + 32), "setValue:", 0);
}

void sub_10006A138(uint64_t a1)
{
  unint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  void ***v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void (*v26)(_QWORD *, void *);
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  unint64_t v37;

  v2 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "connectionState");
  v24 = _NSConcreteStackBlock;
  v25 = 3221225472;
  v26 = sub_10006A434;
  v27 = &unk_100237AA8;
  v31 = v2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v28 = v3;
  v29 = v4;
  v30 = v5;
  v6 = objc_retainBlock(&v24);
  if (v2)
  {
    if ((v2 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      v7 = *(id *)(a1 + 32);
      v9 = sub_10007CCE4((uint64_t)v7, v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = sub_10007CD2C(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        *(_DWORD *)buf = 138543874;
        v33 = v12;
        v34 = 2112;
        v35 = CFSTR("Trying to connect but a connection is already in progress");
        v36 = 2048;
        v37 = v2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@%@ %ld", buf, 0x20u);

      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 4, CFSTR("Trying to connect but a connection is already in progress"), 0, 0, 0, v24, v25, v26, v27, v28, v29));
    }
    else
    {
      v13 = 0;
    }
    ((void (*)(void ***, void *))v6[2])(v6, v13);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setConnectionCompletionHandler:", v6, v24, v25, v26, v27, v28, v29);
    v14 = *(id *)(a1 + 32);
    v16 = sub_10007CCE4((uint64_t)v14, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = sub_10007CD2C(v14);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "blePeripheral"));
      v21 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "shortDescription"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(*(id *)(a1 + 32), "connectReason")));
      *(_DWORD *)buf = 138543874;
      v33 = v19;
      v34 = 2112;
      v35 = v21;
      v36 = 2112;
      v37 = (unint64_t)v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%{public}@Connecting to the peripheral: %@. Connection Reason: %@", buf, 0x20u);

    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
    objc_msgSend(v23, "connectToBTLEAccessoryServer:", *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 32), "_restartConnectionIdleTimer:", 2.0);
    objc_msgSend(*(id *)(a1 + 32), "setConnectionState:", 1);
  }

}

void sub_10006A434(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[7];

  v3 = a2;
  v9 = v3;
  if (a1[7] != 2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v4, "timeIntervalSinceDate:", a1[4]);
    v6 = v5;

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10006A4FC;
    v10[3] = &unk_1002377D8;
    v7 = a1[5];
    v10[6] = v6;
    v10[4] = v7;
    v10[5] = v9;
    sub_10006A4FC((uint64_t)v10);
    v3 = v9;
  }
  v8 = a1[6];
  if (v8)
  {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    v3 = v9;
  }

}

void sub_10006A4FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v10 = objc_msgSend(*(id *)(a1 + 40), "code");
      v11 = 138544130;
      v12 = v7;
      v13 = 2112;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Connected to BTLE accessory with duration: %{key:duration}@,                                                      error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v11, 0x2Au);

    }
  }

}

void sub_10006A874(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from BTLE accessory with duration:                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_10006AA4C(uint64_t a1)
{
  unint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const __CFString *v30;

  v2 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "connectionState");
  if (v2 == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setConnectionCompletionHandler:", *(_QWORD *)(a1 + 48));
    v3 = *(id *)(a1 + 32);
    v5 = sub_10007CCE4((uint64_t)v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = sub_10007CD2C(v3);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "blePeripheral"));
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortDescription"));
      *(_DWORD *)buf = 138543618;
      v28 = v8;
      v29 = 2112;
      v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{public}@Disconnecting from the peripheral: %@", buf, 0x16u);

    }
    v21 = _NSConcreteStackBlock;
    v22 = 3221225472;
    v23 = sub_10006ACCC;
    v24 = &unk_100236AD0;
    v11 = *(void **)(a1 + 40);
    v25 = *(_QWORD *)(a1 + 32);
    v26 = v11;
    sub_10006ACCC((uint64_t)&v21);
    objc_msgSend(*(id *)(a1 + 32), "_suspendConnectionIdleTimer", v21, v22, v23, v24, v25);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
    objc_msgSend(v12, "disconnectFromBTLEAccessoryServer:", *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 32), "setConnectionState:", 3);
  }
  else
  {
    if ((v2 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      v13 = *(id *)(a1 + 32);
      v15 = sub_10007CCE4((uint64_t)v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = sub_10007CD2C(v13);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        *(_DWORD *)buf = 138543618;
        v28 = v18;
        v29 = 2112;
        v30 = CFSTR("Trying to disconnect but a connection is already in progress");
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 4, CFSTR("Trying to disconnect but a connection is already in progress"), 0, 0, 0));
    }
    else
    {
      v19 = 0;
    }
    v20 = *(_QWORD *)(a1 + 48);
    if (v20)
      (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v19);

  }
}

void sub_10006ACCC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from BTLE accessory with duration:                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

id sub_10006AE5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConnectionIdleTime:", *(unsigned __int8 *)(a1 + 40));
}

id sub_10006B0E4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peripheral"));
  objc_msgSend(v2, "setDelegate:", 0);

  objc_msgSend(*(id *)(a1 + 32), "updatePeripheral:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peripheral"));
  objc_msgSend(v3, "setDelegate:", *(_QWORD *)(a1 + 32));

  return _objc_msgSend(*(id *)(a1 + 32), "_handleConnectionWithError:", *(_QWORD *)(a1 + 48));
}

void sub_10006B414(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  __CFString *v29;
  void *v30;
  int8x16_t v31;
  void **v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  void *v35;
  int8x16_t v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  uint64_t v42;

  v2 = *(id *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v5 = sub_10007CCE4((uint64_t)v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = sub_10007CD2C(v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    v38 = v8;
    v39 = 2112;
    v40 = v2;
    v41 = 2048;
    v42 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{public}@The connection disconnected with error = %@ duration = %.3f seconds", buf, 0x20u);

  }
  if (objc_msgSend(*(id *)(a1 + 40), "connectionState") == (id)1 && !v2)
  {
    v10 = *(id *)(a1 + 40);
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 138543362;
      v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@Received a disconnection while a connection was in progress", buf, 0xCu);

    }
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 2, CFSTR("Connection failed."), CFSTR("Connection was cancelled."), 0, 0));
  }
  objc_msgSend(*(id *)(a1 + 40), "setConnectionState:", 0);
  v32 = _NSConcreteStackBlock;
  v33 = 3221225472;
  v34 = sub_10006B764;
  v35 = &unk_100236AD0;
  v31 = *(int8x16_t *)(a1 + 32);
  v16 = (id)v31.i64[0];
  v36 = vextq_s8(v31, v31, 8uLL);
  sub_10006B764((uint64_t)&v32);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "connectionCompletionHandler"));
  v18 = objc_retainBlock(v17);
  v19 = v18;
  if (v18)
    (*((void (**)(id, id))v18 + 2))(v18, v2);

  objc_msgSend(*(id *)(a1 + 40), "setConnectionCompletionHandler:", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "discoveryContext"));

  v21 = *(void **)(a1 + 40);
  if (v20)
  {
    if ((objc_msgSend(v21, "_cancelDiscoveryWithError:", v2) & 1) != 0)
    {
      v22 = 0;
      goto LABEL_17;
    }
  }
  else if ((objc_msgSend(v21, "isPaired") & 1) == 0
         && (objc_msgSend(*(id *)(a1 + 40), "isPairing") & 1) == 0)
  {
    v25 = *(id *)(a1 + 40);
    v27 = sub_10007CCE4((uint64_t)v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v29 = sub_10007CD2C(v25);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      *(_DWORD *)buf = 138543362;
      v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "%{public}@The accessory is unpaired and no pairing operation is in progress, not removing server on disconnection", buf, 0xCu);

    }
    v22 = 0;
    goto LABEL_16;
  }
  v22 = 1;
LABEL_16:
  objc_msgSend(*(id *)(a1 + 40), "_resetWithError:", v2, *(_OWORD *)&v31, v32, v33, v34, v35);
LABEL_17:
  v23 = objc_retainBlock(*(id *)(a1 + 48));
  v24 = v23;
  if (v23)
    (*((void (**)(id, uint64_t))v23 + 2))(v23, v22);

}

void sub_10006B764(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnected from BTLE accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_10006BD78(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  CFAbsoluteTime Current;
  int v16;
  double v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  double v38;
  _QWORD block[4];
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  double v48;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getProtocolInfoService"));
  if ((objc_msgSend(v2, "serviceProperties") & 4) != 0)
  {
    v5 = *(_BYTE *)(a1 + 56) == 2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessoryCache"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "peripheralInfo"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "broadcastKey"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessoryCache"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "peripheralInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "keyUpdatedStateNumber"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessoryCache"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "peripheralInfo"));
    objc_msgSend(v12, "keyUpdatedTime");
    v14 = v13;

    Current = CFAbsoluteTimeGetCurrent();
    v16 = 0;
    v17 = Current - v14;
    if (!*(_BYTE *)(a1 + 56) && v14 > 0.0 && v17 <= 604800.0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "connectReason") == 3)
      {
        v16 = 0;
      }
      else
      {
        v5 = v4 == 0;
        v18 = *(id *)(a1 + 32);
        v20 = sub_10007CCE4((uint64_t)v18, v19);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = sub_10007CD2C(v18);
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "length")));
          *(_DWORD *)buf = 138544130;
          v42 = v23;
          v43 = 2112;
          v44 = v24;
          v45 = 2112;
          v46 = v10;
          v47 = 2048;
          v48 = v17;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@Rate limiting BC key generation. BC Key Info: %@ / %@ / %.2fs", buf, 0x2Au);

        }
        v16 = 1;
      }
    }
    if (*(_BYTE *)(a1 + 56) == 1 && v14 > 0.0 && v17 <= 86400.0)
    {
      v5 = v4 == 0;
      v25 = *(id *)(a1 + 32);
      v27 = sub_10007CCE4((uint64_t)v25, v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = sub_10007CD2C(v25);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "length")));
        *(_DWORD *)buf = 138544130;
        v42 = v30;
        v43 = 2112;
        v44 = v31;
        v45 = 2112;
        v46 = v10;
        v47 = 2048;
        v48 = v17;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@Rate limiting BC key refresh. BC Key Info: %@ / %@ / %.2fs", buf, 0x2Au);

      }
      v16 = 1;
    }
    if (!v16 || v5)
    {
      if (v5)
        v33 = 2;
      else
        v33 = *(unsigned __int8 *)(a1 + 56);
      objc_msgSend(*(id *)(a1 + 32), "_generateBroadcastKey:queue:withCompletionHandler:", v33, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_10006C1AC;
      v34[3] = &unk_100237B20;
      v32 = *(NSObject **)(a1 + 40);
      v37 = *(id *)(a1 + 48);
      v35 = v4;
      v36 = v10;
      v38 = v14;
      dispatch_async(v32, v34);

    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006C18C;
    block[3] = &unk_100236DC0;
    v3 = *(NSObject **)(a1 + 40);
    v40 = *(id *)(a1 + 48);
    dispatch_async(v3, block);
    v4 = v40;
  }

}

uint64_t sub_10006C18C(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(0.0);
}

void sub_10006C1AC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 28, CFSTR("Not generating BC Keys"), CFSTR("Key generated in recent past"), CFSTR("Report the faulty accessory"), 0));
  (*(void (**)(double))(*(_QWORD *)(a1 + 48) + 16))(*(double *)(a1 + 56));

}

void sub_10006C2F8(uint64_t a1, void *a2, void *a3, double a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double Current;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  __CFString *v33;
  void *v34;
  char v35;
  NSObject *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  double v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  __CFString *v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  double v53;
  char v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  __int16 v61;
  double v62;

  v10 = a2;
  v11 = a3;
  v12 = a6;
  v13 = v12;
  if (!v12)
  {
    if (v11)
    {
      objc_msgSend(*(id *)(a1 + 32), "setStateNumber:", v11);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      objc_msgSend(v21, "updateCachedStateForIdentifier:stateNumber:", v22, v11);

    }
    if (v10)
    {
      v23 = *(void **)(a1 + 32);
      if (*(_BYTE *)(a1 + 56) == 2)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "accessoryCache"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "peripheralInfo"));
        objc_msgSend(v25, "keyUpdatedTime");
        v27 = v26;

        Current = 1.0;
        if (v27 <= 0.0)
          Current = CFAbsoluteTimeGetCurrent();
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        objc_msgSend(v29, "updateBroadcastKeyForIdentifer:key:keyUpdatedStateNumber:keyUpdatedTime:", v30, v10, v11, Current);

        v14 = *(id *)(a1 + 32);
        v32 = sub_10007CCE4((uint64_t)v14, v31);
        v17 = objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          v33 = sub_10007CD2C(v14);
          v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          *(_DWORD *)buf = 138544130;
          v56 = v34;
          v57 = 2112;
          v58 = v10;
          v59 = 2112;
          v60 = v11;
          v61 = 2048;
          v62 = Current;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@Saving the read broadcast key: %@, S#: %@ time: %f", buf, 0x2Au);

        }
        v13 = 0;
        goto LABEL_13;
      }
      if (objc_msgSend(v23, "_validateGeneratedBroadcastKey:", v10))
      {
        v41 = CFAbsoluteTimeGetCurrent();
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        objc_msgSend(v42, "updateBroadcastKeyForIdentifer:key:keyUpdatedStateNumber:keyUpdatedTime:", v43, v10, v11, v41);

        v14 = *(id *)(a1 + 32);
        v45 = sub_10007CCE4((uint64_t)v14, v44);
        v17 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          v46 = sub_10007CD2C(v14);
          v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          *(_DWORD *)buf = 138544130;
          v56 = v47;
          v57 = 2112;
          v58 = v10;
          v59 = 2112;
          v60 = v11;
          v61 = 2048;
          v62 = v41;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@Saving the read broadcast key: %@, S#: %@ time: %f", buf, 0x2Au);

        }
        v13 = 0;
        v35 = 1;
        goto LABEL_14;
      }
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", 9));
    if (!v13)
    {
      v35 = 0;
      goto LABEL_15;
    }
  }
  v14 = *(id *)(a1 + 32);
  v16 = sub_10007CCE4((uint64_t)v14, v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v18 = sub_10007CD2C(v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 56)));
    *(_DWORD *)buf = 138543874;
    v56 = v19;
    v57 = 2112;
    v58 = v20;
    v59 = 2112;
    v60 = v13;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate broadcast key with type: %@. Error: %@", buf, 0x20u);

  }
LABEL_13:
  v35 = 0;
LABEL_14:

LABEL_15:
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_10006C764;
  v48[3] = &unk_100237B70;
  v36 = *(NSObject **)(a1 + 40);
  v37 = *(id *)(a1 + 48);
  v49 = v10;
  v50 = v11;
  v53 = a4;
  v54 = v35;
  v51 = v13;
  v52 = v37;
  v38 = v10;
  v39 = v11;
  v40 = v13;
  dispatch_async(v36, v48);

}

uint64_t sub_10006C764(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 48), *(double *)(a1 + 64));
}

void sub_10006CB2C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServerBTLE:didReceiveEncryptedAndAuthenticatedPayload:forCharacteristic:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10006CC74(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServerBTLE:didReceivePlaintextPayload:forCharacteristic:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10006CDBC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServerBTLE:willSendEncryptedAndAuthenticatedPayload:forCharacteristic:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10006CF04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServerBTLE:willSendPlaintextPayload:forCharacteristic:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

id sub_10006D0E4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  if (result == (id)2)
    return _objc_msgSend(*(id *)(a1 + 40), "_handleDiscoveredServices:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

id sub_10006D1E0(id *a1)
{
  id result;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[6];
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  id v15;

  result = objc_msgSend(a1[4], "state");
  if (result == (id)2)
  {
    result = objc_msgSend(a1[5], "count");
    if (result)
    {
      v3 = a1[6];
      v5 = sub_10007CCE4((uint64_t)v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = sub_10007CD2C(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        v9 = a1[5];
        *(_DWORD *)buf = 138543618;
        v13 = v8;
        v14 = 2112;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Disconnecting on services changed: %@", buf, 0x16u);

      }
      if (objc_msgSend(a1[6], "isPairing"))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 24, 0));
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_10006D368;
        v11[3] = &unk_100236AD0;
        v11[4] = a1[6];
        v11[5] = v10;
        sub_10006D368((uint64_t)v11);
        objc_msgSend(a1[6], "setPairingDisconnectionError:", v10);

      }
      return objc_msgSend(a1[6], "disconnectWithCompletionHandler:disconnectionError:", 0, 0);
    }
  }
  return result;
}

void sub_10006D368(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@BTLE accessory modified its services with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

id sub_10006D560(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  if (result == (id)2)
    return _objc_msgSend(*(id *)(a1 + 40), "_handleDiscoveredCharacteristicsForService:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

id sub_10006D684(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  if (result == (id)2)
    return _objc_msgSend(*(id *)(a1 + 40), "_handleDiscoveredCharactersitic:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

id sub_10006D7A8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  if (result == (id)2)
    return _objc_msgSend(*(id *)(a1 + 40), "_handleReadDescriptorValue:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

id sub_10006D8CC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  if (result == (id)2)
    return _objc_msgSend(*(id *)(a1 + 40), "_handleUpdateValueForCharacteristic:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

void sub_10006D9F0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  id v20;
  __CFString *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  uint64_t v31;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "characteristicWriteCompletionHandlers", 0));
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cbCharacteristic"));
          v9 = objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 48));

          if ((v9 & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "_handleWriteCompletionForCharacteristic:error:", v7, *(_QWORD *)(a1 + 56));
            goto LABEL_17;
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v4)
          continue;
        break;
      }
    }

    v2 = *(id *)(a1 + 40);
    v11 = sub_10007CCE4((uint64_t)v2, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = sub_10007CD2C(v2);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v29 = v14;
      v30 = 2112;
      v31 = v15;
      v16 = "%{public}@Received characteristic write confirmation from unmapped characteristic: %@";
      v17 = v12;
      v18 = OS_LOG_TYPE_INFO;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, 0x16u);

    }
  }
  else
  {
    v2 = *(id *)(a1 + 40);
    v20 = sub_10007CCE4((uint64_t)v2, v19);
    v12 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v21 = sub_10007CD2C(v2);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v22 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v29 = v14;
      v30 = 2112;
      v31 = v22;
      v16 = "%{public}@Received characteristic write for invalid peripheral: %@";
      v17 = v12;
      v18 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
  }

LABEL_17:
}

void sub_10006DD14(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
  {
    v2 = *(id *)(a1 + 40);
    v4 = sub_10007CCE4((uint64_t)v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = sub_10007CD2C(v2);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = *(_QWORD *)(a1 + 48);
      v17 = 138543618;
      v18 = v7;
      v19 = 2112;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Received Notification updated confirmation for characteristics %@", (uint8_t *)&v17, 0x16u);

    }
    if (*(_QWORD *)(a1 + 56))
    {
      v9 = *(id *)(a1 + 40);
      v11 = sub_10007CCE4((uint64_t)v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = sub_10007CD2C(v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = *(_QWORD *)(a1 + 56);
        v17 = 138543618;
        v18 = v14;
        v19 = 2112;
        v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Notification Update failed with error: %@", (uint8_t *)&v17, 0x16u);

      }
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_characteristicForCBCharacteristic:", *(_QWORD *)(a1 + 48)));
    if (v16)
      objc_msgSend(*(id *)(a1 + 40), "_handleHAPNotificationStateUpdateForCharacteristic:error:", v16, *(_QWORD *)(a1 + 56));

  }
}

void sub_10006DF98(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingRequests", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v8 = *(void **)(a1 + 40);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "controlOutputStream"));

        if (v8 == v9)
        {
          objc_msgSend(*(id *)(a1 + 32), "_sendControlPacket:forRequest:completionHandler:", *(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 56));
          goto LABEL_14;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
      if (v4)
        continue;
      break;
    }
  }

  v10 = *(id *)(a1 + 32);
  v12 = sub_10007CCE4((uint64_t)v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = sub_10007CD2C(v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v22 = v15;
    v23 = 2112;
    v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@No matching request for control output stream: %@", buf, 0x16u);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("No matching request for control output stream."), 0, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_14:

  }
}

void sub_10006E254(uint64_t a1)
{
  void (**v2)(_QWORD, _QWORD);
  id v3;

  v2 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  if (v2)
  {
    v3 = v2;
    v2[2](v2, *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setCompletionHandler:", 0);
    v2 = (void (**)(_QWORD, _QWORD))v3;
  }

}

void sub_10006E338(uint64_t a1)
{
  void (**v2)(_QWORD, _QWORD);
  id v3;

  v2 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  if (v2)
  {
    v3 = v2;
    v2[2](v2, 0);
    objc_msgSend(*(id *)(a1 + 32), "setCompletionHandler:", 0);
    v2 = (void (**)(_QWORD, _QWORD))v3;
  }

}

void sub_10006E448(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}@Request to send Pair Setup session setup exchange", (uint8_t *)&v10, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "_handlePairSetupSessionExchangeData:", *(_QWORD *)(a1 + 48));
  }
}

void sub_10006EB64(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
    objc_msgSend(*(id *)(a1 + 40), "_pairingCompletedWithError:", *(_QWORD *)(a1 + 48));
}

void sub_10006EC74(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
    objc_msgSend(*(id *)(a1 + 40), "setProductData:", *(_QWORD *)(a1 + 48));
}

void sub_10006ED84(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Request to get the pairing peer setup code", (uint8_t *)&v10, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "_handlePairingSetupCodeRequestWithCompletionHandler:", *(_QWORD *)(a1 + 48));
  }
}

void sub_10006EF0C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Pair Setup session invalid setup code", (uint8_t *)&v10, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "setBadPairSetupCode:", 1);
    objc_msgSend(*(id *)(a1 + 40), "setPairSetupBackoffTimeInterval:", 0.0);
  }
}

void sub_10006F0B8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairSetupSession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = 138543618;
      v12 = v9;
      v13 = 2048;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Pair Setup session request to backoff for %g seconds", (uint8_t *)&v11, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "setBadPairSetupCode:", 1);
    objc_msgSend(*(id *)(a1 + 40), "setPairSetupBackoffTimeInterval:", *(double *)(a1 + 48));
  }
}

void sub_10006F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F2A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "protocolInfoServiceSignatureCharacteristics"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "instanceID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[HAPProtocolMessages constructInfoRequest:outTID:](HAPProtocolMessages, "constructInfoRequest:outTID:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));

  if (v4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10006F3C0;
    v9[3] = &unk_100237BE8;
    v5 = *(void **)(a1 + 32);
    v6 = *(id *)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v6;
    v11 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v5, "_sendProtocolInfoServiceExchangeData:completion:", v4, v9);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 1, 0));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void sub_10006F3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(void);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  __CFString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;

  if (a2)
  {
    v4 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_5:
    v4();
    return;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[HAPProtocolMessages parseInfoResponse:expectedTID:withHeader:](HAPProtocolMessages, "parseInfoResponse:expectedTID:withHeader:", a3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 0));
  objc_msgSend(*(id *)(a1 + 32), "setAuthenticatedProtocolInfo:", v5);

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "authenticatedProtocolInfo"));
  LODWORD(v6) = objc_msgSend(v6, "_validateProtocolInfo:", v7);

  v8 = *(void **)(a1 + 32);
  if ((_DWORD)v6)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "authenticatedProtocolInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "protocolVersion"));
    objc_msgSend(*(id *)(a1 + 32), "setVersion:", v10);

    v4 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_5;
  }
  v11 = v8;
  v13 = sub_10007CCE4((uint64_t)v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = sub_10007CD2C(v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authenticatedProtocolInfo"));
    v20 = 138543618;
    v21 = v16;
    v22 = 2112;
    v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@Protocol Info does not match: %@ Accessory out of compliance", (uint8_t *)&v20, 0x16u);

  }
  v18 = *(_QWORD *)(a1 + 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 7, 0));
  (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);

}

void sub_10006F888(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authSession"));
  objc_msgSend(v1, "handleAuthExchangeData:withHeader:", 0, 0);

}

void sub_10006FA04(uint64_t a1)
{
  id v2;
  id v3;
  _QWORD v4[6];

  objc_msgSend(*(id *)(a1 + 32), "setWaitingForAuth:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "authMethod") == (id)2)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authSession"));
    objc_msgSend(v2, "continueAuthAfterValidation:", *(unsigned __int8 *)(a1 + 40));

    return;
  }
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_8;
  if (objc_msgSend(*(id *)(a1 + 32), "authMethod") == (id)4)
  {
    _objc_msgSend(*(id *)(a1 + 32), "_continuePairingAfterMFiCertValidation");
    return;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "continuePairingAfterAuthPrompt");
  }
  else
  {
LABEL_8:
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 16, CFSTR("Pairing Failed."), CFSTR("User cancelled pairing"), 0, 0));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10006FB24;
    v4[3] = &unk_100236AD0;
    v4[4] = *(_QWORD *)(a1 + 32);
    v4[5] = v3;
    sub_10006FB24((uint64_t)v4);
    objc_msgSend(*(id *)(a1 + 32), "_pairingCompletedWithError:", v3);

  }
}

void sub_10006FB24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to authenticate accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_10006FD78(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authSession"));
  objc_msgSend(v2, "sendTokenUpdateRequest:", *(_QWORD *)(a1 + 40));

}

void sub_10006FE24(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authSession"));
  objc_msgSend(v2, "resetSession");

  objc_msgSend(*(id *)(a1 + 32), "setAuthenticated:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setPairing:", 0);
  v3 = objc_msgSend(*(id *)(a1 + 32), "_getPairSetupType");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browser"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pairSetupSession:pairSetupType:enhancedEncryption:", *(_QWORD *)(a1 + 32), v3, objc_msgSend(*(id *)(a1 + 32), "enhancedEncryption")));

  objc_msgSend(*(id *)(a1 + 32), "setPairSetupSession:", v5);
}

void sub_10006FFD8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  v5 = objc_opt_class(NSError, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
    v6 = v3;
  else
    v6 = 0;
  v11 = v6;

  v7 = *(id *)(a1 + 32);
  if (objc_msgSend(v11, "isHAPError") && objc_msgSend(v11, "code") == (id)1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
    v9 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, objc_msgSend(*(id *)(a1 + 32), "code"), 0));

    v7 = (id)v9;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
  objc_msgSend(v10, "accessoryServer:didStopPairingWithError:", *(_QWORD *)(a1 + 40), v7);

}

id sub_100070188(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000701E0;
  v4[3] = &unk_100237C38;
  v4[4] = v2;
  return objc_msgSend(v2, "_sendProtocolInfoServiceExchangeData:completion:", v1, v4);
}

void sub_1000701E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  _QWORD v25[5];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v5)
  {
    v8 = v7;
    v10 = sub_10007CCE4((uint64_t)v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sub_10007CD2C(v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      *(_DWORD *)buf = 138543618;
      v28 = v13;
      v29 = 2112;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@SW Auth failed, sending auth exchange with error: %@", buf, 0x16u);

    }
    v14 = v5;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userInfo"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

    v17 = v14;
    if (v16)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userInfo"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100070444;
    v25[3] = &unk_100236AD0;
    v25[4] = *(_QWORD *)(a1 + 32);
    v19 = v17;
    v26 = v19;
    sub_100070444((uint64_t)v25);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authSession"));
    objc_msgSend(v20, "resetSession");

    if (objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", "accessoryServer:didFinishAuth:"))
    {
      v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100070558;
      v23[3] = &unk_100236AD0;
      v23[4] = *(_QWORD *)(a1 + 32);
      v24 = v14;
      dispatch_async(v21, v23);

    }
  }
  else
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "authSession"));
    objc_msgSend(v22, "handleAuthExchangeData:withHeader:", v6, 0);

  }
}

void sub_100070444(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to send auth data to accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_100070558(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:didFinishAuth:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10007067C(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD block[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = objc_opt_respondsToSelector(v2, "accessoryServer:validateUUID:token:model:");

  v4 = *(void **)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    objc_msgSend(v4, "_suspendConnectionIdleTimer");
    objc_msgSend(*(id *)(a1 + 32), "setWaitingForAuth:", 1);
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100070840;
    block[3] = &unk_100236EA8;
    v6 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v17 = v6;
    v18 = *(id *)(a1 + 48);
    dispatch_async(v5, block);

  }
  else
  {
    v7 = v4;
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543362;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement validateUUID:token1:token2:", buf, 0xCu);

    }
    v13 = *(void **)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 1, 0));
    objc_msgSend(v13, "authSession:authComplete:", v14, v15);

  }
}

void sub_100070840(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "authenticatedProtocolInfo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modelName"));
  objc_msgSend(v7, "accessoryServer:validateUUID:token:model:", v2, v3, v4, v6);

}

void sub_1000709B0(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD block[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = objc_opt_respondsToSelector(v2, "accessoryServer:authenticateUUID:token:");

  v4 = *(void **)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100070B60;
    block[3] = &unk_100236EA8;
    v6 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v17 = v6;
    v18 = *(id *)(a1 + 48);
    dispatch_async(v5, block);

  }
  else
  {
    v7 = v4;
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543362;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:authenticateUUID:token:", buf, 0xCu);

    }
    v13 = *(void **)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 1, 0));
    objc_msgSend(v13, "authSession:authComplete:", v14, v15);

  }
}

void sub_100070B60(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:authenticateUUID:token:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100070C88(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD block[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = objc_opt_respondsToSelector(v2, "accessoryServer:confirmUUID:token:");

  v4 = *(void **)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100070E38;
    block[3] = &unk_100236EA8;
    v6 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v17 = v6;
    v18 = *(id *)(a1 + 48);
    dispatch_async(v5, block);

  }
  else
  {
    v7 = v4;
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138543362;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:confirmUUID:token:)", buf, 0xCu);

    }
    v13 = *(void **)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("HAPErrorDomain"), 1, 0));
    objc_msgSend(v13, "authSession:authComplete:", v14, v15);

  }
}

void sub_100070E38(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:confirmUUID:token:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100070F14(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  char v13;
  void *v14;
  NSObject *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  _QWORD v25[5];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  uint64_t v30;

  v2 = *(id *)(a1 + 32);
  v4 = sub_10007CCE4((uint64_t)v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = sub_10007CD2C(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v28 = v7;
    v29 = 2112;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}@Auth Complete with status: %@", buf, 0x16u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

  if (!v10)
    v10 = *(id *)(a1 + 40);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100071178;
  v25[3] = &unk_100236AD0;
  v25[4] = *(_QWORD *)(a1 + 32);
  v11 = v10;
  v26 = v11;
  sub_100071178((uint64_t)v25);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v13 = objc_opt_respondsToSelector(v12, "accessoryServer:didFinishAuth:");

  v14 = *(void **)(a1 + 32);
  if ((v13 & 1) != 0)
  {
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "delegateQueue"));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10007128C;
    v23[3] = &unk_100236AD0;
    v16 = *(void **)(a1 + 40);
    v23[4] = *(_QWORD *)(a1 + 32);
    v24 = v16;
    dispatch_async(v15, v23);

  }
  else
  {
    v17 = v14;
    v19 = sub_10007CCE4((uint64_t)v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = sub_10007CD2C(v17);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      *(_DWORD *)buf = 138543362;
      v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:didFinishAuth:", buf, 0xCu);

    }
  }

}

void sub_100071178(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v3)
  {
    v4 = sub_10007CCE4(0, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_10007CD2C(0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "code");
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Authenticating accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v10, 0x20u);

    }
  }

}

void sub_10007128C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "accessoryServer:didFinishAuth:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100071864(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "securitySession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Request to send security session setup exchange", (uint8_t *)&v10, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "_handleSecuritySessionSetupExchangeData:", *(_QWORD *)(a1 + 48));
  }
}

void sub_1000719EC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "securitySession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Security session is opening", (uint8_t *)&v10, 0xCu);

    }
  }
}

void sub_100071B6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "securitySession"));

  if (v2 == v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessoryCache"));
    objc_msgSend(v4, "setLastKeyBagIdentityIndexFailingPV:", 0);

    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    objc_msgSend(v5, "associateAccessoryWithControllerKeyUsingAccessoryIdentifier:", v6);

    v7 = *(id *)(a1 + 40);
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = objc_msgSend(*(id *)(a1 + 32), "resumeSessionID");
      v14 = 138543618;
      v15 = v12;
      v16 = 2048;
      v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%{public}@Security session is open with resumeSessionID %llu", (uint8_t *)&v14, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "submitPairVerifyMetricWithError:", 0);
    objc_msgSend(*(id *)(a1 + 40), "updateResumeSessionID:", objc_msgSend(*(id *)(a1 + 32), "resumeSessionID"));
    objc_msgSend(*(id *)(a1 + 40), "_resumeAllOperations");
  }
}

void sub_100071E20(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  unsigned int v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[5];
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "securitySession"));

  if (v2 == v3)
  {
    v4 = *(id *)(a1 + 40);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v20 = v9;
      v21 = 2112;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Security session did close with error: %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "submitPairVerifyMetricWithError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 40), "setSecuritySession:", 0);
    if ((objc_msgSend(*(id *)(a1 + 40), "_shouldIgnoreRetryDiscoveryError:", *(_QWORD *)(a1 + 48)) & 1) == 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "keyBag"));
      v12 = objc_msgSend(v11, "getCurrentIndexInBag");

      v13 = objc_msgSend(*(id *)(a1 + 40), "shouldRetryPVDueToAuthenticationError:", *(_QWORD *)(a1 + 48));
      v14 = *(void **)(a1 + 40);
      if (v13)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "accessoryCache"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v12));
        objc_msgSend(v15, "setLastKeyBagIdentityIndexFailingPV:", v16);

        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100072020;
        block[3] = &unk_100236AA8;
        block[4] = *(_QWORD *)(a1 + 40);
        dispatch_async(v17, block);

      }
      else
      {
        objc_msgSend(v14, "disconnectWithCompletionHandler:", 0);
        if (*(_QWORD *)(a1 + 48))
        {
          objc_msgSend(*(id *)(a1 + 40), "_cancelAllQueuedOperationsWithError:");
          objc_msgSend(*(id *)(a1 + 40), "_resumeAllOperations");
          objc_msgSend(*(id *)(a1 + 40), "updateResumeSessionID:", 0);
        }
      }
    }
  }
}

id sub_100072020(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_establishSecureSession");
}

void sub_100072284(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  __CFString *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  const __CFString *v10;
  __int16 v11;
  uint64_t v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingActivity"));
  if (v2)
  {
    v3 = sub_10007CCE4(0, v1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = sub_10007CD2C(0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = 138543874;
      v8 = v6;
      v9 = 2112;
      v10 = CFSTR("HAPErrorDomain");
      v11 = 2048;
      v12 = 24;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from accessory due to connection timeout with                                             error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);

    }
  }

}

void sub_100072490(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("BLEServer2x"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1002716B8;
  qword_1002716B8 = v2;

}

int64_t sub_1000729EC(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a2, "compare:", a3);
}

void sub_100072E2C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100073418(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000734CC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000741D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1002716C8);
  _Unwind_Resume(a1);
}

__CFString *sub_1000741FC(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return (__CFString *)0;
  else
    return *off_100237CB0[a1 - 1];
}

uint64_t sub_100074234(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uint8")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uint16")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uint32")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uint64")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("int8")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("int16")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("int")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("int64")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("BOOL")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("float")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("string")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("data")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tlv8")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("array")) & 1) != 0)
  {
    v2 = 14;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("dict")))
  {
    v2 = 15;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *sub_100074438(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return (__CFString *)0;
  else
    return *off_100237D28[a1 - 1];
}

void sub_100075C5C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000761A8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("Characteristic is a required paramter."), 0, 0));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100076210(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("The timeout must not be negative."), 0, 0));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100076278(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 14, CFSTR("Read failed."), CFSTR("There is no server present for the accessory."), 0, 0));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000762E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v5 = a3;
  if (*(_QWORD *)(a1 + 40))
  {
    v11 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "characteristic"));
    if ((objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "error"));

      if (v8)
      {
        v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "error"));
LABEL_7:
        v10 = v9;
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

        v5 = v11;
        goto LABEL_8;
      }
    }
    else
    {

    }
    v9 = v11;
    goto LABEL_7;
  }
LABEL_8:

}

void sub_1000766D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("One or more target characteristics are required."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100076818(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("The timeout must not be negative."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10007695C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 14, CFSTR("Read failed."), CFSTR("There is no server present for the accessory."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100076E8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("Characteristic write request is a required paramter."), 0, 0));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "characteristic"));
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);

}

void sub_100076F0C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("The timeout must not be negative."), 0, 0));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "characteristic"));
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);

}

void sub_100076F8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 13, CFSTR("Write failed."), CFSTR("There is no server present for the accessory."), 0, 0));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "characteristic"));
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);

}

void sub_10007700C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = a3;
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "characteristic"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "characteristic"));
    if ((objc_msgSend(v7, "isEqual:", v8) & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "error"));

      if (v9)
      {
        v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "error"));
LABEL_7:
        v11 = v10;
        v12 = *(_QWORD *)(a1 + 40);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "characteristic"));
        (*(void (**)(uint64_t, void *, void *))(v12 + 16))(v12, v13, v11);

        v5 = v14;
        goto LABEL_8;
      }
    }
    else
    {

    }
    v10 = v14;
    goto LABEL_7;
  }
LABEL_8:

}

void sub_10007743C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("One or more target characteristic writes are required."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100077580(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 9, CFSTR("Invalid parameter."), CFSTR("The timeout must not be negative."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000776C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError hapErrorWithcode:description:reason:suggestion:underlyingError:](NSError, "hapErrorWithcode:description:reason:suggestion:underlyingError:", 13, CFSTR("Write failed."), CFSTR("There is no server present for the accessory."), 0, 0));
  v4 = sub_10007CCE4(0, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10007CD2C(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2048;
    v14 = objc_msgSend(v2, "code");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v9, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000794A0(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("HAPAccessory"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1002716D8;
  qword_1002716D8 = v2;

}

void sub_1000798DC(id a1)
{
  HAPPowerManager *v1;
  void *v2;

  v1 = objc_alloc_init(HAPPowerManager);
  v2 = (void *)qword_1002716E0;
  qword_1002716E0 = (uint64_t)v1;

}

void sub_100079DBC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegatesMap"));
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegatesMap"));
  objc_msgSend(v3, "setObject:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_100079E94(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegatesMap"));
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

id sub_10007A1AC(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  void *v3;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 + 536870288;
  v1 = v2 >> 4;
  if (v1 < 0xC && ((0xA07u >> v1) & 1) != 0)
    v3 = *(&off_100237E00 + (int)v1);
  else
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Missing string for IOSystemMessage: 0x%X"), a1));
  return v3;
}

id sub_10007A218(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "devicePowerStateChanged:", *(_QWORD *)(a1 + 40));
}

void sub_10007A264(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("HAPPowerManager"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1002716F8;
  qword_1002716F8 = v2;

}

void sub_10007A8C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10007A8D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryServerDidUpdateStateNumber:", *(_QWORD *)(a1 + 40));
}

void sub_10007B878(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007B894(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  __CFString *v9;
  void *v10;
  const char *v11;
  id v12;
  __CFString *v13;
  id v14;
  __CFString *v15;
  int v17;
  void *v18;

  v2 = a1;
  if (!v2)
  {
    v7 = sub_10007CCE4(0, v1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v9 = sub_10007CD2C(0);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v17 = 138543362;
    v18 = v10;
    v11 = "%{public}@### Type name is nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v17, 0xCu);

    goto LABEL_12;
  }
  v3 = objc_opt_class(NSString, v1);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) == 0)
  {
    v12 = sub_10007CCE4(0, v4);
    v8 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v13 = sub_10007CD2C(0);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v17 = 138543362;
    v18 = v10;
    v11 = "%{public}@### Type name is not a string";
    goto LABEL_11;
  }
  if (!objc_msgSend(v2, "length"))
  {
    v14 = sub_10007CCE4(0, v5);
    v8 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v15 = sub_10007CD2C(0);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v17 = 138543362;
      v18 = v10;
      v11 = "%{public}@### Type name is an empty string";
      goto LABEL_11;
    }
LABEL_12:

    v6 = 0;
    goto LABEL_13;
  }
  v6 = 1;
LABEL_13:

  return v6;
}

id sub_10007BA30(void *a1)
{
  id v1;
  id v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  id v14;
  __CFString *v15;
  void *v16;
  id v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint8_t *v32;
  __int16 v33;
  id v34;
  uint8_t buf[32];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  _BYTE v41[37];

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v1);
  if (v2)
  {
    v3 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("00000000-0000-1000-8000-4D69736D6574"));
    v4 = objc_msgSend(v2, "isEqual:", v3);

    if (!v4)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));
      goto LABEL_12;
    }
    v6 = sub_10007CCE4(0, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v8 = sub_10007CD2C(0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v9;
    v10 = "%{public}@### UUID type is using the HAP Base UUID";
    v11 = v7;
    v12 = 12;
    goto LABEL_8;
  }
  if (objc_msgSend(v1, "characterAtIndex:", 0) != 48)
  {
    memset(v41, 0, sizeof(v41));
    v18 = objc_retainAutorelease(v1);
    v19 = NormalizeUUIDString(objc_msgSend(v18, "UTF8String"), -1, &unk_1001DD638, 0, v41);
    if (!(_DWORD)v19)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "uppercaseString"));

      goto LABEL_12;
    }
    v20 = v19;
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    memset(buf, 0, sizeof(buf));
    DebugGetErrorString(v19, buf, 100);
    v22 = sub_10007CCE4(0, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = sub_10007CD2C(0);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v27 = 138544130;
      v28 = v25;
      v29 = 1024;
      v30 = v20;
      v31 = 2080;
      v32 = buf;
      v33 = 2112;
      v34 = v18;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}@### Error: %d(%s) creating UUID string from type: %@.", (uint8_t *)&v27, 0x26u);

    }
    goto LABEL_10;
  }
  v14 = sub_10007CCE4(0, v13);
  v7 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v15 = sub_10007CD2C(0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v1;
    v10 = "%{public}@### UUID type %@ starts with a '0'";
    v11 = v7;
    v12 = 22;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);

  }
LABEL_9:

LABEL_10:
  v16 = 0;
LABEL_12:

  return v16;
}

uint64_t sub_10007BD14(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  const char *v13;
  id v14;
  __CFString *v15;
  id v16;
  __CFString *v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  __CFString *v22;
  int v23;
  void *v24;

  v2 = a1;
  if (v2)
  {
    v3 = objc_opt_class(NSNumber, v1);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    {
      objc_msgSend(v2, "doubleValue");
      v6 = floor(v5);
      objc_msgSend(v2, "doubleValue");
      if (v6 == ceil(v8))
      {
        if (objc_msgSend(v2, "unsignedLongLongValue"))
        {
          v18 = 1;
          goto LABEL_12;
        }
        v21 = sub_10007CCE4(0, v20);
        v10 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v22 = sub_10007CD2C(0);
          v12 = (void *)objc_claimAutoreleasedReturnValue(v22);
          v23 = 138543362;
          v24 = v12;
          v13 = "%{public}@### instance ID is not > 0";
          goto LABEL_10;
        }
      }
      else
      {
        v9 = sub_10007CCE4(0, v7);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = sub_10007CD2C(0);
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          v23 = 138543362;
          v24 = v12;
          v13 = "%{public}@### instance ID is not an integer";
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v23, 0xCu);

        }
      }
    }
    else
    {
      v16 = sub_10007CCE4(0, v4);
      v10 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v17 = sub_10007CD2C(0);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v17);
        v23 = 138543362;
        v24 = v12;
        v13 = "%{public}@### instance ID is not a number";
        goto LABEL_10;
      }
    }
  }
  else
  {
    v14 = sub_10007CCE4(0, v1);
    v10 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v15 = sub_10007CD2C(0);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v23 = 138543362;
      v24 = v12;
      v13 = "%{public}@### nil instance ID";
      goto LABEL_10;
    }
  }

  v18 = 0;
LABEL_12:

  return v18;
}

uint64_t sub_10007BF28(unint64_t a1, uint64_t a2)
{
  if (a1 | a2)
    return objc_msgSend((id)a1, "isEqualToString:", a2) ^ 1;
  else
    return 0;
}

uint64_t sub_10007BF54(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;

  v3 = a1;
  v4 = a2;
  v5 = (void *)v4;
  if (v3 | v4)
  {
    v6 = 1;
    if (v3 && v4)
    {
      if (CFNumberIsFloatType((CFNumberRef)v3) || CFNumberIsFloatType((CFNumberRef)v5))
      {
        objc_msgSend((id)v3, "floatValue");
        v8 = v7;
        objc_msgSend(v5, "floatValue");
        v6 = vabds_f32(v8, v9) >= 0.00000011921;
      }
      else
      {
        v6 = objc_msgSend((id)v3, "isEqualToNumber:", v5) ^ 1;
      }
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t sub_10007C008(unint64_t a1, uint64_t a2)
{
  if (a1 | a2)
    return objc_msgSend((id)a1, "isEqualToArray:", a2) ^ 1;
  else
    return 0;
}

os_log_t sub_10007CC3C(void *a1, id a2)
{
  id v3;
  id v4;
  const char *v5;
  id v6;
  const char *v7;

  v3 = objc_retainAutorelease(a2);
  v4 = a1;
  v5 = (const char *)objc_msgSend(v3, "UTF8String");
  v6 = objc_retainAutorelease(v4);
  v7 = (const char *)objc_msgSend(v6, "UTF8String");

  return os_log_create(v5, v7);
}

os_log_t sub_10007CCA4()
{
  return os_log_create((const char *)objc_msgSend(CFSTR("com.apple.dockaccessoryd"), "UTF8String"), (const char *)objc_msgSend(CFSTR("HAP"), "UTF8String"));
}

id sub_10007CCE4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  os_log_t v4;

  v2 = (void *)objc_opt_class(a1, a2);
  if ((objc_opt_respondsToSelector(v2, "logCategory") & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "logCategory"));
  }
  else
  {
    v4 = sub_10007CCA4();
    v3 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }
  return v3;
}

__CFString *sub_10007CD2C(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "logIdentifier") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "logIdentifier"));
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%@] "), v2));

  }
  else
  {
    v3 = &stru_10023F210;
  }

  return v3;
}

DKMInterval *__cdecl sub_10007F390(id a1, NSNumber *a2, NSNumber *a3)
{
  NSNumber *v4;
  NSNumber *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;

  v4 = a3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[DKMInterval positiveInfinityEnd](DKMInterval, "positiveInfinityEnd"));
  v7 = -[NSNumber isEqual:](v4, "isEqual:", v6);

  if (v7)
    v8 = objc_claimAutoreleasedReturnValue(+[DKMInterval openOpenIntervalFromStart:toEnd:](DKMInterval, "openOpenIntervalFromStart:toEnd:", v5, v4));
  else
    v8 = objc_claimAutoreleasedReturnValue(+[DKMInterval openClosedIntervalFromStart:toEnd:](DKMInterval, "openClosedIntervalFromStart:toEnd:", v5, v4));
  v9 = (void *)v8;

  return (DKMInterval *)v9;
}

int sub_10007F42C(id a1, unint64_t a2, NSNumber *a3)
{
  return -[NSNumber unsignedIntValue](a3, "unsignedIntValue") >= a2;
}

DKMInterval *__cdecl sub_10007F4B0(id a1, NSNumber *a2, NSNumber *a3)
{
  return (DKMInterval *)+[DKMInterval closedOpenIntervalFromStart:toEnd:](DKMInterval, "closedOpenIntervalFromStart:toEnd:", a2, a3);
}

int sub_10007F4C4(id a1, unint64_t a2, NSNumber *a3)
{
  return -[NSNumber unsignedIntValue](a3, "unsignedIntValue") > a2;
}

__CFString *HAPCharacteristicValueTransitionTypesAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_12;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_9;
    if (v3 == 1)
    {
      v5 = CFSTR("HAPCharacteristicValueTransitionTypeLinear");
    }
    else
    {
      if (v3 != 2)
        goto LABEL_9;
      v5 = CFSTR("HAPCharacteristicValueTransitionTypeLinearDerived");
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_12:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

void sub_1000820D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v3 = a2;
  if (v3)
  {
    v4 = *(id *)(a1 + 32);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to send hello control message (%@)", (uint8_t *)&v10, 0x16u);

    }
  }

}

void sub_1000822D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v3 = a2;
  if (v3)
  {
    v4 = *(id *)(a1 + 32);
    v6 = sub_10007CCE4((uint64_t)v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = sub_10007CD2C(v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to send version control message (%@)", (uint8_t *)&v10, 0x16u);

    }
  }

}

__CFString *HAPCharacteristicValueTransitionEndBehaviorAsString(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("HAPCharacteristicValueTransitionEndBehaviorNoChange");
  if (a1 == 1)
    v1 = CFSTR("HAPCharacteristicValueTransitionEndBehaviorLoop");
  else
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPCharacteristicValueTransitionEndBehavior %ld"), a1));
  return v1;
}

__CFString *HAPCharacteristicValueTransitionLinearStartConditionAsString(unint64_t a1)
{
  if (a1 >= 3)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPCharacteristicValueTransitionLinearStartCondition %ld"), a1));
  else
    return off_1002380D8[a1];
}

__CFString *HAPFirmwareUpdateStateAsString(unint64_t a1)
{
  if (a1 >= 5)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown HAPFirmwareUpdateState %ld"), a1));
  else
    return off_1002380F0[a1];
}

void sub_100082C58(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100083048(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryServer:didUpdateHasPairings:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_10008316C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100083240(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100083480(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100083494(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryServer:didUpdateName:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10008362C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100083640(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryServer:didUpdateCategory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100083A20(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100084A14(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  v4 = v5;
  if (!v5 && *(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 40), "disconnect");
    objc_msgSend(*(id *)(a1 + 40), "refreshKeyBag");
    v4 = 0;
  }

}

void sub_100085114(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "internalDelegates"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_1000851EC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "internalDelegates"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_1000852C4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id location;
  char v15;
  _BYTE v16[128];

  v15 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "internalDelegates", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v11;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v2);
        objc_initWeak(&location, *(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v5));
        if (!v15)
        {
          v6 = objc_loadWeakRetained(&location);
          v7 = v6 == 0;

          if (!v7)
          {
            v8 = *(_QWORD *)(a1 + 40);
            v9 = objc_loadWeakRetained(&location);
            (*(void (**)(uint64_t, id, char *))(v8 + 16))(v8, v9, &v15);

          }
        }
        objc_destroyWeak(&location);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
    }
    while (v3);
  }

}

void sub_100085418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100085434(void *a1)
{
  id v1;
  id v2;
  char *v3;
  int v4;
  void *v5;
  BOOL v6;
  uint64_t v8;
  unsigned __int8 *v9;

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "bytes");
  v3 = (char *)objc_msgSend(v1, "length");

  v8 = 0;
  v9 = 0;
  v4 = TLV8Get(v2, &v3[(_QWORD)v2], 6, &v9, &v8, 0);
  v5 = 0;
  if (v4)
    v6 = 0;
  else
    v6 = v8 == 1;
  if (v6)
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v9));
  return v5;
}

void sub_100085790(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000858C4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100085CB4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008603C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100086588(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

__CFString *HAPDiagnosticsSnapshotAudioAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_12;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_9;
    if (v3 == 1)
    {
      v5 = CFSTR("HAPDiagnosticsSnapshotAudioAudioRecording");
    }
    else
    {
      if (v3 != 2)
        goto LABEL_9;
      v5 = CFSTR("HAPDiagnosticsSnapshotAudioAudioClips");
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_12:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

__CFString *HAPDiagnosticsSnapshotOptionsAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_12;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_9;
    if (v3 == 1)
    {
      v5 = CFSTR("HAPDiagnosticsSnapshotOptionDelay");
    }
    else
    {
      if (v3 != 2)
        goto LABEL_9;
      v5 = CFSTR("HAPDiagnosticsSnapshotOptionConfigurableMaxSize");
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_12:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

__CFString *HAPDiagnosticsSnapshotTypeAsString(unint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1)
    goto LABEL_12;
  v3 = 1;
  v4 = a1;
  do
  {
    if ((v3 & a1) == 0)
      goto LABEL_9;
    if (v3 == 1)
    {
      v5 = CFSTR("HAPDiagnosticsSnapshotTypeManufacturerSnapshot");
    }
    else
    {
      if (v3 != 2)
        goto LABEL_9;
      v5 = CFSTR("HAPDiagnosticsSnapshotTypeADKSnapshot");
    }
    v4 &= ~v3;
    objc_msgSend(v2, "addObject:", v5);
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown options %lu"), v4));
    objc_msgSend(v2, "addObject:", v6);

  }
LABEL_12:
  if (objc_msgSend(v2, "count"))
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  else
    v7 = CFSTR("None");

  return v7;
}

DataStream *__cdecl sub_100087AA0(id a1, DataStreamTransport *a2, HAPSecuritySessionEncryption *a3, OS_dispatch_queue *a4, NSString *a5)
{
  NSString *v8;
  OS_dispatch_queue *v9;
  HAPSecuritySessionEncryption *v10;
  DataStreamTransport *v11;
  DataStream *v12;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v12 = -[DataStream initWithTransport:sessionEncryption:workQueue:logIdentifier:]([DataStream alloc], "initWithTransport:sessionEncryption:workQueue:logIdentifier:", v11, v10, v9, v8);

  return v12;
}

id sub_100087D08(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100087D5C;
  v3[3] = &unk_100236E58;
  v3[4] = v1;
  return objc_msgSend(v1, "_readRequiredTransportCharacteristicsIfNeededWithCompletion:", v3);
}

void sub_100087D5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  dispatch_assert_queue_V2(v5);

  v6 = *(void **)(a1 + 32);
  if (v4)
  {
    v7 = v6;
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessory"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
      v15 = 138543874;
      v16 = v12;
      v17 = 2112;
      v18 = v14;
      v19 = 2112;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to read the required transport characteristics for: %@ with error: %@", (uint8_t *)&v15, 0x20u);

    }
  }
  else
  {
    objc_msgSend(v6, "_handleAccessoryConnected");
  }

}

void sub_100087EE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  dispatch_assert_queue_V2(v5);

  v6 = *(void **)(a1 + 32);
  if (v4)
  {
    v7 = v6;
    v9 = sub_10007CCE4((uint64_t)v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_10007CD2C(v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessory"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
      v15 = 138543874;
      v16 = v12;
      v17 = 2112;
      v18 = v14;
      v19 = 2112;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to read the required transport characteristics for: %@ with error: %@", (uint8_t *)&v15, 0x20u);

    }
  }
  else
  {
    objc_msgSend(v6, "_handleAccessoryConnected");
  }

}

uint64_t sub_100088558(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100088818(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100088A28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v4 = objc_opt_class(HAPAccessory, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
    v5 = v2;
  else
    v5 = 0;
  v6 = v5;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessory"));
  v8 = objc_msgSend(v6, "isEqual:", v7);

  v9 = *(id *)(a1 + 40);
  v11 = sub_10007CCE4((uint64_t)v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v14 = sub_10007CD2C(v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shortDescription"));
      v21 = 138543618;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory with HDS service is no longer connected: %@. Removing any transports that were active", (uint8_t *)&v21, 0x16u);

    }
    v17 = *(void **)(a1 + 40);
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSError dkErrorWithCode:](NSError, "dkErrorWithCode:", 30));
    objc_msgSend(v17, "_cancelStreamTransportWithError:", v9);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v18 = sub_10007CD2C(v9);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessory"));
      v21 = 138543874;
      v22 = v19;
      v23 = 2112;
      v24 = v6;
      v25 = 2112;
      v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Disconnected accessory: %@ did not match self.accessory :%@", (uint8_t *)&v21, 0x20u);

    }
  }

}

void sub_100089538(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  DKPendingSocketRequest *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  void *v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultDataStream"));

  if (v2
    || (objc_msgSend(*(id *)(a1 + 32), "_initiateStreamSetup"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "setupInProgress")),
        v3,
        v3))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingSocketRequests"));
    v5 = -[DKPendingSocketRequest initWithApplicationProtocolName:completion:]([DKPendingSocketRequest alloc], "initWithApplicationProtocolName:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(v4, "addObject:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "setupInProgress"));
    v7 = *(void **)(a1 + 32);
    if (v6)
    {
      v8 = v7;
      v10 = sub_10007CCE4((uint64_t)v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = sub_10007CD2C(v8);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        *(_DWORD *)buf = 138543362;
        v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}@Waiting for DataStream setup before processing stream socket request", buf, 0xCu);

      }
    }
    else
    {
      objc_msgSend(v7, "_processPendingSocketRequests");
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 48);
    v15 = (id)objc_claimAutoreleasedReturnValue(+[NSError dkErrorWithCode:](NSError, "dkErrorWithCode:", 4));
    (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, 0);

  }
}

void sub_10008AC60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[DataStreamBulkSendProtocol protocolName](DataStreamBulkSendProtocol, "protocolName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_getActiveProtocolWithName:", v3));

  v5 = v4;
  v7 = objc_opt_class(DataStreamBulkSendProtocol, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = v5;
  else
    v8 = 0;
  v9 = v8;

  if (v9)
  {
    objc_msgSend(v9, "openSessionForFileType:reason:metadata:queue:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    v10 = *(id *)(a1 + 32);
    v12 = sub_10007CCE4((uint64_t)v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = sub_10007CD2C(v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v17 = 138543362;
      v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@DataStreamBulkSendProtocol not registered; cannot start bulk send session",
        (uint8_t *)&v17,
        0xCu);

    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError dkErrorWithCode:](NSError, "dkErrorWithCode:", 1));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
}

void sub_10008AE58(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", HMFErrorDomain, 2, &off_100245950));
  objc_msgSend(*(id *)(a1 + 32), "_cancelStreamTransportWithError:", v2);

}

uint64_t sub_10008B64C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008D310(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008D9E4(id a1)
{
  os_log_t v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10007CC3C(CFSTR("HAPKeyBag"), CFSTR("com.apple.dockaccessoryd"));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100271718;
  qword_100271718 = v2;

}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  objc_class *v27;
  _BYTE *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint8_t *v54;
  void **v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void **v67;
  uint8_t *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint8_t *v79;
  _QWORD *v80;
  uint64_t v81;
  uint8_t *v82;
  id v83;
  NSString v84;
  id v85;
  id v86;
  NSString v87;
  id v88;
  id v89;
  NSString v90;
  id v91;
  id v92;
  NSString v93;
  id v94;
  id v95;
  NSString v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  uint64_t v104;
  void *v105;
  void *v106;
  NSObject *v107;
  void *v108;
  void *v109;
  NSObject *v110;
  void *v111;
  id v112;
  void **v113;
  void *v114;
  void **v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  char *v129;
  char *v130;
  uint64_t (*v131)(char *, uint64_t, uint64_t);
  char *v132;
  const char *v133;
  char *v134;
  char *v135;
  objc_super v136;
  void **aBlock;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t);
  void *v140;
  _UNKNOWN **v141;
  uint64_t v142;
  _BYTE v143[24];
  uint64_t v144;
  _BYTE v145[32];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v130 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v132 = (char *)&v129 - v8;
  v9 = __chkstk_darwin(v7);
  v135 = (char *)&v129 - v10;
  v11 = __chkstk_darwin(v9);
  v134 = (char *)&v129 - v12;
  v13 = __chkstk_darwin(v11);
  v129 = (char *)&v129 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v129 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v129 - v19;
  qword_100275320 = 0x312E303332;
  *(_QWORD *)algn_100275328 = 0xE500000000000000;
  sub_10008EA10(v18, qword_10026BB20);
  v21 = sub_10008EA50(v3, (uint64_t)qword_10026BB20);
  v133 = "PrimaryUsagePage";
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 1852399981, 0xE400000000000000);
  type metadata accessor for DockCoreManager(0, v22, v23, v24);
  v25 = static DockCoreManager.debugAllowed.getter() & 1;
  byte_100275330 = v25;
  v27 = (objc_class *)type metadata accessor for ServiceDelegate(0, v26);
  v28 = objc_allocWithZone(v27);
  v28[OBJC_IVAR____TtC14dockaccessoryd15ServiceDelegate_debugAllowed] = v25;
  v136.receiver = v28;
  v136.super_class = v27;
  qword_100275338 = (uint64_t)objc_msgSendSuper2(&v136, "init");
  qword_100275340 = 0;
  if (byte_100275330 == 1)
  {
    v30 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugServiceDelegate(0, v29)), "init");
    v31 = (void *)qword_100275340;
    qword_100275340 = (uint64_t)v30;

    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v33 = v21;
    v34 = v32(v20, v21, v3);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "dockaccesoryd: debug allowed, creating debug port", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = *(void (**)(char *, uint64_t))(v4 + 8);
    v38(v20, v3);
  }
  else
  {
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v33 = v21;
    v40 = v32(v17, v21, v3);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "dockaccesoryd: debug not allowed", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    v38 = *(void (**)(char *, uint64_t))(v4 + 8);
    v38(v17, v3);
  }
  qword_100275348 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PairingServiceDelegate(0, v39)), "init");
  qword_100275350 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CertificationServiceDelegate(0, v44)), "init");
  qword_100275358 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CameraCaptureServiceDelegate(0, v45)), "init");
  v46 = type metadata accessor for DockKitFeatures(0);
  v140 = (void *)v46;
  v141 = (_UNKNOWN **)sub_100090E1C(&qword_10026BC30, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitFeatures, (uint64_t)&protocol conformance descriptor for DockKitFeatures);
  v47 = sub_10008EA68(&aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v47, enum case for DockKitFeatures.Daemon(_:), v46);
  LOBYTE(v46) = isFeatureEnabled(_:)(&aBlock);
  sub_100090E88(&aBlock);
  v48 = (char *)v33;
  if ((v46 & 1) == 0)
  {
    v125 = v32(v129, v33, v3);
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "dockaccessoryd: daemon features disabled", v128, 2u);
      swift_slowDealloc(v128, -1, -1);
    }

    v38(v129, v3);
    exit(-1);
  }
  v49 = v134;
  v50 = v32(v134, v33, v3);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  v53 = os_log_type_enabled(v51, v52);
  v131 = v32;
  if (v53)
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = (void **)swift_slowAlloc(32, -1);
    aBlock = v55;
    v129 = v48;
    *(_DWORD *)v54 = 136315138;
    v56 = v3;
    v57 = v38;
    v59 = qword_100275320;
    v58 = *(_QWORD *)algn_100275328;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100275328);
    v144 = sub_1000906BC(v59, v58, (uint64_t *)&aBlock);
    v48 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v54 + 4, v54 + 12);
    v60 = v58;
    v38 = v57;
    v3 = v56;
    v32 = v131;
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "dockaccessoryd: starting up, dockaccessoryd version %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

    v61 = v134;
  }
  else
  {

    v61 = v49;
  }
  v38(v61, v3);
  v62 = v135;
  v63 = v32(v135, (uint64_t)v48, v3);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = (void **)swift_slowAlloc(32, -1);
    aBlock = v67;
    *(_DWORD *)v66 = 136315138;
    v144 = sub_1000906BC(0x312E303332, 0xE500000000000000, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v66 + 4, v66 + 12);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "dockkit core version: %s", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    v68 = v66;
    v32 = v131;
    swift_slowDealloc(v68, -1, -1);

    v38(v135, v3);
  }
  else
  {

    v38(v62, v3);
  }
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  if ((sub_10012D28C() & 1) != 0)
  {
    v69 = v32(v132, (uint64_t)v48, v3);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Database path exists - checking if we need to migrate data", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    v38(v132, v3);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v73 = sub_1000E6264();
    if (v73)
    {
      v74 = (void *)v73;
      v32(v130, (uint64_t)v48, v3);
      v75 = v74;
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = swift_slowAlloc(12, -1);
        v135 = (char *)v38;
        v79 = (uint8_t *)v78;
        v80 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v79 = 138412290;
        aBlock = (void **)&v75->isa;
        v75 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v138, v79 + 4, v79 + 12);
        *v80 = v74;

        _os_log_impl((void *)&_mh_execute_header, v76, v77, "FAILED data migration: %@", v79, 0xCu);
        v81 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v80, 1, v81);
        swift_slowDealloc(v80, -1, -1);
        v82 = v79;
        v38 = (void (*)(char *, uint64_t))v135;
        swift_slowDealloc(v82, -1, -1);
      }
      else
      {

        v76 = v75;
      }

      v38(v130, v3);
    }
  }
  v83 = objc_allocWithZone((Class)NSXPCListener);
  v84 = String._bridgeToObjectiveC()();
  v85 = objc_msgSend(v83, "initWithMachServiceName:", v84);

  qword_100275360 = (uint64_t)v85;
  objc_msgSend(v85, "setDelegate:", qword_100275338);
  v86 = objc_allocWithZone((Class)NSXPCListener);
  v87 = String._bridgeToObjectiveC()();
  v88 = objc_msgSend(v86, "initWithMachServiceName:", v87);

  qword_100275368 = (uint64_t)v88;
  objc_msgSend(v88, "setDelegate:", qword_100275348);
  v89 = objc_allocWithZone((Class)NSXPCListener);
  v90 = String._bridgeToObjectiveC()();
  v91 = objc_msgSend(v89, "initWithMachServiceName:", v90);

  qword_100275370 = (uint64_t)v91;
  objc_msgSend(v91, "setDelegate:", qword_100275350);
  v92 = objc_allocWithZone((Class)NSXPCListener);
  v93 = String._bridgeToObjectiveC()();
  v94 = objc_msgSend(v92, "initWithMachServiceName:", v93);

  qword_100275378 = (uint64_t)v94;
  objc_msgSend(v94, "setDelegate:", qword_100275358);
  qword_100275380 = 0;
  if (byte_100275330 == 1)
  {
    v95 = objc_allocWithZone((Class)NSXPCListener);
    v96 = String._bridgeToObjectiveC()();
    v97 = objc_msgSend(v95, "initWithMachServiceName:", v96);

    v98 = (void *)qword_100275380;
    qword_100275380 = (uint64_t)v97;

    if (qword_100275380)
      objc_msgSend((id)qword_100275380, "setDelegate:", qword_100275340);
  }
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  v99 = qword_1002757B0;
  v100 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
  if (v100)
  {
    v101 = qword_10026BC00;
    swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
    if (v101 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v102 = *(void ***)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v140 = (void *)type metadata accessor for AccessoryManager(0);
    v141 = &off_10023A058;
    aBlock = v102;
    sub_1000905D4((uint64_t)&aBlock, (uint64_t)&v144);
    swift_beginAccess(v100 + 80, v143, 33, 0);
    v103 = v102;
    sub_10009065C((uint64_t)&v144, v100 + 80);
    swift_endAccess(v143);
    swift_release(v100);
    v99 = qword_1002757B0;
    v104 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
    if (v104)
    {
      swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
      sub_1000DAD94(1);
      swift_release(v104);
      v99 = qword_1002757B0;
    }
  }
  v105 = *(void **)(v99 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue);
  v141 = (_UNKNOWN **)sub_10008EAA4;
  v142 = 0;
  aBlock = _NSConcreteStackBlock;
  v138 = 1107296256;
  v139 = sub_10008ED04;
  v140 = &unk_100238728;
  v106 = _Block_copy(&aBlock);
  v107 = v105;
  xpc_set_event_stream_handler("com.apple.bluetooth.discovery", v107, v106);
  _Block_release(v106);

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v108 = *(void **)(*(_QWORD *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                  + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  v141 = (_UNKNOWN **)sub_10008ED4C;
  v142 = 0;
  aBlock = _NSConcreteStackBlock;
  v138 = 1107296256;
  v139 = sub_10008ED04;
  v140 = &unk_100238750;
  v109 = _Block_copy(&aBlock);
  v110 = v108;
  xpc_set_event_stream_handler("com.apple.dockaccessoryd.pairsetup", v110, v109);
  _Block_release(v109);

  v111 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  aBlock = 0;
  v112 = objc_msgSend(v111, "getOrCreateLocalPairingIdentity:", &aBlock);
  v113 = aBlock;
  if (v112)
  {
    v114 = v112;
    v115 = aBlock;

  }
  else
  {
    v116 = aBlock;
    v117 = _convertNSErrorToError(_:)(v113);

    swift_willThrow(v118);
    swift_errorRelease(v117);
  }
  if (qword_10026BB70 != -1)
    swift_once(&qword_10026BB70, sub_1001150BC);
  qword_100275388 = qword_1002754E0;
  v119 = *(_BYTE *)(qword_1002754E0 + 24);
  v120 = swift_retain(qword_1002754E0);
  if ((v119 & 1) != 0)
  {
    sub_100115438(v120, v121);
  }
  else
  {
    v122 = sub_100115B78();
    sub_100115438(v122, v123);
    sub_100116140();
  }
  qword_100275390 = sub_10008F600();
  if (qword_100275380)
    objc_msgSend((id)qword_100275380, "resume");
  objc_msgSend((id)qword_100275360, "resume");
  objc_msgSend((id)qword_100275368, "resume");
  objc_msgSend((id)qword_100275370, "resume");
  objc_msgSend((id)qword_100275378, "resume");
  CFRunLoopRun();
  return 0;
}

uint64_t *sub_10008EA10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10008EA50(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *sub_10008EA68(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

const char *sub_10008EAA4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  const char *result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10008EA50(v4, (uint64_t)&unk_10026BB20);
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v10 = String.init(cString:)();
    v11 = v9;
    if (v10 == 0xD000000000000010)
    {
      v12 = 0x80000001001FC830;
      if (v9 == 0x80000001001FC830)
        return (const char *)swift_bridgeObjectRelease(v12);
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, 0xD000000000000010, 0x80000001001FC830, 0) & 1) != 0)
    {
      v12 = v11;
      return (const char *)swift_bridgeObjectRelease(v12);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    v13 = swift_bridgeObjectRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      v19 = v16 + 4;
      swift_bridgeObjectRetain(v11);
      v20 = sub_1000906BC(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v19, v16 + 12);
      swift_bridgeObjectRelease_n(v11, 3);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
    return (const char *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_10008ED04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

const char *sub_10008ED4C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  uint8_t *v27;
  uint8_t *v28;
  void (*v29)(char *, uint64_t);
  const char *result;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  unint64_t v42;
  xpc_type_t type;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void (*v47)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  _QWORD *v88;
  void **aBlock;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t (*v93)();
  void (*v94)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v95;
  uint64_t v96;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v82 = *(_QWORD *)(v2 - 8);
  v83 = v2;
  __chkstk_darwin(v2);
  v81 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v79 = *(_QWORD *)(v4 - 8);
  v80 = v4;
  __chkstk_darwin(v4);
  v78 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v6);
  v84 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v86 = (void (*)(char *, uint64_t))v8;
  v87 = v9;
  v10 = __chkstk_darwin(v8);
  v77 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v11;
  __chkstk_darwin(v10);
  v85 = (char *)&v75 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v75 - v19;
  v21 = sub_10008EA50(v18, (uint64_t)&unk_10026BB20);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23 = v22(v20, v21, v13);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = a1;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "NFC XPC event!", v27, 2u);
    v28 = v27;
    a1 = v26;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  v29(v20, v13);
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v31 = result;
    v32 = v22(v17, v21, v13);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (void **)swift_slowAlloc(32, -1);
      v75 = a1;
      v37 = v36;
      aBlock = v36;
      *(_DWORD *)v35 = 136315138;
      v38 = String.init(cString:)(v31);
      v40 = v39;
      v95 = sub_1000906BC(v38, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v40);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v41 = v37;
      a1 = v75;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }

    v29(v17, v13);
    v42 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    v95 = v42;
    type = xpc_get_type(a1);
    if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
      return (const char *)swift_bridgeObjectRelease(v42);
    v44 = swift_allocObject(&unk_100238A90, 24, 7);
    *(_QWORD *)(v44 + 16) = &v95;
    v45 = swift_allocObject(&unk_100238AB8, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_100090FC0;
    *(_QWORD *)(v45 + 24) = v44;
    v93 = sub_100090FD8;
    v94 = (void (*)(char *, uint64_t, void (*)(_QWORD, _QWORD)))v45;
    aBlock = _NSConcreteStackBlock;
    v90 = 1107296256;
    v91 = sub_10008F5B0;
    v92 = &unk_100238AD0;
    v46 = _Block_copy(&aBlock);
    v47 = v94;
    swift_retain(v45);
    swift_release(v47);
    xpc_dictionary_apply(a1, v46);
    _Block_release(v46);
    LOBYTE(v46) = swift_isEscapingClosureAtFileLocation(v45, "", 86, 98, 30, 1);
    swift_release(v45);
    if ((v46 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v48 = v95;
      if (!*(_QWORD *)(v95 + 16))
        goto LABEL_18;
      v49 = sub_100145264(7107189, 0xE300000000000000);
      if ((v50 & 1) == 0)
        goto LABEL_18;
      v51 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 16 * v49);
      v52 = *v51;
      v53 = v51[1];
      v54 = swift_bridgeObjectRetain(v53);
      v55 = (uint64_t)v84;
      URL.init(string:)(v52, v53, v54);
      v56 = v53;
      v57 = v55;
      swift_bridgeObjectRelease(v56);
      v29 = v86;
      v45 = v87;
      if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(char *, uint64_t)))(v87 + 48))(v55, 1, v86) == 1)
      {
        sub_100090FFC(v55);
LABEL_18:
        v42 = v95;
        swift_release(v44);
        return (const char *)swift_bridgeObjectRelease(v42);
      }
      v47 = *(void (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v45 + 32);
      v47(v85, v57, (void (*)(_QWORD, _QWORD))v29);
      if (qword_10026BC20 == -1)
      {
LABEL_13:
        v58 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
        if (v58)
        {
          swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
          sub_1000DAD94(5);
          swift_release(v58);
        }
        v84 = (char *)v44;
        if (qword_10026BC00 != -1)
          swift_once(&qword_10026BC00, sub_100158DF8);
        v59 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
        v60 = *(void **)&v59[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        v61 = v77;
        v62 = v85;
        (*(void (**)(char *, char *, void (*)(char *, uint64_t)))(v45 + 16))(v77, v85, v29);
        v63 = *(unsigned __int8 *)(v45 + 80);
        v64 = (v63 + 24) & ~v63;
        v65 = swift_allocObject(&unk_100238B08, v64 + v76, v63 | 7);
        *(_QWORD *)(v65 + 16) = v59;
        v47((char *)(v65 + v64), (uint64_t)v61, (void (*)(_QWORD, _QWORD))v29);
        v93 = sub_1000910B0;
        v94 = (void (*)(char *, uint64_t, void (*)(_QWORD, _QWORD)))v65;
        aBlock = _NSConcreteStackBlock;
        v90 = 1107296256;
        v91 = sub_10012357C;
        v92 = &unk_100238B20;
        v66 = _Block_copy(&aBlock);
        v67 = v59;
        v68 = v60;
        v69 = v78;
        static DispatchQoS.unspecified.getter(v68);
        v88 = _swiftEmptyArrayStorage;
        v70 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v71 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v72 = sub_100090F20();
        v73 = v81;
        v74 = v83;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v71, v72, v83, v70);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v69, v73, v66);
        _Block_release(v66);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v73, v74);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v69, v80);
        (*(void (**)(char *, _QWORD))(v87 + 8))(v62, v29);
        swift_release(v94);
        v44 = (uint64_t)v84;
        goto LABEL_18;
      }
    }
    swift_once(&qword_10026BC20, sub_1001A3078);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_10008F4D8(uint64_t a1, xpc_object_t object, _QWORD *a3)
{
  xpc_type_t type;
  const char *string_ptr;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)XPC_TYPE_STRING.getter())
  {
    string_ptr = xpc_string_get_string_ptr(object);
    if (string_ptr)
    {
      v8 = string_ptr;
      v9 = String.init(cString:)(a1);
      v11 = v10;
      v12 = String.init(cString:)(v8);
      v14 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
      v18 = *a3;
      *a3 = 0x8000000000000000;
      sub_1001BA9BC(v12, v14, v9, v11, isUniquelyReferenced_nonNull_native);
      v16 = *a3;
      *a3 = v18;
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v16);
    }
  }
  return 1;
}

uint64_t sub_10008F5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

uint64_t sub_10008F600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (__cdecl *v9)(int);
  void *v10;
  uint64_t v11;
  uint64_t ObjectType;
  void *v13;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (__cdecl *)(int))SIG_IGN.getter(v6);
  signal(15, v9);
  sub_100090EE8(0, &qword_10026BF48, OS_dispatch_source_ptr);
  sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, v10);

  ObjectType = swift_getObjectType(v11);
  aBlock[4] = sub_10008F7C4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100238A58;
  v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v13);
  sub_10008F900();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v8, v3, v13, ObjectType);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  OS_dispatch_source.resume()();
  return v11;
}

void sub_10008F7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10008EA50(v2, (uint64_t)&unk_10026BB20);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Asked to terminate, cleaning up transactions", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_1001653B8();
  sub_10016CA18();
  sub_10015B1D8();
}

uint64_t sub_10008F900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v3 = sub_100090F20();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t variable initialization expression of MotionValidator._timer()
{
  return 0;
}

double variable initialization expression of MotionFeedback.Velocity.value()
{
  return 0.0;
}

void *variable initialization expression of MotionValidator._angleStampedBufferImu()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of MotionValidator.logger()
{
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x61566E6F69746F4DLL, 0xEF726F746164696CLL);
}

double variable initialization expression of MotionValidator._startupConstants@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v2 = sub_10009061C(&qword_10026BC48);
  v3 = (_OWORD *)swift_allocObject(v2, 64, 7);
  v3[1] = xmmword_1001DD7E0;
  v3[2] = xmmword_1001DD7F0;
  v3[3] = xmmword_1001DD800;
  *(_OWORD *)a1 = xmmword_1001DD810;
  *(_QWORD *)(a1 + 16) = 0x3FC3333333333333;
  *(_QWORD *)(a1 + 24) = 5;
  *(_QWORD *)(a1 + 32) = 0x3FC3333333333333;
  *(_QWORD *)(a1 + 40) = v3;
  result = 0.1;
  *(_OWORD *)(a1 + 48) = xmmword_1001DD820;
  return result;
}

uint64_t variable initialization expression of MotionValidator._calibrationCallback()
{
  return 0;
}

double variable initialization expression of MotionValidator._expiry()
{
  return 1.0;
}

double variable initialization expression of MotionValidator._startupTimeout()
{
  return 15.0;
}

id variable initialization expression of DockDetector.startupValidator()
{
  id v0;

  v0 = objc_allocWithZone((Class)type metadata accessor for MotionValidator(0));
  return MotionValidator.init(type:interval:)(0, 0.1);
}

uint64_t variable initialization expression of DockDetector.logger()
{
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x657465446B636F44, 0xEC000000726F7463);
}

IOHIDManagerRef variable initialization expression of DockDetector.hidManager()
{
  return IOHIDManagerCreate(kCFAllocatorDefault, 0);
}

double variable initialization expression of DockDetector.jarvisInterval()
{
  return 0.2;
}

double variable initialization expression of DockDetector.jarvisLastDockedTimeout()
{
  return 2.0;
}

double variable initialization expression of DockDetector.jarvisLastUndockedTimeout()
{
  return 5.0;
}

double variable initialization expression of DockDetector.jarvisTimeThreshold()
{
  return 60.0;
}

uint64_t variable initialization expression of DockDetector.dockStatus@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DockStatus.Undocked(_:);
  v3 = type metadata accessor for DockStatus(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t variable initialization expression of DockDetector.jarvisReportLength()
{
  return 91;
}

uint64_t variable initialization expression of DockDetector.kJarvisReportID()
{
  return 2;
}

_DWORD *sub_10008FB88@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_10008FB98(uint64_t a1, uint64_t a2)
{
  return sub_100090460(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_10008FBB8(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10008FBC4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001DDA70, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10008FC00(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001DDA70, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10008FC48(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_1001DDA70, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10008FCA0(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10008FD14(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10008FD90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

id sub_10008FDD0()
{
  id *v0;

  return *v0;
}

uint64_t sub_10008FDD8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL sub_10008FDE0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10008FDF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1001DDA70, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10008FE44()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(MFAAErrorDomain);
}

uint64_t sub_10008FE54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10008FE94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10008FED4(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10008FF38()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10008FF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10008FFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_100090018@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100090028(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100090038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100090E1C((unint64_t *)&qword_10026C130, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE4CC);
  v3 = sub_100090E1C(&qword_10026C138, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE1C0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000900BC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000900E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100090E1C(&qword_10026C120, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1001DE43C);
  v3 = sub_100090E1C(&qword_10026C128, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1001DE3DC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100090168(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100090E1C((unint64_t *)&qword_10026C160, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001DE510);
  v3 = sub_100090E1C(&qword_10026C168, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001DDE2C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000901EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100090E1C(&qword_10026C150, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_1001DDF84);
  v3 = sub_100090E1C(&qword_10026C158, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_1001DDF2C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100090270@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000902B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100090E1C(&qword_10026C140, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_1001DE0C4);
  v3 = sub_100090E1C(&qword_10026C148, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_1001DE06C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100090338(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100090E1C(&qword_10026C0E0, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDD8C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100090378(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100090E1C(&qword_10026C0E0, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDD8C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000903BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000903FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100090454(uint64_t a1, uint64_t a2)
{
  return sub_100090460(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100090460(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10009049C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000904DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_10009054C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000905D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BC38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009061C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10009065C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BC38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000906A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000906B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000906BC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10009078C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100090EA8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100090EA8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100090E88(v12);
  return v7;
}

uint64_t sub_10009078C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100090944(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100090944(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000909D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100090B4C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100090B4C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000909D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1001B3180(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100090B4C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_10026BF40);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

__n128 initializeWithTake for SensorInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Angle2DStamped(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Angle2DStamped(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMRotationRate(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BEF0, (uint64_t)&unk_1002388D0);
}

_QWORD *sub_100090D10(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_100090D1C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100090D3C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for mach_timebase_info(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BEF8, (uint64_t)&unk_100238958);
}

void type metadata accessor for IOHIDDevice(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF00, (uint64_t)&unk_100238980);
}

void type metadata accessor for IOHIDManager(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF08, (uint64_t)&unk_1002389B0);
}

void type metadata accessor for HAPFirmwareUpdateState(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF10, (uint64_t)&unk_1002389E0);
}

void type metadata accessor for HAPDiagnosticsSnapshotType(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF18, (uint64_t)&unk_100238A00);
}

void type metadata accessor for HAPAccessoryServerPairSetupType(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF20, (uint64_t)&unk_100238A28);
}

void type metadata accessor for HAPPairSetupSessionRole(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BF28, (uint64_t)&unk_100238A48);
}

uint64_t sub_100090DF0()
{
  return sub_100090E1C(&qword_10026BF30, (uint64_t (*)(uint64_t))type metadata accessor for IOHIDDevice, (uint64_t)&unk_1001DDA08);
}

uint64_t sub_100090E1C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100090E5C()
{
  return sub_100090E1C(&qword_10026BF38, (uint64_t (*)(uint64_t))type metadata accessor for IOHIDDevice, (uint64_t)&unk_1001DDA30);
}

uint64_t sub_100090E88(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100090EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100090EE8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3, a2);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100090F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C580;
  if (!qword_10026C580)
  {
    v1 = sub_100090F6C((uint64_t *)&unk_10026BF60);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10026C580);
  }
  return result;
}

uint64_t sub_100090F6C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100090FB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090FC0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10008F4D8(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_100090FC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100090FD8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100090FFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C(&qword_10026BF70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009103C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000910B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1000C99A8(v0 + ((v1 + 24) & ~v1));
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BFD8, (uint64_t)&unk_100238B58);
}

void type metadata accessor for ACCEndpoint_TransportType_t(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BFE0, (uint64_t)&unk_100238B80);
}

void type metadata accessor for UARPFirmwareStagingCompletionStatus(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BFE8, (uint64_t)&unk_100238BA8);
}

void type metadata accessor for UARPFirmwareApplicationStatus(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BFF0, (uint64_t)&unk_100238BC8);
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026BFF8, (uint64_t)&unk_100238BE8);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C000, (uint64_t)&unk_100238C08);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C008, (uint64_t)&unk_100238C30);
}

void type metadata accessor for ID(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C010, (uint64_t)&unk_100238C60);
}

void type metadata accessor for EventType(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C018, (uint64_t)&unk_100238C88);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C020, (uint64_t)&unk_100238CB0);
}

void type metadata accessor for MFAAError(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C028, (uint64_t)&unk_100238CD8);
}

uint64_t initializeBufferWithCopyOfBuffer for SetupPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_1000911FC(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RotationErrorStamped(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RotationErrorStamped(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for Vector3D(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C030, (uint64_t)&unk_100238D58);
}

__n128 initializeWithTake for FeedbackRule(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C038, (uint64_t)&unk_100238DD0);
}

__n128 initializeWithTake for MACAddress(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C040, (uint64_t)&unk_100238E50);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C048, (uint64_t)&unk_100238E78);
}

void type metadata accessor for CBCentralManagerConnectionLatency(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C050, (uint64_t)&unk_100238EA0);
}

uint64_t sub_1000912D0()
{
  return sub_100090E1C(&qword_10026C058, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDCB4);
}

uint64_t sub_1000912FC()
{
  return sub_100090E1C(&qword_10026C060, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDCDC);
}

uint64_t sub_100091328()
{
  return sub_100090E1C(&qword_10026C068, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001DDDF4);
}

uint64_t sub_100091354()
{
  return sub_100090E1C(&qword_10026C070, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001DDDCC);
}

uint64_t sub_100091380()
{
  return sub_100090E1C(&qword_10026C078, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_1001DDEF4);
}

uint64_t sub_1000913AC()
{
  return sub_100090E1C(&qword_10026C080, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_1001DDECC);
}

uint64_t sub_1000913D8()
{
  return sub_100090E1C(&qword_10026C088, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_1001DDF5C);
}

uint64_t sub_100091404()
{
  return sub_100090E1C(&qword_10026C090, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_1001DE034);
}

uint64_t sub_100091430()
{
  return sub_100090E1C(&qword_10026C098, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_1001DE00C);
}

uint64_t sub_10009145C()
{
  return sub_100090E1C(&qword_10026C0A0, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_1001DE09C);
}

uint64_t sub_100091488()
{
  return sub_100090E1C(&qword_10026C0A8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE184);
}

uint64_t sub_1000914B4()
{
  return sub_100090E1C(&qword_10026C0B0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE158);
}

uint64_t sub_1000914E0()
{
  return sub_100090E1C(&qword_10026C0B8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1001DE3A0);
}

uint64_t sub_10009150C()
{
  return sub_100090E1C(&qword_10026C0C0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1001DE374);
}

uint64_t sub_100091538()
{
  return sub_100090E1C(&qword_10026C0C8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1001DE410);
}

uint64_t sub_100091564()
{
  return sub_100090E1C(&qword_10026C0D0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE1F4);
}

uint64_t sub_100091590()
{
  return sub_100090E1C(&qword_10026C0D8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001DDE5C);
}

uint64_t sub_1000915BC()
{
  return sub_100090E1C(&qword_10026C0E0, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDD8C);
}

uint64_t sub_1000915E8()
{
  return sub_100090E1C(&qword_10026C0E8, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDD5C);
}

uint64_t sub_100091614()
{
  return sub_100090E1C(&qword_10026C0F0, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DDD1C);
}

uint64_t sub_100091640()
{
  return sub_100090E1C(&qword_10026C0F8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001DE5F0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C170, (uint64_t)&unk_100238EC0);
}

uint64_t sub_100091680()
{
  return sub_100090E1C(&qword_10026C100, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001DE5B8);
}

unint64_t sub_1000916B0()
{
  unint64_t result;

  result = qword_10026C108;
  if (!qword_10026C108)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10026C108);
  }
  return result;
}

uint64_t sub_1000916F4()
{
  return sub_100090E1C(&qword_10026C110, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001DE628);
}

uint64_t sub_100091720()
{
  return sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
}

uint64_t getEnumTagSinglePayload for InvalalidAngle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InvalalidAngle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000917A8(a1, &qword_10026C178, (uint64_t)&unk_100238F38);
}

void sub_1000917A8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100091834()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026C240);
  sub_10008EA50(v0, (uint64_t)qword_10026C240);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000014, 0x80000001001FD070);
}

id sub_1000918B4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  objc_class *v12;
  objc_super v14;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
  v6 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000015, 0x80000001001FD240);
  v7 = &v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_DWORD *)v7 + 4) = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_MANUAL_FWUP_TIMEOUT] = 0x408F400000000000;
  v8 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "cert interface open", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v12 = (objc_class *)type metadata accessor for dockCertHandler(0);
  v14.receiver = v6;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, "init");
}

uint64_t sub_100091A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)(v8 + 64) = v16;
  *(_QWORD *)(v8 + 72) = v18;
  *(_DWORD *)(v8 + 200) = v17;
  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = a8;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 24) = a4;
  v9 = type metadata accessor for Errors(0);
  *(_QWORD *)(v8 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 88) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 96) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 104) = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 112) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 120) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 136) = swift_task_alloc(v14);
  return swift_task_switch(sub_100091B4C, 0, 0);
}

uint64_t sub_100091B4C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10009E60C();
  v1 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_100091B9C;
  return sub_1000DFA04();
}

uint64_t sub_100091B9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100091BF0, 0, 0);
}

uint64_t sub_100091BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, void *);

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  *(_QWORD *)(v2 + 152) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = type metadata accessor for AccessoryDiagnosticsOptions(0, a2);
    swift_allocObject(v5, 58, 7);
    swift_retain(v3);
    swift_bridgeObjectRetain(v4);
    v7 = sub_1000ED910(v6);
    *(_QWORD *)(v2 + 160) = v7;
    v8 = (_QWORD *)swift_task_alloc(dword_10026CC04);
    *(_QWORD *)(v2 + 168) = v8;
    *v8 = v2;
    v8[1] = sub_100091E80;
    return sub_1000BD554(v7);
  }
  else
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 + 120) + 16))(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 32) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v2 + 112));
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Diagnostics manager is nil", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v2 + 136);
    v15 = *(_QWORD *)(v2 + 112);
    v16 = *(_QWORD *)(v2 + 120);
    v18 = *(_QWORD *)(v2 + 96);
    v17 = *(_QWORD **)(v2 + 104);
    v19 = *(_QWORD *)(v2 + 80);
    v20 = *(_QWORD *)(v2 + 88);
    v28 = *(void (**)(uint64_t, void *))(v2 + 40);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    *v17 = 0xD00000000000001ALL;
    v17[1] = 0x80000001001FD190;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v17, enum case for Errors.NotFound(_:), v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v20 + 16))(v18, v17, v19);
    v21 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v22 = swift_allocError(v19, v21, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v23, v18, v19);
    v24 = (void *)_convertErrorToNSError(_:)(v22);
    v28(0xFFFFFFFFLL, v24);

    (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v17, v19);
    swift_errorRelease(v22);
    v25 = *(_QWORD *)(v2 + 128);
    v27 = *(_QWORD *)(v2 + 96);
    v26 = *(_QWORD *)(v2 + 104);
    swift_task_dealloc(*(_QWORD *)(v2 + 136));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_100091E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 168);
  *(_QWORD *)(*v3 + 176) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100091FB4;
  }
  else
  {
    *(_QWORD *)(v6 + 184) = a2;
    *(_QWORD *)(v6 + 192) = a1;
    v8 = sub_100091EF8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100091EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(unsigned int *)(v0 + 200);
  v6 = *(void **)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  objc_msgSend(v6, "diagnosticsFeedbackWithProcessID:info:path:err:", v4, v5, v7, 0);
  swift_release(v3);
  swift_release(v2);

  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 112));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 176);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Diagnostics transfer failed: %@", v6, 0xCu);
    v9 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 176);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  v14 = *(unsigned int *)(v0 + 200);
  v16 = *(void **)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v17 = (void *)_convertErrorToNSError(_:)(v11);
  objc_msgSend(v16, "diagnosticsFeedbackWithProcessID:info:path:err:", v14, v15, 0, v17);
  swift_release(v13);
  swift_release(v12);

  swift_errorRelease(v11);
  v18 = *(_QWORD *)(v0 + 128);
  v20 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100092284(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSString v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    v5 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 8);
    v6 = *(unsigned int *)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 16);
    sub_100094F68(v4, v5);

    if (v4)
    {
      swift_unknownObjectRetain(v4);
      v7 = String._bridgeToObjectiveC()();
      v8 = sub_10009B608();
      v9 = swift_allocError(&type metadata for FirmwareUpdateErrors, v8, 0, 0);
      *(_QWORD *)v10 = 0xD000000000000020;
      *(_QWORD *)(v10 + 8) = 0x80000001001FD210;
      *(_BYTE *)(v10 + 16) = 7;
      v11 = (void *)_convertErrorToNSError(_:)(v9);
      swift_errorRelease(v9);
      objc_msgSend(v4, "fwUpdateFeedbackWithProcessID:info:message:complete:err:", v6, v5, v7, 1, v11);

      swift_unknownObjectRelease_n(v4, 2);
    }
  }
  swift_beginAccess(v1, &v17, 0, 0);
  v12 = swift_unknownObjectWeakLoadStrong(v1);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = v12 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
    v15 = *(_QWORD *)(v12 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    v16 = *(void **)(v14 + 8);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    sub_100094F3C(v15, v16);

  }
}

uint64_t sub_1000924BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)(v6 + 344) = a6;
  *(_QWORD *)(v6 + 224) = a4;
  *(_QWORD *)(v6 + 232) = a5;
  *(_QWORD *)(v6 + 208) = a2;
  *(_QWORD *)(v6 + 216) = a3;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 240) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 248) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 256) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 264) = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 272) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 280) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 288) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 296) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 304) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 312) = swift_task_alloc(v12);
  return swift_task_switch(sub_100092584, 0, 0);
}

uint64_t sub_100092584()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;

  v1 = objc_msgSend(*(id *)(v0 + 216), "remoteObjectProxy");
  _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 96));
  swift_unknownObjectRelease(v1);
  v2 = sub_10009061C(&qword_10026C300);
  if ((swift_dynamicCast(v0 + 192, v0 + 96, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
    v41 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 272));
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "nsxpc proxy is nil", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }
    v45 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 280);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    goto LABEL_25;
  }
  v3 = *(void **)(v0 + 192);
  *(_QWORD *)(v0 + 320) = v3;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v4 = v0 + 16;
  v5 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v7 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v8 = v5;
  v9 = v7;
  OS_dispatch_semaphore.wait()();

  v10 = &v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v0 + 152, 0, 0);
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  if (v12)
  {
    v71 = v6;
    v72 = v5;
    v74 = v8;
    v77 = v3;
    v13 = *(_QWORD *)(v0 + 248);
    v14 = v11 + 32;
    v70 = *(_QWORD *)v10;
    swift_bridgeObjectRetain(v11);
    while (1)
    {
      v16 = *(_QWORD *)(v0 + 256);
      v15 = *(_QWORD *)(v0 + 264);
      v17 = *(_QWORD *)(v0 + 240);
      sub_10009AFF4(v14, v0 + 56);
      v18 = *(id *)(*sub_10009B038((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80)) + 24);
      DockCoreInfo.identifier.getter(v18);

      DockCoreInfo.identifier.getter(v19);
      LOBYTE(v18) = static UUID.== infix(_:_:)(v15, v16);
      v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v20(v16, v17);
      v20(v15, v17);
      if ((v18 & 1) != 0)
        break;
      sub_100090E88((_QWORD *)(v0 + 56));
      v14 += 40;
      if (!--v12)
      {
        swift_bridgeObjectRelease(v70);
        v4 = v0 + 16;
        v3 = v77;
        v5 = v72;
        v8 = v74;
        v6 = v71;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v70);
    v48 = *(id *)&v72[v71];
    OS_dispatch_semaphore.signal()();

    v4 = v0 + 16;
    sub_10009AFF4(v0 + 56, v0 + 16);
    sub_100090E88((_QWORD *)(v0 + 56));

    v3 = v77;
    if (!*(_QWORD *)(v0 + 40))
      goto LABEL_19;
  }
  else
  {
LABEL_9:
    v21 = *(id *)&v5[v6];
    OS_dispatch_semaphore.signal()();

    *(_QWORD *)(v4 + 32) = 0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;

    if (!*(_QWORD *)(v0 + 40))
    {
LABEL_19:
      sub_10009B2C0(v4, (uint64_t *)&unk_10026DF40);
      goto LABEL_21;
    }
  }
  v22 = sub_10009061C(&qword_10026C2E0);
  v23 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v0 + 176, v4, v22, v23, 6) & 1) == 0)
  {
LABEL_21:
    v49 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 272));
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Accessory record not found", v52, 2u);
      swift_slowDealloc(v52, -1, -1);

      swift_unknownObjectRelease(v3);
    }
    else
    {
      swift_unknownObjectRelease(v3);

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    goto LABEL_25;
  }
  v24 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 328) = v24;
  if (*(_BYTE *)(v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release(v24);
    goto LABEL_21;
  }
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 224);
  if (v25)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v27 + 16))(*(_QWORD *)(v0 + 296), v28 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v26);
    swift_errorRetain(v25);
    swift_errorRetain(v25);
    v29 = swift_errorRetain(v25);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 296);
    v34 = *(_QWORD *)(v0 + 272);
    v35 = *(_QWORD *)(v0 + 280);
    if (v32)
    {
      v76 = *(_QWORD *)(v0 + 296);
      v75 = *(_QWORD *)(v0 + 272);
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = v35;
      v37 = swift_slowAlloc(32, -1);
      v78 = v37;
      *(_DWORD *)v36 = 136315138;
      swift_getErrorValue(v25, v0 + 184, v0 + 128);
      v38 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      v40 = v39;
      *(_QWORD *)(v0 + 200) = sub_1000906BC(v38, v39, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Device connection failed: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v76, v75);
    }
    else
    {
      swift_errorRelease(v25);
      swift_errorRelease(v25);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    }
    v67 = *(unsigned int *)(v0 + 344);
    v68 = *(_QWORD *)(v0 + 232);
    v69 = (void *)_convertErrorToNSError(_:)(v25);
    objc_msgSend(v3, "haltFeedbackWithProcessID:info:success:complete:err:", v67, v68, 0, 1, v69);
    swift_unknownObjectRelease(v3);
    swift_release(v24);

    swift_errorRelease(v25);
LABEL_25:
    v53 = *(_QWORD *)(v0 + 304);
    v55 = *(_QWORD *)(v0 + 288);
    v54 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 256);
    v56 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v59 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v27 + 16))(*(_QWORD *)(v0 + 304), v28 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v26);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Device connected, initiating halt request", v62, 2u);
    swift_slowDealloc(v62, -1, -1);
  }
  v63 = *(_QWORD *)(v0 + 304);
  v64 = *(_QWORD *)(v0 + 272);
  v65 = *(_QWORD *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
  v66 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 336) = v66;
  *v66 = v0;
  v66[1] = sub_100092D44;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 348, 0, 0, 0x2928746C6168, 0xE600000000000000, sub_10009B5F8, v24, &type metadata for Bool);
}

uint64_t sub_100092D44()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  return swift_task_switch(sub_100092D98, 0, 0);
}

uint64_t sub_100092D98()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  objc_msgSend(v1, "haltFeedbackWithProcessID:info:success:complete:err:", *(unsigned int *)(v0 + 344), *(_QWORD *)(v0 + 232), *(unsigned __int8 *)(v0 + 348), 1, 0);
  swift_release(v2);
  swift_unknownObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092E40(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  int *v10;

  v10 = (int *)((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v6 + 16) = v8;
  *v8 = v6;
  v8[1] = sub_10009B7AC;
  return ((uint64_t (*)(uint64_t, _QWORD))v10)(a6, 0);
}

uint64_t sub_100092EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)(v6 + 344) = a6;
  *(_QWORD *)(v6 + 224) = a4;
  *(_QWORD *)(v6 + 232) = a5;
  *(_QWORD *)(v6 + 208) = a2;
  *(_QWORD *)(v6 + 216) = a3;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 240) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 248) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 256) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 264) = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 272) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 280) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 288) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 296) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 304) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 312) = swift_task_alloc(v12);
  return swift_task_switch(sub_100092F7C, 0, 0);
}

uint64_t sub_100092F7C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;

  v1 = objc_msgSend(*(id *)(v0 + 216), "remoteObjectProxy");
  _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 96));
  swift_unknownObjectRelease(v1);
  v2 = sub_10009061C(&qword_10026C300);
  if ((swift_dynamicCast(v0 + 192, v0 + 96, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
    v41 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 272));
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "nsxpc proxy is nil", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }
    v45 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 280);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    goto LABEL_25;
  }
  v3 = *(void **)(v0 + 192);
  *(_QWORD *)(v0 + 320) = v3;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v4 = v0 + 16;
  v5 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v7 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v8 = v5;
  v9 = v7;
  OS_dispatch_semaphore.wait()();

  v10 = &v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v0 + 152, 0, 0);
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  if (v12)
  {
    v71 = v6;
    v72 = v5;
    v74 = v8;
    v77 = v3;
    v13 = *(_QWORD *)(v0 + 248);
    v14 = v11 + 32;
    v70 = *(_QWORD *)v10;
    swift_bridgeObjectRetain(v11);
    while (1)
    {
      v16 = *(_QWORD *)(v0 + 256);
      v15 = *(_QWORD *)(v0 + 264);
      v17 = *(_QWORD *)(v0 + 240);
      sub_10009AFF4(v14, v0 + 56);
      v18 = *(id *)(*sub_10009B038((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80)) + 24);
      DockCoreInfo.identifier.getter(v18);

      DockCoreInfo.identifier.getter(v19);
      LOBYTE(v18) = static UUID.== infix(_:_:)(v15, v16);
      v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v20(v16, v17);
      v20(v15, v17);
      if ((v18 & 1) != 0)
        break;
      sub_100090E88((_QWORD *)(v0 + 56));
      v14 += 40;
      if (!--v12)
      {
        swift_bridgeObjectRelease(v70);
        v4 = v0 + 16;
        v3 = v77;
        v5 = v72;
        v8 = v74;
        v6 = v71;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v70);
    v48 = *(id *)&v72[v71];
    OS_dispatch_semaphore.signal()();

    v4 = v0 + 16;
    sub_10009AFF4(v0 + 56, v0 + 16);
    sub_100090E88((_QWORD *)(v0 + 56));

    v3 = v77;
    if (!*(_QWORD *)(v0 + 40))
      goto LABEL_19;
  }
  else
  {
LABEL_9:
    v21 = *(id *)&v5[v6];
    OS_dispatch_semaphore.signal()();

    *(_QWORD *)(v4 + 32) = 0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;

    if (!*(_QWORD *)(v0 + 40))
    {
LABEL_19:
      sub_10009B2C0(v4, (uint64_t *)&unk_10026DF40);
      goto LABEL_21;
    }
  }
  v22 = sub_10009061C(&qword_10026C2E0);
  v23 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v0 + 176, v4, v22, v23, 6) & 1) == 0)
  {
LABEL_21:
    v49 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 272));
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Accessory record not found", v52, 2u);
      swift_slowDealloc(v52, -1, -1);

      swift_unknownObjectRelease(v3);
    }
    else
    {
      swift_unknownObjectRelease(v3);

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    goto LABEL_25;
  }
  v24 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 328) = v24;
  if (*(_BYTE *)(v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release(v24);
    goto LABEL_21;
  }
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 224);
  if (v25)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v27 + 16))(*(_QWORD *)(v0 + 296), v28 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v26);
    swift_errorRetain(v25);
    swift_errorRetain(v25);
    v29 = swift_errorRetain(v25);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 296);
    v34 = *(_QWORD *)(v0 + 272);
    v35 = *(_QWORD *)(v0 + 280);
    if (v32)
    {
      v76 = *(_QWORD *)(v0 + 296);
      v75 = *(_QWORD *)(v0 + 272);
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = v35;
      v37 = swift_slowAlloc(32, -1);
      v78 = v37;
      *(_DWORD *)v36 = 136315138;
      swift_getErrorValue(v25, v0 + 184, v0 + 128);
      v38 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      v40 = v39;
      *(_QWORD *)(v0 + 200) = sub_1000906BC(v38, v39, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Device connection failed: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v76, v75);
    }
    else
    {
      swift_errorRelease(v25);
      swift_errorRelease(v25);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    }
    v67 = *(unsigned int *)(v0 + 344);
    v68 = *(_QWORD *)(v0 + 232);
    v69 = (void *)_convertErrorToNSError(_:)(v25);
    objc_msgSend(v3, "rebootFeedbackWithProcessID:info:success:complete:err:", v67, v68, 0, 1, v69);
    swift_unknownObjectRelease(v3);
    swift_release(v24);

    swift_errorRelease(v25);
LABEL_25:
    v53 = *(_QWORD *)(v0 + 304);
    v55 = *(_QWORD *)(v0 + 288);
    v54 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 256);
    v56 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v59 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v27 + 16))(*(_QWORD *)(v0 + 304), v28 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v26);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Device connected, initiating reboot request", v62, 2u);
    swift_slowDealloc(v62, -1, -1);
  }
  v63 = *(_QWORD *)(v0 + 304);
  v64 = *(_QWORD *)(v0 + 272);
  v65 = *(_QWORD *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
  v66 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 336) = v66;
  *v66 = v0;
  v66[1] = sub_100093740;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 348, 0, 0, 0x2928746F6F626572, 0xE800000000000000, sub_10009B470, v24, &type metadata for Bool);
}

uint64_t sub_100093740()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  return swift_task_switch(sub_100093794, 0, 0);
}

uint64_t sub_100093794()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  objc_msgSend(v1, "rebootFeedbackWithProcessID:info:success:complete:err:", *(unsigned int *)(v0 + 344), *(_QWORD *)(v0 + 232), *(unsigned __int8 *)(v0 + 348), 1, 0);
  swift_release(v2);
  swift_unknownObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100093848(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);

}

uint64_t sub_100093940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  uint64_t v17;

  *(_DWORD *)(v8 + 304) = v16;
  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 184) = v17;
  *(_QWORD *)(v8 + 160) = a6;
  *(_QWORD *)(v8 + 168) = a7;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 152) = a5;
  v9 = type metadata accessor for Errors(0);
  *(_QWORD *)(v8 + 192) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 200) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 208) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 216) = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 224) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 232) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v14);
  return swift_task_switch(sub_100093A28, 0, 0);
}

uint64_t sub_100093A28()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10009E60C();
  v1 = (_QWORD *)swift_task_alloc(dword_10026D664);
  *(_QWORD *)(v0 + 256) = v1;
  *v1 = v0;
  v1[1] = sub_100093AA4;
  return sub_1000E23C4();
}

uint64_t sub_100093AA4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_100093B24, 0, 0);
}

uint64_t sub_100093B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, void *);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager);
  *(_QWORD *)(v0 + 264) = v1;
  if (v1)
  {
    v2 = dword_10026D054;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 272) = v3;
    *v3 = v0;
    v3[1] = sub_100093DC4;
    return sub_1000D6DC0();
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 16))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 224));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, (os_log_type_t)v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, (os_log_type_t)v7, "Accessory description manager is nil", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 248);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD **)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v23 = *(void (**)(uint64_t, _QWORD, void *))(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    *v12 = 0xD00000000000001ALL;
    v12[1] = 0x80000001001FD190;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v12, enum case for Errors.NotFound(_:), v14);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 16))(v13, v12, v14);
    v16 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v17 = swift_allocError(v14, v16, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v13, v14);
    v19 = (void *)_convertErrorToNSError(_:)(v17);
    v23(0xFFFFFFFFLL, 0, v19);

    (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v12, v14);
    swift_errorRelease(v17);
    v20 = *(_QWORD *)(v0 + 240);
    v22 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100093DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 272);
  v4[35] = a1;
  v4[36] = a2;
  v4[37] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10009429C;
  else
    v6 = sub_100093E78;
  return swift_task_switch(v6, 0, 0);
}

void sub_100093E78()
{
  __asm { BR              X10 }
}

uint64_t sub_100093EE0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 322) = v2;
  *(_WORD *)(v0 + 330) = v1;
  *(_BYTE *)(v0 + 332) = BYTE2(v1);
  *(_BYTE *)(v0 + 333) = BYTE3(v1);
  *(_BYTE *)(v0 + 334) = BYTE4(v1);
  *(_BYTE *)(v0 + 335) = BYTE5(v1);
  static String._fromUTF8Repairing(_:)(v0 + 322, BYTE6(v1));
  v4 = v3;
  sub_10009B2FC(v2, v1);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 264);
  v8 = *(unsigned int *)(v0 + 304);
  v10 = *(void **)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 184);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v10, "accessoryDescriptionFeedbackWithProcessID:info:accessoryDescription:err:", v8, v9, v11, 0);
  swift_release(v7);

  sub_10009B2FC(v5, v6);
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 16))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(_QWORD *)(v0 + 224));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 296);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 128) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Accessory Description transfer request failed with %@", v6, 0xCu);
    v9 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 296);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 264);
  v13 = *(unsigned int *)(v0 + 304);
  v15 = *(void **)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
  v16 = (void *)_convertErrorToNSError(_:)(v11);
  objc_msgSend(v15, "accessoryDescriptionFeedbackWithProcessID:info:accessoryDescription:err:", v13, v14, 0, v16);
  swift_release(v12);

  swift_errorRelease(v11);
  v17 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000944F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_10009450C, 0, 0);
}

uint64_t sub_10009450C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_1000945BC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000010, 0x80000001001FD0D0, sub_10009B134, v2, &type metadata for Bool);
}

uint64_t sub_1000945BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100094618, 0, 0);
}

uint64_t sub_100094618()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100094638(void *a1, int a2, void *a3, void *aBlock, void (*a5)(void *, id, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(a3, v10, v8);
  _Block_release(v8);
  _Block_release(v8);

}

id sub_1000946BC()
{
  return sub_100094D38(0, (uint64_t (*)(void))type metadata accessor for dockCertHandler);
}

uint64_t sub_100094734()
{
  return type metadata accessor for dockCertHandler(0);
}

uint64_t type metadata accessor for dockCertHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C280;
  if (!qword_10026C280)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for dockCertHandler);
  return result;
}

uint64_t sub_100094778(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001DE6D0;
    v4[2] = &unk_1001DE6E8;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100094804(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  void *v10;
  void *v11;
  NSString v12;
  uint64_t v13;
  void *v14;

  v6 = v4 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
  v7 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
  if (v7)
  {
    v9 = *(unsigned int *)(v6 + 16);
    v10 = *(void **)(v6 + 8);
    v11 = (void *)swift_unknownObjectRetain(v7);
    sub_100094F68(v11, v10);
    v12 = String._bridgeToObjectiveC()();
    if (a4)
      a4 = (void *)_convertErrorToNSError(_:)(a4);
    objc_msgSend(v7, "fwUpdateFeedbackWithProcessID:info:message:complete:err:", v9, v10, v12, a3 & 1, a4);

    swift_unknownObjectRelease_n(v7, 2);
  }
  if ((a3 & 1) != 0)
  {
    v13 = *(_QWORD *)v6;
    v14 = *(void **)(v6 + 8);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    sub_100094F3C(v13, v14);
  }
}

void sub_1000948FC(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  sub_100094804(a1, a2, a3, a4);
}

void sub_10009491C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if ((a1 & 1) == 0)
  {
    v2 = *v1;
    v3 = *(void **)(*v1 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer);
    *(_QWORD *)(*v1 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer) = 0;

    v4 = v2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    v6 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 8);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    sub_100094F3C(v5, v6);
  }
}

uint64_t sub_100094970(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *Strong;
  uint64_t v30;
  os_unfair_lock_s *v31;
  void *v32;
  os_unfair_lock_s *v33;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB38 != -1)
    swift_once(&qword_10026BB38, sub_100091834);
  v14 = sub_10008EA50(v10, (uint64_t)qword_10026C240);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v38 = a1;
  if (v18)
  {
    v19 = swift_slowAlloc(18, -1);
    v36 = a5;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v37 = a4;
    v22 = v21;
    v39[0] = v21;
    *(_DWORD *)v20 = 67109378;
    LODWORD(v40) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v20 + 4, v20 + 8);
    *(_WORD *)(v20 + 8) = 2080;
    v40 = a2;
    v41 = a3;
    swift_bridgeObjectRetain(a3);
    v23 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v24 = String.init<A>(describing:)(&v40, v23);
    v26 = v25;
    v40 = sub_1000906BC(v24, v25, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 10, v20 + 18);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v36, (uint8_t *)v20, 0x12u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a4 = v37;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v28 = qword_100275638;
  swift_beginAccess(a4 + 16, &v40, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a4 + 16);
  v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v31 = *(os_unfair_lock_s **)(v28 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v31);
  os_unfair_lock_lock(v31 + 4);
  swift_release(v31);
  swift_beginAccess(v28 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, v39, 33, 0);
  v32 = (void *)sub_1001B3E28(v38);
  swift_endAccess(v39);

  v33 = *(os_unfair_lock_s **)(v28 + v30);
  swift_retain(v33);
  os_unfair_lock_unlock(v33 + 4);

  return swift_release(v33);
}

id sub_100094D2C(uint64_t a1)
{
  return sub_100094D38(a1, (uint64_t (*)(void))type metadata accessor for CertificationServiceDelegate);
}

id sub_100094D38(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for CertificationServiceDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd28CertificationServiceDelegate, a2);
}

void destroy for ProxyContainer(uint64_t a1)
{
  swift_unknownObjectRelease(*(_QWORD *)a1);

}

uint64_t _s14dockaccessoryd14ProxyContainerVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  swift_unknownObjectRetain(v3);
  v5 = v4;
  return a1;
}

uint64_t *assignWithCopy for ProxyContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  return a1;
}

__n128 initializeWithTake for ProxyContainer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ProxyContainer(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_unknownObjectRelease(*(_QWORD *)a1);
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxyContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxyContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxyContainer()
{
  return &type metadata for ProxyContainer;
}

void sub_100094F3C(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_unknownObjectRelease(a1);

  }
}

id sub_100094F68(id result, void *a2)
{
  if (result)
  {
    swift_unknownObjectRetain(result);
    return a2;
  }
  return result;
}

void sub_100094F94(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  unint64_t v15;
  id v16;
  NSString v17;
  Class isa;
  id v19;
  _BYTE v20[16];

  v5 = type metadata accessor for UUID(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for Logger(0);
  __chkstk_darwin(v6);
  if (a1)
  {
    v7 = qword_10026BC00;
    v8 = a1;
    if (v7 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v9 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000C25A4(v8);

    v19 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a3 + 16))(a3, 1, 0);

  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v11 = v10;
    v12 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v12, v20);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v14;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001001FD090;
    v15 = sub_1001B0FB8(inited);
    v16 = objc_allocWithZone((Class)NSError);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v15);
    v19 = objc_msgSend(v16, "initWithDomain:code:userInfo:", v17, 72, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a3 + 16))(a3, 0, v19);
  }

}

void sub_1000955F0(void *a1, uint64_t a2, void *a3, void (**a4)(const void *, uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  void *v37;
  os_unfair_lock_s *v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  _BYTE *v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  id v58;
  uint64_t v59;
  void (*v60)(_BYTE *, NSObject *);
  NSObject *v61;
  id v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  unint64_t v72;
  id v73;
  NSString v74;
  Class v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  BOOL v82;
  uint64_t v83;
  NSObject *v84;
  uint8_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  _QWORD *v109;
  NSObject *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  id v146;
  NSObject *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  _BYTE v162[12];
  unsigned int v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  void *v174;
  _BYTE *v175;
  _QWORD *v176;
  uint64_t v177;
  void (**v178)(const void *, uint64_t, _QWORD);
  void *v179;
  Class isa;
  NSObject *v181;
  _QWORD v182[5];
  char v183[24];
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char v187[4];

  v179 = a3;
  v164 = a2;
  v174 = a1;
  v181 = type metadata accessor for UUID(0);
  isa = v181[-1].isa;
  v5 = __chkstk_darwin(v181);
  v7 = &v162[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v162[-v8];
  v10 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v10);
  v165 = &v162[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Errors(0);
  v177 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v175 = &v162[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v176 = &v162[-v15];
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v168 = &v162[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v167 = &v162[-v21];
  v22 = __chkstk_darwin(v20);
  v169 = &v162[-v23];
  v24 = __chkstk_darwin(v22);
  v26 = &v162[-v25];
  __chkstk_darwin(v24);
  v28 = &v162[-v27];
  v29 = swift_allocObject(&unk_1002393A0, 24, 7);
  *(_QWORD *)(v29 + 16) = a4;
  v31 = (void *)objc_opt_self(NSXPCConnection, v30);
  v178 = a4;
  _Block_copy(a4);
  v32 = objc_msgSend(v31, "currentConnection");
  if (v32)
  {
    v170 = v17;
    v171 = v16;
    v166 = v12;
    v173 = v29;
    v172 = v32;
    v33 = -[NSObject processIdentifier](v32, "processIdentifier");
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v34 = qword_100275638;
    v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v36 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v36);
    os_unfair_lock_lock(v36 + 4);
    swift_release(v36);
    v37 = *(void **)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v38 = *(os_unfair_lock_s **)(v34 + v35);
    v39 = v37;
    swift_retain(v38);
    os_unfair_lock_unlock(v38 + 4);
    v40 = swift_release(v38);
    if (v37)
    {
      v163 = v33;
      v41 = dispatch thunk of DockCoreAccessory.info.getter(v40);

      v42 = v173;
      v43 = v172;
      v44 = v174;
      if (!v174)
        goto LABEL_8;
      type metadata accessor for DockCoreInfo(0);
      v45 = v44;
      if ((static NSObject.== infix(_:_:)(v41, v45) & 1) != 0)
      {

LABEL_8:
        v46 = -[NSObject remoteObjectProxy](v43, "remoteObjectProxy");
        _bridgeAnyObjectToAny(_:)(&v184);
        swift_unknownObjectRelease(v46);
        v47 = sub_10009061C(&qword_10026C300);
        if (swift_dynamicCast(v182, &v184, (char *)&type metadata for Any + 8, v47, 6))
        {
          v174 = (void *)v182[0];
          v48 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
          v49 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
          v50 = *(void **)((char *)v48 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
          v51 = v48;
          v52 = v50;
          OS_dispatch_semaphore.wait()();

          v53 = &v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
          swift_beginAccess(&v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v183, 0, 0);
          v54 = *(_QWORD *)v53;
          v55 = *(_QWORD *)(*(_QWORD *)v53 + 16);
          if (v55)
          {
            v167 = (_BYTE *)v49;
            v169 = v51;
            v56 = v54 + 32;
            swift_bridgeObjectRetain(v54);
            v57 = v181;
            while (1)
            {
              sub_10009AFF4(v56, (uint64_t)v182);
              v58 = *(id *)(*sub_10009B038(v182, v182[3]) + 24);
              DockCoreInfo.identifier.getter(v58);

              DockCoreInfo.identifier.getter(v59);
              LOBYTE(v58) = static UUID.== infix(_:_:)(v9, v7);
              v60 = (void (*)(_BYTE *, NSObject *))*((_QWORD *)isa + 1);
              v60(v7, v57);
              v60(v9, v57);
              if ((v58 & 1) != 0)
                break;
              sub_100090E88(v182);
              v56 += 40;
              if (!--v55)
              {
                swift_bridgeObjectRelease(v54);
                v51 = v169;
                v49 = (uint64_t)v167;
                goto LABEL_14;
              }
            }
            v61 = v41;
            swift_bridgeObjectRelease(v54);
            v128 = *(id *)&v167[(_QWORD)v48];
            OS_dispatch_semaphore.signal()();

            sub_10009AFF4((uint64_t)v182, (uint64_t)&v184);
            sub_100090E88(v182);

          }
          else
          {
LABEL_14:
            v61 = v41;
            v62 = *(id *)((char *)v48 + v49);
            OS_dispatch_semaphore.signal()();

            v186 = 0;
            v184 = 0u;
            v185 = 0u;

          }
          v129 = v173;
          v130 = v172;
          v131 = v171;
          v132 = v170;
          v133 = v168;
          if (*((_QWORD *)&v185 + 1))
          {
            v134 = sub_10009061C(&qword_10026C2E0);
            v135 = type metadata accessor for DaemonAccessory(0);
            if ((swift_dynamicCast(v182, &v184, v134, v135, 6) & 1) != 0)
            {
              v136 = v182[0];
              if (*(_BYTE *)(v182[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
                && (v137 = *(char **)(v182[0] + 16)) != 0
                && (v138 = *(void **)&v137[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
              {
                v139 = v137;
                if (objc_msgSend(v138, "state") == (id)2)
                {
                  v140 = type metadata accessor for TaskPriority(0);
                  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v165, 1, 1, v140);
                  v141 = swift_allocObject(&unk_1002393C8, 96, 7);
                  *(_QWORD *)(v141 + 16) = 0;
                  *(_QWORD *)(v141 + 24) = 0;
                  v142 = v179;
                  *(_QWORD *)(v141 + 32) = v136;
                  *(_QWORD *)(v141 + 40) = v142;
                  *(_QWORD *)(v141 + 48) = sub_10009B688;
                  *(_QWORD *)(v141 + 56) = v129;
                  v143 = v164;
                  v144 = v174;
                  *(_QWORD *)(v141 + 64) = v164;
                  *(_QWORD *)(v141 + 72) = v144;
                  v145 = v163;
                  *(_DWORD *)(v141 + 80) = v163;
                  *(_QWORD *)(v141 + 88) = v61;
                  swift_retain(v136);
                  v146 = v142;
                  swift_retain(v129);
                  swift_bridgeObjectRetain(v143);
                  swift_unknownObjectRetain(v144);
                  v147 = v61;
                  v148 = v139;
                  v149 = sub_10018A990((uint64_t)v165, (uint64_t)&unk_10026C390, v141);
                  swift_release(v136);

                  swift_release(v149);
                  v178[2](v178, v145, 0);
                  swift_release(v129);

                  swift_unknownObjectRelease(v144);
                  return;
                }
                swift_release(v136);

              }
              else
              {
                swift_release(v182[0]);
              }
            }
          }
          else
          {
            sub_10009B2C0((uint64_t)&v184, (uint64_t *)&unk_10026DF40);
          }
          v150 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v132 + 16))(v133, (uint64_t)v179 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v131);
          v151 = Logger.logObject.getter(v150);
          v152 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v151, v152))
          {
            v153 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v153 = 0;
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "accessory does not exist and/or is not paired", v153, 2u);
            swift_slowDealloc(v153, -1, -1);
          }

          (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v133, v131);
          v154 = v176;
          *v176 = 0xD00000000000002DLL;
          v154[1] = 0x80000001001FD140;
          v155 = v177;
          v156 = v166;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v177 + 104))(v154, enum case for Errors.NotFound(_:), v166);
          v157 = v175;
          (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v155 + 16))(v175, v154, v156);
          v158 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
          v159 = swift_allocError(v156, v158, 0, 0);
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v155 + 32))(v160, v157, v156);
          v161 = (void *)_convertErrorToNSError(_:)(v159);
          ((void (**)(const void *, uint64_t, void *))v178)[2](v178, 0xFFFFFFFFLL, v161);
          swift_unknownObjectRelease(v174);

          (*(void (**)(_QWORD *, uint64_t))(v155 + 8))(v154, v156);
          swift_errorRelease(v159);
          v94 = v129;
        }
        else
        {
          v95 = v170;
          v96 = v167;
          v97 = v171;
          v98 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v170 + 16))(v167, (uint64_t)v179 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v171);
          v99 = Logger.logObject.getter(v98);
          v100 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v99, v100))
          {
            v101 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v101 = 0;
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "nsxpc proxy is nil", v101, 2u);
            swift_slowDealloc(v101, -1, -1);
            v102 = v41;
          }
          else
          {
            v102 = v99;
            v99 = v43;
            v43 = v41;
          }

          (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v96, v97);
          v94 = v42;
        }
        goto LABEL_42;
      }
      v181 = v41;
      v103 = v170;
      v104 = v171;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v170 + 16))(v169, (uint64_t)v179 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v171);
      v105 = v45;
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(12, -1);
        v109 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v108 = 138412290;
        *(_QWORD *)&v184 = v105;
        v110 = v105;
        v103 = v170;
        v104 = v171;
        v42 = v173;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, (char *)&v184 + 8, v108 + 4, v108 + 12);
        *v109 = v174;

        _os_log_impl((void *)&_mh_execute_header, v106, v107, "%@ is not connected", v108, 0xCu);
        v111 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v109, 1, v111);
        v112 = v109;
        v43 = v172;
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v108, -1, -1);
      }
      else
      {

        v106 = v105;
      }
      v113 = v166;

      (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v169, v104);
      *(_QWORD *)&v184 = 0;
      *((_QWORD *)&v184 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      v114 = *((_QWORD *)&v184 + 1);
      v115 = -[NSObject description](v105, "description");
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;
      swift_bridgeObjectRelease(v114);

      *(_QWORD *)&v184 = v116;
      *((_QWORD *)&v184 + 1) = v118;
      v119._object = (void *)0x80000001001FD170;
      v119._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v119);
      v120 = *((_QWORD *)&v184 + 1);
      v121 = v176;
      *v176 = v184;
      v121[1] = v120;
      v122 = v177;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v177 + 104))(v121, enum case for Errors.AccessoryNotReachable(_:), v113);
      v123 = v175;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v122 + 16))(v175, v121, v113);
      v124 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v125 = swift_allocError(v113, v124, 0, 0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v122 + 32))(v126, v123, v113);
      v127 = (void *)_convertErrorToNSError(_:)(v125);
      ((void (**)(const void *, uint64_t, void *))v178)[2](v178, 0xFFFFFFFFLL, v127);

      (*(void (**)(_QWORD *, uint64_t))(v122 + 8))(v121, v113);
      swift_errorRelease(v125);
      v94 = v42;
    }
    else
    {
      v77 = v170;
      v78 = v171;
      v79 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v170 + 16))(v26, (uint64_t)v179 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v171);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      v82 = os_log_type_enabled(v80, v81);
      v83 = v173;
      v84 = v172;
      if (v82)
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "No accessory connected. Cannot initiate accessory diagnostics", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v26, v78);
      v86 = v176;
      *v176 = 0xD000000000000016;
      v86[1] = 0x80000001001FD120;
      v87 = v177;
      v88 = v166;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v177 + 104))(v86, enum case for Errors.AccessoryNotReachable(_:), v166);
      v89 = v175;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v87 + 16))(v175, v86, v88);
      v90 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v91 = swift_allocError(v88, v90, 0, 0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v87 + 32))(v92, v89, v88);
      v93 = (void *)_convertErrorToNSError(_:)(v91);
      ((void (**)(const void *, uint64_t, void *))v178)[2](v178, 0xFFFFFFFFLL, v93);

      (*(void (**)(_QWORD *, uint64_t))(v87 + 8))(v86, v88);
      swift_errorRelease(v91);
      v94 = v83;
    }
LABEL_42:
    swift_release(v94);
    return;
  }
  v63 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v28, (uint64_t)v179 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v16);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed fetching current NSXPCConnection, cannot construct client", v66, 2u);
    swift_slowDealloc(v66, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v28, v16);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v68 = v67;
  v69 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v69, v187);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v71;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000029;
  *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
  v72 = sub_1001B0FB8(inited);
  v73 = objc_allocWithZone((Class)NSError);
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  v75 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v72);
  v76 = objc_msgSend(v73, "initWithDomain:code:userInfo:", v74, 100, v75);

  ((void (**)(const void *, uint64_t, id))v178)[2](v178, 0xFFFFFFFFLL, v76);
  swift_release(v29);

}

void sub_1000966D0(uint64_t a1, void *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  Class v44;
  Class v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void *v60;
  os_unfair_lock_s *v61;
  id v62;
  char *v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  id v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t inited;
  uint64_t v82;
  unint64_t v83;
  id v84;
  NSString v85;
  Class v86;
  id v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  char *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  Class isa;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  id v109;
  _QWORD *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  NSObject *v119;
  id v120;
  id v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  _QWORD *v128;
  os_log_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  void *v135;
  uint64_t *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  char *v147;
  id v148;
  unsigned int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  os_log_t v160;
  uint64_t v161;
  NSObject *v162;
  void *v163;
  _QWORD *v164;
  char *v165;
  char *v166;
  char *v167;
  Class v168;
  Class v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[4];
  char v173[16];
  __int128 v174;
  __int128 v175;
  _UNKNOWN **v176;
  char v177[8];

  v165 = a4;
  v164 = (_QWORD *)a3;
  v163 = a2;
  v162 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v146 - v12;
  v169 = (Class)type metadata accessor for Errors(0);
  v168 = (Class)*((_QWORD *)v169 - 1);
  v14 = __chkstk_darwin(v169);
  v166 = (char *)&v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v167 = (char *)&v146 - v16;
  v17 = type metadata accessor for Logger(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v22 = __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  v24 = __chkstk_darwin((char *)&v146 - v23);
  v26 = (char *)&v146 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v146 - v28;
  v30 = __chkstk_darwin(v27);
  v36 = (char *)&v146 - v32;
  v37 = *(_QWORD *)&v33[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  v170 = a6;
  if (v37 || *(_QWORD *)&v33[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer])
  {
    v38 = v34;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 16))((char *)&v146 - v32, &v33[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v17);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v174 = v43;
      *(_DWORD *)v42 = 136315138;
      v171 = sub_1000906BC(0xD00000000000003FLL, 0x80000001001FD1B0, (uint64_t *)&v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v42 + 4, v42 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v17);
    v44 = v169;
    v45 = v168;
    v46 = v167;
    v47 = v166;
    *(_QWORD *)v167 = 0xD00000000000003FLL;
    *((_QWORD *)v46 + 1) = 0x80000001001FD1B0;
    (*((void (**)(char *, _QWORD, Class))v45 + 13))(v46, enum case for Errors.OperationInProgress(_:), v44);
    (*((void (**)(char *, char *, Class))v45 + 2))(v47, v46, v44);
    v48 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v49 = swift_allocError(v44, v48, 0, 0);
    (*((void (**)(uint64_t, char *, Class))v45 + 4))(v50, v47, v44);
    v51 = (void *)_convertErrorToNSError(_:)(v49);
    (*(void (**)(uint64_t, uint64_t, void *))(v170 + 16))(v170, 0xFFFFFFFFLL, v51);
LABEL_6:

    (*((void (**)(char *, Class))v45 + 1))(v46, v44);
    swift_errorRelease(v49);
    return;
  }
  v156 = v31;
  v157 = v30;
  v155 = v35;
  v153 = (uint64_t *)&v33[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  v154 = OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer;
  v160 = (os_log_t)v34;
  v158 = v33;
  v161 = v17;
  v52 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v31), "currentConnection");
  if (v52)
  {
    v53 = v52;
    v54 = objc_msgSend(v52, "remoteObjectProxy");
    _bridgeAnyObjectToAny(_:)(&v174);
    swift_unknownObjectRelease(v54);
    v55 = sub_10009061C(&qword_10026C300);
    if ((swift_dynamicCast(&v171, &v174, (char *)&type metadata for Any + 8, v55, 6) & 1) != 0)
    {
      v150 = v20;
      v152 = v171;
      v149 = objc_msgSend(v53, "processIdentifier");
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v56 = &unk_100275000;
      v57 = qword_100275638;
      v58 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v59 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain(v59);
      os_unfair_lock_lock(v59 + 4);
      swift_release(v59);
      v60 = *(void **)(v57 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      v61 = *(os_unfair_lock_s **)(v57 + v58);
      v62 = v60;
      swift_retain(v61);
      os_unfair_lock_unlock(v61 + 4);
      swift_release(v61);
      if (v60)
      {
        v63 = (char *)objc_retain(*(id *)(qword_100275638
                                        + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager));
        v159 = (_QWORD *)dispatch thunk of DockCoreAccessory.info.getter(v63);
        v151 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v64 = *(id *)&v63[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        v65 = &v63[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess(&v63[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v173, 0, 0);
        v66 = *(_QWORD *)v65;
        v67 = *(_QWORD *)(*(_QWORD *)v65 + 16);
        if (v67)
        {
          v147 = v63;
          v148 = v62;
          v68 = v66 + 32;
          v69 = v66;
          swift_bridgeObjectRetain(v66);
          while (1)
          {
            sub_10009AFF4(v68, (uint64_t)&v171);
            v70 = *(id *)(*sub_10009B038(&v171, v172[2]) + 24);
            DockCoreInfo.identifier.getter(v70);

            DockCoreInfo.identifier.getter(v71);
            LOBYTE(v70) = static UUID.== infix(_:_:)(v13, v11);
            v72 = *(void (**)(char *, uint64_t))(v8 + 8);
            v72(v11, v7);
            v72(v13, v7);
            if ((v70 & 1) != 0)
              break;
            sub_100090E88(&v171);
            v68 += 40;
            if (!--v67)
            {
              swift_bridgeObjectRelease(v69);
              v62 = v148;
              v56 = (_QWORD *)&unk_100275000;
              v63 = v147;
              goto LABEL_17;
            }
          }
          swift_bridgeObjectRelease(v69);
          v92 = v147;
          v93 = *(id *)&v147[v151];
          OS_dispatch_semaphore.signal()();

          sub_10009AFF4((uint64_t)&v171, (uint64_t)&v174);
          sub_100090E88(&v171);

          v62 = v148;
          v56 = &unk_100275000;
        }
        else
        {
LABEL_17:
          v73 = *(id *)&v63[v151];
          OS_dispatch_semaphore.signal()();

          v176 = 0;
          v174 = 0u;
          v175 = 0u;

        }
        if (*((_QWORD *)&v175 + 1))
        {
          v94 = sub_10009061C(&qword_10026C2E0);
          v95 = type metadata accessor for DaemonAccessory(0);
          if ((swift_dynamicCast(&v171, &v174, v94, v95, 6) & 1) != 0)
          {
            v96 = v171;
            v97 = *(_QWORD *)(v171 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8);
            if (v97
              && (v98 = *(char **)(v171 + 16)) != 0
              && (v99 = *(void **)&v98[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
            {
              v148 = v62;
              v100 = *(_QWORD *)(v171 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
              swift_bridgeObjectRetain(v97);
              v101 = v98;
              if (objc_msgSend(v99, "state") == (id)2)
              {
                v102 = v56;
                isa = v160[2].isa;
                v167 = &v158[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
                v168 = isa;
                v104 = ((uint64_t (*)(uint64_t))isa)(v156);
                v105 = Logger.logObject.getter(v104);
                v106 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v105, v106))
                {
                  v107 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v107 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v105, v106, "Device is connected, now initiating firmware update", v107, 2u);
                  swift_slowDealloc(v107, -1, -1);
                }

                v108 = v161;
                v169 = v160[1].isa;
                ((void (*)(uint64_t, uint64_t))v169)(v156, v161);
                v109 = objc_retain(*(id *)(*(_QWORD *)(v102[199]
                                                     + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                         + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
                v110 = sub_100126C4C((uint64_t)v162, v163, (uint64_t)v164, v165, v100, v97);
                v119 = v118;
                v164 = v110;
                swift_bridgeObjectRelease(v97);
                ((void (*)(uint64_t, char *, uint64_t))v168)(v155, v167, v108);
                v120 = v109;
                swift_retain_n(v96, 2);
                v121 = v120;
                v122 = Logger.logObject.getter(v121);
                v123 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v122, v123))
                {
                  v124 = swift_slowAlloc(22, -1);
                  v162 = v119;
                  v125 = v124;
                  v159 = (_QWORD *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v125 = 138412546;
                  v165 = v101;
                  v126 = *(void **)(v96 + 24);
                  v160 = v122;
                  *(_QWORD *)&v174 = v126;
                  v163 = v121;
                  v127 = v126;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, (char *)&v174 + 8, v125 + 4, v125 + 12);
                  v128 = v159;
                  *v159 = v126;
                  v101 = v165;
                  swift_release_n(v96, 2);
                  *(_WORD *)(v125 + 12) = 2048;
                  *(_QWORD *)&v174 = 0x404E000000000000;
                  v121 = v163;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, (char *)&v174 + 8, v125 + 14, v125 + 22);

                  v129 = v160;
                  _os_log_impl((void *)&_mh_execute_header, v160, v123, "Setting accessory reachable %@ after %f secs", (uint8_t *)v125, 0x16u);
                  v130 = sub_10009061C(&qword_10026BC40);
                  swift_arrayDestroy(v128, 1, v130);
                  swift_slowDealloc(v128, -1, -1);
                  v131 = v125;
                  v119 = v162;
                  swift_slowDealloc(v131, -1, -1);

                }
                else
                {

                  swift_release_n(v96, 2);
                }
                ((void (*)(uint64_t, uint64_t))v169)(v155, v161);
                sub_100126838(v96, 1, (uint64_t)v164, v119, 0.0);
                v132 = v101;
                swift_bridgeObjectRelease(v119);
                *((_QWORD *)&v175 + 1) = type metadata accessor for dockCertHandler(0);
                v176 = &off_100239170;
                v133 = v158;
                *(_QWORD *)&v174 = v158;
                v134 = v158;
                v163 = v121;
                sub_100126E44((uint64_t)&v174, v96);
                sub_100090E88(&v174);
                v135 = *(void **)(v96 + 24);
                v136 = v153;
                v137 = *v153;
                v138 = (void *)v153[1];
                v139 = v152;
                *v153 = v152;
                v136[1] = (uint64_t)v135;
                v140 = v149;
                *((_DWORD *)v136 + 4) = v149;
                swift_unknownObjectRetain(v139);
                v141 = v135;
                sub_100094F3C(v137, v138);
                v142 = swift_allocObject(&unk_100239378, 24, 7);
                swift_unknownObjectWeakInit(v142 + 16, v134);
                v143 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
                swift_retain(v142);
                v144 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, 0, sub_10009B600, v142, 1000.0);
                v145 = *(void **)&v133[v154];
                *(_QWORD *)&v133[v154] = v144;
                swift_release(v142);
                swift_release(v96);

                (*(void (**)(uint64_t, uint64_t, _QWORD))(v170 + 16))(v170, v140, 0);
                swift_unknownObjectRelease(v152);
                return;
              }

              swift_release(v96);
              swift_bridgeObjectRelease(v97);

            }
            else
            {

              swift_release(v96);
            }
          }
          else
          {

          }
        }
        else
        {

          sub_10009B2C0((uint64_t)&v174, (uint64_t *)&unk_10026DF40);
        }
      }
      v111 = ((uint64_t (*)(uint64_t, char *, uint64_t))v160[2].isa)(v157, &v158[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v161);
      v112 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v114 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "No accessory connected, try again", v114, 2u);
        swift_slowDealloc(v114, -1, -1);
      }

      ((void (*)(uint64_t, uint64_t))v160[1].isa)(v157, v161);
      v46 = v167;
      *(_QWORD *)v167 = 0xD000000000000016;
      *((_QWORD *)v46 + 1) = 0x80000001001FD120;
      v45 = v168;
      v44 = v169;
      (*((void (**)(char *, _QWORD, Class))v168 + 13))(v46, enum case for Errors.AccessoryNotReachable(_:), v169);
      v115 = v166;
      (*((void (**)(char *, char *, Class))v45 + 2))(v166, v46, v44);
      v116 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v49 = swift_allocError(v44, v116, 0, 0);
      (*((void (**)(uint64_t, char *, Class))v45 + 4))(v117, v115, v44);
      v51 = (void *)_convertErrorToNSError(_:)(v49);
      (*(void (**)(uint64_t, uint64_t, void *))(v170 + 16))(v170, 0xFFFFFFFFLL, v51);
      swift_unknownObjectRelease(v152);

      goto LABEL_6;
    }
    v88 = ((uint64_t (*)(char *, char *, uint64_t))v160[2].isa)(v26, &v158[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v161);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "nsxpc proxy is nil", v91, 2u);
      swift_slowDealloc(v91, -1, -1);
    }

    ((void (*)(char *, uint64_t))v160[1].isa)(v26, v161);
  }
  else
  {
    v74 = ((uint64_t (*)(char *, char *, uint64_t))v160[2].isa)(v29, &v158[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v161);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed fetching current NSXPCConnection, cannot construct client", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }

    ((void (*)(char *, uint64_t))v160[1].isa)(v29, v161);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v79 = v78;
    v80 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v80, v177);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v82;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000029;
    *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
    v83 = sub_1001B0FB8(inited);
    v84 = objc_allocWithZone((Class)NSError);
    v85 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v79);
    v86 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v83);
    v87 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v85, 100, v86);

    (*(void (**)(uint64_t, uint64_t, id))(a6 + 16))(a6, 0xFFFFFFFFLL, v87);
  }
}

void sub_100097AC0(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  char *v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  unint64_t v53;
  id v54;
  NSString v55;
  Class isa;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  char *v76;
  uint64_t (*v77)(char *, char *, uint64_t);
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  id v82;
  NSObject **v83;
  NSObject *v84;
  uint64_t v85;
  NSObject **v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  id v99;
  uint64_t v100;
  id v101;
  char *v102;
  unsigned int v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  _QWORD v114[5];
  char v115[24];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  char v119[48];

  v112 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v100 - v10;
  v12 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v12);
  v102 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v104 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v113 = (char *)&v100 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v100 - v20;
  v23 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v22), "currentConnection");
  if (v23)
  {
    v24 = v23;
    v110 = v15;
    v111 = v14;
    v107 = a3;
    v25 = objc_msgSend(v23, "processIdentifier");
    v26 = swift_allocObject(&unk_100239328, 44, 7);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = a2;
    v27 = v112;
    *(_QWORD *)(v26 + 32) = v112;
    v106 = v26;
    v103 = v25;
    *(_DWORD *)(v26 + 40) = v25;
    v28 = qword_10026BC00;
    v29 = v24;
    v105 = a2;
    v30 = v27;
    if (v28 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v31 = &unk_100275000;
    v32 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v108 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v33 = *(void **)&v32[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v109 = v32;
    v34 = v32;
    v35 = v33;
    OS_dispatch_semaphore.wait()();

    v112 = v34;
    v36 = &v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v115, 0, 0);
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
    if (v38)
    {
      v101 = v29;
      v39 = v37 + 32;
      swift_bridgeObjectRetain(v37);
      while (1)
      {
        sub_10009AFF4(v39, (uint64_t)v114);
        v40 = *(id *)(*sub_10009B038(v114, v114[3]) + 24);
        DockCoreInfo.identifier.getter(v40);

        DockCoreInfo.identifier.getter(v41);
        LOBYTE(v40) = static UUID.== infix(_:_:)(v11, v9);
        v42 = *(void (**)(char *, uint64_t))(v6 + 8);
        v42(v9, v5);
        v42(v11, v5);
        if ((v40 & 1) != 0)
          break;
        sub_100090E88(v114);
        v39 += 40;
        if (!--v38)
        {
          swift_bridgeObjectRelease(v37);
          v29 = v101;
          v31 = (_QWORD *)&unk_100275000;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease(v37);
      v58 = *(id *)&v109[v108];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v114, (uint64_t)&v116);
      sub_100090E88(v114);

      v29 = v101;
      v31 = &unk_100275000;
    }
    else
    {
LABEL_9:
      v43 = *(id *)&v109[v108];
      OS_dispatch_semaphore.signal()();

      v118 = 0;
      v116 = 0u;
      v117 = 0u;

    }
    v59 = v110;
    if (*((_QWORD *)&v117 + 1))
    {
      v60 = sub_10009061C(&qword_10026C2E0);
      v61 = type metadata accessor for DaemonAccessory(0);
      if ((swift_dynamicCast(v114, &v116, v60, v61, 6) & 1) != 0)
      {
        v62 = v114[0];
        if (*(_BYTE *)(v114[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (v63 = *(char **)(v114[0] + 16)) != 0
          && (v64 = *(void **)&v63[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
        {
          v65 = v63;
          if (objc_msgSend(v64, "state") == (id)2)
          {
            v66 = type metadata accessor for TaskPriority(0);
            v67 = (uint64_t)v102;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v102, 1, 1, v66);
            v68 = (_QWORD *)swift_allocObject(&unk_100239350, 56, 7);
            v68[2] = 0;
            v68[3] = 0;
            v69 = v106;
            v68[4] = &unk_10026C360;
            v68[5] = v69;
            v68[6] = v65;
            v70 = v65;
            swift_retain(v69);
            v71 = sub_10018A990(v67, (uint64_t)&unk_10026C370, (uint64_t)v68);
            swift_release(v62);

            v72 = v107;
            v73 = v103;
            goto LABEL_31;
          }
          swift_release(v62);

        }
        else
        {
          swift_release(v114[0]);
        }
      }
    }
    else
    {
      sub_10009B2C0((uint64_t)&v116, (uint64_t *)&unk_10026DF40);
    }
    sub_10015DAB8(v30);
    v75 = v74;

    v76 = &v105[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
    v77 = *(uint64_t (**)(char *, char *, uint64_t))(v59 + 16);
    if (!v75)
    {
      v87 = v104;
      v88 = v111;
      v89 = v77(v104, v76, v111);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "accessory does not exist and/or is not paired ", v92, 2u);
        swift_slowDealloc(v92, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v59 + 8))(v87, v88);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v107 + 16))(v107, 0xFFFFFFFFLL, 0, 0);

      v93 = v106;
      goto LABEL_32;
    }
    v77(v113, v76, v111);
    v78 = v30;
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(12, -1);
      v82 = v29;
      v83 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v81 = 138412290;
      *(_QWORD *)&v116 = v78;
      v84 = v78;
      v59 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 8, v81 + 4, v81 + 12);
      *v83 = v78;

      _os_log_impl((void *)&_mh_execute_header, v79, v80, "%@ not connected, connecting and deferring callback for later", v81, 0xCu);
      v85 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v83, 1, v85);
      v86 = v83;
      v29 = v82;
      v31 = (_QWORD *)&unk_100275000;
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v81, -1, -1);
    }
    else
    {

      v79 = v78;
    }
    v72 = v107;
    v69 = v106;
    v73 = v103;

    (*(void (**)(char *, uint64_t))(v59 + 8))(v113, v111);
    v94 = *(void **)(v31[199] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v95 = sub_10009061C(&qword_10026C340);
    v96 = swift_allocObject(v95, 40, 7);
    *(_OWORD *)(v96 + 16) = xmmword_1001DE6A0;
    *(_QWORD *)(v96 + 32) = v78;
    *(_QWORD *)&v116 = v96;
    specialized Array._endMutation()(v96);
    v97 = v116;
    v98 = v78;
    swift_retain(v69);
    v99 = v94;
    sub_1000C304C(v97, (uint64_t)&unk_10026C360, v69);

    swift_bridgeObjectRelease(v97);
    v71 = v69;
LABEL_31:
    swift_release(v71);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v72 + 16))(v72, v73, 1, 0);

    v93 = v69;
LABEL_32:
    swift_release(v93);
    return;
  }
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, (uint64_t)a2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v14);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed fetching current NSXPCConnection, cannot construct client", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v49 = v48;
  v50 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v50, v119);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v52;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000029;
  *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
  v53 = sub_1001B0FB8(inited);
  v54 = objc_allocWithZone((Class)NSError);
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53);
  v57 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v55, 100, isa);

  (*(void (**)(uint64_t, uint64_t, _QWORD, id))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, v57);
}

void sub_1000984F4(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  char *v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  unint64_t v53;
  id v54;
  NSString v55;
  Class isa;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  char *v76;
  uint64_t (*v77)(char *, char *, uint64_t);
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  id v82;
  NSObject **v83;
  NSObject *v84;
  uint64_t v85;
  NSObject **v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  id v99;
  uint64_t v100;
  id v101;
  char *v102;
  unsigned int v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  _QWORD v114[5];
  char v115[24];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  char v119[48];

  v112 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v100 - v10;
  v12 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v12);
  v102 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v104 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v113 = (char *)&v100 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v100 - v20;
  v23 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v22), "currentConnection");
  if (v23)
  {
    v24 = v23;
    v110 = v15;
    v111 = v14;
    v107 = a3;
    v25 = objc_msgSend(v23, "processIdentifier");
    v26 = swift_allocObject(&unk_1002392D8, 44, 7);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = a2;
    v27 = v112;
    *(_QWORD *)(v26 + 32) = v112;
    v106 = v26;
    v103 = v25;
    *(_DWORD *)(v26 + 40) = v25;
    v28 = qword_10026BC00;
    v29 = v24;
    v105 = a2;
    v30 = v27;
    if (v28 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v31 = &unk_100275000;
    v32 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v108 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v33 = *(void **)&v32[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v109 = v32;
    v34 = v32;
    v35 = v33;
    OS_dispatch_semaphore.wait()();

    v112 = v34;
    v36 = &v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v115, 0, 0);
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
    if (v38)
    {
      v101 = v29;
      v39 = v37 + 32;
      swift_bridgeObjectRetain(v37);
      while (1)
      {
        sub_10009AFF4(v39, (uint64_t)v114);
        v40 = *(id *)(*sub_10009B038(v114, v114[3]) + 24);
        DockCoreInfo.identifier.getter(v40);

        DockCoreInfo.identifier.getter(v41);
        LOBYTE(v40) = static UUID.== infix(_:_:)(v11, v9);
        v42 = *(void (**)(char *, uint64_t))(v6 + 8);
        v42(v9, v5);
        v42(v11, v5);
        if ((v40 & 1) != 0)
          break;
        sub_100090E88(v114);
        v39 += 40;
        if (!--v38)
        {
          swift_bridgeObjectRelease(v37);
          v29 = v101;
          v31 = (_QWORD *)&unk_100275000;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease(v37);
      v58 = *(id *)&v109[v108];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v114, (uint64_t)&v116);
      sub_100090E88(v114);

      v29 = v101;
      v31 = &unk_100275000;
    }
    else
    {
LABEL_9:
      v43 = *(id *)&v109[v108];
      OS_dispatch_semaphore.signal()();

      v118 = 0;
      v116 = 0u;
      v117 = 0u;

    }
    v59 = v110;
    if (*((_QWORD *)&v117 + 1))
    {
      v60 = sub_10009061C(&qword_10026C2E0);
      v61 = type metadata accessor for DaemonAccessory(0);
      if ((swift_dynamicCast(v114, &v116, v60, v61, 6) & 1) != 0)
      {
        v62 = v114[0];
        if (*(_BYTE *)(v114[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (v63 = *(char **)(v114[0] + 16)) != 0
          && (v64 = *(void **)&v63[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
        {
          v65 = v63;
          if (objc_msgSend(v64, "state") == (id)2)
          {
            v66 = type metadata accessor for TaskPriority(0);
            v67 = (uint64_t)v102;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v102, 1, 1, v66);
            v68 = (_QWORD *)swift_allocObject(&unk_100239300, 56, 7);
            v68[2] = 0;
            v68[3] = 0;
            v69 = v106;
            v68[4] = &unk_10026C338;
            v68[5] = v69;
            v68[6] = v65;
            v70 = v65;
            swift_retain(v69);
            v71 = sub_10018A990(v67, (uint64_t)&unk_10026C350, (uint64_t)v68);
            swift_release(v62);

            v72 = v107;
            v73 = v103;
            goto LABEL_31;
          }
          swift_release(v62);

        }
        else
        {
          swift_release(v114[0]);
        }
      }
    }
    else
    {
      sub_10009B2C0((uint64_t)&v116, (uint64_t *)&unk_10026DF40);
    }
    sub_10015DAB8(v30);
    v75 = v74;

    v76 = &v105[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
    v77 = *(uint64_t (**)(char *, char *, uint64_t))(v59 + 16);
    if (!v75)
    {
      v87 = v104;
      v88 = v111;
      v89 = v77(v104, v76, v111);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "accessory does not exist and/or is not paired ", v92, 2u);
        swift_slowDealloc(v92, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v59 + 8))(v87, v88);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v107 + 16))(v107, 0xFFFFFFFFLL, 0, 0);

      v93 = v106;
      goto LABEL_32;
    }
    v77(v113, v76, v111);
    v78 = v30;
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(12, -1);
      v82 = v29;
      v83 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v81 = 138412290;
      *(_QWORD *)&v116 = v78;
      v84 = v78;
      v59 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 8, v81 + 4, v81 + 12);
      *v83 = v78;

      _os_log_impl((void *)&_mh_execute_header, v79, v80, "%@ not connected, connecting and deferring callback for later", v81, 0xCu);
      v85 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v83, 1, v85);
      v86 = v83;
      v29 = v82;
      v31 = (_QWORD *)&unk_100275000;
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v81, -1, -1);
    }
    else
    {

      v79 = v78;
    }
    v72 = v107;
    v69 = v106;
    v73 = v103;

    (*(void (**)(char *, uint64_t))(v59 + 8))(v113, v111);
    v94 = *(void **)(v31[199] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v95 = sub_10009061C(&qword_10026C340);
    v96 = swift_allocObject(v95, 40, 7);
    *(_OWORD *)(v96 + 16) = xmmword_1001DE6A0;
    *(_QWORD *)(v96 + 32) = v78;
    *(_QWORD *)&v116 = v96;
    specialized Array._endMutation()(v96);
    v97 = v116;
    v98 = v78;
    swift_retain(v69);
    v99 = v94;
    sub_1000C304C(v97, (uint64_t)&unk_10026C338, v69);

    swift_bridgeObjectRelease(v97);
    v71 = v69;
LABEL_31:
    swift_release(v71);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v72 + 16))(v72, v73, 1, 0);

    v93 = v69;
LABEL_32:
    swift_release(v93);
    return;
  }
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, (uint64_t)a2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v14);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed fetching current NSXPCConnection, cannot construct client", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v49 = v48;
  v50 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v50, v119);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v52;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000029;
  *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
  v53 = sub_1001B0FB8(inited);
  v54 = objc_allocWithZone((Class)NSError);
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53);
  v57 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v55, 100, isa);

  (*(void (**)(uint64_t, uint64_t, _QWORD, id))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, v57);
}

void sub_100098F28(void *a1, void *a2, void (**a3)(const void *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  void *v36;
  os_unfair_lock_s *v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  id v57;
  uint64_t v58;
  void (*v59)(_BYTE *, NSObject *);
  NSObject *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  unint64_t v72;
  id v73;
  NSString v74;
  Class v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  BOOL v82;
  uint64_t v83;
  NSObject *v84;
  uint8_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  _QWORD *v109;
  NSObject *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  id v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  _BYTE v161[4];
  unsigned int v162;
  _BYTE *v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  uint64_t v171;
  void *v172;
  _BYTE *v173;
  _QWORD *v174;
  uint64_t v175;
  void (**v176)(const void *, uint64_t, uint64_t, _QWORD);
  void *v177;
  Class isa;
  NSObject *v179;
  _QWORD v180[5];
  char v181[24];
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  char v185[12];

  v177 = a2;
  v172 = a1;
  v179 = type metadata accessor for UUID(0);
  isa = v179[-1].isa;
  v4 = __chkstk_darwin(v179);
  v6 = &v161[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v161[-v7];
  v9 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v9);
  v163 = &v161[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Errors(0);
  v175 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v173 = &v161[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v174 = &v161[-v14];
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v166 = &v161[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v165 = &v161[-v20];
  v21 = __chkstk_darwin(v19);
  v167 = &v161[-v22];
  v23 = __chkstk_darwin(v21);
  v25 = &v161[-v24];
  __chkstk_darwin(v23);
  v27 = &v161[-v26];
  v28 = swift_allocObject(&unk_100239288, 24, 7);
  *(_QWORD *)(v28 + 16) = a3;
  v30 = (void *)objc_opt_self(NSXPCConnection, v29);
  v176 = a3;
  _Block_copy(a3);
  v31 = objc_msgSend(v30, "currentConnection");
  if (v31)
  {
    v168 = v16;
    v169 = v15;
    v164 = v11;
    v171 = v28;
    v170 = v31;
    v32 = -[NSObject processIdentifier](v31, "processIdentifier");
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v33 = qword_100275638;
    v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v35 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v35);
    os_unfair_lock_lock(v35 + 4);
    swift_release(v35);
    v36 = *(void **)(v33 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v37 = *(os_unfair_lock_s **)(v33 + v34);
    v38 = v36;
    swift_retain(v37);
    os_unfair_lock_unlock(v37 + 4);
    v39 = swift_release(v37);
    if (v36)
    {
      v162 = v32;
      v40 = dispatch thunk of DockCoreAccessory.info.getter(v39);

      v41 = v171;
      v42 = v170;
      v43 = v172;
      if (!v172)
        goto LABEL_8;
      type metadata accessor for DockCoreInfo(0);
      v44 = v43;
      if ((static NSObject.== infix(_:_:)(v40, v44) & 1) != 0)
      {

LABEL_8:
        v45 = -[NSObject remoteObjectProxy](v42, "remoteObjectProxy");
        _bridgeAnyObjectToAny(_:)(&v182);
        swift_unknownObjectRelease(v45);
        v46 = sub_10009061C(&qword_10026C300);
        if (swift_dynamicCast(v180, &v182, (char *)&type metadata for Any + 8, v46, 6))
        {
          v172 = (void *)v180[0];
          v47 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
          v48 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
          v49 = *(void **)((char *)v47 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
          v50 = v47;
          v51 = v49;
          OS_dispatch_semaphore.wait()();

          v52 = &v50[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
          swift_beginAccess(&v50[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v181, 0, 0);
          v53 = *(_QWORD *)v52;
          v54 = *(_QWORD *)(*(_QWORD *)v52 + 16);
          if (v54)
          {
            v165 = (_BYTE *)v48;
            v167 = v50;
            v55 = v53 + 32;
            swift_bridgeObjectRetain(v53);
            v56 = v179;
            while (1)
            {
              sub_10009AFF4(v55, (uint64_t)v180);
              v57 = *(id *)(*sub_10009B038(v180, v180[3]) + 24);
              DockCoreInfo.identifier.getter(v57);

              DockCoreInfo.identifier.getter(v58);
              LOBYTE(v57) = static UUID.== infix(_:_:)(v8, v6);
              v59 = (void (*)(_BYTE *, NSObject *))*((_QWORD *)isa + 1);
              v59(v6, v56);
              v59(v8, v56);
              if ((v57 & 1) != 0)
                break;
              sub_100090E88(v180);
              v55 += 40;
              if (!--v54)
              {
                swift_bridgeObjectRelease(v53);
                v50 = v167;
                v48 = (uint64_t)v165;
                goto LABEL_14;
              }
            }
            v60 = v40;
            swift_bridgeObjectRelease(v53);
            v128 = *(id *)&v165[(_QWORD)v47];
            OS_dispatch_semaphore.signal()();

            sub_10009AFF4((uint64_t)v180, (uint64_t)&v182);
            sub_100090E88(v180);

          }
          else
          {
LABEL_14:
            v60 = v40;
            v61 = *(id *)((char *)v47 + v48);
            OS_dispatch_semaphore.signal()();

            v184 = 0;
            v182 = 0u;
            v183 = 0u;

          }
          v129 = v171;
          v130 = v170;
          v131 = v169;
          v132 = v168;
          v133 = v166;
          if (*((_QWORD *)&v183 + 1))
          {
            v134 = sub_10009061C(&qword_10026C2E0);
            v135 = type metadata accessor for DaemonAccessory(0);
            if ((swift_dynamicCast(v180, &v182, v134, v135, 6) & 1) != 0)
            {
              v136 = v180[0];
              if (*(_BYTE *)(v180[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
                && (v137 = *(char **)(v180[0] + 16)) != 0
                && (v138 = *(void **)&v137[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
              {
                v139 = v137;
                if (objc_msgSend(v138, "state") == (id)2)
                {
                  v140 = type metadata accessor for TaskPriority(0);
                  v141 = (uint64_t)v163;
                  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v163, 1, 1, v140);
                  v142 = swift_allocObject(&unk_1002392B0, 88, 7);
                  *(_QWORD *)(v142 + 16) = 0;
                  *(_QWORD *)(v142 + 24) = 0;
                  v143 = v177;
                  *(_QWORD *)(v142 + 32) = v136;
                  *(_QWORD *)(v142 + 40) = v143;
                  *(_QWORD *)(v142 + 48) = sub_10009B164;
                  *(_QWORD *)(v142 + 56) = v129;
                  v144 = v172;
                  *(_QWORD *)(v142 + 64) = v172;
                  v145 = v162;
                  *(_DWORD *)(v142 + 72) = v162;
                  *(_QWORD *)(v142 + 80) = v60;
                  swift_retain(v136);
                  v146 = v143;
                  swift_retain(v129);
                  swift_unknownObjectRetain(v144);
                  v147 = v60;
                  v148 = sub_10018A990(v141, (uint64_t)&unk_10026C310, v142);
                  swift_release(v136);

                  swift_release(v148);
                  v176[2](v176, v145, 1, 0);
                  swift_release(v129);

                  swift_unknownObjectRelease(v144);
                  return;
                }
                swift_release(v136);

              }
              else
              {
                swift_release(v180[0]);
              }
            }
          }
          else
          {
            sub_10009B2C0((uint64_t)&v182, (uint64_t *)&unk_10026DF40);
          }
          v149 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v132 + 16))(v133, (uint64_t)v177 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v131);
          v150 = Logger.logObject.getter(v149);
          v151 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v150, v151))
          {
            v152 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v152 = 0;
            _os_log_impl((void *)&_mh_execute_header, v150, v151, "accessory does not exist and/or is not paired", v152, 2u);
            swift_slowDealloc(v152, -1, -1);
          }

          (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v133, v131);
          v153 = v174;
          *v174 = 0xD00000000000002DLL;
          v153[1] = 0x80000001001FD140;
          v154 = v175;
          v155 = v164;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v175 + 104))(v153, enum case for Errors.NotFound(_:), v164);
          v156 = v173;
          (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v154 + 16))(v173, v153, v155);
          v157 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
          v158 = swift_allocError(v155, v157, 0, 0);
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v154 + 32))(v159, v156, v155);
          v160 = (void *)_convertErrorToNSError(_:)(v158);
          ((void (**)(const void *, uint64_t, uint64_t, void *))v176)[2](v176, 0xFFFFFFFFLL, 0, v160);
          swift_unknownObjectRelease(v172);

          (*(void (**)(_QWORD *, uint64_t))(v154 + 8))(v153, v155);
          swift_errorRelease(v158);
          v94 = v129;
        }
        else
        {
          v95 = v168;
          v96 = v165;
          v97 = v169;
          v98 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v168 + 16))(v165, (uint64_t)v177 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v169);
          v99 = Logger.logObject.getter(v98);
          v100 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v99, v100))
          {
            v101 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v101 = 0;
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "nsxpc proxy is nil", v101, 2u);
            swift_slowDealloc(v101, -1, -1);
            v102 = v40;
          }
          else
          {
            v102 = v99;
            v99 = v42;
            v42 = v40;
          }

          (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v96, v97);
          v94 = v41;
        }
        goto LABEL_42;
      }
      v179 = v40;
      v103 = v168;
      v104 = v169;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v168 + 16))(v167, (uint64_t)v177 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v169);
      v105 = v44;
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(12, -1);
        v109 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v108 = 138412290;
        *(_QWORD *)&v182 = v105;
        v110 = v105;
        v103 = v168;
        v104 = v169;
        v41 = v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, (char *)&v182 + 8, v108 + 4, v108 + 12);
        *v109 = v172;

        _os_log_impl((void *)&_mh_execute_header, v106, v107, "%@ is not connected", v108, 0xCu);
        v111 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v109, 1, v111);
        v112 = v109;
        v42 = v170;
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v108, -1, -1);
      }
      else
      {

        v106 = v105;
      }
      v113 = v164;

      (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v167, v104);
      *(_QWORD *)&v182 = 0;
      *((_QWORD *)&v182 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      v114 = *((_QWORD *)&v182 + 1);
      v115 = -[NSObject description](v105, "description");
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;
      swift_bridgeObjectRelease(v114);

      *(_QWORD *)&v182 = v116;
      *((_QWORD *)&v182 + 1) = v118;
      v119._object = (void *)0x80000001001FD170;
      v119._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v119);
      v120 = *((_QWORD *)&v182 + 1);
      v121 = v174;
      *v174 = v182;
      v121[1] = v120;
      v122 = v175;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v175 + 104))(v121, enum case for Errors.AccessoryNotReachable(_:), v113);
      v123 = v173;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v122 + 16))(v173, v121, v113);
      v124 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v125 = swift_allocError(v113, v124, 0, 0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v122 + 32))(v126, v123, v113);
      v127 = (void *)_convertErrorToNSError(_:)(v125);
      ((void (**)(const void *, uint64_t, uint64_t, void *))v176)[2](v176, 0xFFFFFFFFLL, 0, v127);

      (*(void (**)(_QWORD *, uint64_t))(v122 + 8))(v121, v113);
      swift_errorRelease(v125);
      v94 = v41;
    }
    else
    {
      v77 = v168;
      v78 = v169;
      v79 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v168 + 16))(v25, (uint64_t)v177 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v169);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      v82 = os_log_type_enabled(v80, v81);
      v83 = v171;
      v84 = v170;
      if (v82)
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "No accessory connected. Cannot initiate accessory description transfer", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v25, v78);
      v86 = v174;
      *v174 = 0xD000000000000016;
      v86[1] = 0x80000001001FD120;
      v87 = v175;
      v88 = v164;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v175 + 104))(v86, enum case for Errors.AccessoryNotReachable(_:), v164);
      v89 = v173;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v87 + 16))(v173, v86, v88);
      v90 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v91 = swift_allocError(v88, v90, 0, 0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v87 + 32))(v92, v89, v88);
      v93 = (void *)_convertErrorToNSError(_:)(v91);
      ((void (**)(const void *, uint64_t, uint64_t, void *))v176)[2](v176, 0xFFFFFFFFLL, 0, v93);

      (*(void (**)(_QWORD *, uint64_t))(v87 + 8))(v86, v88);
      swift_errorRelease(v91);
      v94 = v83;
    }
LABEL_42:
    swift_release(v94);
    return;
  }
  v62 = v28;
  v63 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v27, (uint64_t)v177 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v15);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed fetching current NSXPCConnection, cannot construct client", v66, 2u);
    swift_slowDealloc(v66, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v27, v15);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v68 = v67;
  v69 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v69, v185);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v71;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000029;
  *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
  v72 = sub_1001B0FB8(inited);
  v73 = objc_allocWithZone((Class)NSError);
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  v75 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v72);
  v76 = objc_msgSend(v73, "initWithDomain:code:userInfo:", v74, 100, v75);

  ((void (**)(const void *, uint64_t, uint64_t, id))v176)[2](v176, 0xFFFFFFFFLL, 0, v76);
  swift_release(v62);

}

void sub_100099FFC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  unint64_t v36;
  id v37;
  NSString v38;
  Class isa;
  id v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  NSString v65;
  Class v66;
  id v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  _QWORD v79[5];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84[88];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v68 - v11;
  v13 = type metadata accessor for Logger(0);
  v76 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v75 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v15);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v32 = v31;
    v33 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v33, v84);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v35;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001001FD090;
    v36 = sub_1001B0FB8(inited);
    v37 = objc_allocWithZone((Class)NSError);
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    v40 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 72, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a3 + 16))(a3, 0, v40);
    return;
  }
  v68 = v17;
  v71 = a2;
  v74 = a3;
  v18 = qword_10026BC00;
  v77 = a1;
  if (v18 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v19 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v72 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v73 = v19;
  v20 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v21 = v19;
  v22 = v20;
  OS_dispatch_semaphore.wait()();

  v23 = &v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], &v80, 0, 0);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
  if (v25)
  {
    v69 = v21;
    v70 = v13;
    v26 = v24 + 32;
    swift_bridgeObjectRetain(v24);
    while (1)
    {
      sub_10009AFF4(v26, (uint64_t)v79);
      v27 = *(id *)(*sub_10009B038(v79, v79[3]) + 24);
      DockCoreInfo.identifier.getter(v27);

      DockCoreInfo.identifier.getter(v28);
      LOBYTE(v27) = static UUID.== infix(_:_:)(v12, v10);
      v29 = *(void (**)(char *, uint64_t))(v7 + 8);
      v29(v10, v6);
      v29(v12, v6);
      if ((v27 & 1) != 0)
        break;
      sub_100090E88(v79);
      v26 += 40;
      if (!--v25)
      {
        swift_bridgeObjectRelease(v24);
        v21 = v69;
        v13 = v70;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v24);
    v41 = *(id *)&v73[v72];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v79, (uint64_t)&v81);
    sub_100090E88(v79);

    v13 = v70;
  }
  else
  {
LABEL_9:
    v30 = *(id *)&v73[v72];
    OS_dispatch_semaphore.signal()();

    v83 = 0;
    v81 = 0u;
    v82 = 0u;

  }
  v42 = v74;
  v43 = v75;
  v44 = v76;
  if (*((_QWORD *)&v82 + 1))
  {
    v45 = sub_10009061C(&qword_10026C2E0);
    v46 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v79, &v81, v45, v46, 6) & 1) != 0)
    {
      v47 = v79[0];
      if (*(_BYTE *)(v79[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
      {
        v48 = type metadata accessor for TaskPriority(0);
        v49 = (uint64_t)v68;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v68, 1, 1, v48);
        v50 = (_QWORD *)swift_allocObject(&unk_100239260, 40, 7);
        v50[2] = 0;
        v50[3] = 0;
        v50[4] = v47;
        swift_retain(v47);
        v51 = sub_10018A9B0(v49, (uint64_t)&unk_10026C2F0, (uint64_t)v50);
        swift_release(v51);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v42 + 16))(v42, 1, 0);

        swift_release(v47);
        return;
      }
      swift_release(v79[0]);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v81, (uint64_t *)&unk_10026DF40);
  }
  v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v71 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v13);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = v13;
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Accessory record not found", v56, 2u);
    v57 = v56;
    v13 = v55;
    swift_slowDealloc(v57, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v13);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v59 = v58;
  v60 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  v61 = swift_initStackObject(v60, &v78);
  *(_OWORD *)(v61 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v61 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(v61 + 40) = v62;
  *(_QWORD *)(v61 + 72) = &type metadata for String;
  *(_QWORD *)(v61 + 48) = 0xD00000000000001ALL;
  *(_QWORD *)(v61 + 56) = 0x80000001001FD0B0;
  v63 = sub_1001B0FB8(v61);
  v64 = objc_allocWithZone((Class)NSError);
  v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v59);
  v66 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  v67 = objc_msgSend(v64, "initWithDomain:code:userInfo:", v65, 19, v66);

  (*(void (**)(uint64_t, _QWORD, id))(v42 + 16))(v42, 0, v67);
}

uint64_t sub_10009A6C4(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  NSString v10;
  id v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  NSString v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  _QWORD *v69;
  _QWORD v70[2];
  uint64_t aBlock;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  uint64_t (*v75)();
  uint64_t v76;
  __int128 v77;
  __int128 v78;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v60 - v7;
  v9 = objc_msgSend(a1, "processIdentifier");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(a1, "valueForEntitlement:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v77);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  sub_10009AEEC((uint64_t)&v77, (uint64_t)&aBlock);
  v12 = v8;
  if (v74)
  {
    v13 = swift_dynamicCast(v70, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v14 = v70[0];
    if (!v13)
      v14 = 0;
    v66 = v14;
    if (v13)
      v15 = v70[1];
    else
      v15 = 0;
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
    v66 = 0;
    v15 = 0;
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v65 = sub_10016D5D0(a1);
  v17 = v16;
  if (qword_10026BB38 != -1)
    swift_once(&qword_10026BB38, sub_100091834);
  v18 = sub_10008EA50(v2, (uint64_t)qword_10026C240);
  v19 = (uint64_t (*)(char *, uint64_t, uint64_t))v3[2];
  v67 = v18;
  v68 = v19;
  ((void (*)(char *))v19)(v12);
  swift_bridgeObjectRetain(v17);
  v20 = swift_bridgeObjectRetain_n(v15, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v69 = v3;
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(28, -1);
    v62 = v12;
    v25 = v24;
    v26 = swift_slowAlloc(64, -1);
    v63 = v2;
    v61 = v26;
    *(_QWORD *)&v77 = v26;
    *(_DWORD *)v25 = 67109634;
    LODWORD(aBlock) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v25 + 4, v25 + 8);
    *(_WORD *)(v25 + 8) = 2080;
    aBlock = v66;
    v72 = v15;
    swift_bridgeObjectRetain(v15);
    v27 = v6;
    v28 = a1;
    v29 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v30 = String.init<A>(describing:)(&aBlock, v29);
    v64 = v9;
    v32 = v31;
    aBlock = sub_1000906BC(v30, v31, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v72, v25 + 10, v25 + 18);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v25 + 18) = 2080;
    aBlock = v65;
    v72 = v17;
    swift_bridgeObjectRetain(v17);
    v33 = v29;
    a1 = v28;
    v6 = v27;
    v34 = String.init<A>(describing:)(&aBlock, v33);
    v36 = v35;
    aBlock = sub_1000906BC(v34, v35, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v72, v25 + 20, v25 + 28);
    swift_bridgeObjectRelease_n(v17, 2);
    v37 = v36;
    v9 = v64;
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v25, 0x1Cu);
    v38 = v61;
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    v2 = v63;
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v39 = (void (*)(char *, uint64_t))v69[1];
    v39(v62, v2);
  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    v39 = (void (*)(char *, uint64_t))v69[1];
    v39(v12, v2);
  }
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(a1, "valueForEntitlement:", v40);

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)(&v77);
    swift_unknownObjectRelease(v41);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  sub_10009AEEC((uint64_t)&v77, (uint64_t)&aBlock);
  if (v74)
  {
    if ((swift_dynamicCast(v70, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v70[0] & 1) != 0)
    {
      v43 = (void *)objc_opt_self(NSXPCInterface, v42);
      v69 = objc_msgSend(v43, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore22DockDaemonCertProtocol_);
      v44 = swift_allocObject(&unk_100239198, 24, 7);
      swift_unknownObjectWeakInit(v44 + 16, a1);
      v45 = swift_allocObject(&unk_1002391C0, 48, 7);
      *(_DWORD *)(v45 + 16) = v9;
      v46 = v66;
      *(_QWORD *)(v45 + 24) = v66;
      *(_QWORD *)(v45 + 32) = v15;
      *(_QWORD *)(v45 + 40) = v44;
      v75 = sub_10009AF5C;
      v76 = v45;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_10012357C;
      v74 = &unk_1002391D8;
      v47 = _Block_copy(&aBlock);
      v48 = v76;
      swift_bridgeObjectRetain(v15);
      swift_retain(v44);
      swift_release(v48);
      objc_msgSend(a1, "setInvalidationHandler:", v47);
      _Block_release(v47);
      v49 = swift_allocObject(&unk_100239210, 48, 7);
      *(_DWORD *)(v49 + 16) = v9;
      *(_QWORD *)(v49 + 24) = v46;
      *(_QWORD *)(v49 + 32) = v15;
      *(_QWORD *)(v49 + 40) = v44;
      v75 = sub_10009AFCC;
      v76 = v49;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_10012357C;
      v74 = &unk_100239228;
      v50 = _Block_copy(&aBlock);
      v51 = v76;
      swift_retain(v44);
      swift_release(v51);
      objc_msgSend(a1, "setInterruptionHandler:", v50);
      _Block_release(v50);
      v52 = v69;
      objc_msgSend(a1, "setExportedInterface:", v69);
      v53 = objc_msgSend(v43, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore22DockClientCertProtocol_);
      objc_msgSend(a1, "setRemoteObjectInterface:", v53);
      v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for dockCertHandler(0)), "init");
      objc_msgSend(a1, "setExportedObject:", v54);
      objc_msgSend(a1, "resume");
      swift_release(v44);

      return 1;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
  }
  swift_bridgeObjectRelease(v15);
  v56 = v68(v6, v67, v2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v59 = 67109120;
    LODWORD(aBlock) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v59 + 4, v59 + 8);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "process %d is not entitled for certification. Add entitlements and try again", v59, 8u);
    swift_slowDealloc(v59, -1, -1);
  }

  v39(v6, v2);
  objc_msgSend(a1, "invalidate");
  return 0;
}

uint64_t sub_10009AEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026E5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009AF34()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009AF5C()
{
  uint64_t v0;

  return sub_100094970(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_10009AF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009AF94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009AFA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009AFCC()
{
  uint64_t v0;

  return sub_100094970(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_10009AFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_10009B038(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10009B05C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009B088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10026C2EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10009B0EC;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10009450C, 0, 0);
}

uint64_t sub_10009B0EC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10009B134(uint64_t a1)
{
  uint64_t v1;

  return sub_10017E988(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_10009B140()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009B164()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10009B180()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10009B1CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_10026C30C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10009B7AC;
  return sub_100093940(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10009B27C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10009B2C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10009061C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009B2FC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10009B340(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10009B35C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_DWORD *)(v2 + 40);
  v10 = (_QWORD *)swift_task_alloc(dword_10026C334);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10009B7AC;
  return sub_100092EB4(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_10009B3E0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v7;

  v2 = *(int **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc(dword_10026C34C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10009B7AC;
  v7 = (int *)((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc(v2[1]);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10009B7AC;
  return ((uint64_t (*)(uint64_t, _QWORD))v7)(v3, 0);
}

uint64_t sub_10009B470(uint64_t a1)
{
  uint64_t v1;

  return sub_10017F430(a1, v1);
}

uint64_t sub_10009B47C()
{
  id *v0;

  return swift_deallocObject(v0, 44, 7);
}

uint64_t sub_10009B4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_DWORD *)(v2 + 40);
  v10 = (_QWORD *)swift_task_alloc(dword_10026C35C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10009B7AC;
  return sub_1000924BC(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_10009B534()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009B568()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v7;

  v2 = *(int **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc(dword_10026C36C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10009B7AC;
  v7 = (int *)((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc(v2[1]);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10009B7AC;
  return ((uint64_t (*)(uint64_t, _QWORD))v7)(v3, 0);
}

uint64_t sub_10009B5F8(uint64_t a1)
{
  uint64_t v1;

  return sub_10017F6B4(a1, v1);
}

void sub_10009B600()
{
  uint64_t v0;

  sub_100092284(v0);
}

unint64_t sub_10009B608()
{
  unint64_t result;

  result = qword_10026C7C0;
  if (!qword_10026C7C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FirmwareUpdateErrors, &type metadata for FirmwareUpdateErrors);
    atomic_store(result, (unint64_t *)&qword_10026C7C0);
  }
  return result;
}

unint64_t sub_10009B64C(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026C380;
  if (!qword_10026C380)
  {
    v3 = objc_opt_self(NSNumber, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, &qword_10026C380);
  }
  return result;
}

uint64_t sub_10009B688()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10009B69C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10009B6F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v12 = v1[2];
  v4 = v1[4];
  v11 = v1[3];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = (_QWORD *)swift_task_alloc(dword_10026C38C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10009B7AC;
  return sub_100091A88(a1, v12, v11, v4, v5, v6, v7, v8);
}

void sub_10009B7C0(uint64_t a1, NSString a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSDictionary v38;
  NSString v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  NSString v44;
  char *v45;
  uint64_t v46;
  os_log_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = v7;
  v51 = a5;
  v50 = a4;
  v49 = a1;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 != 12 || !a7)
    return;
  v17 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID);
  v18 = *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID);
  v19 = *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID + 8);
  v20 = v18 == a6 && v19 == a7;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(a6, a7, v18, v19, 0) & 1) != 0)
    return;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger, v13);
  v21 = v51;
  swift_bridgeObjectRetain_n(v51, 2);
  swift_bridgeObjectRetain_n(a7, 3);
  v22 = swift_bridgeObjectRetain_n(a2, 2);
  v23 = Logger.logObject.getter(v22);
  v48 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v48))
  {

    swift_bridgeObjectRelease_n(a7, 2);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    goto LABEL_13;
  }
  v47 = v23;
  v24 = swift_slowAlloc(48, -1);
  v46 = swift_slowAlloc(128, -1);
  v53 = v46;
  *(_DWORD *)v24 = 136316162;
  if (!a2)
  {
    swift_bridgeObjectRelease_n(v51, 2);
    swift_bridgeObjectRelease(a7);
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain(a2);
  v52 = sub_1000906BC(v49, (unint64_t)a2, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v24 + 4, v24 + 12);
  v44 = a2;
  swift_bridgeObjectRelease_n(a2, 3);
  *(_WORD *)(v24 + 12) = 2080;
  v45 = (char *)(v24 + 14);
  LODWORD(v52) = 12;
  type metadata accessor for ACCEndpoint_TransportType_t(0);
  v26 = String.init<A>(describing:)(&v52, v25);
  v28 = v27;
  v52 = sub_1000906BC(v26, v27, &v53);
  v43 = &v53;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v45, v24 + 22);
  swift_bridgeObjectRelease(v28);
  *(_WORD *)(v24 + 22) = 1024;
  LODWORD(v52) = v50;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, (char *)&v52 + 4, v24 + 24, v24 + 28);
  *(_WORD *)(v24 + 28) = 2080;
  v29 = v51;
  if (!v51)
  {
LABEL_23:
    swift_bridgeObjectRelease(a7);
    __break(1u);
    return;
  }
  v42 = v24 + 30;
  v30 = swift_bridgeObjectRetain(v51);
  v45 = (char *)&type metadata for Any + 8;
  v40 = Dictionary.description.getter(v30);
  v41 = v31;
  v32 = v31;
  swift_bridgeObjectRelease(v29);
  v52 = sub_1000906BC(v40, v32, &v53);
  v33 = v43;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v43, v42, v24 + 38);
  swift_bridgeObjectRelease_n(v29, 2);
  swift_bridgeObjectRelease(v41);
  *(_WORD *)(v24 + 38) = 2080;
  swift_bridgeObjectRetain(a7);
  v52 = sub_1000906BC(a6, a7, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v33, v24 + 40, v24 + 48);
  swift_bridgeObjectRelease_n(a7, 3);
  v34 = v47;
  _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v48, "Inductive accessory attached: %s, transport %s, protocol %u, properties %s, connection %s", (uint8_t *)v24, 0x30u);
  v35 = v46;
  swift_arrayDestroy(v46, 4, v45);
  swift_slowDealloc(v35, -1, -1);
  swift_slowDealloc(v24, -1, -1);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  a2 = v44;
LABEL_13:
  v36 = v17[1];
  *v17 = a6;
  v17[1] = a7;
  swift_bridgeObjectRelease(v36);
  v37 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate);
  if (v37
    && (objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate), "respondsToSelector:", "accessoryEndpointAttached:transportType:protocol:properties:forConnection:") & 1) != 0)
  {
    swift_unknownObjectRetain(v37);
    if (a2)
      a2 = String._bridgeToObjectiveC()();
    if (v51)
      v38.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    else
      v38.super.isa = 0;
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v37, "accessoryEndpointAttached:transportType:protocol:properties:forConnection:", a2, 12, v50, v38.super.isa, v39);
    swift_unknownObjectRelease(v37);

  }
}

void sub_10009BD68(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  NSObject *v14;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  v11 = &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger];
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12((char *)&v39 - v9, &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger], v4);
  swift_bridgeObjectRetain_n(a2, 2);
  v13 = v2;
  v14 = Logger.logObject.getter(v13);
  v43 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v14, (os_log_type_t)v43);
  v16 = &unk_100275000;
  v46 = v11;
  v47 = v12;
  if (v15)
  {
    v41 = v5;
    v42 = v13;
    v44 = v8;
    v45 = v4;
    v17 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v50 = v40;
    *(_DWORD *)v17 = 136315394;
    if (!a2)
    {

      __break(1u);
      return;
    }
    swift_bridgeObjectRetain(a2);
    v18 = v48;
    v49 = sub_1000906BC(v48, a2, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v17 + 12) = 2080;
    v13 = v42;
    v19 = *(_QWORD *)&v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID];
    v20 = *(_QWORD *)&v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID + 8];
    swift_bridgeObjectRetain(v20);
    v21 = v19;
    v22 = v18;
    v49 = sub_1000906BC(v21, v20, &v50);
    v16 = (_QWORD *)&unk_100275000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v43, "acessory detached %s %s", (uint8_t *)v17, 0x16u);
    v23 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v24 = *(void (**)(char *, uint64_t))(v41 + 8);
    v4 = v45;
    v24(v10, v45);
    v8 = v44;
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v10, v4);
    v22 = v48;
    if (!a2)
      return;
  }
  v25 = &v13[v16[123]];
  v26 = *((_QWORD *)v25 + 1);
  if (*(_QWORD *)v25 == v22 && v26 == a2
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, a2, *(_QWORD *)v25, v26, 0) & 1) != 0)
  {
    v27 = v13;
    v47(v8, v46, v4);
    v28 = swift_bridgeObjectRetain_n(a2, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v44 = v8;
      v31 = swift_slowAlloc(12, -1);
      v45 = v4;
      v32 = (uint8_t *)v31;
      v33 = swift_slowAlloc(32, -1);
      v50 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(a2);
      v49 = sub_1000906BC(v48, a2, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "acessory detached %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v34 = v44;
      v35 = v45;
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      v34 = v8;
      v35 = v4;
    }
    v24(v34, v35);
    v36 = *(void **)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate];
    if (v36)
    {
      if ((objc_msgSend(*(id *)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate], "respondsToSelector:", "accessoryConnectionDetached:") & 1) != 0)
      {
        swift_unknownObjectRetain(v36);
        v37 = String._bridgeToObjectiveC()();
        objc_msgSend(v36, "accessoryConnectionDetached:", v37);
        swift_unknownObjectRelease(v36);

      }
    }
    v38 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0xE000000000000000;
    swift_bridgeObjectRelease(v38);
  }
}

id sub_10009C270()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_class *v19;
  objc_super v21;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect;
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect] != -1)
  {
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v21 - v7, &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger], v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "De-registering for MFI4 connection notifications", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    notify_cancel(*(_DWORD *)&v1[v9]);
    *(_DWORD *)&v1[v9] = -1;
  }
  v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect;
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect] != -1)
  {
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger], v2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "De-registering for MFI4 disconnection notifications", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    notify_cancel(*(_DWORD *)&v1[v14]);
    *(_DWORD *)&v1[v14] = -1;
  }
  v19 = (objc_class *)type metadata accessor for AccessoryHandler(0);
  v21.receiver = v1;
  v21.super_class = v19;
  return objc_msgSendSuper2(&v21, "dealloc");
}

uint64_t sub_10009C54C()
{
  return type metadata accessor for AccessoryHandler(0);
}

uint64_t type metadata accessor for AccessoryHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C3D8;
  if (!qword_10026C3D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryHandler);
  return result;
}

id sub_10009C590()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  objc_super v6;

  v1 = &v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_passedMFI4Auth];
  *(_QWORD *)v1 = 0xD00000000000002FLL;
  *((_QWORD *)v1 + 1) = 0x80000001001FD5B0;
  v2 = &v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_MFI4AccessoryDisconnected];
  *(_QWORD *)v2 = 0xD00000000000003ALL;
  *((_QWORD *)v2 + 1) = 0x80000001001FD5E0;
  v3 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 6513505, 0xE300000000000000);
  *(_DWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect] = -1;
  *(_DWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect] = -1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate] = 0;
  v4 = &v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0xE000000000000000;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AccessoryHandler(0);
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t sub_10009C6C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1001DE768;
  v4[1] = &unk_1001DE768;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = &unk_1001DE780;
    v4[6] = &unk_1001DE768;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for SetupPayload(uint64_t a1)
{
  sub_10009B2FC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return sub_10009B2FC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for SetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  sub_10009B27C(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  sub_10009B27C(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for SetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_10009B27C(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_10009B2FC(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_10009B27C(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  sub_10009B2FC(v10, v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for SetupPayload(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10009B2FC(v5, v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10009B2FC(v7, v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupPayload()
{
  return &type metadata for SetupPayload;
}

uint64_t sub_10009C9D8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026C3F0);
  sub_10008EA50(v0, (uint64_t)qword_10026C3F0);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x7075746573, 0xE500000000000000);
}

BOOL sub_10009CA48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10009CA60()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10009CAA4()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10009CACC()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *sub_10009CB0C@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_10009CB2C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_10009CB38(unint64_t a1)
{
  uint64_t result;
  char v3;

  result = DockCoreAccessoryType.init(rawValue:)(a1 & 0xF);
  if ((v3 & 1) != 0)
    return 0;
  if (a1 >= 0x8000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else if ((a1 & 0x7F80) != 0)
  {
    return 0;
  }
  return result;
}

void sub_10009CBE8(uint64_t a1, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 v20;
  Swift::String *v21;
  int countAndFlagsBits_low;
  unsigned __int8 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t countAndFlagsBits;
  uint64_t v32;
  Swift::Int v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  Swift::String_optional v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v53._countAndFlagsBits = a1;
  v53._object = a2;
  swift_bridgeObjectRetain(a2);
  v2 = String.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  object = v3;
  v5 = HIBYTE(v3) & 0xF;
  v6 = v2 & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_70;
  if ((object & 0x1000000000000000) != 0)
  {
LABEL_75:
    v9 = sub_10015328C();
    v11 = v52;
    goto LABEL_49;
  }
  if ((object & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, object);
    v9 = (uint64_t)sub_1001530A4(v8, v6, 36);
    v11 = v10 & 1;
    goto LABEL_49;
  }
  v53._countAndFlagsBits = v2;
  v53._object = (void *)(object & 0xFFFFFFFFFFFFFFLL);
  if (v2 == 43)
  {
    if (v5)
    {
      v17 = v5 - 1;
      if (v17)
      {
        v9 = 0;
        v18 = (unsigned __int8 *)&v53._countAndFlagsBits + 1;
        while (1)
        {
          v19 = *v18;
          v20 = v19 - 48;
          if ((v19 - 48) >= 0xA)
          {
            if ((v19 - 65) < 0x1A)
            {
              v20 = v19 - 55;
            }
            else
            {
              if ((v19 - 97) > 0x19)
                goto LABEL_48;
              v20 = v19 - 87;
            }
          }
          if (!is_mul_ok(v9, 0x24uLL))
            break;
          v16 = __CFADD__(36 * v9, v20);
          v9 = 36 * v9 + v20;
          if (v16)
            break;
          ++v18;
          if (!--v17)
          {
LABEL_47:
            v11 = 0;
            goto LABEL_49;
          }
        }
      }
      goto LABEL_48;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (v2 != 45)
  {
    if (v5)
    {
      v9 = 0;
      v21 = &v53;
      while (1)
      {
        countAndFlagsBits_low = LOBYTE(v21->_countAndFlagsBits);
        v23 = countAndFlagsBits_low - 48;
        if ((countAndFlagsBits_low - 48) >= 0xA)
        {
          if ((countAndFlagsBits_low - 65) < 0x1A)
          {
            v23 = countAndFlagsBits_low - 55;
          }
          else
          {
            if ((countAndFlagsBits_low - 97) > 0x19)
              goto LABEL_48;
            v23 = countAndFlagsBits_low - 87;
          }
        }
        if (!is_mul_ok(v9, 0x24uLL))
          break;
        v16 = __CFADD__(36 * v9, v23);
        v9 = 36 * v9 + v23;
        if (v16)
          break;
        v21 = (Swift::String *)((char *)v21 + 1);
        if (!--v5)
          goto LABEL_47;
      }
    }
    goto LABEL_48;
  }
  if (!v5)
  {
    __break(1u);
    goto LABEL_78;
  }
  v12 = v5 - 1;
  if (v12)
  {
    v9 = 0;
    v13 = (unsigned __int8 *)&v53._countAndFlagsBits + 1;
    while (1)
    {
      v14 = *v13;
      v15 = v14 - 48;
      if ((v14 - 48) >= 0xA)
      {
        if ((v14 - 65) < 0x1A)
        {
          v15 = v14 - 55;
        }
        else
        {
          if ((v14 - 97) > 0x19)
            break;
          v15 = v14 - 87;
        }
      }
      if (!is_mul_ok(v9, 0x24uLL))
        break;
      v16 = 36 * v9 >= (unint64_t)v15;
      v9 = 36 * v9 - v15;
      if (!v16)
        break;
      ++v13;
      if (!--v12)
        goto LABEL_47;
    }
  }
LABEL_48:
  v9 = 0;
  v11 = 1;
LABEL_49:
  swift_bridgeObjectRelease(object);
  if ((v11 & 1) != 0)
    return;
  v53._countAndFlagsBits = v9;
  v24 = sub_10009E400();
  v25 = String.init<A>(_:radix:uppercase:)(&v53, 16, 0, &type metadata for UInt64, v24);
  object = v26;
  v56 = 0;
  v57 = 0xE000000000000000;
  v27 = v26 & 0x2000000000000000;
  v28 = HIBYTE(v26) & 0xF;
  v29 = v25 & 0xFFFFFFFFFFFFLL;
  if ((v26 & 0x2000000000000000) != 0)
    v30 = HIBYTE(v26) & 0xF;
  else
    v30 = v25 & 0xFFFFFFFFFFFFLL;
  if (v30)
  {
    countAndFlagsBits = v25;
    if (((uint64_t (*)(void))String.count.getter)() > 11)
      goto LABEL_57;
    v32 = String.count.getter(countAndFlagsBits, object);
    v33 = 12 - v32;
    if (!__OFSUB__(12, v32))
    {
      v34._countAndFlagsBits = 48;
      v34._object = (void *)0xE100000000000000;
      v35 = String.init(repeating:count:)(v34, v33);
      v53 = v35;
      swift_bridgeObjectRetain(v35._object);
      v36._countAndFlagsBits = countAndFlagsBits;
      v36._object = (void *)object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v35._object);
      swift_bridgeObjectRelease(object);
      object = (unint64_t)v53._object;
      countAndFlagsBits = v53._countAndFlagsBits;
      v27 = (uint64_t)v53._object & 0x2000000000000000;
      v28 = ((unint64_t)v53._object >> 56) & 0xF;
      v29 = v53._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_57:
      v37 = 0;
      if (v27)
        v38 = v28;
      else
        v38 = v29;
      v53._countAndFlagsBits = countAndFlagsBits;
      v53._object = (void *)object;
      v54 = 0;
      v55 = v38;
      while (1)
      {
        v40 = String.Iterator.next()();
        if (!v40.value._object)
          break;
        object = (unint64_t)v40.value._object;
        if ((v37 & 1) == 0)
        {
          v41 = v56 & 0xFFFFFFFFFFFFLL;
          if ((v57 & 0x2000000000000000) != 0)
            v41 = HIBYTE(v57) & 0xF;
          if (v41)
          {
            v42._countAndFlagsBits = 58;
            v42._object = (void *)0xE100000000000000;
            String.append(_:)(v42);
          }
        }
        String.append(_:)(v40.value);
        swift_bridgeObjectRelease(v40.value._object);
        if (__OFADD__(v37++, 1))
        {
          __break(1u);
          goto LABEL_75;
        }
      }
      swift_bridgeObjectRelease(v53._object);
      v43 = v56;
      v44 = v57;
      swift_bridgeObjectRetain(v57);
      v45 = sub_10011D0DC(v43, v44);
      v47 = v45;
      v48 = v46;
      if (v46 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v44);
        return;
      }
      sub_10009B27C(v45, v46);
      v49 = sub_1000E7604(v47, v48);
      sub_10011D450(v49, v50);
      if (v51 >> 60 != 15)
      {
        sub_10009E3A0(v47, v48);
        swift_bridgeObjectRelease(v44);
        return;
      }
      goto LABEL_80;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    return;
  }
LABEL_70:
  swift_bridgeObjectRelease(object);
}

uint64_t sub_10009D040@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t object;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  id v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  uint64_t v78;
  id v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  uint64_t v91;
  id v92;
  uint8_t *v93;
  const char *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  char v207;
  char v208;
  _BYTE __dst[14];
  unsigned __int8 v210;
  uint64_t v211[5];
  __int128 v212;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)NSURLComponents);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v12 = objc_msgSend(v8, "initWithURL:resolvingAgainstBaseURL:", v10, 1);

  if (!v12)
  {
    if (qword_10026BB40 != -1)
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10008EA50(v26, (uint64_t)qword_10026C3F0);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29))
    {

LABEL_65:
      v133 = type metadata accessor for URL(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(a1, v133);
      goto LABEL_66;
    }
    v30 = 2;
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to parse setup URI: Invalid URI format", v31, 2u);
    swift_slowDealloc(v31, -1, -1);

LABEL_21:
    v37 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(a1, v37);
LABEL_22:
    v15 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0.0;
    goto LABEL_67;
  }
  v13 = objc_msgSend(v12, "scheme");
  if (!v13)
    goto LABEL_16;
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  v18 = objc_msgSend(v12, "host");
  if (!v18)
  {
    swift_bridgeObjectRelease(v17);
LABEL_16:
    if (qword_10026BB40 != -1)
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10008EA50(v32, (uint64_t)qword_10026C3F0);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_64;
    v30 = 2;
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to parse setup URI: Invalid URI format", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
LABEL_20:

    goto LABEL_21;
  }
  v19 = v18;
  v203 = v5;
  v205 = v12;
  v206 = a1;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  v23 = String.lowercased()();
  if (v23._countAndFlagsBits == 1801727352 && v23._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease(v17);
    object = 0xE400000000000000;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v23._countAndFlagsBits, v23._object, 1801727352, 0xE400000000000000, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v17);
    object = (unint64_t)v23._object;
  }
  else if (v23._countAndFlagsBits == 0x2D74696B6B636F64 && v23._object == (void *)0xED00007075746573)
  {
    swift_bridgeObjectRelease(v17);
    object = 0xED00007075746573;
  }
  else
  {
    v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v23._countAndFlagsBits, v23._object, 0x2D74696B6B636F64, 0xED00007075746573, 0);
    swift_bridgeObjectRelease(v23._object);
    if ((v96 & 1) == 0)
    {
      swift_bridgeObjectRelease(v22);
      v58 = v206;
      if (qword_10026BB40 == -1)
      {
LABEL_69:
        v134 = type metadata accessor for Logger(0);
        sub_10008EA50(v134, (uint64_t)qword_10026C3F0);
        v135 = swift_bridgeObjectRetain(v17);
        v136 = Logger.logObject.getter(v135);
        v137 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v136, v137))
        {
          v138 = (uint8_t *)swift_slowAlloc(12, -1);
          v139 = swift_slowAlloc(32, -1);
          v211[0] = v139;
          *(_DWORD *)v138 = 136315138;
          swift_bridgeObjectRetain(v17);
          *(_QWORD *)&v212 = sub_1000906BC(v15, v17, v211);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, (char *)&v212 + 8, v138 + 4, v138 + 12);
          swift_bridgeObjectRelease_n(v17, 3);
          _os_log_impl((void *)&_mh_execute_header, v136, v137, "Unable to parse setup URI: %s not a DockKit URI", v138, 0xCu);
          swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v139, -1, -1);
          swift_slowDealloc(v138, -1, -1);

          v140 = type metadata accessor for URL(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 8))(v58, v140);
          goto LABEL_66;
        }
        v30 = 2;
        swift_bridgeObjectRelease_n(v17, 2);

        v141 = type metadata accessor for URL(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 8))(v58, v141);
        goto LABEL_22;
      }
LABEL_111:
      swift_once(&qword_10026BB40, sub_10009C9D8);
      goto LABEL_69;
    }
    object = v17;
  }
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRetain(v22);
  v44 = sub_10013B038(2, v20, v22);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_bridgeObjectRelease(v22);
  v51 = static String._fromSubstring(_:)(v44, v46, v48, v50);
  v53 = v52;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRetain(v22);
  v54 = sub_10011872C(2uLL, v20, v22);
  v17 = v55;
  v204 = v56;
  v58 = v57;
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRetain(v53);
  v59 = sub_100148C40(v51, v53, 36);
  if ((v60 & 1) != 0)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v58);
    if (qword_10026BB40 != -1)
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v73 = type metadata accessor for Logger(0);
    sub_10008EA50(v73, (uint64_t)qword_10026C3F0);
    v74 = swift_bridgeObjectRetain(v53);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    v77 = os_log_type_enabled(v75, v76);
    v79 = v205;
    v78 = v206;
    if (v77)
    {
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = swift_slowAlloc(32, -1);
      v211[0] = v81;
      *(_DWORD *)v80 = 136315138;
      swift_bridgeObjectRetain(v53);
      *(_QWORD *)&v212 = sub_1000906BC(v51, v53, v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, (char *)&v212 + 8, v80 + 4, v80 + 12);
      swift_bridgeObjectRelease_n(v53, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to parse setup URI: Invalid setup header encoding %s", v80, 0xCu);
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);

      v82 = type metadata accessor for URL(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v206, v82);
      goto LABEL_66;
    }
    v30 = 2;
    swift_bridgeObjectRelease_n(v53, 2);

    v95 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v78, v95);
    goto LABEL_22;
  }
  v202 = v51;
  v61 = sub_10009CB38(v59);
  if (v62 == 2)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v58);
    if (qword_10026BB40 != -1)
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v63 = type metadata accessor for Logger(0);
    sub_10008EA50(v63, (uint64_t)qword_10026C3F0);
    v64 = swift_bridgeObjectRetain(v53);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    v67 = os_log_type_enabled(v65, v66);
    v69 = v205;
    v68 = v206;
    if (v67)
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v211[0] = v71;
      *(_DWORD *)v70 = 136315138;
      swift_bridgeObjectRetain(v53);
      *(_QWORD *)&v212 = sub_1000906BC(v202, v53, v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, (char *)&v212 + 8, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease_n(v53, 3);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unable to parse setup URI: Invalid setup header encoding %s", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v72 = type metadata accessor for URL(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v68, v72);
LABEL_66:
      v15 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0.0;
      v30 = 2;
      goto LABEL_67;
    }
    v30 = 2;
    swift_bridgeObjectRelease_n(v53, 2);

    v97 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v68, v97);
    goto LABEL_22;
  }
  v15 = v61;
  v199 = v62;
  swift_bridgeObjectRelease(v53);
  v83 = String.count.getter(v20, v22);
  swift_bridgeObjectRelease(v22);
  v84 = v83 - 2;
  if (__OFSUB__(v83, 2))
  {
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    swift_once(&qword_10026BB40, sub_10009C9D8);
LABEL_48:
    v98 = type metadata accessor for Logger(0);
    v99 = sub_10008EA50(v98, (uint64_t)qword_10026C3F0);
    v88 = Logger.logObject.getter(v99);
    v89 = static os_log_type_t.error.getter();
    v100 = os_log_type_enabled(v88, v89);
    v92 = v205;
    v91 = v206;
    if (v100)
    {
      v30 = 2;
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      v94 = "Unable to parse setup URI: Invalid setup payload length";
      goto LABEL_50;
    }
LABEL_51:

    v102 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 8))(v91, v102);
    goto LABEL_66;
  }
  v85 = v204;
  if (v84 < 1)
  {
    swift_bridgeObjectRelease(v58);
    if (qword_10026BB40 == -1)
      goto LABEL_48;
    goto LABEL_106;
  }
  if ((unint64_t)v84 < 0xA)
  {
    swift_bridgeObjectRelease(v58);
    if (qword_10026BB40 != -1)
LABEL_108:
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v86 = type metadata accessor for Logger(0);
    v87 = sub_10008EA50(v86, (uint64_t)qword_10026C3F0);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.error.getter();
    v90 = os_log_type_enabled(v88, v89);
    v92 = v205;
    v91 = v206;
    if (v90)
    {
      v30 = 2;
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      v94 = "Unable to parse setup URI: Invalid address encoding length";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v88, v89, v94, v93, 2u);
      swift_slowDealloc(v93, -1, -1);

      v101 = type metadata accessor for URL(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v91, v101);
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  swift_bridgeObjectRetain(v58);
  v103 = Substring.index(_:offsetBy:limitedBy:)(v54, 10, v17, v54, v17, v85, v58);
  if ((v104 & 1) != 0)
    v105 = v17;
  else
    v105 = v103;
  if (v105 >> 14 < v54 >> 14)
  {
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  v202 = Substring.subscript.getter(v54);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  swift_bridgeObjectRelease(v58);
  v112 = static String._fromSubstring(_:)(v202, v107, v109, v111);
  v114 = v113;
  v115 = v111;
  v116 = v204;
  swift_bridgeObjectRelease(v115);
  v117 = Substring.index(_:offsetBy:limitedBy:)(v54, 10, v17, v54, v17, v116, v58);
  if ((v118 & 1) != 0)
    v117 = v17;
  if (v17 >> 14 < v117 >> 14)
    goto LABEL_110;
  v119 = Substring.subscript.getter(v117);
  v121 = v120;
  v204 = v122;
  v124 = v123;
  swift_bridgeObjectRelease(v58);
  v202 = v112;
  sub_10009CBE8(v112, v114);
  v127 = (unint64_t)v114;
  if (v126 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v124);
    v12 = v205;
    a1 = v206;
    if (qword_10026BB40 != -1)
      swift_once(&qword_10026BB40, sub_10009C9D8);
    v128 = type metadata accessor for Logger(0);
    sub_10008EA50(v128, (uint64_t)qword_10026C3F0);
    v129 = swift_bridgeObjectRetain(v127);
    v34 = Logger.logObject.getter(v129);
    v130 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(12, -1);
      v132 = swift_slowAlloc(32, -1);
      v211[0] = v132;
      *(_DWORD *)v131 = 136315138;
      swift_bridgeObjectRetain(v127);
      *(_QWORD *)&v212 = sub_1000906BC(v202, v127, v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, (char *)&v212 + 8, v131 + 4, v131 + 12);
      swift_bridgeObjectRelease_n(v127, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v130, "Unable to parse setup URI: Invalid address encoding %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v132, -1, -1);
      swift_slowDealloc(v131, -1, -1);
LABEL_64:

      goto LABEL_65;
    }
    v30 = 2;
    swift_bridgeObjectRelease_n(v127, 2);
    goto LABEL_20;
  }
  v41 = v125;
  v42 = v126;
  swift_bridgeObjectRelease(v127);
  v212 = xmmword_1001DE7B0;
  if (v119 >> 14 != v121 >> 14)
  {
    v202 = v119 >> 14;
    v195 = v4;
    swift_bridgeObjectRetain(v124);
    v142 = v119;
    v143 = Substring.distance(from:to:)(v119, v121, v119, v121, v204, v124);
    swift_bridgeObjectRelease(v124);
    if (v143 < 13)
    {
LABEL_96:
      swift_bridgeObjectRelease(v124);
      v4 = v195;
      goto LABEL_97;
    }
    v198 = v121 >> 14;
    v196 = xmmword_1001DE7C0;
    v144 = v204;
    while (1)
    {
      swift_bridgeObjectRetain(v124);
      v145 = Substring.index(_:offsetBy:limitedBy:)(v142, 13, v121, v142, v121, v144, v124);
      v147 = (v146 & 1) != 0 ? v121 : v145;
      if (v202 > v147 >> 14)
        goto LABEL_105;
      v201 = v121;
      v202 = v142;
      v204 = v144;
      v148 = Substring.subscript.getter(v142);
      v149 = v124;
      v150 = v148;
      v152 = v151;
      v154 = v153;
      v156 = v155;
      v200 = v149;
      swift_bridgeObjectRelease(v149);
      v157 = static String._fromSubstring(_:)(v150, v152, v154, v156);
      v159 = v158;
      swift_bridgeObjectRelease(v156);
      v160 = sub_100148C40(v157, v159, 36);
      if ((v161 & 1) != 0)
      {
        v121 = v201;
        v142 = v202;
        v124 = v200;
      }
      else
      {
        v162 = v160;
        v163 = sub_10009061C(&qword_10026BF40);
        v164 = swift_allocObject(v163, 40, 7);
        *(_OWORD *)(v164 + 16) = v196;
        *(_QWORD *)(v164 + 32) = v162;
        v165 = sub_10009061C((uint64_t *)&unk_10026EA70);
        v211[3] = v165;
        v211[4] = sub_10009E3B4();
        v211[0] = v164;
        v166 = sub_10009B038(v211, v165);
        v167 = *v166;
        v168 = *(_QWORD *)(*v166 + 16);
        if (v168)
        {
          v169 = v167 + 32;
          if (v168 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            v210 = v168;
            memcpy(__dst, (const void *)(v167 + 32), v168);
            v173 = *(_QWORD *)__dst;
            v174 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v210 << 48);
            swift_bridgeObjectRetain(v164);
          }
          else
          {
            v170 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v170, *(unsigned int *)(v170 + 48), *(unsigned __int16 *)(v170 + 52));
            swift_bridgeObjectRetain(v164);
            v171 = __DataStorage.init(bytes:length:)(v169, v168);
            v172 = v171;
            if (v168 >= 0x7FFFFFFF)
            {
              v175 = type metadata accessor for Data.RangeReference(0);
              v173 = swift_allocObject(v175, 32, 7);
              *(_QWORD *)(v173 + 16) = 0;
              *(_QWORD *)(v173 + 24) = v168;
              v174 = v172 | 0x8000000000000000;
            }
            else
            {
              v173 = v168 << 32;
              v174 = v171 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain(v164);
          v173 = 0;
          v174 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease(v164);
        sub_100090E88(v211);
        v176 = v173;
        v197 = v174;
        Data.append(_:)(v173, v174);
        v177 = v201;
        v178 = v200;
        v179 = Substring.index(_:offsetBy:limitedBy:)(v202, 13, v201, v202, v201, v204, v200);
        if ((v180 & 1) != 0)
          v179 = v177;
        if (v198 < v179 >> 14)
        {
          __break(1u);
          goto LABEL_108;
        }
        v181 = Substring.subscript.getter(v179);
        v121 = v182;
        v204 = v183;
        v185 = v184;
        swift_bridgeObjectRelease(v178);
        sub_10009B2FC(v176, v197);
        v124 = v185;
        v142 = v181;
      }
      if (v142 >> 14 != v121 >> 14)
      {
        v202 = v142 >> 14;
        v198 = v121 >> 14;
        swift_bridgeObjectRetain(v124);
        v144 = v204;
        v186 = Substring.distance(from:to:)(v142, v121, v142, v121, v204, v124);
        swift_bridgeObjectRelease(v124);
        if (v186 > 12)
          continue;
      }
      goto LABEL_96;
    }
  }
  swift_bridgeObjectRelease(v124);
LABEL_97:
  v40 = *((_QWORD *)&v212 + 1);
  v39 = v212;
  LOBYTE(v211[0]) = v199 & 1;
  __dst[0] = BYTE1(v199) & 1;
  v208 = BYTE2(v199) & 1;
  v207 = HIBYTE(v199) & 1;
  sub_10009E38C(v41, v42);
  v187 = sub_10009B27C(v39, v40);
  v188 = static Date.now.getter(v187);
  v43 = Date.timeIntervalSince1970.getter(v188);

  sub_10009E3A0(v41, v42);
  v189 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 8))(v206, v189);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v7, v4);
  result = sub_10009B2FC(v212, *((unint64_t *)&v212 + 1));
  v190 = 256;
  if (!__dst[0])
    v190 = 0;
  v191 = v190 | LOBYTE(v211[0]);
  v192 = 0x10000;
  if (!v208)
    v192 = 0;
  v193 = 0x1000000;
  if (!v207)
    v193 = 0;
  v30 = v191 | v192 | v193;
LABEL_67:
  *a2 = v15;
  a2[1] = v39;
  a2[2] = v40;
  a2[3] = v30;
  a2[4] = v41;
  a2[5] = v42;
  *((double *)a2 + 6) = v43;
  return result;
}

uint64_t sub_10009E38C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10009B27C(result, a2);
  return result;
}

uint64_t sub_10009E3A0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10009B2FC(result, a2);
  return result;
}

unint64_t sub_10009E3B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026CFE0;
  if (!qword_10026CFE0)
  {
    v1 = sub_100090F6C((uint64_t *)&unk_10026EA70);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10026CFE0);
  }
  return result;
}

unint64_t sub_10009E400()
{
  unint64_t result;

  result = qword_10026C408;
  if (!qword_10026C408)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10026C408);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for SetupPayload.Version(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SetupPayload.Version(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupPayload.Version(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009E52C + 4 * byte_1001DE7D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009E560 + 4 * byte_1001DE7D0[v4]))();
}

uint64_t sub_10009E560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009E570);
  return result;
}

uint64_t sub_10009E57C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009E584);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009E588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E59C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10009E5A8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SetupPayload.Version()
{
  return &type metadata for SetupPayload.Version;
}

unint64_t sub_10009E5C8()
{
  unint64_t result;

  result = qword_10026C410;
  if (!qword_10026C410)
  {
    result = swift_getWitnessTable(&unk_1001DE86C, &type metadata for SetupPayload.Version);
    atomic_store(result, (unint64_t *)&qword_10026C410);
  }
  return result;
}

void sub_10009E60C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = objc_msgSend(v1, "primaryAccessory");
    if (v2)
    {
      v4 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
      if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
      {
LABEL_15:

        return;
      }
      v22 = v2;
      v5 = (void *)objc_opt_self(CBUUID, v3);
      v6 = sub_10009061C((uint64_t *)&unk_10026E5E0);
      v7 = swift_allocObject(v6, 72, 7);
      *(_OWORD *)(v7 + 16) = xmmword_1001DE690;
      *(_QWORD *)(v7 + 56) = &type metadata for UInt32;
      *(_QWORD *)(v7 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v7 + 32) = 297;
      String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v7);
      v9 = v8;
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v11 = objc_msgSend(v5, "UUIDWithString:", v10);

      v12 = objc_msgSend(v11, "UUIDString");
      if (!v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v14 = v13;
        v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v14);
      }
      v15 = objc_msgSend(v22, "servicesOfType:", v12);

      if (!v15
        || (v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8),
            v15,
            v17 = (unint64_t)sub_10009F32C(v16),
            swift_bridgeObjectRelease(v16),
            !v17))
      {
        objc_msgSend(*(id *)(v0 + v4), "deRegisterFromNotifications");
        v21 = *(id *)(v0 + v4);
        objc_msgSend(v21, "invalidate");

        v20 = 0;
        goto LABEL_14;
      }
      if ((v17 & 0xC000000000000001) != 0)
      {
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
        goto LABEL_11;
      }
      if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v18 = *(id *)(v17 + 32);
LABEL_11:
        v19 = v18;
        swift_bridgeObjectRelease(v17);
        v20 = objc_msgSend(objc_allocWithZone((Class)DataStreamController), "initWithAccessory:service:workQueue:", v22, v19, *(_QWORD *)(v0 + 40));

LABEL_14:
        v2 = *(id *)(v0 + v4);
        *(_QWORD *)(v0 + v4) = v20;
        goto LABEL_15;
      }
      __break(1u);
    }
  }
}

void sub_10009E888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint8_t *v14;
  id v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  id v27;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (v8)
  {
    v9 = v8;
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "addBulkSendListener:fileType:", a2, v25);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
    v10 = swift_retain_n(a1, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (id)swift_slowAlloc(32, -1);
      v27 = v25;
      *(_DWORD *)v13 = 136315138;
      v14 = v13 + 12;
      v23 = v13 + 4;
      v24 = v13;
      v15 = *(id *)(a1 + 24);
      v17 = DockCoreInfo.description.getter(v16);
      v19 = v18;

      v26 = sub_1000906BC(v17, v19, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23, v14);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v19);
      v20 = v24;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cancelling listener registration due to no active data stream %s", v24, 0xCu);
      v21 = v25;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

id sub_10009EAF4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint8_t *v14;
  uint8_t *v15;
  id v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (v8)
    return objc_msgSend(v8, "removeBulkSendListener:", a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
  v10 = swift_retain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v26 = v13;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v28 = v25;
    *(_DWORD *)v14 = 136315138;
    v15 = v14 + 12;
    v23 = v14 + 4;
    v24 = v14;
    v16 = *(id *)(a1 + 24);
    v18 = DockCoreInfo.description.getter(v17);
    v20 = v19;

    v27 = sub_1000906BC(v18, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23, v15);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    v21 = v24;
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v26, "Cancelling listener registration due to no active data stream %s", v24, 0xCu);
    v22 = v25;
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return objc_msgSend(a2, "accessoryDidCloseDataStream:", a1);
}

id sub_10009ED44@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (result)
    result = objc_msgSend(result, "setupRequiresCharactertisticReads");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10009ED8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  return swift_task_switch(sub_10009EDB0, 0, 0);
}

uint64_t sub_10009EDB0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v1 = *(void **)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  *(_QWORD *)(v0 + 80) = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v14 = *(_OWORD *)(v0 + 24);
    v15 = *(_OWORD *)(v0 + 40);
    v4 = swift_task_alloc(80);
    *(_QWORD *)(v0 + 88) = v4;
    *(_QWORD *)(v4 + 16) = v1;
    *(_OWORD *)(v4 + 24) = v14;
    *(_OWORD *)(v4 + 40) = v15;
    *(_QWORD *)(v4 + 56) = v3;
    *(_QWORD *)(v4 + 64) = v2;
    v5 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    v6 = v1;
    v7 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 96) = v7;
    v8 = sub_100090EE8(0, &qword_10026C428, &off_100235E30);
    *v7 = v0;
    v7[1] = sub_10009EF48;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000037, 0x80000001001FD6E0, sub_10009F48C, v4, v8);
  }
  else
  {
    v10 = type metadata accessor for Errors(0);
    v11 = sub_10009F444();
    swift_allocError(v10, v11, 0, 0);
    *v12 = 0xD00000000000003FLL;
    v12[1] = 0x80000001001FD6A0;
    v13 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, enum case for Errors.NotFound(_:), v10);
    swift_willThrow(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009EF48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009EFE8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_10009EFB4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009EFB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10009EFE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009F024(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Class isa, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v19 = a2;
  v20 = a8;
  v10 = sub_10009061C((uint64_t *)&unk_10026C430);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100239578, v16 + v12, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v16, (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10009F504;
  v22 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009F2B8;
  aBlock[3] = &unk_100239590;
  v18 = _Block_copy(aBlock);
  swift_release(v22);
  objc_msgSend(v19, "openBulkSendSessionForFileType:reason:metadata:queue:callback:", v13, v14, isa, v20, v18);
  _Block_release(v18);

}

uint64_t sub_10009F1D4(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (a2)
  {
    v10 = a2;
    swift_errorRetain(a2);
LABEL_3:
    v2 = sub_10009061C((uint64_t *)&unk_10026C430);
    return CheckedContinuation.resume(throwing:)(&v10, v2);
  }
  if (!a1)
  {
    v6 = type metadata accessor for Errors(0);
    v7 = sub_10009F444();
    v8 = swift_allocError(v6, v7, 0, 0);
    *v9 = 0xD000000000000024;
    v9[1] = 0x80000001001FD760;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v9, enum case for Errors.CommunicationFailure(_:), v6);
    v10 = v8;
    goto LABEL_3;
  }
  v10 = (uint64_t)a1;
  v4 = a1;
  v5 = sub_10009061C((uint64_t *)&unk_10026C430);
  return CheckedContinuation.resume(returning:)(&v10, v5);
}

void sub_10009F2B8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

_QWORD *sub_10009F32C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_100090EA8(i, (uint64_t)v11);
    v4 = sub_100090EE8(0, &qword_10026C418, off_100235E68);
    v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6);
    if (!(_DWORD)v5)
      break;
    v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2)
      return v12;
  }
  v10 = 0;
  swift_release(v12);

  return 0;
}

unint64_t sub_10009F444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C7F0;
  if (!qword_10026C7F0)
  {
    v1 = type metadata accessor for Errors(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Errors, v1);
    atomic_store(result, (unint64_t *)&qword_10026C7F0);
  }
  return result;
}

void sub_10009F48C(uint64_t a1)
{
  uint64_t v1;

  sub_10009F024(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(Class *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10009F4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009061C((uint64_t *)&unk_10026C430);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009F504(void *a1, uint64_t a2)
{
  sub_10009061C((uint64_t *)&unk_10026C430);
  return sub_10009F1D4(a1, a2);
}

uint64_t sub_10009F554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009F564(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

BOOL sub_10009F56C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10009F580()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10009F5C4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10009F5EC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10009F638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_10009061C(&qword_10026C558);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10009F6B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_10009B27C(v3, v2);
  sub_10009B27C(v3, v2);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v3, v2, (int)v3);
  sub_10009B2FC(v3, v2);
  v5 = type metadata accessor for Data.Iterator(0);
  v6 = sub_100090E1C((unint64_t *)&qword_10026C560, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v5, v6);
  v7 = 0;
  v8 = 0;
  if ((*(_BYTE *)(v4 - 65) & 1) == 0)
  {
    v7 = 0;
    v9 = -7;
    v10 = 7;
    do
    {
      v8 = v9 + 8;
      if (__OFADD__(v9 + 7, 1))
      {
        __break(1u);
        JUMPOUT(0x10009F7F4);
      }
      v11 = *(unsigned __int8 *)(v4 - 66);
      v12 = v11 << v10;
      if (v10 >= 0x40)
        v12 = 0;
      v13 = v11 >> v9;
      if (v10 <= 0xFFFFFFFFFFFFFFC0)
        v13 = 0;
      if (v9 + 7 >= 8)
        v14 = v13;
      else
        v14 = v12;
      if ((unint64_t)(v9 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        v14 = 0;
      v7 |= v14;
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v5, v6);
      ++v9;
      --v10;
    }
    while (*(_BYTE *)(v4 - 65) != 1);
  }
  *(_QWORD *)(v1 + *(int *)(v0 + 36)) = v8;
  sub_10009B2C0(v1, &qword_10026C558);
  return v7;
}

uint64_t sub_10009F804@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000AB69C(*a1);
  *a2 = result;
  return result;
}

void sub_10009F82C(int a1, int a2, id a3, void *a4, uint64_t a5, uint64_t a6)
{
  Class isa;
  objc_class *v9;

  objc_msgSend(objc_retainAutorelease(a3), "bytes");
  objc_msgSend(objc_retainAutorelease(a4), "bytes");
  isa = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](isa, "bytes");
  v9 = isa;
  __asm { BR              X10 }
}

uint64_t sub_10009F8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;
  objc_class *v7;
  uint64_t v9;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(isa, *(SEL *)(v0 + 216));
  v7 = isa;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, id))chacha20_poly1305_decrypt_all_64x64)(v1, v2, 0, 0, v3, BYTE6(v4), v9, v6);
}

uint64_t sub_10009F97C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  v9 = swift_allocObject(&unk_100239818, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_1000ACFC4;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239830;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v13 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void *sub_10009FB60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *result;
  void *v11;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting Pair-setup", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1000AC194(0, 0xF000000000000000);
  result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate);
  if (result)
  {
    v11 = result;
    if ((objc_msgSend(result, "respondsToSelector:", "pairSetupSessionDidStart:") & 1) != 0)
      objc_msgSend(v11, "pairSetupSessionDidStart:", a1);
    return (void *)swift_unknownObjectRelease(v11);
  }
  return result;
}

uint64_t sub_10009FD30(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  v11 = swift_allocObject(&unk_1002397C8, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1000ACFBC;
  v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_1002397E0;
  v12 = _Block_copy(aBlock);
  v13 = v1;
  v14 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v17 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

void sub_10009FF20(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *Strong;
  void *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[3];
  char v52[8];
  uint64_t v53[3];

  v49 = a2;
  v3 = sub_10009061C(&qword_10026C568);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10009061C((uint64_t *)&unk_10026C590);
  __chkstk_darwin(v6);
  v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v46 - v13;
  v15 = (void (*)(char *, uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17 = v16((char *)&v46 - v13, a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v47 = v15;
    v21 = v8;
    v22 = v16;
    v23 = v5;
    v24 = v12;
    v25 = a1;
    v26 = v20;
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Stopping Pair-setup", v20, 2u);
    v27 = v26;
    a1 = v25;
    v12 = v24;
    v5 = v23;
    v16 = v22;
    v8 = v21;
    v15 = v47;
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28(v14, v8);
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type) != 3)
  {
    v29 = type metadata accessor for SPAKE2.Prover(0);
    v30 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v48, 1, 1, v29);
    v31 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover;
    swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover, v53, 33, 0);
    sub_1000ACEA4(v30, v31, (uint64_t *)&unk_10026C590);
    swift_endAccess(v53);
    v32 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v5, 1, 1, v32);
    v33 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
    swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret, v53, 33, 0);
    sub_1000ACEA4((uint64_t)v5, v33, &qword_10026C568);
    swift_endAccess(v53);
  }
  v34 = v49;
  if (v49)
  {
    v16(v12, (uint64_t)v15, v8);
    swift_errorRetain(v34);
    v35 = swift_errorRetain(v34);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v48 = v12;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v47 = v28;
      v40 = v39;
      v53[0] = v39;
      *(_DWORD *)v38 = 136315138;
      swift_getErrorValue(v49, v52, v51);
      v41 = Error.localizedDescription.getter(v51[1], v51[2]);
      v43 = v42;
      v50 = sub_1000906BC(v41, v42, v53);
      v34 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Pair-setup failed: %s", v38, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v47(v48, v8);
    }
    else
    {
      swift_errorRelease(v34);
      swift_errorRelease(v34);

      v28(v12, v8);
    }
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate);
  if (Strong)
  {
    v45 = Strong;
    if ((objc_msgSend(Strong, "respondsToSelector:", "pairSetupSession:didStopWithError:") & 1) != 0)
    {
      if (v34)
        v34 = (void *)_convertErrorToNSError(_:)(v34);
      objc_msgSend(v45, "pairSetupSession:didStopWithError:", a1, v34);
      swift_unknownObjectRelease(v45);

    }
    else
    {
      swift_unknownObjectRelease(v45);
    }
  }
}

void sub_1000A040C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Class isa;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t Strong;
  void *v37;
  Class v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[336];

  v1 = type metadata accessor for Data.Deallocator(0);
  v45 = *(_QWORD *)(v1 - 8);
  v46 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v0;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Pair-setup: M1", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  memset(v50, 0, 332);
  TLV8BufferInit(v50, 16000);
  TLV8BufferAppendUInt64(v50, 0, 0);
  v12 = sub_10009061C(&qword_10026BF40);
  v13 = swift_allocObject(v12, 33, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1001DE690;
  v14 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  v15 = v47;
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v47 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
  v16 = sub_1000EAC28(v13);
  v18 = v17;
  swift_bridgeObjectRelease(v13);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v16, v18);
  v20 = objc_retainAutorelease(isa);
  TLV8BufferAppend(v50, 6, -[objc_class bytes](v20, "bytes"), -[objc_class length](v20, "length"));
  LODWORD(v49) = *(_DWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags);
  TLV8BufferAppend(v50, 19, &v49, 4);
  v48 = 0;
  v49 = 0;
  TLV8BufferDetach(v50, &v49, &v48);
  v21 = v49;
  if (v49 && (v22 = v48, v48 >= 1))
  {
    v44 = v14;
    v24 = v45;
    v23 = v46;
    v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v45 + 104))(v3, enum case for Data.Deallocator.free(_:), v46);
    v26 = Data.Deallocator._deallocator.getter(v25);
    v28 = v27;
    v29 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_retain(v28);
    v30 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 0, v26, v28, 0);
    v31 = sub_1000ABB90(v30, v22);
    v33 = v32;
    swift_release(v28);
    v34 = *(void (**)(char *, uint64_t))(v24 + 8);
    v35 = v47;
    v34(v3, v23);
    Strong = swift_unknownObjectWeakLoadStrong(v35 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate);
    if (Strong)
    {
      v37 = (void *)Strong;
      v38 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v37, "pairSetupSession:didReceiveSetupExchangeData:", v35, v38);
      sub_10009B2FC(v31, v33);

      swift_unknownObjectRelease(v37);
    }
    else
    {
      sub_10009B2FC(v31, v33);
    }
    *(_BYTE *)(v35 + v44) = 2;
    TLV8BufferFree(v50, v39);

  }
  else
  {
    v40 = sub_1000ACC88();
    v41 = swift_allocError(&type metadata for PairSetupError, v40, 0, 0);
    *v42 = 0;
    swift_willThrow(v41);

  }
}

uint64_t sub_1000A083C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  v15 = (_QWORD *)swift_allocObject(&unk_100239778, 56, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v4;
  v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_1000ACF80;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239790;
  v16 = _Block_copy(aBlock);
  sub_10009E38C(a1, a2);
  v17 = v4;
  v18 = sub_10009B27C(a3, a4);
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v21 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  return swift_release(v28);
}

void *sub_1000A0A54(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *result;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v35 - v15;
  v17 = a3 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  if (a2 >> 60 == 15)
  {
    v19 = v18((char *)&v35 - v15, v17, v10);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "M2: Cannot get Setup Code from user!", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    result = (void *)swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate);
    if (result)
    {
      v24 = result;
      if ((objc_msgSend(result, "respondsToSelector:", "pairSetupSessionDidReceiveInvalidSetupCode:") & 1) != 0)
        objc_msgSend(v24, "pairSetupSessionDidReceiveInvalidSetupCode:", a3);
      return (void *)swift_unknownObjectRelease(v24);
    }
  }
  else
  {
    v18(v14, v17, v10);
    sub_10009E38C((uint64_t)a1, a2);
    sub_10009B27C((uint64_t)a1, a2);
    v25 = sub_10009B27C((uint64_t)a1, a2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v38 = a5;
      v28 = swift_slowAlloc(12, -1);
      v39 = a3;
      v29 = (uint8_t *)v28;
      v36 = swift_slowAlloc(32, -1);
      v41[0] = v36;
      v37 = a4;
      *(_DWORD *)v29 = 136380675;
      v35 = v29 + 4;
      sub_100117E20((uint64_t)a1, a2);
      v31 = v30;
      v40 = sub_1000906BC(v32, v30, v41);
      a4 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v35, v29 + 12);
      v33 = v31;
      a5 = v38;
      swift_bridgeObjectRelease(v33);
      sub_10009E3A0((uint64_t)a1, a2);
      sub_10009E3A0((uint64_t)a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "M2: Got Setup Code from user: %{private}s", v29, 0xCu);
      v34 = v36;
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_10009E3A0((uint64_t)a1, a2);
      sub_10009E3A0((uint64_t)a1, a2);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_1000A1340(a1, a2, a4, a5);
    return (void *)sub_10009E3A0((uint64_t)a1, a2);
  }
  return result;
}

void sub_1000A0DDC(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t (*v18)(char *);
  uint8_t *v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  char *v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  objc_class *v38;
  id v39;
  char *v40;
  objc_class *v41;
  void **UInt64;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t Strong;
  void *v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  _QWORD *v52;
  _BYTE *v53;
  void **v54;
  _BYTE *v55;
  unint64_t v56;
  uint64_t (*v57)(char *);
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void **aBlock;
  _QWORD v65[4];
  _QWORD *v66;

  v3 = v2;
  v62 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v60 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v54 - v12;
  v14 = *(uint64_t (**)(char *))(v6 + 16);
  v61 = &v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger];
  v15 = v14((char *)&v54 - v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = v14;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Pair-setup: M2", v19, 2u);
    v20 = v19;
    v14 = v18;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v13, v5);
  if (a2 >> 60 != 15)
  {
    v22 = v62;
    sub_10009E38C(v62, a2);
    v23 = sub_1000ABD20(v22, a2, 3u);
    v25 = v24;
    v57 = v14;
    ((void (*)(char *, char *, uint64_t))v14)(v11, v61, v5);
    sub_10009B27C(v23, v25);
    v26 = sub_10009B27C(v23, v25);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    v29 = os_log_type_enabled(v27, v28);
    v58 = v25;
    v59 = v21;
    if (v29)
    {
      v56 = a2;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (void **)swift_slowAlloc(32, -1);
      aBlock = v54;
      *(_DWORD *)v30 = 136380675;
      v55 = v3;
      sub_100117E20(v23, v25);
      v32 = v31;
      v63 = sub_1000906BC(v33, v31, (uint64_t *)&aBlock);
      v3 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &aBlock, v30 + 4, v30 + 12);
      v34 = v32;
      a2 = v56;
      swift_bridgeObjectRelease(v34);
      sub_10009B2FC(v23, v25);
      sub_10009B2FC(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "M2: shareV %{private}s", v30, 0xCu);
      v35 = v54;
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v59(v11, v5);
    }
    else
    {
      sub_10009B2FC(v23, v25);
      sub_10009B2FC(v23, v25);

      v21(v11, v5);
    }
    v36 = v60;
    v37 = (uint64_t (*)(char *, char *, uint64_t))v57;
    v38 = objc_retainAutorelease(Data._bridgeToObjectiveC()().super.isa);
    v39 = -[objc_class bytes](v38, "bytes");
    v40 = (char *)-[objc_class length](v38, "length") + (_QWORD)v39;
    v41 = objc_retainAutorelease(v38);
    UInt64 = (void **)TLV8GetUInt64(-[objc_class bytes](v41, "bytes"), v40, 19, 0, 0);
    v43 = v37(v36, v61, v5);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134217984;
      v36 = v60;
      aBlock = UInt64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v65, v46 + 4, v46 + 12);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "M2: flags %llu", v46, 0xCu);
      swift_slowDealloc(v46, -1, -1);
    }

    v59(v36, v5);
    v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 3;
    Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate]);
    if (Strong)
    {
      v48 = (void *)Strong;
      v49 = (_QWORD *)swift_allocObject(&unk_100239728, 40, 7);
      v49[2] = v3;
      v49[3] = v23;
      v50 = v58;
      v49[4] = v58;
      v65[3] = sub_1000ACF14;
      v66 = v49;
      aBlock = _NSConcreteStackBlock;
      v65[0] = 1107296256;
      v65[1] = sub_100187340;
      v65[2] = &unk_100239740;
      v51 = _Block_copy(&aBlock);
      v52 = v66;
      sub_10009B27C(v23, v50);
      v53 = v3;
      swift_release(v52);
      objc_msgSend(v48, "pairSetupSession:didReceiveSetupCodeRequestWithCompletionHandler:", v53, v51);
      sub_10009B2FC(v23, v50);
      swift_unknownObjectRelease(v48);

      sub_10009E3A0(v62, a2);
      _Block_release(v51);
    }
    else
    {
      sub_10009B2FC(v23, v58);

      sub_10009E3A0(v62, a2);
    }
  }
}

uint64_t sub_1000A1340(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  Swift::String v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  Swift::String v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD v100[9];
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  void (*v111)(char *, uint64_t);
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD v124[3];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128[42];

  v5 = v4;
  v100[5] = a3;
  v100[6] = a4;
  v120 = a1;
  v121 = a2;
  v6 = type metadata accessor for Data.Deallocator(0);
  v100[1] = *(_QWORD *)(v6 - 8);
  v100[2] = v6;
  __chkstk_darwin(v6);
  v100[0] = (char *)v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SPAKE2.CipherSuite(0);
  v104 = *(_QWORD *)(v8 - 8);
  v105 = v8;
  __chkstk_darwin(v8);
  v119 = (char *)v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10009061C((uint64_t *)&unk_10026C590);
  v11 = __chkstk_darwin(v10);
  v101 = (uint64_t)v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v106 = (char *)v100 - v13;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v100[4] = (char *)v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v100[8] = (char *)v100 - v19;
  v20 = __chkstk_darwin(v18);
  v103 = (char *)v100 - v21;
  v22 = __chkstk_darwin(v20);
  v100[3] = (char *)v100 - v23;
  v24 = __chkstk_darwin(v22);
  v100[7] = (char *)v100 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)v100 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v109 = v5 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v110 = v28;
  v29 = ((uint64_t (*)(char *))v28)((char *)v100 - v26);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Pair-setup: M3", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v111 = *(void (**)(char *, uint64_t))(v15 + 8);
  v111(v27, v14);
  v128[0] = 0;
  v128[1] = 0xE000000000000000;
  v33 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption;
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption))
    v34 = 0x74694B6B636F44;
  else
    v34 = 0x72696173726F43;
  v35 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease(0xE700000000000000);
  v36._countAndFlagsBits = 0x676E69726961502DLL;
  v36._object = (void *)0xED00006F666E492DLL;
  String.append(_:)(v36);
  v123 = sub_1000E7BE4(v128[0], v128[1]);
  v117 = v37;
  v128[0] = 0;
  v128[1] = 0xE000000000000000;
  if (*(_BYTE *)(v5 + v33))
    v38 = 0x74694B6B636F44;
  else
    v38 = 0x72696173726F43;
  v39 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease(0xE700000000000000);
  v40._countAndFlagsBits = 0x676E69726961502DLL;
  v40._object = (void *)0xED0000746C61532DLL;
  String.append(_:)(v40);
  v114 = sub_1000E7BE4(v128[0], v128[1]);
  v115 = v41;
  v128[0] = 0;
  v128[1] = 0xE000000000000000;
  if (*(_BYTE *)(v5 + v33))
    v42 = 0x74694B6B636F44;
  else
    v42 = 0x72696173726F43;
  v43 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease(0xE700000000000000);
  v44._countAndFlagsBits = 0x7265766F72502DLL;
  v44._object = (void *)0xE700000000000000;
  String.append(_:)(v44);
  v116 = sub_1000E7BE4(v128[0], v128[1]);
  v118 = v45;
  v128[0] = 0;
  v128[1] = 0xE000000000000000;
  if (*(_BYTE *)(v5 + v33))
    v46 = 0x74694B6B636F44;
  else
    v46 = 0x72696173726F43;
  v47 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v46);
  v48._countAndFlagsBits = 0x656966697265562DLL;
  v48._object = (void *)0xE900000000000072;
  String.append(_:)(v48);
  v49 = sub_1000E7BE4(v128[0], v128[1]);
  v113 = v14;
  v122 = v50;
  v128[0] = 0;
  v128[1] = 0xE000000000000000;
  v102 = v5;
  if (*(_BYTE *)(v5 + v33))
    v51 = 0x74694B6B636F44;
  else
    v51 = 0x72696173726F43;
  v52 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v51);
  v53._countAndFlagsBits = 0x65532D726961502DLL;
  v53._object = (void *)0xEB00000000707574;
  String.append(_:)(v53);
  v54 = sub_1000E7BE4(v128[0], v128[1]);
  v56 = v55;
  v112 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v119, enum case for SPAKE2.CipherSuite.P256_SHA256_HKDF_SHA256_HMAC_SHA256(_:), v105);
  sub_10009B27C((uint64_t)v120, v121);
  v58 = v114;
  v57 = v115;
  sub_10009B27C(v114, v115);
  v59 = v117;
  sub_10009B27C(v123, v117);
  sub_10009B27C(v54, v56);
  v60 = v49;
  v61 = v122;
  sub_10009B27C(v49, v122);
  v62 = v116;
  v63 = v118;
  sub_10009B27C(v116, v118);
  v99 = v61;
  v108 = v60;
  v98 = v60;
  v65 = (uint64_t)v106;
  v64 = v107;
  v66 = v121;
  v67 = v112;
  v121 = v54;
  SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)(v120, v66, v58, v57, v123, v59, v54, v112, v98, v99, v62, v63, v119);
  if (!v64)
  {
    v81 = type metadata accessor for SPAKE2.Prover(0);
    v82 = *(_QWORD *)(v81 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v65, 0, 1, v81);
    v83 = v102;
    v84 = v102 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover;
    swift_beginAccess(v102 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover, v128, 33, 0);
    sub_1000ACEA4(v65, v84, (uint64_t *)&unk_10026C590);
    swift_endAccess(v128);
    memset(v128, 0, 332);
    TLV8BufferInit(v128, 16000);
    v85 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
    LOBYTE(v126) = *(_BYTE *)(v83 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
    TLV8BufferAppend(v128, 6, &v126, 1);
    v86 = v84;
    v87 = v101;
    sub_1000ACE4C(v86, v101, (uint64_t *)&unk_10026C590);
    v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    if (v120(v87, 1, v81) != 1)
    {
      SPAKE2.Prover.getShare()();
      v88 = v87;
      v96 = v95;
      v119 = 0;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v88, v81);
      v97 = (char *)&loc_1000A1D48 + *((int *)qword_1000A2910 + (v96 >> 62));
      v106 = (char *)v85;
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x1000A290CLL);
  }
  v68 = v103;
  v69 = v113;
  v110(v103, v109, v113);
  swift_errorRetain(v64);
  v70 = swift_errorRetain(v64);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = (uint8_t *)swift_slowAlloc(12, -1);
    v74 = swift_slowAlloc(32, -1);
    v128[0] = v74;
    *(_DWORD *)v73 = 136315138;
    swift_getErrorValue(v64, &v125, v124);
    v75 = Error.localizedDescription.getter(v124[1], v124[2]);
    v77 = v76;
    v126 = sub_1000906BC(v75, v76, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease(v77);
    swift_errorRelease(v64);
    swift_errorRelease(v64);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Unable to create Spake2+ prover: %s", v73, 0xCu);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    v78 = v74;
    v67 = v112;
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v73, -1, -1);

    v79 = v103;
    v80 = v113;
  }
  else
  {
    swift_errorRelease(v64);
    swift_errorRelease(v64);

    v79 = v68;
    v80 = v69;
  }
  v111(v79, v80);
  v89 = v123;
  v90 = v118;
  v91 = sub_1000ACC88();
  v92 = swift_allocError(&type metadata for PairSetupError, v91, 0, 0);
  *v93 = 1;
  swift_willThrow(v92);
  swift_errorRelease(v64);
  sub_10009B2FC(v121, v67);
  sub_10009B2FC(v108, v122);
  sub_10009B2FC(v116, v90);
  sub_10009B2FC(v114, v115);
  return sub_10009B2FC(v89, v117);
}

uint64_t sub_1000A2930(uint64_t a1, unint64_t a2)
{
  uint8_t *v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint8_t **v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  char *v29;
  uint8_t *v30;
  uint8_t *v31;
  uint8_t *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  uint64_t result;
  unint64_t v39;
  char *v40;
  objc_class *v41;
  id v42;
  char *v43;
  objc_class *v44;
  void *Strong;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint8_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  __n128 v64;
  int v65;
  unint64_t v66;
  Class v67;
  unint64_t v68;
  unint64_t v69;
  uint8_t **v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint8_t *v80;
  uint8_t **v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  int v89;
  unint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  char *v99;
  uint8_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  NSData v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  NSData v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t *v111;
  uint8_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  char *v139;
  objc_class *v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t, __n128);
  char *v142;
  void (*v143)(char *, uint64_t);
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint8_t **v150;
  Class v151;
  uint8_t *v152;
  Class isa;
  uint8_t **v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD v158[3];
  char v159[8];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162[3];
  _BYTE *v163;
  char v164[8];

  v156 = a2;
  v3 = v2;
  v157 = a1;
  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v142 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for SymmetricKey(0);
  v148 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v144 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009061C(&qword_10026C568);
  v8 = __chkstk_darwin(v7);
  v146 = (uint64_t)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v145 = (uint64_t)&v137 - v11;
  __chkstk_darwin(v10);
  v151 = (Class)((char *)&v137 - v12);
  v13 = sub_10009061C((uint64_t *)&unk_10026C590);
  __chkstk_darwin(v13);
  v15 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v150 = (uint8_t **)((char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v137 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v137 - v23;
  v25 = *(uint8_t ***)(v17 + 16);
  isa = (Class)&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger];
  v154 = v25;
  v26 = ((uint64_t (*)(char *))v25)((char *)&v137 - v23);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = v22;
    v30 = v3;
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Pair-setup: M4", v31, 2u);
    v32 = v31;
    v3 = v30;
    v22 = v29;
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v24, v16);
  v152 = v3;
  v34 = (uint64_t)&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover];
  swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover], v164, 0, 0);
  sub_1000ACE4C(v34, (uint64_t)v15, (uint64_t *)&unk_10026C590);
  v35 = type metadata accessor for SPAKE2.Prover(0);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48);
  v37 = v36(v15, 1, v35);
  result = sub_10009B2C0((uint64_t)v15, (uint64_t *)&unk_10026C590);
  if (v37 != 1)
  {
    v39 = v156;
    if (v156 >> 60 != 15)
    {
      v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v36;
      v40 = v22;
      v143 = v33;
      sub_10009B27C(v157, v156);
      v41 = objc_retainAutorelease(Data._bridgeToObjectiveC()().super.isa);
      v42 = -[objc_class bytes](v41, "bytes");
      v43 = (char *)-[objc_class length](v41, "length") + (_QWORD)v42;
      v163 = 0;
      v160 = 0;
      v44 = objc_retainAutorelease(v41);
      TLV8Get(-[objc_class bytes](v44, "bytes"), v43, 7, &v163, &v160, 0);
      if (v163 && *v163 == 2)
      {
        Strong = (void *)swift_unknownObjectWeakLoadStrong(&v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate]);
        if (Strong)
        {
          v46 = Strong;
          if ((objc_msgSend(Strong, "respondsToSelector:", "pairSetupSessionDidReceiveInvalidSetupCode:") & 1) != 0)
            objc_msgSend(v46, "pairSetupSessionDidReceiveInvalidSetupCode:", v152);
          swift_unknownObjectRelease(v46);
        }
        v47 = sub_1000ACC88();
        v48 = swift_allocError(&type metadata for PairSetupError, v47, 0, 0);
        *v49 = 2;
        swift_willThrow(v48);

        return sub_10009E3A0(v157, v39);
      }
      v50 = sub_1000ABD20(v157, v39, 4u);
      v52 = v51;
      ((void (*)(char *, Class, uint64_t))v154)(v40, isa, v16);
      sub_10009B27C(v50, v52);
      v53 = sub_10009B27C(v50, v52);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter();
      v56 = os_log_type_enabled(v54, v55);
      v140 = v44;
      v149 = v50;
      if (v56)
      {
        v57 = (uint8_t *)swift_slowAlloc(12, -1);
        v138 = swift_slowAlloc(32, -1);
        v162[0] = v138;
        v139 = v40;
        *(_DWORD *)v57 = 136380675;
        v137 = v57 + 4;
        sub_100117E20(v149, v52);
        v59 = v58;
        v161 = sub_1000906BC(v60, v58, v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v137, v57 + 12);
        v61 = v155;
        swift_bridgeObjectRelease(v59);
        sub_10009B2FC(v149, v52);
        sub_10009B2FC(v149, v52);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "M4: confirmV %{private}s", v57, 0xCu);
        v62 = v138;
        swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        v63 = v57;
        v50 = v149;
        swift_slowDealloc(v63, -1, -1);

        v143(v139, v16);
      }
      else
      {
        sub_10009B2FC(v50, v52);
        sub_10009B2FC(v50, v52);

        v143(v40, v16);
        v61 = v155;
      }
      v64 = swift_beginAccess(v34, v162, 33, 0);
      v65 = v141(v34, 1, v35, v64);
      v66 = v156;
      if (v65 == 1)
      {
        __break(1u);
      }
      else
      {
        v67 = v151;
        v68 = v61;
        SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)(v50, v52);
        v69 = v61;
        if (v61)
        {
          swift_endAccess(v162);
          v70 = v150;
          ((void (*)(uint8_t **, Class, uint64_t))v154)(v150, isa, v16);
          swift_errorRetain(v61);
          v71 = swift_errorRetain(v61);
          v72 = Logger.logObject.getter(v71);
          v73 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v72, v73))
          {
            v74 = swift_slowAlloc(12, -1);
            v155 = v52;
            v75 = (uint8_t *)v74;
            v76 = swift_slowAlloc(32, -1);
            v162[0] = v76;
            *(_DWORD *)v75 = 136315138;
            swift_getErrorValue(v68, v159, v158);
            v77 = Error.localizedDescription.getter(v158[1], v158[2]);
            v79 = v78;
            v161 = sub_1000906BC(v77, v78, v162);
            v66 = v156;
            v50 = v149;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v75 + 4, v75 + 12);
            swift_bridgeObjectRelease(v79);
            swift_errorRelease(v68);
            swift_errorRelease(v68);
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to verify confirmV and generate shared secret: %s", v75, 0xCu);
            swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v76, -1, -1);
            v80 = v75;
            v52 = v155;
            swift_slowDealloc(v80, -1, -1);

            v81 = v150;
          }
          else
          {
            swift_errorRelease(v68);
            swift_errorRelease(v68);

            v81 = v70;
          }
          v143((char *)v81, v16);
          v90 = sub_1000ACC88();
          v91 = swift_allocError(&type metadata for PairSetupError, v90, 0, 0);
          *v92 = 2;
          swift_willThrow(v91);

          sub_10009E3A0(v157, v66);
          swift_errorRelease(v69);
          v93 = v50;
          v136 = v52;
          return sub_10009B2FC(v93, v136);
        }
        v155 = v52;
        swift_endAccess(v162);
        v82 = v148;
        v83 = v147;
        (*(void (**)(Class, _QWORD, uint64_t, uint64_t))(v148 + 56))(v67, 0, 1, v147);
        v84 = v152;
        v85 = (uint64_t)v67;
        v86 = (uint64_t)&v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret];
        swift_beginAccess(&v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret], v162, 33, 0);
        sub_1000ACEA4(v85, v86, &qword_10026C568);
        swift_endAccess(v162);
        v87 = v145;
        sub_1000ACE4C(v86, v145, &qword_10026C568);
        v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
        v89 = v88(v87, 1, v83);
        v154 = (uint8_t **)v88;
        if (v89)
        {
          sub_10009B2C0(v87, &qword_10026C568);
        }
        else
        {
          v94 = v144;
          (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v144, v87, v83);
          v95 = sub_10009B2C0(v87, &qword_10026C568);
          v96 = __chkstk_darwin(v95);
          *(&v137 - 2) = v84;
          __chkstk_darwin(v96);
          *(&v137 - 2) = (uint8_t *)sub_1000ACE9C;
          *(&v137 - 1) = v97;
          v98 = sub_10009061C(&qword_10026C588);
          SymmetricKey.withUnsafeBytes<A>(_:)(v162, sub_1000AD230, &v137 - 4, v98);
          v99 = v94;
          v66 = v156;
          (*(void (**)(char *, uint64_t))(v82 + 8))(v99, v83);
        }
        v100 = v84;
        v101 = sub_1000E7BE4(0xD000000000000017, 0x80000001001FD940);
        v103 = v102;
        v104.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10009B2FC(v101, v103);
        v105 = sub_1000E7BE4(0xD000000000000017, 0x80000001001FD960);
        v107 = v106;
        v108.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10009B2FC(v105, v107);
        v109 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
        v110 = __DataStorage.init(length:)(32) | 0x4000000000000000;
        v111 = v100;
        v112 = &v100[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey];
        swift_beginAccess(v112, v162, 1, 0);
        v113 = *(_QWORD *)v112;
        v114 = *((_QWORD *)v112 + 1);
        *(_QWORD *)v112 = 0x2000000000;
        *((_QWORD *)v112 + 1) = v110;
        sub_10009E3A0(v113, v114);
        v115 = v86;
        v116 = v146;
        sub_1000ACE4C(v115, v146, &qword_10026C568);
        v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v154)(v116, 1, v83);
        isa = v104.super.isa;
        v151 = v108.super.isa;
        if (v117)
        {
          sub_10009B2C0(v116, &qword_10026C568);
        }
        else
        {
          v118 = v144;
          (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v144, v116, v83);
          v119 = sub_10009B2C0(v116, &qword_10026C568);
          v154 = &v137;
          v120 = __chkstk_darwin(v119);
          v150 = &v137;
          *(&v137 - 4) = v111;
          *(&v137 - 3) = (uint8_t *)v104.super.isa;
          *(&v137 - 2) = (uint8_t *)v108.super.isa;
          __chkstk_darwin(v120);
          *(&v137 - 2) = (uint8_t *)sub_1000ACE90;
          *(&v137 - 1) = v121;
          v122 = sub_10009061C(&qword_10026C588);
          SymmetricKey.withUnsafeBytes<A>(_:)(&v161, sub_1000AD230, &v137 - 4, v122);
          (*(void (**)(char *, uint64_t))(v148 + 8))(v118, v83);
        }
        v123 = sub_1000ABD20(v157, v66, 5u);
        v125 = *((_QWORD *)v112 + 1);
        if (v125 >> 60 != 15)
        {
          v126 = v123;
          v127 = v124;
          v128 = *(_QWORD *)v112;
          sub_10009E38C(*(_QWORD *)v112, *((_QWORD *)v112 + 1));
          sub_1000ABF54(v126, v127, v128, v125, 0x343067734D2D5350, 0xE800000000000000);
          v130 = v129;
          v132 = v131;
          sub_10009E3A0(v128, v125);
          v134 = sub_1000ABD20(v130, v132, 0x1Cu);
          v135 = v133;
          if ((*(_QWORD *)&v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type] & 0xFFFFFFFFFFFFFFFELL) != 2)
          {
            v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 5;
            __asm { BR              X10 }
          }
          v152[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 7;
          sub_10009FD30(0);

          sub_10009E3A0(v157, v156);
          sub_10009B2FC(v134, v135);
          sub_10009B2FC(v130, v132);
          sub_10009B2FC(v126, v127);

          v93 = v149;
          v136 = v155;
          return sub_10009B2FC(v93, v136);
        }
      }
      __break(1u);
      JUMPOUT(0x1000A3844);
    }
  }
  return result;
}

uint64_t sub_1000A3854(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = sub_1000ABC74(a1, a2 - (_QWORD)a1);
    v13 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v6);
    sub_10009B27C(v11, v13);
    v14 = sub_10009B27C(v11, v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v25 = v23;
      *(_DWORD *)v17 = 136380675;
      v22 = v17 + 4;
      sub_100117E20(v11, v13);
      v19 = v18;
      v24 = sub_1000906BC(v20, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v22, v17 + 12);
      swift_bridgeObjectRelease(v19);
      sub_10009B2FC(v11, v13);
      sub_10009B2FC(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "M4: Spake2+ Secret %{private}s", v17, 0xCu);
      v21 = v23;
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      sub_10009B2FC(v11, v13);
    }
    else
    {
      sub_10009B2FC(v11, v13);
      sub_10009B2FC(v11, v13);
      sub_10009B2FC(v11, v13);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

void sub_1000A3A84(uint64_t a1, uint64_t a2, char *a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)&a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey];
  swift_beginAccess(&a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey], v31, 33, 0);
  if ((unint64_t)v12[1] >> 60 == 15)
  {
    __break(1u);
LABEL_8:

    __break(1u);
    return;
  }
  v13 = a4;
  v14 = a5;
  sub_1000AA040((uint64_t)v12);
  swift_endAccess(v31);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, &a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v8);
  a3 = a3;
  v15 = Logger.logObject.getter(a3);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v27 = v9;
    v28 = v8;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v31[0] = v18;
    *(_DWORD *)v17 = 136380675;
    v19 = v12[1];
    if (v19 >> 60 != 15)
    {
      v20 = v18;
      v21 = *v12;
      v26 = v17 + 4;
      sub_10009B27C(v21, v19);
      sub_100117E20(v21, v19);
      v23 = v22;
      v25 = v24;
      sub_10009E3A0(v21, v19);
      v29 = sub_1000906BC(v23, v25, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26, v17 + 12);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "M4: SessionKey %{private}s", v17, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
      return;
    }
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1000A3D08(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[12];
  _BYTE v21[336];

  v20[2] = a2;
  v20[3] = a3;
  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v21, 0, 332);
  TLV8BufferInit(v21, 16000);
  v8 = objc_msgSend(a1, "identifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  static String.Encoding.utf8.getter(v12);
  String.data(using:allowLossyConversion:)(v7, 0, v9, v11);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20[1] = v4;
  v15(v7, v4);
  if (v14 >> 60 != 15)
    __asm { BR              X10 }
  v16 = objc_msgSend(a1, "publicKey");
  v17 = objc_msgSend(v16, "data");

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  __asm { BR              X10 }
}

uint64_t sub_1000A404C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 72) = v2;
  *(_WORD *)(v0 + 80) = v1;
  *(_BYTE *)(v0 + 82) = BYTE2(v1);
  *(_BYTE *)(v0 + 83) = BYTE3(v1);
  *(_BYTE *)(v0 + 84) = BYTE4(v1);
  *(_BYTE *)(v0 + 85) = BYTE5(v1);
  TLV8BufferAppend(v0 + 96, 3, v0 + 72, BYTE6(v1));
  v3 = sub_10009B2FC(v2, v1);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000A41E4
                                          + *((int *)qword_1000A4540 + (*(_QWORD *)(v0 + 24) >> 62))))(v3);
}

uint64_t sub_1000A41F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSData v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  objc_class *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v0 + 72) = v2;
  *(_WORD *)(v0 + 80) = v4;
  *(_BYTE *)(v0 + 82) = BYTE2(v4);
  *(_BYTE *)(v0 + 83) = BYTE3(v4);
  *(_BYTE *)(v0 + 84) = BYTE4(v4);
  *(_BYTE *)(v0 + 85) = BYTE5(v4);
  v5 = TLV8BufferAppend(v0 + 96, 10, v0 + 72, 64);
  static String.Encoding.utf8.getter(v5);
  v6 = String.data(using:allowLossyConversion:)(v1, 0, 0x353067734D2D5350, 0xE800000000000000);
  v8 = v7;
  v3(v1, *(_QWORD *)(v0 + 8));
  if (v8 >> 60 == 15)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v9.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009E3A0(v6, v8);
  v10 = (uint64_t *)(*(_QWORD *)v0 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey);
  swift_beginAccess(v10, v0 + 72, 0, 0);
  v11 = v10[1];
  if (v11 >> 60 == 15)
    goto LABEL_5;
  v12 = *v10;
  sub_10009B27C(v12, v11);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009E3A0(v12, v11);
  *(_QWORD *)(v0 + 56) = sub_1000AB600(*(_QWORD *)(v0 + 104));
  *(_QWORD *)(v0 + 64) = v14;
  v15 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = __DataStorage.init(length:)(16);
  *(_QWORD *)(v0 + 40) = 0x1000000000;
  *(_QWORD *)(v0 + 48) = v16 | 0x4000000000000000;
  v17 = isa;
  v18 = v9.super.isa;
  sub_1000A9564(v0 + 56);
  v19 = *(_QWORD *)(v0 + 40);
  v20 = *(_QWORD *)(v0 + 48);
  sub_10009B27C(v19, v20);
  Data.append(_:)(v19, v20);
  sub_10009B2FC(v19, v20);
  TLV8BufferFree(v0 + 96, v21);

  sub_10009B2FC(v19, v20);
  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_1000A4550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  void *Strong;
  void *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  objc_class *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(objc_class *, Class);
  Class v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *v56;
  unint64_t v57;
  unint64_t v58;
  NSData v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  uint8_t *v73;
  uint8_t *v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  Class v92;
  objc_class *v93;
  id v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD v110[2];
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  Class isa;
  objc_class *v119;
  Class v120;
  char *v121;
  uint64_t (*v122)(char *);
  uint64_t v123;
  uint64_t (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[3];
  uint64_t v130;
  _QWORD v131[2];
  _OWORD v132[21];
  uint64_t v133;
  unint64_t v134;
  char v135[24];

  v1 = type metadata accessor for Data.Deallocator(0);
  v114 = *(_QWORD *)(v1 - 8);
  v115 = v1;
  __chkstk_darwin(v1);
  v113 = (char *)v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for SymmetricKey(0);
  v3 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v111 = (char *)v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = (Class)type metadata accessor for String.Encoding(0);
  isa = (Class)*((_QWORD *)v120 - 1);
  __chkstk_darwin(v120);
  v119 = (objc_class *)((char *)v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10009061C(&qword_10026C568);
  v7 = __chkstk_darwin(v6);
  v117 = (uint64_t)v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)v110 - v9;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v121 = (char *)v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v110 - v16;
  v18 = __chkstk_darwin(v15);
  v116 = (char *)v110 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)v110 - v20;
  v126 = v0;
  v127 = v22;
  v122 = *(uint64_t (**)(char *))(v12 + 16);
  v123 = v0 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v23 = v122((char *)v110 - v20);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = v3;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pair-setup: M5", v27, 2u);
    v28 = v27;
    v3 = v26;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v30 = v127;
  v124 = v29;
  v29(v21, v127);
  v31 = v126;
  v32 = v126 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
  swift_beginAccess(v126 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret, v135, 0, 0);
  sub_1000ACE4C(v32, (uint64_t)v10, &qword_10026C568);
  v112 = v3;
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v34 = v33(v10, 1, v125);
  sub_10009B2C0((uint64_t)v10, &qword_10026C568);
  if (v34 == 1)
  {
    v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v122)(v17, v123, v30);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to retreive shared secret key!", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    return v124(v17, v30);
  }
  else
  {
    v40 = v31 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v31 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate);
    if (Strong)
    {
      v42 = Strong;
      *(_QWORD *)&v132[0] = 0;
      v43 = (char *)objc_msgSend(Strong, "pairSetupSession:didReceiveLocalPairingIdentityRequestWithError:", v31, v132);
      swift_unknownObjectRelease(v42);
      v44 = *(void **)&v132[0];
      if (v43)
      {
        v116 = v43;
        v110[1] = v40;
        v45 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
        v46 = v44;
        v47 = __DataStorage.init(length:)(32);
        v133 = 0x2000000000;
        v134 = v47 | 0x4000000000000000;
        v48 = v119;
        static String.Encoding.utf8.getter(v47);
        v49 = String.data(using:allowLossyConversion:)(v48, 0, 0xD00000000000001FLL, 0x80000001001FD900);
        v51 = v50;
        v52 = (void (*)(objc_class *, Class))*((_QWORD *)isa + 1);
        v53 = v120;
        v52(v48, v120);
        if (v51 >> 60 == 15)
        {
          __break(1u);
        }
        else
        {
          isa = Data._bridgeToObjectiveC()().super.isa;
          v54 = sub_10009E3A0(v49, v51);
          static String.Encoding.utf8.getter(v54);
          v55 = String.data(using:allowLossyConversion:)(v48, 0, 0xD00000000000001FLL, 0x80000001001FD920);
          v56 = v48;
          v58 = v57;
          v52(v56, v53);
          if (v58 >> 60 != 15)
          {
            v59.super.isa = Data._bridgeToObjectiveC()().super.isa;
            sub_10009E3A0(v55, v58);
            v60 = v117;
            sub_1000ACE4C(v32, v117, &qword_10026C568);
            v61 = v125;
            v62 = v33((char *)v60, 1, v125);
            v120 = v59.super.isa;
            if (v62)
            {
              sub_10009B2C0(v60, &qword_10026C568);
              v63 = v128;
              v64 = v116;
            }
            else
            {
              v81 = v111;
              v80 = v112;
              (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v111, v60, v61);
              v82 = sub_10009B2C0(v60, &qword_10026C568);
              v119 = (objc_class *)v110;
              v83 = __chkstk_darwin(v82);
              v110[-4] = &v133;
              v110[-3] = isa;
              v110[-2] = v59.super.isa;
              v64 = v116;
              v110[-1] = v116;
              __chkstk_darwin(v83);
              v110[-2] = sub_1000ACE40;
              v110[-1] = v84;
              v85 = sub_10009061C(&qword_10026C588);
              v86 = v128;
              SymmetricKey.withUnsafeBytes<A>(_:)(v131, sub_1000AD230, &v110[-4], v85);
              v63 = v86;
              (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v61);
            }
            v87 = *(unsigned int *)(v45 + 48);
            v88 = *(unsigned __int16 *)(v45 + 52);
            v117 = v45;
            swift_allocObject(v45, v87, v88);
            v89 = __DataStorage.init(length:)(64);
            v90 = v133;
            v91 = v134;
            sub_10009B27C(v133, v134);
            v92 = Data._bridgeToObjectiveC()().super.isa;
            sub_10009B2FC(v90, v91);
            *(_QWORD *)&v132[0] = 0x4000000000;
            *((_QWORD *)&v132[0] + 1) = v89;
            v93 = v92;
            v94 = v64;
            v119 = v93;
            sub_1000AAF98((int *)v132, v93, v94);
            v128 = v63;
            v95 = v132[0];
            memset(v132, 0, 332);
            TLV8BufferInit(v132, 16000);
            sub_10009B27C(v95, *((_QWORD *)&v95 + 1) | 0x4000000000000000);
            v96 = v126;
            sub_1000A3D08(v94, v95, *((_QWORD *)&v95 + 1) | 0x4000000000000000);
            v98 = v97;
            swift_release(*((_QWORD *)&v95 + 1));
            v116 = (char *)OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
            BYTE1(v131[0]) = *(_BYTE *)(v96 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
            TLV8BufferAppend(v132, 6, (char *)v131 + 1, 1);
            v99 = (char *)&loc_1000A4DC0 + *((int *)qword_1000A5330 + (v98 >> 62));
            v125 = v98;
            __asm { BR              X10 }
          }
        }
        __break(1u);
        JUMPOUT(0x1000A5330);
      }
      v78 = *(id *)&v132[0];
      v76 = _convertNSErrorToError(_:)(v44);

      swift_willThrow(v79);
      v72 = v121;
      v67 = (void (*)(char *, uint64_t, uint64_t))v122;
      v66 = v123;
    }
    else
    {
      v65 = v116;
      v67 = (void (*)(char *, uint64_t, uint64_t))v122;
      v66 = v123;
      v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v122)(v116, v123, v30);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.error.getter();
      v71 = os_log_type_enabled(v69, v70);
      v72 = v121;
      if (v71)
      {
        v73 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Unable to retrieve pair-setup identifier from accessory server!", v73, 2u);
        v74 = v73;
        v66 = v123;
        swift_slowDealloc(v74, -1, -1);
      }

      v124(v65, v30);
      v75 = sub_1000ACC88();
      v76 = swift_allocError(&type metadata for PairSetupError, v75, 0, 0);
      *v77 = 1;
      swift_willThrow(v76);
    }
    v67(v72, v66, v30);
    swift_errorRetain(v76);
    v100 = swift_errorRetain(v76);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v101, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(12, -1);
      v104 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v132[0] = v104;
      v128 = 0;
      *(_DWORD *)v103 = 136315138;
      swift_getErrorValue(v76, &v130, v129);
      v105 = Error.localizedDescription.getter(v129[1], v129[2]);
      v107 = v106;
      v133 = sub_1000906BC(v105, v106, (uint64_t *)v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v103 + 4, v103 + 12);
      swift_bridgeObjectRelease(v107);
      swift_errorRelease(v76);
      swift_errorRelease(v76);
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Pair-setup: M5: Unable to retrieve pairing identity: %s", v103, 0xCu);
      swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v103, -1, -1);

      swift_errorRelease(v76);
      v108 = v121;
      v109 = v127;
    }
    else
    {
      swift_errorRelease(v76);
      swift_errorRelease(v76);
      swift_errorRelease(v76);

      v108 = v72;
      v109 = v30;
    }
    return v124(v108, v109);
  }
}

uint64_t sub_1000A5340(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v10 = type metadata accessor for String.Encoding(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a4;
  v15 = a5;
  sub_1000A9BE0(a3);
  v16 = objc_msgSend(a6, "identifier");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  static String.Encoding.utf8.getter(v20);
  v21 = String.data(using:allowLossyConversion:)(v13, 0, v17, v19);
  v23 = v22;
  swift_bridgeObjectRelease(v19);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v23 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    Data.append(_:)(v21, v23);
    sub_10009E3A0(v21, v23);
    v25 = objc_msgSend(a6, "publicKey");
    v26 = objc_msgSend(v25, "data");

    v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    Data.append(_:)(v27, v29);
    return sub_10009B2FC(v27, v29);
  }
  return result;
}

void sub_1000A54EC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;

  if (a1)
  {
    v7 = ccsha512_di();
    if (v7)
    {
      v8 = v7;
      v19 = objc_msgSend(a3, "length");
      v9 = objc_msgSend(objc_retainAutorelease(a3), "bytes");
      v10 = objc_msgSend(a4, "publicKey");
      v11 = objc_msgSend(v10, "data");

      if (v11)
      {
        v12 = objc_msgSend(v11, "bytes");
        v13 = v11;
        v14 = objc_msgSend(a4, "privateKey");
        if (v14)
        {
          v15 = v14;
          v16 = objc_msgSend(v14, "data");

          if (v16)
          {
            v17 = objc_msgSend(v16, "bytes");
            v18 = v16;
            cced25519_sign(v8, a1, v19, v9, v12, v17);
            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t sub_1000A5648(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  char *v35;
  objc_class *v36;
  char *v37;
  objc_class *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  char *v47;
  _QWORD v48[13];
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE v62[7];
  char *v63;

  v59 = a2;
  v58 = a1;
  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v48[12] = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SymmetricKey(0);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  __chkstk_darwin(v5);
  v51 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009061C(&qword_10026C568);
  __chkstk_darwin(v7);
  v52 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v12 = __chkstk_darwin(v11);
  v50 = (char *)v48 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v48 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v48 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)v48 - v20;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v55 = v2;
  v56 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v57 = v22;
  v23 = ((uint64_t (*)(char *))v22)((char *)v48 - v20);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = v16;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pair-setup: M6", v27, 2u);
    v28 = v27;
    v16 = v26;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v29(v21, v9);
  v31 = v59;
  if (v59 >> 60 != 15)
  {
    v48[11] = v16;
    v49 = (void (*)(char *, uint64_t))v29;
    v32 = v58;
    sub_10009B27C(v58, v59);
    v33 = objc_retainAutorelease(Data._bridgeToObjectiveC()().super.isa);
    v34 = -[objc_class bytes](v33, "bytes");
    v35 = (char *)-[objc_class length](v33, "length") + (_QWORD)v34;
    v63 = 0;
    v60 = 0;
    v36 = objc_retainAutorelease(v33);
    TLV8Get(-[objc_class bytes](v36, "bytes"), v35, 7, &v63, &v60, 0);
    v37 = v63;
    if (!v63 || !*v63)
    {
      sub_1000ABD20(v32, v31, 5u);
      v47 = (char *)&loc_1000A5A70 + *((int *)qword_1000A67A8 + (v46 >> 62));
      v48[9] = v36;
      v48[10] = v46;
      __asm { BR              X9 }
    }
    v38 = v36;
    v39 = v57(v19, v56, v9);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v42 = 16777472;
      v61 = *v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v42 + 4, v42 + 5);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Pair-setup M6 bad status %hhu", v42, 5u);
      swift_slowDealloc(v42, -1, -1);
    }

    v49(v19, v9);
    v43 = sub_1000ACC88();
    v44 = swift_allocError(&type metadata for PairSetupError, v43, 0, 0);
    *v45 = 1;
    swift_willThrow(v44);

    return sub_10009E3A0(v32, v31);
  }
  return result;
}

uint64_t sub_1000A67C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v14;
  id v15;

  v14 = a4;
  v15 = a5;
  sub_1000A9BE0(a3);
  Data.append(_:)(a6, a7);
  return Data.append(_:)(a8, a9);
}

void sub_1000A6868(_BYTE *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  objc_class *v12;
  id v13;
  char *v14;
  objc_class *v15;
  objc_class *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  unsigned __int8 *v23;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  v11 = a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state];
  if (!a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state])
  {
    v11 = 1;
    a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 1;
  }
  if (a3 >> 60 == 15)
    goto LABEL_7;
  v12 = objc_retainAutorelease(Data._bridgeToObjectiveC()().super.isa);
  v13 = -[objc_class bytes](v12, "bytes");
  v14 = (char *)-[objc_class length](v12, "length") + (_QWORD)v13;
  v23 = 0;
  v22[0] = 0;
  v15 = objc_retainAutorelease(v12);
  TLV8Get(-[objc_class bytes](v15, "bytes"), v14, 6, &v23, v22, 0);
  if (!v23 || *v23 == a1[v10])
  {

    v11 = a1[v10];
LABEL_7:
    switch(v11)
    {
      case 1:
        sub_1000A040C();
        break;
      case 2:
        sub_1000A0DDC(a2, a3);
        break;
      case 4:
        sub_1000A2930(a2, a3);
        break;
      case 6:
        sub_1000A5648(a2, a3);
        break;
      default:
        return;
    }
    return;
  }
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 16))(v9, &a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v6);
  v16 = a1;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(5, -1);
    *(_DWORD *)v19 = 16777472;
    v21 = a1[v10];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v19 + 4, v19 + 5);

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Exchange data received in invalid state: %hhu", v19, 5u);
    swift_slowDealloc(v19, -1, -1);
    v16 = v15;
  }
  else
  {

    v17 = v15;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000A6BF4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;
  char v35[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_10026C568);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Split pair setup done.", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v19 = (uint64_t)&v1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret];
  swift_beginAccess(&v1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret], v35, 0, 0);
  sub_1000ACE4C(v19, (uint64_t)v10, &qword_10026C568);
  v20 = type metadata accessor for SymmetricKey(0);
  LODWORD(v19) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v10, 1, v20);
  result = sub_10009B2C0((uint64_t)v10, &qword_10026C568);
  if ((_DWORD)v19 != 1)
  {
    v22 = swift_allocObject(&unk_1002396D8, 24, 7);
    *(_QWORD *)(v22 + 16) = v1;
    aBlock[4] = sub_1000ACD30;
    v34 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10012357C;
    aBlock[3] = &unk_1002396F0;
    v23 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v1);
    v32 = _swiftEmptyArrayStorage;
    v24 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v26 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    v27 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v31, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v27);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    return swift_release(v34);
  }
  return result;
}

void sub_1000A6F54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSData v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSData v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  Class v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  uint64_t v51;
  Class v52;
  Class v53;
  Class isa;
  _BYTE v55[14];
  unsigned __int8 v56;
  _BYTE __s[14];
  unsigned __int8 v58;
  char v59[24];

  v51 = 0;
  v2 = type metadata accessor for SymmetricKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v49 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10009061C(&qword_10026C568);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v48 - v9;
  v11 = sub_1000E7BE4(0x74655374696C7053, 0xEE00746C61537075);
  v13 = v12;
  v14.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v11, v13);
  v15 = sub_1000E7BE4(0xD000000000000018, 0x80000001001FD880);
  v17 = v16;
  v18.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v15, v17);
  v19 = sub_1000E7BE4(0xD000000000000019, 0x80000001001FD8A0);
  v21 = v20;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v19, v21);
  v22 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret, v59, 0, 0);
  sub_1000ACE4C(v22, (uint64_t)v10, &qword_10026C568);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v24 = v23(v10, 1, v2);
  v52 = v14.super.isa;
  v53 = v18.super.isa;
  v50 = a1;
  if (v24)
  {
    sub_10009B2C0((uint64_t)v10, &qword_10026C568);
    v25 = v49;
  }
  else
  {
    v25 = v49;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v49, v10, v2);
    v26 = sub_10009B2C0((uint64_t)v10, &qword_10026C568);
    v48[1] = v48;
    v27 = __chkstk_darwin(v26);
    v48[0] = v48;
    v48[-4] = a1;
    v48[-3] = v14.super.isa;
    v48[-2] = v18.super.isa;
    __chkstk_darwin(v27);
    v48[-2] = sub_1000ACDEC;
    v48[-1] = v28;
    v29 = sub_10009061C(&qword_10026C588);
    SymmetricKey.withUnsafeBytes<A>(_:)(__s, sub_1000AD230, &v48[-4], v29);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v25, v2);
  }
  sub_1000ACE4C(v22, (uint64_t)v8, &qword_10026C568);
  v30 = v23(v8, 1, v2);
  v31 = isa;
  if (v30)
  {
    sub_10009B2C0((uint64_t)v8, &qword_10026C568);
    v32 = v50;
    v33 = v52;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v25, v8, v2);
    v34 = sub_10009B2C0((uint64_t)v8, &qword_10026C568);
    v35 = __chkstk_darwin(v34);
    v32 = v50;
    v33 = v52;
    v48[-4] = v50;
    v48[-3] = v33;
    v48[-2] = v31;
    __chkstk_darwin(v35);
    v48[-2] = sub_1000ACD90;
    v48[-1] = v36;
    v37 = sub_10009061C(&qword_10026C588);
    v31 = isa;
    SymmetricKey.withUnsafeBytes<A>(_:)(__s, sub_1000ACDB4, &v48[-4], v37);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v25, v2);
  }
  memset(__s, 0, sizeof(__s));
  v58 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  v38 = *(_QWORD *)__s;
  v39 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v58 << 48);
  v40 = (uint64_t *)(v32 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce);
  swift_beginAccess(v32 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce, __s, 1, 0);
  v41 = *v40;
  v42 = v40[1];
  *v40 = v38;
  v40[1] = v39;
  sub_10009B2FC(v41, v42);
  memset(v55, 0, sizeof(v55));
  v56 = 8;
  memset_s(v55, 8uLL, 0, 8uLL);
  v43 = *(_QWORD *)v55;
  v44 = *(unsigned int *)&v55[8] | ((unint64_t)v55[12] << 32) | ((unint64_t)v55[13] << 40) | ((unint64_t)v56 << 48);
  v45 = (uint64_t *)(v32 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce);
  swift_beginAccess(v32 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce, v55, 1, 0);
  v46 = *v45;
  v47 = v45[1];
  *v45 = v43;
  v45[1] = v44;
  sub_10009B2FC(v46, v47);

}

void sub_1000A7448(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v10 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = __DataStorage.init(length:)(32) | 0x4000000000000000;
  v12 = (uint64_t *)(a3 + *a6);
  swift_beginAccess(v12, v18, 1, 0);
  v13 = *v12;
  v14 = v12[1];
  *v12 = 0x2000000000;
  v12[1] = v11;
  sub_10009E3A0(v13, v14);
  swift_beginAccess(v12, v17, 33, 0);
  if ((unint64_t)v12[1] >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v15 = a4;
    v16 = a5;
    sub_1000AA040((uint64_t)v12);
    swift_endAccess(v17);
  }
}

uint64_t sub_1000A7540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, void *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v19;

  v19 = kCryptoHashDescriptor_SHA512;
  if (a3)
    v10 = a4 - a3;
  else
    v10 = 0;
  v11 = objc_retainAutorelease(a5);
  v12 = objc_msgSend(v11, "bytes");
  v13 = objc_msgSend(v11, "length");
  v14 = objc_retainAutorelease(a6);
  v15 = objc_msgSend(v14, "bytes");
  v16 = objc_msgSend(v14, "length");
  if (a1)
    v17 = a2 - a1;
  else
    v17 = 0;
  return CryptoHKDF(v19, a3, v10, v12, v13, v15, v16, v17, a1);
}

uint64_t sub_1000A7664@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey;
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey, v9, 0, 0);
  if (*(_QWORD *)(v4 + 8) >> 60 == 15)
  {
    v6 = 0;
  }
  else
  {
    v7 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey;
    result = swift_beginAccess(v7, &v8, 0, 0);
    v6 = *(_QWORD *)(v7 + 8) >> 60 != 15;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000A778C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[24];

  v4 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey, v9, 0, 0);
  if (*(_QWORD *)(v4 + 8) >> 60 != 15)
    __asm { BR              X10 }
  v5 = sub_1000ABB30();
  v6 = swift_allocError(&type metadata for DockdError, v5, 0, 0);
  *v7 = 3;
  return swift_willThrow(v6);
}

void sub_1000A78F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

double sub_1000A7948@<D0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  Class isa;
  objc_class *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;

  *(_QWORD *)(v6 - 72) = a1;
  *(_QWORD *)&v27 = sub_1000AB600(BYTE6(v2));
  *((_QWORD *)&v27 + 1) = v7;
  v8 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v25 = 0x1000000000;
  v26 = __DataStorage.init(length:)(16) | 0x4000000000000000;
  v9 = (uint64_t *)&v5[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey];
  swift_beginAccess(&v5[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey], &v24, 0, 0);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x1000A7B64);
  }
  v11 = *v9;
  sub_10009B27C(v11, v10);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009E3A0(v11, v10);
  v13 = isa;
  v14 = v5;
  sub_10009E38C(v3, v1);
  sub_10009B27C(v4, v2);
  sub_1000AA2F4((uint64_t)&v27);
  v15 = v25;
  v16 = v26;
  sub_10009B27C(v25, v26);
  Data.append(_:)(v15, v16);
  sub_10009B2FC(v15, v16);
  if (v14[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption] == 1)
  {
    v17 = (uint64_t *)&v14[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
    swift_beginAccess(&v14[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce], &v22, 0, 0);
    v19 = *v17;
    v18 = v17[1];
    sub_10009B27C(v19, v18);
    Data.append(_:)(v19, v18);
    sub_10009B2FC(v19, v18);
  }
  v20 = (uint64_t)&v14[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
  swift_beginAccess(&v14[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce], v23, 33, 0);
  sub_1000AA78C(v20);
  swift_endAccess(v23);

  sub_10009B2FC(v15, v16);
  result = *(double *)&v27;
  *(_OWORD *)*(_QWORD *)(v6 - 72) = v27;
  return result;
}

void sub_1000A7B74(int a1, int a2, id a3, uint64_t a4, int a5, unint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  Class isa;
  objc_class *v16;
  Class v17;
  objc_class *v18;
  Class v19;
  objc_class *v20;
  _BYTE v21[24];

  objc_msgSend(objc_retainAutorelease(a3), "bytes");
  v12 = (uint64_t *)(a4 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce);
  swift_beginAccess(v12, v21, 0, 0);
  v13 = *v12;
  v14 = v12[1];
  sub_10009B27C(*v12, v14);
  isa = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](isa, "bytes");
  v16 = isa;
  sub_10009B2FC(v13, v14);
  if (a6 >> 60 == 15)
  {
    v19 = Data._bridgeToObjectiveC()().super.isa;
    -[objc_class bytes](v19, "bytes");
    v20 = v19;
    __asm { BR              X10 }
  }
  v17 = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](v17, "bytes");
  v18 = v17;
  __asm { BR              X10 }
}

uint64_t sub_1000A7CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))chacha20_poly1305_encrypt_all_64x64)(v7, v2, v3, v5, v4, BYTE6(v1), v0);
}

uint64_t sub_1000A7D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[24];

  v4 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey, v9, 0, 0);
  if (*(_QWORD *)(v4 + 8) >> 60 != 15)
    __asm { BR              X10 }
  v5 = sub_1000ABB30();
  v6 = swift_allocError(&type metadata for DockdError, v5, 0, 0);
  *v7 = 3;
  return swift_willThrow(v6);
}

void sub_1000A7F18(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v4[12];

  v4[6] = a2;
  v4[7] = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  __chkstk_darwin();
  v4[5] = (char *)v4 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X10 }
}

void sub_1000A7FCC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = BYTE6(v1) - 16;
  if (__OFSUB__(BYTE6(v1), 16))
  {
    __break(1u);
  }
  else if (!__OFSUB__(v6, v3))
  {
    *(_QWORD *)(v5 - 208) = v4;
    *(_QWORD *)(v5 - 200) = v0;
    sub_10012E07C(v6 - v3, v2, v1);
    sub_1000E80E0(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 128));
    v8 = v7;
    sub_10009B27C(v2, v1);
    sub_1000A864C(v3, v2, v1);
    sub_100177DCC(16, *(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
    sub_1000E80E0(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 128));
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000A8618);
}

void sub_1000A864C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1000A879CLL);
}

void sub_1000A87CC(int a1, int a2, id a3, uint64_t a4, int a5, unint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  Class isa;
  objc_class *v17;
  Class v18;
  objc_class *v19;
  Class v20;
  objc_class *v21;
  _BYTE v22[24];

  objc_msgSend(objc_retainAutorelease(a3), "bytes");
  v13 = (uint64_t *)(a4 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce);
  swift_beginAccess(v13, v22, 0, 0);
  v15 = *v13;
  v14 = v13[1];
  sub_10009B27C(v15, v14);
  isa = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](isa, "bytes");
  v17 = isa;
  sub_10009B2FC(v15, v14);
  if (a6 >> 60 == 15)
  {
    v20 = Data._bridgeToObjectiveC()().super.isa;
    -[objc_class bytes](v20, "bytes");
    v21 = v20;
    __asm { BR              X10 }
  }
  v18 = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](v18, "bytes");
  v19 = v18;
  __asm { BR              X10 }
}

uint64_t sub_1000A8948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;
  objc_class *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(isa, *(SEL *)(v2 + 216));
  v7 = isa;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, id))chacha20_poly1305_decrypt_all_64x64)(v10, v9, v3, v4, v0, BYTE6(v1), v11, v6);
  *v12 = result;
  return result;
}

Class sub_1000A8A18(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, unint64_t))
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Class isa;

  v10 = a3;
  v11 = a1;
  v12 = a4;
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v15 = v14;

  if (v12)
  {
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xF000000000000000;
  }
  v19 = a6(v13, v15, v16, v18);
  v21 = v20;

  sub_10009E3A0(v16, v18);
  sub_10009B2FC(v13, v15);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v19, v21);
  return isa;
}

id sub_1000A8B94()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DKPairSetupSession(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A8CBC()
{
  return type metadata accessor for DKPairSetupSession(0);
}

uint64_t type metadata accessor for DKPairSetupSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C500;
  if (!qword_10026C500)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DKPairSetupSession);
  return result;
}

void sub_1000A8D00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[15];

  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[2] = "\b";
  v8[3] = (char *)&value witness table for Builtin.Int32 + 64;
  v8[4] = &unk_1001DE930;
  v8[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v8[6] = *(_QWORD *)(v2 - 8) + 64;
    v8[7] = &unk_1001DE948;
    v8[8] = &unk_1001DE960;
    v8[9] = &unk_1001DE960;
    v8[10] = &unk_1001DE960;
    sub_1000A8E24(319, &qword_10026C510, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey);
    if (v5 <= 0x3F)
    {
      v8[11] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000A8E24(319, &qword_10026C518, (uint64_t (*)(uint64_t))&type metadata accessor for SPAKE2.Prover);
      if (v7 <= 0x3F)
      {
        v8[12] = *(_QWORD *)(v6 - 8) + 64;
        v8[13] = &unk_1001DE978;
        v8[14] = &unk_1001DE978;
        swift_updateClassMetadata2(a1, 256, 15, v8, a1 + 80);
      }
    }
  }
}

void sub_1000A8E24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MACAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10009B27C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for MACAddress(uint64_t a1)
{
  return sub_10009B2FC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for MACAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10009B27C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10009B2FC(v5, v6);
  return a1;
}

uint64_t *assignWithTake for MACAddress(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10009B2FC(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MACAddress(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MACAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DKPairSetupNonce()
{
  return &type metadata for DKPairSetupNonce;
}

uint64_t getEnumTagSinglePayload for DKPairSetupSession.PairSetupState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DKPairSetupSession.PairSetupState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1000A90C0 + 4 * byte_1001DE8E3[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000A90F4 + 4 * byte_1001DE8DE[v4]))();
}

uint64_t sub_1000A90F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A90FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A9104);
  return result;
}

uint64_t sub_1000A9110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A9118);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000A911C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DKPairSetupSession.PairSetupState()
{
  return &type metadata for DKPairSetupSession.PairSetupState;
}

unint64_t sub_1000A9144()
{
  unint64_t result;

  result = qword_10026C520;
  if (!qword_10026C520)
  {
    result = swift_getWitnessTable(&unk_1001DEA38, &type metadata for DKPairSetupSession.PairSetupState);
    atomic_store(result, (unint64_t *)&qword_10026C520);
  }
  return result;
}

void sub_1000A9188(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1000A91FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;

  v20 = v1;
  LOWORD(v21) = a1;
  BYTE2(v21) = BYTE2(a1);
  HIBYTE(v21) = BYTE3(a1);
  v22 = BYTE4(a1);
  v23 = BYTE5(a1);
  v24 = BYTE6(a1);
  v9 = (char *)&v20 + BYTE6(a1);
  sub_10009B27C(v5, v3);
  sub_10009F82C((int)&v20, (int)v9, v6, v8, v5, v3);
  v18 = v2;
  v19 = v20;
  v16 = v21;
  v17 = v4;
  v10 = v6;
  v11 = v22;
  v12 = v23;
  v13 = v8;
  v14 = v24;
  sub_10009B2FC(v5, v3);
  *v7 = v19;
  v7[1] = v16 | (v11 << 32) | (v12 << 40) | (v14 << 48);

  sub_10009B2FC(v5, v3);
  return sub_10009B2FC(v17, v18);
}

void sub_1000A9564(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1000A95D0(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v1;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  v6 = v2;
  v7 = v3;
  sub_1000A986C(v5);

  *v4 = v8;
  v4[1] = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);

}

void sub_1000A986C(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1000A98D8(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;

  v32 = v21;
  LOWORD(v33) = a1;
  BYTE2(v33) = BYTE2(a1);
  HIBYTE(v33) = BYTE3(a1);
  v34 = BYTE4(a1);
  v35 = BYTE5(a1);
  v36 = BYTE6(a1);
  v27 = objc_retainAutorelease(v22);
  v28 = v23;
  v29 = objc_msgSend(v27, "bytes");
  v30 = objc_retainAutorelease(v28);
  chacha20_poly1305_encrypt_all_64x64(v29, objc_msgSend(v30, "bytes"), 0, 0, *v25, v25[1], v26, &v32);

  v31 = v33 | ((unint64_t)v34 << 32) | ((unint64_t)v35 << 40) | ((unint64_t)v36 << 48);
  *v24 = v32;
  v24[1] = v31;

}

void sub_1000A9BE0(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1000A9C4C(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;

  v41 = v25;
  LOWORD(v42) = a1;
  BYTE2(v42) = BYTE2(a1);
  HIBYTE(v42) = BYTE3(a1);
  v43 = BYTE4(a1);
  v44 = BYTE5(a1);
  v45 = BYTE6(a1);
  v31 = v29 - v28;
  if (!v28)
    v31 = 0;
  v38 = kCryptoHashDescriptor_SHA512;
  v39 = v31;
  v32 = objc_retainAutorelease(v26);
  v33 = v30;
  v40 = v30;
  v34 = objc_msgSend(v32, "bytes");
  v35 = objc_msgSend(v32, "length");
  v36 = objc_retainAutorelease(v33);
  CryptoHKDF(v38, v28, v39, v34, v35, objc_msgSend(v36, "bytes"), objc_msgSend(v36, "length"), 32, &v41);

  v37 = v42 | ((unint64_t)v43 << 32) | ((unint64_t)v44 << 40) | ((unint64_t)v45 << 48);
  *v27 = v41;
  v27[1] = v37;

}

void sub_1000AA040(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1000AA0AC(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;

  v32 = v21;
  LOWORD(v33) = a1;
  BYTE2(v33) = BYTE2(a1);
  HIBYTE(v33) = BYTE3(a1);
  v34 = BYTE4(a1);
  v35 = BYTE5(a1);
  v36 = BYTE6(a1);
  sub_1000A7540((uint64_t)&v32, (uint64_t)&v32 + BYTE6(a1), v25, v24, v22, v26);
  v27 = v32;
  v28 = v33;
  v29 = v34;
  v30 = v35;
  v31 = v36;

  *v23 = v27;
  v23[1] = v28 | (v29 << 32) | (v30 << 40) | (v31 << 48);

}

void sub_1000AA2F4(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1000AA368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  v13 = v1;
  LOWORD(v14) = a1;
  BYTE2(v14) = BYTE2(a1);
  HIBYTE(v14) = BYTE3(a1);
  v15 = BYTE4(a1);
  v16 = BYTE5(a1);
  v17 = BYTE6(a1);
  v9 = v7;
  sub_10009E38C(v5, v4);
  sub_10009B27C(v3, v2);
  sub_10009E38C(v5, v4);
  sub_10009B27C(v3, v2);
  v10 = v6;
  sub_1000AA9B4(v12);
  sub_10009E3A0(v5, v4);
  *v8 = v13;
  v8[1] = v14 | ((unint64_t)v15 << 32) | ((unint64_t)v16 << 40) | ((unint64_t)v17 << 48);
  sub_10009B2FC(v3, v2);

  sub_10009E3A0(v5, v4);
  return sub_10009B2FC(v3, v2);
}

void sub_1000AA78C(uint64_t a1)
{
  __asm { BR              X13 }
}

void sub_1000AA7E0()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  char v15;
  char v16;

  v12 = v1;
  LOWORD(v13) = v0;
  BYTE2(v13) = BYTE2(v0);
  v3 = HIDWORD(v0);
  HIBYTE(v13) = BYTE3(v0);
  v4 = v0 >> 40;
  v14 = BYTE4(v0);
  v5 = HIWORD(v0);
  v15 = BYTE5(v0);
  v6 = BYTE6(v0);
  v16 = v5;
  if (v6)
  {
    v7 = v6 - 1;
    v8 = &v12;
    do
    {
      v9 = ++*(_BYTE *)v8;
      v8 = (uint64_t *)((char *)v8 + 1);
      if (v9)
        v10 = 1;
      else
        v10 = v7 == 0;
      --v7;
    }
    while (!v10);
    LOBYTE(v3) = v14;
    LOBYTE(v4) = v15;
    LOBYTE(v5) = v16;
  }
  v11 = v13 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48);
  *v2 = v12;
  v2[1] = v11;
}

void sub_1000AA9B4(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1000AAA28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v21 = v1;
  LOWORD(v22) = a1;
  BYTE2(v22) = BYTE2(a1);
  HIBYTE(v22) = BYTE3(a1);
  v23 = BYTE4(a1);
  v24 = BYTE5(a1);
  v25 = BYTE6(a1);
  v8 = v2;
  v9 = v5;
  v16 = (char *)&v21 + BYTE6(a1);
  sub_10009E38C(v4, v20);
  sub_1000A7B74((int)&v21, (int)v16, v6, v3, v4, v20, v5, v19, v8);
  v10 = v21;
  v17 = (void *)v3;
  v18 = v22;
  v11 = v23;
  v12 = v6;
  v13 = v24;
  v14 = v25;
  sub_10009E3A0(v4, v20);
  *v7 = v10;
  v7[1] = v18 | (v11 << 32) | (v13 << 40) | (v14 << 48);

  sub_10009E3A0(v4, v20);
  return sub_10009B2FC(v9, v19);
}

void sub_1000AADC4(int *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;

  Data.InlineSlice.ensureUniqueReference()();
  v14 = *a1;
  v15 = a1[1];
  if ((int)v15 < (int)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v23 = a5;
  v24 = a7;
  v16 = __DataStorage._bytes.getter();
  if (!v16)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v17 = v16;
  v18 = __DataStorage._offset.getter();
  v19 = v14 - v18;
  if (__OFSUB__(v14, v18))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v20 = v15 - v14;
  v21 = __DataStorage._length.getter();
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = v21;
  sub_10009F82C(v17 + v19, v17 + v19 + v22, a2, a3, a4, v23);

  sub_10009B2FC(a4, v23);
  sub_10009B2FC(a6, v24);
}

void sub_1000AAEC8(int *a1, uint64_t a2)
{
  uint64_t v4;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  if (a1[1] < (int)v4)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v4, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      sub_1000A986C(a2);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000AAF98(int *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Data.InlineSlice.ensureUniqueReference()();
  v6 = *a1;
  v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v9 = v8;
  v10 = __DataStorage._offset.getter();
  v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = v7 - v6;
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  sub_1000A54EC(v9 + v11, v9 + v11 + v14, a2, a3);

}

void sub_1000AB058(int *a1, void *a2, void *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;

  Data.InlineSlice.ensureUniqueReference()();
  v10 = *a1;
  if (a1[1] < (int)v10)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = __DataStorage._bytes.getter();
  if (v11)
  {
    v12 = v11;
    v13 = __DataStorage._offset.getter();
    v14 = __OFSUB__(v10, v13);
    v15 = v10 - v13;
    if (!v14)
    {
      __DataStorage._length.getter();
      v16 = objc_retainAutorelease(a2);
      v17 = objc_msgSend(v16, "bytes");
      v18 = objc_retainAutorelease(a3);
      chacha20_poly1305_encrypt_all_64x64(v17, objc_msgSend(v18, "bytes"), 0, 0, *a4, a4[1], a5, v12 + v15);

      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000AB144(int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;

  Data.InlineSlice.ensureUniqueReference()();
  v10 = *a1;
  if (a1[1] < (int)v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v11 = __DataStorage._bytes.getter();
  if (!v11)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v12 = v11;
  v13 = __DataStorage._offset.getter();
  v14 = v10 - v13;
  if (__OFSUB__(v10, v13))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __DataStorage._length.getter();
  v21 = kCryptoHashDescriptor_SHA512;
  if (a2)
    v15 = a3 - a2;
  else
    v15 = 0;
  v16 = v12 + v14;
  v17 = objc_retainAutorelease(a4);
  v18 = objc_msgSend(v17, "bytes");
  v19 = objc_msgSend(v17, "length");
  v20 = objc_retainAutorelease(a5);
  CryptoHKDF(v21, a2, v15, v18, v19, objc_msgSend(v20, "bytes"), objc_msgSend(v20, "length"), 32, v16);

}

void sub_1000AB284(int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  Data.InlineSlice.ensureUniqueReference()();
  v11 = *a1;
  v10 = a1[1];
  if ((int)v10 < (int)v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v19 = a5;
  v20 = a4;
  v12 = __DataStorage._bytes.getter();
  if (!v12)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v13 = v12;
  v14 = __DataStorage._offset.getter();
  v15 = v11 - v14;
  if (__OFSUB__(v11, v14))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v16 = v10 - v11;
  v17 = __DataStorage._length.getter();
  if (v17 >= v16)
    v18 = v16;
  else
    v18 = v17;
  sub_1000A7540(v13 + v15, v13 + v15 + v18, a2, a3, v20, v19);

}

void sub_1000AB36C(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v14;

  Data.InlineSlice.ensureUniqueReference()();
  v2 = *a1;
  v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v5 = v4;
  v6 = __DataStorage._offset.getter();
  v7 = v2 - v6;
  if (__OFSUB__(v2, v6))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v3 - v2;
  v9 = __DataStorage._length.getter();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  if (v10)
  {
    v11 = (_BYTE *)(v5 + v7);
    v12 = v10 - 1;
    do
    {
      if (++*v11++)
        v14 = 1;
      else
        v14 = v12 == 0;
      --v12;
    }
    while (!v14);
  }
}

void sub_1000AB414(int *a1, uint64_t a2)
{
  uint64_t v3;

  Data.InlineSlice.ensureUniqueReference()();
  v3 = *a1;
  if (a1[1] < (int)v3)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v3, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      sub_1000AA9B4(a2);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000AB4EC(int *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;

  Data.InlineSlice.ensureUniqueReference()();
  v16 = *a1;
  v15 = a1[1];
  if ((int)v15 < (int)v16)
  {
    __break(1u);
    goto LABEL_9;
  }
  v24 = a3;
  v25 = a2;
  v17 = __DataStorage._bytes.getter();
  if (!v17)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v18 = v17;
  v19 = __DataStorage._offset.getter();
  v20 = v16 - v19;
  if (__OFSUB__(v16, v19))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v21 = v15 - v16;
  v22 = __DataStorage._length.getter();
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  sub_1000A7B74(v18 + v20, v18 + v20 + v23, v25, (uint64_t)v24, a4, a5, a6, a7, a8);

  sub_10009E3A0(a4, a5);
  sub_10009B2FC(a6, a7);
}

uint64_t sub_1000AB600(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1000AB69C(uint64_t result)
{
  if ((result & 0xF8) != 0)
    return 8;
  else
    return result;
}

id sub_1000AB6B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  objc_class *v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  objc_super v41;
  _BYTE __s[14];
  unsigned __int8 v43;

  v5 = v4;
  v38 = a2;
  v39 = a4;
  v40 = a3;
  v37 = a1;
  v35 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = &v5[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate];
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate], 0);
  v33[0] = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags;
  *(_DWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags] = 0;
  v34 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue;
  v33[1] = sub_1000ABAF4(0, v15);
  v16 = v5;
  static DispatchQoS.unspecified.getter(v16);
  *(_QWORD *)__s = _swiftEmptyArrayStorage;
  v17 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10009061C(&qword_10026D000);
  v19 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
  dispatch thunk of SetAlgebra.init<A>(_:)(__s, v18, v19, v9, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v35);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x80000001001FC570, v14, v11, v8, 0);
  *(_QWORD *)&v5[v34] = v20;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x7574657372696170, 0xE900000000000070);
  v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 1;
  *(_OWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey] = xmmword_1001DE8C0;
  *(_OWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey] = xmmword_1001DE8C0;
  *(_OWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey] = xmmword_1001DE8C0;
  v21 = &v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret];
  v22 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = &v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover];
  v24 = type metadata accessor for SPAKE2.Prover(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = &v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce];
  memset(__s, 0, sizeof(__s));
  v43 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  v26 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v43 << 48);
  *(_QWORD *)v25 = *(_QWORD *)__s;
  *((_QWORD *)v25 + 1) = v26;
  v27 = &v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
  memset(__s, 0, sizeof(__s));
  v43 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  v28 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v43 << 48);
  *(_QWORD *)v27 = *(_QWORD *)__s;
  *((_QWORD *)v27 + 1) = v28;
  v29 = v38;
  *(_QWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_role] = v37;
  *(_QWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type] = v29;
  swift_unknownObjectWeakAssign(v36, v39);
  v16[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption] = v40;
  if (v29 == 3)
  {
    v30 = 16810000;
    goto LABEL_5;
  }
  if (v29 == 4)
  {
    v30 = 16809984;
LABEL_5:
    *(_DWORD *)&v5[v33[0]] = v30;
  }

  v31 = (objc_class *)type metadata accessor for DKPairSetupSession(0);
  v41.receiver = v16;
  v41.super_class = v31;
  return objc_msgSendSuper2(&v41, "init");
}

unint64_t sub_1000ABAF4(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026BF50;
  if (!qword_10026BF50)
  {
    v3 = objc_opt_self(OS_dispatch_queue, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026BF50);
  }
  return result;
}

unint64_t sub_1000ABB30()
{
  unint64_t result;

  result = qword_10026CFC0;
  if (!qword_10026CFC0)
  {
    result = swift_getWitnessTable(&unk_1001DFC40, &type metadata for DockdError);
    atomic_store(result, &qword_10026CFC0);
  }
  return result;
}

uint64_t sub_1000ABB74()
{
  return sub_1000ACCE8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A7F18);
}

uint64_t sub_1000ABB90(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;

  v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    v10 = type metadata accessor for Data.RangeReference(0);
    v4 = swift_allocObject(v10, 32, 7);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = a2;
    return v4;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      v6 = __DataStorage._length.getter();
      if (v6 >= a2)
        v7 = a2;
      else
        v7 = v6;
      v8 = &v5[v7];
      if (v5)
        v9 = v8;
      else
        v9 = 0;
      v4 = sub_100180E74(v5, v9);
      swift_release(v2);
      return v4;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ABC74(_BYTE *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_100180E74(__src, &__src[a2]);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  v6 = type metadata accessor for Data.RangeReference(0);
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000ABD20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  id v9;
  char *v10;
  char *v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;

  v4 = type metadata accessor for Data.Deallocator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_retainAutorelease(Data._bridgeToObjectiveC()().super.isa);
  v9 = -[objc_class bytes](v8, "bytes");
  v10 = (char *)-[objc_class length](v8, "length");
  v28 = 0;
  v29 = 0;
  v11 = &v10[(_QWORD)v9];
  v27 = 0;
  v12 = objc_retainAutorelease(v8);
  TLV8GetOrCopyCoalesced(-[objc_class bytes](v12, "bytes"), v11, a3, &v29, &v27, &v28, 0);
  v13 = v28;
  if (v28)
  {
    v14 = v27;
    v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Data.Deallocator.free(_:), v4);
    v16 = Data.Deallocator._deallocator.getter(v15);
    v18 = v17;
    if (v14)
    {
      v19 = v16;
      v20 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      swift_retain(v18);
      v21 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 0, v19, v18, 0);
      v22 = sub_1000ABB90(v21, v14);
      swift_release(v18);
    }
    else
    {
      v23 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter(v16);
      v25 = v24;
      v23(v13, 0);
      swift_release(v18);
      swift_release(v25);
      v22 = 0;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (!v29)
    {

      return 0;
    }
    v22 = sub_1000ABC74(v29, v27);
  }

  return v22;
}

void sub_1000ABF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSData v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v9 = type metadata accessor for String.Encoding(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.super.isa = Data._bridgeToObjectiveC()().super.isa;
  static String.Encoding.utf8.getter(v13.super.isa);
  v14 = String.data(using:allowLossyConversion:)(v12, 0, a5, a6);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v16 >> 60 != 15)
  {
    Data._bridgeToObjectiveC()();
    sub_10009E3A0(v14, v16);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000AC174);
}

uint64_t sub_1000AC194(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_100239868, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1000AD008;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239880;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  v16 = sub_10009E38C(a1, a2);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v19 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

void sub_1000AC38C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, unint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v16 = __DataStorage._bytes.getter();
  if (!v16)
    goto LABEL_10;
  v17 = v16;
  v18 = __DataStorage._offset.getter();
  v19 = a1 - v18;
  if (__OFSUB__(a1, v18))
  {
    __break(1u);
    goto LABEL_9;
  }
  v20 = __OFSUB__(a2, a1);
  v21 = a2 - a1;
  if (v20)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v22 = __DataStorage._length.getter();
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  sub_1000A87CC(v17 + v19, v17 + v19 + v23, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1000AC468(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000AC4E4@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X8>)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  id v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v8 - 104) = v3;
  *(_WORD *)(v8 - 96) = a2;
  v9 = HIDWORD(a2);
  *(_BYTE *)(v8 - 94) = BYTE2(a2);
  *(_BYTE *)(v8 - 93) = BYTE3(a2);
  v10 = a2 >> 40;
  v11 = HIWORD(a2);
  *(_BYTE *)(v8 - 92) = v9;
  *(_BYTE *)(v8 - 91) = v10;
  *(_BYTE *)(v8 - 90) = v11;
  v12 = v8 - 104 + v11;
  sub_10009B27C(v5, v4);
  sub_10009B27C(v38, v37);
  sub_10009B27C(v38, v37);
  v13 = v2;
  v14 = v6;
  v15 = v36;
  sub_10009E38C(v14, v7);
  v16 = v12;
  v17 = v14;
  v31 = v7;
  v32 = v4;
  sub_1000A87CC(v8 - 104, v16, v13, (uint64_t)v15, v14, v7, v5, v4, v38, v37);
  if (v34)
  {
    v18 = *(_QWORD *)(v8 - 104);
    v19 = *(unsigned int *)(v8 - 96);
    v20 = *(unsigned __int8 *)(v8 - 92);
    v21 = *(unsigned __int8 *)(v8 - 91);
    v22 = *(unsigned __int8 *)(v8 - 90);
    sub_10009B2FC(v38, v37);
    *a1 = v18;
    a1[1] = v19 | (v20 << 32) | (v21 << 40) | (v22 << 48);

    sub_10009E3A0(v17, v31);
  }
  else
  {
    v23 = *(unsigned int *)(v8 - 108);
    v24 = *(_QWORD *)(v8 - 104);
    v25 = *(unsigned int *)(v8 - 96);
    v26 = *(unsigned __int8 *)(v8 - 92);
    v27 = *(unsigned __int8 *)(v8 - 91);
    v28 = *(unsigned __int8 *)(v8 - 90);
    sub_10009B2FC(v38, v37);
    *a1 = v24;
    a1[1] = v25 | (v26 << 32) | (v27 << 40) | (v28 << 48);
    v29 = v17;
    v17 = v23;

    sub_10009E3A0(v29, v7);
  }
  sub_10009B2FC(v5, v32);
  sub_10009B2FC(v38, v37);
  return v17;
}

unint64_t sub_1000ACC88()
{
  unint64_t result;

  result = qword_10026C550;
  if (!qword_10026C550)
  {
    result = swift_getWitnessTable(&unk_1001DEAD8, &type metadata for PairSetupError);
    atomic_store(result, (unint64_t *)&qword_10026C550);
  }
  return result;
}

uint64_t sub_1000ACCCC()
{
  return sub_1000ACCE8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A78F0);
}

uint64_t sub_1000ACCE8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000ACD0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000ACD30()
{
  uint64_t v0;

  sub_1000A6F54(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000ACD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ACD48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000ACD50(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100090F6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000ACD90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A7448(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), &OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey);
}

uint64_t sub_1000ACDB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 0;
  return result;
}

void sub_1000ACDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A7448(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), &OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey);
}

uint64_t sub_1000ACE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A67C8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1000ACE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A5340(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1000ACE4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10009061C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1000ACE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A3A84(a1, a2, *(char **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000ACE9C(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A3854(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000ACEA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10009061C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000ACEE8()
{
  uint64_t v0;

  sub_10009B2FC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000ACF14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000A083C(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000ACF3C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_10009B2FC(*(_QWORD *)(v0 + 16), v1);

  sub_10009B2FC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void *sub_1000ACF80()
{
  uint64_t v0;

  return sub_1000A0A54(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000ACF90()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000ACFBC()
{
  uint64_t v0;

  sub_10009FF20(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_1000ACFC4()
{
  uint64_t v0;

  return sub_10009FB60(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000ACFCC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_10009B2FC(*(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000AD008()
{
  uint64_t v0;

  sub_1000A6868(*(_BYTE **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000AD014@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1000A7664(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000AD02C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for PairSetupError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PairSetupError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000AD12C + 4 * byte_1001DE8ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000AD160 + 4 * byte_1001DE8E8[v4]))();
}

uint64_t sub_1000AD160(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AD168(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AD170);
  return result;
}

uint64_t sub_1000AD17C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AD184);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000AD188(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AD190(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000AD19C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PairSetupError()
{
  return &type metadata for PairSetupError;
}

unint64_t sub_1000AD1B8()
{
  unint64_t result;

  result = qword_10026C5A0;
  if (!qword_10026C5A0)
  {
    result = swift_getWitnessTable(&unk_1001DEAB0, &type metadata for PairSetupError);
    atomic_store(result, (unint64_t *)&qword_10026C5A0);
  }
  return result;
}

uint64_t sub_1000AD230@<X0>(_BYTE *a1@<X8>)
{
  return sub_1000ACDB4(a1);
}

uint64_t sub_1000AD248()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026C610);
  sub_10008EA50(v0, (uint64_t)qword_10026C610);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000014, 0x80000001001FDA60);
}

id sub_1000AD2C8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger];
  v6 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000014, 0x80000001001FDA60);
  v7 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "camera capture interface open", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v11 = (objc_class *)type metadata accessor for dockCameraCaptureHandler(0);
  v13.receiver = v6;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "init");
}

void sub_1000AD544(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t (*a6)(uint64_t, uint64_t), const char *a7, NSObject *a8)
{
  void *v14;
  id v15;
  id v16;
  id v17;

  v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  v15 = a3;
  v16 = a4;
  v17 = a1;
  sub_1000AFB0C(a3, a4, (uint64_t)v17, (uint64_t)v14, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);

}

void sub_1000AD618(void *a1, int a2, void *aBlock, _QWORD *a4)
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  sub_1000B0770((uint64_t)v6, a4);
  _Block_release(v6);
  _Block_release(v6);

}

void sub_1000AD708(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);

}

id sub_1000AD76C()
{
  return sub_100094D38(0, (uint64_t (*)(void))type metadata accessor for dockCameraCaptureHandler);
}

uint64_t sub_1000AD7B8()
{
  return type metadata accessor for dockCameraCaptureHandler(0);
}

uint64_t type metadata accessor for dockCameraCaptureHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C650;
  if (!qword_10026C650)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for dockCameraCaptureHandler);
  return result;
}

uint64_t sub_1000AD7FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000AD868(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *Strong;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB48 != -1)
    swift_once(&qword_10026BB48, sub_1000AD248);
  v14 = sub_10008EA50(v10, (uint64_t)qword_10026C610);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(18, -1);
    v29 = a5;
    v19 = v18;
    v20 = swift_slowAlloc(32, -1);
    v30 = a4;
    v31 = v20;
    v21 = v20;
    *(_DWORD *)v19 = 67109378;
    LODWORD(v32) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v19 + 4, v19 + 8);
    *(_WORD *)(v19 + 8) = 2080;
    v32 = a2;
    v33 = a3;
    swift_bridgeObjectRetain(a3);
    v22 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v23 = String.init<A>(describing:)(&v32, v22);
    v25 = v24;
    v32 = sub_1000906BC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v19 + 10, v19 + 18);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v29, (uint8_t *)v19, 0x12u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    a4 = v30;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v27 = a4 + 16;
  swift_beginAccess(v27, &v32, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v27);
  sub_100173234(Strong);

}

id sub_1000ADBA0(uint64_t a1)
{
  return sub_100094D38(a1, (uint64_t (*)(void))type metadata accessor for CameraCaptureServiceDelegate);
}

uint64_t type metadata accessor for CameraCaptureServiceDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd28CameraCaptureServiceDelegate, a2);
}

uint64_t sub_1000ADBCC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  _QWORD **v14;
  void *v15;
  int v16;
  os_unfair_lock_s *v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  _BYTE v31[24];

  v27 = a3;
  v29 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v8 = qword_100275638;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v11 = v10;
  v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v13 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = (_QWORD **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  swift_beginAccess(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking, v31, 0, 0);
  v15 = a1;
  v16 = sub_100158CD0(v9, v11, *v14) ^ 1;
  v17 = *(os_unfair_lock_s **)(v8 + v12);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  swift_bridgeObjectRelease(v11);
  swift_release(v17);
  v28 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v29);
  v26 = v15;
  v18 = v15;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(18, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 138412546;
    v30 = v18;
    v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v21 + 4, v21 + 12);
    *v22 = v26;

    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v30) = v16 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v21 + 14, v21 + 18);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "app %@ tracking enabled: %{BOOL}d", (uint8_t *)v21, 0x12u);
    v24 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v22, 1, v24);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {

    v19 = v18;
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v27 + 16))(v27, v16 & 1, 0);
}

void sub_1000ADEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;

  v31 = a3;
  v5 = type metadata accessor for Errors(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (id *)((char *)&v30 - v10);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v16), "currentConnection");
  if (v17)
  {
    v18 = v17;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    objc_msgSend(v18, "processIdentifier");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v21 = v20;
    v30 = v18;
    sub_100173018(v19, v21, v18);
    swift_bridgeObjectRelease(v21);

    (*(void (**)(uint64_t, uint64_t, _QWORD))(v31 + 16))(v31, 1, 0);
  }
  else
  {
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed fetching current NSXPCConnection, cannot construct client", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *v11 = 0xD000000000000017;
    v11[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v11, enum case for Errors.XPCNil(_:), v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 16))(v9, v11, v5);
    v26 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v5, v26, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28, v9, v5);
    v29 = (void *)_convertErrorToNSError(_:)(v27);
    (*(void (**)(uint64_t, _QWORD, void *))(v31 + 16))(v31, 0, v29);

    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v11, v5);
    swift_errorRelease(v27);
  }
}

void sub_1000AE1C0(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  Class v34;
  Class isa;
  uint64_t v36;

  v36 = a4;
  LODWORD(isa) = a2;
  v6 = type metadata accessor for Errors(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (Class *)((char *)&isa - v11);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&isa - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v17), "currentConnection");
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "processIdentifier");
    v21 = v20;
    if (qword_10026BC00 != -1)
      v20 = (id)swift_once(&qword_10026BC00, sub_100158DF8);
    v22 = CameraSessionInformation.appId.getter(v20);
    v24 = v23;
    sub_1001601E0(v21, v22, v23);
    swift_bridgeObjectRelease(v24);
    if ((isa & 1) != 0)
    {
      v25 = sub_10015FB38(a1);
      type metadata accessor for CameraSessionInformation(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, _QWORD))(v36 + 16))(v36, isa, 0);

      swift_bridgeObjectRelease(v25);
    }
    else
    {
      type metadata accessor for CameraSessionInformation(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, _QWORD))(v36 + 16))(v36, isa, 0);

    }
  }
  else
  {
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v13);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed fetching current NSXPCConnection, cannot construct client", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    *v12 = 0xD000000000000017;
    v12[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v12, enum case for Errors.XPCNil(_:), v6);
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v10, v12, v6);
    v30 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v31 = swift_allocError(v6, v30, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v32, v10, v6);
    v33 = (void *)_convertErrorToNSError(_:)(v31);
    type metadata accessor for CameraSessionInformation(0);
    v34 = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void *))(v36 + 16))(v36, v34, v33);

    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v12, v6);
    swift_errorRelease(v31);
  }
}

uint64_t sub_1000AE564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  void *v21;
  os_unfair_lock_s *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v5 = type metadata accessor for Errors(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v42 - v10);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v16), "currentConnection");

  if (v17)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v18 = qword_100275638;
    v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v20 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v20);
    os_unfair_lock_lock(v20 + 4);
    swift_release(v20);
    v21 = *(void **)(v18 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v22 = *(os_unfair_lock_s **)(v18 + v19);
    v23 = v21;
    swift_retain(v22);
    os_unfair_lock_unlock(v22 + 4);
    v24 = swift_release(v22);
    v25 = v43;
    if (v21)
    {
      v26 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v24);

      type metadata accessor for TrackingSummaryInternal(0);
      v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v29 = v28;
      v30 = static TrackingSummaryInternal.decode(data:)();
      sub_10009B2FC(v27, v29);
      if (v30)
      {
        v31 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v31)
        {
          v32 = v31;
          sub_10018ECCC(v30);

        }
        sub_1001605F8(v30);
        sub_1000AF0D4((uint64_t)v26, a1, (uint64_t)sub_1000B145C, (uint64_t)&unk_100239A80, (SEL *)&selRef_trackingSummaryDataWithInfo_data_);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v25 + 16))(v25, 1, 0);

        swift_release(v30);
      }
      else
      {

      }
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v25 + 16))(v25, 0, 0);
  }
  else
  {
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed fetching current NSXPCConnection, cannot construct client", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *v11 = 0xD000000000000017;
    v11[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v11, enum case for Errors.XPCNil(_:), v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 16))(v9, v11, v5);
    v37 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v38 = swift_allocError(v5, v37, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v39, v9, v5);
    v40 = (void *)_convertErrorToNSError(_:)(v38);
    (*(void (**)(uint64_t, _QWORD, void *))(v43 + 16))(v43, 0, v40);

    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v11, v5);
    return swift_errorRelease(v38);
  }
}

uint64_t sub_1000AE958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;

  v2 = type metadata accessor for Date(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DKCameraOrientation(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10009061C(&qword_10026C6A0);
  __chkstk_darwin(v6);
  v96 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_10026C6A8);
  __chkstk_darwin(v8);
  v97 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CameraOrientationInternal(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v99 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v98 = (char *)&v88 - v14;
  v15 = type metadata accessor for UUID(0);
  __chkstk_darwin(v15);
  v112 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DKObservationType(0);
  v110 = *(_QWORD *)(v17 - 8);
  v111 = v17;
  v18 = __chkstk_darwin(v17);
  v109 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v108 = (char *)&v88 - v20;
  v21 = type metadata accessor for TrackedSubjectTypeInternal(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v107 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v88 - v26;
  v28 = (uint64_t)_swiftEmptyArrayStorage;
  v115 = (unint64_t)_swiftEmptyArrayStorage;
  result = dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter(v25);
  if (result)
    v28 = result;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v74 = v28;
    else
      v74 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v30 = _CocoaArrayWrapper.endIndex.getter(v74);
    result = swift_bridgeObjectRelease(v28);
    if (v30)
      goto LABEL_5;
LABEL_24:
    v73 = swift_bridgeObjectRelease(v28);
    goto LABEL_25;
  }
  v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v30)
    goto LABEL_24;
LABEL_5:
  if (v30 < 1)
  {
    __break(1u);
    return result;
  }
  v89 = v11;
  v90 = v10;
  v91 = a1;
  v92 = v4;
  v31 = 0;
  v103 = v28 & 0xC000000000000001;
  v102 = enum case for DKObservationType.Object(_:);
  v101 = enum case for TrackedSubjectTypeInternal.person(_:);
  v100 = enum case for TrackedSubjectTypeInternal.object(_:);
  v105 = v28;
  v106 = v21;
  v113 = v22;
  v104 = v30;
  do
  {
    if (v103)
    {
      v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v28);
      v33 = v32;
    }
    else
    {
      v33 = *(_QWORD *)(v28 + 8 * v31 + 32);
      v32 = swift_retain(v33);
    }
    v34 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v32);
    dispatch thunk of DKProbabilityValue.variable.getter(&v114);
    v35 = swift_release(v34);
    v36 = v114;
    if (v114 < 1)
    {
      v38 = 0;
    }
    else
    {
      v37 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v35);
      dispatch thunk of DKProbabilityValue.variable.getter(&v114);
      v35 = swift_release(v37);
      v38 = v114;
    }
    v39 = v36 < 1;
    v40 = v108;
    dispatch thunk of DKPersonTrackerState.type.getter(v35);
    v41 = v109;
    v42 = v110;
    v43 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, v102, v111);
    v44 = static DKObservationType.== infix(_:_:)(v40, v41);
    v45 = *(void (**)(char *, uint64_t))(v42 + 8);
    v45(v41, v43);
    v45(v40, v43);
    v46 = v113;
    if ((v44 & 1) != 0)
      v47 = v100;
    else
      v47 = v101;
    v48 = v106;
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 104))(v27, v47, v106);
    v50 = v112;
    dispatch thunk of DKPersonTrackerState.uuid.getter(v49);
    v51 = *(uint64_t (**)(char *, char *, uint64_t))(v46 + 16);
    v52 = v27;
    v53 = v107;
    v54 = v51(v107, v52, v48);
    v55 = dispatch thunk of DKPersonTrackerState.rect.getter(v54);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v62 = dispatch thunk of DKPersonTrackerState.speakingConfidence.getter();
    v63 = dispatch thunk of DKProbabilityValue.probability.getter();
    v64 = swift_release(v62);
    v65 = v63;
    v66 = dispatch thunk of DKPersonTrackerState.lookingConfidence.getter(v64);
    v67 = dispatch thunk of DKProbabilityValue.probability.getter();
    swift_release(v66);
    v68 = type metadata accessor for TrackedSubjectInternal(0);
    swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
    v69 = TrackedSubjectInternal.init(identifier:type:rect:saliencyRank:speakingConfidence:lookingAtCameraConfidence:)(v50, v53, v38, v39, *(_QWORD *)&v65, 0, *(_QWORD *)&v67, 0, v55, v57, v59, v61);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
    v71 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v70 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v71 >= v70 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
    ++v31;
    v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v69);
    specialized Array._endMutation()(v72);
    swift_release(v33);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v52, v48);
    v28 = v105;
    v27 = v52;
  }
  while (v104 != v31);
  v73 = swift_bridgeObjectRelease(v105);
  v4 = v92;
  v10 = v90;
  v11 = v89;
LABEL_25:
  v75 = (uint64_t)v96;
  dispatch thunk of DKIntelligentTrackingState.camera.getter(v73);
  v76 = type metadata accessor for DKCamera(0);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v75, 1, v76);
  v78 = v98;
  if (v77)
  {
    sub_10009B2C0(v75, &qword_10026C6A0);
    v79 = 0;
  }
  else
  {
    v80 = v93;
    DKCamera.orientation.getter();
    v81 = sub_10009B2C0(v75, &qword_10026C6A0);
    v79 = DKCameraOrientation.rawValue.getter(v81);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v80, v95);
  }
  v82 = (uint64_t)v97;
  CameraOrientationInternal.init(rawValue:)(v79);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v82, 1, v10) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v78, enum case for CameraOrientationInternal.unknown(_:), v10);
    v83 = sub_10009B2C0(v82, &qword_10026C6A8);
  }
  else
  {
    v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32))(v78, v82, v10);
  }
  dispatch thunk of DKIntelligentTrackingState.time.getter(v83);
  v84 = v115;
  v85 = v99;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v99, v78, v10);
  v86 = type metadata accessor for TrackingSummaryInternal(0);
  swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
  v87 = TrackingSummaryInternal.init(time:subjects:orientation:)(v4, v84, v85);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
  return v87;
}

uint64_t sub_1000AF0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  SEL *v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD aBlock[5];
  uint64_t v76;
  _QWORD *v77;
  char v78[32];

  v70 = a5;
  v62 = a4;
  v61 = a3;
  v69 = a2;
  v60 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v71 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
LABEL_34:
    swift_once(&qword_10026BC00, sub_100158DF8);
  v8 = &unk_100275000;
  v9 = qword_100275638;
  v10 = sub_1001C1CD4((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v10);
  v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v12 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v12);
  os_unfair_lock_lock(v12 + 4);
  swift_release(v12);
  v13 = (uint64_t *)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v78, 0, 0);
  v14 = *v13;
  v15 = *(os_unfair_lock_s **)(v9 + v11);
  v16 = v14;
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  v17 = 0;
  v18 = v16 + 64;
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v16 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  v74 = (char *)&type metadata for Any + 8;
  v67 = v16;
  v68 = a1;
  v72 = v22;
  v73 = v16 + 64;
  while (v21)
  {
    v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v24 = v23 | (v17 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v16 + 56) + 16 * v24;
    if (*(_QWORD *)v28)
    {
      v29 = *(void **)(v28 + 8);
      v30 = *(id *)v28;
      v31 = v29;
      v32 = objc_msgSend(v30, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(aBlock);
      swift_unknownObjectRelease(v32);
      v33 = sub_10009061C(&qword_10026DF30);
      if ((swift_dynamicCast(&v77, aBlock, v74, v33, 6) & 1) != 0)
      {
        v35 = v77;
        sub_1000B1420(0, v34);
        v36 = v31;
        v37 = static NSObject.== infix(_:_:)(a1, v36);

        if ((v37 & 1) != 0)
        {
          v38 = v8[199];
          v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          v40 = *(os_unfair_lock_s **)(v38 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain(v40);
          os_unfair_lock_lock(v40 + 4);
          swift_release(v40);
          v41 = *(_QWORD *)(v38 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v41)
          {
            v42 = *(void **)(v41 + 24);
            if (v42)
            {
              aBlock[4] = v61;
              v76 = v41;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10012357C;
              aBlock[3] = v62;
              v43 = _Block_copy(aBlock);
              v65 = v35;
              v44 = v43;
              swift_retain_n(v41, 2);
              v64 = v42;
              static DispatchQoS.unspecified.getter(v64);
              v77 = _swiftEmptyArrayStorage;
              v63 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v45 = sub_10009061C((uint64_t *)&unk_10026BF60);
              v46 = sub_100090F20();
              v66 = v39;
              v47 = v58;
              v48 = v60;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v45, v46, v60, v63);
              v49 = v64;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v47, v44);
              v50 = v44;
              v35 = v65;
              _Block_release(v50);

              v51 = v47;
              v39 = v66;
              v52 = v48;
              v8 = (_QWORD *)&unk_100275000;
              (*(void (**)(char *, uint64_t))(v59 + 8))(v51, v52);
              (*(void (**)(char *, uint64_t))(v56 + 8))(v71, v57);
              v53 = v76;
              swift_release(v41);
              swift_release(v53);
            }
          }
          v54 = *(os_unfair_lock_s **)(v38 + v39);
          swift_retain(v54);
          os_unfair_lock_unlock(v54 + 4);
          swift_release(v54);
          a1 = v68;
          objc_msgSend(v35, *v70, v68, v69);
          swift_unknownObjectRelease(v35);

          v16 = v67;
        }
        else
        {
          swift_unknownObjectRelease(v35);

        }
        v22 = v72;
        v18 = v73;
      }
      else
      {

      }
    }
  }
  v25 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v25 >= v22)
    return swift_release(v16);
  v26 = *(_QWORD *)(v18 + 8 * v25);
  ++v17;
  if (v26)
    goto LABEL_21;
  v17 = v25 + 1;
  if (v25 + 1 >= v22)
    return swift_release(v16);
  v26 = *(_QWORD *)(v18 + 8 * v17);
  if (v26)
    goto LABEL_21;
  v17 = v25 + 2;
  if (v25 + 2 >= v22)
    return swift_release(v16);
  v26 = *(_QWORD *)(v18 + 8 * v17);
  if (v26)
  {
LABEL_21:
    v21 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v17 << 6);
    goto LABEL_22;
  }
  v27 = v25 + 3;
  if (v27 < v22)
  {
    v26 = *(_QWORD *)(v18 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        v17 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_33;
        if (v17 >= v22)
          return swift_release(v16);
        v26 = *(_QWORD *)(v18 + 8 * v17);
        ++v27;
        if (v26)
          goto LABEL_21;
      }
    }
    v17 = v27;
    goto LABEL_21;
  }
  return swift_release(v16);
}

uint64_t sub_1000AF66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  void *v21;
  os_unfair_lock_s *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  Class isa;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v51;
  uint64_t v52;

  v52 = a3;
  v5 = type metadata accessor for Errors(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v51 - v10);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v16), "currentConnection");

  if (v17)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v18 = qword_100275638;
    v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v20 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v20);
    os_unfair_lock_lock(v20 + 4);
    swift_release(v20);
    v21 = *(void **)(v18 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v22 = *(os_unfair_lock_s **)(v18 + v19);
    v23 = v21;
    swift_retain(v22);
    os_unfair_lock_unlock(v22 + 4);
    v24 = swift_release(v22);
    v25 = v52;
    if (v21)
    {
      v26 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v24);

      type metadata accessor for DKIntelligentTrackingState(0);
      v27 = static DKIntelligentTrackingState.decode(nsdata:)(a1);
      if (v27)
      {
        v28 = v27;
        v29 = qword_100275638;
        v30 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v30)
        {
          v31 = v30;
          sub_10018DDC4(v28);

          v29 = qword_100275638;
        }
        v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        v33 = *(os_unfair_lock_s **)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain(v33);
        os_unfair_lock_lock(v33 + 4);
        swift_release(v33);
        v34 = *(_QWORD *)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug);
        *(_QWORD *)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug) = v28;
        swift_retain(v28);
        swift_release(v34);
        v35 = *(os_unfair_lock_s **)(v29 + v32);
        swift_retain(v35);
        os_unfair_lock_unlock(v35 + 4);
        swift_release(v35);
        v36 = sub_1000AE958(v28);
        v37 = dispatch thunk of TrackingSummaryInternal.encode()();
        if (v38 >> 60 != 15)
        {
          v39 = v37;
          v40 = v38;
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000AF0D4((uint64_t)v26, (uint64_t)isa, (uint64_t)sub_1000B145C, (uint64_t)&unk_100239A80, (SEL *)&selRef_trackingSummaryDataWithInfo_data_);

          sub_10009E3A0(v39, v40);
        }
        sub_1000AF0D4((uint64_t)v26, a1, (uint64_t)sub_1000B145C, (uint64_t)&unk_100239AA8, (SEL *)&selRef_trackingSummaryDataDebugWithInfo_data_);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v25 + 16))(v25, 1, 0);

        swift_release(v28);
        swift_release(v36);
      }
      else
      {

      }
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v25 + 16))(v25, 0, 0);
  }
  else
  {
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed fetching current NSXPCConnection, cannot construct client", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *v11 = 0xD000000000000017;
    v11[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v11, enum case for Errors.XPCNil(_:), v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 16))(v9, v11, v5);
    v46 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v47 = swift_allocError(v5, v46, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v48, v9, v5);
    v49 = (void *)_convertErrorToNSError(_:)(v47);
    (*(void (**)(uint64_t, _QWORD, void *))(v52 + 16))(v52, 0, v49);

    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v11, v5);
    return swift_errorRelease(v47);
  }
}

void sub_1000AFB0C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), const char *a6, NSObject *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t *v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void (**v54)(char *, _QWORD, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_unfair_lock_s *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  const char *v116;
  NSObject *v117;
  uint64_t (*v118)(uint64_t, uint64_t);
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  void (**v125)(char *, _QWORD, uint64_t);
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;

  v116 = a6;
  v117 = a7;
  v118 = a5;
  v126 = a4;
  v120 = a2;
  v122 = a1;
  v123 = type metadata accessor for Errors(0);
  v125 = *(void (***)(char *, _QWORD, uint64_t))(v123 - 8);
  v8 = __chkstk_darwin(v123);
  v124 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v113 - v10;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v113 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v113 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v113 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v113 - v26;
  v29 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v28), "currentConnection");
  if (!v29)
  {
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v27, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed fetching current NSXPCConnection, cannot construct client", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    *(_QWORD *)v11 = 0xD000000000000017;
    *((_QWORD *)v11 + 1) = 0x80000001001FDAB0;
    v54 = v125;
    v55 = v123;
    v125[13](v11, enum case for Errors.XPCNil(_:), v123);
    v56 = v124;
    ((void (**)(char *, char *, uint64_t))v54)[2](v124, v11, v55);
    v57 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v58 = swift_allocError(v55, v57, 0, 0);
    ((void (**)(char *, char *, uint64_t))v54)[4](v59, v56, v55);
    v60 = (void *)_convertErrorToNSError(_:)(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v126 + 16))(v126, 0, v60);

    goto LABEL_21;
  }
  v30 = v29;
  v121 = v13;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v119 = v30;
  v31 = sub_10016D5D0(v30);
  v33 = v122;
  if (!v32)
  {
    v61 = v121;
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 16))(v25, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed fetching App ID from connection", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v25, v12);
    *(_QWORD *)v11 = 0xD000000000000026;
    *((_QWORD *)v11 + 1) = 0x80000001001FDAD0;
    v66 = (unsigned int *)&enum case for Errors.NotFound(_:);
    goto LABEL_19;
  }
  v34 = v32;
  if (!v122)
  {
    swift_bridgeObjectRelease(v32);
    v67 = v121;
    v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 16))(v22, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "No appID, can't lookup completion", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v22, v12);
    strcpy(v11, "missing appID");
    *((_WORD *)v11 + 7) = -4864;
    v66 = (unsigned int *)&enum case for Errors.InvalidParameter(_:);
LABEL_19:
    v54 = v125;
    v55 = v123;
    v125[13](v11, *v66, v123);
    v72 = v124;
    ((void (**)(char *, char *, uint64_t))v54)[2](v124, v11, v55);
    v73 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v58 = swift_allocError(v55, v73, 0, 0);
    ((void (**)(char *, char *, uint64_t))v54)[4](v74, v72, v55);
    v75 = (void *)_convertErrorToNSError(_:)(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v126 + 16))(v126, 0, v75);
LABEL_20:

LABEL_21:
    ((void (*)(char *, uint64_t))v54[1])(v11, v55);
    swift_errorRelease(v58);
    return;
  }
  v113 = v31;
  v114 = v11;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
  v37 = v36;
  v38 = v33;
  v39 = v118(v35, v37);
  v115 = v40;
  swift_bridgeObjectRelease(v37);
  v118 = (uint64_t (*)(uint64_t, uint64_t))v39;
  if (!v39)
  {
    v76 = a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger;
    v77 = v121;
    v78 = v16;
    v79 = v16;
    v80 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v79, v76, v12);
    v81 = (uint64_t (*)(uint64_t, uint64_t))v38;
    swift_bridgeObjectRetain(v34);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = swift_slowAlloc(22, -1);
      v86 = (_QWORD *)swift_slowAlloc(8, -1);
      v117 = swift_slowAlloc(32, -1);
      v128 = v117;
      *(_DWORD *)v85 = 136315394;
      v120 = v78;
      swift_bridgeObjectRetain(v34);
      v127 = sub_1000906BC(v113, v34, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v85 + 4, v85 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v85 + 12) = 2112;
      v127 = (uint64_t)v81;
      v87 = v81;
      v118 = v81;
      v88 = v80;
      v89 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v85 + 14, v85 + 22);
      *v86 = v33;

      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Client %s responded but no completion exists for appID %@", (uint8_t *)v85, 0x16u);
      v90 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v86, 1, v90);
      swift_slowDealloc(v86, -1, -1);
      v91 = v117;
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v85, -1, -1);

      v92 = v88;
      v81 = v118;
      (*(void (**)(id, uint64_t))(v121 + 8))(v120, v92);
    }
    else
    {

      swift_bridgeObjectRelease_n(v34, 2);
      (*(void (**)(void *, uint64_t))(v77 + 8))(v78, v80);
    }
    v11 = v114;
    *(_QWORD *)v114 = 0x6C706D6F63206F6ELL;
    *((_QWORD *)v11 + 1) = 0xED00006E6F697465;
    v54 = v125;
    v55 = v123;
    v125[13](v11, enum case for Errors.NotFound(_:), v123);
    v94 = v124;
    ((void (**)(char *, char *, uint64_t))v54)[2](v124, v11, v55);
    v95 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v58 = swift_allocError(v55, v95, 0, 0);
    ((void (**)(char *, char *, uint64_t))v54)[4](v96, v94, v55);
    v75 = (void *)_convertErrorToNSError(_:)(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v126 + 16))(v126, 0, v75);

    goto LABEL_20;
  }
  v125 = (void (**)(char *, _QWORD, uint64_t))v38;
  swift_bridgeObjectRelease(v34);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v126 + 16))(v126, 1, 0);
  v41 = v121;
  v42 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v19, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
  v43 = (uint64_t)v120;
  v44 = v120;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v47 = 138412290;
    v43 = (uint64_t)v120;
    if (v120)
    {
      v128 = v44;
      v49 = v44;
      v43 = (uint64_t)v120;
    }
    else
    {
      v128 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v47 + 4, v47 + 12);
    *v48 = v43;

    _os_log_impl((void *)&_mh_execute_header, v45, v46, v116, v47, 0xCu);
    v97 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v48, 1, v97);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
    v93 = v119;
    v41 = v121;
  }
  else
  {

    v45 = v44;
    v93 = v119;
  }
  v98 = v125;

  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  v99 = v43 == 0;
  v100 = v43;
  v101 = v115;
  v102 = (uint64_t)v118;
  v118(v99, v100);
  v103 = qword_100275638;
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
  v106 = v105;
  v107 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v108 = *(os_unfair_lock_s **)(v103 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v108);
  os_unfair_lock_lock(v108 + 4);
  swift_release(v108);
  swift_beginAccess((char *)v117->isa + v103, &v128, 33, 0);
  v109 = sub_1001B3F64(v104, v106);
  v111 = v110;
  swift_endAccess(&v128);
  if (v109)
    sub_1000B1410(v109, v111);
  v112 = *(os_unfair_lock_s **)(v103 + v107);
  swift_retain(v112);
  os_unfair_lock_unlock(v112 + 4);
  swift_bridgeObjectRelease(v106);
  swift_release(v112);
  sub_1000B1410(v102, v101);

}

void sub_1000B0660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  Class isa;
  _BYTE v9[24];

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v2 = qword_100275638;
  v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v4 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v9, 0, 0);
  v6 = *v5;
  v7 = *(os_unfair_lock_s **)(v2 + v3);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  os_unfair_lock_unlock(v7 + 4);
  swift_release(v7);
  type metadata accessor for DockCoreAccessory(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, isa, 0);
  swift_bridgeObjectRelease(v6);

}

void sub_1000B0770(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  os_unfair_lock_s *v8;
  id v9;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v4 = qword_100275638;
  v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v6 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v6);
  os_unfair_lock_lock(v6 + 4);
  swift_release(v6);
  v7 = *(void **)(v4 + *a2);
  v8 = *(os_unfair_lock_s **)(v4 + v5);
  v9 = v7;
  swift_retain(v8);
  os_unfair_lock_unlock(v8 + 4);
  swift_release(v8);
  (*(void (**)(uint64_t, id, _QWORD))(a1 + 16))(a1, v9, 0);

}

uint64_t sub_1000B0848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  char *v28;

  v4 = type metadata accessor for Errors(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v27 - v9);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v28 = v8;
    v19 = a2;
    v20 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "getAccessoryDiagnostics unsupported on entitled interface", v18, 2u);
    v21 = v20;
    a2 = v19;
    v8 = v28;
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *v10 = 0xD000000000000021;
  v10[1] = 0x80000001001FDA80;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v10, enum case for Errors.OperationNotSupported(_:), v4);
  (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 16))(v8, v10, v4);
  v22 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
  v23 = swift_allocError(v4, v22, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24, v8, v4);
  v25 = (void *)_convertErrorToNSError(_:)(v23);
  (*(void (**)(uint64_t, _QWORD, void *))(a2 + 16))(a2, 0, v25);

  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v10, v4);
  return swift_errorRelease(v23);
}

uint64_t sub_1000B0A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v2 = qword_100275638;
  v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v4 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
  v6 = *(os_unfair_lock_s **)(v2 + v3);
  swift_retain(v6);
  os_unfair_lock_unlock(v6 + 4);
  swift_release(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 16))(a1, v5, 0);
}

uint64_t sub_1000B0B54(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  NSString v10;
  id v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  NSString v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  _QWORD *v69;
  _QWORD v70[2];
  uint64_t aBlock;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  void (*v75)();
  uint64_t v76;
  __int128 v77;
  __int128 v78;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v60 - v7;
  v9 = objc_msgSend(a1, "processIdentifier");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(a1, "valueForEntitlement:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v77);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  sub_10009AEEC((uint64_t)&v77, (uint64_t)&aBlock);
  v12 = v8;
  if (v74)
  {
    v13 = swift_dynamicCast(v70, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v14 = v70[0];
    if (!v13)
      v14 = 0;
    v66 = v14;
    if (v13)
      v15 = v70[1];
    else
      v15 = 0;
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
    v66 = 0;
    v15 = 0;
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v65 = sub_10016D5D0(a1);
  v17 = v16;
  if (qword_10026BB48 != -1)
    swift_once(&qword_10026BB48, sub_1000AD248);
  v18 = sub_10008EA50(v2, (uint64_t)qword_10026C610);
  v19 = (uint64_t (*)(char *, uint64_t, uint64_t))v3[2];
  v67 = v18;
  v68 = v19;
  ((void (*)(char *))v19)(v12);
  swift_bridgeObjectRetain(v17);
  v20 = swift_bridgeObjectRetain_n(v15, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v69 = v3;
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(28, -1);
    v62 = v12;
    v25 = v24;
    v26 = swift_slowAlloc(64, -1);
    v63 = v2;
    v61 = v26;
    *(_QWORD *)&v77 = v26;
    *(_DWORD *)v25 = 67109634;
    LODWORD(aBlock) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v25 + 4, v25 + 8);
    *(_WORD *)(v25 + 8) = 2080;
    aBlock = v66;
    v72 = v15;
    swift_bridgeObjectRetain(v15);
    v27 = v6;
    v28 = a1;
    v29 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v30 = String.init<A>(describing:)(&aBlock, v29);
    v64 = v9;
    v32 = v31;
    aBlock = sub_1000906BC(v30, v31, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v72, v25 + 10, v25 + 18);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v25 + 18) = 2080;
    aBlock = v65;
    v72 = v17;
    swift_bridgeObjectRetain(v17);
    v33 = v29;
    a1 = v28;
    v6 = v27;
    v34 = String.init<A>(describing:)(&aBlock, v33);
    v36 = v35;
    aBlock = sub_1000906BC(v34, v35, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v72, v25 + 20, v25 + 28);
    swift_bridgeObjectRelease_n(v17, 2);
    v37 = v36;
    v9 = v64;
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v25, 0x1Cu);
    v38 = v61;
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    v2 = v63;
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v39 = (void (*)(char *, uint64_t))v69[1];
    v39(v62, v2);
  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    v39 = (void (*)(char *, uint64_t))v69[1];
    v39(v12, v2);
  }
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(a1, "valueForEntitlement:", v40);

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)(&v77);
    swift_unknownObjectRelease(v41);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  sub_10009AEEC((uint64_t)&v77, (uint64_t)&aBlock);
  if (v74)
  {
    if ((swift_dynamicCast(v70, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v70[0] & 1) != 0)
    {
      v43 = (void *)objc_opt_self(NSXPCInterface, v42);
      v69 = objc_msgSend(v43, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore31DockDaemonCameraCaptureProtocol_);
      v44 = swift_allocObject(&unk_1002399C8, 24, 7);
      swift_unknownObjectWeakInit(v44 + 16, a1);
      v45 = swift_allocObject(&unk_1002399F0, 48, 7);
      *(_DWORD *)(v45 + 16) = v9;
      v46 = v66;
      *(_QWORD *)(v45 + 24) = v66;
      *(_QWORD *)(v45 + 32) = v15;
      *(_QWORD *)(v45 + 40) = v44;
      v75 = sub_1000B13A4;
      v76 = v45;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_10012357C;
      v74 = &unk_100239A08;
      v47 = _Block_copy(&aBlock);
      v48 = v76;
      swift_bridgeObjectRetain(v15);
      swift_retain(v44);
      swift_release(v48);
      objc_msgSend(a1, "setInvalidationHandler:", v47);
      _Block_release(v47);
      v49 = swift_allocObject(&unk_100239A40, 48, 7);
      *(_DWORD *)(v49 + 16) = v9;
      *(_QWORD *)(v49 + 24) = v46;
      *(_QWORD *)(v49 + 32) = v15;
      *(_QWORD *)(v49 + 40) = v44;
      v75 = sub_1000B13E8;
      v76 = v49;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_10012357C;
      v74 = &unk_100239A58;
      v50 = _Block_copy(&aBlock);
      v51 = v76;
      swift_retain(v44);
      swift_release(v51);
      objc_msgSend(a1, "setInterruptionHandler:", v50);
      _Block_release(v50);
      v52 = v69;
      objc_msgSend(a1, "setExportedInterface:", v69);
      v53 = objc_msgSend(v43, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore31DockClientCameraCaptureProtocol_);
      objc_msgSend(a1, "setRemoteObjectInterface:", v53);
      v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for dockCameraCaptureHandler(0)), "init");
      objc_msgSend(a1, "setExportedObject:", v54);
      objc_msgSend(a1, "resume");
      swift_release(v44);

      return 1;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
  }
  swift_bridgeObjectRelease(v15);
  v56 = v68(v6, v67, v2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v59 = 67109120;
    LODWORD(aBlock) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v59 + 4, v59 + 8);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "process %d is not entitled for cameracapture. Add entitlements and try again", v59, 8u);
    swift_slowDealloc(v59, -1, -1);
  }

  v39(v6, v2);
  objc_msgSend(a1, "invalidate");
  return 0;
}

uint64_t sub_1000B137C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B13A4()
{
  uint64_t v0;

  sub_1000AD868(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1000B13CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B13DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000B13E8()
{
  uint64_t v0;

  sub_1000AD868(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1000B1410(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

unint64_t sub_1000B1420(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026C690;
  if (!qword_10026C690)
  {
    v3 = objc_opt_self(NSObject, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026C690);
  }
  return result;
}

void sub_1000B145C()
{
  uint64_t v0;

  sub_1000ED5CC(v0);
}

id sub_1000B147C()
{
  char *v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket];
  if (v1)
    objc_msgSend(v1, "close");
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateSession(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000B1638()
{
  return type metadata accessor for AccessoryFirmwareUpdateSession(0);
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C728;
  if (!qword_10026C728)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryFirmwareUpdateSession);
  return result;
}

void sub_1000B167C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[3];
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  char v32[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
  swift_beginAccess(v8, v32, 0, 0);
  sub_1000B9864(v8, (uint64_t)aBlock);
  if (v29)
  {
    sub_10009AFF4((uint64_t)aBlock, (uint64_t)v25);
    sub_1000B98AC((uint64_t)aBlock);
    v9 = v26;
    v10 = v27;
    sub_10009B038(v25, v26);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(0, v9, v10);
    sub_100090E88(v25);
  }
  else
  {
    sub_1000B98AC((uint64_t)aBlock);
  }
  v11 = *(void **)(*(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  v12 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v13 = swift_allocObject(&unk_100239E70, 32, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v1;
  v30 = sub_1000B9AA8;
  v31 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  v29 = &unk_100239E88;
  v14 = _Block_copy(aBlock);
  v15 = v11;
  v16 = v12;
  static DispatchQoS.unspecified.getter(v1);
  v25[0] = _swiftEmptyArrayStorage;
  v17 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v19 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(v25, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  swift_release(v31);
  v20 = sub_10009B608();
  v21 = swift_allocError(&type metadata for FirmwareUpdateErrors, v20, 0, 0);
  *(_QWORD *)v22 = 0xD000000000000033;
  *(_QWORD *)(v22 + 8) = 0x80000001001FE2B0;
  *(_BYTE *)(v22 + 16) = 6;
  sub_1000B203C(v21);
  swift_errorRelease(v21);

}

uint64_t sub_1000B1968(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend(a1, "accessoryUnreachable:", *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory));
  if ((result & 1) == 0)
  {
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "UARP accessoryUnreachable failed", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) = 0;
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
    *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 0;
  return result;
}

uint64_t sub_1000B1AB4(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;
  _QWORD *v23;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(id *)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile];
  sub_100116EEC(a1);

  v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v13 = swift_allocObject(&unk_100239DF8, 24, 7);
  *(_QWORD *)(v13 + 16) = v2;
  aBlock[4] = sub_1000B99E0;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239E10;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  static DispatchQoS.unspecified.getter(v2);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v18 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

uint64_t sub_1000B1CC8(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  v2 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1000B1EC4(0, 2, 0);
  if (result != 5)
  {
    a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = result;
    switch((char)result)
    {
      case 1:
        v10 = sub_10009B608();
        v11 = swift_allocError(&type metadata for FirmwareUpdateErrors, v10, 0, 0);
        v13 = v11;
        *(_QWORD *)v12 = 0xD00000000000002DLL;
        *(_QWORD *)(v12 + 8) = 0x80000001001FE280;
        v14 = 8;
        goto LABEL_7;
      case 2:
      case 4:
        v6 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
        v7 = (_QWORD *)swift_allocObject(&unk_100239E48, 40, 7);
        v7[2] = 0;
        v7[3] = 0;
        v7[4] = a1;
        v8 = a1;
        v9 = sub_10018AB1C((uint64_t)v4, (uint64_t)&unk_10026C810, (uint64_t)v7);
        result = swift_release(v9);
        break;
      case 3:
        v15 = sub_10009B608();
        v11 = swift_allocError(&type metadata for FirmwareUpdateErrors, v15, 0, 0);
        v13 = v11;
        *(_QWORD *)v12 = 0xD00000000000002CLL;
        *(_QWORD *)(v12 + 8) = 0x80000001001FE250;
        v14 = 9;
LABEL_7:
        *(_BYTE *)(v12 + 16) = v14;
        sub_1000B203C(v11);
        result = swift_errorRelease(v13);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1000B1E7C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026C744);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  return sub_1000B23CC();
}

uint64_t sub_1000B1EC4(char a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  BOOL v10;
  unsigned int v11;

  if ((a3 & 1) != 0)
    goto LABEL_13;
  if (a2 != 2)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) = a2 & 1;
LABEL_13:
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
      return 0;
    else
      return 5;
  }
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) & 1) == 0)
    goto LABEL_13;
  if (a1 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                   + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons);
    v9 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
    if (v9 == 4)
      v6 = 5;
    else
      v6 = 4;
    if (v9 == 3)
      v7 = 5;
    else
      v7 = 3;
    goto LABEL_22;
  }
  if (a1 == 1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                   + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
    v5 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
    if (v5 == 2)
      v6 = 5;
    else
      v6 = 2;
    if (v5 == 1)
      v7 = 5;
    else
      v7 = 1;
LABEL_22:
    if (v4)
      return v7;
    else
      return v6;
  }
  result = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
  switch(*(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
  {
    case 1:
    case 2:
      v10 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons) == 0;
      v11 = 1;
      goto LABEL_28;
    case 3:
    case 4:
      v10 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons) == 0;
      v11 = 3;
LABEL_28:
      if (v10)
        result = v11 + 1;
      else
        result = v11;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B203C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void *v5;
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock);
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket);
  if (v5)
    objc_msgSend(v5, "close");
  v6 = *(os_unfair_lock_s **)(v1 + v3);
  swift_retain(v6);
  os_unfair_lock_unlock(v6 + 4);
  result = swift_release(v6);
  v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
  if (a1
    && (*(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8) & 1) == 0)
  {
    swift_errorRetain(a1);
    sub_1000B316C(0, 0, a1, 0);
    result = swift_errorRelease(a1);
    v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
  }
  v9 = v1 + v8;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return result;
}

uint64_t sub_1000B211C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[3] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_10026C744);
  v1[7] = v4;
  *v4 = v1;
  v4[1] = sub_1000B218C;
  return sub_1000B23CC();
}

uint64_t sub_1000B218C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000B2200, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000B2200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 64);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering accessory failed with error %@", v6, 0xCu);
    v9 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 64);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B23CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[23] = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v1[24] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[25] = v3;
  v1[26] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v1[27] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[28] = v5;
  v1[29] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[31] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v8);
  v1[33] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000B248C, 0, 0);
}

uint64_t sub_1000B248C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  NSString v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0[23];
  v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v0[34] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v3 = *(os_unfair_lock_s **)(v1 + v2);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  swift_release(v3);
  v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket;
  v0[35] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket;
  v5 = *(void **)(v1 + v4);
  v0[36] = v5;
  v6 = *(os_unfair_lock_s **)(v1 + v2);
  swift_unknownObjectRetain(v5);
  swift_retain(v6);
  os_unfair_lock_unlock(v6 + 4);
  swift_release(v6);
  if (v5 && !objc_msgSend(v5, "isClosed"))
  {
    swift_unknownObjectRelease(v5);
    v28 = v0[32];
    v29 = v0[29];
    v30 = v0[26];
    swift_task_dealloc(v0[33]);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  v7 = v0[23];
  v8 = *(void **)(*(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory)
                + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  v0[37] = v8;
  if (!v8)
  {
    v32 = type metadata accessor for Errors(0);
    v33 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v32, v33, 0, 0);
    *v34 = 0xD00000000000001DLL;
    v34[1] = 0x80000001001FE200;
    v35 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for Errors.CommunicationFailure(_:), v32);
    swift_willThrow(v35);
    v36 = swift_unknownObjectRelease(v5);
    v37 = v0[32];
    v38 = v0[33];
    v39 = v0[29];
    v40 = v0[26];
    swift_willThrow(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  v9 = v0[33];
  v10 = v0[30];
  v11 = v0[31];
  v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  v0[38] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  v13 = v7 + v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v0[39] = v14;
  v14(v9, v13, v10);
  v15 = v8;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Opening HDS connection to accessory", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  v19 = v0 + 2;
  v20 = v0[33];
  v21 = v0[30];
  v22 = v0[31];

  v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v0[40] = v23;
  v23(v20, v21);
  v24 = String._bridgeToObjectiveC()();
  v0[41] = v24;
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = sub_1000B27D4;
  v25 = swift_continuation_init(v0 + 2, 1);
  v0[16] = _NSConcreteStackBlock;
  v26 = v0 + 16;
  v26[1] = 0x40000000;
  v26[2] = sub_1000B2BE8;
  v26[3] = &unk_100239D80;
  v26[4] = v25;
  objc_msgSend(v15, "openStreamSocketWithApplicationProtocol:completion:", v24, v26);
  return swift_continuation_await(v19);
}

uint64_t sub_1000B27D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 336) = v1;
  if (v1)
    v2 = sub_1000B2B54;
  else
    v2 = sub_1000B2834;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B2834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = v5 + *(_QWORD *)(v0 + 304);
  v7 = *(void **)(v0 + 168);

  objc_msgSend(v7, "setDelegate:", v5);
  v8 = *(os_unfair_lock_s **)(v5 + v1);
  swift_unknownObjectRetain(v7);
  swift_retain(v8);
  os_unfair_lock_lock(v8 + 4);
  swift_release(v8);
  v9 = *(_QWORD *)(v5 + v2);
  *(_QWORD *)(v5 + v2) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v9);
  v10 = *(os_unfair_lock_s **)(v5 + v1);
  swift_retain(v10);
  os_unfair_lock_unlock(v10 + 4);
  swift_unknownObjectRelease(v7);
  swift_release(v10);
  v11 = v37(v3, v6, v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Opened HDS connection to accessory", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 240);
  v35 = *(void **)(v0 + 296);
  v36 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 288);
  v34 = *(_QWORD *)(v0 + 200);
  v21 = *(char **)(v0 + 184);

  v15(v16, v18);
  v22 = *(void **)&v21[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v23 = swift_allocObject(&unk_100239DA8, 24, 7);
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v0 + 112) = sub_1000B99D8;
  *(_QWORD *)(v0 + 120) = v23;
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 88) = 1107296256;
  *(_QWORD *)(v0 + 96) = sub_10012357C;
  *(_QWORD *)(v0 + 104) = &unk_100239DC0;
  v24 = _Block_copy((const void *)(v0 + 80));
  v25 = v22;
  static DispatchQoS.unspecified.getter(v21);
  *(_QWORD *)(v0 + 176) = _swiftEmptyArrayStorage;
  v26 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v28 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 176, v27, v28, v20, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v19, v24);
  _Block_release(v24);
  swift_unknownObjectRelease(v7);
  swift_unknownObjectRelease(v33);

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v17, v38);
  swift_release(*(_QWORD *)(v0 + 120));
  v29 = *(_QWORD *)(v0 + 256);
  v30 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2B54()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(void **)(v0 + 296);
  swift_willThrow();
  swift_unknownObjectRelease(v2);

  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  swift_willThrow();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2BE8(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_10009061C(&qword_10026CF70);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    swift_unknownObjectRetain(a2);
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B2C78(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unsigned __int8 v23;
  char *v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  sub_1000B30C8();
  v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory;
  v13 = *(_QWORD *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory];
  v14 = objc_retain(*(id *)(*(_QWORD *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                          + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController));
  if ((objc_msgSend(v14, "accessoryReachable:", v13) & 1) != 0)
  {
    a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable] = 1;
    if (a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state])
      a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 0;
    v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
    v16 = *(_QWORD *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory]
        + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion;
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v16 + 8));
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v18 = 0;
    }
    v23 = objc_msgSend(v14, "updateProperty:value:forAccessory:", 4, v18, *(_QWORD *)&a1[v12]);

    v24 = &a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger];
    v25 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
    if ((v23 & 1) != 0)
    {
      v26 = v25(v6, v24, v2);
      v20 = Logger.logObject.getter(v26);
      v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v27, "Notified UARP accessory is reachable", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }
      v11 = v6;
    }
    else
    {
      v25(v9, v24, v2);
      v29 = a1;
      v20 = Logger.logObject.getter(v29);
      v30 = static os_log_type_t.error.getter();
      v31 = v30;
      if (os_log_type_enabled(v20, v30))
      {
        v32 = swift_slowAlloc(22, -1);
        v47 = v31;
        v33 = v32;
        v44 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v33 = 138412546;
        v46 = v15;
        v34 = *(void **)&a1[v12];
        v42 = v33 + 12;
        v43 = v33 + 4;
        v48 = v34;
        v45 = &v49;
        v35 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v43, v42);
        v36 = v44;
        *v44 = v34;

        *(_WORD *)(v33 + 12) = 2112;
        v43 = v33 + 14;
        v37 = *(void **)(*(_QWORD *)&a1[v46] + 24);
        v48 = v37;
        v38 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v45, v43, v33 + 22);
        v36[1] = v37;

        _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v47, "Failed to update UARP accessory firmware version property for accessory %@ for dock accessory %@", (uint8_t *)v33, 0x16u);
        v39 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v36, 2, v39);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {

        v20 = v29;
      }
      v11 = v9;
    }
  }
  else
  {
    v19 = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v3 + 16))(v11, &a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "UARP accessoryReachable failed", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

id sub_1000B30C8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = objc_msgSend(objc_allocWithZone((Class)HMFTimer), "initWithTimeInterval:options:", 1, *(double *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_maxSocketIdleDuration));
  v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer) = v1;

  v4 = *(void **)(v0 + v2);
  if (v4)
  {
    objc_msgSend(v4, "setDelegate:", v0);
    v4 = *(void **)(v0 + v2);
    if (v4)
    {
      objc_msgSend(v4, "setDelegateQueue:", *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue));
      v4 = *(void **)(v0 + v2);
    }
  }
  return objc_msgSend(v4, "resume");
}

void sub_1000B316C(unint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, int a4)
{
  char *v4;
  char *v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  char *v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint8_t *v50;
  void (*v51)(char *, uint64_t);
  unint64_t v52;
  unint64_t v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  _QWORD v85[3];
  char v86[8];
  void *v87;
  uint64_t v88;

  v5 = v4;
  v79 = a4;
  v78 = a3;
  v83 = a1;
  v84 = a2;
  updated = type metadata accessor for DKFirmwareUpdateMetric(0);
  v81 = *(_QWORD *)(updated - 8);
  v82 = updated;
  __chkstk_darwin(updated);
  v80 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v77 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v75 - v15;
  v17 = &v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger];
  v18 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
  v19 = v18((char *)&v75 - v15, &v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v11);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sending firmware update metrics...", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v16, v11);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v24 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  v25 = objc_retain(*(id *)(*(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory]
                          + 24));
  sub_10015DAB8(v25);
  v27 = v26;

  if (v27)
  {
    v29 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval;
    v30 = 0.0;
    v31 = 0.0;
    if (*(double *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval] > 0.0)
    {
      v32 = static Date.now.getter(v28);
      v33 = Date.timeIntervalSince1970.getter(v32);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v76);
      v31 = v33 - *(double *)&v5[v29];
    }
    if (!v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8])
      v30 = *(double *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent];
    if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) != 0)
    {
      if (v30 > -1.0)
      {
        if (v30 < 1.84467441e19)
        {
          v34 = *(double *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent];
          if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) != 0)
          {
            if (v34 > -1.0)
            {
              if (v34 < 1.84467441e19)
              {
                v35 = *(_QWORD *)&v5[v24];
                v36 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8);
                if (v36)
                {
                  v37 = *(void (**)(char *, uint64_t))(v35
                                                               + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
                  v38 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8);
                }
                else
                {
                  v37 = 0;
                  v38 = 0xE000000000000000;
                }
                v51 = v84;
                if (v84)
                  v52 = v83;
                else
                  v52 = 0;
                if (v84)
                  v53 = (unint64_t)v84;
                else
                  v53 = 0xE000000000000000;
                v54 = *(void **)(v35 + 32);
                v76 = v52;
                v77 = (char *)v29;
                v83 = v38;
                v84 = v37;
                v75 = v53;
                if (!v54)
                {
                  swift_bridgeObjectRetain(v36);
                  swift_bridgeObjectRetain(v51);
                  goto LABEL_32;
                }
                swift_bridgeObjectRetain(v36);
                v55 = objc_msgSend(v54, "primaryAccessory", swift_bridgeObjectRetain(v51).n128_f64[0]);
                if (v55)
                {
                  v56 = v55;
                  v57 = objc_msgSend(v55, "serialNumber");

                  if (v57)
                  {
                    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
                    v61 = v60;

LABEL_33:
                    v62 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v58);
                    v63 = DockCoreInfo.type.getter(v62);

                    v64 = DockCoreAccessoryType.description.getter(v63);
                    v66 = v65;
                    v67 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v64);
                    v68 = DockCoreInfo.name.getter(v67);
                    v70 = v69;

                    v71 = v78;
                    if (v78)
                    {
                      swift_getErrorValue(v78, v86, v85);
                      v71 = Error.localizedDescription.getter(v85[1], v85[2]);
                    }
                    else
                    {
                      v72 = 0xE000000000000000;
                    }
                    v73 = v82;
                    v74 = v80;
                    DKFirmwareUpdateMetric.init(duration:startPercent:endPercent:fromFirmwareVersion:toFirmwareVersion:hardwareVersion:make:hardwareModel:success:error:)((unint64_t)v30, (unint64_t)v34, v84, v83, v76, v75, v59, v61, v31, v64, v66, v68, v70, v79 & 1, v71, v72);
                    DKFirmwareUpdateMetric.send()();

                    (*(void (**)(char *, uint64_t))(v81 + 8))(v74, v73);
                    *(_QWORD *)&v77[(_QWORD)v5] = 0xBFF0000000000000;
                    return;
                  }
LABEL_32:
                  v59 = 0;
                  v61 = 0xE000000000000000;
                  goto LABEL_33;
                }
LABEL_45:
                __break(1u);
                return;
              }
LABEL_44:
              __break(1u);
              goto LABEL_45;
            }
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_41;
  }
  v39 = v77;
  v18(v77, v17, v11);
  v40 = v5;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(8, -1);
    v84 = v23;
    v45 = (_QWORD *)v44;
    *(_DWORD *)v43 = 138412290;
    v46 = *(void **)(*(_QWORD *)&v5[v24] + 24);
    v87 = v46;
    v47 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v43 + 4, v43 + 12);
    *v45 = v46;

    _os_log_impl((void *)&_mh_execute_header, v41, v42, "No DockAccessory found in database with info %@", v43, 0xCu);
    v48 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v45, 1, v48);
    v49 = v45;
    v23 = v84;
    swift_slowDealloc(v49, -1, -1);
    v50 = v43;
    v39 = v77;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {

    v41 = v40;
  }

  v23(v39, v11);
}

uint64_t sub_1000B3794(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[21];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_1001DEBE0;
    v4[7] = &unk_1001DEBF8;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_1001DEBF8;
    v4[12] = &unk_1001DEBF8;
    v4[13] = &unk_1001DEBF8;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_1001DEBE0;
    v4[14] = &unk_1001DEC10;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = &unk_1001DEC28;
    v4[17] = &unk_1001DEBE0;
    v4[18] = &unk_1001DEC40;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256, 21, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1000B3878()
{
  return sub_1000B8C84("Transaction taken");
}

uint64_t sub_1000B3894()
{
  return sub_1000B8C84("Transaction released");
}

uint64_t sub_1000B38B0(void *a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  NSObject *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  void **v36;
  id v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void **aBlock;
  _QWORD v59[4];
  _QWORD *v60;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_100239C28, 32, 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0xE000000000000000;
  v52 = v3;
  v53 = v15;
  v51 = v12;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v3[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v11);
  v16 = a2;
  v17 = a1;
  v18 = v16;
  v19 = (void **)v17;
  v50 = v14;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(32, -1);
    v23 = swift_slowAlloc(16, -1);
    v49 = v6;
    v24 = (_QWORD *)v23;
    *(_DWORD *)v22 = 138412802;
    v46 = v11;
    v47 = v9;
    aBlock = v19;
    v48 = v8;
    v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v22 + 4, v22 + 12);
    *v24 = v19;

    *(_WORD *)(v22 + 12) = 2112;
    aBlock = (void **)&v18->isa;
    v26 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v22 + 14, v22 + 22);
    v24[1] = v18;

    *(_WORD *)(v22 + 22) = 2048;
    v27 = (void **)-[NSObject updateAvailabilityStatus](v26, "updateAvailabilityStatus");

    aBlock = v27;
    v11 = v46;
    v8 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v22 + 24, v22 + 32);

    v9 = v47;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "assetAvailablityUpdate for %@ %@ status is %ld", (uint8_t *)v22, 0x20u);
    v28 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v24, 2, v28);
    v29 = v24;
    v6 = v49;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    v20 = v18;
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v11);
  v30 = v52;
  v31 = *(void **)&v52[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v32 = (_QWORD *)swift_allocObject(&unk_100239D40, 48, 7);
  v32[2] = v30;
  v32[3] = v18;
  v33 = v53;
  v32[4] = v53;
  v32[5] = v19;
  v59[3] = sub_1000B99CC;
  v60 = v32;
  aBlock = _NSConcreteStackBlock;
  v59[0] = 1107296256;
  v59[1] = sub_10012357C;
  v59[2] = &unk_100239D58;
  v34 = _Block_copy(&aBlock);
  v35 = v18;
  v36 = v19;
  v37 = v31;
  v38 = v30;
  v39 = swift_retain(v33);
  v40 = v54;
  static DispatchQoS.unspecified.getter(v39);
  v57 = _swiftEmptyArrayStorage;
  v41 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v43 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v42, v43, v6, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v8, v34);
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v9);
  v44 = v60;
  swift_release(v33);
  return swift_release(v44);
}

void sub_1000B3D2C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint8_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  int v77;
  char v78;
  void (*v79)(char *, uint64_t);
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v87;
  char *v88;
  Swift::String v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  id v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  Swift::String v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void (*v144)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t, uint64_t);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint8_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint8_t *v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  void (*v175)(uint64_t, char *, uint64_t);
  void (**v176)(_QWORD, _QWORD);
  char *v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  Class isa;
  uint64_t v187;
  uint8_t *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, char *, uint64_t);
  id v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199[24];
  char v200[24];
  char v201[24];
  _BYTE v202[24];
  _BYTE v203[24];
  uint64_t v204;
  _BYTE v205[16];
  uint64_t v206;
  uint64_t v207;
  char v208[8];
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char v212[8];

  v194 = a4;
  v192 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for Date(0);
  v193 = (id)*((_QWORD *)v192 - 1);
  __chkstk_darwin(v192);
  v8 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for Logger(0);
  v196 = *(_QWORD *)(v197 - 8);
  v9 = __chkstk_darwin(v197);
  v11 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v187 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v187 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v187 - v19;
  __chkstk_darwin(v18);
  v195 = (char *)&v187 - v21;
  v198 = a3 + 16;
  v22 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID) = a2;
  v23 = a2;

  v24 = *(void **)(*(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  v25 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile;
  v26 = *(void **)(*(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
  if (v26)
  {
    v209 = 0;
    v210 = 0xE000000000000000;
    v193 = v24;
    v27 = v26;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(v210);
    v209 = 0xD00000000000001BLL;
    v210 = 0x80000001001FE140;
    v28 = objc_msgSend(v27, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    v33 = v209;
    v34 = v210;
    v35 = v198;
    swift_beginAccess(v198, v212, 1, 0);
    v36 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v33;
    *(_QWORD *)(a3 + 24) = v34;
    swift_bridgeObjectRelease(v36);
    v37 = v196;
    v38 = v197;
    (*(void (**)(char *, uint64_t, uint64_t))(v196 + 16))(v195, a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v197);
    v39 = swift_retain(a3);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    v42 = os_log_type_enabled(v40, v41);
    v194 = (char *)v27;
    if (v42)
    {
      v43 = v35;
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v209 = v45;
      *(_DWORD *)v44 = 136315138;
      swift_beginAccess(v43, v202, 0, 0);
      v47 = *(_QWORD *)(a3 + 16);
      v46 = *(_QWORD *)(a3 + 24);
      swift_bridgeObjectRetain(v46);
      v204 = sub_1000906BC(v47, v46, &v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v44 + 4, v44 + 12);
      swift_release(a3);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      (*(void (**)(char *, uint64_t))(v196 + 8))(v195, v197);
    }
    else
    {

      swift_release(a3);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v195, v38);
    }
    v67 = a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v208, 0, 0);
    sub_1000B9864(v67, (uint64_t)&v209);
    if (v211)
    {
      sub_10009AFF4((uint64_t)&v209, (uint64_t)&v204);
      sub_1000B98AC((uint64_t)&v209);
      v68 = v206;
      v69 = v207;
      sub_10009B038(&v204, v206);
      swift_beginAccess(v198, v203, 0, 0);
      v70 = *(_QWORD *)(a3 + 16);
      v71 = *(_QWORD *)(a3 + 24);
      v72 = sub_10009B608();
      v73 = swift_allocError(&type metadata for FirmwareUpdateErrors, v72, 0, 0);
      *(_QWORD *)v74 = v70;
      *(_QWORD *)(v74 + 8) = v71;
      *(_BYTE *)(v74 + 16) = 6;
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 8);
      swift_bridgeObjectRetain_n(v71, 2);
      v75(v70, v71, 1, v73, v68, v69);

LABEL_12:
      swift_errorRelease(v73);
      swift_bridgeObjectRelease(v71);
      sub_100090E88(&v204);
      return;
    }

    goto LABEL_14;
  }
  v189 = v8;
  v190 = (uint64_t)v17;
  v48 = v196;
  v191 = a1;
  v195 = v24;
  v49 = objc_msgSend(v23, "updateAvailabilityStatus");
  v50 = v20;
  if (v49 == (id)1)
  {
LABEL_7:
    v193 = v23;
    v51 = v198;
    swift_beginAccess(v198, v212, 1, 0);
    v52 = a3;
    v53 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0xD00000000000002BLL;
    *(_QWORD *)(a3 + 24) = 0x80000001001FE190;
    swift_bridgeObjectRelease(v53);
    v54 = v191;
    v55 = (char *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger);
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    v57 = v197;
    v56(v50, v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v197);
    v58 = swift_retain(v52);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    v61 = os_log_type_enabled(v59, v60);
    v192 = (void (*)(uint64_t, char *, uint64_t))v56;
    v189 = v55;
    if (v61)
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v209 = v63;
      *(_DWORD *)v62 = 136315138;
      v188 = v62 + 4;
      swift_beginAccess(v51, v199, 0, 0);
      v65 = *(_QWORD *)(v52 + 16);
      v64 = *(_QWORD *)(v52 + 24);
      swift_bridgeObjectRetain(v64);
      v204 = sub_1000906BC(v65, v64, &v209);
      v54 = v191;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v188, v62 + 12);
      swift_release(v52);
      v66 = v64;
      v57 = v197;
      swift_bridgeObjectRelease(v66);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_release(v52);
    }
    v79 = *(void (**)(char *, uint64_t))(v48 + 8);
    v79(v50, v57);
    v80 = v193;
    v81 = v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v208, 0, 0);
    sub_1000B9864(v81, (uint64_t)&v209);
    if (v211)
    {
      sub_10009AFF4((uint64_t)&v209, (uint64_t)&v204);
      sub_1000B98AC((uint64_t)&v209);
      v82 = v206;
      v83 = v207;
      sub_10009B038(&v204, v206);
      swift_beginAccess(v198, v200, 0, 0);
      v84 = *(_QWORD *)(v52 + 16);
      v85 = *(_QWORD *)(v52 + 24);
      v86 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(v83 + 8);
      v87 = swift_bridgeObjectRetain(v85);
      v86(v84, v85, 0, 0, v82, v83, v87);
      v57 = v197;
      swift_bridgeObjectRelease(v85);
      sub_100090E88(&v204);
    }
    else
    {
      sub_1000B98AC((uint64_t)&v209);
    }
    v88 = v194;
    if ((objc_msgSend(v195, "downloadAvailableFirmwareUpdate:assetID:withUserIntent:", v194, v80, 0) & 1) != 0)
      goto LABEL_24;
    v196 = v81;
    v209 = 0;
    v210 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v89._countAndFlagsBits = 0xD000000000000035;
    v89._object = (void *)0x80000001001FE1C0;
    String.append(_:)(v89);
    v90 = objc_msgSend(v88, "description");
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    v93 = v92;

    v94._countAndFlagsBits = v91;
    v94._object = v93;
    String.append(_:)(v94);
    swift_bridgeObjectRelease(v93);
    v95._countAndFlagsBits = 0x4449746573736120;
    v95._object = (void *)0xE90000000000003ALL;
    String.append(_:)(v95);
    v96 = objc_msgSend(v80, "description");
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v99 = v98;

    v100._countAndFlagsBits = v97;
    v100._object = v99;
    String.append(_:)(v100);
    swift_bridgeObjectRelease(v99);
    v101 = v209;
    v102 = v210;
    v103 = v198;
    swift_beginAccess(v198, v203, 1, 0);
    v104 = *(_QWORD *)(v52 + 24);
    *(_QWORD *)(v52 + 16) = v101;
    *(_QWORD *)(v52 + 24) = v102;
    swift_bridgeObjectRelease(v104);
    v105 = v190;
    v192(v190, v189, v57);
    v106 = swift_retain(v52);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(12, -1);
      v110 = swift_slowAlloc(32, -1);
      v209 = v110;
      *(_DWORD *)v109 = 136315138;
      swift_beginAccess(v103, v201, 0, 0);
      v111 = (void (*)(uint64_t, uint64_t))v79;
      v112 = *(_QWORD *)(v52 + 16);
      v113 = *(_QWORD *)(v52 + 24);
      swift_bridgeObjectRetain(v113);
      v204 = sub_1000906BC(v112, v113, &v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v109 + 4, v109 + 12);
      swift_release(v52);
      swift_bridgeObjectRelease(v113);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "%s", v109, 0xCu);
      swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v109, -1, -1);

      v111(v190, v197);
    }
    else
    {

      swift_release(v52);
      v79((char *)v105, v57);
    }
    sub_1000B9864(v196, (uint64_t)&v209);
    if (v211)
    {
      sub_10009AFF4((uint64_t)&v209, (uint64_t)&v204);
      sub_1000B98AC((uint64_t)&v209);
      v121 = v206;
      v122 = v207;
      sub_10009B038(&v204, v206);
      swift_beginAccess(v198, v202, 0, 0);
      v123 = *(_QWORD *)(v52 + 16);
      v71 = *(_QWORD *)(v52 + 24);
      v124 = sub_10009B608();
      v73 = swift_allocError(&type metadata for FirmwareUpdateErrors, v124, 0, 0);
      *(_QWORD *)v125 = v123;
      *(_QWORD *)(v125 + 8) = v71;
      v126 = 3;
LABEL_42:
      *(_BYTE *)(v125 + 16) = v126;
      v144 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 8);
      swift_bridgeObjectRetain_n(v71, 2);
      v144(v123, v71, 1, v73, v121, v122);

      goto LABEL_12;
    }
    goto LABEL_43;
  }
  if (v49 == (id)3)
  {
    if ((*(_BYTE *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) & 1) != 0)
    {
      v76 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state;
      v77 = *(unsigned __int8 *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
      if (!*(_QWORD *)(*(_QWORD *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons))
      {
        if (v77 != 2)
        {
          v145 = v191;
          *(_BYTE *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 2;
          v146 = *(_QWORD *)(v145 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn);
          swift_retain(v146);
          sub_1000ECBEC();
          swift_release(v146);
          v147 = v198;
          swift_beginAccess(v198, v212, 1, 0);
          v148 = a3;
          v149 = *(_QWORD *)(a3 + 24);
          *(_QWORD *)(a3 + 16) = 0xD000000000000023;
          *(_QWORD *)(a3 + 24) = 0x80000001001FE160;
          swift_bridgeObjectRelease(v149);
          v150 = v48;
          v151 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
          v152 = v14;
          v153 = v197;
          v151(v14, v145 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v197);
          v154 = swift_retain(a3);
          v155 = Logger.logObject.getter(v154);
          v156 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v155, v156))
          {
            v157 = (uint8_t *)swift_slowAlloc(12, -1);
            v190 = swift_slowAlloc(32, -1);
            v209 = v190;
            v188 = v157;
            *(_DWORD *)v157 = 136315138;
            v158 = v157 + 4;
            swift_beginAccess(v147, v202, 0, 0);
            v160 = *(_QWORD *)(a3 + 16);
            v159 = *(_QWORD *)(a3 + 24);
            swift_bridgeObjectRetain(v159);
            v161 = v160;
            v148 = a3;
            v204 = sub_1000906BC(v161, v159, &v209);
            v162 = v157 + 12;
            v145 = v191;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v158, v162);
            swift_release(a3);
            swift_bridgeObjectRelease(v159);
            v163 = v188;
            _os_log_impl((void *)&_mh_execute_header, v155, v156, "%s", v188, 0xCu);
            v164 = v190;
            swift_arrayDestroy(v190, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v164, -1, -1);
            swift_slowDealloc(v163, -1, -1);

          }
          else
          {

            swift_release(a3);
          }
          (*(void (**)(char *, uint64_t))(v150 + 8))(v152, v153);
          v165 = v145 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
          swift_beginAccess(v165, v208, 0, 0);
          sub_1000B9864(v165, (uint64_t)&v209);
          if (v211)
          {
            sub_10009AFF4((uint64_t)&v209, (uint64_t)&v204);
            sub_1000B98AC((uint64_t)&v209);
            v166 = v206;
            v167 = v207;
            sub_10009B038(&v204, v206);
            swift_beginAccess(v198, v203, 0, 0);
            v168 = *(_QWORD *)(v148 + 16);
            v169 = *(_QWORD *)(v148 + 24);
            v170 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(v167 + 8);
            v171 = swift_bridgeObjectRetain(v169);
            v170(v168, v169, 0, 0, v166, v167, v171);
            swift_bridgeObjectRelease(v169);
            v172 = sub_100090E88(&v204);
          }
          else
          {
            v172 = sub_1000B98AC((uint64_t)&v209);
          }
          v173 = v191;
          v174 = v194;
          v175 = v192;
          v176 = (void (**)(_QWORD, _QWORD))v193;
          v177 = v189;
          v178 = v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
          *(_QWORD *)v178 = 0;
          *(_BYTE *)(v178 + 8) = 1;
          v179 = static Date.now.getter(v172);
          v180 = Date.timeIntervalSince1970.getter(v179);
          ((void (**)(char *, void (*)(uint64_t, char *, uint64_t)))v176)[1](v177, v175);
          *(double *)(v173 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval) = v180;
          v181 = sub_10009061C(&qword_10026C340);
          v182 = swift_allocObject(v181, 40, 7);
          *(_OWORD *)(v182 + 16) = xmmword_1001DE6A0;
          *(_QWORD *)(v182 + 32) = v174;
          v209 = v182;
          specialized Array._endMutation()(v182);
          v183 = v209;
          sub_1000B9938(0, v184);
          v185 = v174;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v183);
          objc_msgSend(v195, "stageFirmwareUpdateOnAccessoryList:withUserIntent:", isa, 1);

        }
        goto LABEL_24;
      }
      if (v77 == 1)
        goto LABEL_24;
      v78 = 1;
    }
    else
    {
      v76 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state;
      if (!*(_BYTE *)(v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
        goto LABEL_24;
      v78 = 0;
    }
    v114 = v191;
    *(_BYTE *)(v191 + v76) = v78;
    v209 = 0;
    v210 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(v210);
    v209 = 0xD00000000000001BLL;
    v210 = 0x80000001001FE140;
    v115 = *(void **)(*(_QWORD *)(v114 + v25)
                    + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
    v116 = v197;
    if (v115)
    {
      v117 = objc_msgSend(v115, "description");
      v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
      v120 = v119;

    }
    else
    {
      v120 = (void *)0xE700000000000000;
      v118 = 0x6E776F6E6B6E55;
    }
    v127 = a3;
    v128._countAndFlagsBits = v118;
    v128._object = v120;
    String.append(_:)(v128);
    swift_bridgeObjectRelease(v120);
    v129 = v209;
    v130 = v210;
    v131 = v198;
    swift_beginAccess(v198, v212, 1, 0);
    v132 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v129;
    *(_QWORD *)(a3 + 24) = v130;
    swift_bridgeObjectRelease(v132);
    v133 = v191;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v11, v191 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v116);
    v134 = swift_retain(a3);
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v135, v136))
    {
      v194 = v11;
      v137 = v48;
      v138 = (uint8_t *)swift_slowAlloc(12, -1);
      v139 = swift_slowAlloc(32, -1);
      v209 = v139;
      *(_DWORD *)v138 = 136315138;
      v193 = v138 + 4;
      swift_beginAccess(v131, v202, 0, 0);
      v140 = *(_QWORD *)(a3 + 16);
      v141 = *(_QWORD *)(a3 + 24);
      swift_bridgeObjectRetain(v141);
      v204 = sub_1000906BC(v140, v141, &v209);
      v133 = v191;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v193, v138 + 12);
      swift_release(a3);
      v127 = a3;
      swift_bridgeObjectRelease(v141);
      _os_log_impl((void *)&_mh_execute_header, v135, v136, "%s", v138, 0xCu);
      swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v138, -1, -1);

      (*(void (**)(char *, uint64_t))(v137 + 8))(v194, v197);
    }
    else
    {

      swift_release(a3);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v116);
    }
    v142 = v133 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess(v142, v208, 0, 0);
    sub_1000B9864(v142, (uint64_t)&v209);
    if (v211)
    {
      sub_10009AFF4((uint64_t)&v209, (uint64_t)&v204);
      sub_1000B98AC((uint64_t)&v209);
      v121 = v206;
      v122 = v207;
      sub_10009B038(&v204, v206);
      swift_beginAccess(v198, v203, 0, 0);
      v123 = *(_QWORD *)(v127 + 16);
      v71 = *(_QWORD *)(v127 + 24);
      v143 = sub_10009B608();
      v73 = swift_allocError(&type metadata for FirmwareUpdateErrors, v143, 0, 0);
      *(_QWORD *)v125 = v123;
      *(_QWORD *)(v125 + 8) = v71;
      v126 = 6;
      goto LABEL_42;
    }
LABEL_43:

LABEL_14:
    sub_1000B98AC((uint64_t)&v209);
    return;
  }
  if (v49 == (id)4)
    goto LABEL_7;
LABEL_24:

}

uint64_t sub_1000B5108(void *a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  void *v4;
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  _QWORD *v28;
  Swift::String v29;
  os_log_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  const void *v49;
  void *v50;
  Class isa;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  os_log_t v57;
  int v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  id aBlock[5];
  uint64_t v73;

  v5 = v3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  v69 = v10;
  __chkstk_darwin(v9);
  v67 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v12 - 8);
  v66 = v12;
  __chkstk_darwin(v12);
  v64 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, &v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v14);
  v18 = a1;
  sub_10009B27C(a2, a3);
  v19 = v18;
  v20 = sub_10009B27C(a2, a3);
  v70 = v17;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(22, -1);
    v63 = v4;
    v25 = v24;
    v56 = (_QWORD *)swift_slowAlloc(8, -1);
    v60 = (void *)swift_slowAlloc(32, -1);
    v71 = v19;
    aBlock[0] = v60;
    *(_DWORD *)v25 = 138412546;
    v58 = v23;
    v59 = v5;
    v57 = v21;
    v62 = v14;
    v26 = v19;
    v61 = v15;
    v27 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, aBlock, v25 + 4, v25 + 12);
    v28 = v56;
    *v56 = v19;

    *(_WORD *)(v25 + 12) = 2080;
    v29 = Data.base64EncodedString(options:)(0);
    v71 = (_QWORD *)sub_1000906BC(v29._countAndFlagsBits, (unint64_t)v29._object, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, aBlock, v25 + 14, v25 + 22);
    v5 = v59;
    swift_bridgeObjectRelease(v29._object);
    sub_10009B2FC(a2, a3);
    sub_10009B2FC(a2, a3);
    v30 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "sendMessage: %@ msg is %s", (uint8_t *)v25, 0x16u);
    v31 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v28, 1, v31);
    swift_slowDealloc(v28, -1, -1);
    v32 = v60;
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(void *, uint64_t))(v61 + 8))(v70, v62);
  }
  else
  {

    sub_10009B2FC(a2, a3);
    sub_10009B2FC(a2, a3);

    (*(void (**)(void *, uint64_t))(v15 + 8))(v70, v14);
  }
  v33 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket];
  if (!v33)
    goto LABEL_7;
  if ((objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket]), "isClosed") & 1) != 0)
  {
    swift_unknownObjectRelease(v33);
LABEL_7:
    v34 = type metadata accessor for Errors(0);
    v35 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v34, v35, 0, 0);
    *v36 = 0xD000000000000027;
    v36[1] = 0x80000001001FE110;
    v37 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, enum case for Errors.CommunicationFailure(_:), v34);
    v38 = swift_willThrow(v37);
    return swift_willThrow(v38);
  }
  v40 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v41 = swift_allocObject(&unk_100239CF0, 24, 7);
  *(_QWORD *)(v41 + 16) = v5;
  aBlock[4] = sub_1000B9974;
  v73 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239D08;
  v70 = _Block_copy(aBlock);
  v63 = v40;
  v42 = v5;
  v43 = v64;
  static DispatchQoS.unspecified.getter(v42);
  v71 = _swiftEmptyArrayStorage;
  v44 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v45 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v46 = sub_100090F20();
  v48 = v67;
  v47 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v45, v46, v68, v44);
  v49 = v70;
  v50 = v63;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v48, v70);
  _Block_release(v49);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v48, v47);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v43, v66);
  swift_release(v73);
  isa = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  LOBYTE(v50) = objc_msgSend(v33, "writeData:error:", isa, aBlock);

  v52 = aBlock[0];
  if ((v50 & 1) == 0)
  {
    v54 = aBlock[0];
    _convertNSErrorToError(_:)(v52);

    swift_willThrow(v55);
    v38 = swift_unknownObjectRelease(v33);
    return swift_willThrow(v38);
  }
  v53 = aBlock[0];
  return swift_unknownObjectRelease(v33);
}

uint64_t sub_1000B5850(void *a1, void *a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  void **aBlock;
  _QWORD v57[4];
  _QWORD *v58;

  v50 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_100239C28, 32, 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0xE000000000000000;
  v51 = v15;
  v48 = v12;
  v49 = v3;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v3[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v11);
  v16 = a1;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v45 = v9;
    v19 = swift_slowAlloc(12, -1);
    v46 = v7;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(8, -1);
    v47 = v6;
    v43 = (_QWORD *)v21;
    v44 = a3;
    *(_DWORD *)v20 = 138412290;
    aBlock = (void **)&v16->isa;
    v22 = v16;
    a3 = v44;
    v9 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v57, v20 + 4, v20 + 12);
    v23 = v43;
    *v43 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "firmwareStagingProgress: %@", v20, 0xCu);
    v24 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v23, 1, v24);
    v6 = v47;
    swift_slowDealloc(v23, -1, -1);
    v25 = v20;
    v7 = v46;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {

    v17 = v16;
  }

  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v11);
  v26 = v49;
  v27 = *(void **)&v49[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v28 = (_QWORD *)swift_allocObject(&unk_100239CA0, 56, 7);
  v28[2] = a3;
  v28[3] = v26;
  v29 = v50;
  v30 = v51;
  v28[4] = v16;
  v28[5] = v29;
  v28[6] = v30;
  v57[3] = sub_1000B9928;
  v58 = v28;
  aBlock = _NSConcreteStackBlock;
  v57[0] = 1107296256;
  v57[1] = sub_10012357C;
  v57[2] = &unk_100239CB8;
  v31 = _Block_copy(&aBlock);
  v32 = v16;
  v33 = v27;
  v34 = v26;
  v35 = v29;
  v36 = swift_retain(v30);
  v37 = v53;
  static DispatchQoS.unspecified.getter(v36);
  v55 = _swiftEmptyArrayStorage;
  v38 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v39 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v40 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v39, v40, v6, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v9, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v52);
  v41 = v58;
  swift_release(v30);
  return swift_release(v41);
}

void sub_1000B5C38(void (*a1)(uint64_t, _BYTE *, uint64_t), uint64_t a2, void *a3, void *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _QWORD *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *object;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  id v45;
  id v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  NSObject **v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  void (*v56)(_BYTE *);
  id v57;
  id v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_BYTE *, uint64_t);
  void *v93;
  id v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  id v152;
  Class isa;
  _BYTE v154[4];
  int v155;
  id v156;
  _BYTE *v157;
  _BYTE *v158;
  id v159;
  _BYTE *v160;
  uint64_t v161;
  _QWORD *v162;
  void (*v163)(uint64_t, _BYTE *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[24];
  uint64_t v167;
  _BYTE v168[16];
  uint64_t v169;
  uint64_t v170;
  _BYTE v171[24];
  unint64_t v172;
  _QWORD v173[2];
  uint64_t v174;
  _BYTE v175[24];
  _BYTE v176[20];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v154[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  v20 = &v154[-v17];
  v21 = a5 + 2;
  v163 = a1;
  v162 = a5 + 2;
  if (a1)
  {
    v172 = 0;
    v173[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(v173[0]);
    v172 = 0xD000000000000019;
    v173[0] = 0x80000001001FE090;
    v22 = objc_msgSend(a3, "description");
    v160 = v14;
    v159 = a3;
    v23 = a4;
    v24 = v11;
    v25 = v22;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v164 = v10;
    v27 = v26;
    v29 = v28;

    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v29);
    v31._countAndFlagsBits = 0x207465737361202CLL;
    v31._object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    v32 = objc_msgSend(v23, "description");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36._countAndFlagsBits = v33;
    v37 = v164;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    v38._countAndFlagsBits = 0x20727265202CLL;
    v38._object = (void *)0xE600000000000000;
    String.append(_:)(v38);
    v167 = (uint64_t)v163;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v39._object;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(object);
    v41 = v172;
    v42 = v173[0];
    swift_beginAccess(a5 + 2, v176, 1, 0);
    v43 = a5[3];
    a5[2] = v41;
    a5[3] = v42;
    swift_bridgeObjectRelease(v43);
    v165 = a2;
    v161 = v24;
    v44 = v160;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16))(v160, a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v37);
    v45 = v159;
    v46 = v23;
    v47 = v45;
    v48 = v46;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(32, -1);
      v52 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v51 = 138412802;
      v172 = (unint64_t)v47;
      v159 = a5;
      v53 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173, v51 + 4, v51 + 12);
      *v52 = v47;

      *(_WORD *)(v51 + 12) = 2112;
      v172 = (unint64_t)v48;
      v54 = v48;
      v37 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173, v51 + 14, v51 + 22);
      v52[1] = v48;

      *(_WORD *)(v51 + 22) = 2048;
      v172 = (unint64_t)v163;
      a5 = v159;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173, v51 + 24, v51 + 32);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Firmware staging failed: %@, asset %@, err %lu", (uint8_t *)v51, 0x20u);
      v55 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v52, 2, v55);
      v44 = v160;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {

      v49 = v47;
    }
    v73 = v162;
    v74 = v161;

    (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v44, v37);
    swift_beginAccess(v73, v175, 0, 0);
    v76 = a5[2];
    v75 = a5[3];
    v77 = v165 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess(v165 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v171, 0, 0);
    sub_1000B9864(v77, (uint64_t)&v172);
    if (v174)
    {
      sub_10009AFF4((uint64_t)&v172, (uint64_t)&v167);
      swift_bridgeObjectRetain(v75);
      sub_1000B98AC((uint64_t)&v172);
      v78 = v169;
      v79 = v170;
      sub_10009B038(&v167, v169);
      swift_beginAccess(v73, v166, 0, 0);
      v80 = a5[2];
      v81 = a5[3];
      v82 = sub_10009B608();
      v83 = swift_allocError(&type metadata for FirmwareUpdateErrors, v82, 0, 0);
      *(_QWORD *)v84 = v76;
      *(_QWORD *)(v84 + 8) = v75;
      *(_BYTE *)(v84 + 16) = 4;
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v79 + 8);
      swift_bridgeObjectRetain(v75);
      v86 = swift_bridgeObjectRetain(v81);
      v85(v80, v81, 1, v83, v78, v79, v86);
      swift_errorRelease(v83);
      swift_bridgeObjectRelease(v81);
      sub_100090E88(&v167);
    }
    else
    {
      swift_bridgeObjectRetain(v75);
      sub_1000B98AC((uint64_t)&v172);
    }
    v87 = sub_10009B608();
    v88 = swift_allocError(&type metadata for FirmwareUpdateErrors, v87, 0, 0);
    *(_QWORD *)v89 = v76;
    *(_QWORD *)(v89 + 8) = v75;
    *(_BYTE *)(v89 + 16) = 4;
    swift_bridgeObjectRetain(v75);
    sub_1000B203C(v88);
    swift_errorRelease(v88);
    v90 = swift_allocError(&type metadata for FirmwareUpdateErrors, v87, 0, 0);
    *(_QWORD *)v91 = v76;
    *(_QWORD *)(v91 + 8) = v75;
    *(_BYTE *)(v91 + 16) = 4;
    sub_1000B316C(0, 0, v90, 0);
    swift_errorRelease(v90);
  }
  else
  {
    v157 = v19;
    v158 = v18;
    v159 = a5;
    v56 = *(void (**)(_BYTE *))(v11 + 16);
    v160 = (_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger);
    v56(&v154[-v17]);
    v57 = a3;
    v58 = a4;
    v59 = v57;
    v60 = v58;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter();
    v63 = v62;
    v64 = os_log_type_enabled(v61, v62);
    v156 = v59;
    v163 = (void (*)(uint64_t, _BYTE *, uint64_t))v56;
    if (v64)
    {
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(16, -1);
      v155 = v63;
      v67 = (_QWORD *)v66;
      *(_DWORD *)v65 = 138412546;
      v161 = v11;
      v165 = a2;
      v172 = (unint64_t)v59;
      v68 = v59;
      v164 = v10;
      v69 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173, v65 + 4, v65 + 12);
      *v67 = v59;

      *(_WORD *)(v65 + 12) = 2112;
      v172 = (unint64_t)v60;
      v70 = v60;
      v11 = v161;
      v10 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173, v65 + 14, v65 + 22);
      v67[1] = v60;

      a2 = v165;
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v155, "Firmware staging complete: %@, asset %@", (uint8_t *)v65, 0x16u);
      v71 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v67, 2, v71);
      swift_slowDealloc(v67, -1, -1);
      v72 = v65;
      v21 = v162;
      swift_slowDealloc(v72, -1, -1);

    }
    else
    {

    }
    v92 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v92(v20, v10);
    v93 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID);
    *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID) = v60;
    v94 = v60;

    if ((*(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) & 1) != 0)
    {
      v95 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
      if (*(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                     + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons))
      {
        if (v95 != 3)
        {
          *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 3;
          swift_beginAccess(v21, v176, 1, 0);
          v96 = v10;
          v97 = v159;
          v98 = *((_QWORD *)v159 + 3);
          *((_QWORD *)v159 + 2) = 0xD00000000000001CLL;
          v97[3] = 0x80000001001FE0B0;
          swift_bridgeObjectRelease(v98);
          v99 = v158;
          v163((uint64_t)v158, v160, v96);
          v100 = swift_retain(v97);
          v101 = Logger.logObject.getter(v100);
          v102 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v101, v102))
          {
            v103 = (uint8_t *)swift_slowAlloc(12, -1);
            v104 = swift_slowAlloc(32, -1);
            v105 = v21;
            v106 = v104;
            v172 = v104;
            v164 = v96;
            *(_DWORD *)v103 = 136315138;
            v163 = (void (*)(uint64_t, _BYTE *, uint64_t))(v103 + 4);
            swift_beginAccess(v105, v166, 0, 0);
            v165 = a2;
            v107 = v97[2];
            v108 = v97[3];
            swift_bridgeObjectRetain(v108);
            v167 = sub_1000906BC(v107, v108, (uint64_t *)&v172);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v163, v103 + 12);
            swift_release(v97);
            v109 = v108;
            a2 = v165;
            swift_bridgeObjectRelease(v109);
            _os_log_impl((void *)&_mh_execute_header, v101, v102, "%s", v103, 0xCu);
            swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v106, -1, -1);
            swift_slowDealloc(v103, -1, -1);

            v110 = v99;
            v111 = v164;
          }
          else
          {

            swift_release(v97);
            v110 = v99;
            v111 = v96;
          }
          v92(v110, v111);
          v128 = a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
          swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v175, 0, 0);
          sub_1000B9864(v128, (uint64_t)&v172);
          if (v174)
          {
            sub_10009AFF4((uint64_t)&v172, (uint64_t)&v167);
            sub_1000B98AC((uint64_t)&v172);
            v129 = v169;
            v130 = v170;
            sub_10009B038(&v167, v169);
            swift_beginAccess(v162, v171, 0, 0);
            v131 = *((_QWORD *)v159 + 2);
            v132 = *((_QWORD *)v159 + 3);
            v133 = sub_10009B608();
            v134 = swift_allocError(&type metadata for FirmwareUpdateErrors, v133, 0, 0);
            *(_QWORD *)v135 = v131;
            *(_QWORD *)(v135 + 8) = v132;
            *(_BYTE *)(v135 + 16) = 6;
            v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 8);
            swift_bridgeObjectRetain_n(v132, 2);
            v136(v131, v132, 1, v134, v129, v130);
            swift_errorRelease(v134);
            swift_bridgeObjectRelease(v132);
            sub_100090E88(&v167);
          }
          else
          {
            sub_1000B98AC((uint64_t)&v172);
          }
          v137 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn);
          swift_retain(v137);
          sub_1000ED080();
          swift_release(v137);
        }
      }
      else if (v95 != 4)
      {
        *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 4;
        swift_beginAccess(v21, v176, 1, 0);
        v112 = v10;
        v113 = v159;
        v114 = *((_QWORD *)v159 + 3);
        *((_QWORD *)v159 + 2) = 0xD00000000000001CLL;
        v113[3] = 0x80000001001FE0D0;
        swift_bridgeObjectRelease(v114);
        v115 = v157;
        v163((uint64_t)v157, v160, v112);
        v116 = swift_retain(v113);
        v117 = Logger.logObject.getter(v116);
        v118 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v117, v118))
        {
          v119 = (uint8_t *)swift_slowAlloc(12, -1);
          v120 = swift_slowAlloc(32, -1);
          v121 = v21;
          v122 = v120;
          v172 = v120;
          v164 = v112;
          *(_DWORD *)v119 = 136315138;
          v163 = (void (*)(uint64_t, _BYTE *, uint64_t))(v119 + 4);
          swift_beginAccess(v121, v166, 0, 0);
          v165 = a2;
          v123 = v113[2];
          v124 = v113[3];
          swift_bridgeObjectRetain(v124);
          v167 = sub_1000906BC(v123, v124, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v163, v119 + 12);
          swift_release(v113);
          v125 = v124;
          a2 = v165;
          swift_bridgeObjectRelease(v125);
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "%s", v119, 0xCu);
          swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v119, -1, -1);

          v126 = v115;
          v127 = v164;
        }
        else
        {

          swift_release(v113);
          v126 = v115;
          v127 = v112;
        }
        v92(v126, v127);
        v138 = v156;
        v139 = a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
        swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v175, 0, 0);
        sub_1000B9864(v139, (uint64_t)&v172);
        if (v174)
        {
          sub_10009AFF4((uint64_t)&v172, (uint64_t)&v167);
          sub_1000B98AC((uint64_t)&v172);
          v140 = v169;
          v141 = v170;
          sub_10009B038(&v167, v169);
          swift_beginAccess(v162, v171, 0, 0);
          v142 = *((_QWORD *)v159 + 2);
          v143 = *((_QWORD *)v159 + 3);
          v144 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(v141 + 8);
          v145 = swift_bridgeObjectRetain(v143);
          v144(v142, v143, 0, 0, v140, v141, v145);
          swift_bridgeObjectRelease(v143);
          sub_100090E88(&v167);
        }
        else
        {
          sub_1000B98AC((uint64_t)&v172);
        }
        v146 = *(void **)(*(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager)
                        + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
        v147 = sub_10009061C(&qword_10026C340);
        v148 = swift_allocObject(v147, 40, 7);
        *(_OWORD *)(v148 + 16) = xmmword_1001DE6A0;
        *(_QWORD *)(v148 + 32) = v138;
        v172 = v148;
        specialized Array._endMutation()(v148);
        v149 = v172;
        sub_1000B9938(0, v150);
        v151 = v138;
        v152 = v146;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v149);
        objc_msgSend(v152, "applyStagedFirmwareOnAccessoryList:withUserIntent:", isa, 1);

      }
    }
    else if (*(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
    {
      *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 0;
    }
  }
}

uint64_t sub_1000B6BA4(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  id v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  void **aBlock;
  _QWORD v53[4];
  _QWORD *v54;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v49 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_100239C28, 32, 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0xE000000000000000;
  v46 = v14;
  v47 = v2;
  v45 = v11;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v10);
  v15 = a1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v42 = v8;
    v18 = swift_slowAlloc(12, -1);
    v43 = v6;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(8, -1);
    v44 = v5;
    v40 = (_QWORD *)v20;
    v41 = a2;
    *(_DWORD *)v19 = 138412290;
    aBlock = (void **)&v15->isa;
    v21 = v10;
    v22 = v15;
    a2 = v41;
    v8 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v53, v19 + 4, v19 + 12);
    v23 = v40;
    *v40 = v15;

    v10 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "firmwareStagingProgress: %@)", v19, 0xCu);
    v24 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v23, 1, v24);
    v5 = v44;
    swift_slowDealloc(v23, -1, -1);
    v6 = v43;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {

    v16 = v15;
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v10);
  v25 = v47;
  v26 = *(_QWORD *)&v47[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn];
  swift_retain(v26);
  sub_1000ED080();
  swift_release(v26);
  v27 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v28 = (_QWORD *)swift_allocObject(&unk_100239C50, 48, 7);
  v29 = v46;
  v28[2] = a2;
  v28[3] = v29;
  v28[4] = v15;
  v28[5] = v25;
  v53[3] = sub_1000B9858;
  v54 = v28;
  aBlock = _NSConcreteStackBlock;
  v53[0] = 1107296256;
  v53[1] = sub_10012357C;
  v53[2] = &unk_100239C68;
  v30 = _Block_copy(&aBlock);
  v31 = v15;
  v32 = v27;
  swift_retain(v29);
  v33 = v25;
  v34 = v49;
  static DispatchQoS.unspecified.getter(v33);
  v51 = _swiftEmptyArrayStorage;
  v35 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v37 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v36, v37, v5, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v8, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v48);
  v38 = v54;
  swift_release(v29);
  return swift_release(v38);
}

uint64_t sub_1000B6F9C(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject **v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  NSObject **v47;
  void *v48;
  void *v49;
  Swift::String v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  NSObject **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  void (*v86)(NSObject *, NSObject *, uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v87;
  uint64_t v88;
  id v89;
  char *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  id v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  id v129;
  void *v130;
  unint64_t v131;
  void (*v132)(char *, uint64_t);
  void (*v133)(char *, uint64_t);
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v138;
  NSObject **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(char *, uint64_t, uint64_t);
  char *v143;
  NSObject **v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char v149[24];
  _QWORD v150[3];
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[24];
  unint64_t v154;
  _QWORD v155[2];
  uint64_t v156;
  _BYTE v157[24];
  _BYTE v158[24];

  v148 = a4;
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  v18 = (char *)&v138 - v17;
  v19 = (uint64_t)(a2 + 2);
  if (a1)
  {
    v154 = 0;
    v155[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v155[0]);
    v154 = 0xD00000000000001ELL;
    v155[0] = 0x80000001001FE040;
    v147 = a1;
    v150[0] = a1;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 32;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = objc_msgSend(a3, "description");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = a3;
    v27 = v26;

    v28._countAndFlagsBits = v24;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29 = v154;
    v30 = v155[0];
    v31 = a2 + 2;
    swift_beginAccess(a2 + 2, v158, 1, 0);
    v32 = a2[3];
    a2[2] = v29;
    a2[3] = v30;
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v148 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v10);
    v33 = v25;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    v36 = v35;
    v37 = v10;
    v38 = v11;
    if (os_log_type_enabled(v34, v35))
    {
      v39 = swift_slowAlloc(22, -1);
      v146 = v14;
      LODWORD(v145) = v36;
      v40 = v39;
      v144 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 134218242;
      v154 = v147;
      v147 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2112;
      v154 = (unint64_t)v33;
      v41 = v33;
      v38 = v147;
      v31 = a2 + 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155, v40 + 14, v40 + 22);
      v42 = v144;
      *v144 = v33;

      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v145, "Firmware apply failed: status %lu %@", (uint8_t *)v40, 0x16u);
      v43 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v42, 1, v43);
      swift_slowDealloc(v42, -1, -1);
      v14 = v146;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {

      v34 = v33;
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v37);
    swift_beginAccess(v31, v157, 0, 0);
    v65 = a2[2];
    v66 = a2[3];
    v67 = sub_10009B608();
    v68 = swift_allocError(&type metadata for FirmwareUpdateErrors, v67, 0, 0);
    *(_QWORD *)v69 = v65;
    *(_QWORD *)(v69 + 8) = v66;
    *(_BYTE *)(v69 + 16) = 5;
    v70 = a2;
    v54 = v148;
    v71 = v148 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess(v148 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v153, 0, 0);
    sub_1000B9864(v71, (uint64_t)&v154);
    if (v156)
    {
      sub_10009AFF4((uint64_t)&v154, (uint64_t)v150);
      swift_bridgeObjectRetain(v66);
      swift_errorRetain(v68);
      sub_1000B98AC((uint64_t)&v154);
      v72 = v151;
      v73 = v152;
      sub_10009B038(v150, v151);
      swift_beginAccess(v31, v149, 0, 0);
      v74 = v70[2];
      v75 = v70[3];
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v73 + 8);
      v77 = swift_bridgeObjectRetain(v75);
      v76(v74, v75, 1, v68, v72, v73, v77);
      swift_errorRelease(v68);
      swift_bridgeObjectRelease(v75);
      sub_100090E88(v150);
    }
    else
    {
      swift_bridgeObjectRetain(v66);
      sub_1000B98AC((uint64_t)&v154);
    }
    goto LABEL_30;
  }
  v146 = (char *)v16;
  v143 = v9;
  v154 = 0;
  v155[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(v155[0]);
  v154 = 0xD00000000000002FLL;
  v155[0] = 0x80000001001FE060;
  v44 = objc_msgSend(a3, "description");
  v45 = a3;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v47 = (NSObject **)a2;
  v49 = v48;

  v50._countAndFlagsBits = v46;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51 = v154;
  v52 = v155[0];
  v145 = v19;
  swift_beginAccess(v19, v158, 1, 0);
  v53 = v47[3];
  v47[2] = v51;
  v47[3] = v52;
  v144 = v47;
  swift_bridgeObjectRelease(v53);
  v54 = v148;
  v147 = v11;
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v141 = v148 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  v142 = v55;
  ((void (*)(char *))v55)(v18);
  v56 = v45;
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter();
  v59 = v10;
  if (os_log_type_enabled(v57, v58))
  {
    v140 = v10;
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v139 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v60 = 138412290;
    v154 = (unint64_t)v56;
    v61 = v54;
    v62 = v56;
    v59 = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155, v60 + 4, v60 + 12);
    v63 = v139;
    *v139 = v56;

    v54 = v61;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Firmware apply successful, firmware is updated %@", v60, 0xCu);
    v64 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v63, 1, v64);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {

    v57 = v56;
  }

  v78 = *(void (**)(char *, uint64_t))(v147 + 8);
  v79 = v59;
  v78(v18, v59);
  v80 = v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback, v157, 0, 0);
  sub_1000B9864(v80, (uint64_t)&v154);
  v81 = v145;
  if (v156)
  {
    sub_10009AFF4((uint64_t)&v154, (uint64_t)v150);
    sub_1000B98AC((uint64_t)&v154);
    v82 = v151;
    v83 = v152;
    sub_10009B038(v150, v151);
    swift_beginAccess(v81, v153, 0, 0);
    v85 = v144[2];
    v84 = v144[3];
    v86 = *(void (**)(NSObject *, NSObject *, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v83 + 8);
    v87 = swift_bridgeObjectRetain(v84);
    v86(v85, v84, 1, 0, v82, v83, v87);
    swift_bridgeObjectRelease(v84);
    sub_100090E88(v150);
  }
  else
  {
    sub_1000B98AC((uint64_t)&v154);
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v88 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  v89 = objc_retain(*(id *)(*(_QWORD *)(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory)
                          + 24));
  sub_10015DAB8(v89);
  v91 = v90;

  v92 = (_QWORD *)&unk_100275000;
  if (v91)
  {
    v93 = v142(v146, v141, v79);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Updating accessory firmware version", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
    }

    v78(v146, v79);
    v97 = *(id *)(*(_QWORD *)(v54 + v88) + 24);
    v98 = (uint64_t)v143;
    DockCoreInfo.identifier.getter(v97);

    v99 = sub_10011D00C(v98);
    v146 = (char *)v100;
    v101 = *(void **)(*(_QWORD *)(v54 + v88) + 24);
    v102 = *(void **)(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID);
    v147 = v99;
    v145 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID;
    v144 = (NSObject **)qword_100275638;
    if (v102)
    {
      v103 = v101;
      v104 = objc_msgSend(v102, "assetVersion");
      if (v104)
      {
        v105 = v104;
        v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v108 = v107;

        goto LABEL_24;
      }
    }
    else
    {
      v104 = v101;
    }
    v106 = 0;
    v108 = 0;
LABEL_24:
    v109 = v91;
    v110 = dispatch thunk of DockCoreAccessory.serialNumber.getter(v104);
    v112 = v111;
    v113 = dispatch thunk of DockCoreAccessory.model.getter(v110);
    v115 = v114;
    v116 = dispatch thunk of DockCoreAccessory.isMagSafe.getter();
    v143 = v109;
    v117 = dispatch thunk of DockCoreAccessory.certified.getter();
    sub_1001627E0(v101, v106, v108, v110, v112, v113, v115, v116 & 1, v117 & 1);

    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v108);
    v54 = v148;
    *(_BYTE *)(*(_QWORD *)(v148 + v88) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 1;
    v118 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v119 = v147;
    v120 = (unint64_t)v146;
    sub_10011CAC4(v147, (uint64_t)v146);
    v122 = v121;
    sub_1000CC5AC(v123, v121);

    swift_bridgeObjectRelease(v122);
    v124 = *(_QWORD *)(v54 + v88);
    swift_retain(v124);
    v125 = sub_1001B19FC((uint64_t)_swiftEmptyArrayStorage);
    v126 = (unint64_t *)(v124 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
    swift_beginAccess(v124 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, &v154, 1, 0);
    v127 = *v126;
    *v126 = v125;
    swift_release(v124);
    swift_bridgeObjectRelease(v127);
    *(_QWORD *)(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent) = 0x4059000000000000;
    v128 = *(void **)(v54 + v145);
    if (v128 && (v129 = objc_msgSend(v128, "assetVersion")) != 0)
    {
      v130 = v129;
      v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v133 = v132;

    }
    else
    {
      v131 = 0;
      v133 = 0;
    }
    v134 = v143;
    v92 = &unk_100275000;
    sub_1000B316C(v131, v133, 0, 1);
    swift_bridgeObjectRelease(v133);
    sub_10009B2FC(v119, v120);

  }
  v135 = v92[138];
  v136 = *(void **)(v54 + v135);
  *(_QWORD *)(v54 + v135) = 0;

  v68 = 0;
LABEL_30:
  if (*(_BYTE *)(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
    *(_BYTE *)(v54 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 0;
  sub_1000B203C(v68);
  return swift_errorRelease(v68);
}

uint64_t sub_1000B7C60(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v12 = swift_allocObject(&unk_100239BD8, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000B97F8;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239BF0;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  v15 = v1;
  v16 = swift_unknownObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v19 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v24);
}

void sub_1000B7E44(char *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  __int128 v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _DWORD *v25;
  id v26;
  Class isa;
  unsigned int v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  char *v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  os_log_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  os_log_t v75;
  _QWORD *v76;
  void *v77;
  char *v78;
  uint64_t *v79;
  id v80;
  __int128 v81;
  int v82;
  void *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v84 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v70 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  v91 = (char *)&v69 - v10;
  v11 = *(void **)(*(_QWORD *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  v87 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory;
  v74 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  v13 = v11;
  v14 = objc_msgSend(a2, "readData");
  if (!v14)
    goto LABEL_17;
  v16 = v14;
  v90 = &a1[v12];
  v79 = &v93;
  *(_QWORD *)&v15 = 134218242;
  v81 = v15;
  v78 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v15 = 138412802;
  v71 = v15;
  v83 = a2;
  v86 = v5;
  v73 = a1;
  v72 = v4;
  v80 = v13;
  while (1)
  {
    v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    v21 = v91;
    v89 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v89(v91, v90, v4);
    sub_10009B27C(v18, v20);
    v22 = sub_10009B27C(v18, v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (_DWORD *)swift_slowAlloc(22, -1);
      v94 = (id)swift_slowAlloc(32, -1);
      *v25 = v81;
      __asm { BR              X9 }
    }
    sub_10009B2FC(v18, v20);
    sub_10009B2FC(v18, v20);

    v88 = *(void (**)(char *, uint64_t))(v5 + 8);
    v88(v21, v4);
    v26 = *(id *)&a1[v87];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v94 = 0;
    v28 = objc_msgSend(v13, "recvDataFromAccessory:data:error:", v26, isa, &v94);

    v29 = v94;
    if (!v28)
      break;
    v17 = v94;
    sub_10009B2FC(v18, v20);
LABEL_4:
    v16 = objc_msgSend(a2, "readData");
    if (!v16)
      goto LABEL_17;
  }
  v30 = v94;
  v31 = _convertNSErrorToError(_:)(v29);

  swift_willThrow(v32);
  v33 = v84;
  v89(v84, v90, v4);
  v34 = v13;
  swift_errorRetain(v31);
  v35 = a1;
  v36 = v34;
  swift_errorRetain(v31);
  v37 = v35;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter();
  v82 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(32, -1);
    v41 = v31;
    v42 = (_QWORD *)swift_slowAlloc(16, -1);
    v76 = v42;
    v77 = (void *)swift_slowAlloc(32, -1);
    v94 = v77;
    *(_DWORD *)v40 = v71;
    v43 = *(_QWORD *)&a1[v74];
    v85 = v37;
    v44 = *(void **)(v43 + 24);
    v92 = (uint64_t)v44;
    v45 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v79, v40 + 4, v40 + 12);
    *v42 = v44;
    v31 = v41;

    *(_WORD *)(v40 + 12) = 2080;
    v46 = objc_msgSend(v36, "description");
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v75 = v38;
    v48 = v47;
    v50 = v49;

    a1 = v73;
    v92 = sub_1000906BC(v48, v50, (uint64_t *)&v94);
    v51 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v79, v40 + 14, v40 + 22);

    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v40 + 22) = 2112;
    swift_errorRetain(v31);
    v52 = _swift_stdlib_bridgeErrorToNSError(v31);
    v92 = v52;
    v37 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v51, v40 + 24, v40 + 32);
    v53 = v76;
    v76[1] = v52;
    swift_errorRelease(v31);
    swift_errorRelease(v31);
    v54 = v75;
    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v82, "Couldn't send data from accessory %@ to controller: %s: error: %@", (uint8_t *)v40, 0x20u);
    v55 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v53, 2, v55);
    a2 = v83;
    swift_slowDealloc(v53, -1, -1);
    v56 = v77;
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v57 = v40;
    v4 = v72;
    swift_slowDealloc(v57, -1, -1);

    v58 = v84;
  }
  else
  {

    swift_errorRelease(v31);
    swift_errorRelease(v31);

    v58 = v33;
  }
  v88(v58, v4);
  v59 = objc_msgSend(a2, "isClosed");
  v13 = v80;
  if (!v59)
  {
    sub_10009B2FC(v18, v20);
    swift_errorRelease(v31);
    v5 = v86;
    goto LABEL_4;
  }
  v60 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v61 = v37;
  v62 = *(os_unfair_lock_s **)&v37[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock];
  swift_retain(v62);
  os_unfair_lock_lock(v62 + 4);
  swift_release(v62);
  v63 = *(_QWORD *)&v61[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket];
  *(_QWORD *)&v61[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket] = 0;
  swift_unknownObjectRelease(v63);
  v64 = *(os_unfair_lock_s **)&v61[v60];
  swift_retain(v64);
  os_unfair_lock_unlock(v64 + 4);
  swift_release(v64);
  v65 = ((uint64_t (*)(char *, char *, uint64_t))v89)(v70, v90, v4);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Socket closed", v68, 2u);
    swift_slowDealloc(v68, -1, -1);

    swift_errorRelease(v31);
    sub_10009B2FC(v18, v20);
  }
  else
  {
    sub_10009B2FC(v18, v20);
    swift_errorRelease(v31);

  }
  v88(v70, v4);
LABEL_17:
  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer], "resume");

}

uint64_t sub_1000B8718(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer), "suspend");
  v3 = *(void **)(a1 + v2);
  *(_QWORD *)(a1 + v2) = 0;

  v4 = sub_10009B608();
  v5 = swift_allocError(&type metadata for FirmwareUpdateErrors, v4, 0, 0);
  *(_QWORD *)v6 = 0xD000000000000010;
  *(_QWORD *)(v6 + 8) = 0x80000001001FE020;
  *(_BYTE *)(v6 + 16) = 7;
  sub_1000B203C(v5);
  return swift_errorRelease(v5);
}

uint64_t getEnumTagSinglePayload for BTDeviceDiscoveryMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000B88CC + 4 * byte_1001DEB9D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B8900 + 4 * byte_1001DEB98[v4]))();
}

uint64_t sub_1000B8900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B8910);
  return result;
}

uint64_t sub_1000B891C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B8924);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000B8928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateState()
{
  return &type metadata for FirmwareUpdateState;
}

unint64_t sub_1000B8950()
{
  unint64_t result;

  result = qword_10026C7A8;
  if (!qword_10026C7A8)
  {
    result = swift_getWitnessTable(&unk_1001DECB4, &type metadata for FirmwareUpdateState);
    atomic_store(result, (unint64_t *)&qword_10026C7A8);
  }
  return result;
}

char *sub_1000B8994(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  objc_super v24;

  v7 = v3;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000015, 0x80000001001FDFD0);
  v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn;
  v9 = type metadata accessor for Transaction(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  swift_unknownObjectWeakInit(v10 + 40, 0);
  *(_QWORD *)(v10 + 80) = 0;
  *(_BYTE *)(v10 + 88) = 1;
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v10 + 64) = 0xD000000000000027;
  *(_QWORD *)(v10 + 72) = 0x80000001001FDFF0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0x403E000000000000;
  swift_unknownObjectWeakAssign(v10 + 40, 0);
  *(_QWORD *)&v7[v8] = v10;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_busy] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket] = 0;
  v11 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v12 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v13 = swift_allocObject(v12, 20, 7);
  *(_DWORD *)(v13 + 16) = 0;
  *(_QWORD *)&v7[v11] = v13;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_dataStreamOpenInProgress] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_maxSocketIdleDuration] = 0x404E000000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID] = 0;
  v14 = &v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile;
  *(_QWORD *)&v7[v15] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateProfile(0)), "init");
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable] = 0;
  v16 = &v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval] = 0xBFF0000000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager] = a3;
  v17 = *(void **)(a1 + 40);
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue] = v17;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 0;
  swift_retain(a1);
  v18 = a2;
  v19 = a3;
  v20 = v17;

  v24.receiver = v7;
  v24.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateSession(0);
  v21 = (char *)objc_msgSendSuper2(&v24, "init");
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn];
  *(_QWORD *)(v22 + 48) = &off_100239B60;
  swift_unknownObjectWeakAssign(v22 + 40, v21);
  return v21;
}

uint64_t sub_1000B8C84(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B8D8C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[24];
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v10 = (double)a1 / (double)a2 * 100.0;
    v11 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8) == 1
      && v10 > 0.05)
    {
      *(double *)v11 = v10;
      *(_BYTE *)(v11 + 8) = 0;
    }
  }
  else
  {
    v10 = 0.0;
  }
  *(double *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent) = v10;
  v40 = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(v41);
  v40 = 0xD000000000000010;
  v41 = 0x80000001001FE0F0;
  v12 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v13 + 56) = &type metadata for Double;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
  *(double *)(v13 + 32) = v10;
  v14._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x656E6F6420;
  v16._object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  v18 = v40;
  v17 = v41;
  v43 = v40;
  v44 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v6);
  v19 = swift_bridgeObjectRetain_n(v17, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v33 = v6;
    v22 = swift_slowAlloc(12, -1);
    v32 = v7;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v40 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(v17);
    v35 = sub_1000906BC(v18, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v25 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess(v25, v39, 0, 0);
  sub_1000B9864(v25, (uint64_t)&v40);
  if (v42)
  {
    sub_10009AFF4((uint64_t)&v40, (uint64_t)&v35);
    sub_1000B98AC((uint64_t)&v40);
    v26 = v37;
    v27 = v38;
    sub_10009B038(&v35, v37);
    v28 = swift_beginAccess(&v43, v34, 0, 0);
    v29 = v44;
    (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(v27 + 8))(v43, v44, 0, 0, v26, v27, v28);
    swift_bridgeObjectRelease(v29);
    return sub_100090E88(&v35);
  }
  else
  {
    swift_bridgeObjectRelease(v44);
    return sub_1000B98AC((uint64_t)&v40);
  }
}

uint64_t sub_1000B914C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, (uint64_t)v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v1);
  v5 = v0;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v22 = v2;
    v9 = (uint8_t *)v8;
    v21 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v10 = (void *)(*(_QWORD **)((char *)&v5->isa
                              + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory))[3];
    v23 = v10;
    v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    v12 = v21;
    *v21 = v10;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HDS socket closed for accessory %@", v9, 0xCu);
    v13 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v13);
    swift_slowDealloc(v12, -1, -1);
    v14 = v9;
    v2 = v22;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    v6 = v5;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v16 = *(os_unfair_lock_s **)((char *)&v5->isa
                             + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock);
  swift_retain(v16);
  os_unfair_lock_lock(v16 + 4);
  swift_release(v16);
  v17 = *(uint64_t *)((char *)&v5->isa + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket);
  *(Class *)((char *)&v5->isa + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket) = 0;
  swift_unknownObjectRelease(v17);
  v18 = *(os_unfair_lock_s **)((char *)&v5->isa + v15);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  return swift_release(v18);
}

uint64_t sub_1000B9374(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v3);
  v7 = v1;
  swift_errorRetain(a1);
  v8 = (char *)v7;
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    v13 = swift_slowAlloc(22, -1);
    HIDWORD(v22) = v12;
    v14 = v13;
    v15 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v14 = 138412546;
    v16 = *(_QWORD *)&v8[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory];
    v23 = v10;
    v24 = v3;
    v17 = *(void **)(v16 + 24);
    v25 = (uint64_t)v17;
    v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);
    *v15 = v17;

    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(a1);
    v19 = _swift_stdlib_bridgeErrorToNSError(a1);
    v25 = v19;
    v10 = v23;
    v3 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14, v14 + 22);
    v15[1] = v19;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, BYTE4(v22), "HDS socket failed for accessory %@ with error %@", (uint8_t *)v14, 0x16u);
    v20 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v15, 2, v20);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B95AC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  v10 = swift_allocObject(&unk_100239B88, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_1000B97AC;
  v20 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_100239BA0;
  v11 = _Block_copy(aBlock);
  v12 = v9;
  static DispatchQoS.unspecified.getter(v0);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v15 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

uint64_t sub_1000B9788()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B97AC()
{
  uint64_t v0;

  return sub_1000B8718(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000B97B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B97C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B97CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B97F8()
{
  uint64_t v0;

  sub_1000B7E44(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000B9800()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9824()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9858()
{
  uint64_t v0;

  return sub_1000B6F9C(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000B9864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026C7D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B98AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C((uint64_t *)&unk_10026C7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B98EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000B9928()
{
  uint64_t v0;

  sub_1000B5C38(*(void (**)(uint64_t, _BYTE *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD **)(v0 + 48));
}

unint64_t sub_1000B9938(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026C7E0;
  if (!qword_10026C7E0)
  {
    v3 = objc_opt_self(UARPAccessory, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026C7E0);
  }
  return result;
}

id sub_1000B9974()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer), "resume");
}

uint64_t sub_1000B9990()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B99CC()
{
  uint64_t v0;

  sub_1000B3D2C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(char **)(v0 + 40));
}

uint64_t sub_1000B99D8()
{
  uint64_t v0;

  return sub_1000B2C78(*(_BYTE **)(v0 + 16));
}

uint64_t sub_1000B99E0()
{
  uint64_t v0;

  return sub_1000B1CC8(*(_BYTE **)(v0 + 16));
}

uint64_t sub_1000B99E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B9A14()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10026C80C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  v2 = (_QWORD *)swift_task_alloc(dword_10026C744);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10009B0EC;
  return sub_1000B23CC();
}

uint64_t sub_1000B9A7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9AA8()
{
  uint64_t v0;

  return sub_1000B1968(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000B9AFC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 23328;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x657269707865205DLL;
  v7._object = (void *)0xEA00000000003D64;
  String.append(_:)(v7);
  if (*(_BYTE *)(v0 + 40))
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 40))
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  return 0xD00000000000001ALL;
}

uint64_t sub_1000B9C2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  char v22;
  double v23;
  double v24;
  double v25;
  double v27;
  BOOL v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  double v56;
  uint64_t result;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  _QWORD *v61;
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];

  v1 = (_QWORD *)(v0 + 80);
  swift_beginAccess(v0 + 80, v64, 0, 0);
  v2 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(v2);
  v58 = sub_1001BF570(v3);
  swift_bridgeObjectRelease(v2);
  swift_beginAccess(v0 + 88, v63, 0, 0);
  v59 = v0;
  v4 = *(_QWORD *)(v0 + 88);
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  v10 = 0;
  v60 = v9;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v10 << 6);
LABEL_21:
    v16 = *v1;
    if (*(_QWORD *)(*v1 + 16))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      v19 = *v17;
      v18 = v17[1];
      v20 = *(double *)(*(_QWORD *)(v4 + 56) + 8 * v12);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v16);
      v21 = sub_100145264(v19, v18);
      if ((v22 & 1) != 0)
      {
        v23 = *(double *)(*(_QWORD *)(v16 + 56) + 8 * v21);
        swift_bridgeObjectRelease(v16);
        if (v23 != v20)
        {
          v24 = *(double *)(v59 + 96);
          if (v24 != 0.0)
          {
            v25 = v24 / (double)*(uint64_t *)(v59 + 64);
            if (v20 * v23 < 0.0 || v20 == 0.0)
              v25 = v25 + v25;
            if (v23 >= v20)
            {
              v27 = v23 - v25;
              v28 = v27 < v20;
            }
            else
            {
              v27 = v23 + v25;
              v28 = v20 < v27;
            }
            if (v28)
              v23 = v20;
            else
              v23 = v27;
          }
        }
        swift_beginAccess(v1, v62, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
        v30 = *v1;
        v61 = (_QWORD *)*v1;
        *v1 = 0x8000000000000000;
        v32 = sub_100145264(v19, v18);
        v33 = *(_QWORD *)(v30 + 16);
        v34 = (v31 & 1) == 0;
        v35 = v33 + v34;
        if (__OFADD__(v33, v34))
          goto LABEL_65;
        v36 = v31;
        if (*(_QWORD *)(v30 + 24) >= v35)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v39 = v61;
            if ((v31 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            sub_1001BD69C();
            v39 = v61;
            if ((v36 & 1) != 0)
              goto LABEL_43;
          }
        }
        else
        {
          sub_1001B5FD0(v35, isUniquelyReferenced_nonNull_native);
          v37 = sub_100145264(v19, v18);
          if ((v36 & 1) != (v38 & 1))
            goto LABEL_68;
          v32 = v37;
          v39 = v61;
          if ((v36 & 1) != 0)
          {
LABEL_43:
            *(double *)(v39[7] + 8 * v32) = v23;
            goto LABEL_47;
          }
        }
        v39[(v32 >> 6) + 8] |= 1 << v32;
        v40 = (uint64_t *)(v39[6] + 16 * v32);
        *v40 = v19;
        v40[1] = v18;
        *(double *)(v39[7] + 8 * v32) = v23;
        v41 = v39[2];
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (v42)
          goto LABEL_66;
        v39[2] = v43;
        swift_bridgeObjectRetain(v18);
LABEL_47:
        v44 = *v1;
        *v1 = v39;
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v44);
        swift_endAccess(v62);
        v9 = v60;
        v5 = v4 + 64;
      }
      else
      {
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v16);
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  if (v13 >= v9)
    goto LABEL_48;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_20;
  v10 = v13 + 1;
  if (v13 + 1 >= v9)
    goto LABEL_48;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
    goto LABEL_20;
  v10 = v13 + 2;
  if (v13 + 2 >= v9)
    goto LABEL_48;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
  {
LABEL_20:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  v15 = v13 + 3;
  if (v15 < v9)
  {
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_67;
        if (v10 >= v9)
          goto LABEL_48;
        v14 = *(_QWORD *)(v5 + 8 * v10);
        ++v15;
        if (v14)
          goto LABEL_20;
      }
    }
    v10 = v15;
    goto LABEL_20;
  }
LABEL_48:
  swift_release(v4);
  v45 = *v1;
  swift_bridgeObjectRetain(*v1);
  v47 = sub_1001BF570(v46);
  swift_bridgeObjectRelease(v45);
  LOBYTE(v45) = sub_1000BA08C((uint64_t)v58, (uint64_t)v47);
  swift_release(v47);
  swift_release(v58);
  if ((v45 & 1) == 0)
    return 1;
  v48 = *v1;
  swift_bridgeObjectRetain(*v1);
  v50 = (double *)sub_1001BF570(v49);
  swift_bridgeObjectRelease(v48);
  v51 = *((_QWORD *)v50 + 2);
  if (v51)
  {
    if (v50[4] == 0.0)
    {
      v52 = v50 + 5;
      v53 = v51 - 1;
      do
      {
        v54 = v53-- != 0;
        v55 = v54;
        if (!v54)
          break;
        v56 = *v52++;
      }
      while (v56 == 0.0);
    }
    else
    {
      v55 = 1;
    }
  }
  else
  {
    v55 = 0;
  }
  swift_release(v50);
  return v55;
}

BOOL sub_1000BA08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

void sub_1000BA100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char v7;
  id v8;
  void (*v9)(__n128);
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  id v19;
  _BYTE v20[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(id *)(v0 + 72);
  OS_dispatch_semaphore.wait()();

  if (*(_BYTE *)(v1 + 170) == 1)
    goto LABEL_6;
  v7 = sub_1000B9C2C();
  if ((*(_BYTE *)(v1 + 169) & 1) != 0 || (v7 & 1) != 0)
  {
    *(_BYTE *)(v1 + 169) = 0;
  }
  else
  {
    if (*(_BYTE *)(v1 + 168) != 1 || (*(_BYTE *)(v1 + 40) & 1) != 0)
    {
LABEL_6:
      v19 = *(id *)(v1 + 72);
      OS_dispatch_semaphore.signal()();

      return;
    }
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "stable, expiring", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(_BYTE *)(v1 + 40) = 1;
    v17 = *(void (**)(uint64_t))(v1 + 120);
    if (v17)
    {
      v18 = *(_QWORD *)(v1 + 128);
      swift_retain(v18);
      v17(v1);
      sub_1000B1410((uint64_t)v17, v18);
    }
  }
  v8 = *(id *)(v1 + 72);
  OS_dispatch_semaphore.signal()();

  v9 = *(void (**)(__n128))(v1 + 104);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + 112);
    swift_beginAccess(v1 + 80, v20, 0, 0);
    v11 = *(_QWORD *)(v1 + 80);
    sub_1000BC8F4((uint64_t)v9, v10);
    v12 = swift_bridgeObjectRetain(v11);
    v9(v12);
    swift_bridgeObjectRelease(v11);
    sub_1000B1410((uint64_t)v9, v10);
  }
}

void sub_1000BA328(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(id *)(v3 + 72);
  OS_dispatch_semaphore.wait()();

  *(_WORD *)(v4 + 169) = 1;
  v78 = v4;
  if ((a3 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v8);
    v13 = swift_retain(v4);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(18, -1);
      v77 = swift_slowAlloc(32, -1);
      v83[0] = v77;
      *(_DWORD *)v16 = 136315394;
      v17 = *(_QWORD *)(v78 + 24);
      v79 = a2;
      v18 = *(_QWORD *)(v78 + 32);
      swift_bridgeObjectRetain(v18);
      v81 = sub_1000906BC(v17, v18, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v16 + 4, v16 + 12);
      v19 = v18;
      a2 = v79;
      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v16 + 12) = 1024;
      LODWORD(v81) = *(_DWORD *)(v78 + 16);
      v4 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, (char *)&v81 + 4, v16 + 14, v16 + 18);
      swift_release(v4);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "setting expireWhenStable true for animator owned by %s[%d]", (uint8_t *)v16, 0x12u);
      v20 = v77;
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release(v4);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_BYTE *)(v4 + 168) = 1;
  }
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
  {
LABEL_38:
    v65 = v78;
    v66 = *(id *)(v78 + 72);
    OS_dispatch_semaphore.signal()();

    v67 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
    objc_msgSend(v67, "timeIntervalSince1970");
    v69 = v68;

    *(_QWORD *)(v65 + 136) = v69;
    if (!*(_QWORD *)(v65 + 144))
    {
      v70 = swift_allocObject(&unk_100239F08, 24, 7);
      swift_weakInit(v70 + 16, v65);
      v71 = *(double *)(v65 + 160) * 0.5;
      v72 = *(void **)(v65 + 152);
      v73 = swift_allocObject(&unk_100239F80, 32, 7);
      *(_QWORD *)(v73 + 16) = v70;
      *(_QWORD *)(v73 + 24) = v65;
      objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
      swift_retain(v65);
      v74 = v72;
      swift_retain(v70);
      v75 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v72, sub_1000BCC6C, v73, v71);
      v76 = *(void **)(v65 + 144);
      *(_QWORD *)(v65 + 144) = v75;
      swift_release(v70);

    }
    return;
  }
  if (v21 > a2[2])
    goto LABEL_45;
  v22 = (_QWORD *)(v78 + 88);
  v23 = a2 + 4;
  v79 = (_QWORD *)(v78 + 80);
  swift_beginAccess(v78 + 80, v83, 0, 0);
  v24 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v26 = *v23;
    if ((~*v23 & 0x7FF0000000000000) == 0)
      goto LABEL_11;
    v28 = *(v24 - 1);
    v27 = *v24;
    swift_beginAccess(v22, &v81, 33, 0);
    swift_bridgeObjectRetain(v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
    v80 = (_QWORD *)*v22;
    v30 = v80;
    *v22 = 0x8000000000000000;
    v32 = sub_100145264(v28, v27);
    v33 = v30[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v30[3] >= v35)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v39 = v80;
        if ((v31 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        sub_1001BD69C();
        v39 = v80;
        if ((v36 & 1) != 0)
          goto LABEL_20;
      }
    }
    else
    {
      sub_1001B5FD0(v35, isUniquelyReferenced_nonNull_native);
      v37 = sub_100145264(v28, v27);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_46;
      v32 = v37;
      v39 = v80;
      if ((v36 & 1) != 0)
      {
LABEL_20:
        *(_QWORD *)(v39[7] + 8 * v32) = v26;
        goto LABEL_24;
      }
    }
    v39[(v32 >> 6) + 8] |= 1 << v32;
    v40 = (uint64_t *)(v39[6] + 16 * v32);
    *v40 = v28;
    v40[1] = v27;
    *(_QWORD *)(v39[7] + 8 * v32) = v26;
    v41 = v39[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_43;
    v39[2] = v43;
    swift_bridgeObjectRetain(v27);
LABEL_24:
    v44 = *v22;
    *v22 = v39;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v44);
    swift_endAccess(&v81);
    v45 = *v24;
    v46 = *v79;
    if (*(_QWORD *)(*v79 + 16))
    {
      v47 = *(v24 - 1);
      swift_bridgeObjectRetain(*v24);
      swift_bridgeObjectRetain(v46);
      sub_100145264(v47, v45);
      LOBYTE(v47) = v48;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v46);
      if ((v47 & 1) != 0)
        goto LABEL_11;
      v45 = *v24;
    }
    v49 = *(v24 - 1);
    v50 = v79;
    swift_beginAccess(v79, &v81, 33, 0);
    swift_bridgeObjectRetain(v45);
    v51 = swift_isUniquelyReferenced_nonNull_native(*v50);
    v80 = (_QWORD *)*v50;
    v52 = v80;
    *v50 = 0x8000000000000000;
    v54 = sub_100145264(v49, v45);
    v55 = v52[2];
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
      goto LABEL_42;
    v58 = v53;
    if (v52[3] >= v57)
    {
      if ((v51 & 1) != 0)
      {
        v61 = v80;
        if ((v53 & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        sub_1001BD69C();
        v61 = v80;
        if ((v58 & 1) == 0)
          goto LABEL_34;
      }
    }
    else
    {
      sub_1001B5FD0(v57, v51);
      v59 = sub_100145264(v49, v45);
      if ((v58 & 1) != (v60 & 1))
        goto LABEL_46;
      v54 = v59;
      v61 = v80;
      if ((v58 & 1) == 0)
      {
LABEL_34:
        v61[(v54 >> 6) + 8] |= 1 << v54;
        v62 = (uint64_t *)(v61[6] + 16 * v54);
        *v62 = v49;
        v62[1] = v45;
        *(_QWORD *)(v61[7] + 8 * v54) = 0;
        v63 = v61[2];
        v42 = __OFADD__(v63, 1);
        v64 = v63 + 1;
        if (v42)
          goto LABEL_44;
        v61[2] = v64;
        swift_bridgeObjectRetain(v45);
        goto LABEL_10;
      }
    }
    *(_QWORD *)(v61[7] + 8 * v54) = 0;
LABEL_10:
    v25 = *v79;
    *v79 = v61;
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v25);
    swift_endAccess(&v81);
LABEL_11:
    v24 += 2;
    ++v23;
    if (!--v21)
      goto LABEL_38;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BA9C4(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t i;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _BYTE v85[24];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(id *)(v2 + 72);
  OS_dispatch_semaphore.wait()();

  *(_WORD *)(v3 + 169) = 1;
  v80 = v3;
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v6);
    v11 = swift_retain(v3);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(18, -1);
      v15 = swift_slowAlloc(32, -1);
      v88[0] = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = *(_QWORD *)(v80 + 24);
      v17 = *(_QWORD *)(v80 + 32);
      swift_bridgeObjectRetain(v17);
      v86 = sub_1000906BC(v16, v17, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v17);
      *(_WORD *)(v14 + 12) = 1024;
      LODWORD(v86) = *(_DWORD *)(v80 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4, v14 + 14, v14 + 18);
      swift_release(v80);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "setting expireWhenStable true for animator owned by %s[%d]", (uint8_t *)v14, 0x12u);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      v3 = v80;
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release(v3);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_BYTE *)(v3 + 168) = 1;
  }
  v18 = (_QWORD *)(v3 + 88);
  swift_beginAccess(v3 + 88, v88, 0, 0);
  v19 = *(_QWORD *)(v3 + 88);
  v20 = *(_QWORD *)(v19 + 64);
  v81 = v19 + 64;
  v21 = 1 << *(_BYTE *)(v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = (_QWORD *)(v3 + 80);
  v83 = v19;
  swift_bridgeObjectRetain(v19);
  swift_beginAccess(v3 + 80, &v86, 0, 0);
  v25 = 0;
  v82 = (unint64_t)(v21 + 63) >> 6;
  if (v23)
    goto LABEL_12;
LABEL_13:
  v29 = v25 + 1;
  if (__OFADD__(v25, 1))
    goto LABEL_60;
  if (v29 >= v82)
    goto LABEL_54;
  v30 = *(_QWORD *)(v81 + 8 * v29);
  ++v25;
  if (!v30)
  {
    v25 = v29 + 1;
    if (v29 + 1 >= v82)
      goto LABEL_54;
    v30 = *(_QWORD *)(v81 + 8 * v25);
    if (!v30)
    {
      v25 = v29 + 2;
      if (v29 + 2 >= v82)
        goto LABEL_54;
      v30 = *(_QWORD *)(v81 + 8 * v25);
      if (!v30)
      {
        v31 = v29 + 3;
        if (v31 < v82)
        {
          v30 = *(_QWORD *)(v81 + 8 * v31);
          if (v30)
          {
            v25 = v31;
            goto LABEL_26;
          }
          while (1)
          {
            v25 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_62;
            if (v25 >= v82)
              break;
            v30 = *(_QWORD *)(v81 + 8 * v25);
            ++v31;
            if (v30)
              goto LABEL_26;
          }
        }
LABEL_54:
        swift_release(v83);
        v68 = v80;
        v69 = *(id *)(v80 + 72);
        OS_dispatch_semaphore.signal()();

        v70 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
        objc_msgSend(v70, "timeIntervalSince1970");
        v72 = v71;

        *(_QWORD *)(v68 + 136) = v72;
        if (!*(_QWORD *)(v68 + 144))
        {
          v73 = swift_allocObject(&unk_100239F08, 24, 7);
          swift_weakInit(v73 + 16, v68);
          v74 = *(double *)(v68 + 160) * 0.5;
          v75 = *(void **)(v68 + 152);
          v76 = swift_allocObject(&unk_100239F58, 32, 7);
          *(_QWORD *)(v76 + 16) = v73;
          *(_QWORD *)(v76 + 24) = v68;
          objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
          swift_retain(v68);
          v77 = v75;
          swift_retain(v73);
          v78 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v75, sub_1000BCC6C, v76, v74);
          v79 = *(void **)(v68 + 144);
          *(_QWORD *)(v68 + 144) = v78;
          swift_release(v73);

        }
        return;
      }
    }
  }
LABEL_26:
  v23 = (v30 - 1) & v30;
  for (i = __clz(__rbit64(v30)) + (v25 << 6); ; i = v27 | (v25 << 6))
  {
    v32 = (uint64_t *)(*(_QWORD *)(v83 + 48) + 16 * i);
    v34 = *v32;
    v33 = v32[1];
    swift_beginAccess(v18, v85, 33, 0);
    swift_bridgeObjectRetain_n(v33, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v84 = (_QWORD *)*v18;
    v36 = v84;
    *v18 = 0x8000000000000000;
    v38 = sub_100145264(v34, v33);
    v39 = v36[2];
    v40 = (v37 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      break;
    v42 = v37;
    if (v36[3] >= v41)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v45 = v84;
        if ((v37 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        sub_1001BD69C();
        v45 = v84;
        if ((v42 & 1) != 0)
          goto LABEL_34;
      }
    }
    else
    {
      sub_1001B5FD0(v41, isUniquelyReferenced_nonNull_native);
      v43 = sub_100145264(v34, v33);
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_63;
      v38 = v43;
      v45 = v84;
      if ((v42 & 1) != 0)
      {
LABEL_34:
        *(double *)(v45[7] + 8 * v38) = a2;
        goto LABEL_38;
      }
    }
    v45[(v38 >> 6) + 8] |= 1 << v38;
    v46 = (uint64_t *)(v45[6] + 16 * v38);
    *v46 = v34;
    v46[1] = v33;
    *(double *)(v45[7] + 8 * v38) = a2;
    v47 = v45[2];
    v48 = __OFADD__(v47, 1);
    v49 = v47 + 1;
    if (v48)
      goto LABEL_59;
    v45[2] = v49;
    swift_bridgeObjectRetain(v33);
LABEL_38:
    v50 = *v18;
    *v18 = v45;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v50);
    swift_endAccess(v85);
    v51 = *v24;
    if (!*(_QWORD *)(*v24 + 16))
      goto LABEL_43;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v51);
    sub_100145264(v34, v33);
    v53 = v52;
    swift_bridgeObjectRelease(v33);
    if ((v53 & 1) == 0)
    {
      swift_bridgeObjectRelease(v51);
LABEL_43:
      swift_beginAccess(v24, v85, 33, 0);
      v54 = swift_isUniquelyReferenced_nonNull_native(*v24);
      v84 = (_QWORD *)*v24;
      v55 = v84;
      *v24 = 0x8000000000000000;
      v57 = sub_100145264(v34, v33);
      v58 = v55[2];
      v59 = (v56 & 1) == 0;
      v60 = v58 + v59;
      if (__OFADD__(v58, v59))
        goto LABEL_58;
      v61 = v56;
      if (v55[3] >= v60)
      {
        if ((v54 & 1) != 0)
        {
          v64 = v84;
          if ((v56 & 1) == 0)
            goto LABEL_50;
        }
        else
        {
          sub_1001BD69C();
          v64 = v84;
          if ((v61 & 1) == 0)
            goto LABEL_50;
        }
      }
      else
      {
        sub_1001B5FD0(v60, v54);
        v62 = sub_100145264(v34, v33);
        if ((v61 & 1) != (v63 & 1))
          goto LABEL_63;
        v57 = v62;
        v64 = v84;
        if ((v61 & 1) == 0)
        {
LABEL_50:
          v64[(v57 >> 6) + 8] |= 1 << v57;
          v65 = (uint64_t *)(v64[6] + 16 * v57);
          *v65 = v34;
          v65[1] = v33;
          *(_QWORD *)(v64[7] + 8 * v57) = 0;
          v66 = v64[2];
          v48 = __OFADD__(v66, 1);
          v67 = v66 + 1;
          if (v48)
            goto LABEL_61;
          v64[2] = v67;
          swift_bridgeObjectRetain(v33);
          goto LABEL_11;
        }
      }
      *(_QWORD *)(v64[7] + 8 * v57) = 0;
LABEL_11:
      v26 = *v24;
      *v24 = v64;
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v26);
      swift_endAccess(v85);
      if (!v23)
        goto LABEL_13;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v51);
    if (!v23)
      goto LABEL_13;
LABEL_12:
    v27 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BB150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  __n128 v12;
  uint64_t Strong;
  double v14;
  id v15;
  double v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  __n128 v20;
  uint64_t v21;
  double v22;
  double v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[24];
  uint64_t v62;
  _BYTE v63[16];
  uint64_t v64[3];
  _BYTE v65[24];
  _BYTE v66[24];
  _BYTE v67[24];
  _BYTE v68[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + 16;
  v9 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  objc_msgSend(v9, "timeIntervalSince1970");
  v11 = v10;

  v12 = swift_beginAccess(v8, v68, 0, 0);
  Strong = swift_weakLoadStrong(v8, v12);
  if (Strong)
  {
    v14 = *(double *)(Strong + 136);
    swift_release(Strong);
  }
  else
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
    objc_msgSend(v15, "timeIntervalSince1970");
    v14 = v16;

  }
  v17 = swift_beginAccess(v8, v67, 0, 0);
  v18 = swift_weakLoadStrong(v8, v17);
  if (v18)
  {
    v19 = *(double *)(v18 + 160);
    swift_release(v18);
  }
  else
  {
    v19 = INFINITY;
  }
  v20 = swift_beginAccess(v8, v66, 0, 0);
  v21 = swift_weakLoadStrong(v8, v20);
  if (v21)
  {
    v22 = *(double *)(v21 + 136);
    swift_release(v21);
    if (v22 != 0.0)
    {
      v23 = v11 - v14;
      if (v19 < v23)
      {
        v24 = swift_beginAccess(v8, v65, 0, 0);
        v25 = swift_weakLoadStrong(v8, v24);
        if (v25)
        {
          v26 = v25;
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v4);
          swift_release(v26);
          v27 = swift_retain(a2);
          v28 = Logger.logObject.getter(v27);
          v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = swift_slowAlloc(28, -1);
            v57 = swift_slowAlloc(32, -1);
            v64[0] = v57;
            *(_DWORD *)v30 = 136315650;
            v56 = v30 + 4;
            v32 = *(_QWORD *)(a2 + 24);
            v31 = *(_QWORD *)(a2 + 32);
            swift_bridgeObjectRetain(v31);
            v62 = sub_1000906BC(v32, v31, v64);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v56, v30 + 12);
            swift_bridgeObjectRelease(v31);
            *(_WORD *)(v30 + 12) = 1024;
            LODWORD(v62) = *(_DWORD *)(a2 + 16);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 4, v30 + 14, v30 + 18);
            swift_release(a2);
            *(_WORD *)(v30 + 18) = 2048;
            v62 = *(_QWORD *)&v23;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v30 + 20, v30 + 28);
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "animator owned by %s[%d] hasn't received commands in %f sec, stopping actuators & expiring", (uint8_t *)v30, 0x1Cu);
            v33 = v57;
            swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v33, -1, -1);
            swift_slowDealloc(v30, -1, -1);

          }
          else
          {

            swift_release(a2);
          }
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }
        v34 = swift_beginAccess(v8, v64, 0, 0);
        v35 = swift_weakLoadStrong(v8, v34);
        if (v35)
        {
          v36 = v35;
          swift_beginAccess(v35 + 80, &v62, 0, 0);
          v37 = *(_QWORD *)(v36 + 80);
          swift_bridgeObjectRetain(v37);
          swift_release(v36);
          v38 = swift_beginAccess(v8, v61, 0, 0);
          v39 = swift_weakLoadStrong(v8, v38);
          if (v39)
          {
            v40 = v39;
            swift_beginAccess(v39 + 80, v60, 0, 0);
            v41 = *(_QWORD *)(v40 + 80);
            swift_bridgeObjectRetain(v41);
            swift_release(v40);
            v42 = *(_QWORD *)(v41 + 16);
            swift_bridgeObjectRelease(v41);
            v43 = swift_beginAccess(v8, v59, 0, 0);
            v44 = swift_weakLoadStrong(v8, v43);
            if (v44)
            {
              v45 = v44;
              swift_bridgeObjectRetain(v37);
              v47 = sub_1001BF654(v46);
              swift_bridgeObjectRelease(v37);
              v48 = sub_1000BB62C(v42, 0.0);
              sub_1000BA328((uint64_t)v47, v48, 1);
              swift_release(v45);
              swift_release(v47);
              swift_bridgeObjectRelease(v48);
            }
          }
          swift_bridgeObjectRelease(v37);
        }
        v49 = swift_beginAccess(v8, v58, 0, 0);
        v50 = swift_weakLoadStrong(v8, v49);
        if (v50)
        {
          v51 = v50;
          v52 = *(void **)(v50 + 144);
          if (v52)
          {
            v53 = v52;
            dispatch thunk of RepeatingTimer.suspend()();

            v54 = *(void **)(v51 + 144);
          }
          else
          {
            v54 = 0;
          }
          *(_QWORD *)(v51 + 144) = 0;
          swift_release(v51);

        }
      }
    }
  }
}

char *sub_1000BB62C(unint64_t a1, double a2)
{
  char *result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = (char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a1)
    return (char *)&_swiftEmptyArrayStorage;
  result = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Double);
  *((_QWORD *)result + 2) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

_QWORD *sub_1000BB71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;

  if (a3 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain(a2);
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain(a2);
      }
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      return &_swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

uint64_t sub_1000BB814()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  double v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59[24];
  char v60[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v54 = (char *)&v53 - v6;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1001B0DAC((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v1 + 10, v60, 1, 0);
  v18 = v1[10];
  v1[10] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = sub_1001B0DAC((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v1 + 11, v59, 1, 0);
  v20 = v1[11];
  v1[11] = v19;
  swift_bridgeObjectRelease(v20);
  if (v1[6])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v5, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v56);
    v22 = swift_retain_n(v1, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (_QWORD *)swift_slowAlloc(32, -1);
      v58 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_retain(v1);
      v27 = sub_1000B9AFC();
      v29 = v28;
      swift_release(v1);
      v57 = sub_1000906BC(v27, v29, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v25 + 4, v25 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "animator loop already running: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v5, v56);
  }
  else
  {
    v30 = sub_1000ABAF4(0, v21);
    static DispatchQoS.unspecified.getter(v30);
    v58 = _swiftEmptyArrayStorage;
    v31 = sub_1000BC860();
    v32 = sub_10009061C(&qword_10026D000);
    v33 = sub_1000BC8A8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v32, v33, v11, v31);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
    v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000017, 0x80000001001FE510, v16, v13, v10, 0);
    v35 = (void *)v1[6];
    v1[6] = v34;

    v36 = swift_allocObject(&unk_100239F08, 24, 7);
    swift_weakInit(v36 + 16, v1);
    v37 = (float)(1.0 / (float)(uint64_t)v1[8]);
    v38 = (void *)v1[6];
    v39 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
    v40 = v38;
    swift_retain(v36);
    v41 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v38, sub_1000BCC30, v36, v37);
    v42 = (void *)v1[7];
    v1[7] = v41;

    v43 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v56);
    v44 = swift_retain_n(v1, 2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (_QWORD *)swift_slowAlloc(32, -1);
      v58 = v48;
      *(_DWORD *)v47 = 136315138;
      v53 = v47 + 4;
      swift_retain(v1);
      v49 = sub_1000B9AFC();
      v51 = v50;
      swift_release(v1);
      v57 = sub_1000906BC(v49, v51, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v53, v47 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "animator loop started: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
    return swift_release(v36);
  }
}

uint64_t sub_1000BBDD8(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  v2 = swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1, v2);
  if (result)
  {
    v4 = result;
    sub_1000BA100();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000BBE2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v33 - v7;
  if (*(_QWORD *)(v0 + 48))
  {
    v9 = *(void **)(v0 + 56);
    if (v9)
    {
      v10 = v9;
      dispatch thunk of RepeatingTimer.suspend()();

      v9 = *(void **)(v1 + 56);
    }
    *(_QWORD *)(v1 + 56) = 0;

    v11 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;

    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    v12 = swift_retain_n(v1, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v34 = v2;
      v15 = swift_slowAlloc(12, -1);
      v33 = v3;
      v16 = (uint8_t *)v15;
      v17 = swift_slowAlloc(32, -1);
      v36 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_retain(v1);
      v18 = sub_1000B9AFC();
      v20 = v19;
      swift_release(v1);
      v35 = sub_1000906BC(v18, v20, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v16 + 4, v16 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "animator stopped: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    }

    swift_release_n(v1, 2);
    v31 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v32 = v8;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v0 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    v22 = swift_retain_n(v0, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(12, -1);
      v33 = v3;
      v26 = (uint8_t *)v25;
      v27 = swift_slowAlloc(32, -1);
      v36 = v27;
      v34 = v2;
      *(_DWORD *)v26 = 136315138;
      swift_retain(v0);
      v28 = sub_1000B9AFC();
      v30 = v29;
      swift_release(v1);
      v35 = sub_1000906BC(v28, v30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v26 + 4, v26 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "animator not running: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v6, v34);
    }

    swift_release_n(v0, 2);
    v31 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v32 = v6;
  }
  return v31(v32, v2);
}

void sub_1000BC1F8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void (*v8)(__n128);
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _BYTE v12[24];

  v1 = v0;
  v2 = *(id *)(v0 + 72);
  OS_dispatch_semaphore.wait()();

  v3 = *(void **)(v1 + 144);
  if (v3)
  {
    v4 = v3;
    dispatch thunk of RepeatingTimer.suspend()(v4);

    v3 = *(void **)(v1 + 144);
  }
  *(_QWORD *)(v1 + 144) = 0;

  *(_BYTE *)(v1 + 170) = 1;
  swift_beginAccess(v1 + 80, v12, 0, 0);
  v5 = *(_QWORD *)(v1 + 80);
  swift_retain(v1);
  swift_bridgeObjectRetain(v5);
  sub_1000BC934(v6, v1);
  swift_bridgeObjectRelease(v5);
  swift_release(v1);
  v7 = *(id *)(v1 + 72);
  OS_dispatch_semaphore.signal()();

  v8 = *(void (**)(__n128))(v1 + 104);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + 112);
    v10 = *(_QWORD *)(v1 + 80);
    sub_1000BC8F4((uint64_t)v8, v9);
    v11 = swift_bridgeObjectRetain(v10);
    v8(v11);
    sub_1000B1410((uint64_t)v8, v9);
    swift_bridgeObjectRelease(v10);
  }
}

uint64_t sub_1000BC2F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(void **)(v0 + 144);
  if (v2)
  {
    v3 = v2;
    dispatch thunk of RepeatingTimer.suspend()();

    v2 = *(void **)(v1 + 144);
  }
  *(_QWORD *)(v1 + 144) = 0;

  sub_1000BBE2C();
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
  sub_1000B1410(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
  sub_1000B1410(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));

  v4 = v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger;
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v1;
}

uint64_t sub_1000BC3BC()
{
  uint64_t v0;

  sub_1000BC2F8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BC3E0()
{
  return type metadata accessor for VelocityAnimator(0);
}

uint64_t type metadata accessor for VelocityAnimator(uint64_t a1)
{
  uint64_t result;

  result = qword_10026C848;
  if (!qword_10026C848)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VelocityAnimator);
  return result;
}

uint64_t sub_1000BC424(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[20];

  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[1] = &unk_1001DEDB8;
  v4[2] = &unk_1001DEDD0;
  v4[3] = &unk_1001DEDE8;
  v4[4] = &unk_1001DEDE8;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = &unk_1001DEE00;
  v4[11] = &unk_1001DEE00;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13] = &unk_1001DEDE8;
  v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[16] = &unk_1001DEDD0;
  v4[17] = &unk_1001DEDD0;
  v4[18] = &unk_1001DEDD0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[19] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 20, v4, a1 + 80);
  }
  return result;
}

unint64_t sub_1000BC504()
{
  return sub_1000B9AFC();
}

uint64_t sub_1000BC524(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v8 = v7;
  v43 = a6;
  v44 = a7;
  v41 = a4;
  v42 = a5;
  v46 = a2;
  v47 = a3;
  v45 = a1;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 20;
  *(_QWORD *)(v8 + 72) = dispatch_semaphore_create(1);
  *(_QWORD *)(v8 + 80) = sub_1001B0DAC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v8 + 88) = sub_1001B0DAC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v8 + 96) = 0x4018000000000000;
  v20 = sub_1000ABAF4(0, v19);
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  static DispatchQoS.unspecified.getter(v20);
  v48 = _swiftEmptyArrayStorage;
  v21 = sub_1000BC860();
  v22 = sub_10009061C(&qword_10026D000);
  v23 = sub_1000BC8A8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v22, v23, v13, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  *(_QWORD *)(v8 + 152) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001001FE490, v18, v15, v12, 0);
  *(_QWORD *)(v8 + 160) = 0x4000000000000000;
  *(_WORD *)(v8 + 168) = 0;
  *(_BYTE *)(v8 + 170) = 0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x726F74616D696E61, 0xE800000000000000);
  v24 = *(_QWORD *)(v8 + 104);
  v25 = *(_QWORD *)(v8 + 112);
  v26 = v41;
  v27 = v42;
  *(_QWORD *)(v8 + 104) = v41;
  *(_QWORD *)(v8 + 112) = v27;
  sub_1000BC8F4(v26, v27);
  sub_1000B1410(v24, v25);
  v28 = *(_QWORD *)(v8 + 120);
  v29 = *(_QWORD *)(v8 + 128);
  v30 = v43;
  v31 = v44;
  *(_QWORD *)(v8 + 120) = v43;
  *(_QWORD *)(v8 + 128) = v31;
  sub_1000BC8F4(v30, v31);
  sub_1000B1410(v28, v29);
  *(_DWORD *)(v8 + 16) = v45;
  v32 = v47;
  *(_QWORD *)(v8 + 24) = v46;
  *(_QWORD *)(v8 + 32) = v32;
  sub_1000BB814();
  v33 = swift_allocObject(&unk_100239F08, 24, 7);
  swift_weakInit(v33 + 16, v8);
  v34 = *(double *)(v8 + 160) * 0.5;
  v35 = *(void **)(v8 + 152);
  v36 = swift_allocObject(&unk_100239F30, 32, 7);
  *(_QWORD *)(v36 + 16) = v33;
  *(_QWORD *)(v36 + 24) = v8;
  objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
  v37 = v35;
  swift_retain(v33);
  swift_retain(v8);
  v38 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v35, sub_1000BC92C, v36, v34);
  v39 = *(void **)(v8 + 144);
  *(_QWORD *)(v8 + 144) = v38;
  swift_release(v33);

  return v8;
}

unint64_t sub_1000BC860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C530;
  if (!qword_10026C530)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10026C530);
  }
  return result;
}

unint64_t sub_1000BC8A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C540;
  if (!qword_10026C540)
  {
    v1 = sub_100090F6C(&qword_10026D000);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10026C540);
  }
  return result;
}

uint64_t sub_1000BC8F4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000BC904()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BC92C()
{
  uint64_t v0;

  sub_1000BB150(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000BC934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int64_t v33;
  _BYTE v35[24];
  _QWORD *v36;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (_QWORD *)(a2 + 80);
  v33 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
    }
    else
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_38;
      if (v10 >= v33)
        return swift_release(a1);
      v11 = *(_QWORD *)(v32 + 8 * v10);
      ++v6;
      if (!v11)
      {
        v6 = v10 + 1;
        if (v10 + 1 >= v33)
          return swift_release(a1);
        v11 = *(_QWORD *)(v32 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 2;
          if (v10 + 2 >= v33)
            return swift_release(a1);
          v11 = *(_QWORD *)(v32 + 8 * v6);
          if (!v11)
          {
            v6 = v10 + 3;
            if (v10 + 3 >= v33)
              return swift_release(a1);
            v11 = *(_QWORD *)(v32 + 8 * v6);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v33)
                return swift_release(a1);
              v11 = *(_QWORD *)(v32 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v6 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_39;
                  if (v6 >= v33)
                    return swift_release(a1);
                  v11 = *(_QWORD *)(v32 + 8 * v6);
                  ++v12;
                  if (v11)
                    goto LABEL_23;
                }
              }
              v6 = v12;
            }
          }
        }
      }
LABEL_23:
      v4 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v15 = *v13;
    v14 = v13[1];
    swift_beginAccess(v5, v35, 33, 0);
    swift_bridgeObjectRetain_n(v14, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v36 = (_QWORD *)*v5;
    v17 = v36;
    *v5 = 0x8000000000000000;
    v19 = sub_100145264(v15, v14);
    v20 = v17[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v17[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v36;
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1001BD69C();
        v26 = v36;
        if ((v23 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1001B5FD0(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_100145264(v15, v14);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_40;
      v19 = v24;
      v26 = v36;
      if ((v23 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v26[7] + 8 * v19) = 0;
        goto LABEL_5;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v15;
    v27[1] = v14;
    *(_QWORD *)(v26[7] + 8 * v19) = 0;
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_37;
    v26[2] = v30;
    swift_bridgeObjectRetain(v14);
LABEL_5:
    v7 = *v5;
    *v5 = v26;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
    swift_endAccess(v35);
    swift_bridgeObjectRelease(v14);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000BCC30()
{
  uint64_t v0;

  return sub_1000BBDD8(v0);
}

uint64_t sub_1000BCC40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BCC70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BCCD0, 0, 0);
}

uint64_t sub_1000BCCD0(__n128 a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  Strong = swift_weakLoadStrong(*(_QWORD *)(v1 + 24) + 16, a1);
  if (!Strong)
    goto LABEL_14;
  v3 = Strong;
  v4 = *(void **)(Strong + 32);
  *(_QWORD *)(v1 + 56) = v4;
  v5 = v4;
  swift_release(v3);
  if (!v4)
    goto LABEL_14;
  v7 = objc_opt_self(HAPAccessoryServerBTLE, v6);
  v8 = (void *)swift_dynamicCastObjCClass(v5, v7);
  if (!v8)
  {

LABEL_14:
    v44 = type metadata accessor for Errors(0);
    v45 = sub_10009F444();
    swift_allocError(v44, v45, 0, 0);
    *v46 = 0;
    v46[1] = 0xE000000000000000;
    v47 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, enum case for Errors.AccessoryServerNil(_:), v44);
    swift_willThrow(v47);
LABEL_15:
    swift_task_dealloc(*(_QWORD *)(v1 + 48));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "primaryAccessory");
  if (!v10)
    goto LABEL_16;
  v12 = v10;
  v13 = (void *)objc_opt_self(CBUUID, v11);
  v14 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v15 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v15 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v15 + 32) = 568;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v15);
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = objc_msgSend(v13, "UUIDWithString:", v18);

  v20 = objc_msgSend(v19, "UUIDString");
  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
  }
  v23 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v23 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v23 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v23 + 32) = 567;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v23);
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v27 = objc_msgSend(v13, "UUIDWithString:", v26);

  v28 = objc_msgSend(v27, "UUIDString");
  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v30 = v29;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
  }
  v31 = objc_msgSend(v12, "characteristicOfType:serviceType:", v20, v28, 1, 2);
  *(_QWORD *)(v1 + 64) = v31;

  if (!v31)
  {
LABEL_16:
    v48 = type metadata accessor for Errors(0);
    v49 = sub_10009F444();
    swift_allocError(v48, v49, 0, 0);
    *v50 = 0xD00000000000002DLL;
    v50[1] = 0x80000001001FE6E0;
    v51 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for Errors.NotFound(_:), v48);
    swift_willThrow(v51);

    goto LABEL_15;
  }
  v32 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 40) + 16))(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, *(_QWORD *)(v1 + 32));
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Reading supported diagnostics snapshot...", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
  v37 = *(_QWORD *)(v1 + 40);
  v36 = *(_QWORD *)(v1 + 48);
  v39 = *(_QWORD *)(v1 + 24);
  v38 = *(_QWORD *)(v1 + 32);

  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  v40 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v40;
  v40[2] = v9;
  v40[3] = v31;
  v40[4] = v39;
  v41 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v41;
  v42 = sub_10009061C(&qword_10026CD90);
  *v41 = v1;
  v41[1] = sub_1000BD198;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, 0, 0, 0xD000000000000019, 0x80000001001FE710, sub_1000BF8CC, v40, v42);
}

uint64_t sub_1000BD198()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000BD250;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_1000BD204;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BD204()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);

  v3 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000BD250()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(void **)(v0 + 56);

  swift_task_dealloc(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BD29C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v8 = sub_10009061C(&qword_10026CD98);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10009061C(&qword_10026C340);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001DE6A0;
  *(_QWORD *)(v12 + 32) = a3;
  aBlock[0] = v12;
  specialized Array._endMutation()(v12);
  sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
  v13 = a3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(aBlock[0]);
  v15 = *(void **)(a4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100239FE0, v17 + v10, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_1000BF940;
  v23 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100177F4C;
  aBlock[3] = &unk_100239FF8;
  v19 = _Block_copy(aBlock);
  v20 = v23;
  v21 = v15;
  swift_release(v20);
  objc_msgSend(a2, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v21, v19, 0.0);
  _Block_release(v19);

}

uint64_t sub_1000BD470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a2)
  {
    v9 = a2;
    swift_errorRetain(a2);
LABEL_3:
    v2 = sub_10009061C(&qword_10026CD98);
    return CheckedContinuation.resume(throwing:)(&v9, v2);
  }
  if (!a1)
  {
    v5 = type metadata accessor for Errors(0);
    v6 = sub_10009F444();
    v7 = swift_allocError(v5, v6, 0, 0);
    *v8 = 0xD000000000000038;
    v8[1] = 0x80000001001FE750;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v8, enum case for Errors.CharacteristicReadWriteFailure(_:), v5);
    v9 = v7;
    goto LABEL_3;
  }
  v9 = a1;
  swift_bridgeObjectRetain(a1);
  v4 = sub_10009061C(&qword_10026CD98);
  return CheckedContinuation.resume(returning:)(&v9, v4);
}

uint64_t sub_1000BD554(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(dword_10026CBFC);
  v2[11] = v5;
  *v5 = v2;
  v5[1] = sub_1000BD5C4;
  return sub_1000BCC70();
}

uint64_t sub_1000BD5C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 88);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(v4[10]);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    v4[12] = a1;
    v8 = (_QWORD *)swift_task_alloc(dword_10026CC14);
    v4[13] = v8;
    *v8 = v6;
    v8[1] = sub_1000BD674;
    v9 = v4[7];
    v8[13] = a1;
    v8[14] = v9;
    return swift_task_switch(sub_1000BEC48, 0, 0);
  }
}

uint64_t sub_1000BD674()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 104);
  v5 = *v1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (!v0)
    return swift_task_switch(sub_1000BD6F8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 80));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000BD6F8()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[9] + 16))(v0[10], v0[7] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v0[8]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Initiating Diagnostics transfer...", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = v0[9];
  v5 = v0[10];
  v7 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = (uint64_t **)swift_task_alloc(dword_10026CC0C);
  v0[14] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_1000BD7F0;
  return sub_1000BDAEC(v0[6]);
}

uint64_t sub_1000BD7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = (_QWORD *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v5 = v4[14];
  v4[15] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000BD9A4;
  else
    v6 = sub_1000BD85C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000BD85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v3 = dword_10026EAFC;
    swift_retain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_1000BD8EC;
    return sub_100141F3C();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v1 + 32) = 0;
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v6);
  }
}

uint64_t sub_1000BD8EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release(v1);
  return swift_task_switch(sub_1000BD948, 0, 0);
}

uint64_t sub_1000BD948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v1 + 32) = 0;
  swift_release(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

uint64_t sub_1000BD9A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v1 + 144) = v3;
  if (v3)
  {
    v4 = dword_10026EAFC;
    swift_retain(v3);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v1 + 152) = v5;
    *v5 = v1;
    v5[1] = sub_1000BDA3C;
    return sub_100141F3C();
  }
  else
  {
    *(_QWORD *)(v2 + 32) = 0;
    swift_willThrow(a1);
    swift_task_dealloc(*(_QWORD *)(v1 + 80));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000BDA3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release(v1);
  return swift_task_switch(sub_1000BDA98, 0, 0);
}

uint64_t sub_1000BDA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  v3 = swift_release(v2);
  swift_willThrow(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BDAEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[6] = swift_task_alloc(v5);
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000BDB74, 0, 0);
}

uint64_t sub_1000BDB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double (*v16)(uint64_t, uint64_t);
  __n128 v17;
  uint64_t Strong;
  uint64_t v19;
  void *v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  *(_QWORD *)(v0 + 80) = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  v6 = v4 + v5;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 88) = v7;
  v8 = v7(v1, v4 + v5, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handling Diagnostics transfer request", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 32);
  v14 = *(_QWORD *)(v0 + 40);
  v15 = *(_QWORD *)(v0 + 24);

  v16 = *(double (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v0 + 96) = v16;
  v17.n128_f64[0] = v16(v12, v13);
  Strong = swift_weakLoadStrong(v15 + 16, v17);
  *(_QWORD *)(v0 + 104) = Strong;
  if (!Strong)
  {
    v39 = type metadata accessor for Errors(0);
    v40 = sub_10009F444();
    swift_allocError(v39, v40, 0, 0);
    *v41 = 0xD000000000000010;
    v41[1] = 0x80000001001FE5F0;
    v42 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, enum case for Errors.AccessoryServerNil(_:), v39);
    swift_willThrow(v42);
LABEL_16:
    v51 = *(_QWORD *)(v0 + 64);
    v53 = *(_QWORD *)(v0 + 48);
    v52 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v19 = Strong;
  v20 = *(void **)(Strong + 32);
  if (!v20 || (objc_msgSend(v20, "isReachable") & 1) == 0)
  {
    v28 = type metadata accessor for Errors(0);
    v29 = sub_10009F444();
    swift_allocError(v28, v29, 0, 0);
    v31 = v30;
    _StringGuts.grow(_:)(19);
    v32 = *(id *)(v19 + 24);
    v33 = objc_msgSend(v32, "description");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    swift_bridgeObjectRelease(0xE000000000000000);
    v37._countAndFlagsBits = 0xD000000000000011;
    v37._object = (void *)0x80000001001FE610;
    String.append(_:)(v37);
    *v31 = v34;
    v31[1] = v36;
    v38 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v31, enum case for Errors.AccessoryNotReachable(_:), v28);
LABEL_15:
    swift_willThrow(v38);
    swift_release(v19);
    goto LABEL_16;
  }
  result = sub_1000BE484(*(_QWORD *)(v0 + 16));
  if ((result & 1) == 0)
  {
    v43 = v7(*(_QWORD *)(v0 + 64), v6, *(_QWORD *)(v0 + 32));
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Diagnostics transfer failed as the request is not supported.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }
    v47 = *(_QWORD *)(v0 + 64);
    v48 = *(_QWORD *)(v0 + 32);

    v16(v47, v48);
    v23 = type metadata accessor for Errors(0);
    v49 = sub_10009F444();
    swift_allocError(v23, v49, 0, 0);
    v26 = v50;
    *v50 = 0xD00000000000003CLL;
    v50[1] = 0x80000001001FE630;
    v27 = (unsigned int *)&enum case for Errors.OperationNotSupported(_:);
    goto LABEL_14;
  }
  v22 = *(_QWORD **)(v0 + 24);
  if (v22[4])
  {
    v23 = type metadata accessor for Errors(0);
    v24 = sub_10009F444();
    swift_allocError(v23, v24, 0, 0);
    v26 = v25;
    *v25 = 0xD00000000000001BLL;
    v25[1] = 0x80000001001FE6C0;
    v27 = (unsigned int *)&enum case for Errors.OperationInProgress(_:);
LABEL_14:
    v38 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v26, *v27, v23);
    goto LABEL_15;
  }
  v54 = (void *)v22[5];
  if (v54)
  {
    v55 = *(_QWORD *)(v0 + 56);
    v76 = *(_QWORD *)(v0 + 32);
    v56 = (void *)v22[3];
    v57 = type metadata accessor for AccessoryDiagnosticsSession(0);
    swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
    v58 = v56;
    v59 = v54;
    v60 = swift_retain(v19);
    v61 = sub_100145EB4(v60, (uint64_t)v58, (uint64_t)v59);
    swift_release(v19);
    v62 = v22[4];
    v22[4] = v61;
    swift_release(v62);
    v63 = v7(v55, v6, v76);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Setting up a Diagnostics transfer session", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }
    v67 = *(_QWORD *)(v0 + 56);
    v68 = *(_QWORD *)(v0 + 32);

    v16(v67, v68);
    v69 = (_QWORD *)v22[4];
    *(_QWORD *)(v0 + 112) = v69;
    if (!v69)
    {
      v23 = type metadata accessor for Errors(0);
      v74 = sub_10009F444();
      swift_allocError(v23, v74, 0, 0);
      v26 = v75;
      *v75 = 0xD000000000000049;
      v75[1] = 0x80000001001FE670;
      v27 = (unsigned int *)&enum case for Errors.CommunicationFailure(_:);
      goto LABEL_14;
    }
    v70 = *(_QWORD *)(v0 + 16);
    v71 = v69[17];
    v69[17] = v70;
    swift_retain(v69);
    swift_retain(v70);
    swift_release(v71);
    v72 = v69[19];
    v69[18] = 0;
    v69[19] = 0xE000000000000000;
    swift_bridgeObjectRelease(v72);
    v73 = (_QWORD *)swift_task_alloc(dword_10026EB04);
    *(_QWORD *)(v0 + 120) = v73;
    *v73 = v0;
    v73[1] = sub_1000BE174;
    return sub_1001429B8(*(_QWORD *)(v0 + 16));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BE174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BE2C4;
  else
    v3 = sub_1000BE1D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BE1D8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 88))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24) + *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 32));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Diagnostics transfer session was setup successfully", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);

  v5(v6, v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10026CC1C);
  *(_QWORD *)(v0 + 136) = v8;
  *v8 = v0;
  v8[1] = sub_1000BE32C;
  return sub_1000BF0B4();
}

uint64_t sub_1000BE2C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BE32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 136);
  *(_QWORD *)(*v3 + 144) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000BE41C;
  }
  else
  {
    *(_QWORD *)(v6 + 152) = a2;
    *(_QWORD *)(v6 + 160) = a1;
    v8 = sub_1000BE3A4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000BE3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000BE41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BE484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  __n128 v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _DWORD *v42;
  __n128 v43;
  _DWORD *v44;
  uint64_t Strong;
  uint64_t v46;
  id v47;
  uint8_t *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _DWORD *v56;
  __n128 v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint8_t *v62;
  _QWORD *v63;
  os_log_type_t v64;
  os_log_t v65;
  uint64_t v66;
  _QWORD *v67;
  os_log_type_t v68;
  os_log_t v69;
  uint64_t v70;
  _QWORD *v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint8_t *v76;
  os_log_t v77;
  id v78;
  uint64_t v79;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v74 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v74 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v74 - v15;
  v17 = *(void **)(v2 + 40);
  if (!v17)
  {
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v74 - v15, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Diagnostic settings not configured yet", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    return 0;
  }
  v18 = *(_BYTE *)(a1 + 24);
  v19 = v17;
  v20 = v19;
  if ((v18 & 1) != 0 || (v21 = objc_msgSend(v19, "options")) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v37 = objc_msgSend(v20, "options");
      if (v37)
      {
        v38 = v37;
        if ((objc_msgSend(v37, "value") & 1) == 0)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
          v39 = swift_retain_n(v2, 2);
          v40 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v40, v41))
          {
            v77 = v40;
            v42 = (_DWORD *)swift_slowAlloc(12, -1);
            v75 = (_QWORD *)swift_slowAlloc(8, -1);
            v43.n128_u64[0] = 138412290;
            v76 = (uint8_t *)v42;
            *v42 = 138412290;
            v44 = v42 + 1;
            Strong = swift_weakLoadStrong(v2 + 16, v43);
            if (Strong)
            {
              v46 = Strong;
              v47 = *(id *)(Strong + 24);
              swift_release(v46);
              v48 = v76;
              v78 = v47;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v44, v76 + 12);
            }
            else
            {
              v48 = v76;
              v78 = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v44, v76 + 12);
              v47 = 0;
            }
            v67 = v75;
            *v75 = v47;
            swift_release_n(v2, 2);
            v68 = v41;
            v69 = v77;
            _os_log_impl((void *)&_mh_execute_header, v77, v68, "Delay requested, but not supported on the accessory %@", v48, 0xCu);
            v70 = sub_10009061C(&qword_10026BC40);
            swift_arrayDestroy(v67, 1, v70);
            swift_slowDealloc(v67, -1, -1);
            swift_slowDealloc(v48, -1, -1);

          }
          else
          {

            swift_release_n(v2, 2);
          }

          (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
          return 0;
        }

      }
    }
    v49 = objc_msgSend(v20, "type");
    if (!v49)
    {
LABEL_28:

      return 1;
    }
    v50 = v49;
    if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    {
      v51 = *(_QWORD *)(a1 + 48);
      if (v51 == 1)
      {
        if ((objc_msgSend(v49, "value") & 1) != 0)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
          v53 = swift_retain_n(v2, 2);
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v54, v55))
          {
            v77 = v54;
            v56 = (_DWORD *)swift_slowAlloc(12, -1);
            v75 = (_QWORD *)swift_slowAlloc(8, -1);
            v57.n128_u64[0] = 138412290;
            v76 = (uint8_t *)v56;
            *v56 = 138412290;
            v58 = v56 + 1;
            v59 = swift_weakLoadStrong(v2 + 16, v57);
            if (v59)
            {
              v60 = v59;
              v61 = *(id *)(v59 + 24);
              swift_release(v60);
              v62 = v76;
              v78 = v61;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v58, v76 + 12);
            }
            else
            {
              v62 = v76;
              v78 = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v58, v76 + 12);
              v61 = 0;
            }
            v71 = v75;
            *v75 = v61;
            swift_release_n(v2, 2);
            v72 = v77;
            _os_log_impl((void *)&_mh_execute_header, v77, v55, "Manufacturer snapshot requested, but not supported on the accessory %@", v62, 0xCu);
            v73 = sub_10009061C(&qword_10026BC40);
            swift_arrayDestroy(v71, 1, v73);
            swift_slowDealloc(v71, -1, -1);
            swift_slowDealloc(v62, -1, -1);

          }
          else
          {

            swift_release_n(v2, 2);
          }

          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          return 0;
        }
        if ((*(_BYTE *)(a1 + 56) & 1) != 0)
          goto LABEL_27;
        v51 = *(_QWORD *)(a1 + 48);
      }
      if (v51 == 2)
        objc_msgSend(v50, "value");
    }
LABEL_27:

    goto LABEL_28;
  }
  v22 = v21;
  if ((objc_msgSend(v21, "value") & 2) != 0)
  {

    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
  v23 = swift_retain_n(v2, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v77 = v24;
    v26 = (_DWORD *)swift_slowAlloc(12, -1);
    v75 = (_QWORD *)swift_slowAlloc(8, -1);
    v27.n128_u64[0] = 138412290;
    v76 = (uint8_t *)v26;
    *v26 = 138412290;
    v28 = v26 + 1;
    v29 = swift_weakLoadStrong(v2 + 16, v27);
    if (v29)
    {
      v30 = v29;
      v31 = *(id *)(v29 + 24);
      swift_release(v30);
      v32 = v76;
      v78 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v28, v76 + 12);
    }
    else
    {
      v32 = v76;
      v78 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v28, v76 + 12);
      v31 = 0;
    }
    v63 = v75;
    *v75 = v31;
    swift_release_n(v2, 2);
    v64 = v25;
    v65 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, v64, "Custom max log size requested, but not supported on the accessory %@", v32, 0xCu);
    v66 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v63, 1, v66);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  return 0;
}

uint64_t sub_1000BEBE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v1;
  return swift_task_switch(sub_1000BEC48, 0, 0);
}

uint64_t sub_1000BEC48()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  Class isa;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
    goto LABEL_15;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v2 = *(id *)(v1 + 32);
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "value");

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 48));
    swift_unknownObjectRelease(v4);
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_10009AEEC(v0 + 48, v0 + 16);
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_1000BF88C(v0 + 16);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(v0 + 80, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_15:
    v18 = type metadata accessor for Errors(0);
    v19 = sub_10009F444();
    swift_allocError(v18, v19, 0, 0);
    *v20 = 0xD000000000000025;
    v20[1] = 0x80000001001FE5C0;
    v21 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, enum case for Errors.CommunicationFailure(_:), v18);
    swift_willThrow(v21);
LABEL_16:
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 120) = v6;
  *(_QWORD *)(v0 + 128) = v7;
  v8 = (void *)objc_opt_self(HAPSupportedDiagnosticsSnapshot, v5);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 96) = 0;
  v10 = objc_msgSend(v8, "parsedFromData:error:", isa, v0 + 96);
  *(_QWORD *)(v0 + 136) = v10;

  v11 = *(void **)(v0 + 96);
  if (!v10)
  {
    v24 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v25);
    sub_10009B2FC(v6, v7);
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(void **)(v12 + 40);
  if (v13)
  {
    sub_100090EE8(0, &qword_10026CD88, &off_100235E70);
    v14 = v11;
    v15 = v10;
    v16 = v13;
    v17 = static NSObject.== infix(_:_:)(v16, v15);

    if ((v17 & 1) != 0)
    {
      sub_10009B2FC(v6, v7);
LABEL_24:

      v22 = *(uint64_t (**)(void))(v0 + 8);
      return v22();
    }
    v12 = *(_QWORD *)(v0 + 112);
  }
  else
  {
    v26 = v11;
  }
  v27 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v0 + 144) = v27;
  if (!v27)
  {
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v12 + 32) = 0;
    sub_10009B2FC(v32, v30);
    v15 = *(id *)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v31;
    goto LABEL_24;
  }
  v28 = dword_10026EAFC;
  swift_retain(v27);
  v29 = (_QWORD *)swift_task_alloc(v28);
  *(_QWORD *)(v0 + 152) = v29;
  *v29 = v0;
  v29[1] = sub_1000BEF98;
  return sub_100141F3C();
}

uint64_t sub_1000BEF98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release(v1);
  return swift_task_switch(sub_1000BF020, 0, 0);
}

uint64_t sub_1000BF020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v2 + 32) = 0;
  swift_release(v3);
  sub_10009B2FC(v1, v4);
  v6 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v5;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BF0B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[6] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BF114, 0, 0);
}

uint64_t sub_1000BF114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, *(_QWORD *)(v0 + 56));
  v2 = swift_retain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v23 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 48);
    v24 = *(_QWORD *)(v0 + 56);
    v25 = *(_QWORD *)(v0 + 72);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v26 = v7;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v5 + 32);
    v8 = sub_10009061C(&qword_10026CD78);
    v9 = Optional.debugDescription.getter(v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_1000906BC(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Read Diagnostics data for session %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 56);
    swift_release_n(*(_QWORD *)(v0 + 48), 2);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 32);
  *(_QWORD *)(v0 + 80) = v15;
  if (v15)
  {
    v16 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    swift_retain(v15);
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v0 + 88) = v17;
    *v17 = v0;
    v17[1] = sub_1000BF40C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x746144646165725FLL, 0xEB00000000292861, sub_1000BF820, v15, &type metadata for String);
  }
  else
  {
    v19 = type metadata accessor for Errors(0);
    v20 = sub_10009F444();
    swift_allocError(v19, v20, 0, 0);
    *v21 = 0xD00000000000001ALL;
    v21[1] = 0x80000001001FE5A0;
    v22 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for Errors.CommunicationFailure(_:), v19);
    swift_willThrow(v22);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000BF40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BF4C0;
  else
    v3 = sub_1000BF470;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BF470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t sub_1000BF4C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BF4FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = sub_10009061C(&qword_10026CD80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_100239FB8, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1001431C0((uint64_t)sub_1000BF834, v7);
  return swift_release(v7);
}

uint64_t sub_1000BF5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  if (a1)
  {
    v10[0] = a1;
    swift_errorRetain(a1);
LABEL_3:
    v3 = sub_10009061C(&qword_10026CD80);
    return CheckedContinuation.resume(throwing:)(v10, v3);
  }
  if (!a3)
  {
    v6 = type metadata accessor for Errors(0);
    v7 = sub_10009F444();
    v8 = swift_allocError(v6, v7, 0, 0);
    *v9 = 0x68746150206C696ELL;
    v9[1] = 0xE800000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v9, enum case for Errors.CommunicationFailure(_:), v6);
    v10[0] = v8;
    goto LABEL_3;
  }
  v10[0] = a2;
  v10[1] = a3;
  swift_bridgeObjectRetain(a3);
  v5 = sub_10009061C(&qword_10026CD80);
  return CheckedContinuation.resume(returning:)(v10, v5);
}

uint64_t sub_1000BF6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_weakDestroy(v0 + 16);

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BF74C()
{
  return type metadata accessor for AccessoryDiagnosticsManager(0);
}

uint64_t type metadata accessor for AccessoryDiagnosticsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10026CBE8;
  if (!qword_10026CBE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDiagnosticsManager);
  return result;
}

uint64_t sub_1000BF790(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1001DEE98;
  v4[3] = &unk_1001DEE98;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000BF820(uint64_t a1)
{
  return sub_1000BF4FC(a1);
}

uint64_t sub_1000BF828()
{
  return sub_1000BF8E4(&qword_10026CD80);
}

uint64_t sub_1000BF834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10009061C(&qword_10026CD80);
  return sub_1000BF5F8(a1, a2, a3);
}

uint64_t sub_1000BF88C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C(&qword_10026E5F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000BF8CC(uint64_t a1)
{
  uint64_t v1;

  sub_1000BD29C(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000BF8D8()
{
  return sub_1000BF8E4(&qword_10026CD98);
}

uint64_t sub_1000BF8E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10009061C(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000BF940(uint64_t a1, uint64_t a2)
{
  sub_10009061C(&qword_10026CD98);
  return sub_1000BD470(a1, a2);
}

uint64_t sub_1000BF990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BF9A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

char *sub_1000BF9A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  objc_class *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;
  _QWORD *v46;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard] = 0;
  v10 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x726567616E616DLL, 0xE700000000000000);
  v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager__performingGeneralScan] = 0;
  v11 = &v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_cachePath];
  v12 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server;
  *(_QWORD *)&v10[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessoryServer(0)), "init");
  v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue;
  v15 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v15);
  v46 = _swiftEmptyArrayStorage;
  v16 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10009061C(&qword_10026D000);
  v18 = sub_1000D5BAC((unint64_t *)&qword_10026C540, &qword_10026D000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v17, v18, v4, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v44);
  *(_QWORD *)&v10[v14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001001FEAD0, v9, v6, v3, 0);
  v19 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  *(_QWORD *)&v10[v19] = dispatch_semaphore_create(1);
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiThreshold] = -70;
  v20 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager;
  *(_QWORD *)&v10[v20] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateManager(0)), "init");
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectTimeout] = 0x4014000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectCheckRate] = 0x3FC999999999999ALL;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectTimer] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  v21 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  v22 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v23 = swift_allocObject(v22, 20, 7);
  *(_DWORD *)(v23 + 16) = 0;
  *(_QWORD *)&v10[v21] = v23;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_discoverDockTimeout] = 0x4008000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_discoverDockInterval] = 0x3FC999999999999ALL;
  v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
  v24 = &v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
  v25 = enum case for DockStatus.Undocked(_:);
  v26 = type metadata accessor for DockStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup] = 0;
  v27 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap;
  *(_QWORD *)&v10[v27] = sub_1001B12A4((uint64_t)_swiftEmptyArrayStorage);
  v28 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
  v30 = type metadata accessor for RSSITransaction(0, v29);
  v31 = (_QWORD *)swift_allocObject(v30, 48, 7);
  v31[2] = &_swiftEmptySetSingleton;
  v31[3] = 0;
  v31[4] = 0;
  v31[5] = 0;
  *(_QWORD *)&v10[v28] = v31;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimeout] = 0x4014000000000000;
  v32 = *(void **)&v10[v14];
  v33 = objc_allocWithZone((Class)type metadata accessor for DockDetector(0));
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector] = DockDetector.init(workQueue:)(v32);

  v34 = (objc_class *)type metadata accessor for AccessoryManager(0);
  v45.receiver = v10;
  v45.super_class = v34;
  v35 = (char *)objc_msgSendSuper2(&v45, "init");
  v36 = (_QWORD *)swift_allocObject(v30, 48, 7);
  v36[2] = &_swiftEmptySetSingleton;
  v36[3] = 0;
  v36[4] = v35;
  v36[5] = &off_10023A028;
  v37 = *(_QWORD *)&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn];
  *(_QWORD *)&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn] = v36;
  v38 = v35;
  swift_release(v37);
  v39 = *(_QWORD *)&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  v40 = *(void **)(v39 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  *(_QWORD *)(v39 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager) = v35;

  return v38;
}

void sub_1000BFEB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _UNKNOWN **v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  int64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD v23[6];
  _BYTE v24[24];

  v4 = v1;
  v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v7 = *(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v8 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v24, 33, 0);
  swift_retain(a1);
  v9 = sub_1000D43E0(v8, a1);
  swift_release(a1);
  v10 = *(_QWORD *)(*v8 + 16);
  if (v10 < v9)
  {
    __break(1u);
  }
  else
  {
    sub_100172E9C(v9, v10);
    v9 = type metadata accessor for DaemonAccessory(0);
    v3 = &off_10023D728;
    v23[3] = v9;
    v23[4] = &off_10023D728;
    v23[0] = a1;
    v2 = (_QWORD *)*v8;
    swift_retain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    *v8 = (uint64_t)v2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  v2 = sub_1000E9578(0, v2[2] + 1, 1, v2);
  *v8 = (uint64_t)v2;
LABEL_3:
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
  {
    v2 = sub_1000E9578((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    *v8 = (uint64_t)v2;
  }
  v14 = sub_1000D4D38((uint64_t)v23, v9);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v16;
  v21 = v9;
  v22 = v3;
  *(_QWORD *)&v20 = v18;
  v2[2] = v13 + 1;
  sub_10009B340(&v20, (uint64_t)&v2[5 * v13 + 4]);
  sub_100090E88(v23);
  swift_endAccess(v24);
  v19 = *(id *)(v4 + v6);
  OS_dispatch_semaphore.signal()();

}

void sub_1000C00A8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t *v29;
  uint64_t *v30;
  id v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  char *v44;
  _QWORD v45[5];
  char v46[24];

  v3 = v2;
  v6 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v44 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  if (a1)
  {
    v42 = (char *)&v37 - v13;
    v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v15 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    v43 = a1;
    v16 = v15;
    OS_dispatch_semaphore.wait()();

    v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
    swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v46, 0, 0);
    v18 = *v17;
    v19 = *(_QWORD *)(*v17 + 16);
    if (v19)
    {
      v38 = v14;
      v39 = v3;
      v40 = a2;
      v20 = v18 + 32;
      v37 = v18;
      swift_bridgeObjectRetain(v18);
      v21 = &qword_10026EA20;
      v22 = &OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
      v41 = v9;
      v23 = v42;
      while (1)
      {
        sub_10009AFF4(v20, (uint64_t)v45);
        v24 = *(_QWORD *)(*sub_10009B038(v45, v45[3]) + 16);
        if (!v24)
          break;
        v25 = *(void **)(v24 + *v22);
        if (!v25)
          break;
        v26 = objc_msgSend(v25, "identifier");
        v27 = v44;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v28(v8, v27, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
          goto LABEL_5;
        v29 = v21;
        v30 = v22;
        v28(v23, v8, v9);
        v31 = objc_msgSend(v43, "identifier");
        v32 = v44;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v31) = static UUID.== infix(_:_:)(v23, v32);
        v33 = *(void (**)(char *, uint64_t))(v10 + 8);
        v34 = v32;
        v9 = v41;
        v33(v34, v41);
        if ((v31 & 1) != 0)
        {
          swift_bridgeObjectRelease(v37);
          v36 = *(id *)(v39 + v38);
          OS_dispatch_semaphore.signal()();

          v33(v23, v9);
          sub_10009AFF4((uint64_t)v45, v40);
          sub_100090E88(v45);
          return;
        }
        v33(v23, v9);
        v22 = v30;
        v21 = v29;
LABEL_6:
        sub_100090E88(v45);
        v20 += 40;
        if (!--v19)
        {
          swift_bridgeObjectRelease(v37);
          v3 = v39;
          a2 = v40;
          v14 = v38;
          goto LABEL_13;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_5:
      sub_10009B2C0((uint64_t)v8, v21);
      goto LABEL_6;
    }
LABEL_13:
    v35 = *(id *)(v3 + v14);
    OS_dispatch_semaphore.signal()();

  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

uint64_t sub_1000C03F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (a1 == 0xD000000000000025 && a2 == 0x80000001001FEAA0
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000025, 0x80000001001FEAA0, 0),
        (result & 1) != 0))
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn);
    swift_retain(v4);
    sub_1000DAB38();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000C0474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  void *object;
  NSString v33;
  uint64_t v34;
  uint64_t inited;
  NSString *v36;
  unint64_t v37;
  NSURL *v38;
  void *v39;
  void *v40;
  _OWORD *v41;
  Class isa;
  id v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  char v70[8];
  uint64_t v71;
  _BYTE v72[15];
  char v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77[48];
  char v78[24];

  v64 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10009061C(&qword_10026BF70);
  v12 = __chkstk_darwin(v11);
  v65 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v61 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v61 - v17;
  v61 = v1;
  v19 = v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_cachePath;
  swift_beginAccess(v19, v78, 0, 0);
  sub_1000D57C4(v19, (uint64_t)v18);
  v67 = v9;
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v68 = v8;
  LODWORD(v8) = v20(v18, 1, v8);
  sub_10009B2C0((uint64_t)v18, &qword_10026BF70);
  if ((_DWORD)v8 != 1)
    return sub_1000D57C4(v19, a1);
  v22 = v19;
  v23 = a1;
  v24 = (char *)objc_msgSend((id)objc_opt_self(NSFileManager, v21), "defaultManager");
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D610((uint64_t)v16);
  v25 = v68;
  if (v20(v16, 1, v68) == 1)
  {

    sub_10009B2C0((uint64_t)v16, &qword_10026BF70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v23, 1, 1, v25);
  }
  v27 = v67;
  v28 = v66;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v16, v25);
  v74 = 1701606498;
  v75 = 0xE400000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.isDirectory(_:), v4);
  v29 = sub_1000D4CF4();
  URL.append<A>(component:directoryHint:)(&v74, v7, &type metadata for String, v29);
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31 = v28;
  v30(v7, v4);
  swift_bridgeObjectRelease(v75);
  v73 = 0;
  object = URL.path(percentEncoded:)(1)._object;
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v24, "fileExistsAtPath:isDirectory:", v33, &v73);

  if ((object & 1) != 0)
    goto LABEL_8;
  v34 = sub_10009061C((uint64_t *)&unk_10026CFF0);
  inited = swift_initStackObject(v34, v77);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
  *(_QWORD *)(inited + 40) = 448;
  v36 = NSFilePosixPermissions;
  v37 = sub_1001B0EBC(inited);
  URL._bridgeToObjectiveC()(v38);
  v40 = v39;
  v41 = sub_1001A95C4(v37);
  swift_bridgeObjectRelease(v37);
  type metadata accessor for FileAttributeKey(0);
  sub_100090E1C((unint64_t *)&qword_10026C130, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE4CC);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  v74 = 0;
  LODWORD(v41) = objc_msgSend(v24, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v40, 1, isa, &v74);

  v43 = (id)v74;
  if ((_DWORD)v41)
  {
LABEL_8:
    v44 = v65;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v65, v31, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v44, 0, 1, v25);
    v19 = v22;
    swift_beginAccess(v22, &v74, 33, 0);
    sub_1000ACEA4((uint64_t)v44, v22, &qword_10026BF70);
    swift_endAccess(&v74);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v25);
    a1 = v23;
    return sub_1000D57C4(v19, a1);
  }
  v45 = v43;
  v65 = v24;
  v46 = _convertNSErrorToError(_:)(v43);

  swift_willThrow(v47);
  v48 = v63;
  v49 = v62;
  v50 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v61 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v64);
  swift_errorRetain(v46);
  v51 = swift_errorRetain(v46);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.error.getter();
  v54 = v53;
  if (os_log_type_enabled(v52, v53))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(64, -1);
    v76 = v56;
    *(_DWORD *)v55 = 136315394;
    swift_beginAccess(v31, &v74, 0, 0);
    LODWORD(v61) = v54;
    v57 = URL.path(percentEncoded:)(1);
    v71 = sub_1000906BC(v57._countAndFlagsBits, (unint64_t)v57._object, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease(v57._object);
    *(_WORD *)(v55 + 12) = 2080;
    swift_getErrorValue(v46, v70, v69);
    v58 = Error.localizedDescription.getter(v69[1], v69[2]);
    v60 = v59;
    v71 = sub_1000906BC(v58, v59, &v76);
    v25 = v68;
    v27 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease(v60);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v61, "Unable to create file storage directory %s: %s", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    swift_errorRelease(v46);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v64);
  }
  else
  {

    swift_errorRelease(v46);
    swift_errorRelease(v46);
    swift_errorRelease(v46);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v23, 1, 1, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v31, v25);
}

uint64_t sub_1000C0C28(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v10);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Re-pairing accessory...", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
  v18 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  v19 = swift_allocObject(&unk_10023A7B0, 32, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = v2;
  aBlock[4] = sub_1000D57BC;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023A7C8;
  v20 = _Block_copy(aBlock);
  v21 = v18;
  swift_retain(a1);
  static DispatchQoS.unspecified.getter(v2);
  v32 = _swiftEmptyArrayStorage;
  v22 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v24 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
  v25 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v31, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v25);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release(v34);
}

void sub_1000C0F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  char *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *oslog;

  if (!*(_BYTE *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired)
    && *(_BYTE *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24) != 2)
  {
    v4 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    v5 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock);
    swift_retain(v5);
    os_unfair_lock_lock(v5 + 4);
    swift_release(v5);
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing);
    *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing) = a1;
    swift_retain(a1);
    swift_release(v6);
    v7 = *(os_unfair_lock_s **)(a2 + v4);
    swift_retain(v7);
    os_unfair_lock_unlock(v7 + 4);
    swift_release(v7);
    v8 = *(char **)(a1 + 16);
    if (v8)
    {
      if (*(_QWORD *)&v8[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        v9 = qword_10026BC20;
        v10 = v8;
        if (v9 != -1)
          swift_once(&qword_10026BC20, sub_1001A3078);
        v11 = (void *)qword_1002757B0;
        v12 = swift_allocObject(&unk_10023A800, 32, 7);
        *(_QWORD *)(v12 + 16) = v11;
        *(_QWORD *)(v12 + 24) = v10;
        v13 = v10;
        v14 = v11;
        sub_1001A3584((uint64_t)sub_1000D5C58, v12);

        swift_release(v12);
      }
      else
      {
        v15 = v8;
        oslog = Logger.logObject.getter(v15);
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v16, "CB peripheral is nil", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

      }
    }
  }
}

id sub_1000C1130(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, char a7)
{
  NSNumber v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  NSNumber v25;
  NSNumber v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  char *v31;
  id v32;
  NSNumber v34;
  uint64_t v35;
  uint64_t v36;
  char v39;
  void *v40;

  sub_100090EE8(0, &qword_10026C380, NSNumber_ptr);
  v12.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v39 = a7;
  if ((a7 & 0xFE) == 6)
  {
    v13 = objc_msgSend(a1, "identifier");
    v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = a5;
    v16 = a6;
    v18 = v17;

    sub_1000CC5AC(v14, v18);
    v19 = v18;
    a6 = v16;
    a5 = v15;
    swift_bridgeObjectRelease(v19);
  }
  v20 = a1;
  v21 = objc_msgSend(v20, "identifier", swift_bridgeObjectRetain(a3).n128_f64[0]);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v35 = v23;
  v36 = v22;

  v34.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v24 = v12.super.super.isa;
  v25.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v26.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  sub_10009B27C(a5, a6);
  v27 = a3;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v28 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  v29 = objc_allocWithZone((Class)_HAPAccessoryServerBTLE200);
  v30 = v28;
  v31 = v40;
  v32 = sub_1000D3548(v20, a2, v27, v36, v35, v34.super.super.isa, v24, a4 & 1, v39, v25.super.super.isa, v26.super.super.isa, a5, a6, 0, v31, v30, 0, 0xE000000000000000, v29);
  objc_msgSend(v32, "setDelegate:queue:", *(_QWORD *)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server], *(_QWORD *)(*(_QWORD *)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server]+ OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue));

  return v32;
}

void sub_1000C1374(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  id v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  void *v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  id v74;
  char *v75;
  _QWORD *v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint8_t *v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  char *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  id v125;
  NSObject *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  uint8_t *v129;
  uint8_t *v130;
  id v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint8_t *v135;
  char *v136;
  char *v137;
  _QWORD *v138;
  void *v139;
  id v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  id v155;
  void *v156;
  void (*v157)(char *, _QWORD *);
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  void (*v162)(char *, char *, _QWORD *);
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint8_t *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  void *v183;
  id v184;
  char *v185;
  _QWORD *v186;
  uint64_t v187;
  char *v188;
  __int128 aBlock;
  __int128 v190;
  void (*v191)();
  uint64_t v192;
  _QWORD *v193;
  char v194[8];
  uint64_t v195;
  char v196[8];

  v177 = (void *)a5;
  v176 = a4;
  v178 = *a3;
  v11 = a3[2];
  v180 = a3[1];
  v175 = (uint8_t *)*((unsigned __int8 *)a3 + 24);
  v174 = *((unsigned __int8 *)a3 + 25);
  v173 = *((unsigned __int8 *)a3 + 26);
  v172 = (uint8_t *)*((unsigned __int8 *)a3 + 27);
  v179 = a3[4];
  v181 = a3[5];
  v12 = a3[6];
  v170 = type metadata accessor for DispatchWorkItemFlags(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for DispatchQoS(0);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v165 = (char *)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = (_QWORD *)type metadata accessor for Logger(0);
  v15 = *(v186 - 1);
  v16 = __chkstk_darwin(v186);
  v182 = (char *)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v164 = (char *)&v157 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v157 - v20;
  v22 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v22);
  v24 = (char *)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v171 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v185 = (char *)&v157 - v29;
  v183 = a1;
  v30 = sub_1000E1190(a6, a7);
  if (!v30)
    return;
  v187 = v26;
  v184 = v30;
  swift_bridgeObjectRetain(a7);
  v31 = sub_10011D0DC(a6, a7);
  if (v32 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v187 + 56))(v24, 1, 1, v25);
LABEL_5:

    sub_10009B2C0((uint64_t)v24, &qword_10026EA20);
    return;
  }
  v33 = v31;
  v34 = v32;
  sub_10011CCD0(v31, v32);
  sub_10009E3A0(v33, v34);
  v35 = v187;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v187 + 56))(v24, 0, 1, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v24, 1, v25) == 1)
    goto LABEL_5;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v185, v24, v25);
  v36 = *(void (**)(_QWORD))(v15 + 16);
  v161 = &v188[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
  v162 = (void (*)(_QWORD, _QWORD, _QWORD))v36;
  v36(v21);
  v37 = swift_bridgeObjectRetain_n(a7, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  v40 = os_log_type_enabled(v38, v39);
  v163 = v25;
  v160 = v11;
  if (v40)
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v42;
    *(_DWORD *)v41 = 136315138;
    v159 = (unint64_t)(v41 + 4);
    swift_bridgeObjectRetain(a7);
    v193 = (_QWORD *)sub_1000906BC(a6, a7, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v159, v41 + 12);
    swift_bridgeObjectRelease_n(a7, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Discovered pairable accessory with identifier %s.", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a7, 2);
  }
  v157 = *(void (**)(_QWORD, _QWORD))(v15 + 8);
  v157(v21, v186);
  v158 = v175 & 1;
  v159 = v174 & 1;
  v173 &= 1u;
  v174 = v172 & 1;
  v43 = v188;
  v175 = (uint8_t *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v44 = *(id *)&v188[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v45 = (unint64_t *)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(v45, v196, 0, 0);
  v46 = *v45;
  v47 = *(_QWORD *)(v46 + 16);
  if (!v47)
  {
LABEL_23:
    v58 = *(id *)&v175[(_QWORD)v188];
    OS_dispatch_semaphore.signal()();

    v191 = 0;
    aBlock = 0u;
    v190 = 0u;
    v59 = v163;
    v60 = v183;
    goto LABEL_24;
  }
  v48 = v46 + 32;
  swift_bridgeObjectRetain(v46);
  while (1)
  {
    sub_10009AFF4(v48, (uint64_t)&v193);
    v49 = *(void **)(*sub_10009B038(&v193, v195) + 32);
    if (!v49)
      goto LABEL_13;
    v50 = v49;
    v51 = objc_msgSend(v50, "identifier");
    if (v51)
      break;
LABEL_12:

LABEL_13:
    sub_100090E88(&v193);
    v48 += 40;
    if (!--v47)
    {
      swift_bridgeObjectRelease(v46);
      goto LABEL_23;
    }
  }
  v52 = v51;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v55 = v54;

  if (v53 != a6 || v55 != a7)
  {
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, a6, a7, 0);
    swift_bridgeObjectRelease(v55);
    if ((v57 & 1) != 0)
    {
      a7 = v46;
      goto LABEL_39;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(v46);
LABEL_39:
  swift_bridgeObjectRelease(a7);
  v119 = *(id *)&v175[(_QWORD)v188];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)&v193, (uint64_t)&aBlock);
  sub_100090E88(&v193);
  v59 = v163;
  v60 = v183;
  if (!*((_QWORD *)&v190 + 1))
  {
LABEL_24:
    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
    goto LABEL_25;
  }
  v120 = sub_10009061C(&qword_10026C2E0);
  v121 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(&v193, &aBlock, v120, v121, 6) & 1) != 0)
  {
    v122 = (uint64_t)v193;
    v123 = v164;
    v124 = v186;
    v162(v164, v161, v186);
    v125 = v184;
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.default.getter();
    v128 = os_log_type_enabled(v126, v127);
    v184 = v125;
    if (v128)
    {
      v129 = (uint8_t *)swift_slowAlloc(12, -1);
      v182 = (char *)swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v182;
      v175 = v129;
      *(_DWORD *)v129 = 136315138;
      v130 = v129 + 12;
      v172 = v129 + 4;
      v131 = objc_msgSend(v125, "identifier");
      v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
      v134 = v133;

      v60 = v183;
      v193 = (_QWORD *)sub_1000906BC(v132, v134, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v172, v130);

      swift_bridgeObjectRelease(v134);
      v135 = v175;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Updating existing accessory %s.", v175, 0xCu);
      v136 = v182;
      swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v135, -1, -1);

      v137 = v164;
      v138 = v186;
    }
    else
    {

      v137 = v123;
      v138 = v124;
    }
    v157(v137, v138);
    v139 = *(void **)(v122 + 16);
    *(_QWORD *)(v122 + 16) = v60;
    v140 = v60;

    v141 = (_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
    v142 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
    v143 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8);
    v144 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16);
    v145 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
    v146 = v158 | (v159 << 8) | (v173 << 16) | (v174 << 24);
    v147 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32);
    v148 = *(_QWORD *)(v122 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40);
    v149 = v180;
    *v141 = v178;
    v141[1] = v149;
    v141[2] = v160;
    v141[3] = v146;
    v150 = v181;
    v141[4] = v179;
    v141[5] = v150;
    v141[6] = v12;
    sub_1000D5434(a3, (void (*)(uint64_t, uint64_t))sub_10009B27C);
    sub_1000D4DE4(v142, v143, v144, v145, v147, v148);
    v151 = sub_10011B948();
    v153 = v152;
    v154 = v184;
    v155 = sub_1000C1130(v184, v151, v152, 1, v176, (unint64_t)v177, 7);
    swift_bridgeObjectRelease(v153);
    v156 = *(void **)(v122 + 32);
    *(_QWORD *)(v122 + 32) = v155;

    sub_1000C0C28(v122);
    swift_release(v122);
LABEL_36:
    (*(void (**)(char *, uint64_t))(v187 + 8))(v185, v163);
    return;
  }
LABEL_25:
  v61 = *a3;
  v62 = sub_10011B948();
  v64 = v63;
  v65 = v171;
  (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v171, v185, v59);
  v66 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo(0));
  v67 = (void *)DockCoreInfo.init(type:name:identifier:)(v61, v62, v64, v65);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(v67);
  v69 = v68;
  v71 = sub_10011B948();
  v72 = v70;
  if (v69)
    v73 = 7;
  else
    v73 = 6;
  v74 = sub_1000C1130(v184, v71, v70, 1, v176, (unint64_t)v177, v73);
  swift_bridgeObjectRelease(v72);
  v75 = v182;
  v76 = v186;
  v162(v182, v161, v186);
  v77 = v74;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  v80 = os_log_type_enabled(v78, v79);
  v175 = v69;
  if (v80)
  {
    v177 = v67;
    v81 = (uint8_t *)swift_slowAlloc(12, -1);
    v82 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v82;
    *(_DWORD *)v81 = 136315138;
    v83 = objc_msgSend(v77, "identifier");
    if (!v83)
    {

      __break(1u);
      return;
    }
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

    v193 = (_QWORD *)sub_1000906BC(v85, v87, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v81 + 4, v81 + 12);

    swift_bridgeObjectRelease(v87);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Creating new accessory %s.", v81, 0xCu);
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v81, -1, -1);

    v157(v182, v186);
    v60 = v183;
    v67 = v177;
  }
  else
  {

    v157(v75, v76);
  }
  v88 = type metadata accessor for DaemonAccessory(0);
  swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  v89 = v60;
  v186 = v77;
  v90 = v67;
  v91 = sub_100177FFC((uint64_t)v60, (uint64_t)v90, (uint64_t)v77);
  v92 = (_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  v93 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  v94 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8);
  v95 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16);
  v96 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
  v97 = v158 | ((unint64_t)v159 << 8) | ((unint64_t)v173 << 16);
  v98 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32);
  v99 = *(_QWORD *)((char *)v91 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40);
  v100 = v174;
  *v92 = v178;
  v101 = v97 | (v100 << 24);
  v102 = v160;
  v92[1] = v180;
  v92[2] = v102;
  v92[3] = v101;
  v103 = v181;
  v92[4] = v179;
  v92[5] = v103;
  v92[6] = v12;
  sub_1000D5434(a3, (void (*)(uint64_t, uint64_t))sub_10009B27C);
  sub_1000D4DE4(v93, v94, v95, v96, v98, v99);
  v104 = v175;
  if (v175)
  {
    sub_1000BFEB8((uint64_t)v91);
    sub_1000C0C28((uint64_t)v91);

    swift_release(v91);
    goto LABEL_36;
  }
  v105 = v188;
  v106 = *(void **)&v188[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  v107 = swift_allocObject(&unk_10023A738, 32, 7);
  *(_QWORD *)(v107 + 16) = v105;
  *(_QWORD *)(v107 + 24) = v91;
  v191 = sub_1000D577C;
  v192 = v107;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v190 = sub_10012357C;
  *((_QWORD *)&v190 + 1) = &unk_10023A750;
  v108 = _Block_copy(&aBlock);
  v109 = v106;
  v110 = v105;
  v111 = swift_retain(v91);
  v112 = v165;
  static DispatchQoS.unspecified.getter(v111);
  v193 = _swiftEmptyArrayStorage;
  v113 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v114 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v115 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
  v116 = v168;
  v117 = v114;
  v118 = v170;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v193, v117, v115, v170, v113);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v112, v116, v108);
  _Block_release(v108);

  swift_release(v91);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v116, v118);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v112, v167);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v185, v163);
  swift_release(v192);
}

void sub_1000C237C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  char *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *oslog;

  sub_1000BFEB8(a2);
  if (!*(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired)
    && *(_BYTE *)(a2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24) != 2)
  {
    v4 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock);
    swift_retain(v5);
    os_unfair_lock_lock(v5 + 4);
    swift_release(v5);
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing);
    *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing) = a2;
    swift_retain(a2);
    swift_release(v6);
    v7 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain(v7);
    os_unfair_lock_unlock(v7 + 4);
    swift_release(v7);
    v8 = *(char **)(a2 + 16);
    if (v8)
    {
      if (*(_QWORD *)&v8[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        v9 = qword_10026BC20;
        v10 = v8;
        if (v9 != -1)
          swift_once(&qword_10026BC20, sub_1001A3078);
        v11 = (void *)qword_1002757B0;
        v12 = swift_allocObject(&unk_10023A788, 32, 7);
        *(_QWORD *)(v12 + 16) = v11;
        *(_QWORD *)(v12 + 24) = v10;
        v13 = v10;
        v14 = v11;
        sub_1001A3584((uint64_t)sub_1000D5784, v12);

        swift_release(v12);
      }
      else
      {
        v15 = v8;
        oslog = Logger.logObject.getter(v15);
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v16, "CB peripheral is nil", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

      }
    }
  }
}

uint64_t sub_1000C25A4(void *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  void *v17;
  os_unfair_lock_s *v18;
  id v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  id v58;
  id v59;
  char *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  id v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t *v79;
  id v80;
  uint64_t v81;
  int64_t v82;
  id v83;
  void *v85;
  _QWORD *v86;
  char *v87;
  id v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;
  const void *v96;
  uint64_t v97;
  id v98;
  char *v99;
  id v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  __int128 aBlock;
  __int128 v111;
  void *v112;
  _QWORD *v113;
  _QWORD v114[5];
  char v115[24];

  v2 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v105 = *(v2 - 1);
  v106 = v2;
  __chkstk_darwin(v2);
  v104 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DispatchQoS(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v97 - v11;
  DockCoreInfo.identifier.getter(v10);
  v107 = sub_10011D00C((uint64_t)v12);
  v108 = v13;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v14 = qword_100275638;
  v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v16 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v16);
  os_unfair_lock_lock(v16 + 4);
  swift_release(v16);
  v17 = *(void **)(v14 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v18 = *(os_unfair_lock_s **)(v14 + v15);
  v19 = v17;
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  swift_release(v18);
  if (!v17)
    goto LABEL_21;
  v20 = sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  v21 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v20);
  v22 = static NSObject.== infix(_:_:)(v21, a1);

  if ((v22 & 1) == 0)
  {
LABEL_20:

    goto LABEL_21;
  }
  v100 = v19;
  v23 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  *(_QWORD *)&aBlock = 0;
  v24 = objc_msgSend(v23, "getLocalPairingIdentity:", &aBlock);
  v25 = aBlock;
  if (!v24)
  {
    v39 = (id)aBlock;
    _convertNSErrorToError(_:)(v25);

    swift_willThrow(v40);
    v41 = v107;
    v42 = v108;
    return sub_10009B2FC(v41, v42);
  }
  v26 = v24;
  v27 = v109;
  v99 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v28 = *(void **)((char *)v109 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  v29 = (id)aBlock;
  v30 = v28;
  OS_dispatch_semaphore.wait()();

  v31 = (uint64_t *)((char *)v27 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess((char *)v27 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v115, 0, 0);
  v32 = *v31;
  v33 = *(_QWORD *)(*v31 + 16);
  if (v33)
  {
    v98 = v26;
    v34 = v32 + 32;
    v97 = v32;
    swift_bridgeObjectRetain(v32);
    while (1)
    {
      sub_10009AFF4(v34, (uint64_t)v114);
      v35 = *(id *)(*sub_10009B038(v114, v114[3]) + 24);
      DockCoreInfo.identifier.getter(v35);

      DockCoreInfo.identifier.getter(v36);
      LOBYTE(v35) = static UUID.== infix(_:_:)(v12, v9);
      v37 = *(void (**)(char *, uint64_t))(v6 + 8);
      v37(v9, v5);
      v37(v12, v5);
      if ((v35 & 1) != 0)
        break;
      sub_100090E88(v114);
      v34 += 40;
      if (!--v33)
      {
        swift_bridgeObjectRelease(v97);
        v27 = v109;
        v26 = v98;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v97);
    v43 = (char *)v109;
    v44 = *(id *)&v99[(_QWORD)v109];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v114, (uint64_t)&aBlock);
    sub_100090E88(v114);
    v26 = v98;
    if (*((_QWORD *)&v111 + 1))
    {
      v45 = sub_10009061C(&qword_10026C2E0);
      v46 = type metadata accessor for DaemonAccessory(0);
      v47 = swift_dynamicCast(v114, &aBlock, v45, v46, 6);
      v19 = v100;
      if ((v47 & 1) != 0)
      {
        v49 = v114[0];
        v50 = *(void **)(v114[0] + 32);
        if (v50
          && (v51 = objc_opt_self(_HAPAccessoryServerBTLE200, v48),
              (v52 = swift_dynamicCastObjCClass(v50, v51)) != 0))
        {
          v53 = (void *)v52;
          v54 = *(void **)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
          v55 = (_QWORD *)swift_allocObject(&unk_10023A698, 40, 7);
          v55[2] = v43;
          v55[3] = a1;
          v55[4] = v49;
          v112 = sub_1000D5714;
          v113 = v55;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v111 = sub_1001873D4;
          *((_QWORD *)&v111 + 1) = &unk_10023A6B0;
          v56 = _Block_copy(&aBlock);
          v57 = v113;
          v106 = v50;
          v58 = v26;
          v59 = v54;
          v60 = v43;
          v61 = a1;
          swift_retain(v49);
          swift_release(v57);
          objc_msgSend(v53, "removePairing:completionQueue:completionHandler:", v58, v59, v56);
          swift_release(v49);

          _Block_release(v56);
        }
        else
        {
          v85 = *(void **)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
          v86 = (_QWORD *)swift_allocObject(&unk_10023A648, 40, 7);
          v86[2] = v43;
          v86[3] = a1;
          v86[4] = v49;
          v112 = sub_1000D56D0;
          v113 = v86;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v111 = sub_10012357C;
          *((_QWORD *)&v111 + 1) = &unk_10023A660;
          v99 = (char *)_Block_copy(&aBlock);
          v87 = v43;
          v88 = a1;
          swift_retain(v49);
          v89 = v85;
          v90 = v101;
          static DispatchQoS.unspecified.getter(v89);
          v114[0] = _swiftEmptyArrayStorage;
          v91 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v92 = sub_10009061C((uint64_t *)&unk_10026BF60);
          v93 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
          v94 = v104;
          v95 = v106;
          dispatch thunk of SetAlgebra.init<A>(_:)(v114, v92, v93, v106, v91);
          v96 = v99;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v90, v94, v99);

          _Block_release(v96);
          swift_release(v49);

          (*(void (**)(char *, id))(v105 + 8))(v94, v95);
          (*(void (**)(char *, uint64_t))(v102 + 8))(v90, v103);
          swift_release(v113);
        }
        goto LABEL_21;
      }

      goto LABEL_20;
    }
  }
  else
  {
LABEL_11:
    v38 = *(id *)&v99[(_QWORD)v27];
    OS_dispatch_semaphore.signal()();

    v112 = 0;
    aBlock = 0u;
    v111 = 0u;
  }

  sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
LABEL_21:
  v62 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  v64 = v107;
  v63 = v108;
  sub_10011CAC4(v107, v108);
  v66 = v65;
  v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  *(_QWORD *)&aBlock = 0;
  LODWORD(v66) = objc_msgSend(v62, "removeAccessoryKeyForName:error:", v67, &aBlock);

  v68 = aBlock;
  if ((_DWORD)v66)
  {
    v69 = (id)aBlock;
  }
  else
  {
    v71 = (id)aBlock;
    v72 = _convertNSErrorToError(_:)(v68);

    swift_willThrow(v73);
    swift_errorRelease(v72);
  }
  v70 = (char *)v109;
  sub_10015DC38(a1);
  sub_10011CAC4(v64, v63);
  v75 = v74;
  sub_1000CC5AC(v76, v74);
  swift_bridgeObjectRelease(v75);
  v77 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v78 = *(id *)&v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v79 = (uint64_t *)&v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], &aBlock, 33, 0);
  v80 = a1;
  v81 = sub_1000D40CC(v79, (uint64_t)v80);

  v82 = *(_QWORD *)(*v79 + 16);
  if (v82 < v81)
    __break(1u);
  sub_100172E9C(v81, v82);
  swift_endAccess(&aBlock);
  v83 = *(id *)&v70[v77];
  OS_dispatch_semaphore.signal()();

  v41 = v64;
  v42 = v63;
  return sub_10009B2FC(v41, v42);
}

void sub_1000C2E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  id v11;

  sub_1000D00D0(a3);
  v5 = *(char **)(a4 + 16);
  if (v5 && *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v6 = qword_10026BC20;
    v7 = v5;
    if (v6 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v8 = (void *)qword_1002757B0;
    v9 = swift_allocObject(&unk_10023A6E8, 32, 7);
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v5;
    v10 = v7;
    v11 = v8;
    sub_1001A3584((uint64_t)sub_1000D5C54, v9);

    swift_release(v9);
  }
}

void sub_1000C2F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  id v10;

  sub_1000D00D0(a2);
  v4 = *(char **)(a3 + 16);
  if (v4 && *(_QWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v5 = qword_10026BC20;
    v6 = v4;
    if (v5 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v7 = (void *)qword_1002757B0;
    v8 = swift_allocObject(&unk_10023A710, 32, 7);
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v4;
    v9 = v6;
    v10 = v7;
    sub_1001A3584((uint64_t)sub_1000D5C54, v8);

    swift_release(v8);
  }
}

uint64_t sub_1000C304C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  v14 = (_QWORD *)swift_allocObject(&unk_10023A5F8, 48, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_1000D56A4;
  v28 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023A610;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v16 = v13;
  v17 = v3;
  v18 = sub_1000BC8F4(a2, a3);
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v21 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return swift_release(v28);
}

uint64_t sub_1000C3268(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void (**v34)(char *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  const void *v46;
  const void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  id v77;
  id v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (**v91)(char *, _QWORD);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  void *v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _BYTE *v130;
  char v131;
  id v132;
  _BOOL4 v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  void *v139;
  void *v140;
  id v141;
  void (**v142)(char *, uint64_t);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  id v161;
  id v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  _QWORD v176[2];
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  id v189;
  void *v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  void (**v195)(char *, _QWORD);
  void *v196;
  __int128 aBlock;
  __int128 v198;
  void (*v199)();
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202[4];
  char v203[8];
  _BYTE v204[6];
  char v205[4];
  unsigned __int16 v206;

  v181 = a5;
  v180 = a4;
  v187 = type metadata accessor for DispatchWorkItemFlags(0);
  v185 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v184 = (char *)v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for DispatchQoS(0);
  v183 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v182 = (char *)v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for Logger(0);
  v195 = *(void (***)(char *, _QWORD))(v193 - 8);
  v10 = __chkstk_darwin(v193);
  v179 = (char *)v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v176 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v176 - v16;
  v18 = __chkstk_darwin(v15);
  v188 = (char *)v176 - v19;
  v20 = __chkstk_darwin(v18);
  v178 = (char *)v176 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)v176 - v22;
  v177 = type metadata accessor for UUID(0);
  v176[1] = *(_QWORD *)(v177 - 8);
  v24 = __chkstk_darwin(v177);
  v26 = (char *)v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = a3;
  DockCoreInfo.identifier.getter(v24);
  v27 = sub_10011D00C((uint64_t)v26);
  v29 = (void *)v28;
  sub_10011CAC4(v27, v28);
  v31 = v30;
  v189 = a1;
  v33 = sub_1000E1190(v32, v30);
  v192 = v33;
  swift_bridgeObjectRelease(v31);
  if (!v33)
  {
    sub_10009B2FC(v27, (unint64_t)v29);
    return 0;
  }
  v194 = v27;
  v191 = v29;
  sub_1000D55A0(a2 + 20, (uint64_t)v204, &qword_10026CFE8);
  sub_1000D55A0((uint64_t)v204, (uint64_t)v205, &qword_10026CFE8);
  if (v205[0] == 2)
  {
    v34 = v195;
    v35 = v193;
    v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v195[2])(v14, (uint64_t)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v193);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = v194;
    if (v39)
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to parse Pairing Refresh Number!", v41, 2u);
      swift_slowDealloc(v41, -1, -1);

      sub_10009B2FC(v40, (unint64_t)v191);
    }
    else
    {
      sub_10009B2FC(v194, (unint64_t)v191);

    }
    v34[1](v14, v35);
    return 0;
  }
  v42 = v206;
  v43 = v194;
  v44 = v193;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v45 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  sub_10011CAC4(v43, (uint64_t)v191);
  v47 = v46;
  v49 = sub_10014D850(v48, v46, 1);
  v50 = v49;
  if (!((unint64_t)v49 >> 62))
  {
    if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_10;
LABEL_64:

    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v50);
    v172 = ((uint64_t (*)(char *, uint64_t, uint64_t))v195[2])(v17, (uint64_t)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v44);
    v173 = Logger.logObject.getter(v172);
    v174 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v173, v174))
    {
      v175 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v175 = 0;
      _os_log_impl((void *)&_mh_execute_header, v173, v174, "Unable to load Pairing State Number!", v175, 2u);
      swift_slowDealloc(v175, -1, -1);

      sub_10009B2FC(v43, (unint64_t)v191);
    }
    else
    {
      sub_10009B2FC(v43, (unint64_t)v191);

    }
    v195[1](v17, v44);
    return 0;
  }
  if (v49 >= 0)
    v49 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v49))
    goto LABEL_64;
LABEL_10:
  if ((v50 & 0xC000000000000001) != 0)
  {
    v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50);
  }
  else
  {
    if (!*(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_71:
      swift_once(&qword_10026BC20, sub_1001A3078);
LABEL_35:
      sub_1000D5CB0();
      sub_10009B2FC(v43, (unint64_t)v191);

      return 0;
    }
    v51 = *(_QWORD *)(v50 + 32);
    swift_retain(v51);
  }
  swift_bridgeObjectRelease(v50);
  v52 = *(unsigned __int16 *)(v51 + 128);

  swift_bridgeObjectRelease(v47);
  swift_release(v51);
  if (v52 <= v42 || (unsigned __int16)(v52 - v42) >= 0x19u)
  {
    v73 = ((uint64_t (*)(char *, uint64_t, uint64_t))v195[2])(v23, (uint64_t)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v44);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Pairing refresh outdates pairing state, we should unpair!", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    v195[1](v23, v44);
    sub_1000C25A4(v190);
    if (qword_10026BC20 == -1)
      goto LABEL_35;
    goto LABEL_71;
  }
  sub_10011CAC4(v43, (uint64_t)v191);
  v54 = v53;
  v56 = v55;
  v57 = v196;
  v179 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v58 = *(id *)((char *)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v59 = (uint64_t *)((char *)v57 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess((char *)v57 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v203, 0, 0);
  v60 = *v59;
  v61 = *(_QWORD *)(*v59 + 16);
  if (!v61)
  {
LABEL_33:
    v77 = *(id *)&v179[(_QWORD)v57];
    OS_dispatch_semaphore.signal()();

    v199 = 0;
    aBlock = 0u;
    v198 = 0u;
    goto LABEL_38;
  }
  v62 = v60 + 32;
  v177 = *v59;
  swift_bridgeObjectRetain(v60);
  while (1)
  {
    sub_10009AFF4(v62, (uint64_t)&v201);
    v63 = *(void **)(*sub_10009B038(&v201, v202[2]) + 32);
    if (!v63)
      goto LABEL_18;
    v64 = v63;
    v65 = objc_msgSend(v64, "identifier");
    if (v65)
      break;
LABEL_17:

LABEL_18:
    sub_100090E88(&v201);
    v62 += 40;
    if (!--v61)
    {
      swift_bridgeObjectRelease(v177);
      v57 = v196;
      goto LABEL_33;
    }
  }
  v66 = v65;
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  v69 = v68;

  if (v67 != v54 || v69 != v56)
  {
    v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v69, v54, v56, 0);
    swift_bridgeObjectRelease(v69);
    v43 = v194;
    if ((v71 & 1) != 0)
    {
      v72 = v177;
      goto LABEL_37;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(v177);
  v72 = v56;
  v43 = v194;
LABEL_37:
  swift_bridgeObjectRelease(v72);
  v57 = v196;
  v78 = *(id *)&v179[(_QWORD)v196];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)&v201, (uint64_t)&aBlock);
  sub_100090E88(&v201);
LABEL_38:
  swift_bridgeObjectRelease(v56);
  v79 = (uint64_t)v191;
  v80 = v190;
  if (*((_QWORD *)&v198 + 1))
  {
    v81 = sub_10009061C(&qword_10026C2E0);
    v82 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(&v201, &aBlock, v81, v82, 6) & 1) != 0)
    {
      v83 = v201;
      sub_10015DAB8(v80);
      if (v84)
      {
        v86 = v84;
        v87 = dispatch thunk of DockCoreAccessory.needsMigration.getter();

      }
      else
      {
        v87 = 0;
      }
      v126 = (void *)v83[4];
      if (v126
        && (v127 = objc_opt_self(_HAPAccessoryServerBTLE200, v85),
            (v128 = swift_dynamicCastObjCClass(v126, v127)) != 0))
      {
        v129 = (void *)v128;
        v130 = (char *)v83 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer;
        v131 = *((_BYTE *)v83 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer);
        v132 = v126;
        if ((v131 & 1) == 0)
        {
          v133 = objc_msgSend(v129, "connectReason") != 8;
          v134 = v189;
          if (((v133 | v87) & 1) == 0)
          {
LABEL_56:
            v190 = v129;
            v140 = (void *)v83[2];
            v83[2] = v134;
            v141 = v134;

            v142 = v195;
            v143 = v178;
            v144 = v193;
            ((void (*)(char *, uint64_t, uint64_t))v195[2])(v178, (uint64_t)v57 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v193);
            v145 = (uint64_t)v191;
            sub_10009B27C(v43, (unint64_t)v191);
            v146 = sub_10009B27C(v43, v145);
            v147 = Logger.logObject.getter(v146);
            v148 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v147, v148))
            {
              v149 = (uint8_t *)swift_slowAlloc(12, -1);
              v150 = swift_slowAlloc(32, -1);
              v189 = v141;
              v151 = v150;
              *(_QWORD *)&aBlock = v150;
              *(_DWORD *)v149 = 136315138;
              sub_10011CAC4(v194, v145);
              v153 = v152;
              v201 = (_QWORD *)sub_1000906BC(v154, v152, (uint64_t *)&aBlock);
              v43 = v194;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v202, v149 + 4, v149 + 12);
              swift_bridgeObjectRelease(v153);
              sub_10009B2FC(v43, v145);
              sub_10009B2FC(v43, v145);
              _os_log_impl((void *)&_mh_execute_header, v147, v148, "Found existing record for accessory %s.", v149, 0xCu);
              swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
              v155 = v151;
              v141 = v189;
              swift_slowDealloc(v155, -1, -1);
              swift_slowDealloc(v149, -1, -1);

              v142[1](v178, v193);
            }
            else
            {
              sub_10009B2FC(v43, v145);
              sub_10009B2FC(v43, v145);

              v142[1](v143, v144);
            }
            v156 = v181;
            v157 = *(void **)((char *)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
            v158 = (_QWORD *)swift_allocObject(&unk_10023A5A8, 40, 7);
            v159 = v180;
            v158[2] = v141;
            v158[3] = v159;
            v158[4] = v156;
            v199 = sub_1000D565C;
            v200 = v158;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v198 = sub_10012357C;
            *((_QWORD *)&v198 + 1) = &unk_10023A5C0;
            v160 = _Block_copy(&aBlock);
            v161 = v141;
            v162 = v157;
            v163 = swift_retain(v156);
            v164 = v182;
            static DispatchQoS.unspecified.getter(v163);
            v201 = _swiftEmptyArrayStorage;
            v165 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v166 = sub_10009061C((uint64_t *)&unk_10026BF60);
            v167 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
            v168 = v184;
            v169 = v166;
            v170 = v187;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v201, v169, v167, v187, v165);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v164, v168, v160);

            _Block_release(v160);
            swift_release(v83);

            sub_10009B2FC(v43, v145);
            (*(void (**)(char *, uint64_t))(v185 + 8))(v168, v170);
            (*(void (**)(char *, uint64_t))(v183 + 8))(v164, v186);
            goto LABEL_60;
          }
LABEL_55:
          v135 = sub_10011B948();
          v137 = v136;
          v138 = sub_1000C1130(v192, v135, v136, 1, 0, 0xC000000000000000, 8);
          swift_bridgeObjectRelease(v137);
          v139 = (void *)v83[4];
          v83[4] = v138;

          *v130 = 0;
          goto LABEL_56;
        }
      }
      else
      {
        v129 = 0;
        v130 = (char *)v83 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer;
      }
      v134 = v189;
      goto LABEL_55;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
  }
  v88 = sub_10011B948();
  v90 = v89;
  v191 = sub_1000C1130(v192, v88, v89, 1, 0, 0xC000000000000000, 8);
  swift_bridgeObjectRelease(v90);
  v91 = v195;
  v92 = v188;
  v93 = v193;
  ((void (*)(char *, uint64_t, uint64_t))v195[2])(v188, (uint64_t)v57 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v193);
  sub_10009B27C(v43, v79);
  v94 = sub_10009B27C(v43, v79);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v98;
    *(_DWORD *)v97 = 136315138;
    sub_10011CAC4(v43, v79);
    v100 = v99;
    v201 = (_QWORD *)sub_1000906BC(v101, v99, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v202, v97 + 4, v97 + 12);
    v102 = v100;
    v43 = v194;
    swift_bridgeObjectRelease(v102);
    sub_10009B2FC(v43, v79);
    sub_10009B2FC(v43, v79);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Creating new record for accessory %s.", v97, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);

    v91[1](v188, v93);
  }
  else
  {
    sub_10009B2FC(v43, v79);
    sub_10009B2FC(v43, v79);

    v91[1](v92, v93);
  }
  v103 = v181;
  v104 = v180;
  v105 = type metadata accessor for DaemonAccessory(0);
  swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
  v106 = (uint64_t)v189;
  v107 = v189;
  v108 = v190;
  v109 = (uint64_t)v191;
  v195 = (void (**)(char *, _QWORD))v191;
  v110 = sub_100177FFC(v106, (uint64_t)v108, v109);
  *((_BYTE *)v110 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 2;
  v111 = v196;
  v112 = *(void **)((char *)v196 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  v113 = (_QWORD *)swift_allocObject(&unk_10023A558, 56, 7);
  v113[2] = v111;
  v113[3] = v110;
  v113[4] = v107;
  v113[5] = v104;
  v113[6] = v103;
  v199 = sub_1000D5620;
  v200 = v113;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v198 = sub_10012357C;
  *((_QWORD *)&v198 + 1) = &unk_10023A570;
  v114 = _Block_copy(&aBlock);
  v115 = v107;
  swift_retain(v103);
  v116 = v112;
  v117 = v111;
  v118 = swift_retain(v110);
  v119 = v182;
  static DispatchQoS.unspecified.getter(v118);
  v201 = _swiftEmptyArrayStorage;
  v120 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v121 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v122 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
  v123 = v184;
  v124 = v121;
  v125 = v187;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v201, v124, v122, v187, v120);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v119, v123, v114);

  _Block_release(v114);
  swift_release(v110);

  sub_10009B2FC(v43, v79);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v123, v125);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v119, v186);
LABEL_60:
  swift_release(v200);
  return 1;
}

void sub_1000C46F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  sub_1000D5CB0();
  sub_10011B410(a2, a3);
}

void sub_1000C4768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000BFEB8(a2);
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  sub_1000D5CB0();
  sub_10011B410(a4, a5);
}

uint64_t sub_1000C47E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __n128 v40;
  void (*v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  uint64_t *v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t *v69;
  __n128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  id *v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint8_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint8_t *v158;
  void *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  id v167;
  id v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  id v174;
  Class isa;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  __n128 v181;
  char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  void (***v190)(_QWORD, _QWORD);
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  id v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  id v209;
  char *v210;
  __n128 v211;
  uint64_t *v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, _QWORD, uint64_t);
  void (*v218)(uint64_t, char *, uint64_t);
  char *v219;
  void (*v220)(uint64_t, uint64_t);
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  id *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  _QWORD *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(_QWORD, _QWORD);
  uint64_t v254;
  char *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  void (**v260)(_QWORD, _QWORD);
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  char v267[8];
  char v268[8];
  char v269[8];
  char v270[8];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;

  v4 = v3;
  v224 = a3;
  v223 = a2;
  v240 = type metadata accessor for UUID(0);
  v238 = *(_QWORD *)(v240 - 8);
  v6 = __chkstk_darwin(v240);
  v231 = (char *)&v211 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v230 = (char *)&v211 - v9;
  __chkstk_darwin(v8);
  v237 = (char *)&v211 - v10;
  v229 = type metadata accessor for Date(0);
  v228 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v227 = (char *)&v211 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = (_QWORD *)type metadata accessor for String.Encoding(0);
  v260 = (void (**)(_QWORD, _QWORD))*(v261 - 1);
  __chkstk_darwin(v261);
  v259 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BTDiscoveredDevice(0);
  v252 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v235 = (id *)((char *)&v211 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v17 = (char *)&v211 - v16;
  v251 = type metadata accessor for Logger(0);
  v250 = *(_QWORD *)(v251 - 8);
  v18 = __chkstk_darwin(v251);
  v233 = (char *)&v211 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v239 = (char *)&v211 - v21;
  v22 = __chkstk_darwin(v20);
  v236 = (char *)&v211 - v23;
  v24 = __chkstk_darwin(v22);
  v232 = (char *)&v211 - v25;
  v26 = __chkstk_darwin(v24);
  v234 = (char *)&v211 - v27;
  v28 = __chkstk_darwin(v26);
  v226 = (char *)&v211 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v211 - v30;
  v32 = type metadata accessor for DockStatus(0);
  v33 = *(_QWORD **)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v211 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v211 - v37;
  if (sub_1000D36D8())
    goto LABEL_3;
  v39 = &v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
  v40 = swift_beginAccess(&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], v270, 0, 0);
  v41 = (void (*)(uint64_t, char *, uint64_t))v33[2];
  v219 = v39;
  v218 = v41;
  ((void (*)(char *, char *, uint64_t, __n128))v41)(v38, v39, v32, v40);
  v217 = (void (*)(char *, _QWORD, uint64_t))v33[13];
  v217(v36, enum case for DockStatus.Undocked(_:), v32);
  v42 = sub_100090E1C(&qword_10026CFD8, (uint64_t (*)(uint64_t))&type metadata accessor for DockStatus, (uint64_t)&protocol conformance descriptor for DockStatus);
  LOBYTE(v39) = dispatch thunk of static Comparable.< infix(_:_:)(v36, v38, v32, v42);
  v43 = (void (*)(char *, uint64_t))v33[1];
  v43(v36, v32);
  v220 = (void (*)(uint64_t, uint64_t))v43;
  v43(v38, v32);
  if ((v39 & 1) != 0)
  {
LABEL_3:
    v44 = v250;
    v45 = v251;
    v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v250 + 16))(v31, &v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v251);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Ignoring newly discovered bt device, already connected or trying to connect", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v31, v45);
  }
  v214 = v38;
  v215 = v32;
  v213 = v33;
  if (!a1)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v51 = qword_100275638;
    v52 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v53 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v53);
    os_unfair_lock_lock(v53 + 4);
    swift_release(v53);
    v54 = (uint64_t *)(v51 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess(v51 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v269, 0, 0);
    v55 = *v54;
    v56 = *(os_unfair_lock_s **)(v51 + v52);
    swift_bridgeObjectRetain(v55);
    swift_retain(v56);
    os_unfair_lock_unlock(v56 + 4);
    swift_release(v56);
    if ((unint64_t)v55 >> 62)
    {
      if (v55 < 0)
        v65 = v55;
      else
        v65 = v55 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v55);
      v57 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v55);
      if (v57)
        goto LABEL_12;
    }
    else
    {
      v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v57)
      {
LABEL_12:
        *(_QWORD *)&v274 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v57);
        if (v57 < 0)
        {
          __break(1u);
LABEL_108:
          swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_102:
          v198 = objc_msgSend(v43, "description", v211.n128_u64[0], v211.n128_u64[1]);
          v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
          v201 = v200;

          sub_10015B790(v199, v201, (uint64_t)sub_1000D54A4, v52);
          swift_release(v52);
          swift_bridgeObjectRelease(v201);
          sub_1000D4AE8(v263, v264, (uint64_t)v253, v57, v245, (unint64_t)a1);

          sub_1000D53C0(v244);
          return swift_release(v262);
        }
        v58 = 0;
        do
        {
          if ((v55 & 0xC000000000000001) != 0)
            v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v55);
          else
            v59 = *(id *)(v55 + 8 * v58 + 32);
          v60 = v59;
          ++v58;
          v61 = dispatch thunk of DockCoreAccessory.info.getter(v59);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v62);
          v63 = *(_QWORD *)(v274 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
          v64 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v61);
          specialized ContiguousArray._endMutation()(v64);
        }
        while (v57 != v58);
        a1 = (_QWORD *)v274;
        swift_bridgeObjectRelease(0);
        swift_bridgeObjectRelease(v55);
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease(v55);
    a1 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain(a1);
LABEL_24:
  v66 = (uint64_t)v17;
  v266 = &_swiftEmptySetSingleton;
  if (qword_10026BC20 != -1)
    goto LABEL_106;
  while (2)
  {
    v67 = sub_1001A4174();
    v68 = v67;
    v246 = v67[2];
    if (!v246)
    {
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(a1);
      v159 = &_swiftEmptySetSingleton;
LABEL_89:
      swift_bridgeObjectRelease(v159);
      v160 = v250;
      v161 = v233;
      v162 = v251;
      v163 = (*(uint64_t (**)(char *, char *, uint64_t))(v250 + 16))(v233, &v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v251);
      v164 = Logger.logObject.getter(v163);
      v165 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v164, v165))
      {
        v166 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v166 = 0;
        _os_log_impl((void *)&_mh_execute_header, v164, v165, "Unable to find matching discovered device.", v166, 2u);
        swift_slowDealloc(v166, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v161, v162);
    }
    v69 = (uint64_t *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
    v221 = &v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
    v216 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
    v247 = (char *)v67 + ((*(unsigned __int8 *)(v252 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80));
    v212 = (uint64_t *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap];
    swift_beginAccess(&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap], v268, 0, 0);
    v222 = v69;
    v70 = swift_beginAccess(v69, v267, 0, 0);
    v71 = 0;
    v262 = 0;
    v70.n128_u64[0] = 16777728;
    v211 = v70;
    v244 = v66;
    v242 = v4;
    v225 = a1;
    v241 = v68;
    while (1)
    {
      if (v71 >= v68[2])
      {
        __break(1u);
        JUMPOUT(0x1000C69A4);
      }
      sub_1000D537C((uint64_t)&v247[*(_QWORD *)(v252 + 72) * v71], v66);
      v72 = *(_QWORD *)(v66 + 24);
      if (v72)
        break;
      sub_1000D53C0(v66);
LABEL_28:
      if (++v71 == v246)
      {
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(a1);
        v159 = v266;
        goto LABEL_89;
      }
    }
    v248 = v71;
    v73 = *(_QWORD *)(v66 + 16);
    v74 = *(void (**)(_QWORD, _QWORD))(v66 + 32);
    v75 = *(_QWORD *)(v66 + 40);
    v77 = *(_QWORD *)(v66 + 48);
    v76 = *(_QWORD *)(v66 + 56);
    *((_QWORD *)&v79 + 1) = v75;
    *(_QWORD *)&v79 = v74;
    v78 = v79 >> 32;
    *(_QWORD *)&v271 = v73;
    *((_QWORD *)&v271 + 1) = v72;
    *(_QWORD *)&v272 = v74;
    WORD4(v272) = WORD2(v78);
    BYTE10(v272) = BYTE2(v75) & 1;
    *(_QWORD *)&v273 = v77;
    *((_QWORD *)&v273 + 1) = v76;
    v253 = v74;
    v264 = v72;
    v263 = v73;
    v249 = (_QWORD *)v76;
    if ((v75 & 0x10000) != 0)
    {
      sub_1000D53FC(v73, v72, (uint64_t)v74, v75, v77, v76);
      sub_1000D53FC(v73, v72, (uint64_t)v74, v75, v77, v76);
      swift_bridgeObjectRetain(a1);
      v99 = v262;
      v101 = sub_1000D4714(v100, (uint64_t *)&v271);
      v102 = v76;
      v66 = (uint64_t)v101;
      v262 = v99;
      v103 = (uint64_t)v253;
      v104 = v73;
      v105 = v72;
      v83 = v75;
      v80 = v77;
      sub_1000D4AE8(v104, v105, (uint64_t)v253, v75, v77, v102);
      swift_bridgeObjectRelease(a1);
      if ((unint64_t)v66 >> 62)
      {
        if (v66 < 0)
          v151 = v66;
        else
          v151 = v66 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v66);
        v152 = _CocoaArrayWrapper.endIndex.getter(v151);
        swift_bridgeObjectRelease(v66);
        v153 = v152 == 1;
        v103 = (uint64_t)v253;
        if (v153)
          goto LABEL_47;
        swift_bridgeObjectRetain(v66);
        v106 = _CocoaArrayWrapper.endIndex.getter(v151);
        swift_bridgeObjectRelease(v66);
      }
      else
      {
        v106 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v106 == 1)
        {
LABEL_47:
          if ((v66 & 0xC000000000000001) != 0)
          {
            v107 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v66);
          }
          else
          {
            if (!*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_106:
              swift_once(&qword_10026BC20, sub_1001A3078);
              continue;
            }
            v107 = (char *)*(id *)(v66 + 32);
          }
          v85 = v107;
          swift_bridgeObjectRelease(v66);
          v108 = v244;
          if ((int)objc_msgSend(*(id *)v244, "rssi") >= -70)
          {
            v117 = *(_QWORD *)&v242[v216];
            v118 = swift_retain(v117);
            v119 = (uint64_t)v237;
            DockCoreInfo.identifier.getter(v118);
            sub_1000DA8B0(v119);
            swift_release(v117);
            v74 = *(void (**)(_QWORD, _QWORD))(v238 + 8);
            v120 = v240;
            v74(v119, v240);
            v121 = (uint64_t)v266;
            swift_bridgeObjectRetain(v266);
            DockCoreInfo.identifier.getter(v122);
            v123 = sub_1000EF074(v119, v121);
            swift_bridgeObjectRelease(v121);
            v124 = ((uint64_t (*)(uint64_t, uint64_t))v74)(v119, v120);
            if ((v123 & 1) == 0)
            {
              v133 = v230;
              DockCoreInfo.identifier.getter(v124);
              sub_10016F488(v119, v133);
              v134 = ((uint64_t (*)(uint64_t, uint64_t))v74)(v119, v120);
              v84 = (uint64_t)v231;
              DockCoreInfo.identifier.getter(v134);
              v82 = *v212;
              a1 = v225;
              if (!*(_QWORD *)(*v212 + 16))
                goto LABEL_94;
              swift_bridgeObjectRetain(*v212);
              v135 = sub_100145330(v84);
              if ((v136 & 1) == 0)
                goto LABEL_93;
              v137 = (uint64_t *)(*(_QWORD *)(v82 + 56) + 16 * v135);
              v138 = v84;
              v140 = *v137;
              v139 = v137[1];
              swift_bridgeObjectRetain(v139);
              swift_bridgeObjectRelease(v82);
              v74(v138, v240);
              if (v140 == v263 && v264 == v139)
              {
                swift_bridgeObjectRelease(v139);
                v141 = (uint64_t)v253;
                a1 = v225;
              }
              else
              {
                v142 = _stringCompareWithSmolCheck(_:_:expecting:)(v140, v139, v263, v264, 0);
                swift_bridgeObjectRelease(v139);
                v141 = (uint64_t)v253;
                a1 = v225;
                if ((v142 & 1) == 0)
                  goto LABEL_95;
              }
              v143 = (*(uint64_t (**)(char *, char *, uint64_t))(v250 + 16))(v232, v221, v251);
              v144 = Logger.logObject.getter(v143);
              v145 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v144, v145))
              {
                v146 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v146 = 0;
                _os_log_impl((void *)&_mh_execute_header, v144, v145, "Ignoring newly discovered bt device, adv data rejected as invalid due to startup validation failure", v146, 2u);
                v147 = v146;
                v141 = (uint64_t)v253;
                swift_slowDealloc(v147, -1, -1);
              }

              sub_1000D4AE8(v263, v264, v141, v83, v80, (unint64_t)v249);
              (*(void (**)(char *, uint64_t))(v250 + 8))(v232, v251);
              v66 = v244;
              sub_1000D53C0(v244);
              v4 = v242;
              goto LABEL_85;
            }
            v125 = (*(uint64_t (**)(char *, char *, uint64_t))(v250 + 16))(v234, v221, v251);
            v126 = Logger.logObject.getter(v125);
            v127 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v126, v127))
            {
              v128 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v128 = 0;
              _os_log_impl((void *)&_mh_execute_header, v126, v127, "Ignoring newly discovered bt device, old adv data", v128, 2u);
              swift_slowDealloc(v128, -1, -1);
            }

            sub_1000D4AE8(v263, v264, (uint64_t)v253, v83, v80, (unint64_t)v249);
            (*(void (**)(char *, uint64_t))(v250 + 8))(v234, v251);
            goto LABEL_73;
          }
          (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v236, v221, v251);
          v109 = v235;
          sub_1000D537C(v108, (uint64_t)v235);
          v110 = v242;
          v111 = Logger.logObject.getter(v110);
          v112 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v111, v112))
          {
            v113 = swift_slowAlloc(15, -1);
            *(_DWORD *)v113 = v211.n128_u32[0];
            v114 = objc_msgSend(*v109, "rssi");
            v115 = (uint64_t)v109;
            v116 = v114;
            sub_1000D53C0(v115);
            *(_BYTE *)(v113 + 4) = v116;
            *(_WORD *)(v113 + 5) = 2048;
            *(_QWORD *)(v113 + 7) = -70;

            _os_log_impl((void *)&_mh_execute_header, v111, v112, "Ignoring newly discovered bt device, RSSI: %hhd is < %ld", (uint8_t *)v113, 0xFu);
            swift_slowDealloc(v113, -1, -1);
          }
          else
          {
            sub_1000D53C0((uint64_t)v109);

            v111 = v110;
          }

          (*(void (**)(char *, uint64_t))(v250 + 8))(v236, v251);
          v129 = v242;
          v130 = *(_QWORD *)&v242[v216];
          v131 = swift_retain(v130);
          v132 = (uint64_t)v237;
          DockCoreInfo.identifier.getter(v131);
          sub_1000DA2C0(v132);

          v4 = v129;
          swift_release(v130);
          sub_1000D4AE8(v263, v264, (uint64_t)v253, v83, v80, (unint64_t)v249);
          (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v132, v240);
LABEL_83:
          v66 = v244;
          sub_1000D53C0(v244);
          goto LABEL_85;
        }
      }
      swift_bridgeObjectRelease(v66);
      if (!v106)
      {
        v66 = v244;
        sub_1000D53C0(v244);
        sub_1000D4AE8(v263, v264, v103, v75, v80, (unint64_t)v249);
        goto LABEL_85;
      }
      v154 = (*(uint64_t (**)(char *, char *, uint64_t))(v250 + 16))(v239, v221, v251);
      v155 = Logger.logObject.getter(v154);
      v156 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v155, v156))
      {
        v157 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v157 = 0;
        _os_log_impl((void *)&_mh_execute_header, v155, v156, "Setup hash does not match with a unique setup payload, ignoring.", v157, 2u);
        v158 = v157;
        v103 = (uint64_t)v253;
        swift_slowDealloc(v158, -1, -1);
      }

      sub_1000D4AE8(v263, v264, v103, v75, v80, (unint64_t)v249);
      (*(void (**)(char *, uint64_t))(v250 + 8))(v239, v251);
      goto LABEL_83;
    }
    break;
  }
  v243 = v75;
  v245 = v77;
  v80 = *v222;
  if (!((unint64_t)*v222 >> 62))
  {
    v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v222);
    v82 = v263;
    sub_1000D53FC(v263, v264, (uint64_t)v74, v243, v245, v76);
    if (v81)
      goto LABEL_34;
    goto LABEL_72;
  }
  v148 = v76;
  if (v80 < 0)
    v149 = *v222;
  else
    v149 = v80 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(*v222, 2);
  v150 = v263;
  sub_1000D53FC(v263, v264, (uint64_t)v74, v243, v245, v148);
  v82 = v150;
  v81 = _CocoaArrayWrapper.endIndex.getter(v149);
  swift_bridgeObjectRelease(v80);
  if (!v81)
  {
LABEL_72:
    sub_1000D4AE8(v82, v264, (uint64_t)v74, v243, v245, (unint64_t)v249);
    swift_bridgeObjectRelease(v80);
LABEL_73:
    v66 = v244;
    sub_1000D53C0(v244);
    v4 = v242;
    a1 = v225;
LABEL_85:
    v68 = v241;
    v71 = v248;
    goto LABEL_28;
  }
LABEL_34:
  v83 = v80 & 0xC000000000000001;
  v78 = 4;
  v258 = v80;
  v257 = v81;
  v256 = v80 & 0xC000000000000001;
  while (1)
  {
    v84 = v78 - 4;
    if (!v83)
      break;
    v85 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v78 - 4, v80);
    a1 = (_QWORD *)(v78 - 3);
    if (__OFADD__(v84, 1))
      goto LABEL_92;
LABEL_42:
    if ((v85[OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_inUse] & 1) == 0)
    {
      v254 = OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_inUse;
      v87 = *(_QWORD *)&v85[OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32];
      v86 = *(_QWORD *)&v85[OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40];
      v255 = &v85[OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload];
      sub_10009B27C(v87, v86);
      sub_10011CAC4(v87, v86);
      v89 = v88;
      v91 = v90;
      *(_QWORD *)&v274 = v82;
      *((_QWORD *)&v274 + 1) = v264;
      swift_bridgeObjectRetain(v264);
      v92._countAndFlagsBits = v89;
      v92._object = v91;
      String.append(_:)(v92);
      v93 = swift_bridgeObjectRelease(v91);
      v94 = v274;
      v95 = v259;
      static String.Encoding.utf8.getter(v93);
      String.data(using:allowLossyConversion:)(v95, 0, v94, *((_QWORD *)&v94 + 1));
      v97 = v96;
      swift_bridgeObjectRelease(*((_QWORD *)&v94 + 1));
      ((void (**)(char *, _QWORD *))v260)[1](v95, v261);
      if (v97 >> 60 != 15)
      {
        v98 = static Array._allocateBufferUninitialized(minimumCapacity:)(64, &type metadata for UInt8);
        *(_QWORD *)(v98 + 16) = 64;
        *(_OWORD *)(v98 + 32) = 0u;
        *(_OWORD *)(v98 + 48) = 0u;
        *(_OWORD *)(v98 + 64) = 0u;
        *(_OWORD *)(v98 + 80) = 0u;
        v265 = v98;
        __asm { BR              X9 }
      }
      sub_10009B2FC(v87, v86);
      v82 = v263;
      v80 = v258;
      v81 = v257;
      v83 = v256;
    }
    swift_release(v85);
    ++v78;
    if (a1 == (_QWORD *)v81)
      goto LABEL_72;
  }
  v85 = *(char **)(v80 + 8 * v78);
  swift_retain(v85);
  a1 = (_QWORD *)(v78 - 3);
  if (!__OFADD__(v84, 1))
    goto LABEL_42;
LABEL_92:
  __break(1u);
LABEL_93:
  swift_bridgeObjectRelease(v82);
LABEL_94:
  v74(v84, v240);
LABEL_95:
  v262 = v78 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRelease(v241);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v266);
  v167 = *(id *)v244;
  v168 = objc_msgSend(*(id *)v244, "name");
  if (v168)
  {
    v169 = v168;
    v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
    v172 = v171;

  }
  else
  {
    v170 = 0;
    v172 = 0xE000000000000000;
  }
  v173 = *(void **)(v244 + 8);
  v174 = v173;
  objc_msgSend(v167, "rssi");
  isa = Int8._bridgeToObjectiveC()().super.super.isa;
  v176 = objc_allocWithZone((Class)type metadata accessor for BTDevice(0));
  v177 = sub_10011C280(v170, v172, v173, isa);

  sub_10011B698((uint64_t)&v271);
  v178 = (uint64_t)v214;
  v179 = v215;
  v217(v214, enum case for DockStatus.DockedRSSI(_:), v215);
  v180 = v219;
  v181 = swift_beginAccess(v219, &v274, 33, 0);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v213[5])(v180, v178, v179, v181);
  swift_endAccess(&v274);
  v182 = v242;
  v183 = *(void **)&v242[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
  *(_QWORD *)&v242[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;

  v184 = swift_allocObject(&unk_10023A490, 24, 7);
  swift_unknownObjectWeakInit(v184 + 16, v182);
  if (v262 == 2
    || (v262 & 0x10000) == 0
    || (type metadata accessor for DockCoreManager(0, v185, v186, v187),
        (static DockCoreManager.ignoreStartupValidation.getter() & 1) != 0))
  {
    v188 = v242;
    v189 = *(_QWORD *)&v242[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
    v218(v178, v180, v179);
    DockDetector.newStatus(_:monitorJarvisCallback:)(v178, 0, 0);
    v220(v178, v179);
    v190 = (void (***)(_QWORD, _QWORD))(v189 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
    swift_beginAccess(v190, &v274, 0, 0);
    v260 = *v190;
    v52 = swift_allocObject(&unk_10023A4B8, 112, 7);
    *(_QWORD *)(v52 + 16) = v184;
    *(_QWORD *)(v52 + 24) = v188;
    *(_QWORD *)(v52 + 32) = v177;
    v191 = v272;
    *(_OWORD *)(v52 + 40) = v271;
    *(_OWORD *)(v52 + 56) = v191;
    *(_OWORD *)(v52 + 72) = v273;
    v192 = v223;
    *(_QWORD *)(v52 + 88) = v85;
    *(_QWORD *)(v52 + 96) = v192;
    v193 = v224;
    *(_QWORD *)(v52 + 104) = v224;
    v57 = v83;
    v245 = v80;
    v194 = v80;
    v195 = v177;
    a1 = v249;
    sub_1000D53FC(v263, v264, (uint64_t)v253, v83, v194, (unint64_t)v249);
    v262 = v184;
    swift_retain(v184);
    v196 = v188;
    v261 = v195;
    v38 = v85;
    sub_1000BC8F4(v192, v193);
    v197 = qword_10026BC00;
    v43 = v260;
    if (v197 == -1)
      goto LABEL_102;
    goto LABEL_108;
  }
  v202 = v242;
  v262 = *(_QWORD *)&v242[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
  v218(v178, v180, v179);
  v203 = v178;
  v204 = swift_allocObject(&unk_10023A4E0, 112, 7);
  *(_QWORD *)(v204 + 16) = v184;
  *(_QWORD *)(v204 + 24) = v202;
  *(_QWORD *)(v204 + 32) = v177;
  v205 = v272;
  *(_OWORD *)(v204 + 40) = v271;
  *(_OWORD *)(v204 + 56) = v205;
  *(_OWORD *)(v204 + 72) = v273;
  v206 = v223;
  *(_QWORD *)(v204 + 88) = v85;
  *(_QWORD *)(v204 + 96) = v206;
  v207 = v224;
  *(_QWORD *)(v204 + 104) = v224;
  sub_1000D53FC(v263, v264, (uint64_t)v253, v83, v80, (unint64_t)v249);
  swift_retain(v184);
  v208 = v202;
  v209 = v177;
  v210 = v85;
  sub_1000BC8F4(v206, v207);
  DockDetector.newStatus(_:monitorJarvisCallback:)(v203, (uint64_t)sub_1000D54B4, v204);

  swift_release(v204);
  sub_1000D4AE8(v263, v264, (uint64_t)v253, v83, v80, (unint64_t)v249);

  v220(v203, v215);
  sub_1000D53C0(v244);
  return swift_release(v184);
}

void *sub_1000C6A20(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)(id *);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;

  v4 = a3;
  v26 = &_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
      v24 = v4 & 0xC000000000000001;
      v22 = v4;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v25 = v9;
        v12 = a2;
        v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v14 = v7;
          v15 = a1;
          v16 = a2;
          v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          a1 = v15;
          v7 = v14;
          v4 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v26;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

void sub_1000C6BC4(char a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t Strong;
  char *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  id *v31;
  id v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __n128 v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51[24];
  _BYTE v52[24];
  _BYTE v53[24];

  v49 = a6;
  v50 = a7;
  v14 = type metadata accessor for DockStatus(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a2 + 16;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(v18, v53, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (Strong)
    {
      v20 = (char *)Strong;
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v21 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
      v22 = swift_allocObject(&unk_10023A508, 32, 7);
      *(_QWORD *)(v22 + 16) = a2;
      *(_QWORD *)(v22 + 24) = a3;
      v23 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
      v24 = v21;
      swift_retain(a2);
      v25 = a3;
      v26 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v21, sub_1000D54D0, v22, 5.0);
      v27 = *(void **)&v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
      *(_QWORD *)&v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = v26;

    }
    swift_beginAccess(a2 + 16, v52, 0, 0);
    v28 = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (v28)
    {
      v29 = (void *)v28;
      v30 = (char *)*(id *)(v28 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

      v31 = (id *)&v30[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
      swift_beginAccess(&v30[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v51, 0, 0);
      v32 = *v31;

      v33 = swift_allocObject(&unk_10023A530, 112, 7);
      *(_QWORD *)(v33 + 16) = a2;
      *(_QWORD *)(v33 + 24) = a3;
      *(_QWORD *)(v33 + 32) = a4;
      v34 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)(v33 + 40) = *(_OWORD *)a5;
      *(_OWORD *)(v33 + 56) = v34;
      *(_OWORD *)(v33 + 72) = *(_OWORD *)(a5 + 32);
      v36 = v49;
      v35 = v50;
      *(_QWORD *)(v33 + 88) = v49;
      *(_QWORD *)(v33 + 96) = v35;
      *(_QWORD *)(v33 + 104) = a8;
      swift_retain(a2);
      v37 = a3;
      v38 = a4;
      sub_1000D5560((_QWORD *)a5);
      v39 = v36;
      sub_1000BC8F4(v35, a8);
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v40 = objc_msgSend(v32, "description");
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      sub_10015B790(v41, v43, (uint64_t)sub_1000D5538, v33);
      swift_release(v33);
      swift_bridgeObjectRelease(v43);
    }
  }
  else
  {
    swift_beginAccess(v18, v53, 0, 0);
    v44 = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (v44)
    {
      v45 = (char *)v44;
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DockStatus.Undocked(_:), v14);
      v46 = &v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
      v47 = swift_beginAccess(&v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], v52, 33, 0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v15 + 40))(v46, v17, v14, v47);
      swift_endAccess(v52);

    }
  }
}

uint64_t sub_1000C6F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  char *v15;
  id *v16;
  id v17;
  id v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  char *v35;
  void *v36;
  uint64_t result;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];
  char v47[24];
  char v48[24];
  char v49[24];
  _BYTE v50[24];
  char v51[24];
  char v52[24];
  char v53[32];

  v45 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DockStatus(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v53, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (Strong)
  {
    v13 = (void *)Strong;
    v43 = v6;
    v44 = v4;
    v14 = v3;
    v15 = (char *)*(id *)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    v16 = (id *)&v15[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess(&v15[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v52, 0, 0);
    v17 = *v16;

    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v18 = objc_msgSend(v17, "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    sub_10015C70C(v19, v21);
    swift_bridgeObjectRelease(v21);
    v3 = v14;
    v4 = v44;
    v6 = v43;
  }
  swift_beginAccess(v11, v51, 0, 0);
  v22 = swift_unknownObjectWeakLoadStrong(v11);
  if (v22)
  {
    v23 = (char *)v22;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DockStatus.Undocked(_:), v7);
    v24 = &v23[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
    v25 = swift_beginAccess(&v23[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], v50, 33, 0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 40))(v24, v10, v7, v25);
    swift_endAccess(v50);

  }
  swift_beginAccess(v11, v50, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v11);
  if (v26)
  {
    v27 = (void *)v26;
    v28 = *(id *)(v26 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    v29 = v45 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
    v30 = swift_beginAccess(v45 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus, v49, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, v29, v7, v30);
    DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v10, 0, 0);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_beginAccess(v11, v48, 0, 0);
  v31 = swift_unknownObjectWeakLoadStrong(v11);
  if (v31)
  {
    v32 = (void *)v31;
    v33 = *(void **)(v31 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer);
    v34 = v33;

    if (v33)
    {
      dispatch thunk of RepeatingTimer.cancel()();

    }
  }
  swift_beginAccess(v11, v47, 0, 0);
  v35 = (char *)swift_unknownObjectWeakLoadStrong(v11);
  if (v35)
  {
    v36 = *(void **)&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
    *(_QWORD *)&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;

  }
  swift_beginAccess(v11, v46, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v11);
  if (result)
  {
    v38 = (void *)result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, result + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);

    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No core motion update received, timing out.", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void sub_1000C7340(objc_class *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  uint64_t v32;
  char *v33;
  id *v34;
  id v35;
  id v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  id *v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __n128 v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  __n128 v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62[24];
  _BYTE v63[24];
  _BYTE v64[24];
  char v65[24];
  char v66[24];
  char v67[24];
  char v68[24];
  char v69[24];
  char v70[16];
  CMDeviceMotion_optional v71;

  v60 = a8;
  v59 = a7;
  v58 = a6;
  v57 = a5;
  v56 = a4;
  v11 = type metadata accessor for DockStatus(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v70, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v17 = (void *)Strong;
    v18 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer);
    v19 = v18;

    if (v18)
    {
      dispatch thunk of RepeatingTimer.cancel()(v20, v21, v22, v23, v24);

    }
  }
  swift_beginAccess(v15, v69, 0, 0);
  v25 = (char *)swift_unknownObjectWeakLoadStrong(v15);
  if (v25)
  {
    v26 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
    *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;

  }
  swift_beginAccess(v15, v68, 0, 0);
  v27 = swift_unknownObjectWeakLoadStrong(v15);
  if (v27)
  {
    v28 = (void *)v27;
    v61 = v14;
    v29 = v11;
    v30 = v12;
    v31 = a1;
    v32 = a3;
    v33 = (char *)*(id *)(v27 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    v34 = (id *)&v33[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess(&v33[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v67, 0, 0);
    v35 = *v34;

    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v36 = objc_msgSend(v35, "description", v56, v57, v58, v59, v60);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    sub_10015C70C(v37, v39);
    swift_bridgeObjectRelease(v39);
    a3 = v32;
    a1 = v31;
    v12 = v30;
    v11 = v29;
    v14 = v61;
  }
  swift_beginAccess(v15, v66, 0, 0);
  v40 = swift_unknownObjectWeakLoadStrong(v15);
  if (!v40)
    goto LABEL_14;
  v41 = (void *)v40;
  v42 = (char *)*(id *)(v40 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

  v43 = (id *)&v42[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
  swift_beginAccess(&v42[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v65, 0, 0);
  v44 = *v43;

  v71.value.super.super.isa = a1;
  LOBYTE(v42) = MotionValidator.isPositionValid(deviceMotion:)(v71);

  if ((v42 & 1) != 0)
  {
    swift_beginAccess(v15, v64, 0, 0);
    v45 = swift_unknownObjectWeakLoadStrong(v15);
    if (v45)
    {
      v46 = (void *)v45;
      sub_1000C7B10(v56, v57, v58, v59, v60, 2);

    }
  }
  else
  {
LABEL_14:
    swift_beginAccess(v15, v64, 0, 0);
    v47 = swift_unknownObjectWeakLoadStrong(v15);
    if (v47)
    {
      v48 = (char *)v47;
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DockStatus.Undocked(_:), v11);
      v49 = &v48[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
      v50 = swift_beginAccess(&v48[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], v63, 33, 0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v12 + 40))(v49, v14, v11, v50);
      swift_endAccess(v63);

    }
    swift_beginAccess(v15, v63, 0, 0);
    v51 = swift_unknownObjectWeakLoadStrong(v15);
    if (v51)
    {
      v52 = (void *)v51;
      v53 = *(id *)(v51 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

      v54 = a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
      v55 = swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus, v62, 0, 0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, v54, v11, v55);
      DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v14, 0, 0);

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

void sub_1000C7774(objc_class *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  uint64_t v18;
  char *v19;
  id *v20;
  id v21;
  id v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  id *v29;
  id v30;
  Swift::Bool v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  __n128 v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  objc_class *v48;
  char v49[24];
  _BYTE v50[24];
  _BYTE v51[24];
  char v52[24];
  char v53[24];
  char v54[24];
  char v55[32];
  CMDeviceMotion_optional v56;

  v47 = a8;
  v46 = a7;
  v45 = a6;
  v44 = a5;
  v43 = a4;
  v11 = type metadata accessor for DockStatus(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v55, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v17 = (void *)Strong;
    v48 = a1;
    v18 = a3;
    v19 = (char *)*(id *)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    v20 = (id *)&v19[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess(&v19[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v54, 0, 0);
    v21 = *v20;

    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v22 = objc_msgSend(v21, "description", v43, v44, v45, v46, v47);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    sub_10015C70C(v23, v25);
    swift_bridgeObjectRelease(v25);
    a3 = v18;
    a1 = v48;
  }
  swift_beginAccess(v15, v53, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v15);
  if (!v26)
    goto LABEL_9;
  v27 = (void *)v26;
  v28 = (char *)*(id *)(v26 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

  v29 = (id *)&v28[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
  swift_beginAccess(&v28[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator], v52, 0, 0);
  v30 = *v29;

  v56.value.super.super.isa = a1;
  v31 = MotionValidator.isPositionValid(deviceMotion:)(v56);

  if (v31)
  {
    swift_beginAccess(v15, v51, 0, 0);
    v32 = swift_unknownObjectWeakLoadStrong(v15);
    if (v32)
    {
      v33 = (void *)v32;
      sub_1000C7B10(v43, v44, v45, v46, v47, 2);

    }
  }
  else
  {
LABEL_9:
    swift_beginAccess(v15, v51, 0, 0);
    v34 = swift_unknownObjectWeakLoadStrong(v15);
    if (v34)
    {
      v35 = (char *)v34;
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DockStatus.Undocked(_:), v11);
      v36 = &v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
      v37 = swift_beginAccess(&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], v50, 33, 0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v12 + 40))(v36, v14, v11, v37);
      swift_endAccess(v50);

    }
    swift_beginAccess(v15, v50, 0, 0);
    v38 = swift_unknownObjectWeakLoadStrong(v15);
    if (v38)
    {
      v39 = (void *)v38;
      v40 = *(id *)(v38 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

      v41 = a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
      v42 = swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus, v49, 0, 0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, v41, v11, v42);
      DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v14, 0, 0);

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t sub_1000C7B10(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  char *v6;
  char *v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v7 = v6;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v17 - 8);
  v34 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    swift_retain(a5);
    v20 = sub_1000C3268(a1, a2, a3, a4, a5);
    result = sub_1000B1410(a4, a5);
    if ((v20 & 1) != 0)
      return result;
  }
  else
  {
    v31 = swift_allocObject(&unk_10023A3C8, 33, 7);
    *(_QWORD *)(v31 + 16) = v7;
    *(_QWORD *)(v31 + 24) = a3;
    *(_BYTE *)(v31 + 32) = a6;
    v7;
    v32 = sub_1000C3268(a1, a2, a3, (uint64_t)&unk_10026CFD0, v31);
    result = swift_release(v31);
    if ((v32 & 1) != 0)
      return result;
  }
  v22 = *(void **)&v7[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  v23 = swift_allocObject(&unk_10023A3F0, 32, 7);
  *(_QWORD *)(v23 + 16) = v7;
  *(_QWORD *)(v23 + 24) = a3;
  aBlock[4] = sub_1000D532C;
  v38 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023A408;
  v24 = _Block_copy(aBlock);
  v25 = v7;
  v26 = a3;
  v27 = v22;
  static DispatchQoS.unspecified.getter(v27);
  v36 = _swiftEmptyArrayStorage;
  v28 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v30 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v14, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v34);
  return swift_release(v38);
}

uint64_t sub_1000C7DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 48) = a5;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_1000C7DE4, 0, 0);
}

uint64_t sub_1000C7DE4()
{
  uint64_t v0;

  sub_1000C7E1C(*(void **)(v0 + 16), *(void **)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000C7E1C(void *a1, void *a2, int a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _DWORD v64[2];
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  int v72;
  void *v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD aBlock[5];
  uint64_t v78;
  _BYTE v79[48];
  uint64_t v80;
  uint64_t v81;
  int v82;

  v5 = v4;
  v72 = a3;
  v73 = a2;
  v74 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  __chkstk_darwin(v15);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  v24 = (char *)v64 - v20;
  if (a4)
  {
    v25 = v22;
    v26 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v75 = v21;
    v26((char *)v64 - v20, &v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v21);
    swift_errorRetain(a4);
    swift_errorRetain(a4);
    v27 = swift_errorRetain(a4);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 138412290;
      swift_errorRetain(a4);
      v32 = _swift_stdlib_bridgeErrorToNSError(a4);
      v80 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v30 + 4, v30 + 12);
      *v31 = v32;
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed discovering paired acessory %@", v30, 0xCu);
      v33 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v31, 1, v33);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease(a4);
    }
    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      swift_errorRelease(a4);

    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v75);
  }
  else
  {
    v34 = v73;
    v71 = v5;
    v66 = v14;
    v67 = v12;
    v68 = v11;
    v69 = v10;
    v70 = v8;
    if (v74)
    {
      v65 = v23;
      v35 = v22;
      v75 = v21;
      v74 = v74;
      v36 = sub_10011B7AC();
      if (v37 >> 60 == 15)
      {

      }
      else
      {
        v38 = v36;
        v39 = v37;
        sub_10009B27C(v36, v37);
        sub_100186EF0(v38, v39);
        v40 = sub_1000D55A0((uint64_t)v79, (uint64_t)&v80, (uint64_t *)&unk_10026CF08);
        v41 = v81;
        if (v81)
        {
          v42 = v80;
          v64[1] = v82;
          v43 = v34;
          DockCoreInfo.identifier.getter(v40);
          v44 = sub_10011D00C((uint64_t)v17);
          v46 = v45;
          v47 = sub_100186B98(v44, v45, v42, v41);
          sub_10009B2FC(v44, v46);
          if ((v47 & 1) != 0)
          {
            v48 = v71;
            v49 = *(void **)&v71[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
            v50 = swift_allocObject(&unk_10023A440, 33, 7);
            *(_QWORD *)(v50 + 16) = v48;
            *(_QWORD *)(v50 + 24) = v43;
            *(_BYTE *)(v50 + 32) = v72;
            aBlock[4] = sub_1000D5354;
            v78 = v50;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_10012357C;
            aBlock[3] = &unk_10023A458;
            v51 = _Block_copy(aBlock);
            v52 = v49;
            v53 = v48;
            v54 = v43;
            v55 = v66;
            static DispatchQoS.unspecified.getter(v54);
            v76 = _swiftEmptyArrayStorage;
            v56 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v57 = sub_10009061C((uint64_t *)&unk_10026BF60);
            v58 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
            v59 = v69;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v57, v58, v7, v56);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v51);
            sub_1000D4AB4((uint64_t)v79);

            _Block_release(v51);
            sub_10009E3A0(v38, v39);
            (*(void (**)(char *, uint64_t))(v70 + 8))(v59, v7);
            (*(void (**)(char *, uint64_t))(v67 + 8))(v55, v68);
            swift_release(v78);
          }
          else
          {
            v60 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 16))(v65, &v71[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v75);
            v61 = Logger.logObject.getter(v60);
            v62 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v61, v62))
            {
              v63 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v63 = 0;
              _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed dicovering paired accessory with unique identiier", v63, 2u);
              swift_slowDealloc(v63, -1, -1);
              sub_1000D4AB4((uint64_t)v79);

              sub_10009E3A0(v38, v39);
            }
            else
            {
              sub_10009E3A0(v38, v39);
              sub_1000D4AB4((uint64_t)v79);

            }
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v65, v75);
          }
        }
        else
        {
          sub_10009E3A0(v38, v39);

        }
      }
    }
  }
}

uint64_t sub_1000C84A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Timing out prox card!", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken);
    if (!v13)
      return result;
    v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    swift_retain(v13);
    sub_10009B27C(v14, v15);
    sub_10011CAC4(v14, v15);
    v17 = v16;
    v19 = v18;
    sub_10009B2FC(v14, v15);
    v20 = sub_1000ABB30();
    v21 = swift_allocError(&type metadata for DockdError, v20, 0, 0);
    *v22 = 4;
    v23 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    v24 = v23;
    if (*(_QWORD *)(v1 + v11))
    {
      *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 0;
      v25 = *(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      sub_1001319A0(v17, v19, 5, v24, v21);
      swift_bridgeObjectRelease(v24);

    }
    else
    {
      swift_bridgeObjectRelease(v23);
    }
    swift_errorRelease(v21);
    swift_release(v13);
    swift_bridgeObjectRelease(v19);
  }
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  v26 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
  if (v26)
  {
    swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
    sub_1000DAD94(4);
    swift_release(v26);
  }
  return sub_1000D5CB0();
}

uint64_t sub_1000C872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  _QWORD v12[15];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  result = __chkstk_darwin(v8);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
  if (v10)
  {
    v12[14] = v5;
    if (*(_QWORD *)(v10 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken))
    {
      v12[12] = v3;
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard) = 0;

    *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 0;
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    return sub_1000D5CB0();
  }
  return result;
}

uint64_t sub_1000C9730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v20;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v20 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  if (allowedForDockKit()())
  {
    if (sub_1000D36D8())
    {
      v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v8, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v12, v13))
      {
        v10 = v8;
        goto LABEL_14;
      }
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ingoring URI request: device already connected or connecting over BLE", v14, 2u);
      v10 = v8;
    }
    else
    {
      if (!SBSGetScreenLockStatus(0))
        return 1;
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
      v12 = Logger.logObject.getter(v17);
      v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v12, v18))
      {
        v10 = v5;
        goto LABEL_14;
      }
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v18, "Ingoring URI request: cannot pair from lock screen", v14, 2u);
      v10 = v5;
    }
    goto LABEL_10;
  }
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v10, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
  v12 = Logger.logObject.getter(v15);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v16))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Ingoring URI request: device not supported", v14, 2u);
LABEL_10:
    swift_slowDealloc(v14, -1, -1);
  }
LABEL_14:

  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);
  return 0;
}

uint64_t sub_1000C99A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *);
  uint64_t (*v34)(_QWORD, _QWORD, _QWORD);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t (*v67)(_QWORD, _QWORD, _QWORD);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;

  v2 = v1;
  v51 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v55 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v52 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v6);
  v59 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Date(0);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v61 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v68 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for Logger(0);
  v18 = __chkstk_darwin(v17);
  v64 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v65 = (char *)&v46 - v21;
  v22 = __chkstk_darwin(v20);
  v49 = (char *)&v46 - v23;
  v24 = __chkstk_darwin(v22);
  v66 = (char *)&v46 - v25;
  v26 = __chkstk_darwin(v24);
  v50 = (char *)&v46 - v27;
  v28 = __chkstk_darwin(v26);
  v71 = (char *)&v46 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v46 - v30;
  v75 = v32;
  v33 = *(void (**)(char *))(v32 + 16);
  v73 = v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  v33((char *)&v46 - v30);
  v74 = v12;
  v34 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v12 + 16);
  v70 = a1;
  v67 = v34;
  v35 = v34(v16, a1, v11);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter();
  v38 = os_log_type_enabled(v36, v37);
  v60 = v9;
  v69 = v11;
  if (v38)
  {
    v39 = swift_slowAlloc(12, -1);
    v72 = v33;
    v40 = (uint8_t *)v39;
    v41 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v78 = v41;
    v48 = v2;
    *(_DWORD *)v40 = 136315138;
    v47 = v17;
    v42 = URL.absoluteString.getter();
    v44 = v43;
    v76 = sub_1000906BC(v42, v43, (uint64_t *)&v78);
    v2 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease(v44);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v11);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Got URI request: %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v31, v47);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v11);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v31, v17);
  }
  result = sub_1000C9730();
  if ((result & 1) != 0)
    __asm { BR              X10 }
  return result;
}

void sub_1000CAA94(uint64_t a1, _QWORD *a2)
{
  id v2;

  v2 = *(id *)(*sub_10009B038(a2, a2[3]) + 24);
  sub_1000CF780((uint64_t)v2, 1);

}

uint64_t sub_1000CAAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_10026D66C);
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_1000CAB30;
  return sub_1000E27D8();
}

uint64_t sub_1000CAB30()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  v2 = (_QWORD *)swift_task_alloc(dword_10026D5C4);
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v4;
  v2[1] = sub_1000CAB94;
  return sub_1000DFE18();
}

uint64_t sub_1000CAB94()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1000CABDC(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = *(id *)(a2 + 24);
  sub_1000CF780((uint64_t)v2, 1);

}

uint64_t sub_1000CAC18()
{
  return sub_1000D580C("startDiscoveringAccessoryServers()");
}

uint64_t sub_1000CAC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "stopDiscoveringAccessoryServers()", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager__performingGeneralScan) = 0;
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  return sub_1000D5CB0();
}

uint64_t sub_1000CADD4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];
  _BYTE v47[24];
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v6);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v44 = v3;
  if (v13)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    result = swift_slowAlloc(32, -1);
    *(_QWORD *)&v48 = result;
    *(_DWORD *)v14 = 136315138;
    if (a2)
    {
      v16 = result;
      swift_bridgeObjectRetain(a2);
      v45 = sub_1000906BC(a1, a2, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Request by HAP to deregister accessory %s.", v14, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v3 = v44;
      goto LABEL_5;
    }
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease_n(a2, 2);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!a2)
    goto LABEL_30;
LABEL_5:
  v17 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v18 = *(id *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v47, 0, 0);
  v20 = *v19;
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_18:
    v32 = *(id *)(v3 + v17);
    OS_dispatch_semaphore.signal()();

    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    return sub_10009B2C0((uint64_t)&v48, (uint64_t *)&unk_10026DF40);
  }
  v43 = v17;
  v22 = v20 + 32;
  swift_bridgeObjectRetain(v20);
  while (1)
  {
    sub_10009AFF4(v22, (uint64_t)&v45);
    v23 = *(void **)(*sub_10009B038(&v45, v46[2]) + 32);
    if (!v23)
      goto LABEL_8;
    v24 = v23;
    v25 = objc_msgSend(v24, "identifier");
    if (v25)
      break;
LABEL_7:

LABEL_8:
    sub_100090E88(&v45);
    v22 += 40;
    if (!--v21)
    {
      swift_bridgeObjectRelease(v20);
      v17 = v43;
      v3 = v44;
      goto LABEL_18;
    }
  }
  v26 = v25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v29 = v28;

  if (v27 != a1 || v29 != a2)
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, a1, a2, 0);
    swift_bridgeObjectRelease(v29);
    if ((v31 & 1) != 0)
    {
      v29 = v20;
      goto LABEL_22;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(v20);
LABEL_22:
  swift_bridgeObjectRelease(v29);
  v33 = v44;
  v34 = *(id *)(v44 + v43);
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)&v45, (uint64_t)&v48);
  sub_100090E88(&v45);
  if (!*((_QWORD *)&v49 + 1))
    return sub_10009B2C0((uint64_t)&v48, (uint64_t *)&unk_10026DF40);
  v35 = sub_10009061C(&qword_10026C2E0);
  v36 = type metadata accessor for DaemonAccessory(0);
  result = swift_dynamicCast(&v45, &v48, v35, v36, 6);
  if ((result & 1) != 0)
  {
    v37 = v45;
    if (*(_BYTE *)(v45 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
    {
      return swift_release(v45);
    }
    else
    {
      v38 = *(id *)(v33 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      v39 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
      sub_1001319A0(a1, a2, 5, v39, 0);

      swift_bridgeObjectRelease(v39);
      *(_BYTE *)(v33 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 0;
      if (qword_10026BC20 != -1)
        swift_once(&qword_10026BC20, sub_1001A3078);
      v40 = (void *)qword_1002757B0;
      v41 = swift_allocObject(&unk_10023A328, 32, 7);
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      v42 = v40;
      sub_1001A3584((uint64_t)sub_1000D5C54, v41);
      swift_release(v37);
      return swift_release(v41);
    }
  }
  return result;
}

uint64_t sub_1000CB280(uint64_t a1, unint64_t a2)
{
  return sub_1000D5914(a1, a2, "markNotifyingCharacteristicUpdated(%s)");
}

uint64_t sub_1000CB298(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease(v8);
}

id sub_1000CB354(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  char v47[24];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[6];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v1;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "HAP requested BLE disconnect.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  result = (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!a1)
  {
    __break(1u);
    goto LABEL_32;
  }
  result = objc_msgSend(a1, "identifier");
  if (!result)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  v12 = result;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v15 = v14;

  v16 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v17 = v45;
  v18 = *(id *)(v45 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v19 = (uint64_t *)(v17 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(v17 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v47, 0, 0);
  v20 = *v19;
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_18:
    v32 = *(id *)(v45 + v16);
    OS_dispatch_semaphore.signal()();

    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    goto LABEL_21;
  }
  v44 = v16;
  v22 = v20 + 32;
  swift_bridgeObjectRetain(v20);
  while (1)
  {
    sub_10009AFF4(v22, (uint64_t)v46);
    v23 = *(void **)(*sub_10009B038(v46, v46[3]) + 32);
    if (!v23)
      goto LABEL_8;
    v24 = v23;
    v25 = objc_msgSend(v24, "identifier");
    if (v25)
      break;
LABEL_7:

LABEL_8:
    sub_100090E88(v46);
    v22 += 40;
    if (!--v21)
    {
      swift_bridgeObjectRelease(v20);
      v16 = v44;
      goto LABEL_18;
    }
  }
  v26 = v25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v29 = v28;

  if (v27 != v13 || v29 != v15)
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v13, v15, 0);
    swift_bridgeObjectRelease(v29);
    if ((v31 & 1) != 0)
      goto LABEL_20;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(v20);
  v20 = v15;
LABEL_20:
  swift_bridgeObjectRelease(v20);
  v33 = *(id *)(v45 + v44);
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v46, (uint64_t)&v48);
  sub_100090E88(v46);
LABEL_21:
  swift_bridgeObjectRelease(v15);
  if (*((_QWORD *)&v49 + 1))
  {
    sub_10009B340(&v48, (uint64_t)v51);
    v34 = *(char **)(*sub_10009B038(v51, v51[3]) + 16);
    if (v34 && *(_QWORD *)&v34[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
    {
      v35 = qword_10026BC20;
      v36 = v34;
      if (v35 != -1)
        swift_once(&qword_10026BC20, sub_1001A3078);
      v37 = (void *)qword_1002757B0;
      v38 = swift_allocObject(&unk_10023A300, 32, 7);
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = v34;
      v39 = v36;
      v40 = v37;
      sub_1001A3584((uint64_t)sub_1000D5C54, v38);

      swift_release(v38);
    }
    return (id)sub_100090E88(v51);
  }
  else
  {
    sub_10009B2C0((uint64_t)&v48, (uint64_t *)&unk_10026DF40);
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v41 = (void *)qword_1002757B0;
    v42 = swift_allocObject(&unk_10023A2D8, 32, 7);
    *(_QWORD *)(v42 + 16) = v41;
    *(_QWORD *)(v42 + 24) = 0;
    v43 = v41;
    sub_1001A3584((uint64_t)sub_1000D5C54, v42);
    return (id)swift_release(v42);
  }
}

uint64_t sub_1000CB7D0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v5);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "setConnectionLatency()", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a1 == 2)
  {
    if (qword_10026BC20 == -1)
    {
      if (!a2)
      {
LABEL_18:
        __break(1u);
LABEL_19:
        result = swift_once(&qword_10026BC20, sub_1001A3078);
        if (!a2)
          goto LABEL_20;
LABEL_13:
        v14 = -5;
        return sub_1001A39EC(v14, a2);
      }
LABEL_10:
      v14 = 1;
      return sub_1001A39EC(v14, a2);
    }
LABEL_17:
    swift_once(&qword_10026BC20, sub_1001A3078);
    if (!a2)
      goto LABEL_18;
    goto LABEL_10;
  }
  if (!a1)
  {
    if (qword_10026BC20 == -1)
    {
      if (a2)
      {
LABEL_7:
        v14 = 0;
        return sub_1001A39EC(v14, a2);
      }
    }
    else
    {
      swift_once(&qword_10026BC20, sub_1001A3078);
      if (a2)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_17;
  }
  if (qword_10026BC20 != -1)
    goto LABEL_19;
  if (a2)
    goto LABEL_13;
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000CB9F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v64 = a2;
  v65 = a1;
  v60 = type metadata accessor for CocoaError.Code(0);
  v59 = *(_QWORD *)(v60 - 8);
  v3 = __chkstk_darwin(v60);
  v58 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v57 = (char *)&v51 - v5;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  v67 = v7;
  v8 = __chkstk_darwin(v6);
  v62 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v54 = (char *)&v51 - v11;
  __chkstk_darwin(v10);
  v53 = (char *)&v51 - v12;
  v61 = type metadata accessor for CocoaError(0);
  v55 = *(_QWORD *)(v61 - 8);
  v13 = __chkstk_darwin(v61);
  v56 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = type metadata accessor for URL.DirectoryHint(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v51 - v27;
  v63 = v2;
  sub_1000C0474((uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10009B2C0((uint64_t)v21, &qword_10026BF70);
    return 0;
  }
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
  v30 = v22;
  v31 = v64;
  if (v64)
  {
    v68 = v65;
    v69 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
    v32 = sub_1000D4CF4();
    swift_bridgeObjectRetain(v31);
    URL.append<A>(component:directoryHint:)(&v68, v18, &type metadata for String, v32);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_bridgeObjectRelease(v69);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v30);
    v33 = objc_allocWithZone((Class)NSData);
    v34 = sub_1000D2C84((uint64_t)v26, 2);
    v35 = v31;
    v61 = v30;
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

    sub_100090EE8(0, &qword_10026CF88, NSKeyedUnarchiver_ptr);
    v39 = sub_100090EE8(0, (unint64_t *)&unk_10026CF90, off_100235E48);
    v62 = v36;
    v40 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v39, v36, v38, v39);
    v41 = v66;
    v50 = v40;
    v59 = v38;
    v60 = v23;
    v42 = v67;
    v43 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v53, v63 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v66);
    v44 = v31;
    v45 = swift_bridgeObjectRetain_n(v31, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v52 = v28;
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v68 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain(v44);
      v70 = sub_1000906BC(v65, v44, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v44, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Loaded accessory cache for %s.", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
      sub_10009B2FC(v62, v59);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v41);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v61);
    }
    else
    {
      swift_bridgeObjectRelease_n(v35, 2);
      sub_10009B2FC(v62, v59);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v61);
    }
    return v50;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CC5AC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *object;
  NSString v27;
  id v28;
  NSURL *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  Swift::String v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  char v69[16];
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v5 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  v6 = __chkstk_darwin(v5);
  v63 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v62 = (char *)&v60 - v8;
  v9 = type metadata accessor for URL.DirectoryHint(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v2;
  sub_1000C0474((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    return sub_10009B2C0((uint64_t)v15, &qword_10026BF70);
  v21 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 32);
  v61 = v16;
  result = v21(v19, v15, v16);
  if (!a2)
  {
    __break(1u);
    return result;
  }
  v70 = a1;
  v71 = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for URL.DirectoryHint.inferFromPath(_:), v9);
  v22 = sub_1000D4CF4();
  swift_bridgeObjectRetain(a2);
  URL.append<A>(component:directoryHint:)(&v70, v12, &type metadata for String, v22);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease(v71);
  v24 = (void *)objc_opt_self(NSFileManager, v23);
  v25 = objc_msgSend(v24, "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v25, "fileExistsAtPath:", v27);

  if ((_DWORD)object)
  {
    v28 = objc_msgSend(v24, "defaultManager");
    URL._bridgeToObjectiveC()(v29);
    v31 = v30;
    v70 = 0;
    v32 = objc_msgSend(v28, "removeItemAtURL:error:", v30, &v70);

    v33 = v70;
    if (!v32)
    {
      v45 = v33;
      v46 = _convertNSErrorToError(_:)(v33);

      swift_willThrow(v47);
      v48 = v65;
      v49 = v63;
      v50 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v64 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v66);
      swift_errorRetain(v46);
      v51 = swift_errorRetain(v46);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v52, v53))
      {
        swift_errorRelease(v46);
        swift_errorRelease(v46);
        swift_errorRelease(v46);

        v43 = *(void (**)(char *, uint64_t))(v48 + 8);
        v44 = v49;
        v59 = v50;
        goto LABEL_13;
      }
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = (void *)swift_slowAlloc(32, -1);
      v70 = v55;
      *(_DWORD *)v54 = 136315138;
      swift_getErrorValue(v46, v69, v68);
      v56 = Error.localizedDescription.getter(v68[1], v68[2]);
      v58 = v57;
      v72 = sub_1000906BC(v56, v57, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v58);
      swift_errorRelease(v46);
      swift_errorRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to remove cache file: %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      swift_errorRelease(v46);
      v43 = *(void (**)(char *, uint64_t))(v65 + 8);
      v44 = v63;
LABEL_10:
      v59 = v66;
LABEL_13:
      v43(v44, v59);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v61);
    }
    v34 = v65;
    v35 = v62;
    v36 = v66;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 16))(v62, v64 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v66);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v72 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_beginAccess(v19, &v70, 0, 0);
      v42 = URL.path(percentEncoded:)(1);
      v67 = sub_1000906BC(v42._countAndFlagsBits, (unint64_t)v42._object, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v42._object);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Removed cache file: %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v43 = *(void (**)(char *, uint64_t))(v34 + 8);
      v44 = v62;
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v61);
}

uint64_t sub_1000CCBD0(void *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void (*v36)(char *);
  uint64_t v37;
  NSObject *v38;
  _BOOL4 v39;
  _DWORD *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t (*v45)(char *, uint64_t);
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint8_t *v53;
  NSObject *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v58;
  id v59;
  void *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  char *v73;
  uint8_t *v74;
  void *v75;
  Swift::String v76;
  __n128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  _QWORD v83[3];
  void *v84;
  char *v85;
  uint64_t v86;
  int v87;
  void (*v88)(char *);
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  NSObject *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102[3];
  uint64_t v103;
  id v104;
  uint64_t v105;

  v3 = type metadata accessor for URL.DirectoryHint(0);
  v96 = *(_QWORD *)(v3 - 8);
  v97 = v3;
  __chkstk_darwin(v3);
  v95 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v5);
  v99 = (uint64_t)v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v83 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v83 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)v83 - v21;
  v23 = __chkstk_darwin(v20);
  __chkstk_darwin(v23);
  v101 = (char *)v83 - v27;
  if (!a1)
  {
    v41 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v15 + 16))(v19, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v14);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Invalid accessory cache!", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v45 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
    v46 = v19;
    return v45(v46, v14);
  }
  v100 = v1;
  v91 = v26;
  v92 = v11;
  v98 = v8;
  v90 = v25;
  v28 = (void *)objc_opt_self(NSKeyedArchiver, v24);
  v104 = 0;
  v29 = a1;
  v30 = objc_msgSend(v28, "archivedDataWithRootObject:requiringSecureCoding:error:", v29, 1, &v104);
  v31 = v104;
  if (!v30)
  {
    v47 = v31;
    v48 = _convertNSErrorToError(_:)(v31);

    swift_willThrow(v49);
    swift_errorRelease(v48);
    v50 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v15 + 16))(v22, v100 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v14);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v52, "Unable to archive data!", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
      v54 = v29;
    }
    else
    {
      v54 = v51;
      v51 = v29;
    }

    v45 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
    v46 = v22;
    return v45(v46, v14);
  }
  v94 = v29;
  v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v34 = v33;

  v35 = v101;
  v36 = *(void (**)(char *))(v15 + 16);
  v89 = v100 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  v36(v101);
  sub_10009B27C(v32, v34);
  v37 = sub_10009B27C(v32, v34);
  v38 = Logger.logObject.getter(v37);
  v87 = static os_log_type_t.default.getter();
  v39 = os_log_type_enabled(v38, (os_log_type_t)v87);
  v93 = v7;
  v88 = v36;
  if (v39)
  {
    v85 = v13;
    v40 = (_DWORD *)swift_slowAlloc(22, -1);
    v84 = (void *)swift_slowAlloc(32, -1);
    v104 = v84;
    *v40 = 134218242;
    v83[2] = v38;
    v86 = v14;
    __asm { BR              X10 }
  }
  sub_10009B2FC(v32, v34);
  sub_10009B2FC(v32, v34);

  v55 = *(void (**)(char *, uint64_t))(v15 + 8);
  v55(v35, v14);
  v56 = v98;
  v58 = v99;
  sub_1000C0474(v99);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v58, 1, v7) == 1)
  {

    sub_10009B2FC(v32, v34);
    return sub_10009B2C0(v58, &qword_10026BF70);
  }
  else
  {
    v101 = (char *)v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v13, v58, v7);
    v59 = -[NSObject pairingIdentifier](v94, "pairingIdentifier");
    if (!v59)
    {
      __break(1u);
      JUMPOUT(0x1000CD7C0);
    }
    v60 = v59;
    v61 = v13;
    v62 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v64 = v63;

    v104 = v62;
    v105 = v64;
    v66 = v95;
    v65 = v96;
    v67 = v97;
    (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for URL.DirectoryHint.inferFromPath(_:), v97);
    v68 = sub_1000D4CF4();
    URL.append<A>(component:directoryHint:)(&v104, v66, &type metadata for String, v68);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
    swift_bridgeObjectRelease(v105);
    v69 = v91;
    v70 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v36)(v91, v89, v14);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.default.getter();
    v73 = v61;
    if (os_log_type_enabled(v71, v72))
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = (void *)swift_slowAlloc(32, -1);
      v104 = v75;
      v99 = v32;
      v100 = v34;
      *(_DWORD *)v74 = 136315138;
      swift_beginAccess(v73, v102, 0, 0);
      v76 = URL.path(percentEncoded:)(1);
      v103 = sub_1000906BC(v76._countAndFlagsBits, (unint64_t)v76._object, (uint64_t *)&v104);
      v32 = v99;
      v34 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease(v76._object);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Attempting to save cache to disk at %s", v74, 0xCu);
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v74, -1, -1);
    }

    ((void (*)(uint64_t, uint64_t))v101)(v69, v14);
    v77 = swift_beginAccess(v73, &v104, 0, 0);
    v78 = v98;
    v79 = v92;
    v80 = v93;
    (*(void (**)(char *, char *, uint64_t, __n128))(v98 + 16))(v92, v73, v93, v77);
    Data.write(to:options:)(v79, 1, v32, v34);
    v81 = v73;
    v82 = *(void (**)(char *, uint64_t))(v78 + 8);
    v82(v79, v80);

    sub_10009B2FC(v32, v34);
    return ((uint64_t (*)(char *, uint64_t))v82)(v81, v80);
  }
}

void sub_1000CD8E8(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  _QWORD *v35;
  id v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  os_log_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v5 = v3;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v13 = (void *)sub_1000CB9F8(a1, a2);
    if (v13)
    {
      v51 = v13;
      v14 = objc_msgSend(v13, "peripheralInfo");
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v14, "stateNumber");

        if (v16)
        {
          sub_100090EE8(0, &qword_10026C380, NSNumber_ptr);
          v17 = a3;
          v18 = v16;
          v19 = static NSObject.== infix(_:_:)(v18, v17);

          if ((v19 & 1) != 0)
          {

            return;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v9);
        v20 = v51;
        v21 = a3;
        v22 = v20;
        v23 = v21;
        v4 = v22;
        v24 = Logger.logObject.getter(v4);
        v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, (os_log_type_t)v25))
        {
          v45 = v25;
          v48 = v24;
          v49 = v5;
          v50 = v23;
          v26 = swift_slowAlloc(32, -1);
          v46 = (_QWORD *)swift_slowAlloc(16, -1);
          v47 = swift_slowAlloc(32, -1);
          v53 = v47;
          *(_DWORD *)v26 = 136315650;
          v27 = objc_msgSend(v4, "pairingIdentifier");
          if (!v27)
          {
LABEL_20:

            __break(1u);
            goto LABEL_21;
          }
          v28 = v27;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v31 = v30;

          v52 = sub_1000906BC(v29, v31, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v26 + 4, v26 + 12);

          swift_bridgeObjectRelease(v31);
          *(_WORD *)(v26 + 12) = 2112;
          v32 = objc_msgSend(v4, "peripheralInfo");
          if (!v32)
          {
LABEL_21:

            __break(1u);
            return;
          }
          v33 = v32;
          v34 = objc_msgSend(v32, "stateNumber");

          v43 = v10;
          v44 = v9;
          if (v34)
            v52 = (uint64_t)v34;
          else
            v52 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v26 + 14, v26 + 22);
          v35 = v46;
          *v46 = v34;

          *(_WORD *)(v26 + 22) = 2112;
          v23 = v50;
          v52 = (uint64_t)v50;
          v36 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v26 + 24, v26 + 32);
          v35[1] = a3;

          v37 = v48;
          _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v45, "Updating cached state number for %s: %@ -> %@", (uint8_t *)v26, 0x20u);
          v38 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v35, 2, v38);
          swift_slowDealloc(v35, -1, -1);
          v39 = v47;
          swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v26, -1, -1);

          (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        }
        v40 = objc_msgSend(v4, "peripheralInfo", v43, v44);
        if (v40)
        {
          v41 = v40;
          objc_msgSend(v40, "updateStateNumber:", v23);

          v42 = v4;
          sub_1000CCBD0(v51);

          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_20;
    }
  }
}

BOOL sub_1000CDEC4(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  id v21;
  _BOOL8 v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  unint64_t *v30;
  unint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[5];

  if (!a2)
  {
    __break(1u);
    return result;
  }
  v3 = v2;
  v5 = result;
  v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v7 = *(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v41, 0, 0);
  v9 = *v8;
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
LABEL_15:
    v21 = *(id *)(v3 + v6);
    OS_dispatch_semaphore.signal()();

    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    goto LABEL_16;
  }
  v38 = v6;
  v39 = v3;
  v11 = v9 + 32;
  swift_bridgeObjectRetain(v9);
  while (1)
  {
    sub_10009AFF4(v11, (uint64_t)v45);
    v12 = *(void **)(*sub_10009B038(v45, v45[3]) + 32);
    if (!v12)
      goto LABEL_5;
    v13 = v12;
    v14 = objc_msgSend(v13, "identifier");
    if (v14)
      break;
LABEL_4:

LABEL_5:
    sub_100090E88(v45);
    v11 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease(v9);
      v6 = v38;
      v3 = v39;
      goto LABEL_15;
    }
  }
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  if (v16 != v5 || v18 != a2)
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v5, a2, 0);
    swift_bridgeObjectRelease(v18);
    if ((v20 & 1) != 0)
    {
      v18 = v9;
      goto LABEL_19;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(v9);
LABEL_19:
  swift_bridgeObjectRelease(v18);
  v23 = *(id *)(v39 + v38);
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v45, (uint64_t)&v42);
  sub_100090E88(v45);
  if (!*((_QWORD *)&v43 + 1))
  {
LABEL_16:
    sub_10009B2C0((uint64_t)&v42, (uint64_t *)&unk_10026DF40);
    return 0;
  }
  sub_10009B340(&v42, (uint64_t)v45);
  sub_10009AFF4((uint64_t)v45, (uint64_t)&v42);
  v24 = sub_10009061C(&qword_10026C2E0);
  v25 = type metadata accessor for DaemonAccessory(0);
  if (swift_dynamicCast(&v40, &v42, v24, v25, 6))
  {
    v26 = *(unsigned __int8 *)(v40 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired);
    swift_release(v40);
    v22 = v26 != 0;
  }
  else
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v27 = qword_100275638;
    v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v29 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v29);
    os_unfair_lock_lock(v29 + 4);
    swift_release(v29);
    v30 = (unint64_t *)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, &v42, 0, 0);
    v31 = *v30;
    v32 = *(os_unfair_lock_s **)(v27 + v28);
    swift_bridgeObjectRetain(v31);
    swift_retain(v32);
    os_unfair_lock_unlock(v32 + 4);
    v33 = swift_release(v32);
    __chkstk_darwin(v33);
    v37[2] = v45;
    v34 = (uint64_t)sub_1000C6A20((uint64_t (*)(id *))sub_1000D4CD8, v37, v31);
    v35 = v34;
    if ((unint64_t)v34 >> 62)
    {
      if (v34 >= 0)
        v34 &= 0xFFFFFFFFFFFFFF8uLL;
      v36 = _CocoaArrayWrapper.endIndex.getter(v34);
    }
    else
    {
      v36 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v35);
    v22 = v36 > 0;
  }
  sub_100090E88(v45);
  return v22;
}

uint64_t sub_1000CE248(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  char v6;

  v3 = sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  v4 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v3);
  v5 = *(id *)(*sub_10009B038(a2, a2[3]) + 24);
  v6 = static NSObject.== infix(_:_:)(v4, v5);

  return v6 & 1;
}

void sub_1000CE3BC(uint64_t a1, int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  id v52;
  char *v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  int v69;
  void *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  _QWORD *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void **v88;
  void *v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  _QWORD *v95;
  id v96;
  uint64_t v97;
  void *v98;
  id v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  NSString v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSString v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 v144;
  _QWORD v145[5];
  char v146[24];
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  v134 = a2;
  *(_QWORD *)&v144 = a1;
  v3 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v3);
  v136 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v143 = *(_QWORD **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v132 - v9;
  v142 = type metadata accessor for Logger(0);
  v140 = *(char **)(v142 - 8);
  v11 = __chkstk_darwin(v142);
  v138 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v135 = (char *)&v132 - v14;
  __chkstk_darwin(v13);
  v139 = (char *)&v132 - v15;
  v137 = type metadata accessor for DockStatus(0);
  v16 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v18 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = v2;
  v23 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) != 0)
  {
    if (qword_10026BC20 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10026BC20, sub_1001A3078);
LABEL_3:
  v25 = v141;
  v26 = v142;
  if (*(_BYTE *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) != 3)
  {
    v53 = v140;
    v54 = v138;
    v55 = (*((uint64_t (**)(char *, char *, uint64_t))v140 + 2))(v138, &v141[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v142);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Ignoring connect block, accessory already disconnected!", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    (*((void (**)(char *, uint64_t))v53 + 1))(v54, v26);
    return;
  }
  v27 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DockStatus.Docked(_:), v137);
  v28 = &v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
  v29 = swift_beginAccess(&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus], &v147, 33, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v16 + 40))(v28, v18, v27, v29);
  swift_endAccess(&v147);
  v30 = *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v28, v27);
  v133 = v30;
  DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v18, 0, 0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v27);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015EB50((void *)v144);
  v31 = (uint64_t)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
  v32 = v140;
  v33 = (char *)*((_QWORD *)v140 + 2);
  v34 = v139;
  v137 = v31;
  v138 = v33;
  v35 = ((uint64_t (*)(char *))v33)(v139);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Connected!  Attempting raw write to velocity characteristic.", v38, 2u);
    v39 = v38;
    v34 = v139;
    swift_slowDealloc(v39, -1, -1);
  }

  v139 = (char *)*((_QWORD *)v32 + 1);
  ((void (*)(char *, uint64_t))v139)(v34, v26);
  v40 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v41 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v42 = *(void **)&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v43 = v40;
  v44 = v42;
  OS_dispatch_semaphore.wait()();

  v45 = &v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v146, 0, 0);
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)(*(_QWORD *)v45 + 16);
  if (v47)
  {
    v140 = v43;
    v48 = v46 + 32;
    swift_bridgeObjectRetain(v46);
    while (1)
    {
      sub_10009AFF4(v48, (uint64_t)v145);
      v49 = *(id *)(*sub_10009B038(v145, v145[3]) + 24);
      DockCoreInfo.identifier.getter(v49);

      DockCoreInfo.identifier.getter(v50);
      LOBYTE(v49) = static UUID.== infix(_:_:)(v10, v8);
      v51 = (void (*)(char *, uint64_t))v143[1];
      v51(v8, v5);
      v51(v10, v5);
      if ((v49 & 1) != 0)
        break;
      sub_100090E88(v145);
      v48 += 40;
      if (!--v47)
      {
        swift_bridgeObjectRelease(v46);
        v26 = v142;
        v43 = v140;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v46);
    v59 = *(id *)&v40[v41];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v145, (uint64_t)&v147);
    sub_100090E88(v145);

    v26 = v142;
  }
  else
  {
LABEL_13:
    v52 = *(id *)&v40[v41];
    OS_dispatch_semaphore.signal()();

    v149 = 0;
    v147 = 0u;
    v148 = 0u;

  }
  if (!*((_QWORD *)&v148 + 1))
  {
    sub_10009B2C0((uint64_t)&v147, (uint64_t *)&unk_10026DF40);
    return;
  }
  v60 = sub_10009061C(&qword_10026C2E0);
  v61 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v145, &v147, v60, v61, 6) & 1) != 0)
  {
    v63 = v145[0];
    v64 = *(void **)(v145[0] + 32);
    if (!v64)
      goto LABEL_52;
    v65 = objc_opt_self(HAPAccessoryServerBTLE, v62);
    v66 = swift_dynamicCastObjCClass(v64, v65);
    if (!v66)
      goto LABEL_52;
    v67 = (void *)v66;
    v68 = v64;
    objc_msgSend(v67, "tryEstablishSecuritySession");
    if (!objc_msgSend(v67, "isSecuritySessionOpen"))
    {
      v80 = v135;
      v81 = ((uint64_t (*)(char *, uint64_t, uint64_t))v138)(v135, v137, v26);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Accessory does not contain a velocity characteristic!", v84, 2u);
        swift_slowDealloc(v84, -1, -1);

        swift_release(v63);
      }
      else
      {

        swift_release(v63);
      }
      ((void (*)(char *, uint64_t))v139)(v80, v26);
      return;
    }
    v69 = v134;
    v70 = (void *)v144;
    sub_10015E3E4((void *)v144);
    v71 = type metadata accessor for TaskPriority(0);
    v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56);
    v73 = (uint64_t)v136;
    v72(v136, 1, 1, v71);
    v74 = (_QWORD *)swift_allocObject(&unk_10023A1E8, 48, 7);
    v74[2] = 0;
    v74[3] = 0;
    v74[4] = v70;
    v74[5] = v63;
    v75 = v70;
    swift_retain(v63);
    v76 = sub_10018A990(v73, (uint64_t)&unk_10026CF20, (uint64_t)v74);
    swift_release(v76);
    if (v69 == 2)
    {
      type metadata accessor for DockCoreManager(0, v77, v78, v79);
      if ((static DockCoreManager.ignoreStartupValidation.getter() & 1) != 0)
        goto LABEL_31;
    }
    else if ((v69 & 1) == 0)
    {
LABEL_31:
      *(_BYTE *)(v63 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 1;
      v98 = *(void **)(v63 + 16);
      if (v98)
      {
        v99 = (id)objc_opt_self(CBUUID, v77);
        v100 = (char *)sub_10009061C((uint64_t *)&unk_10026E5E0);
        v101 = swift_allocObject(v100, 72, 7);
        v144 = xmmword_1001DE690;
        *(_OWORD *)(v101 + 16) = xmmword_1001DE690;
        *(_QWORD *)(v101 + 56) = &type metadata for UInt32;
        *(_QWORD *)(v101 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v101 + 32) = 512;
        v102 = v98;
        String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v101);
        v104 = v103;
        v105 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v104);
        v106 = objc_msgSend(v99, "UUIDWithString:", v105);

        v107 = *(void **)&v102[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (!v107 || (v108 = objc_msgSend(v107, "services")) == 0)
        {

          swift_release(v63);
          return;
        }
        v109 = v108;
        v143 = v68;
        v110 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
        v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v109, v110);

        v112 = v106;
        v113 = 0;
        v114 = (uint64_t)sub_1000F78A8(v111, (uint64_t)v112);
        swift_bridgeObjectRelease(v111);

        if ((unint64_t)v114 >> 62)
        {
          if (v114 < 0)
            v129 = v114;
          else
            v129 = v114 & 0xFFFFFFFFFFFFFF8;
          if (_CocoaArrayWrapper.endIndex.getter(v129))
          {
LABEL_36:
            if ((v114 & 0xC000000000000001) != 0)
            {
              v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v114);
            }
            else
            {
              if (!*(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_65;
              }
              v115 = *(id *)(v114 + 32);
            }
            v109 = v115;

            swift_bridgeObjectRelease(v114);
            v116 = *(void **)(v63 + 16);
            if (!v116)
            {

              swift_release(v63);
              return;
            }
            v117 = swift_allocObject(v100, 72, 7);
            *(_OWORD *)(v117 + 16) = v144;
            *(_QWORD *)(v117 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v117 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v117 + 32) = 260;
            v100 = v116;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v117);
            v119 = v118;
            v120 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v119);
            v121 = objc_msgSend(v99, "UUIDWithString:", v120);

            if (!*(_QWORD *)&v100[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]
              || (v122 = objc_msgSend(v109, "characteristics")) == 0)
            {
              swift_release(v63);

              return;
            }
            v123 = v122;
            v124 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
            v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v123, v124);

            v99 = v121;
            v113 = (uint64_t)sub_1000F78A8(v125, (uint64_t)v99);
            swift_bridgeObjectRelease(v125);

            if (!((unint64_t)v113 >> 62))
            {
              v126 = v143;
              if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_44:
                if ((v113 & 0xC000000000000001) != 0)
                {
                  v127 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v113);
                  goto LABEL_47;
                }
                if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v127 = *(id *)(v113 + 32);
LABEL_47:
                  v128 = v127;

                  swift_bridgeObjectRelease(v113);
                  sub_1001783A4((uint64_t)&off_1002382F8, (uint64_t)&off_100238328, 256, (uint64_t)v128);

                  swift_release(v63);
                  return;
                }
                __break(1u);
                return;
              }
LABEL_69:
              swift_release(v63);

              swift_bridgeObjectRelease(v113);
              return;
            }
LABEL_65:
            if (v113 < 0)
              v130 = v113;
            else
              v130 = v113 & 0xFFFFFFFFFFFFFF8;
            v131 = _CocoaArrayWrapper.endIndex.getter(v130);
            v126 = v143;
            if (v131)
              goto LABEL_44;
            goto LABEL_69;
          }
        }
        else if (*(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_36;
        }

        swift_release(v63);
        swift_bridgeObjectRelease(v114);
        return;
      }

LABEL_52:
      swift_release(v63);
      return;
    }
    *(_BYTE *)(v63 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = 1;
    sub_10017AD84(0.0);
    v85 = (uint64_t)v136;
    v72(v136, 1, 1, v71);
    v86 = (_QWORD *)swift_allocObject(&unk_10023A210, 40, 7);
    v86[2] = 0;
    v86[3] = 0;
    v86[4] = v63;
    swift_retain(v63);
    v87 = sub_10018A990(v85, (uint64_t)&unk_10026CF48, (uint64_t)v86);
    swift_release(v87);
    v88 = (void **)(v133 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
    swift_beginAccess(v133 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator, &v147, 0, 0);
    v89 = *v88;
    v90 = swift_allocObject(&unk_10023A238, 32, 7);
    v91 = v141;
    *(_QWORD *)(v90 + 16) = v141;
    *(_QWORD *)(v90 + 24) = v75;
    v92 = v75;
    v93 = v89;
    v94 = v91;
    MotionValidator.start(timedOutCallback:)((uint64_t)sub_1000D4C18, v90);

    swift_release(v90);
    v72((char *)v85, 1, 1, v71);
    v95 = (_QWORD *)swift_allocObject(&unk_10023A260, 48, 7);
    v95[2] = 0;
    v95[3] = 0;
    v95[4] = v94;
    v95[5] = v63;
    swift_retain(v63);
    v96 = v94;
    v97 = sub_10018A990(v85, (uint64_t)&unk_10026CF58, (uint64_t)v95);
    swift_release(v97);
    goto LABEL_31;
  }
}

uint64_t sub_1000CF1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1000CF1D4, 0, 0);
}

uint64_t sub_1000CF1D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char v3;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(*(void **)(v0 + 16));
  if (v1)
  {
    v2 = v1;
    v3 = dispatch thunk of DockCoreAccessory.needsMigration.getter();

  }
  else
  {
    v3 = 0;
  }
  sub_10017B930(v3 & 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF268()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10027022C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  return sub_100179958();
}

uint64_t sub_1000CF2B0(char a1, char *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = __chkstk_darwin(v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v15 = *(void **)&a2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    v16 = swift_allocObject(&unk_10023A288, 32, 7);
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = a3;
    aBlock[4] = sub_1000D4CD0;
    v27 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10012357C;
    aBlock[3] = &unk_10023A2A0;
    v17 = _Block_copy(aBlock);
    v24 = v7;
    v18 = v17;
    v19 = v15;
    v20 = a2;
    static DispatchQoS.unspecified.getter(a3);
    v25 = _swiftEmptyArrayStorage;
    v21 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v23 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v22, v23, v6, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return swift_release(v27);
  }
  return result;
}

void sub_1000CF4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Startup validation timed out, disconnecting", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000CF780(a2, 0);
}

uint64_t sub_1000CF5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for Logger(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CF638, 0, 0);
}

uint64_t sub_1000CF638()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v0[5] + 16))(v0[6], v0[2] + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v0[4]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Startup validation started. Starting motion feedback.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = v0[5];
  v5 = v0[6];
  v7 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10027021C);
  v0[7] = v8;
  *v8 = v0;
  v8[1] = sub_1000CF730;
  return sub_100179108();
}

uint64_t sub_1000CF730()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1000CF780(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint8_t *v43;
  void *v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _QWORD *v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  id *v73;
  id v74;
  uint8_t *v75;
  _QWORD *v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[24];
  char v91[24];
  _QWORD v92[6];
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v78 = a2;
  v88 = a1;
  v3 = type metadata accessor for DockStatus(0);
  v85 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v84 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v75 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint8_t **)((char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = v2;
  v16 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    if (qword_10026BC00 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_3:
  v19 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v20 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v21 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v22 = v19;
  v23 = v21;
  OS_dispatch_semaphore.wait()();

  v83 = v22;
  v24 = &v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v91, 0, 0);
  v25 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(*(_QWORD *)v24 + 16);
  if (v26)
  {
    v82 = v3;
    v27 = v25 + 32;
    swift_bridgeObjectRetain(v25);
    while (1)
    {
      sub_10009AFF4(v27, (uint64_t)v92);
      v28 = *(id *)(*sub_10009B038(v92, v92[3]) + 24);
      DockCoreInfo.identifier.getter(v28);

      DockCoreInfo.identifier.getter(v29);
      LOBYTE(v28) = static UUID.== infix(_:_:)(v11, v9);
      v30 = *(void (**)(char *, uint64_t))(v87 + 8);
      v30(v9, v6);
      v30(v11, v6);
      if ((v28 & 1) != 0)
        break;
      sub_100090E88(v92);
      v27 += 40;
      if (!--v26)
      {
        swift_bridgeObjectRelease(v25);
        v3 = v82;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease(v25);
    v48 = *(id *)&v19[v20];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v92, (uint64_t)&v93);
    sub_100090E88(v92);

    v3 = v82;
    if (!*((_QWORD *)&v94 + 1))
      goto LABEL_16;
  }
  else
  {
LABEL_8:
    v31 = *(id *)&v19[v20];
    OS_dispatch_semaphore.signal()();

    v95 = 0;
    v93 = 0u;
    v94 = 0u;

    if (!*((_QWORD *)&v94 + 1))
    {
LABEL_16:
      sub_10009B2C0((uint64_t)&v93, (uint64_t *)&unk_10026DF40);
      goto LABEL_30;
    }
  }
  v32 = sub_10009061C(&qword_10026C2E0);
  v33 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v92, &v93, v32, v33, 6) & 1) != 0)
  {
    v34 = v92[0];
    v35 = *(char **)(v92[0] + 16);
    if (!v35)
      goto LABEL_29;
    v36 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
    v37 = *(void **)&v35[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (!v37)
      goto LABEL_29;
    v83 = v35;
    if (objc_msgSend(v37, "state") == (id)2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v81);
      v38 = swift_retain_n(v34, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.info.getter();
      v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        v82 = v3;
        v42 = swift_slowAlloc(12, -1);
        v77 = v41;
        v43 = (uint8_t *)v42;
        v76 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v43 = 138412290;
        v75 = v43 + 4;
        v44 = *(void **)(v34 + 24);
        *(_QWORD *)&v93 = v44;
        v45 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v75, v43 + 12);
        v46 = v76;
        *v76 = v44;
        v3 = v82;
        swift_release_n(v34, 2);
        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v77, "Disconnecting %@", v43, 0xCu);
        v47 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v46, 1, v47);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_release_n(v34, 2);
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
      if (*(_QWORD *)&v35[v36])
      {
        v49 = v3;
        if (qword_10026BC20 != -1)
          swift_once(&qword_10026BC20, sub_1001A3078);
        v50 = (void *)qword_1002757B0;
        v51 = swift_allocObject(&unk_10023A1C0, 32, 7);
        *(_QWORD *)(v51 + 16) = v50;
        *(_QWORD *)(v51 + 24) = v35;
        v52 = v83;
        v53 = v50;
        sub_1001A3584((uint64_t)sub_1000D5C54, v51);
        swift_release(v51);
        v3 = v49;
      }
      if ((v78 & 1) == 0)
      {
        v54 = sub_10011B7AC();
        if (v55 >> 60 != 15)
        {
          v56 = v54;
          v57 = v55;
          sub_10009B27C(v54, v55);
          sub_100186EF0(v56, v57);
          sub_1000D55A0((uint64_t)v92, (uint64_t)&v93, (uint64_t *)&unk_10026CF08);
          v58 = *((_QWORD *)&v93 + 1);
          if (*((_QWORD *)&v93 + 1))
          {
            v59 = v93;
            v60 = *(id *)(v34 + 24);
            DockCoreInfo.identifier.getter(v60);

            v61 = (_QWORD *)(v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap);
            swift_beginAccess(v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap, v90, 33, 0);
            swift_bridgeObjectRetain(v58);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v61);
            v89 = *v61;
            *v61 = 0x8000000000000000;
            sub_1001BB20C(v59, v58, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
            v63 = *v61;
            *v61 = v89;
            swift_bridgeObjectRelease(v63);
            (*(void (**)(char *, uint64_t))(v87 + 8))(v11, v6);
            swift_endAccess(v90);
            sub_10009E3A0(v56, v57);
            sub_1000D4AB4((uint64_t)v92);

            goto LABEL_29;
          }
          sub_10009E3A0(v56, v57);
        }
      }
      v64 = *(id *)(v34 + 24);
      DockCoreInfo.identifier.getter(v64);

      swift_beginAccess(v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap, v90, 33, 0);
      sub_1001B412C((uint64_t)v11);
      v66 = v65;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v11, v6);
      swift_endAccess(v90);

      swift_bridgeObjectRelease(v66);
      goto LABEL_29;
    }

LABEL_29:
    *(_BYTE *)(v34 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 0;
    sub_1000F7A3C(v88);
    swift_release(v34);
  }
LABEL_30:
  sub_10015EB50(0);
  sub_10015E3E4(0);
  v67 = v85;
  v68 = (uint64_t)v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, enum case for DockStatus.Undocked(_:), v3);
  v69 = v86;
  v70 = v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
  v71 = swift_beginAccess(v86 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus, v90, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v67 + 40))(v70, v68, v3, v71);
  swift_endAccess(v90);
  v72 = *(_QWORD *)(v69 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v68, v70, v3);
  DockDetector.newStatus(_:monitorJarvisCallback:)(v68, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v3);
  v73 = (id *)(v72 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess(v72 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator, v90, 0, 0);
  v74 = *v73;
  MotionValidator.stop()();

}

void sub_1000D00D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  id *v22;
  id v23;
  _QWORD v24[2];
  uint64_t v25;
  _BYTE v26[24];

  v2 = v1;
  v24[1] = a1;
  v3 = type metadata accessor for DockStatus(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  DockCoreInfo.identifier.getter(v16);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap, v26, 33, 0);
  sub_1001B412C((uint64_t)v9);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  swift_endAccess(v26);
  swift_bridgeObjectRelease(v18);
  v7 = v2;
  if (qword_10026BC00 != -1)
LABEL_5:
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015EB50(0);
  sub_10015E3E4(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DockStatus.Undocked(_:), v3);
  v19 = v7 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
  v20 = swift_beginAccess(v7 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus, v26, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v4 + 40))(v19, v6, v3, v20);
  swift_endAccess(v26);
  v21 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v19, v3);
  DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v6, 0, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v22 = (id *)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator, v26, 0, 0);
  v23 = *v22;
  MotionValidator.stop()();

}

id sub_1000D0380()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000D0534()
{
  return type metadata accessor for AccessoryManager(0);
}

uint64_t type metadata accessor for AccessoryManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10026CEE8;
  if (!qword_10026CEE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryManager);
  return result;
}

void sub_1000D0578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[27];

  v8[0] = "\b";
  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1001DEF10;
    sub_1000D06A0(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[9] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[12] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[13] = "\b";
      v8[14] = "\b";
      v8[15] = (char *)&value witness table for Builtin.NativeObject + 64;
      v8[16] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[17] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[18] = &unk_1001DEF28;
      v8[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6 = type metadata accessor for DockStatus(319);
      if (v7 <= 0x3F)
      {
        v8[20] = *(_QWORD *)(v6 - 8) + 64;
        v8[21] = "\b";
        v8[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[23] = (char *)&value witness table for Builtin.NativeObject + 64;
        v8[24] = "\b";
        v8[25] = "\b";
        v8[26] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_updateClassMetadata2(a1, 256, 27, v8, a1 + 80);
      }
    }
  }
}

void sub_1000D06A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10026CEF8)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, &qword_10026CEF8);
  }
}

uint64_t sub_1000D06F8(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t result;
  uint64_t v23;
  double v24;
  __n128 v25;
  BOOL v26;
  __n128 v27;
  BOOL v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD aBlock[5];
  uint64_t v78;
  char v79[32];

  v75 = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  i = type metadata accessor for Logger(0);
  v9 = *(uint64_t **)(i - 8);
  v10 = __chkstk_darwin(i);
  v67 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v70 = (char *)&v60 - v12;
  v13 = type metadata accessor for Date(0);
  v72 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v1;
  v16 = (uint64_t *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess(v16, v79, 0, 0);
  v71 = v16;
  v17 = *v16;
  if ((unint64_t)*v16 >> 62)
  {
LABEL_35:
    v56 = v6;
    if (v17 < 0)
      v57 = v17;
    else
      v57 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v58 = v57;
    v6 = v56;
    v18 = _CocoaArrayWrapper.endIndex.getter(v58);
    v19 = v75;
    if (v18)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v17);
  }
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v16);
  v19 = v75;
  if (!v18)
    return swift_bridgeObjectRelease(v17);
LABEL_3:
  v65 = v5;
  v5 = (char *)(v17 & 0xC000000000000001);
  v66 = v9;
  v64 = v6;
  if ((v17 & 0xC000000000000001) != 0)
    goto LABEL_41;
  if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  v6 = *(_QWORD *)(v17 + 32);
  swift_retain(v6);
LABEL_6:
  v9 = &OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  v20 = static UUID.== infix(_:_:)(v6 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v19);
  if ((v20 & 1) == 0)
  {
    v61 = v3;
    v62 = i;
    v63 = v2;
    swift_release(v6);
    if (v18 == 1)
      return swift_bridgeObjectRelease(v17);
    v2 = v17 & 0xFFFFFFFFFFFFFF8;
    for (i = 5; ; ++i)
    {
      v3 = i - 4;
      if (v5)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v17);
        v21 = __OFADD__(v3, 1);
        v3 = i - 3;
        if (v21)
          goto LABEL_34;
      }
      else
      {
        if ((unint64_t)v3 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_41:
          v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
          goto LABEL_6;
        }
        v6 = *(_QWORD *)(v17 + 8 * i);
        swift_retain(v6);
        v21 = __OFADD__(v3, 1);
        v3 = i - 3;
        if (v21)
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
      v20 = static UUID.== infix(_:_:)(v6 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v19);
      if ((v20 & 1) != 0)
      {
        v2 = v63;
        i = v62;
        v3 = v61;
        break;
      }
      swift_release(v6);
      if (v3 == v18)
        return swift_bridgeObjectRelease(v17);
    }
  }
  v23 = static Date.now.getter(v20);
  v24 = Date.timeIntervalSince1970.getter(v23);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v15, v73);
  v27.n128_u64[0] = *(_QWORD *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_timestamp);
  v25.n128_f64[0] = v24 - v27.n128_f64[0];
  v26 = v24 < v27.n128_f64[0];
  v27.n128_u64[0] = 0x4072C00000000000;
  v28 = !v26 && v25.n128_f64[0] <= 300.0;
  v29 = v66;
  if (v28)
  {
    swift_bridgeObjectRelease(v17);
    if (*(_BYTE *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) == 1)
    {
      v38 = v74;
      v39 = *(void **)&v74[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      v40 = swift_allocObject(&unk_10023A120, 32, 7);
      *(_QWORD *)(v40 + 16) = v38;
      *(_QWORD *)(v40 + 24) = v6;
      aBlock[4] = sub_1000D407C;
      v78 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10012357C;
      aBlock[3] = &unk_10023A138;
      v41 = _Block_copy(aBlock);
      v42 = v3;
      v43 = v39;
      v44 = v38;
      v45 = swift_retain(v6);
      v46 = v68;
      static DispatchQoS.unspecified.getter(v45);
      v76 = _swiftEmptyArrayStorage;
      v47 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v48 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v49 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
      v50 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v48, v49, v2, v47);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v41);
      _Block_release(v41);
      swift_release(v6);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v50, v2);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v64);
      return swift_release(v78);
    }
    else
    {
      v51 = v67;
      v52 = ((uint64_t (*)(char *, char *, uint64_t))v29[2])(v67, &v74[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], i);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Waiting for user to authorize pair-setup.", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
        swift_release(v6);

      }
      else
      {

        swift_release(v6);
      }
      return ((uint64_t (*)(char *, uint64_t))v29[1])(v51, i);
    }
  }
  v30 = v70;
  v31 = ((uint64_t (*)(char *, char *, uint64_t, __n128, __n128))v66[2])(v70, &v74[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], i, v27, v25);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing stale pairing token, pairing not accepted within allowed timeout.", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = ((uint64_t (*)(char *, uint64_t))v29[1])(v30, i);
  __chkstk_darwin(v35);
  *(&v60 - 2) = v75;
  v36 = v71;
  swift_beginAccess(v71, aBlock, 33, 0);
  result = sub_1000D2D9C(sub_1000D4084, (uint64_t)(&v60 - 4));
  v9 = (uint64_t *)result;
  v3 = *v36;
  if (!((unint64_t)*v36 >> 62))
  {
    v37 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v37 >= result)
      goto LABEL_27;
LABEL_47:
    __break(1u);
    return result;
  }
LABEL_43:
  if (v3 < 0)
    v59 = v3;
  else
    v59 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v37 = _CocoaArrayWrapper.endIndex.getter(v59);
  result = swift_bridgeObjectRelease(v3);
  if (v37 < (uint64_t)v9)
    goto LABEL_47;
LABEL_27:
  sub_100172588((uint64_t)v9, v37);
  swift_bridgeObjectRelease(v17);
  swift_endAccess(aBlock);
  return swift_release(v6);
}

id sub_1000D0E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, id);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  unint64_t v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[5];
  char v66[24];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[6];

  v4 = type metadata accessor for Logger(0);
  v5 = __chkstk_darwin(v4);
  result = (id)__chkstk_darwin(v5);
  v10 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard))
    return result;
  v58 = (char *)&v57 - v7;
  v59 = v9;
  v63 = v8;
  v62 = result;
  v11 = a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  v13 = *(_QWORD *)(v11 + 40);
  sub_10009B27C(v12, v13);
  sub_10011CAC4(v12, v13);
  v15 = v14;
  v17 = v16;
  sub_10009B2FC(v12, v13);
  v64 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v18 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v19 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v66, 0, 0);
  v20 = *v19;
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_15:
    v32 = *(id *)(a1 + v64);
    OS_dispatch_semaphore.signal()();

    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    swift_bridgeObjectRelease(v17);
    if (!*((_QWORD *)&v68 + 1))
      return (id)sub_10009B2C0((uint64_t)&v67, (uint64_t *)&unk_10026DF40);
    goto LABEL_16;
  }
  v60 = v10;
  v61 = a1;
  v22 = v20 + 32;
  swift_bridgeObjectRetain(v20);
  while (1)
  {
    sub_10009AFF4(v22, (uint64_t)v65);
    v23 = *(void **)(*sub_10009B038(v65, v65[3]) + 32);
    if (!v23)
      goto LABEL_5;
    v24 = v23;
    v25 = objc_msgSend(v24, "identifier");
    if (v25)
      break;
LABEL_4:

LABEL_5:
    sub_100090E88(v65);
    v22 += 40;
    if (!--v21)
    {
      swift_bridgeObjectRelease(v20);
      a1 = v61;
      v10 = v60;
      goto LABEL_15;
    }
  }
  v26 = v25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v29 = v28;

  if (v27 != v15 || v29 != v17)
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v15, v17, 0);
    swift_bridgeObjectRelease(v29);
    if ((v31 & 1) != 0)
      goto LABEL_27;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(v20);
  v20 = v17;
LABEL_27:
  swift_bridgeObjectRelease(v20);
  a1 = v61;
  v46 = *(id *)(v61 + v64);
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v65, (uint64_t)&v67);
  sub_100090E88(v65);
  swift_bridgeObjectRelease(v17);
  v10 = v60;
  if (!*((_QWORD *)&v68 + 1))
    return (id)sub_10009B2C0((uint64_t)&v67, (uint64_t *)&unk_10026DF40);
LABEL_16:
  sub_10009B340(&v67, (uint64_t)v70);
  v34 = *(void **)(*sub_10009B038(v70, v70[3]) + 32);
  if (!v34)
    return (id)sub_100090E88(v70);
  v35 = objc_opt_self(_HAPAccessoryServerBTLE200, v33);
  result = (id)swift_dynamicCastObjCClass(v34, v35);
  if (!result)
    return (id)sub_100090E88(v70);
  v36 = *(_QWORD *)(a1 + v10);
  if (!v36)
  {
    __break(1u);
    goto LABEL_40;
  }
  v37 = result;
  v38 = *(_BYTE *)(v36 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth);
  v39 = a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  v40 = *(void (**)(char *, uint64_t, id))(v63 + 16);
  if ((v38 & 1) == 0)
  {
    v47 = v62;
    v40(v58, v39, v62);
    v48 = Logger.logObject.getter(v34);
    v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "User authorized uncertified accessory", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    (*(void (**)(char *, id))(v63 + 8))(v58, v47);
    result = objc_msgSend(v37, "identifier");
    if (!result)
      goto LABEL_41;
    v51 = result;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v54 = v53;

    v55 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    if (*(_QWORD *)(a1 + v10))
    {
      *(_BYTE *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 5;
      v56 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      sub_1001319A0(v52, v54, 2, v55, 0);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v55);

    }
    else
    {
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v55);
    }
    objc_msgSend(v37, "continuePairingAfterAuthPrompt");
LABEL_36:

    return (id)sub_100090E88(v70);
  }
  v41 = v10;
  v40(v59, v39, v62);
  v42 = Logger.logObject.getter(v34);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Continuing with SW auth", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  (*(void (**)(char *, id))(v63 + 8))(v59, v62);
  result = objc_msgSend(v37, "identifier");
  if (result)
  {

    v45 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    if (*(_QWORD *)(a1 + v41))
      *(_BYTE *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 4;
    swift_bridgeObjectRelease(v45);
    objc_msgSend(v37, "continueAuthAfterValidation:", 1);
    goto LABEL_36;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1000D13FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  unint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42[24];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v35 - v8);
  v10 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens, v42, 0, 0);
  v11 = *v10;
  if ((unint64_t)*v10 >> 62)
  {
LABEL_29:
    if (v11 < 0)
      v34 = v11;
    else
      v34 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v12)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v11);
LABEL_27:
    sub_1000D06F8(a1);
    return;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v10);
  if (!v12)
    goto LABEL_17;
LABEL_3:
  v39 = v9;
  if ((v11 & 0xC000000000000001) != 0)
    goto LABEL_35;
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  v13 = *(_QWORD *)(v11 + 32);
  swift_retain(v13);
LABEL_6:
  v9 = &OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  if ((static UUID.== infix(_:_:)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, a1) & 1) == 0)
  {
    v37 = v7;
    v38 = v4;
    v36 = (uint8_t *)v3;
    swift_release(v13);
    if (v12 == 1)
      goto LABEL_17;
    v3 = v11 & 0xFFFFFFFFFFFFFF8;
    v7 = 5;
    while (1)
    {
      v4 = v7 - 4;
      if ((v11 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v11);
        v14 = __OFADD__(v4, 1);
        v4 = v7 - 3;
        if (v14)
          goto LABEL_28;
      }
      else
      {
        if (v4 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_35:
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
          goto LABEL_6;
        }
        v13 = *(_QWORD *)(v11 + 8 * v7);
        swift_retain(v13);
        v14 = __OFADD__(v4, 1);
        v4 = v7 - 3;
        if (v14)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
      if ((static UUID.== infix(_:_:)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, a1) & 1) != 0)
      {
        v3 = (uint64_t)v36;
        v7 = v37;
        v4 = v38;
        break;
      }
      swift_release(v13);
      ++v7;
      if (v4 == v12)
        goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease(v11);
  if (*(_BYTE *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) != 1)
  {
    *(_BYTE *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) = 1;
    v39 = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
    v23 = swift_retain_n(v13, 2);
    v24 = v7;
    v25 = Logger.logObject.getter(v23);
    v26 = v4;
    v27 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v27))
    {
      v37 = v24;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v41 = v29;
      v38 = v26;
      v30 = v29;
      *(_DWORD *)v28 = 136315138;
      v36 = v28 + 4;
      v31 = UUID.uuidString.getter(v29);
      v33 = v32;
      v40 = sub_1000906BC(v31, v32, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v36, v28 + 12);
      swift_release_n(v13, 2);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "User authorized pair setup for accessory token: %s.", v28, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v28, -1, -1);
      swift_release(v13);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v3);
    }
    else
    {

      swift_release_n(v13, 3);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v3);
    }
    goto LABEL_27;
  }
  v15 = (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  v16 = v39;
  v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v39, v15, v3);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = v3;
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ignoring duplicate user authorization request", v21, 2u);
    v22 = v21;
    v3 = v20;
    swift_slowDealloc(v22, -1, -1);
    swift_release(v13);

  }
  else
  {

    swift_release(v13);
  }
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v16, v3);
}

void sub_1000D1868(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t aBlock[5];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v4 - 8);
  v69 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v67 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v66 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v64 = v12;
  v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v59 - v13;
  v15 = type metadata accessor for Logger(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v19;
  v72 = v18;
  (*(void (**)(char *, char *))(v19 + 16))(v17, &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger]);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v73 = a1;
  v63 = v20;
  v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v14, a1, v9);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v70 = v6;
  if (v24)
  {
    v25 = swift_slowAlloc(12, -1);
    v62 = v7;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v61 = v2;
    v28 = v27;
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136315138;
    v60 = v26 + 4;
    v29 = UUID.uuidString.getter(v27);
    v31 = v30;
    v77 = sub_1000906BC(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v60, v26 + 12);
    swift_bridgeObjectRelease(v31);
    v32 = v10;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Request to cancel pairing for token %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v33 = v28;
    v2 = v61;
    swift_slowDealloc(v33, -1, -1);
    v34 = v26;
    v7 = v62;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    v32 = v10;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  }

  (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v72);
  v35 = (uint64_t *)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess(&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens], &v77, 0, 0);
  v36 = *v35;
  if (!((unint64_t)*v35 >> 62))
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v36);
    if (v37)
      goto LABEL_6;
LABEL_20:
    swift_bridgeObjectRelease(v36);
    return;
  }
LABEL_24:
  if (v36 < 0)
    v58 = v36;
  else
    v58 = v36 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v36);
  v37 = _CocoaArrayWrapper.endIndex.getter(v58);
  if (!v37)
    goto LABEL_20;
LABEL_6:
  v72 = v9;
  if ((v36 & 0xC000000000000001) != 0)
    goto LABEL_30;
  v38 = v70;
  if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v39 = *(_QWORD *)(v36 + 32);
    swift_retain(v39);
    while (1)
    {
      if ((static UUID.== infix(_:_:)(v39 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v73) & 1) != 0)
      {
LABEL_22:
        swift_bridgeObjectRelease(v36);
        v43 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        v44 = v65;
        v45 = v72;
        v63(v65, v73, v72);
        v46 = *(unsigned __int8 *)(v32 + 80);
        v47 = (v46 + 32) & ~v46;
        v48 = swift_allocObject(&unk_10023A080, v47 + v64, v46 | 7);
        *(_QWORD *)(v48 + 16) = v39;
        *(_QWORD *)(v48 + 24) = v2;
        (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v48 + v47, v44, v45);
        aBlock[4] = (uint64_t)sub_1000D2664;
        v76 = v48;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10012357C;
        aBlock[3] = (uint64_t)&unk_10023A098;
        v49 = _Block_copy(aBlock);
        v50 = v43;
        swift_retain(v39);
        v51 = v2;
        v52 = v66;
        static DispatchQoS.unspecified.getter(v51);
        v74 = _swiftEmptyArrayStorage;
        v53 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v54 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v55 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
        v56 = v54;
        v57 = v69;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v56, v55, v69, v53);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v38, v49);
        _Block_release(v49);
        swift_release(v39);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v38, v57);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v7);
        swift_release(v76);
        return;
      }
      v62 = v7;
      swift_release(v39);
      if (v37 == 1)
        goto LABEL_20;
      v9 = v36 & 0xFFFFFFFFFFFFFF8;
      v7 = 5;
      while (1)
      {
        v40 = v7 - 4;
        if ((v36 & 0xC000000000000001) != 0)
        {
          v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v36);
          v41 = __OFADD__(v40, 1);
          v42 = v7 - 3;
          if (v41)
            goto LABEL_23;
          goto LABEL_18;
        }
        if (v40 >= *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        v39 = *(_QWORD *)(v36 + 8 * v7);
        swift_retain(v39);
        v41 = __OFADD__(v40, 1);
        v42 = v7 - 3;
        if (v41)
        {
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_18:
        if ((static UUID.== infix(_:_:)(v39 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v73) & 1) != 0)
        {
          v38 = v70;
          v7 = v62;
          goto LABEL_22;
        }
        swift_release(v39);
        ++v7;
        if (v42 == v37)
          goto LABEL_20;
      }
      __break(1u);
LABEL_30:
      v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
      v38 = v70;
    }
  }
  __break(1u);
}

void sub_1000D1E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  unsigned int v52;
  uint64_t v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[5];
  _BYTE v81[24];
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v6 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  __chkstk_darwin(v6);
  v74 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  v10 = *(_QWORD *)(v8 + 40);
  sub_10009B27C(v9, v10);
  sub_10011CAC4(v9, v10);
  v12 = v11;
  v14 = v13;
  sub_10009B2FC(v9, v10);
  v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v16 = *(id *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  v17 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, v81, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
LABEL_14:
    v30 = *(id *)(a2 + v15);
    OS_dispatch_semaphore.signal()();

    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    swift_bridgeObjectRelease(v14);
    if (!*((_QWORD *)&v83 + 1))
      goto LABEL_30;
    goto LABEL_15;
  }
  v77 = v15;
  v78 = a3;
  v79 = a2;
  v20 = v18 + 32;
  swift_bridgeObjectRetain(v18);
  while (1)
  {
    sub_10009AFF4(v20, (uint64_t)v80);
    v21 = *(void **)(*sub_10009B038(v80, v80[3]) + 32);
    if (!v21)
      goto LABEL_4;
    v22 = v21;
    v23 = objc_msgSend(v22, "identifier");
    if (v23)
      break;
LABEL_3:

LABEL_4:
    sub_100090E88(v80);
    v20 += 40;
    if (!--v19)
    {
      swift_bridgeObjectRelease(v18);
      a3 = v78;
      a2 = v79;
      v15 = v77;
      goto LABEL_14;
    }
  }
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v27 = v26;

  if ((id)v25 != v12 || v27 != v14)
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v12, v14, 0);
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) != 0)
      goto LABEL_29;
    goto LABEL_3;
  }
  swift_bridgeObjectRelease(v18);
  v18 = v14;
LABEL_29:
  swift_bridgeObjectRelease(v18);
  a2 = v79;
  v55 = *(id *)(v79 + v77);
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v80, (uint64_t)&v82);
  sub_100090E88(v80);
  swift_bridgeObjectRelease(v14);
  a3 = v78;
  if (!*((_QWORD *)&v83 + 1))
  {
LABEL_30:
    sub_10009B2C0((uint64_t)&v82, (uint64_t *)&unk_10026DF40);
LABEL_31:
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v56 = (void *)qword_1002757B0;
    v57 = swift_allocObject(&unk_10023A0D0, 32, 7);
    *(_QWORD *)(v57 + 16) = v56;
    *(_QWORD *)(v57 + 24) = 0;
    v58 = v56;
    sub_1001A3584((uint64_t)sub_1000D2D94, v57);
    v59 = swift_release(v57);
    __chkstk_darwin(v59);
    *(&v73 - 2) = a3;
    v60 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens, &v82, 33, 0);
    v61 = sub_1000D2D9C(sub_1000D5C5C, (uint64_t)(&v73 - 4));
    v62 = v61;
    a2 = *v60;
    if ((unint64_t)*v60 >> 62)
    {
      if (a2 < 0)
        v70 = *v60;
      else
        v70 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v60);
      v63 = _CocoaArrayWrapper.endIndex.getter(v70);
      swift_bridgeObjectRelease(a2);
      if (v63 < v62)
        goto LABEL_43;
LABEL_35:
      sub_100172588(v62, v63);
      swift_endAccess(&v82);
      return;
    }
    v63 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v63 >= v61)
      goto LABEL_35;
LABEL_43:
    __break(1u);
LABEL_44:
    swift_once(&qword_10026BC20, sub_1001A3078);
LABEL_18:
    v34 = (void *)qword_1002757B0;
    v35 = swift_allocObject(&unk_10023A0F8, 32, 7);
    *(_QWORD *)(v35 + 16) = v34;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v34;
    sub_1001A3584((uint64_t)sub_1000D5C54, v35);
    v37 = swift_release(v35);
    v38 = &v73;
    __chkstk_darwin(v37);
    *(&v73 - 2) = a3;
    v39 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens, &v82, 33, 0);
    v40 = sub_1000D2D9C(sub_1000D5C5C, (uint64_t)(&v73 - 4));
    v41 = v40;
    v42 = *v39;
    if (!((unint64_t)*v39 >> 62))
    {
      v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v43 >= v40)
        goto LABEL_20;
LABEL_49:
      __break(1u);
LABEL_50:
      if (v42 < 0)
        v72 = v42;
      else
        v72 = v42 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v42);
      v69 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v42);
      if (v69 < v41)
LABEL_54:
        __break(1u);
LABEL_38:
      sub_100172588(v41, v69);
      swift_endAccess(&v82);
      swift_release(v14);

      swift_errorRelease(v38);
      return;
    }
    if (v42 < 0)
      v71 = *v39;
    else
      v71 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v39);
    v43 = _CocoaArrayWrapper.endIndex.getter(v71);
    swift_bridgeObjectRelease(v42);
    if (v43 < v41)
      goto LABEL_49;
LABEL_20:
    sub_100172588(v41, v43);
    swift_endAccess(&v82);
LABEL_27:
    swift_release(v14);
    return;
  }
LABEL_15:
  v31 = sub_10009061C(&qword_10026C2E0);
  v32 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v80, &v82, v31, v32, 6) & 1) == 0)
    goto LABEL_31;
  v14 = v80[0];
  if (*(_BYTE *)(v80[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
  {
    if (qword_10026BC20 != -1)
      goto LABEL_44;
    goto LABEL_18;
  }
  v44 = *(void **)(v80[0] + 32);
  if (!v44)
    goto LABEL_27;
  v45 = a3;
  v46 = objc_opt_self(_HAPAccessoryServerBTLE200, v33);
  v47 = swift_dynamicCastObjCClass(v44, v46);
  if (!v47)
    goto LABEL_27;
  v48 = (void *)v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v76);
  v12 = v44;
  v49 = Logger.logObject.getter(v12);
  v50 = static os_log_type_t.default.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "User canceled in-progress pairing.", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
  *(_QWORD *)&v82 = 0;
  v52 = objc_msgSend(v48, "stopPairingWithError:", &v82);
  v53 = v82;
  if (!v52)
  {
    v64 = (id)v82;
    v38 = (uint64_t *)_convertNSErrorToError(_:)(v53);

    v66 = swift_willThrow(v65);
    __chkstk_darwin(v66);
    *(&v73 - 2) = v45;
    v67 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens, &v82, 33, 0);
    v68 = sub_1000D2D9C(sub_1000D5C5C, (uint64_t)(&v73 - 4));
    v41 = v68;
    v42 = *v67;
    if ((unint64_t)*v67 >> 62)
      goto LABEL_50;
    v69 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v69 < v68)
      goto LABEL_54;
    goto LABEL_38;
  }
  v54 = (id)v82;
  swift_release(v14);

}

uint64_t sub_1000D25E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000D2664()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1000D1E70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1000D2694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D26A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000D26AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  void *v14;
  os_unfair_lock_s *v15;
  id v16;
  char *v17;
  void **v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  char v22;
  id v23;
  char *v24;
  uint64_t (*v25)(char *, char *, uint64_t, __n128);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  id v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  void **aBlock;
  _QWORD v66[4];
  uint64_t v67;
  char v68[32];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v60 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v57 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v62 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - v9;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v11 = qword_100275638;
  v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = *(void **)(v11 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  v15 = *(os_unfair_lock_s **)(v11 + v12);
  v16 = v14;
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  if (v14)
  {
    v17 = v63;
    v18 = (void **)(*(_QWORD *)&v63[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector]
                  + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
    v19 = swift_beginAccess(v18, v68, 0, 0);
    v20 = *v18;
    v21 = *(_QWORD *)((char *)*v18 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer);
    v54 = v1;
    v55 = v0;
    v61 = v16;
    v56 = v18;
    if (v21 && (*((_BYTE *)v20 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type) & 1) == 0)
    {
      v23 = v20;
      v22 = sub_100124F2C();

    }
    else
    {
      v22 = 1;
    }
    v24 = &v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
    v25 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v6 + 16);
    v26 = v25(v10, &v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v5, v19);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 67109120;
      LODWORD(aBlock) = v22 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v29 + 4, v29 + 8);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "startup motion is valid %{BOOL}d", v29, 8u);
      v30 = v29;
      v17 = v63;
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31(v10, v5);
    if ((v22 & 1) == 0)
    {
      ((void (*)(char *, char *, uint64_t))v25)(v62, v24, v5);
      v32 = v61;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v35 = 138412290;
        v37 = dispatch thunk of DockCoreAccessory.info.getter(v36);
        aBlock = (void **)v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v66, v35 + 4, v35 + 12);
        *v36 = v37;

        _os_log_impl((void *)&_mh_execute_header, v33, v34, "startup motion is not valid, disconnecting %@", v35, 0xCu);
        v38 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v36, 1, v38);
        v39 = v36;
        v17 = v63;
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {

        v33 = v32;
      }
      v40 = v55;

      v31(v62, v5);
      v41 = *(void **)&v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      v42 = swift_allocObject(&unk_10023A170, 32, 7);
      *(_QWORD *)(v42 + 16) = v17;
      *(_QWORD *)(v42 + 24) = v32;
      v66[3] = sub_1000D40C4;
      v67 = v42;
      aBlock = _NSConcreteStackBlock;
      v66[0] = 1107296256;
      v66[1] = sub_10012357C;
      v66[2] = &unk_10023A188;
      v43 = _Block_copy(&aBlock);
      v44 = v32;
      v45 = v41;
      v46 = v17;
      v47 = v57;
      static DispatchQoS.unspecified.getter(v46);
      v64 = _swiftEmptyArrayStorage;
      v48 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v49 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v50 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
      v51 = v60;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v49, v50, v40, v48);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v43);
      _Block_release(v43);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v40);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v47, v59);
      swift_release(v67);
    }
    v52 = *v56;
    MotionValidator.stop()();

  }
}

void sub_1000D2C44(uint64_t a1)
{
  id v1;

  v1 = (id)dispatch thunk of DockCoreAccessory.info.getter(a1);
  sub_1000CF780((uint64_t)v1, 0);

}

id sub_1000D2C84(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v17;

  v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v7 = v6;
  v17 = 0;
  v8 = objc_msgSend(v3, "initWithContentsOfURL:options:error:", v6, a2, &v17);

  v9 = v17;
  if (v8)
  {
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v17;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14);
    v15 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v8;
}

void sub_1000D2D94(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A47F4(a1, a2, *(_QWORD *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t sub_1000D2D9C(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v2;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  v8 = sub_1000D30FC(a1, a2, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_57;
    v10 = *v4;
    if ((unint64_t)*v4 >> 62)
    {
LABEL_58:
      if (v10 < 0)
        v30 = v10;
      else
        v30 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v31 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v10);
      if (v11 != v31)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v11 = v8 + 5;
      v34 = a2;
      while (1)
      {
        v12 = v11 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v13);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v14 = *(_QWORD *)(v13 + 8 * v11);
          swift_retain(v14);
        }
        v35 = v14;
        v10 = a1(&v35);
        swift_release(v14);
        if ((v10 & 1) == 0)
          break;
LABEL_32:
        v25 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_49;
        v10 = *v4;
        if ((unint64_t)*v4 >> 62)
        {
          if (v10 < 0)
            v27 = *v4;
          else
            v27 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v4);
          v26 = _CocoaArrayWrapper.endIndex.getter(v27);
          swift_bridgeObjectRelease(v10);
        }
        else
        {
          v26 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v25 == v26)
          return v8;
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v10 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *v4);
        v10 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v12 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v16 = *(_QWORD *)(v10 + 8 * v11);
          swift_retain(v16);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v8 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v15 = *(_QWORD *)(v10 + 8 * v8 + 32);
        swift_retain(v15);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v10);
      v10 = *v4;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *v4 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100171424(v10);
        *v4 = v10;
      }
      v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v16;
      v19 = swift_release(v18);
      specialized Array._endMutation()(v19);
      v10 = *v4;
      v20 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
      *v4 = v10;
      if (!v20 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100171424(v10);
        *v4 = v10;
      }
      a2 = v34;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v21 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v12 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v22 = *(_QWORD *)(v21 + 8 * v11);
      *(_QWORD *)(v21 + 8 * v11) = v15;
      v23 = swift_release(v22);
      v10 = (uint64_t)v4;
      specialized Array._endMutation()(v23);
      goto LABEL_31;
    }
    return v8;
  }
  v28 = *v4;
  if (!((unint64_t)*v4 >> 62))
    return *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v28 < 0)
    v32 = *v4;
  else
    v32 = v28 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v33 = _CocoaArrayWrapper.endIndex.getter(v32);
  swift_bridgeObjectRelease(v28);
  return v33;
}

uint64_t sub_1000D30FC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v14 = v9;
      v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0)
        break;
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0)
          v12 = a3;
        else
          v12 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        v8 = 0;
        if (!v7)
          return v8;
      }
      else
      {
        ++v8;
        if (v11 == v7)
          return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_1000D3218(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id *v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Class isa;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v36[24];
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[256];

  *(_QWORD *)(a4 + 40) = 0;
  v7 = (id *)(a4 + 40);
  v8 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "initWithServiceName:viewControllerClassName:", v9, v10);

  *(v7 - 3) = v11;
  v12 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext), "init");
  *(v7 - 2) = v12;
  v13 = sub_10009061C((uint64_t *)&unk_10026CFB0);
  inited = swift_initStackObject(v13, v39);
  *(_OWORD *)(inited + 16) = xmmword_1001DEEB0;
  v37 = 0x6E656B6F74;
  v38 = 0xE500000000000000;
  v15 = v12;
  v16 = AnyHashable.init<A>(_:)(&v37, &type metadata for String, &protocol witness table for String);
  v17 = UUID.uuidString.getter(v16);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 80) = v18;
  v37 = 1701667182;
  v38 = 0xE400000000000000;
  v19 = AnyHashable.init<A>(_:)(&v37, &type metadata for String, &protocol witness table for String);
  v20 = DockCoreInfo.name.getter(v19);
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v20;
  *(_QWORD *)(inited + 152) = v21;
  v37 = 1701869940;
  v38 = 0xE400000000000000;
  v22 = AnyHashable.init<A>(_:)(&v37, &type metadata for String, &protocol witness table for String);
  v23 = DockCoreInfo.type.getter(v22);
  v24 = DockCoreAccessoryType.description.getter(v23);
  *(_QWORD *)(inited + 240) = &type metadata for String;
  *(_QWORD *)(inited + 216) = v24;
  *(_QWORD *)(inited + 224) = v25;
  v26 = sub_1001B1560(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  objc_msgSend(v15, "setUserInfo:", isa);

  v29 = objc_msgSend((id)objc_opt_self(SBSRemoteAlertHandle, v28), "newHandleWithDefinition:configurationContext:", *(v7 - 3), *(v7 - 2));
  swift_beginAccess(v7, &v37, 1, 0);
  v30 = *v7;
  *v7 = v29;

  *(v7 - 1) = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertActivationContext), "init");
  if (*v7)
    objc_msgSend(*v7, "registerObserver:", a3);
  swift_beginAccess(v7, v36, 32, 0);
  v31 = *v7;
  if (*v7)
  {
    swift_endAccess(v36);
    objc_msgSend(v31, "activateWithContext:", *(_QWORD *)(a4 + 32));

    v32 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
  }
  else
  {
    v33 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    swift_endAccess(v36);

  }
  return a4;
}

id sub_1000D3548(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char a8, char a9, void *a10, void *a11, uint64_t a12, unint64_t a13, char a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  NSString v21;
  Class isa;
  NSString v23;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  id v30;

  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a18);
  LOBYTE(v26) = a14;
  LOBYTE(v25) = a9;
  v30 = objc_msgSend(a19, "initWithPeripheral:name:pairingUsername:statusFlags:stateNumber:enhancedEncryption:connectReason:configNumber:category:setupHash:connectionIdleTime:browser:keyStore:whbStableIdentifier:", a1, v27, v21, a6, a7, a8 & 1, v25, a10, a11, isa, v26, a15, a16, v23);

  sub_10009B2FC(a12, a13);
  return v30;
}

BOOL sub_1000D36D8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  os_unfair_lock_s *v4;
  id v5;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v0 = qword_100275638;
  v1 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v2 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v2);
  os_unfair_lock_lock(v2 + 4);
  swift_release(v2);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v4 = *(os_unfair_lock_s **)(v0 + v1);
  v5 = v3;
  swift_retain(v4);
  os_unfair_lock_unlock(v4 + 4);

  swift_release(v4);
  if (v3)
    return 1;
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  return (*(_BYTE *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) & 0xFE) == 2;
}

char *sub_1000D37E8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  objc_super v31;
  _BYTE v32[24];
  _BYTE v33[40];
  _QWORD v34[5];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AccessoryManager(0);
  *(_QWORD *)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard] = 0;
  v34[3] = v12;
  v34[4] = &off_10023A040;
  a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth] = 1;
  v34[0] = a3;
  v13 = OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken;
  *(_QWORD *)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken] = 0;
  v14 = (uint64_t)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = *(_QWORD *)&a4[v13];
  *(_QWORD *)&a4[v13] = a1;
  v16 = a4;
  swift_retain(a1);
  swift_release(v15);
  sub_10009AFF4((uint64_t)v34, (uint64_t)v33);
  swift_beginAccess(v14, v32, 33, 0);
  sub_1000ACEA4((uint64_t)v33, v14, (uint64_t *)&unk_10026DE30);
  swift_endAccess(v32);
  v17 = type metadata accessor for Transaction(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  swift_unknownObjectWeakInit(v18 + 40, 0);
  *(_QWORD *)(v18 + 80) = 0;
  *(_BYTE *)(v18 + 88) = 1;
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v18 + 64) = 0xD000000000000022;
  *(_QWORD *)(v18 + 72) = 0x80000001001FE9F0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0x402E000000000000;
  swift_unknownObjectWeakAssign(v18 + 40, 0);
  *(_QWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_discoveryTxn] = v18;

  v20 = (objc_class *)type metadata accessor for DKProxManager(0, v19);
  v31.receiver = v16;
  v31.super_class = v20;
  v21 = objc_msgSendSuper2(&v31, "init");
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v8);
  v23 = type metadata accessor for PairingUIServiceAlert(0, v22);
  v24 = swift_allocObject(v23, 48, 7);
  v25 = (char *)v21;
  v26 = sub_1000D3218((uint64_t)v11, a2, v25, v24);
  v27 = *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard];
  *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard] = v26;
  swift_release(v27);
  v28 = *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_discoveryTxn];
  *(_QWORD *)(v28 + 48) = &off_10023B2E8;
  swift_unknownObjectWeakAssign(v28 + 40, v25);
  swift_retain(v28);
  sub_1000ECBEC();
  swift_release(v28);

  sub_100090E88(v34);
  return v25;
}

unint64_t sub_1000D3AD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_23;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*a1);
  if (!v4)
  {
LABEL_14:
    swift_bridgeObjectRelease(v3);
    v20 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      if (v20 < 0)
        v25 = *a1;
      else
        v25 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a1);
      v26 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v20);
      return v26;
    }
    return *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
LABEL_3:
  v5 = 0;
  v63 = v3 & 0xC000000000000001;
  v65 = a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  v62 = v3;
  while (1)
  {
    v6 = v5;
    if (v63)
    {
      a2 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
    }
    else
    {
      a2 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain(a2);
    }
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_10009B27C(v7, v8);
    sub_10011CAC4(v7, v8);
    v10 = v9;
    v12 = v11;
    sub_10009B2FC(v7, v8);
    v14 = *(_QWORD *)(v65 + 32);
    v13 = *(_QWORD *)(v65 + 40);
    sub_10009B27C(v14, v13);
    sub_10011CAC4(v14, v13);
    v16 = v15;
    v18 = v17;
    sub_10009B2FC(v14, v13);
    if (v10 == v16 && v12 == v18)
    {
      swift_bridgeObjectRelease(v62);
      swift_release(a2);
      swift_bridgeObjectRelease(v12);
      goto LABEL_18;
    }
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v16, v18, 0);
    swift_release(a2);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v18);
    if ((v3 & 1) != 0)
      break;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_23:
      if (v3 < 0)
        v24 = v3;
      else
        v24 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v24);
      if (!v4)
        goto LABEL_14;
      goto LABEL_3;
    }
    v5 = v6 + 1;
    v3 = v62;
    if (v6 + 1 == v4)
      goto LABEL_14;
  }
  v12 = v62;
LABEL_18:
  v21 = v6;
  swift_bridgeObjectRelease(v12);
  v22 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = *a1;
    if (!((unint64_t)*a1 >> 62))
    {
      if (v22 == *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        return v21;
      goto LABEL_37;
    }
  }
  if (v4 < 0)
    v27 = v4;
  else
    v27 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v4);
  if (v22 == v28)
    return v21;
LABEL_37:
  for (i = v6 + 5; ; ++i)
  {
    result = i - 4;
    v30 = *a1;
    v64 = i - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      v59 = v21;
      v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v30);
      goto LABEL_43;
    }
    if ((result & 0x8000000000000000) != 0)
      break;
    if (result >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_84;
    v59 = v21;
    v60 = *(_QWORD *)(v30 + 8 * i);
    swift_retain(v60);
LABEL_43:
    v31 = *(_QWORD *)(v60 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v32 = *(_QWORD *)(v60 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_10009B27C(v31, v32);
    sub_10011CAC4(v31, v32);
    v34 = v33;
    v36 = v35;
    sub_10009B2FC(v31, v32);
    v37 = *(_QWORD *)(v65 + 32);
    v38 = *(_QWORD *)(v65 + 40);
    sub_10009B27C(v37, v38);
    sub_10011CAC4(v37, v38);
    v40 = v39;
    v42 = v41;
    sub_10009B2FC(v37, v38);
    if (v34 == v40 && v36 == v42)
    {
      swift_release(v60);
      result = swift_bridgeObjectRelease_n(v36, 2);
LABEL_71:
      v21 = v59;
      v45 = i - 4;
      goto LABEL_72;
    }
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v40, v42, 0);
    swift_release(v60);
    swift_bridgeObjectRelease(v36);
    result = swift_bridgeObjectRelease(v42);
    if ((v44 & 1) != 0)
      goto LABEL_71;
    v45 = i - 4;
    if (v64 != v59)
    {
      v46 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        result = specialized _ArrayBuffer._getElementSlowPath(_:)(v59, *a1);
        v47 = result;
        v46 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
          goto LABEL_53;
      }
      else
      {
        if ((v59 & 0x8000000000000000) != 0)
          goto LABEL_87;
        if (v59 >= *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_88;
        v47 = *(_QWORD *)(v46 + 8 * v59 + 32);
        result = swift_retain(v47);
        if ((v46 & 0xC000000000000001) == 0)
        {
LABEL_53:
          if ((v64 & 0x8000000000000000) != 0)
            goto LABEL_89;
          if (v64 >= *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_90;
          v48 = *(_QWORD *)(v46 + 8 * i);
          swift_retain(v48);
          goto LABEL_56;
        }
      }
      v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v46);
      v46 = *a1;
LABEL_56:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v46);
      *a1 = v46;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v46 < 0 || (v46 & 0x4000000000000000) != 0)
      {
        v46 = sub_100171424(v46);
        *a1 = v46;
      }
      v50 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 8 * v59 + 0x20);
      *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 8 * v59 + 0x20) = v48;
      v51 = swift_release(v50);
      specialized Array._endMutation()(v51);
      v52 = *a1;
      result = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v52;
      if (!(_DWORD)result || v52 < 0 || (v52 & 0x4000000000000000) != 0)
      {
        result = sub_100171424(v52);
        v52 = result;
        *a1 = result;
      }
      if ((v64 & 0x8000000000000000) != 0)
        goto LABEL_91;
      v53 = v52 & 0xFFFFFFFFFFFFFF8;
      if (v64 >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_92;
      v54 = *(_QWORD *)(v53 + 8 * i);
      *(_QWORD *)(v53 + 8 * i) = v47;
      v55 = swift_release(v54);
      result = specialized Array._endMutation()(v55);
    }
    v21 = v59 + 1;
    if (__OFADD__(v59, 1))
      goto LABEL_86;
LABEL_72:
    v56 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_85;
    v57 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      if (v57 < 0)
        v61 = *a1;
      else
        v61 = v57 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a1);
      v58 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease(v57);
    }
    else
    {
      v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v56 == v58)
      return v21;
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

id sub_1000D407C()
{
  uint64_t v0;

  return sub_1000D0E28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D4084(_QWORD *a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_1000D40C4()
{
  uint64_t v0;

  sub_1000D2C44(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000D40CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a2;
  v3 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v31 = a1;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  if (!v10)
    return 0;
  swift_bridgeObjectRetain(*a1);
  v11 = 0;
  v12 = 56;
  v13 = v33;
  while (1)
  {
    v14 = *(id *)(*sub_10009B038((_QWORD *)(v9 + v12 - 24), *(_QWORD *)(v9 + v12)) + 24);
    DockCoreInfo.identifier.getter();

    DockCoreInfo.identifier.getter();
    LOBYTE(v14) = static UUID.== infix(_:_:)(v8, v6);
    v15 = *(void (**)(char *, uint64_t))(v32 + 8);
    v15(v6, v13);
    v15(v8, v13);
    if ((v14 & 1) != 0)
      break;
    ++v11;
    v12 += 40;
    if (v10 == v11)
    {
      swift_bridgeObjectRelease(v9);
      return *(_QWORD *)(v9 + 16);
    }
  }
  result = swift_bridgeObjectRelease(v9);
  if (!__OFADD__(v11, 1))
  {
    v17 = *(_QWORD *)(v9 + 16);
    if (v11 + 1 == v17)
      return v11;
    v18 = v12 + 16;
    v19 = v11 + 1;
    v20 = v31;
    while (v19 < v17)
    {
      sub_10009AFF4(v9 + v18, (uint64_t)&v35);
      v21 = *(id *)(*sub_10009B038(&v35, v36) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v21) = static UUID.== infix(_:_:)(v8, v6);
      v22 = v33;
      v15(v6, v33);
      v15(v8, v22);
      result = sub_100090E88(&v35);
      if ((v21 & 1) == 0)
      {
        if (v19 != v11)
        {
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v23 = (_QWORD *)*v20;
          v24 = *(_QWORD *)(*v20 + 16);
          if (v11 >= v24)
            goto LABEL_30;
          result = sub_10009AFF4((uint64_t)&v23[5 * v11 + 4], (uint64_t)&v35);
          if (v19 >= v24)
            goto LABEL_31;
          sub_10009AFF4((uint64_t)v23 + v18, (uint64_t)v34);
          result = swift_isUniquelyReferenced_nonNull_native(v23);
          v20 = v31;
          *v31 = (uint64_t)v23;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_100171428(v23);
            v23 = (_QWORD *)result;
            *v20 = result;
          }
          if (v11 >= v23[2])
            goto LABEL_32;
          v25 = &v23[5 * v11 + 4];
          sub_100090E88(v25);
          result = sub_10009B340(v34, (uint64_t)v25);
          v26 = *v20;
          if (v19 >= *(_QWORD *)(*v20 + 16))
            goto LABEL_33;
          v27 = v26 + v18;
          sub_100090E88((_QWORD *)(v26 + v18));
          result = sub_10009B340(&v35, v27);
        }
        if (__OFADD__(v11++, 1))
          goto LABEL_28;
      }
      v29 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_27;
      v9 = *v20;
      v17 = *(_QWORD *)(*v20 + 16);
      ++v19;
      v18 += 40;
      if (v29 == v17)
        return v11;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D43E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v32 - v7;
  v33 = a1;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  if (!v10)
    return 0;
  swift_bridgeObjectRetain(*a1);
  v11 = 0;
  v12 = 56;
  v13 = v35;
  while (1)
  {
    v14 = *(id *)(*sub_10009B038((_QWORD *)(v9 + v12 - 24), *(_QWORD *)(v9 + v12)) + 24);
    DockCoreInfo.identifier.getter();

    v15 = *(id *)(v39 + 24);
    DockCoreInfo.identifier.getter();

    LOBYTE(v15) = static UUID.== infix(_:_:)(v8, v6);
    v16 = *(void (**)(char *, uint64_t))(v34 + 8);
    v16(v6, v13);
    v16(v8, v13);
    if ((v15 & 1) != 0)
      break;
    ++v11;
    v12 += 40;
    if (v10 == v11)
    {
      swift_bridgeObjectRelease(v9);
      return *(_QWORD *)(v9 + 16);
    }
  }
  result = swift_bridgeObjectRelease(v9);
  if (!__OFADD__(v11, 1))
  {
    v18 = *(_QWORD *)(v9 + 16);
    if (v11 + 1 == v18)
      return v11;
    v19 = v12 + 16;
    v20 = v11 + 1;
    v21 = v33;
    while (v20 < v18)
    {
      sub_10009AFF4(v9 + v19, (uint64_t)&v37);
      v22 = *(id *)(*sub_10009B038(&v37, v38) + 24);
      DockCoreInfo.identifier.getter();

      v23 = *(id *)(v39 + 24);
      DockCoreInfo.identifier.getter();

      LOBYTE(v23) = static UUID.== infix(_:_:)(v8, v6);
      v24 = v35;
      v16(v6, v35);
      v16(v8, v24);
      result = sub_100090E88(&v37);
      if ((v23 & 1) == 0)
      {
        if (v20 != v11)
        {
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v25 = (_QWORD *)*v21;
          v26 = *(_QWORD *)(*v21 + 16);
          if (v11 >= v26)
            goto LABEL_30;
          result = sub_10009AFF4((uint64_t)&v25[5 * v11 + 4], (uint64_t)&v37);
          if (v20 >= v26)
            goto LABEL_31;
          sub_10009AFF4((uint64_t)v25 + v19, (uint64_t)v36);
          result = swift_isUniquelyReferenced_nonNull_native(v25);
          v21 = v33;
          *v33 = (uint64_t)v25;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_100171428(v25);
            v25 = (_QWORD *)result;
            *v21 = result;
          }
          if (v11 >= v25[2])
            goto LABEL_32;
          v27 = &v25[5 * v11 + 4];
          sub_100090E88(v27);
          result = sub_10009B340(v36, (uint64_t)v27);
          v28 = *v21;
          if (v20 >= *(_QWORD *)(*v21 + 16))
            goto LABEL_33;
          v29 = v28 + v19;
          sub_100090E88((_QWORD *)(v28 + v19));
          result = sub_10009B340(&v37, v29);
        }
        if (__OFADD__(v11++, 1))
          goto LABEL_28;
      }
      v31 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_27;
      v9 = *v21;
      v18 = *(_QWORD *)(*v21 + 16);
      ++v20;
      v19 += 40;
      if (v31 == v18)
        return v11;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D4714(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE __dst[14];
  unsigned __int8 v51;
  _QWORD *v52;
  _QWORD v53[5];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v42 = v3;
      v10 = 0;
      v46 = a1 & 0xFFFFFFFFFFFFFF8;
      v47 = a1 & 0xC000000000000001;
      v44 = xmmword_1001DEEC0;
      v43 = a1;
      v45 = v9;
      while (v47)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
LABEL_9:
        v12 = v11;
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_23;
        DockCoreInfo.identifier.getter();
        v14 = sub_10009061C(&qword_10026BF40);
        v15 = swift_allocObject(v14, 38, 7);
        *(_OWORD *)(v15 + 16) = v44;
        v16 = UUID.uuid.getter(v15);
        *(_BYTE *)(v15 + 32) = v17;
        v18 = UUID.uuid.getter(v16);
        *(_BYTE *)(v15 + 33) = v19;
        v20 = UUID.uuid.getter(v18);
        *(_BYTE *)(v15 + 34) = v21;
        v22 = UUID.uuid.getter(v20);
        *(_BYTE *)(v15 + 35) = v23;
        v24 = UUID.uuid.getter(v22);
        *(_BYTE *)(v15 + 36) = v25;
        UUID.uuid.getter(v24);
        *(_BYTE *)(v15 + 37) = v26;
        v27 = sub_10009061C((uint64_t *)&unk_10026EA70);
        v53[3] = v27;
        v53[4] = sub_1000D5BAC((unint64_t *)&qword_10026CFE0, (uint64_t *)&unk_10026EA70, (uint64_t)&protocol conformance descriptor for <A> [A]);
        v53[0] = v15;
        v28 = sub_10009B038(v53, v27);
        v29 = *v28;
        v30 = *(_QWORD *)(*v28 + 16);
        if (v30)
        {
          v31 = v29 + 32;
          if (v30 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            v51 = v30;
            memcpy(__dst, (const void *)(v29 + 32), v30);
            v35 = *(_QWORD *)__dst;
            v3 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v51 << 48);
            swift_bridgeObjectRetain(v15);
          }
          else
          {
            v32 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
            swift_bridgeObjectRetain(v15);
            v33 = __DataStorage.init(bytes:length:)(v31, v30);
            v34 = v33;
            if (v30 >= 0x7FFFFFFF)
            {
              v36 = type metadata accessor for Data.RangeReference(0);
              v35 = swift_allocObject(v36, 32, 7);
              *(_QWORD *)(v35 + 16) = 0;
              *(_QWORD *)(v35 + 24) = v30;
              v3 = v34 | 0x8000000000000000;
            }
            else
            {
              v35 = v30 << 32;
              v3 = v33 | 0x4000000000000000;
            }
            a1 = v43;
          }
        }
        else
        {
          swift_bridgeObjectRetain(v15);
          v35 = 0;
          v3 = 0xC000000000000000;
        }
        sub_100090E88(v53);
        swift_bridgeObjectRelease(v15);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v49);
        v37 = sub_100186B98(v35, v3, *a2, a2[1]);
        v38 = sub_10009B2FC(v35, v3);
        if ((v37 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
          v3 = v52[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v3);
          v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v12);
          specialized ContiguousArray._endMutation()(v39);
        }
        else
        {

        }
        ++v10;
        if (v13 == v45)
          return v52;
      }
      if (v10 < *(_QWORD *)(v46 + 16))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      if (a1 < 0)
        v41 = a1;
      else
        v41 = a1 & 0xFFFFFFFFFFFFFF8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v41);
      if (!v9)
        return _swiftEmptyArrayStorage;
    }
    v11 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000D4AB4(uint64_t a1)
{
  sub_1000D4AE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1000D4AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_10009B2FC(a5, a6);
  }
  return result;
}

uint64_t sub_1000D4B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10026CF1C);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10009B7AC;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000CF1D4, 0, 0);
}

uint64_t sub_1000D4B84()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D4BB0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10026CF44);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  v2 = (_QWORD *)swift_task_alloc(dword_10027022C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10009B0EC;
  return sub_100179958();
}

uint64_t sub_1000D4C18(char a1)
{
  uint64_t v1;

  return sub_1000CF2B0(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000D4C24()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D4C58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10026CF54);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10009B7AC;
  return sub_1000CF5D8(a1, v4, v5, v7, v6);
}

void sub_1000D4CD0()
{
  uint64_t v0;

  sub_1000CF4BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D4CD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CE248(a1, *(_QWORD **)(v1 + 16)) & 1;
}

unint64_t sub_1000D4CF4()
{
  unint64_t result;

  result = qword_10026CF68;
  if (!qword_10026CF68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10026CF68);
  }
  return result;
}

uint64_t sub_1000D4D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000D4D60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D4D84()
{
  return sub_1000C47E4(0, 0, 0);
}

uint64_t *sub_1000D4DB0(uint64_t *a1)
{
  sub_1000D4DE4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_1000D4DE4(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a4 != 2)
  {
    sub_10009B2FC(a2, a3);
    return sub_10009B2FC(a5, a6);
  }
  return result;
}

uint64_t sub_1000D4E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
  {
LABEL_13:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(a1);
    v5 = 0;
    if (!v4)
      return v5;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = 0;
    if (!v4)
      return v5;
  }
  a2 += OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
      swift_retain(v6);
    }
    v7 = static UUID.== infix(_:_:)(v6 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, a2);
    swift_release(v6);
    if ((v7 & 1) != 0)
      return v5;
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v8 == v4)
      return 0;
  }
}

unint64_t sub_1000D4F44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  v7 = sub_1000D4E28(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (!v2)
  {
    if ((v9 & 1) != 0)
    {
      v27 = *a1;
      if ((unint64_t)v27 >> 62)
      {
        if (v27 < 0)
          v31 = v27;
        else
          v31 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v27);
        v7 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(v27);
      }
      else
      {
        return *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_57;
      v9 = *a1;
      if ((unint64_t)*a1 >> 62)
      {
LABEL_58:
        if ((v9 & 0x8000000000000000) != 0)
          v29 = v9;
        else
          v29 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v9);
        v30 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v9);
        if (v10 != v30)
          goto LABEL_6;
      }
      else if (v10 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        a2 += OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
        for (i = v7 + 5; ; ++i)
        {
          v9 = i - 4;
          v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
          }
          else
          {
            if ((v9 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
              goto LABEL_58;
            }
            if (v9 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_48;
            v13 = *(_QWORD *)(v12 + 8 * i);
            swift_retain(v13);
          }
          v10 = static UUID.== infix(_:_:)(v13 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, a2);
          swift_release(v13);
          if ((v10 & 1) == 0)
            break;
LABEL_32:
          v10 = i - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_49;
          v24 = *a1;
          if ((unint64_t)*a1 >> 62)
          {
            if (v24 < 0)
              v26 = *a1;
            else
              v26 = v24 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(*a1);
            v25 = _CocoaArrayWrapper.endIndex.getter(v26);
            swift_bridgeObjectRelease(v24);
          }
          else
          {
            v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (v10 == v25)
            return v7;
        }
        if (v9 == v7)
        {
LABEL_31:
          if (__OFADD__(v7++, 1))
            goto LABEL_50;
          goto LABEL_32;
        }
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
          v10 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v9 & 0x8000000000000000) != 0)
              goto LABEL_53;
            if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_54;
            v15 = *(_QWORD *)(v10 + 8 * i);
            swift_retain(v15);
            goto LABEL_20;
          }
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_51;
          if (v7 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_52;
          v14 = *(_QWORD *)(v10 + 8 * v7 + 32);
          swift_retain(v14);
          if ((v10 & 0xC000000000000001) == 0)
            goto LABEL_17;
        }
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
        v10 = *a1;
LABEL_20:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
        *a1 = v10;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
        {
          v10 = sub_100171424(v10);
          *a1 = v10;
        }
        v17 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
        *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v15;
        v18 = swift_release(v17);
        specialized Array._endMutation()(v18);
        v10 = *a1;
        v19 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
        *a1 = v10;
        if (!v19 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
        {
          v10 = sub_100171424(v10);
          *a1 = v10;
        }
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_55;
        v20 = v10 & 0xFFFFFFFFFFFFFF8;
        if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_56;
        v21 = *(_QWORD *)(v20 + 8 * i);
        *(_QWORD *)(v20 + 8 * i) = v14;
        v22 = swift_release(v21);
        specialized Array._endMutation()(v22);
        goto LABEL_31;
      }
    }
  }
  return v7;
}

uint64_t sub_1000D5284()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000D52B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_BYTE *)(v2 + 32);
  v7 = swift_task_alloc(dword_10026CFCC);
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_10009B7AC;
  *(_BYTE *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch(sub_1000C7DE4, 0, 0);
}

void sub_1000D532C()
{
  uint64_t v0;

  sub_1000CF780(*(_QWORD *)(v0 + 24), 1);
}

void sub_1000D5354()
{
  uint64_t v0;

  sub_1000CE3BC(*(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1000D537C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BTDiscoveredDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D53C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BTDiscoveredDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D53FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return sub_10009B27C(a5, a6);
  }
  return result;
}

_QWORD *sub_1000D5434(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[4];
  v5 = a1[5];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_1000D547C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D54A4(uint64_t a1)
{
  return sub_1000D5544(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))sub_1000C7774);
}

void sub_1000D54B4(char a1)
{
  uint64_t v1;

  sub_1000C6BC4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), v1 + 40, *(void **)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_1000D54D0()
{
  uint64_t v0;

  return sub_1000C6F14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D54DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  sub_10009B2FC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));

  if (*(_QWORD *)(v0 + 96))
    swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1000D5538(uint64_t a1)
{
  return sub_1000D5544(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))sub_1000C7340);
}

uint64_t sub_1000D5544(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2 + 5, v2[11], v2[12], v2[13]);
}

_QWORD *sub_1000D5560(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[4];
  v3 = a1[5];
  swift_bridgeObjectRetain(a1[1]);
  sub_10009B27C(v2, v3);
  return a1;
}

uint64_t sub_1000D55A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10009061C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D55E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000D5620()
{
  uint64_t *v0;

  sub_1000C4768(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000D5630()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D565C()
{
  uint64_t *v0;

  sub_1000C46F8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000D5668()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D56A4()
{
  uint64_t v0;

  return sub_1000C47E4(*(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_1000D56D0()
{
  uint64_t *v0;

  sub_1000C2F74(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000D56E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D5714(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C2E9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000D5720()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D5750()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D577C()
{
  uint64_t v0;

  sub_1000C237C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000D5784(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A4258(a1, a2, *(_QWORD *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t sub_1000D5790()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D57BC()
{
  uint64_t v0;

  sub_1000C0F10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D57C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D580C(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000D5914(uint64_t a1, unint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v7);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v18 = a3;
  v14 = (uint8_t *)swift_slowAlloc(12, -1);
  result = swift_slowAlloc(32, -1);
  v20 = result;
  *(_DWORD *)v14 = 136315138;
  if (a2)
  {
    v16 = result;
    swift_bridgeObjectRetain(a2);
    v19 = sub_1000906BC(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __break(1u);
  return result;
}

void *sub_1000D5AE4(void *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  __objc2_prot *v13;

  if (!result)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = v3;
  v7 = result;
  v13 = &OBJC_PROTOCOL___HAPPairSetupSessionClientDelegate;
  v8 = swift_dynamicCastObjCProtocolUnconditional(result, 1, &v13, 0, 0, 0);
  objc_allocWithZone((Class)type metadata accessor for DKPairSetupSession(0));
  v9 = v7;
  v10 = sub_1000AB6B0(0, a2, a3 & 1, v8);

  v11 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup;
  v12 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup) = v10;

  result = *(void **)(v4 + v11);
  if (!result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1000D5BAC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100090F6C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D5C5C(_QWORD *a1)
{
  return sub_1000D4084(a1) & 1;
}

uint64_t sub_1000D5CB0()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR____TtC14dockaccessoryd6BTLink_shouldScan] = 0;
  v9 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  v10 = swift_allocObject(&unk_10023A840, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_1000D5F90;
  v20 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023A858;
  v11 = _Block_copy(aBlock);
  v12 = v9;
  static DispatchQoS.unspecified.getter(v0);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_1000D5FC8();
  v14 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v15 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

uint64_t sub_1000D5E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _OWORD v11[2];
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
  if (v2)
  {
    swift_retain(v2);
    sub_1000DD92C();
    swift_release(v2);
  }
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  v4 = *(void (**)(_QWORD))(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  if (v4)
  {
    v5 = v3[1];
    swift_retain(v5);
    v4(0);
    sub_1000B1410((uint64_t)v4, v5);
    v6 = *v3;
  }
  else
  {
    v6 = 0;
  }
  v7 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  sub_1000B1410(v6, v7);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v8 = v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter;
  swift_beginAccess(v8, v10, 33, 0);
  sub_1000D6010((uint64_t)v11, v8);
  return swift_endAccess(v10);
}

uint64_t sub_1000D5F6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D5F90()
{
  return sub_1000D5E84();
}

uint64_t sub_1000D5FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D5FC0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000D5FC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C570;
  if (!qword_10026C570)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10026C570);
  }
  return result;
}

uint64_t sub_1000D6010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026E6D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6058()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_10026D04C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000D60A0;
  return sub_1000D637C();
}

uint64_t sub_1000D60A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 24);
  v5 = *v3;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(0);
  else
    return swift_task_switch(sub_1000D6118, 0, 0);
}

uint64_t sub_1000D6118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  __n128 v4;
  void *v5;
  uint64_t Strong;
  const void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t result;
  id v12;
  const void *v13;
  const void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  sub_100117E20(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v2 = v1;
  v3 = String.uppercased()();
  swift_bridgeObjectRelease(v2);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v5 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  Strong = swift_weakLoadStrong(*(_QWORD *)(v0 + 16) + 16, v4);
  v7 = (const void *)Strong;
  if (Strong)
  {
    v8 = *(void **)(Strong + 32);
    v9 = v8;
    v10 = v5;
    result = swift_release(v7);
    if (!v8)
      goto LABEL_32;
    v12 = objc_msgSend(v9, "identifier");

    if (v12)
    {
      v7 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v14 = v13;

      goto LABEL_10;
    }
    v7 = 0;
  }
  else
  {
    v15 = v5;
  }
  v14 = (const void *)0xE000000000000000;
LABEL_10:
  v16 = sub_10014D850(v7, v14, 1);
  v17 = v16;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 >= 0)
      v16 &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(v16);
    if (result)
      goto LABEL_12;
LABEL_27:
    v28 = *(_QWORD *)(v0 + 32);
    v27 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRelease(v17);

    swift_bridgeObjectRelease(v14);
    v23 = v28;
    v24 = v27;
    goto LABEL_28;
  }
  result = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!result)
    goto LABEL_27;
LABEL_12:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(_QWORD *)(v17 + 32);
    swift_retain(v18);
LABEL_15:
    swift_bridgeObjectRelease(v17);
    v20 = *(_QWORD *)(v18 + 136);
    v19 = *(void **)(v18 + 144);
    swift_bridgeObjectRetain(v19);
    swift_release(v18);

    swift_bridgeObjectRelease(v14);
    if (v19)
    {
      if (v3._countAndFlagsBits == v20 && v19 == v3._object)
        v22 = 1;
      else
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, v20, v19, 0);
      v26 = *(_QWORD *)(v0 + 32);
      v25 = *(_QWORD *)(v0 + 40);
      swift_bridgeObjectRetain_n(v3._object, 2);
      sub_10009B2FC(v26, v25);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease_n(v3._object, 2);
      return (*(uint64_t (**)(_QWORD, uint64_t, void *))(v0 + 8))(v22 & 1, v3._countAndFlagsBits, v3._object);
    }
    v23 = *(_QWORD *)(v0 + 32);
    v24 = *(_QWORD *)(v0 + 40);
LABEL_28:
    sub_10009B2FC(v23, v24);
    v22 = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, void *))(v0 + 8))(v22 & 1, v3._countAndFlagsBits, v3._object);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000D637C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D63DC, 0, 0);
}

uint64_t sub_1000D63DC(__n128 a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  Strong = swift_weakLoadStrong(*(_QWORD *)(v1 + 32) + 16, a1);
  if (!Strong)
    goto LABEL_14;
  v3 = Strong;
  v4 = *(void **)(Strong + 32);
  *(_QWORD *)(v1 + 64) = v4;
  v5 = v4;
  swift_release(v3);
  if (!v4)
    goto LABEL_14;
  v7 = objc_opt_self(HAPAccessoryServerBTLE, v6);
  v8 = (void *)swift_dynamicCastObjCClass(v5, v7);
  if (!v8)
  {

LABEL_14:
    v43 = type metadata accessor for Errors(0);
    v44 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v43, v44, 0, 0);
    *v45 = 0;
    v45[1] = 0xE000000000000000;
    v46 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, enum case for Errors.AccessoryServerNil(_:), v43);
    swift_willThrow(v46);
LABEL_15:
    swift_task_dealloc(*(_QWORD *)(v1 + 56));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "primaryAccessory");
  if (!v10)
    goto LABEL_16;
  v12 = v10;
  v13 = (void *)objc_opt_self(CBUUID, v11);
  v14 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v15 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v15 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v15 + 32) = 262;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v15);
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = objc_msgSend(v13, "UUIDWithString:", v18);

  v20 = objc_msgSend(v19, "UUIDString");
  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
  }
  v23 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v23 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v23 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v23 + 32) = 256;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v23);
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v27 = objc_msgSend(v13, "UUIDWithString:", v26);

  v28 = objc_msgSend(v27, "UUIDString");
  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v30 = v29;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
  }
  v31 = objc_msgSend(v12, "characteristicOfType:serviceType:", v20, v28, 1, 2);
  *(_QWORD *)(v1 + 72) = v31;

  if (!v31)
  {
LABEL_16:
    v47 = type metadata accessor for Errors(0);
    v48 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v47, v48, 0, 0);
    *v49 = 0xD000000000000033;
    v49[1] = 0x80000001001FEC40;
    v50 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, enum case for Errors.NotFound(_:), v47);
    swift_willThrow(v50);

    goto LABEL_15;
  }
  v32 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 48) + 16))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger, *(_QWORD *)(v1 + 40));
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Reading Accessory Description hash...", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
  v37 = *(_QWORD *)(v1 + 48);
  v36 = *(_QWORD *)(v1 + 56);
  v39 = *(_QWORD *)(v1 + 32);
  v38 = *(_QWORD *)(v1 + 40);

  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  v40 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v1 + 80) = v40;
  v40[2] = v9;
  v40[3] = v31;
  v40[4] = v39;
  v41 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 88) = v41;
  *v41 = v1;
  v41[1] = sub_1000D68CC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, 0, 0, 0xD00000000000001ELL, 0x80000001001FEC80, sub_1000DA134, v40, &type metadata for Data);
}

uint64_t sub_1000D68CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000D6990;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    v4 = sub_1000D6938;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D6938()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);

  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_1000D6990()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(void **)(v0 + 64);

  swift_task_dealloc(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D69DC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Class isa;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v8 = sub_10009061C(&qword_10026D1A0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10009061C(&qword_10026C340);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001DE6A0;
  *(_QWORD *)(v12 + 32) = a3;
  aBlock[0] = v12;
  specialized Array._endMutation()(v12);
  sub_1000DA140(0, v13);
  v14 = a3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(aBlock[0]);
  v16 = *(void **)(a4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_10023A8B8, v18 + v10, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_1000DA1E4;
  v24 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100177F4C;
  aBlock[3] = &unk_10023A8D0;
  v20 = _Block_copy(aBlock);
  v21 = v24;
  v22 = v16;
  swift_release(v21);
  objc_msgSend(a2, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v22, v20, 10.0);
  _Block_release(v20);

}

uint64_t sub_1000D6BA0(uint64_t result, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  if (a2)
  {
    *(_QWORD *)&v17 = a2;
    swift_errorRetain(a2);
  }
  else
  {
    if (result)
    {
      if ((result & 0xC000000000000001) != 0)
      {
        v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, result);
      }
      else
      {
        if (!*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v2 = *(id *)(result + 32);
      }
      v3 = v2;
      v4 = objc_msgSend(v2, "value");

      if (v4)
      {
        _bridgeAnyObjectToAny(_:)(v16);
        swift_unknownObjectRelease(v4);
      }
      else
      {
        memset(v16, 0, sizeof(v16));
      }
      sub_10009AEEC((uint64_t)v16, (uint64_t)&v17);
      if (v18)
      {
        if ((swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v17 = v15;
          v12 = sub_10009061C(&qword_10026D1A0);
          return CheckedContinuation.resume(returning:)(&v17, v12);
        }
      }
      else
      {
        sub_10009B2C0((uint64_t)&v17, &qword_10026E5F0);
      }
      v5 = type metadata accessor for Errors(0);
      v13 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v8 = swift_allocError(v5, v13, 0, 0);
      v9 = v7;
      v10 = 0xD00000000000002CLL;
      v11 = "Accessory Description hash not found in read";
    }
    else
    {
      v5 = type metadata accessor for Errors(0);
      v6 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v8 = swift_allocError(v5, v6, 0, 0);
      v9 = v7;
      v10 = 0xD000000000000048;
      v11 = "Error reading Accessory Description characteristic: no results returned!";
    }
    *v7 = v10;
    v7[1] = (unint64_t)(v11 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v9, enum case for Errors.CharacteristicReadWriteFailure(_:), v5);
    *(_QWORD *)&v17 = v8;
  }
  v14 = sub_10009061C(&qword_10026D1A0);
  return CheckedContinuation.resume(throwing:)(&v17, v14);
}

uint64_t sub_1000D6DC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1[22] = v0;
  v2 = type metadata accessor for SHA512(0);
  v1[23] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SHA512Digest(0);
  v1[26] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[27] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[28] = swift_task_alloc(v6);
  v1[29] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[31] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v9);
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10026D04C);
  v1[36] = v10;
  *v10 = v1;
  v10[1] = sub_1000D6EEC;
  return sub_1000D637C();
}

uint64_t sub_1000D6EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*v3 + 288);
  v5 = *v3;
  *(_QWORD *)(v5 + 296) = a1;
  *(_QWORD *)(v5 + 304) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1000D700C, 0, 0);
  v6 = *(_QWORD *)(v5 + 272);
  v8 = *(_QWORD *)(v5 + 256);
  v7 = *(_QWORD *)(v5 + 264);
  v10 = *(_QWORD *)(v5 + 224);
  v9 = *(_QWORD *)(v5 + 232);
  v11 = *(_QWORD *)(v5 + 200);
  swift_task_dealloc(*(_QWORD *)(v5 + 280));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000D700C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  sub_100117E20(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
  v6 = v5;
  v7 = String.uppercased()();
  swift_bridgeObjectRelease(v6);
  *(Swift::String *)(v0 + 312) = v7;
  v8 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  *(_QWORD *)(v0 + 328) = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  v9 = v1 + v8;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 336) = v10;
  v10(v2, v9, v3);
  v11 = swift_bridgeObjectRetain_n(v7._object, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v29 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 240);
    v31 = *(_QWORD *)(v0 + 280);
    v32 = v9;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v33 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(v7._object);
    *(_QWORD *)(v0 + 168) = sub_1000906BC(v7._countAndFlagsBits, (unint64_t)v7._object, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v7._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "read Accessory Description hash 0x%s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v16 = v14;
    v9 = v32;
    swift_slowDealloc(v16, -1, -1);

    v17 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v17(v31, v30);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 240);
    v20 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease_n(v7._object, 2);

    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  *(_QWORD *)(v0 + 344) = v17;
  v21 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v10)(*(_QWORD *)(v0 + 272), v9, *(_QWORD *)(v0 + 240));
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Initiating Accessory Description transfer...", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 240);

  v17(v25, v26);
  v27 = (_QWORD *)swift_task_alloc(dword_10026D05C);
  *(_QWORD *)(v0 + 352) = v27;
  *v27 = v0;
  v27[1] = sub_1000D72F8;
  return sub_1000D908C();
}

uint64_t sub_1000D72F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 352);
  v4[45] = a1;
  v4[46] = a2;
  v4[47] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_bridgeObjectRelease(v4[40]);
    v4[50] = v2;
    v6 = sub_1000D8C84;
  }
  else
  {
    v6 = sub_1000D73C0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D73C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = v0[22];
  v2 = *(_QWORD *)(v1 + 32);
  v0[48] = v2;
  if (!v2)
  {
    v6 = v0[46];
    *(_QWORD *)(v1 + 32) = 0;
    __asm { BR              X10 }
  }
  v3 = dword_100270E7C;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[49] = v4;
  *v4 = v0;
  v4[1] = sub_1000D8024;
  return sub_1001A0094();
}

uint64_t sub_1000D8024()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release(v1);
  return swift_task_switch(sub_1000D80AC, 0, 0);
}

void sub_1000D80AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v1 + 32) = 0;
  swift_release(v2);
  __asm { BR              X9 }
}

uint64_t sub_1000D8140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v80 = v1;
  v77 = v2;
  v5 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 438) = v5;
  *(_WORD *)(v0 + 446) = v4;
  *(_BYTE *)(v0 + 448) = BYTE2(v4);
  *(_BYTE *)(v0 + 449) = BYTE3(v4);
  *(_BYTE *)(v0 + 450) = BYTE4(v4);
  *(_BYTE *)(v0 + 451) = BYTE5(v4);
  v76 = static String._fromUTF8Repairing(_:)(v0 + 438, BYTE6(v4));
  v78 = v7;
  sub_10009B2FC(v5, v4);
  v8 = sub_100090E1C(&qword_10026D1A8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512, (uint64_t)&protocol conformance descriptor for SHA512);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.init())(v6, v8);
  *(_QWORD *)(v0 + 424) = v5;
  *(_WORD *)(v0 + 432) = v4;
  *(_BYTE *)(v0 + 434) = BYTE2(v4);
  *(_BYTE *)(v0 + 435) = BYTE3(v4);
  *(_BYTE *)(v0 + 436) = BYTE4(v4);
  *(_BYTE *)(v0 + 437) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v0 + 424, v0 + 424 + BYTE6(v4), v6, v8);
  sub_10009B2FC(v5, v4);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 184);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v15, v8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v9, v11);
  v16 = sub_100090E1C(&qword_10026D1B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512Digest, (uint64_t)&protocol conformance descriptor for SHA512Digest);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of Sequence.makeIterator())(v11, v16);
  v17 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v17 + 16);
  if (v18 == v19)
  {
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_3;
  }
  if ((uint64_t)v18 >= v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    JUMPOUT(0x1000D8C6CLL);
  }
  if ((v18 & 0x8000000000000000) != 0)
    goto LABEL_23;
  v20 = _swiftEmptyArrayStorage;
  do
  {
    if (v18 >= *(_QWORD *)(v17 + 16))
    {
      __break(1u);
      JUMPOUT(0x1000D8C60);
    }
    v40 = *(_BYTE *)(v17 + 32 + v18);
    v41 = sub_10009061C((uint64_t *)&unk_10026E5E0);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v42 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v42 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v42 + 32) = v40;
    v43 = String.init(format:_:)(2016555045, 0xE400000000000000, v42);
    v45 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = sub_1000E9698(0, v20[2] + 1, 1, v20);
    v47 = v20[2];
    v46 = v20[3];
    if (v47 >= v46 >> 1)
      v20 = sub_1000E9698((_QWORD *)(v46 > 1), v47 + 1, 1, v20);
    ++v18;
    v20[2] = v47 + 1;
    v48 = &v20[2 * v47];
    v48[4] = v43;
    v48[5] = v45;
  }
  while (v19 != v18);
LABEL_3:
  v21 = *(_QWORD *)(v0 + 328);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(v0 + 152) = v20;
  v26 = sub_10009061C(&qword_10026D1B8);
  v27 = sub_1000DA0E8();
  ((void (*)(_QWORD, unint64_t, uint64_t, unint64_t))BidirectionalCollection<>.joined(separator:))(0, 0xE000000000000000, v26, v27);
  v29 = v28;
  swift_bridgeObjectRelease(v20);
  v30 = String.uppercased()();
  swift_bridgeObjectRelease(v29);
  v22(v23, v25 + v21, v24);
  swift_bridgeObjectRetain(v78);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter();
  v34 = os_log_type_enabled(v32, v33);
  v35 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v36 = *(_QWORD *)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 240);
  if (v34)
  {
    v75 = *(_QWORD *)(v0 + 264);
    v74 = *(_QWORD *)(v0 + 240);
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v3 - 96) = v39;
    *(_DWORD *)v38 = 136315138;
    swift_bridgeObjectRetain(v78);
    *v77 = sub_1000906BC(v76, v78, (uint64_t *)(v3 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v80, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(v78, 3);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Accessory Description is %s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    v35(v75, v74);
  }
  else
  {
    swift_bridgeObjectRelease_n(v78, 2);

    v35(v36, v37);
  }
  v49 = *(_QWORD *)(v0 + 320);
  v50 = sub_1000D8F28(*(_QWORD *)(v0 + 312), v49, v30._countAndFlagsBits, (uint64_t)v30._object);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v30._object);
  if ((v50 & 1) != 0)
  {
    v51 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 336))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 240));
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Accessory Description hash match succeeded!!", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }
    v55 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v57 = *(_QWORD *)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 280);
    v58 = *(_QWORD *)(v0 + 256);
    v60 = *(_QWORD *)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 240);
    v61 = *(_QWORD *)(v0 + 216);
    v79 = *(_QWORD *)(v0 + 264);
    v81 = *(_QWORD *)(v0 + 224);
    v62 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 200);
    sub_10009B2FC(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));

    v55(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v79);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    __asm { BR              X2 }
  }
  v63 = *(_QWORD *)(v0 + 360);
  v64 = *(_QWORD *)(v0 + 368);
  v65 = *(_QWORD *)(v0 + 232);
  v66 = *(_QWORD *)(v0 + 208);
  v67 = *(_QWORD *)(v0 + 216);
  v68 = type metadata accessor for Errors(0);
  v69 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
  v70 = swift_allocError(v68, v69, 0, 0);
  *v71 = 0xD000000000000029;
  v71[1] = 0x80000001001FEC10;
  v72 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v71, enum case for Errors.CommunicationFailure(_:), v68);
  swift_willThrow(v72);
  sub_10009B2FC(v63, v64);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
  *(_QWORD *)(v0 + 400) = v70;
  return swift_task_switch(sub_1000D8C84, 0, 0);
}

uint64_t sub_1000D8C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v1 + 176);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v1 + 408) = v3;
  if (v3)
  {
    v4 = dword_100270E7C;
    swift_retain(v3);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v1 + 416) = v5;
    *v5 = v1;
    v5[1] = sub_1000D8DC4;
    return sub_1001A0094();
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 296);
    v8 = *(_QWORD *)(v1 + 304);
    *(_QWORD *)(v2 + 32) = 0;
    swift_willThrow(a1);
    sub_10009B2FC(v7, v8);
    v9 = *(_QWORD *)(v1 + 272);
    v11 = *(_QWORD *)(v1 + 256);
    v10 = *(_QWORD *)(v1 + 264);
    v13 = *(_QWORD *)(v1 + 224);
    v12 = *(_QWORD *)(v1 + 232);
    v14 = *(_QWORD *)(v1 + 200);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000D8DC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_release(v1);
  return swift_task_switch(sub_1000D8E4C, 0, 0);
}

uint64_t sub_1000D8E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v1 + 32) = 0;
  v5 = swift_release(v2);
  swift_willThrow(v5);
  sub_10009B2FC(v3, v4);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D8F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t sub_1000D908C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000D9108, 0, 0);
}

uint64_t sub_1000D9108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double (*v16)(uint64_t, uint64_t);
  __n128 v17;
  uint64_t Strong;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  v6 = v4 + v5;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 72) = v7;
  v8 = v7(v1, v4 + v5, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handling Accessory Description transfer request", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 24);
  v14 = *(_QWORD *)(v0 + 32);
  v15 = *(_QWORD *)(v0 + 16);

  v16 = *(double (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v0 + 80) = v16;
  v17.n128_f64[0] = v16(v12, v13);
  Strong = swift_weakLoadStrong(v15 + 16, v17);
  *(_QWORD *)(v0 + 88) = Strong;
  if (!Strong)
  {
    v38 = type metadata accessor for Errors(0);
    v39 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v38, v39, 0, 0);
    *v40 = 0xD000000000000010;
    v40[1] = 0x80000001001FEB90;
    v41 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, enum case for Errors.AccessoryServerNil(_:), v38);
    swift_willThrow(v41);
    goto LABEL_12;
  }
  v19 = Strong;
  v20 = *(void **)(Strong + 32);
  if (!v20 || (objc_msgSend(v20, "isReachable") & 1) == 0)
  {
    v28 = type metadata accessor for Errors(0);
    v29 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v28, v29, 0, 0);
    v31 = v30;
    _StringGuts.grow(_:)(19);
    v32 = *(id *)(v19 + 24);
    v33 = objc_msgSend(v32, "description", 0);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    swift_bridgeObjectRelease(0xE000000000000000);
    v37._countAndFlagsBits = 0xD000000000000011;
    v37._object = (void *)0x80000001001FE610;
    String.append(_:)(v37);
    *v31 = v34;
    v31[1] = v36;
    v27 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v31, enum case for Errors.AccessoryNotReachable(_:), v28);
    goto LABEL_10;
  }
  v21 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v21 + 32))
  {
    v22 = type metadata accessor for Errors(0);
    v23 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v22, v23, 0, 0);
    v25 = v24;
    *v24 = 0xD00000000000001BLL;
    v24[1] = 0x80000001001FE6C0;
    v26 = (unsigned int *)&enum case for Errors.OperationInProgress(_:);
LABEL_8:
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v25, *v26, v22);
LABEL_10:
    swift_willThrow(v27);
    swift_release(v19);
LABEL_12:
    v42 = *(_QWORD *)(v0 + 48);
    v43 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v45 = *(_QWORD *)(v0 + 48);
  v46 = *(_QWORD *)(v0 + 24);
  v47 = *(void **)(v21 + 24);
  v48 = type metadata accessor for AccessoryDescriptionSession(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  swift_retain(v19);
  v49 = sub_1001A1594(v19, (uint64_t)v47);
  swift_release(v19);
  v50 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 32) = v49;
  swift_release(v50);
  v51 = v7(v45, v6, v46);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Setting up a Accessory Description transfer session", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }
  v55 = *(_QWORD *)(v0 + 48);
  v56 = *(_QWORD *)(v0 + 24);

  v16(v55, v56);
  v57 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v0 + 96) = v57;
  if (!v57)
  {
    v22 = type metadata accessor for Errors(0);
    v60 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v22, v60, 0, 0);
    v25 = v61;
    *v61 = 0xD000000000000053;
    v61[1] = 0x80000001001FEBB0;
    v26 = (unsigned int *)&enum case for Errors.CommunicationFailure(_:);
    goto LABEL_8;
  }
  v58 = dword_100270E84;
  swift_retain(v57);
  v59 = (_QWORD *)swift_task_alloc(v58);
  *(_QWORD *)(v0 + 104) = v59;
  *v59 = v0;
  v59[1] = sub_1000D961C;
  return sub_1001A0400();
}

uint64_t sub_1000D961C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000D976C;
  else
    v3 = sub_1000D9680;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D9680()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 72))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16) + *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 24));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Accessory Description transfer session was setup successfully", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);

  v5(v6, v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10026D064);
  *(_QWORD *)(v0 + 120) = v8;
  *v8 = v0;
  v8[1] = sub_1000D97CC;
  return sub_1000D990C();
}

uint64_t sub_1000D976C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D97CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 120);
  *(_QWORD *)(*v3 + 128) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000D98AC;
  }
  else
  {
    *(_QWORD *)(v6 + 136) = a2;
    *(_QWORD *)(v6 + 144) = a1;
    v8 = sub_1000D9844;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000D9844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 136));
}

uint64_t sub_1000D98AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D990C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[6] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D996C, 0, 0);
}

uint64_t sub_1000D996C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger, *(_QWORD *)(v0 + 56));
  v2 = swift_retain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v23 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 48);
    v24 = *(_QWORD *)(v0 + 56);
    v25 = *(_QWORD *)(v0 + 72);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v26 = v7;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v5 + 32);
    v8 = sub_10009061C(&qword_10026D198);
    v9 = Optional.debugDescription.getter(v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_1000906BC(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Read Accessory Description data for session %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 56);
    swift_release_n(*(_QWORD *)(v0 + 48), 2);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 32);
  *(_QWORD *)(v0 + 80) = v15;
  if (v15)
  {
    v16 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    swift_retain(v15);
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v0 + 88) = v17;
    *v17 = v0;
    v17[1] = sub_1000BF40C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x746144646165725FLL, 0xEB00000000292861, sub_1000D9FC0, v15, &type metadata for Data);
  }
  else
  {
    v19 = type metadata accessor for Errors(0);
    v20 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v19, v20, 0, 0);
    *v21 = 0xD000000000000024;
    v21[1] = 0x80000001001FEB40;
    v22 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for Errors.CommunicationFailure(_:), v19);
    swift_willThrow(v22);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D9C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = sub_10009061C(&qword_10026D1A0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_10023A890, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1001A0C0C((uint64_t)sub_1000D9FCC, v7);
  return swift_release(v7);
}

uint64_t sub_1000D9D78(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  if (a1)
  {
    v10[0] = a1;
    swift_errorRetain(a1);
LABEL_5:
    v7 = sub_10009061C(&qword_10026D1A0);
    return CheckedContinuation.resume(throwing:)(v10, v7);
  }
  if (a3 >> 60 == 15)
  {
    v3 = type metadata accessor for Errors(0);
    v4 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v5 = swift_allocError(v3, v4, 0, 0);
    *v6 = 0xD000000000000019;
    v6[1] = 0x80000001001FEB70;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v6, enum case for Errors.CommunicationFailure(_:), v3);
    v10[0] = v5;
    goto LABEL_5;
  }
  v10[0] = a2;
  v10[1] = a3;
  sub_10009B27C(a2, a3);
  v9 = sub_10009061C(&qword_10026D1A0);
  return CheckedContinuation.resume(returning:)(v10, v9);
}

uint64_t sub_1000D9E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_weakDestroy(v0 + 16);

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D9EEC()
{
  return type metadata accessor for AccessoryDescriptionManager(0);
}

uint64_t type metadata accessor for AccessoryDescriptionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10026D030;
  if (!qword_10026D030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDescriptionManager);
  return result;
}

uint64_t sub_1000D9F30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1001DEFC8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000D9FC0(uint64_t a1)
{
  return sub_1000D9C7C(a1);
}

uint64_t sub_1000D9FCC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10009061C(&qword_10026D1A0);
  return sub_1000D9D78(a1, a2, a3);
}

uint64_t sub_1000DA024(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA512(0);
  v13 = sub_100090E1C(&qword_10026D1A8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512, (uint64_t)&protocol conformance descriptor for SHA512);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

unint64_t sub_1000DA0E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026D1C0;
  if (!qword_10026D1C0)
  {
    v1 = sub_100090F6C(&qword_10026D1B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10026D1C0);
  }
  return result;
}

void sub_1000DA134(uint64_t a1)
{
  uint64_t v1;

  sub_1000D69DC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_1000DA140(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026EA60;
  if (!qword_10026EA60)
  {
    v3 = objc_opt_self(HAPCharacteristic, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026EA60);
  }
  return result;
}

uint64_t sub_1000DA180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009061C(&qword_10026D1A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000DA1E4(uint64_t a1, uint64_t a2)
{
  sub_10009061C(&qword_10026D1A0);
  return sub_1000D6BA0(a1, a2);
}

uint64_t sub_1000DA234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DA244(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DA24C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026D1C8);
  sub_10008EA50(v0, (uint64_t)qword_10026D1C8);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6E6163732E7462, 0xE700000000000000);
}

uint64_t sub_1000DA2C0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint8_t *v56;
  char *v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63[3];
  char v64[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v55 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v55 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v55 - v15;
  v61 = v1 + 2;
  swift_beginAccess(v1 + 2, v64, 0, 0);
  v17 = v1[2];
  swift_bridgeObjectRetain(v17);
  v18 = sub_1000EF074(a1, v17);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  }
  else
  {
    v19 = v2[3];
    v60 = v11;
    if (v19)
    {
      if (qword_10026BB50 != -1)
        swift_once(&qword_10026BB50, sub_1000DA24C);
      v20 = type metadata accessor for Logger(0);
      sub_10008EA50(v20, (uint64_t)qword_10026D1C8);
      v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v22 = v21(v14, a1, v4);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(12, -1);
        v59 = a1;
        v26 = (uint8_t *)v25;
        v27 = swift_slowAlloc(32, -1);
        v58 = v21;
        v28 = v27;
        v63[0] = v27;
        v57 = v8;
        *(_DWORD *)v26 = 136315138;
        v56 = v26 + 4;
        v29 = UUID.uuidString.getter(v27);
        v31 = v30;
        v62 = sub_1000906BC(v29, v30, v63);
        v8 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v56, v26 + 12);
        swift_bridgeObjectRelease(v31);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Restarting RSSI scan, targeting accessory %s", v26, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        v32 = v28;
        v21 = v58;
        swift_slowDealloc(v32, -1, -1);
        v33 = v26;
        a1 = v59;
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
      }

      v11 = v60;
      v46 = v2[3];
      if (v46)
      {
        swift_retain(v2[3]);
        sub_1000ED3F4();
        swift_release(v46);
      }
    }
    else
    {
      if (qword_10026BB50 != -1)
        swift_once(&qword_10026BB50, sub_1000DA24C);
      v34 = type metadata accessor for Logger(0);
      sub_10008EA50(v34, (uint64_t)qword_10026D1C8);
      v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v36 = v35(v16, a1, v4);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      v39 = os_log_type_enabled(v37, v38);
      v58 = v35;
      v59 = a1;
      if (v39)
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        v57 = (char *)v41;
        v63[0] = v41;
        *(_DWORD *)v40 = 136315138;
        v56 = v40 + 4;
        v42 = UUID.uuidString.getter(v41);
        v44 = v43;
        v62 = sub_1000906BC(v42, v43, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v56, v40 + 12);
        swift_bridgeObjectRelease(v44);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Starting RSSI scan, targeting accessory %s", v40, 0xCu);
        v45 = v57;
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
      }

      if (qword_10026BC20 != -1)
        swift_once(&qword_10026BC20, sub_1001A3078);
      v47 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
      if (v47)
      {
        swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
        sub_1000DAD94(7);
        swift_release(v47);
      }
      v48 = v2[4];
      v49 = v2[5];
      v50 = type metadata accessor for Transaction(0);
      v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0;
      *(_QWORD *)(v51 + 16) = 0;
      swift_unknownObjectWeakInit(v51 + 40, 0);
      *(_QWORD *)(v51 + 80) = 0;
      *(_BYTE *)(v51 + 88) = 1;
      swift_unknownObjectRetain(v48);
      Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
      *(_QWORD *)(v51 + 64) = 0xD000000000000025;
      *(_QWORD *)(v51 + 72) = 0x80000001001FEAA0;
      *(_QWORD *)(v51 + 48) = v49;
      *(_QWORD *)(v51 + 56) = 0x403E000000000000;
      swift_unknownObjectWeakAssign(v51 + 40, v48);
      swift_unknownObjectRelease(v48);
      v52 = v2[3];
      v2[3] = v51;
      swift_release(v52);
      v53 = v2[3];
      if (v53)
      {
        swift_retain(v2[3]);
        sub_1000ECBEC();
        swift_release(v53);
      }
      a1 = v59;
      v11 = v60;
      v21 = v58;
    }
    v21(v8, a1, v4);
  }
  swift_beginAccess(v61, v63, 33, 0);
  sub_10016F488((uint64_t)v11, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  return swift_endAccess(v63);
}

void sub_1000DA8B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24[3];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + 16;
  swift_beginAccess(v1 + 16, v24, 33, 0);
  sub_100170C1C(a1, (uint64_t)v9);
  sub_10009B2C0((uint64_t)v9, &qword_10026EA20);
  swift_endAccess(v24);
  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v11 = type metadata accessor for Logger(0);
  sub_10008EA50(v11, (uint64_t)qword_10026D1C8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v22[1] = v1;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22[0] = v1 + 16;
    v17 = v16;
    v24[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v18 = UUID.uuidString.getter(v16);
    v20 = v19;
    v23 = sub_1000906BC(v18, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalidating RSSI target %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    v10 = v22[0];
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
    sub_1000DAB38();
}

void sub_1000DAB38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = v0;
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10008EA50(v2, (uint64_t)qword_10026D1C8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping RSSI scan", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v7 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
    if (v7)
    {
      swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
      sub_1000DAD94(4);
      swift_release(v7);
    }
    v8 = *(_QWORD *)(v1 + 24);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v1 + 24));
      sub_1000ED080();
      swift_release(v8);
      v9 = *(_QWORD *)(v1 + 24);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(v1 + 24) = 0;
    swift_release(v9);
  }
}

uint64_t sub_1000DACA8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RSSITransaction(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd15RSSITransaction, a2);
}

uint64_t sub_1000DACFC()
{
  uint64_t v0;

  sub_1000DC424();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  sub_10009B2C0(v0 + 80, &qword_10026BC38);
  return v0;
}

uint64_t sub_1000DAD54()
{
  uint64_t v0;

  sub_1000DACFC();
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for BTScanEngine(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd12BTScanEngine, a2);
}

void sub_1000DAD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  id v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _DWORD *v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  id *v46;
  uint64_t v47;
  const char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t (*v58)(_BYTE *, uint64_t);
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _QWORD *v65;
  _BYTE v66[24];

  v45 = a1;
  v1 = type metadata accessor for Data.Iterator(0);
  v57 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v2 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v2);
  v56 = &v44[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v55 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v60 = &v44[-v8];
  __chkstk_darwin(v7);
  v54 = &v44[-v9];
  if (qword_10026BC00 != -1)
    goto LABEL_10;
  while (1)
  {
    v10 = qword_100275638;
    v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v12 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v12);
    os_unfair_lock_lock(v12 + 4);
    swift_release(v12);
    v13 = (uint64_t *)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v66, 0, 0);
    v14 = *v13;
    v15 = *(os_unfair_lock_s **)(v10 + v11);
    swift_bridgeObjectRetain(v14);
    swift_retain(v15);
    os_unfair_lock_unlock(v15 + 4);
    swift_release(v15);
    v65 = _swiftEmptyArrayStorage;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v37 = v14;
      else
        v37 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v16 = _CocoaArrayWrapper.endIndex.getter(v37);
      swift_bridgeObjectRelease(v14);
      if (!v16)
      {
LABEL_15:
        swift_bridgeObjectRelease(v14);
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
          || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
          _CocoaArrayWrapper.endIndex.getter(v43);
          swift_release(_swiftEmptyArrayStorage);
        }
        swift_release(_swiftEmptyArrayStorage);
        if (qword_10026BB50 != -1)
          swift_once(&qword_10026BB50, sub_1000DA24C);
        v38 = type metadata accessor for Logger(0);
        v39 = sub_10008EA50(v38, (uint64_t)qword_10026D1C8);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (_DWORD *)swift_slowAlloc(22, -1);
          v64 = swift_slowAlloc(64, -1);
          *v42 = 136315394;
          __asm { BR              X10 }
        }

        __asm { BR              X10 }
      }
    }
    else
    {
      v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
        goto LABEL_15;
    }
    v53 = v14 & 0xC000000000000001;
    v47 = v14 & 0xFFFFFFFFFFFFFF8;
    v46 = (id *)(v14 + 32);
    v49 = xmmword_1001DEEC0;
    v48 = "v16@?0@\"CBDevice\"8";
    v63 = xmmword_1001DE690;
    v52 = v4;
    v51 = v14;
    v50 = v16;
    if ((v14 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)(v47 + 16))
    {
      v17 = *v46;
LABEL_8:
      v59 = 1;
      v18 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v17);
      v19 = v54;
      DockCoreInfo.identifier.getter(v18);

      v20 = sub_10009061C(&qword_10026BF40);
      v21 = swift_allocObject(v20, 38, 7);
      *(_OWORD *)(v21 + 16) = v49;
      v22 = UUID.uuid.getter(v21);
      *(_BYTE *)(v21 + 32) = v23;
      v24 = UUID.uuid.getter(v22);
      *(_BYTE *)(v21 + 33) = v25;
      v26 = UUID.uuid.getter(v24);
      *(_BYTE *)(v21 + 34) = v27;
      v28 = UUID.uuid.getter(v26);
      *(_BYTE *)(v21 + 35) = v29;
      v30 = UUID.uuid.getter(v28);
      *(_BYTE *)(v21 + 36) = v31;
      UUID.uuid.getter(v30);
      *(_BYTE *)(v21 + 37) = v32;
      sub_1000EAC28(v21);
      v34 = v33;
      swift_bridgeObjectRelease(v21);
      v58 = *(uint64_t (**)(_BYTE *, uint64_t))(v61 + 8);
      v35 = v58(v19, v4);
      v36 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v35);
      DockCoreInfo.identifier.getter(v36);

      v62 = v34;
      __asm { BR              X9 }
    }
    __break(1u);
LABEL_10:
    swift_once(&qword_10026BC00, sub_100158DF8);
  }
  v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
  goto LABEL_8;
}

void sub_1000DB7E4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void **aBlock;
  uint64_t v35;
  void (*v36)(uint64_t, void *);
  void *v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[24];

  v2 = v1;
  if (*(_QWORD *)(v1 + 64))
    sub_1000DC424();
  if (a1)
  {
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10008EA50(v4, (uint64_t)qword_10026D1C8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting Bluetooth discovery...", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v9 = qword_1002757B0;
    v10 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
    v11 = *(os_unfair_lock_s **)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
    swift_retain(v11);
    os_unfair_lock_lock(v11 + 4);
    swift_release(v11);
    v12 = (uint64_t *)(v9 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
    swift_beginAccess(v9 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v40, 1, 0);
    v13 = *v12;
    *v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v13);
    v14 = *(os_unfair_lock_s **)(v9 + v10);
    swift_retain(v14);
    os_unfair_lock_unlock(v14 + 4);
    swift_release(v14);
    v15 = objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init");
    v16 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v15;

    v17 = *(void **)(v2 + 64);
    if (v17)
    {
      objc_msgSend(v17, "setBleRSSIThresholdHint:", 4294967226);
      v18 = *(void **)(v2 + 64);
      if (v18)
      {
        v19 = 1074790400;
        if (a1 == 4)
          v19 = 1107296256;
        if (a1 == 3)
          v20 = 0x240000000;
        else
          v20 = v19;
        objc_msgSend(v18, "setDiscoveryFlags:", v20);
        v21 = *(void **)(v2 + 64);
        if (v21)
        {
          objc_msgSend(v21, "setDispatchQueue:", *(_QWORD *)(v2 + 32));
          v22 = *(void **)(v2 + 64);
          if (v22)
          {
            objc_msgSend(v22, "addDiscoveryType:", 12);
            v23 = *(void **)(v2 + 64);
            if (v23)
            {
              v38 = sub_1000DF9D0;
              v39 = v2;
              aBlock = _NSConcreteStackBlock;
              v35 = 1107296256;
              v36 = sub_1000DBE34;
              v37 = &unk_10023AA98;
              v24 = _Block_copy(&aBlock);
              v25 = v39;
              swift_retain(v2);
              v26 = v23;
              swift_release(v25);
              objc_msgSend(v26, "setDeviceFoundHandler:", v24);
              _Block_release(v24);

              v27 = *(void **)(v2 + 64);
              if (v27)
              {
                v38 = sub_1000DBE84;
                v39 = 0;
                aBlock = _NSConcreteStackBlock;
                v35 = 1107296256;
                v36 = sub_1000DBE34;
                v37 = &unk_10023AAC0;
                v28 = _Block_copy(&aBlock);
                v29 = v27;
                objc_msgSend(v29, "setDeviceLostHandler:", v28);
                _Block_release(v28);

                v30 = *(void **)(v2 + 64);
                if (v30)
                {
                  v38 = sub_1000DF9D8;
                  v39 = v2;
                  aBlock = _NSConcreteStackBlock;
                  v35 = 1107296256;
                  v36 = sub_1001873D4;
                  v37 = &unk_10023AAE8;
                  v31 = _Block_copy(&aBlock);
                  v32 = v39;
                  swift_retain(v2);
                  v33 = v30;
                  swift_release(v32);
                  objc_msgSend(v33, "activateWithCompletion:", v31);
                  _Block_release(v31);

                }
                *(_BYTE *)(v2 + 73) = a1;
                return;
              }
LABEL_30:
              __break(1u);
              return;
            }
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
}

void sub_1000DBBB4(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v2 = type metadata accessor for Logger(0);
  sub_10008EA50(v2, (uint64_t)qword_10026D1C8);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = objc_msgSend(v3, "name");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v12 = 0xE700000000000000;
      v10 = 0x6E776F6E6B6E55;
    }
    v18 = sub_1000906BC(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v6 + 12) = 2080;
    v13 = objc_msgSend(v3, "identifier");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      v17 = 0xE100000000000000;
      v15 = 45;
    }
    v18 = sub_1000906BC(v15, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 14, v6 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found device %s [%s]", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  sub_1000DC670(v3);
}

void sub_1000DBE34(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id sub_1000DBE84(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v2 = type metadata accessor for Logger(0);
  sub_10008EA50(v2, (uint64_t)qword_10026D1C8);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v24 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = objc_msgSend(v3, "name");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v12 = 0xE700000000000000;
      v10 = 0x6E776F6E6B6E55;
    }
    v23 = sub_1000906BC(v10, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v6 + 12) = 2080;
    v13 = objc_msgSend(v3, "identifier");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      v17 = 0xE100000000000000;
      v15 = 45;
    }
    v23 = sub_1000906BC(v15, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v6 + 14, v6 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Lost device %s [%s]", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  result = objc_msgSend(v3, "identifier");
  if (result)
  {
    v19 = result;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v22 = v21;

    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    sub_1001A3D28(v20, v22);
    return (id)swift_bridgeObjectRelease(v22);
  }
  return result;
}

void sub_1000DC160(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *oslog;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[5];

  if (a1)
  {
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v3 = type metadata accessor for Logger(0);
    sub_10008EA50(v3, (uint64_t)qword_10026D1C8);
    swift_errorRetain(a1);
    v4 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v22[0] = v7;
      *(_DWORD *)v6 = 136315138;
      swift_getErrorValue(a1, v19, v18);
      v8 = Error.localizedDescription.getter(v18[1], v18[2]);
      v10 = v9;
      v20 = sub_1000906BC(v8, v9, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Unable to activate CBDiscovery: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10008EA50(v12, (uint64_t)qword_10026D1C8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Bluetooth discovery activated!", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    *(_BYTE *)(a2 + 72) = 1;
    swift_beginAccess(a2 + 80, &v20, 0, 0);
    sub_1000DEC28(a2 + 80, (uint64_t)v22);
    sub_10009B2C0((uint64_t)v22, &qword_10026BC38);
  }
}

uint64_t sub_1000DC424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[5];
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;

  v1 = v0;
  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10008EA50(v2, (uint64_t)qword_10026D1C8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping Bluetooth discovery...", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  objc_msgSend(*(id *)(v1 + 64), "invalidate");
  v7 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;

  *(_BYTE *)(v1 + 72) = 0;
  swift_beginAccess(v1 + 80, v21, 0, 0);
  sub_1000DEC28(v1 + 80, (uint64_t)v22);
  if (v23)
  {
    sub_10009AFF4((uint64_t)v22, (uint64_t)v20);
    sub_10009B2C0((uint64_t)v22, &qword_10026BC38);
    v8 = sub_10009B038(v20, v20[3]);
    v9 = *v8;
    v10 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
    v11 = *(_QWORD *)(*v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn);
    swift_retain(v11);
    sub_1000DAB38();
    swift_release(v11);
    v12 = *(_QWORD *)(v9 + v10);
    v13 = swift_retain(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Purging all RSSI scan targets.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    swift_beginAccess(v12 + 16, &v19, 1, 0);
    v17 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 16) = &_swiftEmptySetSingleton;
    swift_release(v12);
    swift_bridgeObjectRelease(v17);
    result = sub_100090E88(v20);
  }
  else
  {
    result = sub_10009B2C0((uint64_t)v22, &qword_10026BC38);
  }
  *(_BYTE *)(v1 + 73) = 0;
  return result;
}

void sub_1000DC670(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD v39[6];
  _OWORD v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "bleAdvertisementTimestamp");
  if (v9 > 0.0)
  {
    v10 = static Date.now.getter(v8);
    v11 = Date.timeIntervalSinceReferenceDate.getter(v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    objc_msgSend(a1, "bleAdvertisementTimestamp");
    v13 = v12;
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v14 = v11 - v13;
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10008EA50(v15, (uint64_t)qword_10026D1C8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v19 = 134217984;
      *(double *)&v41 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v19 + 4, v19 + 12);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "New device is %f seconds old...", v19, 0xCu);
      swift_slowDealloc(v19, -1, -1);
    }

    if (v14 >= 1.0)
    {
      v29 = a1;
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v30, v31))
      {

        return;
      }
      v32 = swift_slowAlloc(22, -1);
      *(_DWORD *)v32 = 134218240;
      *(double *)&v41 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2048;
      objc_msgSend(v29, "bleAdvertisementTimestamp");
      *(_QWORD *)&v41 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v32 + 14, v32 + 22);

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring found device: lifetime is too old: %f (%f)", (uint8_t *)v32, 0x16u);
      v34 = v32;
    }
    else
    {
      sub_1000DEC70(a1, v39);
      v20 = sub_1000DF54C((uint64_t)v39, (uint64_t)v40);
      if (*((_QWORD *)&v40[0] + 1))
      {
        v41 = v40[0];
        v42 = v40[1];
        v43 = v40[2];
        v21 = swift_allocObject(&unk_10023AA08, 24, 7);
        *(_QWORD *)(v21 + 16) = 0;
        if (qword_10026BC20 != -1)
          swift_once(&qword_10026BC20, sub_1001A3078);
        v22 = swift_allocObject(&unk_10023AA30, 88, 7);
        *(_QWORD *)(v22 + 16) = a1;
        *(_QWORD *)(v22 + 24) = v21;
        *(_QWORD *)(v22 + 32) = v2;
        v23 = v42;
        *(_OWORD *)(v22 + 40) = v41;
        *(_OWORD *)(v22 + 56) = v23;
        *(_OWORD *)(v22 + 72) = v43;
        v24 = a1;
        swift_retain(v21);
        swift_retain(v2);
        sub_1000DF60C(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D53FC);
        sub_1001A3584((uint64_t)sub_1000DF5FC, v22);
        swift_release(v21);
        swift_release(v22);
        sub_1000DF60C(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D4AE8);
        return;
      }
      v30 = Logger.logObject.getter(v20);
      v35 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v30, v35))
      {
LABEL_22:

        return;
      }
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v35, "Unable to parse advertisement data!", v36, 2u);
      v34 = (uint64_t)v36;
    }
    swift_slowDealloc(v34, -1, -1);
    goto LABEL_22;
  }
  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10008EA50(v25, (uint64_t)qword_10026D1C8);
  v38 = Logger.logObject.getter(v26);
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v27, "Ignoring found device: advertisment timestamp is 0.", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

}

void sub_1000DCB38(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  id *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint8_t *v50;
  Swift::String v51;
  void *object;
  unint64_t v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  Swift::String v57;
  void *v58;
  unint64_t v59;
  NSString v60;
  id v61;
  id v62;
  double v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(uint64_t, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint8_t *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Class isa;
  id v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  double v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint8_t *v130;
  uint8_t *v131;
  os_log_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, char *, uint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  NSObject *v153;
  char v154[24];
  char v155[24];
  char v156[16];
  uint64_t v157;
  char v158[8];
  uint64_t v159;
  char v160[8];
  uint64_t v161;
  uint64_t v162;
  unint64_t v163[2];
  __int16 v164;
  char v165;
  uint64_t v166;
  NSObject *v167;

  v150 = a3;
  v148 = a1;
  v149 = *(_QWORD *)a6;
  v151 = *(_QWORD *)(a6 + 8);
  v8 = *(unsigned __int16 *)(a6 + 24);
  v9 = *(unsigned int *)(a6 + 16);
  v10 = *(unsigned int *)(a6 + 20);
  v11 = *(unsigned __int8 *)(a6 + 26);
  v152 = *(_QWORD *)(a6 + 32);
  v153 = *(NSObject **)(a6 + 40);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v16);
  v18 = (uint64_t (*)(uint64_t, char *, uint64_t))((char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for UUID(0);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  if (!a2)
  {
    v137 = v18;
    v135 = v26;
    v138 = (char *)&v129 - v23;
    v136 = v25;
    v144 = v24;
    v145 = v22;
    v146 = v15;
    v147 = v13;
    v140 = v11;
    v141 = v10;
    v142 = v8;
    v143 = v9;
    v30 = (id *)(a4 + 16);
    v31 = objc_msgSend(v150, "btAddressData");
    v32 = v151;
    v33 = v152;
    v34 = v153;
    if (v31)
    {
      v35 = v31;
      v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v38 = v37;

      sub_10009B27C(v36, v38);
      sub_10019FC6C(v36, v38);
      if (v40 >> 60 == 15)
      {
        sub_10009B2FC(v36, v38);
      }
      else
      {
        v41 = v39;
        v42 = v40;
        if (qword_10026BB50 != -1)
          swift_once(&qword_10026BB50, sub_1000DA24C);
        sub_10008EA50(v12, (uint64_t)qword_10026D1C8);
        sub_10009B27C(v41, v42);
        v43 = sub_10009B27C(v41, v42);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.default.getter();
        v46 = v45;
        if (os_log_type_enabled(v44, v45))
        {
          v47 = swift_slowAlloc(12, -1);
          LODWORD(v133) = v46;
          v48 = (uint8_t *)v47;
          v134 = swift_slowAlloc(32, -1);
          v161 = v134;
          v132 = v44;
          v49 = a4;
          v131 = v48;
          *(_DWORD *)v48 = 136315138;
          v50 = v48 + 12;
          v130 = v48 + 4;
          sub_10011CAC4(v41, v42);
          object = v51._object;
          v162 = 0x206D6F646E6152;
          v163[0] = 0xE700000000000000;
          String.append(_:)(v51);
          swift_bridgeObjectRelease(object);
          v53 = v163[0];
          v162 = sub_1000906BC(v162, v163[0], &v161);
          v54 = v50;
          a4 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v130, v54);
          swift_bridgeObjectRelease(v53);
          sub_10009E3A0(v41, v42);
          sub_10009E3A0(v41, v42);
          v44 = v132;
          v55 = v131;
          _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v133, "Trying to retrieve peripheral with address: %s", v131, 0xCu);
          v56 = v134;
          swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);
        }
        else
        {
          sub_10009E3A0(v41, v42);
          sub_10009E3A0(v41, v42);
        }

        sub_10011CAC4(v41, v42);
        v58 = v57._object;
        v162 = 0x206D6F646E6152;
        v163[0] = 0xE700000000000000;
        String.append(_:)(v57);
        swift_bridgeObjectRelease(v58);
        v59 = v163[0];
        v60 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v59);
        v61 = objc_msgSend(v148, "retrievePeripheralWithAddress:", v60);
        sub_10009B2FC(v36, v38);
        sub_10009E3A0(v41, v42);

        swift_beginAccess(v30, v154, 1, 0);
        v62 = *v30;
        *v30 = v61;

      }
      v32 = v151;
      v33 = v152;
      v34 = v153;
    }
    *(_QWORD *)&v63 = swift_beginAccess(v30, &v161, 0, 0).n128_u64[0];
    if (!*v30)
    {
      v64 = objc_msgSend(v150, "identifier", v63);
      v139 = v12;
      if (v64)
      {
        v65 = v64;
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v68 = v67;

      }
      else
      {
        v66 = 0;
        v68 = 0xE000000000000000;
      }
      v69 = (uint64_t)v137;
      UUID.init(uuidString:)(v66, v68);
      swift_bridgeObjectRelease(v68);
      v70 = v144;
      v71 = v145;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v69, 1, v145) == 1)
      {
        sub_10009B2C0(v69, &qword_10026EA20);
        v34 = v153;
        v12 = v139;
      }
      else
      {
        v134 = a4;
        v72 = v138;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v138, v69, v71);
        if (qword_10026BB50 != -1)
          swift_once(&qword_10026BB50, sub_1000DA24C);
        sub_10008EA50(v139, (uint64_t)qword_10026D1C8);
        v73 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 16);
        v74 = v135;
        v75 = v73(v135, v72, v71);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v76, v77))
        {
          v78 = swift_slowAlloc(12, -1);
          v137 = v73;
          v79 = (uint8_t *)v78;
          v80 = swift_slowAlloc(32, -1);
          v162 = v80;
          *(_DWORD *)v79 = 136315138;
          v133 = v79 + 4;
          v81 = UUID.uuidString.getter(v80);
          v83 = v82;
          v159 = sub_1000906BC(v81, v82, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v160, v133, v79 + 12);
          swift_bridgeObjectRelease(v83);
          v84 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
          v84(v74, v71);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Trying to retrieve peripheral with uuid: %s", v79, 0xCu);
          swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
          v85 = v80;
          v32 = v151;
          swift_slowDealloc(v85, -1, -1);
          v86 = v79;
          v73 = v137;
          swift_slowDealloc(v86, -1, -1);
        }
        else
        {
          v84 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
          v84(v74, v71);
        }

        v87 = v148;
        v88 = sub_10009061C(&qword_10026D5B0);
        v89 = *(unsigned __int8 *)(v70 + 80);
        v90 = (v89 + 32) & ~v89;
        v91 = swift_allocObject(v88, v90 + *(_QWORD *)(v70 + 72), v89 | 7);
        *(_OWORD *)(v91 + 16) = xmmword_1001DE690;
        v73(v91 + v90, v138, v71);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        v93 = objc_msgSend(v87, "retrievePeripheralsWithIdentifiers:", isa);

        v95 = sub_1000DF994(0, v94);
        v96 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v93, v95);

        v33 = v152;
        if ((unint64_t)v96 >> 62)
        {
          if (v96 < 0)
            v128 = v96;
          else
            v128 = v96 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v96);
          v97 = _CocoaArrayWrapper.endIndex.getter(v128);
          swift_bridgeObjectRelease(v96);
        }
        else
        {
          v97 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v34 = v153;
        v12 = v139;
        a4 = v134;
        if (v97)
        {
          if ((v96 & 0xC000000000000001) != 0)
          {
            v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v96);
          }
          else
          {
            if (!*(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_56;
            }
            v98 = *(id *)(v96 + 32);
          }
          v97 = (uint64_t)v98;
        }
        swift_bridgeObjectRelease(v96);
        v84((uint64_t)v138, v145);
        swift_beginAccess(v30, v155, 1, 0);
        v99 = *v30;
        *v30 = (id)v97;

      }
    }
    swift_beginAccess(v30, &v159, 0, 0);
    if (!*v30)
    {
      if (qword_10026BB50 != -1)
        swift_once(&qword_10026BB50, sub_1000DA24C);
      v122 = sub_10008EA50(v12, (uint64_t)qword_10026D1C8);
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v125 = 0;
        _os_log_impl((void *)&_mh_execute_header, v123, v124, "Unable to retrieve peripheral", v125, 2u);
        swift_slowDealloc(v125, -1, -1);
      }
      goto LABEL_49;
    }
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v100 = sub_10008EA50(v12, (uint64_t)qword_10026D1C8);
    v101 = v147;
    v102 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v146, v100, v12);
    v103 = swift_retain_n(a4, 2);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v134 = a4;
      v139 = v12;
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = swift_slowAlloc(32, -1);
      v162 = v107;
      *(_DWORD *)v106 = 136315138;
      *(_QWORD *)&v108 = swift_beginAccess(v30, v156, 0, 0).n128_u64[0];
      if (!*v30)
      {
LABEL_57:
        swift_release(v134);
        __break(1u);
        return;
      }
      v109 = objc_msgSend(*v30, "identifier", v108);
      v110 = v136;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v112 = v145;
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v145, v111);
      v115 = v114;
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v110, v112);
      v157 = sub_1000906BC(v113, v115, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v106 + 4, v106 + 12);
      swift_release_n(v134, 2);
      swift_bridgeObjectRelease(v115);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Got peripheral with UUID %s", v106, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);

      (*(void (**)(char *, uint64_t))(v147 + 8))(v146, v139);
      v116 = v149;
      v32 = v151;
      v33 = v152;
      v117 = v153;
      v118 = v143;
      v119 = v142;
      v120 = v141;
      v121 = v140;
    }
    else
    {
      v126 = a4;
      v117 = v34;

      swift_release_n(v126, 2);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v12);
      v118 = v143;
      v119 = v142;
      v120 = v141;
      v121 = v140;
      v116 = v149;
    }
    swift_beginAccess(v30, &v157, 0, 0);
    v127 = *v30;
    if (*v30)
    {
      v162 = v116;
      v163[0] = v32;
      v163[1] = v118 | ((v120 | (v119 << 32)) << 32);
      v164 = (v120 | (unint64_t)(v119 << 32)) >> 32;
      v165 = v121 & 1;
      v166 = v33;
      v167 = v117;
      v123 = v127;
      sub_1000DF644(v150, v123, &v162);
LABEL_49:

      return;
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v27 = sub_10008EA50(v12, (uint64_t)qword_10026D1C8);
  v153 = Logger.logObject.getter(v27);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v153, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v153, v28, "Unable to power on BT central!", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

}

uint64_t sub_1000DD92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[5];
  _BYTE v24[24];
  _BYTE v25[24];
  uint64_t v26;

  v1 = v0;
  if (objc_msgSend(*(id *)(v0 + 40), "isScanning"))
  {
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10008EA50(v2, (uint64_t)qword_10026D1C8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping scan...", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    objc_msgSend(*(id *)(v1 + 40), "stopScan");
  }
  if (*(_BYTE *)(v1 + 73) == 5)
    *(_BYTE *)(v1 + 73) = 0;
  v7 = *(_QWORD *)(v1 + 48);
  swift_retain(v7);
  sub_1000ED080();
  swift_release(v7);
  v8 = v1 + 80;
  swift_beginAccess(v8, v24, 0, 0);
  sub_1000DEC28(v8, (uint64_t)v25);
  if (!v26)
    return sub_10009B2C0((uint64_t)v25, &qword_10026BC38);
  sub_10009AFF4((uint64_t)v25, (uint64_t)v23);
  sub_10009B2C0((uint64_t)v25, &qword_10026BC38);
  v9 = sub_10009B038(v23, v23[3]);
  v10 = *v9;
  v11 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
  v12 = *(_QWORD *)(*v9 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn);
  swift_retain(v12);
  sub_1000DAB38();
  swift_release(v12);
  v13 = *(_QWORD *)(v10 + v11);
  v14 = qword_10026BB50;
  swift_retain(v13);
  if (v14 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10008EA50(v15, (uint64_t)qword_10026D1C8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Purging all RSSI scan targets.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  swift_beginAccess(v13 + 16, &v22, 1, 0);
  v20 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 16) = &_swiftEmptySetSingleton;
  swift_release(v13);
  swift_bridgeObjectRelease(v20);
  return sub_100090E88(v23);
}

uint64_t sub_1000DDBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v2 + 32);
  v14 = (_QWORD *)swift_allocObject(&unk_10023A9B8, 40, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v3;
  aBlock[4] = sub_1000DEC04;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023A9D0;
  v15 = _Block_copy(aBlock);
  v16 = v13;
  swift_bridgeObjectRetain(a2);
  v17 = swift_retain(v3);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v20 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v25);
}

char *sub_1000DDDC8(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = a2[3];
    v10 = v5;
    v11 = v8;
    if (v9)
    {
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v9;
      v12 = *((_DWORD *)a2 + 9);
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a1 + 9) = v12;
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      a1[42] = *((_BYTE *)a2 + 42);
      v13 = (uint64_t)a2[6];
      v14 = (unint64_t)a2[7];
      swift_bridgeObjectRetain(v9);
      sub_10009B27C(v13, v14);
      *((_QWORD *)a1 + 6) = v13;
      *((_QWORD *)a1 + 7) = v14;
    }
    else
    {
      v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    }
    v16 = *(int *)(a3 + 28);
    v17 = &a1[v16];
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000DDEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    sub_10009B2FC(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1000DDF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = v6;
  v10 = v7;
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v8;
    v11 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = v11;
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(v8);
    sub_10009B27C(v12, v13);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v13;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000DE000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  v12 = (_OWORD *)(a1 + 16);
  v13 = (_OWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v14);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      v17 = *(_DWORD *)(a2 + 36);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_DWORD *)(a1 + 36) = v17;
      *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 56);
      sub_10009B27C(v18, v19);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v19;
      sub_10009B2FC(v20, v21);
    }
    else
    {
      sub_1000DE17C((_QWORD *)(a1 + 16));
      v27 = *(_OWORD *)(a2 + 32);
      v26 = *(_OWORD *)(a2 + 48);
      *v12 = *v13;
      *(_OWORD *)(a1 + 32) = v27;
      *(_OWORD *)(a1 + 48) = v26;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v22 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v22;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v23 = *(_DWORD *)(a2 + 36);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_DWORD *)(a1 + 36) = v23;
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(v22);
    sub_10009B27C(v24, v25);
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v25;
  }
  else
  {
    v28 = *v13;
    v29 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v29;
    *v12 = v28;
  }
  v30 = *(int *)(a3 + 28);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  return a1;
}

_QWORD *sub_1000DE17C(_QWORD *a1)
{
  destroy for AccessoryAdvData(a1);
  return a1;
}

_OWORD *sub_1000DE1B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000DE214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    goto LABEL_5;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    sub_1000DE17C((_QWORD *)(a1 + 16));
LABEL_5:
    v13 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease(v8);
  v10 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v10;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10009B2FC(v11, v12);
LABEL_6:
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_1000DE300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DE30C);
}

uint64_t sub_1000DE30C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1000DE388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DE394);
}

char *sub_1000DE394(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BTDiscoveredDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_10026D568;
  if (!qword_10026D568)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTDiscoveredDevice);
  return result;
}

uint64_t sub_1000DE444(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_1001DF0D0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BTScanType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BTScanType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000DE5AC + 4 * byte_1001DEFF5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000DE5E0 + 4 * byte_1001DEFF0[v4]))();
}

uint64_t sub_1000DE5E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE5E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DE5F0);
  return result;
}

uint64_t sub_1000DE5FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DE604);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000DE608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTScanType()
{
  return &type metadata for BTScanType;
}

unint64_t sub_1000DE630()
{
  unint64_t result;

  result = qword_10026D5A8;
  if (!qword_10026D5A8)
  {
    result = swift_getWitnessTable(&unk_1001DF134, &type metadata for BTScanType);
    atomic_store(result, (unint64_t *)&qword_10026D5A8);
  }
  return result;
}

uint64_t sub_1000DE674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v4 == a1 && v5 == a2;
  if (v6 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v4, v5, 0), (result & 1) != 0))
  {
    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10008EA50(v8, (uint64_t)qword_10026D1C8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Scan transaction timed out.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    result = (uint64_t)objc_msgSend(*(id *)(a3 + 40), "isScanning");
    if ((result & 1) != 0 || *(_BYTE *)(a3 + 72) == 1)
      return sub_1000DD92C();
  }
  return result;
}

uint64_t sub_1000DE790(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t empty;
  xpc_object_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v17;
  int v18;
  uint64_t v19;

  if (qword_10026BB50 != -1)
    swift_once(&qword_10026BB50, sub_1000DA24C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10008EA50(v4, (uint64_t)qword_10026D1C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(14, -1);
    *(_DWORD *)v8 = 67109376;
    v18 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 1024;
    v17 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 10, v8 + 14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting XPC launch events for Bluetooth (enabled = %{BOOL}d; screenOff = %{BOOL}d)",
      (uint8_t *)v8,
      0xEu);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = xpc_dictionary_create(0, 0, 0);
  empty = xpc_array_create_empty();
  v11 = xpc_array_create_empty();
  if ((a1 & 1) != 0)
  {
    v12 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(empty, v12, "DockKitAccessory");
    v13 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v11, v13, "BLEAdvertisementData");
    v14 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v11, v14, "PassiveRSSI");
    if ((a2 & 1) != 0)
    {
      v15 = XPC_ARRAY_APPEND.getter();
      xpc_array_set_string(v11, v15, "ScreenOff");
    }
    xpc_dictionary_set_value(v9, "discoveryFlags", v11);
    xpc_dictionary_set_value(v9, "discoveryTypes", empty);
    xpc_dictionary_set_int64(v9, "bleRSSIThresholdHint", -70);
  }
  xpc_set_event("com.apple.bluetooth.discovery", "DockKitAccessory", v9);
  swift_unknownObjectRelease(v9);
  swift_unknownObjectRelease(empty);
  return swift_unknownObjectRelease(v11);
}

uint64_t sub_1000DE9BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  v4 = v3;
  *(_OWORD *)(v3 + 80) = 0u;
  v8 = v3 + 80;
  *(_QWORD *)(v8 - 64) = 1851876211;
  *(_QWORD *)(v8 - 56) = 0xE400000000000000;
  *(_QWORD *)(v8 - 24) = 0;
  *(_QWORD *)(v8 - 16) = 0;
  *(_WORD *)(v8 - 8) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 - 48) = a2;
  *(_QWORD *)(v8 - 40) = a1;
  swift_beginAccess(v8, v18, 33, 0);
  v9 = a1;
  v10 = a2;
  sub_1000DEB90(a3, v8);
  swift_endAccess(v18);
  v12 = *(_QWORD *)(v8 - 64);
  v11 = *(_QWORD *)(v8 - 56);
  v13 = type metadata accessor for Transaction(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  swift_unknownObjectWeakInit(v14 + 40, 0);
  *(_QWORD *)(v14 + 80) = 0;
  *(_BYTE *)(v14 + 88) = 1;
  swift_bridgeObjectRetain(v11);
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v14 + 64) = v12;
  *(_QWORD *)(v14 + 72) = v11;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = 0x403E000000000000;
  swift_unknownObjectWeakAssign(v14 + 40, 0);
  *(_QWORD *)(v8 - 32) = v14;
  if (qword_10026BC00 != -1)
  {
    swift_once(&qword_10026BC00, sub_100158DF8);
    v14 = *(_QWORD *)(v4 + 48);
  }
  v15 = swift_retain(v14);
  sub_10015AF3C(v15);
  swift_release(v14);
  sub_10009B2C0(a3, &qword_10026BC38);
  v16 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v16 + 48) = &off_10023A990;
  swift_unknownObjectWeakAssign(v16 + 40, v4);
  return v4;
}

uint64_t sub_1000DEB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BC38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DEBD8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000DEC04()
{
  uint64_t *v0;

  return sub_1000DE674(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000DEC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DEC20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DEC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BC38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000DEC70(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[6];

  v4 = objc_msgSend(a1, "dockKitAccessoryPayloadData");
  if (v4)
  {
    v5 = v4;
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    if (qword_10026BB50 != -1)
      swift_once(&qword_10026BB50, sub_1000DA24C);
    v9 = type metadata accessor for Logger(0);
    sub_10008EA50(v9, (uint64_t)qword_10026D1C8);
    sub_10009B27C(v6, v8);
    v10 = sub_10009B27C(v6, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v29[0] = v14;
      *(_DWORD *)v13 = 136315138;
      sub_100117E20(v6, v8);
      v16 = v15;
      v27 = sub_1000906BC(v17, v15, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v16);
      sub_10009B2FC(v6, v8);
      sub_10009B2FC(v6, v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "New device with AdvData: 0x%s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_10009B2FC(v6, v8);
      sub_10009B2FC(v6, v8);
    }

    sub_100186EF0(v6, v8);
    v19 = (void *)v29[0];
    v22 = v29[1];
    v23 = v29[2];
    v24 = v29[3];
    v25 = v29[4];
    v26 = v29[5];
  }
  else
  {
    v18 = objc_msgSend(a1, "bleAdvertisementData");
    v19 = v18;
    if (v18)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      __asm { BR              X10 }
    }
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  *a2 = v19;
  a2[1] = v22;
  a2[2] = v23;
  a2[3] = v24;
  a2[4] = v25;
  a2[5] = v26;
}

uint64_t sub_1000DF54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026CF08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DF594()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DF5B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  sub_10009B2FC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_1000DF5FC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DCB38(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + 40);
}

_QWORD *sub_1000DF60C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

id sub_1000DF644(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id result;
  id v16;
  id v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BTDiscoveredDevice(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = objc_msgSend(a1, "identifier");
  if (result)
  {

    *v14 = a1;
    v14[1] = a2;
    sub_1000DF54C((uint64_t)a3, (uint64_t)(v14 + 2));
    v16 = a1;
    v17 = a2;
    v18 = sub_1000DF60C(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D53FC);
    static Date.now.getter(v18);
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    result = objc_msgSend(v16, "identifier");
    if (result)
    {
      v19 = result;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v22 = v21;

      sub_1001A3BEC(v20, v22, (uint64_t)v14);
      swift_bridgeObjectRelease(v22);
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v23 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
      v24 = *(void **)&v23[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      v25 = swift_allocObject(&unk_10023AA58, 24, 7);
      *(_QWORD *)(v25 + 16) = v23;
      aBlock[4] = sub_1000D4D84;
      v37 = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10012357C;
      aBlock[3] = &unk_10023AA70;
      v26 = _Block_copy(aBlock);
      v27 = v23;
      v28 = v24;
      static DispatchQoS.unspecified.getter(v28);
      v35 = _swiftEmptyArrayStorage;
      v29 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v30 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v31 = sub_100090F20();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v30, v31, v6, v29);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v26);
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v33);
      sub_1000D53C0((uint64_t)v14);
      return (id)swift_release(v37);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_1000DF994(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026EA50;
  if (!qword_10026EA50)
  {
    v3 = objc_opt_self(CBPeripheral, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026EA50);
  }
  return result;
}

void sub_1000DF9D0(void *a1)
{
  sub_1000DBBB4(a1);
}

void sub_1000DF9D8(uint64_t a1)
{
  uint64_t v1;

  sub_1000DC160(a1, v1);
}

uint64_t sub_1000DFA04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000DFA74, 0, 0);
}

uint64_t sub_1000DFA74()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + 32);
  if (v1)
  {
    v2 = objc_msgSend(v1, "primaryAccessory");
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 16);

      if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
      {
        v14 = (_QWORD *)swift_task_alloc(dword_10026D5C4);
        *(_QWORD *)(v0 + 56) = v14;
        *v14 = v0;
        v14[1] = sub_1000DFCD4;
        v14[2] = *(_QWORD *)(v0 + 16);
        return swift_task_switch(sub_1000DFE30, 0, 0);
      }
      v4 = *(_QWORD *)(v0 + 16);
      v5 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
      if (*(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager))
      {
        v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 40), v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, *(_QWORD *)(v0 + 24));
        v7 = Logger.logObject.getter(v6);
        v8 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Diagnostics manager is already present", v9, 2u);
          swift_slowDealloc(v9, -1, -1);
        }
        v11 = *(_QWORD *)(v0 + 32);
        v10 = *(_QWORD *)(v0 + 40);
        v12 = *(_QWORD *)(v0 + 24);

        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
        v13 = 0;
        goto LABEL_11;
      }
      v16 = *(void **)(v4 + 40);
      v17 = type metadata accessor for AccessoryDiagnosticsManager(0);
      v18 = (_QWORD *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      swift_weakInit(v18 + 2, 0);
      v18[4] = 0;
      v18[5] = 0;
      swift_retain(v4);
      v19 = v16;
      Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000012, 0x80000001001FEE90);
      swift_weakAssign(v18 + 2, v4);
      swift_release(v4);
      v18[3] = v19;
      v20 = *(_QWORD *)(v4 + v5);
      *(_QWORD *)(v4 + v5) = v18;
      swift_release(v20);
    }
  }
  v13 = 1;
LABEL_11:
  v21 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_1000DFCD4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_1000DFD28, 0, 0);
}

uint64_t sub_1000DFD28()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, *(_QWORD *)(v0 + 24));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Not creating Diagnostics manager for accessory without a data stream controlle", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000DFE18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000DFE30, 0, 0);
}

uint64_t sub_1000DFE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
  *(_QWORD *)(v0 + 24) = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 32) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v0 + 40) = v4;
    v5 = swift_retain(v3);
    if (v4)
    {
      v6 = dword_10026EAFC;
      swift_retain(v4);
      v7 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 48) = v7;
      *v7 = v0;
      v7[1] = sub_1000DFEE8;
      return sub_100141F3C();
    }
    *(_QWORD *)(v5 + 32) = 0;
    swift_release(v5);
    v3 = *(_QWORD *)(v1 + v2);
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
  }
  *(_QWORD *)(v1 + v2) = 0;
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DFEE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_release(v1);
  return swift_task_switch(sub_1000DFF44, 0, 0);
}

uint64_t sub_1000DFF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  swift_release(v3);
  swift_release(v2);
  v5 = *(_QWORD *)(v4 + v1);
  *(_QWORD *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(v0 + 24)) = 0;
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DFFA0(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[4];
  char v38[24];

  v35 = a1;
  v2 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v1;
  v5 = &v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions];
  swift_beginAccess(v5, v38, 1, 0);
  v6 = *(_QWORD *)v5;
  v33 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v33)
  {
    v30 = v5;
    swift_bridgeObjectRetain(v6);
    v7 = 0;
    v31 = v6;
    v32 = (char *)&type metadata for () + 8;
    v9 = v34;
    v8 = v35;
    while (1)
    {
      v12 = swift_allocObject(&unk_10023AB60, 32, 7);
      v36 = *(_OWORD *)(v6 + 16 * v7 + 32);
      *(_OWORD *)(v12 + 16) = v36;
      v13 = type metadata accessor for TaskPriority(0);
      v14 = *(_QWORD *)(v13 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, 1, 1, v13);
      v15 = (_QWORD *)swift_allocObject(&unk_10023AB88, 64, 7);
      v15[2] = 0;
      v16 = v15 + 2;
      v15[3] = 0;
      v15[4] = &unk_10026D648;
      v15[5] = v12;
      v15[6] = v9;
      v15[7] = v8;
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13);
      swift_retain(*((_QWORD *)&v36 + 1));
      swift_retain(v12);
      v18 = v9;
      v19 = swift_errorRetain(v8);
      if (v17 == 1)
      {
        sub_1000E10E0((uint64_t)v4);
        v20 = 0;
        v21 = *v16;
        if (!*v16)
          goto LABEL_9;
      }
      else
      {
        v27 = TaskPriority.rawValue.getter(v19);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v13);
        v20 = v27;
        v21 = *v16;
        if (!*v16)
        {
LABEL_9:
          v24 = 0;
          v26 = 0;
          goto LABEL_10;
        }
      }
      v22 = v15[3];
      ObjectType = swift_getObjectType(v21);
      swift_unknownObjectRetain(v21);
      v24 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v22);
      v26 = v25;
      swift_unknownObjectRelease(v21);
LABEL_10:
      v28 = swift_allocObject(&unk_10023ABB0, 32, 7);
      *(_QWORD *)(v28 + 16) = &unk_10026D650;
      *(_QWORD *)(v28 + 24) = v15;
      if (v26 | v24)
      {
        v37[0] = 0;
        v37[1] = 0;
        v10 = v37;
        v37[2] = v24;
        v37[3] = v26;
      }
      else
      {
        v10 = 0;
      }
      v6 = v31;
      ++v7;
      v11 = swift_task_create(v20 | 0x1C00, v10, v32, &unk_10026D658, v28);
      swift_release(v12);
      swift_release(v11);
      if (v33 == v7)
      {
        swift_bridgeObjectRelease(v6);
        v5 = v30;
        v6 = *(_QWORD *)v30;
        break;
      }
    }
  }
  *(_QWORD *)v5 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v6);
}

id sub_1000E0258(id result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  id v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[24];

  if (a2)
    return result;
  v3 = result;
  result = objc_msgSend(result, "services");
  if (!result)
    return result;
  v4 = result;
  v5 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext, v25, 1, 0);
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return (id)swift_bridgeObjectRelease(v6);
  *(_QWORD *)(v7 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  result = (id)swift_bridgeObjectRelease(v8);
  if (!*(_QWORD *)(v7 + 8))
    goto LABEL_25;
  if ((*(_BYTE *)(v7 + 80) & 1) != 0)
  {
    if (*(_QWORD *)v7 - 1 <= 1)
    {
      if ((unint64_t)v6 >> 62)
      {
        if (v6 < 0)
          v24 = v6;
        else
          v24 = v6 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v6);
        v20 = _CocoaArrayWrapper.endIndex.getter(v24);
        result = (id)swift_bridgeObjectRelease(v6);
        if (v20)
          goto LABEL_12;
      }
      else
      {
        v20 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v20)
        {
LABEL_12:
          if (v20 >= 1)
          {
            for (i = 0; i != v20; ++i)
            {
              if ((v6 & 0xC000000000000001) != 0)
                v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
              else
                v22 = *(id *)(v6 + 8 * i + 32);
              v23 = v22;
              objc_msgSend(v3, "discoverCharacteristics:forService:", 0, v22);

            }
            return (id)swift_bridgeObjectRelease(v6);
          }
          __break(1u);
LABEL_25:
          __break(1u);
          return result;
        }
      }
    }
    return (id)swift_bridgeObjectRelease(v6);
  }
  swift_bridgeObjectRelease(v6);
  v9 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v9)
    objc_msgSend(v9, "didFinishDiscovery:", 0);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(v7 + 16);
  v13 = *(_QWORD *)(v7 + 24);
  v14 = *(_QWORD *)(v7 + 32);
  v15 = *(_QWORD *)(v7 + 40);
  v16 = *(_QWORD *)(v7 + 48);
  v17 = *(_QWORD *)(v7 + 56);
  v18 = *(_QWORD *)(v7 + 64);
  v19 = *(_QWORD *)(v7 + 72);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_BYTE *)(v7 + 80) = 0;
  return (id)sub_1000E1AC8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
}

void sub_1000E04BC(void *a1, id a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char **v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88[4];
  uint64_t v89;
  _QWORD v90[9];
  char v91;

  if (a3)
    return;
  v5 = v3;
  if (qword_10026BB80 != -1)
    swift_once(&qword_10026BB80, sub_1001191BC);
  v7 = qword_1002754F0;
  v8 = objc_msgSend(a2, "UUID");
  v9 = v8;
  if (*(_QWORD *)(v7 + 16) && (v10 = sub_100145534((uint64_t)v8), (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v10);
    v13 = v12[1];
    v84 = *v12;
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v84 = 0;
    v13 = 0xE000000000000000;
  }

  v14 = a2;
  swift_bridgeObjectRetain(v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v77 = v14;
  v78 = v5;
  if (os_log_type_enabled(v16, v17))
  {
    v4 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v19 = swift_slowAlloc(32, -1);
    v88[0] = v19;
    *(_DWORD *)v4 = 138412546;
    v20 = objc_msgSend(v14, "UUID");
    v89 = (uint64_t)v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v4 + 4, v4 + 12);
    *v18 = v20;

    *(_WORD *)(v4 + 12) = 2080;
    v21 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v21 = v84 & 0xFFFFFFFFFFFFLL;
    if (v21)
    {
      v89 = v84;
      v90[0] = v13;
      swift_bridgeObjectRetain(v13);
      v22._countAndFlagsBits = 0x6369767265735B20;
      v22._object = (void *)0xEA00000000005D65;
      String.append(_:)(v22);
      v23 = v89;
      v24 = v90[0];
    }
    else
    {
      v24 = 0x80000001001FEEC0;
      v23 = 0xD000000000000012;
    }
    v89 = sub_1000906BC(v23, v24, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v4 + 14, v4 + 22);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ %s", (uint8_t *)v4, 0x16u);
    v25 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v18, 1, v25);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v13, 2);

  }
  v26 = objc_msgSend(v14, "characteristics");
  if (v26)
  {
    v27 = v26;
    v28 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if (!((unint64_t)v29 >> 62))
      goto LABEL_19;
LABEL_38:
    if (v29 < 0)
      v50 = v29;
    else
      v50 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v30 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v29);
    if (!v30)
      goto LABEL_42;
    goto LABEL_20;
  }
  v29 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_38;
LABEL_19:
  v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v30)
    goto LABEL_42;
LABEL_20:
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_52;
  }
  v31 = 0;
  v32 = v29 & 0xC000000000000001;
  v33 = &selRef_keyStore;
  v80 = v30;
  v81 = v29;
  v79 = v29 & 0xC000000000000001;
  do
  {
    if (v32)
      v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
    else
      v34 = *(id *)(v29 + 8 * v31 + 32);
    v35 = v34;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v85 = swift_slowAlloc(32, -1);
      v89 = v85;
      *(_DWORD *)v38 = 138412546;
      v40 = objc_msgSend(v35, "UUID");
      *(_QWORD *)(v38 + 4) = v40;
      *v39 = v40;

      *(_WORD *)(v38 + 12) = 2080;
      if (qword_10026BB88 != -1)
        swift_once(&qword_10026BB88, sub_100119A34);
      v41 = qword_1002754F8;
      v42 = objc_msgSend(v35, "UUID");
      v43 = v42;
      if (*(_QWORD *)(v41 + 16))
      {
        v44 = sub_100145534((uint64_t)v42);
        v45 = 0x6E776F6E6B6E755BLL;
        v46 = 0xE90000000000005DLL;
        if ((v47 & 1) != 0)
        {
          v48 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v44);
          v45 = *v48;
          v46 = v48[1];
          swift_bridgeObjectRetain(v46);
        }
      }
      else
      {
        v45 = 0x6E776F6E6B6E755BLL;
        v46 = 0xE90000000000005DLL;
      }

      *(_QWORD *)(v38 + 14) = sub_1000906BC(v45, v46, &v89);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "  %@ %s", (uint8_t *)v38, 0x16u);
      v49 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v39, 1, v49);
      swift_slowDealloc(v39, -1, -1);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v30 = v80;
      v29 = v81;
      v32 = v79;
      v33 = &selRef_keyStore;
    }
    else
    {

    }
    if ((objc_msgSend(v35, v33[189]) & 0x10) != 0)
      objc_msgSend(a1, "setNotifyValue:forCharacteristic:", 1, v35);
    ++v31;

  }
  while (v30 != v31);
LABEL_42:
  swift_bridgeObjectRelease(v29);
  v4 = v78;
  v30 = (uint64_t)sub_100119174((uint64_t)&v89);
  v52 = (uint64_t *)(v51 + 8);
  if (*(_QWORD *)(v51 + 8))
  {
    v53 = v77;
    v29 = sub_1000E1540(v52, (uint64_t)v53);

    v13 = *v52;
    if (!((unint64_t)*v52 >> 62))
    {
      v54 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v54 >= v29)
      {
LABEL_45:
        sub_100173BD0(v29, v54);
        goto LABEL_46;
      }
LABEL_56:
      __break(1u);
      return;
    }
LABEL_52:
    if (v13 < 0)
      v76 = v13;
    else
      v76 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v54 = _CocoaArrayWrapper.endIndex.getter(v76);
    swift_bridgeObjectRelease(v13);
    if (v54 >= v29)
      goto LABEL_45;
    goto LABEL_56;
  }
LABEL_46:
  ((void (*)(uint64_t *, _QWORD))v30)(&v89, 0);
  v55 = v4 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext;
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext, v88, 1, 0);
  v56 = *(_QWORD *)(v55 + 8);
  if (v56)
  {
    v86 = *(_BYTE *)(v55 + 80);
    v58 = *(_QWORD *)(v55 + 64);
    v57 = *(_QWORD *)(v55 + 72);
    v60 = *(_QWORD *)(v55 + 48);
    v59 = *(void **)(v55 + 56);
    v62 = *(_QWORD *)(v55 + 32);
    v61 = *(_QWORD *)(v55 + 40);
    v63 = *(_QWORD *)(v55 + 16);
    v64 = *(_QWORD *)(v55 + 24);
    v87 = *(_QWORD *)v55;
    LOBYTE(v89) = *(_QWORD *)v55;
    v90[0] = v56;
    v90[1] = v63;
    v90[2] = v64;
    v90[3] = v62;
    v90[4] = v61;
    v90[5] = v60;
    v90[6] = v59;
    v90[7] = v58;
    v83 = v59;
    v90[8] = v57;
    v91 = v86 & 1;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v57);
    LOBYTE(v59) = sub_100118D30();
    sub_1000E1AC8(v87, v56, v63, v64, v62, v61, v60, (uint64_t)v83, v58, v57);
    if ((v59 & 1) != 0)
    {
      v65 = *(void **)(v78 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
      if (v65)
        objc_msgSend(v65, "didFinishDiscovery:", 0);
      v66 = *(_QWORD *)v55;
      v67 = *(_QWORD *)(v55 + 8);
      v68 = *(_QWORD *)(v55 + 16);
      v69 = *(_QWORD *)(v55 + 24);
      v70 = *(_QWORD *)(v55 + 32);
      v71 = *(_QWORD *)(v55 + 40);
      v72 = *(_QWORD *)(v55 + 48);
      v73 = *(_QWORD *)(v55 + 56);
      v74 = *(_QWORD *)(v55 + 64);
      v75 = *(_QWORD *)(v55 + 72);
      *(_OWORD *)v55 = 0u;
      *(_OWORD *)(v55 + 16) = 0u;
      *(_OWORD *)(v55 + 32) = 0u;
      *(_OWORD *)(v55 + 48) = 0u;
      *(_OWORD *)(v55 + 64) = 0u;
      *(_BYTE *)(v55 + 80) = 0;
      sub_1000E1AC8(v66, v67, v68, v69, v70, v71, v72, v73, v74, v75);
    }
  }
}

void sub_1000E0DBC(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10;
  id v11;
  id v12;
  id v13;

  v10 = a3;
  v11 = a4;
  v12 = a1;
  v13 = a5;
  a6(v11, a5);

}

uint64_t sub_1000E0E8C(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v3[2] = a1;
  v3[3] = a2;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1000CAB94;
  return v6();
}

uint64_t sub_1000E0F00(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v10 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v7 + 16) = v10;
  *v10 = v7;
  v10[1] = sub_10009B7AC;
  return v12(a6, a7);
}

uint64_t sub_1000E0F70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E0F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10026D63C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10009B7AC;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10026D638 + dword_10026D638))(a1, a2, v6);
}

uint64_t sub_1000E1010()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_errorRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000E104C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = (int *)v0[4];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_10026D644);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10009B0EC;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
  v6 = (_QWORD *)swift_task_alloc(v2[1]);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_10009B7AC;
  return v8(v4, v3);
}

uint64_t sub_1000E10E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C(&qword_10026C800);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E1120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100270BE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10009B0EC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100270BE0 + dword_100270BE0))(a1, v4);
}

void *sub_1000E1190(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *result;
  char *v12;
  char *v13;
  NSObject *v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSString v30;
  Class isa;
  NSString v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral;
  result = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral];
  if (!result)
  {
    v39 = a1;
    v12 = v3;
    swift_bridgeObjectRetain_n(a2, 2);
    v13 = v12;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
    v40 = v6;
    if (v16)
    {
      v38 = v15;
      v17 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(64, -1);
      v42 = v37;
      *(_DWORD *)v17 = 136315394;
      v18 = *(void **)&v13[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (!v18)
        goto LABEL_11;
      v36 = v17 + 4;
      v19 = objc_msgSend(v18, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v21 = UUID.uuidString.getter(v20);
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v40);
      v41 = sub_1000906BC(v21, v23, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v36, v17 + 12);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      v41 = sub_1000906BC(v39, a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v38, "Creating HAP BLE Peripheral for %s with identifier %s.", (uint8_t *)v17, 0x16u);
      v24 = v37;
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);

    }
    sub_10011B948();
    v26 = *(void **)&v13[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v26)
    {
      v27 = v25;
      v28 = objc_msgSend(v26, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v29 = objc_allocWithZone((Class)HAPBLEPeripheral);
      swift_bridgeObjectRetain(a2);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a2);
      v33 = objc_msgSend(v29, "initWithName:peripheralUUID:identifier:", v30, isa, v32);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v40);
      v34 = *(void **)&v3[v10];
      *(_QWORD *)&v3[v10] = v33;

      result = *(void **)&v3[v10];
      if (!result)
        return result;
      goto LABEL_8;
    }
    __break(1u);
LABEL_11:

    result = (void *)swift_bridgeObjectRelease(a2);
    __break(1u);
    return result;
  }
LABEL_8:
  objc_msgSend(result, "setCbPeripheral:", *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]);
  return *(void **)&v3[v10];
}

uint64_t sub_1000E1540(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  id v16;
  void *v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_65;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*a1);
  if (v5)
  {
LABEL_3:
    sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
    v6 = 0;
    while (1)
    {
      v7 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4)
         : *(id *)(v4 + 8 * v6 + 32);
      v8 = v7;
      v9 = static NSObject.== infix(_:_:)(v7, a2);

      if ((v9 & 1) != 0)
        break;
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        if ((v4 & 0x8000000000000000) != 0)
          v35 = v4;
        else
          v35 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v5 = _CocoaArrayWrapper.endIndex.getter(v35);
        if (!v5)
          goto LABEL_10;
        goto LABEL_3;
      }
      ++v6;
      if (v10 == v5)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease(v4);
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      v9 = *a1;
      if (!((unint64_t)*a1 >> 62))
      {
        if (v13 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_16:
          for (i = v6 + 5; ; ++i)
          {
            v4 = i - 4;
            v15 = *a1;
            if ((*a1 & 0xC000000000000001) != 0)
            {
              v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v15);
            }
            else
            {
              if ((v4 & 0x8000000000000000) != 0)
                goto LABEL_55;
              if (v4 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_56;
              v16 = *(id *)(v15 + 8 * i);
            }
            v17 = v16;
            v18 = static NSObject.== infix(_:_:)(v16, a2);

            if ((v18 & 1) != 0)
              goto LABEL_42;
            if (v4 != v6)
              break;
LABEL_41:
            if (__OFADD__(v6++, 1))
              goto LABEL_58;
LABEL_42:
            v31 = i - 3;
            if (__OFADD__(v4, 1))
              goto LABEL_57;
            v32 = *a1;
            if ((unint64_t)*a1 >> 62)
            {
              if (v32 < 0)
                v34 = *a1;
              else
                v34 = v32 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(*a1);
              v33 = _CocoaArrayWrapper.endIndex.getter(v34);
              swift_bridgeObjectRelease(v32);
            }
            else
            {
              v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v31 == v33)
              return v6;
          }
          v19 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *a1);
            v19 = *a1;
            if ((*a1 & 0xC000000000000001) == 0)
            {
LABEL_27:
              if ((v4 & 0x8000000000000000) != 0)
                goto LABEL_61;
              if (v4 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_62;
              v21 = *(id *)(v19 + 8 * i);
              goto LABEL_30;
            }
          }
          else
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_59;
            if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_60;
            v20 = *(id *)(v19 + 8 * v6 + 32);
            if ((v19 & 0xC000000000000001) == 0)
              goto LABEL_27;
          }
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v19);
          v19 = *a1;
LABEL_30:
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v19);
          *a1 = v19;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
          {
            v19 = sub_100171424(v19);
            *a1 = v19;
          }
          v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v21;

          specialized Array._endMutation()(v24);
          v25 = *a1;
          v26 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
          *a1 = v25;
          if (!v26 || v25 < 0 || (v25 & 0x4000000000000000) != 0)
          {
            v25 = sub_100171424(v25);
            *a1 = v25;
          }
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_63;
          v27 = v25 & 0xFFFFFFFFFFFFFF8;
          if (v4 >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_64;
          v28 = *(void **)(v27 + 8 * i);
          *(_QWORD *)(v27 + 8 * i) = v20;

          specialized Array._endMutation()(v29);
          goto LABEL_41;
        }
        return v6;
      }
    }
    if (v9 < 0)
      v38 = v9;
    else
      v38 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v9);
    if (v13 != v39)
      goto LABEL_16;
    return v6;
  }
LABEL_10:
  swift_bridgeObjectRelease(v4);
  v11 = *a1;
  if (!((unint64_t)*a1 >> 62))
    return *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11 < 0)
    v36 = *a1;
  else
    v36 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v37 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(v11);
  return v37;
}

uint64_t sub_1000E190C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v5;
  id v6;
  objc_class *v7;
  Class isa;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v3)
  {
    v5 = (void *)result;
    swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate));
    v6 = objc_msgSend(v5, "UUID");
    v7 = (objc_class *)objc_msgSend(v5, "value");
    isa = v7;
    if (v7)
    {
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10009B2FC(v9, v11);
    }
    if (a2)
      v12 = (void *)_convertErrorToNSError(_:)(a2);
    else
      v12 = 0;
    objc_msgSend(v3, "didRead:value:error:", v6, isa, v12);

    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000E1A1C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v5;
  id v6;
  void *v7;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v3)
  {
    v5 = (void *)result;
    swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate));
    v6 = objc_msgSend(v5, "UUID");
    if (a2)
      v7 = (void *)_convertErrorToNSError(_:)(a2);
    else
      v7 = 0;
    objc_msgSend(v3, "didWrite:error:", v6, v7);

    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000E1AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

void sub_1000E1B64(void *a1)
{
  sub_1000E2064(a1, (SEL *)&selRef_firmwareVersion);
}

void sub_1000E1B70(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, "accessories");
    if (v8)
    {
      v10 = v8;
      v11 = sub_1000E2200(0, v9);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

      if ((v12 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_10;
        __break(1u);
      }
LABEL_20:
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
      goto LABEL_11;
    }
    goto LABEL_22;
  }
  v13 = *(void **)(v1 + 32);
  if (v13)
  {
    v7 = v13;
    v14 = objc_msgSend(v7, "accessories");
    if (!v14)
    {
LABEL_23:
      __break(1u);
      return;
    }
    v16 = v14;
    v17 = sub_1000E2200(0, v15);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((v12 & 0xC000000000000001) != 0)
      goto LABEL_20;
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      v18 = *(id *)(v12 + 32);
LABEL_11:
      v19 = v18;
      swift_bridgeObjectRelease(v12);
      v20 = objc_msgSend(v19, "productData");

      if (v20)
      {
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        v24 = String.index(_:offsetBy:)(15, 8, v21, v23);
        v25 = String.subscript.getter(15, v24, v21, v23);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease(v23);
        static String._fromSubstring(_:)(v25, v27, v29, v31);
        swift_bridgeObjectRelease(v31);
      }

      return;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v3);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Nil HAP Server", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000E1E58(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    v2 = a1;
    v3 = objc_msgSend(v2, "accessories");
    if (v3)
    {
      v5 = v3;
      v6 = sub_1000E2200(0, v4);
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

      if ((v7 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_10;
        __break(1u);
      }
LABEL_18:
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
      goto LABEL_11;
    }
    goto LABEL_20;
  }
  v8 = *(void **)(v1 + 32);
  if (!v8)
    return;
  v2 = v8;
  v9 = objc_msgSend(v2, "accessories");
  if (!v9)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v11 = v9;
  v12 = sub_1000E2200(0, v10);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_18;
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_10:
  v13 = *(id *)(v7 + 32);
LABEL_11:
  v14 = v13;
  swift_bridgeObjectRelease(v7);
  v15 = objc_msgSend(v14, "productData");

  if (v15)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = String.index(_:offsetBy:)(15, 8, v16, v18);
    v20 = sub_1000E223C(v19, v16, v18);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    swift_bridgeObjectRelease(v18);
    static String._fromSubstring(_:)(v20, v22, v24, v26);
    swift_bridgeObjectRelease(v26);
  }

}

void sub_1000E2058(void *a1)
{
  sub_1000E2064(a1, (SEL *)&selRef_productData);
}

void sub_1000E2064(void *a1, SEL *a2)
{
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;

  if (!a1)
  {
    v10 = *(void **)(v2 + 32);
    if (!v10)
      return;
    v4 = v10;
    v11 = objc_msgSend(v4, "accessories");
    if (!v11)
    {
LABEL_20:
      __break(1u);
      return;
    }
    v13 = v11;
    v14 = sub_1000E2200(0, v12);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    if ((v9 & 0xC000000000000001) != 0)
      goto LABEL_17;
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      v15 = *(id *)(v9 + 32);
      goto LABEL_11;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v4 = a1;
  v5 = objc_msgSend(v4, "accessories");
  if (!v5)
    goto LABEL_19;
  v7 = v5;
  v8 = sub_1000E2200(0, v6);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((v9 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_10;
    __break(1u);
  }
LABEL_17:
  v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
LABEL_11:
  v16 = v15;
  swift_bridgeObjectRelease(v9);
  v17 = objc_msgSend(v16, *a2);

  if (v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

  }
  else
  {

  }
}

unint64_t sub_1000E2200(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026D780;
  if (!qword_10026D780)
  {
    v3 = objc_opt_self(HAPAccessory, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, &qword_10026D780);
  }
  return result;
}

unint64_t sub_1000E223C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

void sub_1000E2288()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "accessories");
    if (v3)
    {
      v5 = v3;
      v6 = sub_1000E2200(0, v4);
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

      if ((v7 & 0xC000000000000001) != 0)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
LABEL_6:
        v9 = v8;
        swift_bridgeObjectRelease(v7);
        v10 = objc_msgSend(v9, "firmwareVersion");

        if (v10)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v12 = v11;

          v13 = objc_allocWithZone((Class)HMFSoftwareVersion);
          v14 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v12);
          objc_msgSend(v13, "initWithVersionString:", v14);

        }
        else
        {

        }
        return;
      }
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v8 = *(id *)(v7 + 32);
        goto LABEL_6;
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1000E23C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000E2434, 0, 0);
}

uint64_t sub_1000E2434()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + 32);
  if (v1)
  {
    v2 = objc_msgSend(v1, "primaryAccessory");
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 16);

      if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
      {
        v14 = (_QWORD *)swift_task_alloc(dword_10026D66C);
        *(_QWORD *)(v0 + 56) = v14;
        *v14 = v0;
        v14[1] = sub_1000E2694;
        v14[2] = *(_QWORD *)(v0 + 16);
        return swift_task_switch(sub_1000E27F0, 0, 0);
      }
      v4 = *(_QWORD *)(v0 + 16);
      v5 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
      if (*(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager))
      {
        v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 40), v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, *(_QWORD *)(v0 + 24));
        v7 = Logger.logObject.getter(v6);
        v8 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accessory Description manager is already present", v9, 2u);
          swift_slowDealloc(v9, -1, -1);
        }
        v11 = *(_QWORD *)(v0 + 32);
        v10 = *(_QWORD *)(v0 + 40);
        v12 = *(_QWORD *)(v0 + 24);

        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
        v13 = 0;
        goto LABEL_11;
      }
      v16 = *(void **)(v4 + 40);
      v17 = type metadata accessor for AccessoryDescriptionManager(0);
      v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      swift_weakInit(v18 + 16, 0);
      *(_QWORD *)(v18 + 32) = 0;
      swift_retain(v4);
      v19 = v16;
      Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000012, 0x80000001001FEEE0);
      swift_weakAssign(v18 + 16, v4);
      swift_release(v4);
      *(_QWORD *)(v18 + 24) = v19;
      v20 = *(_QWORD *)(v4 + v5);
      *(_QWORD *)(v4 + v5) = v18;
      swift_release(v20);
    }
  }
  v13 = 1;
LABEL_11:
  v21 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_1000E2694()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_1000E26E8, 0, 0);
}

uint64_t sub_1000E26E8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, *(_QWORD *)(v0 + 24));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Not creating Accessory Description manager for accessory without a data stream controller", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000E27D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000E27F0, 0, 0);
}

uint64_t sub_1000E27F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
  *(_QWORD *)(v0 + 24) = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 32) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v0 + 40) = v4;
    v5 = swift_retain(v3);
    if (v4)
    {
      v6 = dword_100270E7C;
      swift_retain(v4);
      v7 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 48) = v7;
      *v7 = v0;
      v7[1] = sub_1000DFEE8;
      return sub_1001A0094();
    }
    *(_QWORD *)(v5 + 32) = 0;
    swift_release(v5);
    v3 = *(_QWORD *)(v1 + v2);
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
  }
  *(_QWORD *)(v1 + v2) = 0;
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E28A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_1000E28C0, 0, 0);
}

uint64_t sub_1000E28C0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t Strong;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession);
  *(_QWORD *)(v1 + 128) = v3;
  if (v3)
  {
    v4 = v1 + 16;
    v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete);
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_1000E2A54;
    v6 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v1 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_1000E2CB0;
    v7[3] = &unk_10023ACE0;
    v7[4] = v6;
    v8 = (void *)swift_unknownObjectRetain(v3);
    if (v5)
      v9 = 0;
    else
      v9 = 5;
    objc_msgSend(v8, "cancelWithReason:completion:", v9, v7);
    return swift_continuation_await(v4);
  }
  else
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
    {
      v11 = type metadata accessor for Errors(0);
      v12 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v13 = swift_allocError(v11, v12, 0, 0);
      *v14 = 0;
      v14[1] = 0xE000000000000000;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v14, enum case for Errors.OperationCancelled(_:), v11);
      sub_1000E4610(v13);
      swift_errorRelease(v13);
      v2 = *(_QWORD *)(v1 + 120);
    }
    Strong = swift_weakLoadStrong(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, a1);
    if (Strong)
    {
      v16 = Strong;
      sub_1000E5A6C(*(void **)(v1 + 120), Strong);
      swift_release(v16);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E2A54()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1000E2BA8;
  else
    v2 = sub_1000E2AB4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E2AB4()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Strong;
  uint64_t v8;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  v2 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    v3 = type metadata accessor for Errors(0);
    v4 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v5 = swift_allocError(v3, v4, 0, 0);
    *v6 = 0;
    v6[1] = 0xE000000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v6, enum case for Errors.OperationCancelled(_:), v3);
    sub_1000E4610(v5);
    swift_errorRelease(v5);
    v2 = *(_QWORD *)(v0 + 120);
  }
  Strong = swift_weakLoadStrong(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, v1);
  if (Strong)
  {
    v8 = Strong;
    sub_1000E5A6C(*(void **)(v0 + 120), Strong);
    swift_release(v8);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E2BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Strong;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  swift_willThrow(a1);
  swift_errorRelease(v3);
  swift_unknownObjectRelease(v2);
  v5 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    v6 = type metadata accessor for Errors(0);
    v7 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v8 = swift_allocError(v6, v7, 0, 0);
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v9, enum case for Errors.OperationCancelled(_:), v6);
    sub_1000E4610(v8);
    swift_errorRelease(v8);
    v5 = *(_QWORD *)(v1 + 120);
  }
  Strong = swift_weakLoadStrong(v5 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, v4);
  if (Strong)
  {
    v11 = Strong;
    sub_1000E5A6C(*(void **)(v1 + 120), Strong);
    swift_release(v11);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000E2CB0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10009061C(&qword_10026CF70);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_1000E2D24()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  __n128 v15;
  uint64_t Strong;
  uint64_t v17;
  void **v18;
  void ***v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void ***v24;
  void **aBlock;
  _QWORD v26[2];
  void *v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  char v33[24];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession];
  if (v5)
  {
    v6 = swift_allocObject(&unk_10023ACA0, 32, 7);
    *(_QWORD *)(v6 + 16) = v0;
    *(_QWORD *)(v6 + 24) = v5;
    v28 = sub_1000E61CC;
    v29 = v6;
    aBlock = _NSConcreteStackBlock;
    v26[0] = 1107296256;
    v26[1] = sub_1000E3B60;
    v27 = &unk_10023ACB8;
    v7 = _Block_copy(&aBlock);
    v8 = v29;
    swift_unknownObjectRetain_n(v5, 2);
    v9 = v0;
    swift_release(v8);
    objc_msgSend(v5, "read:", v7);
    _Block_release(v7);
    return swift_unknownObjectRelease(v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v0[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v1);
    v11 = v0;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (void ***)swift_slowAlloc(8, -1);
      v15.n128_u64[0] = 138412290;
      *(_DWORD *)v14 = 138412290;
      Strong = swift_weakLoadStrong((char *)v11 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, v15);
      if (Strong)
      {
        v17 = Strong;
        v18 = (void **)*(id *)(Strong + 24);
        swift_release(v17);
        aBlock = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v26, v14 + 4, v14 + 12);
      }
      else
      {
        aBlock = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v26, v14 + 4, v14 + 12);
        v18 = 0;
      }
      v19 = v24;
      *v24 = v18;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Read data failed with no bulkSend session present for accessory: %@", v14, 0xCu);
      v20 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v19, 1, v20);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {

      v12 = v11;
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v21 = (uint64_t)v11 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess((char *)v11 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate, v33, 0, 0);
    sub_1000E60D0(v21, (uint64_t)&aBlock);
    if (v27)
    {
      sub_10009AFF4((uint64_t)&aBlock, (uint64_t)v30);
      sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026D798);
      v22 = v31;
      v23 = v32;
      sub_10009B038(v30, v31);
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v23 + 24))(v11, v22, v23);
      return sub_100090E88(v30);
    }
    else
    {
      return sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026D798);
    }
  }
}

uint64_t sub_1000E3088(uint64_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(NSObject *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  _QWORD *v52;
  __n128 v53;
  uint64_t Strong;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v59 - v16;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v59 - v16, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
    swift_errorRetain(a2);
    v18 = swift_errorRetain(a2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (_QWORD *)swift_slowAlloc(8, -1);
      v60 = v9;
      *(_DWORD *)v21 = 138412290;
      swift_errorRetain(a2);
      v22 = _swift_stdlib_bridgeErrorToNSError(a2);
      v65 = v22;
      v9 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v21 + 4, v21 + 12);
      v23 = v59;
      *v59 = v22;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "DataStream transfer read data channel has error: %@", v21, 0xCu);
      v24 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    v34 = (char *)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess((char *)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate, v64, 0, 0);
    v35 = (uint64_t)v34;
LABEL_12:
    sub_1000E60D0(v35, (uint64_t)&v65);
    if (!v67)
      return sub_10009B2C0((uint64_t)&v65, (uint64_t *)&unk_10026D798);
    sub_10009AFF4((uint64_t)&v65, (uint64_t)v61);
    sub_10009B2C0((uint64_t)&v65, (uint64_t *)&unk_10026D798);
    v36 = v62;
    v37 = v63;
    sub_10009B038(v61, v62);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v37 + 24))(a3, v36, v37);
    return sub_100090E88(v61);
  }
  if (a1)
  {
    sub_1000E3790(a1);
    if (v25)
    {
      v26 = v25;
      v27 = (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
      swift_beginAccess((char *)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate, v64, 0, 0);
      v59 = (_QWORD *)v27;
      sub_1000E60D0(v27, (uint64_t)&v65);
      if (v67)
      {
        sub_10009AFF4((uint64_t)&v65, (uint64_t)v61);
        sub_10009B2C0((uint64_t)&v65, (uint64_t *)&unk_10026D798);
        v28 = v9;
        v29 = v62;
        v30 = v63;
        sub_10009B038(v61, v62);
        v31 = *(uint64_t (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v30 + 8);
        v32 = v30;
        v9 = v28;
        LOBYTE(v29) = v31(a3, v26, v29, v32);
        sub_100090E88(v61);
        swift_bridgeObjectRelease(v26);
        if ((v29 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_10009B2C0((uint64_t)&v65, (uint64_t *)&unk_10026D798);
        swift_bridgeObjectRelease(v26);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
      a3 = a3;
      v48 = Logger.logObject.getter(a3);
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v60 = v9;
        v50 = v8;
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = (_QWORD *)swift_slowAlloc(8, -1);
        v53.n128_u64[0] = 138412290;
        *(_DWORD *)v51 = 138412290;
        Strong = swift_weakLoadStrong((char *)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, v53);
        if (Strong)
        {
          v55 = Strong;
          v56 = *(id *)(Strong + 24);
          swift_release(v55);
          v65 = (uint64_t)v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v51 + 4, v51 + 12);
        }
        else
        {
          v65 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v51 + 4, v51 + 12);
          v56 = 0;
        }
        *v52 = v56;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Received data frame is not accepted for accessory: %@", v51, 0xCu);
        v58 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v52, 1, v58);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);
        v8 = v50;
        v9 = v60;
      }
      else
      {

        v48 = a3;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      v35 = (uint64_t)v59;
      goto LABEL_12;
    }
  }
LABEL_8:
  if (objc_msgSend(a4, "isActive"))
    return sub_1000E2D24();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
  v38 = a3;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v60 = v9;
    v41 = v8;
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = (_QWORD *)swift_slowAlloc(8, -1);
    v44.n128_u64[0] = 138412290;
    *(_DWORD *)v42 = 138412290;
    v45 = swift_weakLoadStrong((char *)v38 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, v44);
    if (v45)
    {
      v46 = v45;
      v47 = *(id *)(v45 + 24);
      swift_release(v46);
      v65 = (uint64_t)v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v42 + 4, v42 + 12);
    }
    else
    {
      v65 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v42 + 4, v42 + 12);
      v47 = 0;
    }
    *v43 = v47;

    _os_log_impl((void *)&_mh_execute_header, v39, v40, "DataStream data transfer is completed for accessory: %@", v42, 0xCu);
    v57 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v43, 1, v57);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
    v8 = v41;
    v9 = v60;
  }
  else
  {

    v39 = v38;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return sub_1000E4844();
}

void sub_1000E3790(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10009061C(&qword_10026D7B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = (v6 - 1) & v6;
      v11 = __clz(__rbit64(v6)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_36;
      if (v13 >= v25)
      {
LABEL_33:
        sub_1000E6210(a1);
        return;
      }
      v14 = *(_QWORD *)(v26 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v26 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v25)
            goto LABEL_33;
          v14 = *(_QWORD *)(v26 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v25)
              goto LABEL_33;
            v14 = *(_QWORD *)(v26 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v25)
                goto LABEL_33;
              v14 = *(_QWORD *)(v26 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_37;
                  if (v12 >= v25)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v26 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_1000E61D4(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v37);
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_1000E61D4((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v27 = 0;
      v28 = 0;
      sub_10009B2C0((uint64_t)v34, &qword_10026D7B8);
      swift_bridgeObjectRelease(v28);
      sub_1000E6210(a1);
      swift_release(v3);
      return;
    }
    v16 = v27;
    v17 = v28;
    sub_100090EA8((uint64_t)v35 + 8, (uint64_t)v29);
    sub_10009B2C0((uint64_t)v34, &qword_10026D7B8);
    sub_1000E6004(v29, v30);
    *(_QWORD *)&v31 = v16;
    *((_QWORD *)&v31 + 1) = v17;
    sub_1000E6004(v30, v32);
    v18 = v31;
    sub_1000E6004(v32, v33);
    sub_1000E6004(v33, &v31);
    v19 = sub_100145264(v18, *((uint64_t *)&v18 + 1));
    v20 = v19;
    if ((v21 & 1) != 0)
    {
      v8 = v3[6] + 16 * v19;
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      *(_OWORD *)v8 = v18;
      v9 = (_QWORD *)(v3[7] + 32 * v20);
      sub_100090E88(v9);
      sub_1000E6004(&v31, v9);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v19;
    *(_OWORD *)(v3[6] + 16 * v19) = v18;
    sub_1000E6004(&v31, (_OWORD *)(v3[7] + 32 * v19));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_35;
    v3[2] = v24;
LABEL_8:
    v7 = v12;
    v6 = v10;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_1000E3B60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000E3BF4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setting up data stream transport", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10.n128_f64[0] = (*(double (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = swift_weakLoadStrong(&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory], v10);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType];
    v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType + 8];
    swift_bridgeObjectRetain(v14);
    sub_1000E5C58(v1, v13, v14, v12);
    swift_release(v12);
    return swift_bridgeObjectRelease(v14);
  }
  return result;
}

uint64_t sub_1000E3D50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000E3D68, 0, 0);
}

uint64_t sub_1000E3D68(__n128 a1)
{
  _QWORD *v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  _QWORD *v14;

  Strong = swift_weakLoadStrong(v1[2] + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory, a1);
  v1[3] = Strong;
  if (Strong)
  {
    v3 = v1[2];
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType);
    v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType + 8);
    v1[4] = v5;
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason);
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason + 8);
    v1[5] = v7;
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_metadata);
    v1[6] = v8;
    v9 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue);
    v1[7] = v9;
    v10 = dword_10026C424;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v11 = v9;
    v12 = (_QWORD *)swift_task_alloc(v10);
    v1[8] = v12;
    *v12 = v1;
    v12[1] = sub_1000E3EB4;
    return sub_10009ED8C(v4, v5, v6, v7, v8, (uint64_t)v11);
  }
  else
  {
    v1[10] = 0;
    v14 = (_QWORD *)swift_task_alloc(dword_10026D714);
    v1[11] = v14;
    *v14 = v1;
    v14[1] = sub_1000E3F94;
    return sub_1000E40F8(0);
  }
}

uint64_t sub_1000E3EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000E402C, 0, 0);
  v7 = *(_QWORD *)(v5 + 48);
  v9 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v5 + 40);
  v10 = *(_QWORD *)(v5 + 24);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_release(v10);
  *(_QWORD *)(v5 + 80) = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_10026D714);
  *(_QWORD *)(v5 + 88) = v11;
  *v11 = v5;
  v11[1] = sub_1000E3F94;
  return sub_1000E40F8(a1);
}

uint64_t sub_1000E3F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000E40A4;
  else
    v3 = sub_1000E3FF8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E3FF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E402C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 72);

  v5 = sub_1000E4610(v4);
  swift_willThrow(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E40A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);

  v2 = sub_1000E4610(v1);
  swift_willThrow(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E40F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E4184, 0, 0);
}

uint64_t sub_1000E4184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  *(_QWORD *)(v0 + 72) = v3;
  v4 = v2[1];
  *(_QWORD *)(v0 + 80) = v4;
  if (v3)
  {
    v5 = *(void **)(v0 + 32);
    swift_retain(v4);
    if (v5)
    {
      v6 = objc_msgSend(v5, "session");
      v1 = *(_QWORD *)(v0 + 40);
    }
    else
    {
      v6 = 0;
    }
    v14 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession) = v6;
    swift_unknownObjectRelease(v16);
    v17 = *v2;
    v18 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    sub_1000B1410(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v15);
    v19 = v5;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138412290;
      if (v5)
      {
        *(_QWORD *)(v0 + 24) = v19;
        v23 = v19;
        v24 = v0 + 24;
        v25 = v0 + 32;
      }
      else
      {
        v24 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        v25 = v0 + 24;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v22 + 4, v22 + 12);
      *v30 = *(_QWORD *)(v0 + 32);

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Calling pending callback with result: %@", v22, 0xCu);
      v26 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v30, 1, v26);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

    }
    v27 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v28 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 88) = v28;
    v28[2] = v3;
    v28[3] = v4;
    v28[4] = v27;
    v29 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 96) = v29;
    *v29 = v0;
    v29[1] = sub_1000E451C;
    return withCheckedContinuation<A>(isolation:function:_:)(v29, 0, 0, 0xD000000000000027, 0x80000001001FF020, sub_1000E6118, v28, (char *)&type metadata for () + 8);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 64);
    v8 = type metadata accessor for Errors(0);
    v9 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v8, v9, 0, 0);
    *v10 = 0xD000000000000032;
    v10[1] = 0x80000001001FEFE0;
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for Errors.NotFound(_:), v8);
    swift_willThrow(v11);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E451C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000E45A4, 0, 0);
}

uint64_t sub_1000E45A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1000B1410(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E4610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  void (*v9)(_QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  v9 = *(void (**)(_QWORD, uint64_t))(v1
                                              + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  if (v9)
  {
    v10 = v8[1];
    *v8 = 0;
    v8[1] = 0;
    swift_retain(v10);
    sub_1000B1410((uint64_t)v9, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v3);
    swift_errorRetain(a1);
    v11 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(8, -1);
      v21 = v3;
      v16 = (_QWORD *)v15;
      v22 = v12;
      *(_DWORD *)v14 = 138412290;
      v20 = v14 + 4;
      swift_errorRetain(a1);
      v17 = _swift_stdlib_bridgeErrorToNSError(a1);
      v23 = v17;
      v12 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20, v14 + 12);
      *v16 = v17;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Calling pending callback with error: %@", v14, 0xCu);
      v18 = sub_10009061C(&qword_10026BC40);
      v19 = v16;
      v3 = v21;
      swift_arrayDestroy(v19, 1, v18);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v9(0, a1);
    return sub_1000B1410((uint64_t)v9, v10);
  }
  return result;
}

uint64_t sub_1000E4844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];
  uint64_t v10;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession)
    && (*(_BYTE *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendFail) & 1) == 0
    && (*(_BYTE *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete) & 1) == 0)
  {
    *(_BYTE *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete) = 1;
  }
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate, v8, 0, 0);
  sub_1000E60D0(v1, (uint64_t)v9);
  if (!v10)
    return sub_10009B2C0((uint64_t)v9, (uint64_t *)&unk_10026D798);
  sub_10009AFF4((uint64_t)v9, (uint64_t)v5);
  sub_10009B2C0((uint64_t)v9, (uint64_t *)&unk_10026D798);
  v2 = v6;
  v3 = v7;
  sub_10009B038(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v3);
  return sub_100090E88(v5);
}

id sub_1000E4968()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDataStreamAdapter(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000E4A70()
{
  return type metadata accessor for AccessoryDataStreamAdapter(0);
}

uint64_t type metadata accessor for AccessoryDataStreamAdapter(uint64_t a1)
{
  uint64_t result;

  result = qword_10026D6F0;
  if (!qword_10026D6F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDataStreamAdapter);
  return result;
}

uint64_t sub_1000E4AB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = "\b";
  v4[1] = &unk_1001DF1E8;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = &unk_1001DF200;
  v4[5] = &unk_1001DF218;
  v4[6] = &unk_1001DF230;
  v4[7] = &unk_1001DF248;
  v4[8] = &unk_1001DF248;
  v4[9] = &unk_1001DF248;
  v4[10] = &unk_1001DF200;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000E4C08(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;
  _OWORD v23[2];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue];
  sub_100090EA8(a1, (uint64_t)v23);
  v12 = swift_allocObject(&unk_10023ABD8, 56, 7);
  *(_QWORD *)(v12 + 16) = v1;
  sub_1000E6004(v23, (_OWORD *)(v12 + 24));
  aBlock[4] = sub_1000E6014;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023ABF0;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  static DispatchQoS.unspecified.getter(v1);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v17 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

void sub_1000E4E00(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __n128 v18;
  uint64_t Strong;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  char v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  void (*v44)(char *, char *, _QWORD);
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  __n128 v50;
  uint8_t *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  _QWORD *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  BOOL v84;
  id v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  id v94;
  void (*v95)(_QWORD, _QWORD, _QWORD);
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[24];
  char *v102;
  id v103;
  _BYTE v104[24];

  v4 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v4);
  v97 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v98 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v96 = (char *)&v92 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v92 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v92 - v15;
  v17 = &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory];
  Strong = swift_weakLoadStrong(&a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory], v18);
  if (!Strong || (v20 = Strong, v21 = *(void **)(Strong + 32), v22 = v21, swift_release(v20), !v21))
  {
    v32 = v98;
    v33 = v6;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v16, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v6);
    v34 = a1;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (_QWORD *)swift_slowAlloc(8, -1);
      v39.n128_u64[0] = 138412290;
      *(_DWORD *)v37 = 138412290;
      v40 = swift_weakLoadStrong(v17, v39);
      if (v40)
      {
        v41 = v40;
        v42 = *(id *)(v40 + 24);
        swift_release(v41);
        v103 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v37 + 4, v37 + 12);
      }
      else
      {
        v103 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v37 + 4, v37 + 12);
        v42 = 0;
      }
      *v38 = v42;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Accessory: %@ has no hap server", v37, 0xCu);
      v56 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v38, 1, v56);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
      v32 = v98;
    }
    else
    {

      v35 = v34;
    }

    v57 = *(void (**)(char *, uint64_t))(v32 + 8);
    v58 = v16;
    goto LABEL_20;
  }
  v95 = (void (*)(_QWORD, _QWORD, _QWORD))v6;
  sub_100090EA8(a2, (uint64_t)&v103);
  v24 = sub_1000E2200(0, v23);
  v25 = swift_dynamicCast(&v100, &v103, (char *)&type metadata for Any + 8, v24, 6);
  v26 = (void *)v100;
  v94 = v22;
  v27 = objc_msgSend(v22, "primaryAccessory");
  v28 = v27;
  if (!v25 || !v26)
  {
    if (!v27)
    {
      v31 = v95;
      goto LABEL_14;
    }
LABEL_23:

    v31 = v95;
LABEL_24:
    v59 = v98;
    (*(void (**)(char *, char *, _QWORD))(v98 + 16))(v9, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v31);
    sub_100090EA8(a2, (uint64_t)&v103);
    v60 = a1;
    v33 = (uint64_t)v31;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = (_QWORD *)swift_slowAlloc(8, -1);
      v97 = (char *)swift_slowAlloc(32, -1);
      v102 = v97;
      v65.n128_u64[0] = 138412546;
      *(_DWORD *)v63 = 138412546;
      v66 = swift_weakLoadStrong(v17, v65);
      if (v66)
      {
        v67 = v66;
        v68 = *(id *)(v66 + 24);
        swift_release(v67);
        v100 = (uint64_t)v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v63 + 4, v63 + 12);
      }
      else
      {
        v100 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v63 + 4, v63 + 12);
        v68 = 0;
      }
      *v64 = v68;

      *(_WORD *)(v63 + 12) = 2080;
      sub_100090EA8((uint64_t)&v103, (uint64_t)&v100);
      v69 = type metadata accessor for DaemonAccessory(0);
      swift_dynamicCast(&v99, &v100, (char *)&type metadata for Any + 8, v69, 7);
      v70 = v99;
      v71 = *(id *)(v99 + 24);
      swift_release(v70);
      v73 = DockCoreInfo.description.getter(v72);
      v75 = v74;

      v100 = sub_1000906BC(v73, v75, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease(v75);
      sub_100090E88(&v103);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Accessory start listening failed, expected accessory: %@ actual accessory: %s", (uint8_t *)v63, 0x16u);
      v76 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v64, 1, v76);
      swift_slowDealloc(v64, -1, -1);
      v77 = v97;
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v63, -1, -1);

      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v98 + 8))(v9, v95);
      return;
    }

    sub_100090E88(&v103);
    v57 = *(void (**)(char *, uint64_t))(v59 + 8);
    v58 = v9;
LABEL_20:
    v57(v58, v33);
    return;
  }
  if (!v27)
  {
    v28 = v26;
    goto LABEL_23;
  }
  v29 = v26;
  v30 = static NSObject.== infix(_:_:)(v29, v28);

  v31 = v95;
  if ((v30 & 1) == 0)
    goto LABEL_24;
LABEL_14:
  v43 = &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger];
  v44 = *(void (**)(char *, char *, _QWORD))(v98 + 16);
  v44(v14, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v31);
  v45 = a1;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v93 = v43;
    v95 = (void (*)(_QWORD, _QWORD, _QWORD))v44;
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = (_QWORD *)swift_slowAlloc(8, -1);
    v50.n128_u64[0] = 138412290;
    v51 = v48;
    *(_DWORD *)v48 = 138412290;
    v52 = v48 + 4;
    v53 = swift_weakLoadStrong(v17, v50);
    if (v53)
    {
      v54 = v53;
      v55 = *(id *)(v53 + 24);
      swift_release(v54);
      v103 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v52, v51 + 12);
    }
    else
    {
      v103 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v52, v51 + 12);
      v55 = 0;
    }
    *v49 = v55;

    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Accessory: %@ started listening", v51, 0xCu);
    v78 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v49, 1, v78);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v51, -1, -1);
    v44 = (void (*)(char *, char *, _QWORD))v95;
    v43 = v93;
  }
  else
  {

    v46 = v45;
  }

  v79 = *(void (**)(_QWORD, _QWORD))(v98 + 8);
  v79(v14, v31);
  *((_BYTE *)&v45->isa + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_transportReady) = 1;
  if (*(Class *)((char *)&v45->isa
                + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    v80 = v96;
    v81 = ((uint64_t (*)(char *, char *, _QWORD))v44)(v96, v43, v31);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.info.getter();
    v84 = os_log_type_enabled(v82, v83);
    v85 = v94;
    if (v84)
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Handling pending start bulk send session request", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    v79(v80, v31);
    v87 = type metadata accessor for TaskPriority(0);
    v88 = (uint64_t)v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v97, 1, 1, v87);
    v89 = (_QWORD *)swift_allocObject(&unk_10023AC28, 40, 7);
    v89[2] = 0;
    v89[3] = 0;
    v89[4] = v45;
    v90 = v45;
    v91 = sub_10018A990(v88, (uint64_t)&unk_10026D790, (uint64_t)v89);

    swift_release(v91);
  }
  else
  {

  }
}

uint64_t sub_1000E56E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4[3] = a4;
  v6 = type metadata accessor for Logger(0);
  v4[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[5] = v7;
  v4[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10026D70C);
  v4[7] = v8;
  *v8 = v4;
  v8[1] = sub_1000E5774;
  v8[2] = a4;
  return swift_task_switch(sub_1000E3D68, 0, 0);
}

uint64_t sub_1000E5774()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000E57E8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000E57E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 64);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start bulk send session request failed with error %@", v6, 0xCu);
    v9 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 64);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E5A6C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(a2 + 40);
  v12 = swift_allocObject(&unk_10023AD08, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000E6244;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023AD20;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(a1);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v17 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

uint64_t sub_1000E5C58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(a4 + 40);
  v15 = (_QWORD *)swift_allocObject(&unk_10023AC50, 48, 7);
  v15[2] = a4;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_1000E6194;
  v29 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023AC68;
  v16 = _Block_copy(aBlock);
  v17 = v14;
  swift_retain(a4);
  v18 = a1;
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v22 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  return swift_release(v29);
}

id sub_1000E5E54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  objc_super v23;

  v15 = &v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory];
  swift_weakInit(&v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_accessory], 0);
  v16 = &v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_QWORD *)v16 + 4) = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession] = 0;
  v17 = &v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
  *v17 = 0;
  v17[1] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_transportReady] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendFail] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete] = 0;
  v18 = v7;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000011, 0x80000001001FEFC0);
  swift_weakAssign(v15, a1);
  *(_QWORD *)&v18[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue] = a2;
  *(_QWORD *)&v18[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_metadata] = a3;
  v19 = &v18[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType];
  *(_QWORD *)v19 = a4;
  *((_QWORD *)v19 + 1) = a5;
  v20 = &v18[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason];
  *(_QWORD *)v20 = a6;
  *((_QWORD *)v20 + 1) = a7;
  v21 = a2;

  v23.receiver = v18;
  v23.super_class = (Class)type metadata accessor for AccessoryDataStreamAdapter(0);
  return objc_msgSendSuper2(&v23, "init");
}

uint64_t sub_1000E5FD8()
{
  uint64_t v0;

  sub_100090E88((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 56, 7);
}

_OWORD *sub_1000E6004(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000E6014()
{
  uint64_t v0;

  sub_1000E4E00(*(char **)(v0 + 16), v0 + 24);
}

uint64_t sub_1000E6020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E6030(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E6038()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E6064(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10026D78C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10009B0EC;
  return sub_1000E56E8(a1, v4, v5, v6);
}

uint64_t sub_1000E60D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026D798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E6118()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
  v1 = sub_10009061C(&qword_10026D7A8);
  return CheckedContinuation.resume(returning:)(v1, v1);
}

uint64_t sub_1000E6160()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000E6194()
{
  uint64_t v0;

  sub_10009E888(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000E61A0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E61CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E3088(a1, a2, *(NSObject **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000E61D4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000E6210(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000E6218()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1000E6244()
{
  uint64_t v0;

  return sub_10009EAF4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000E6264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t result;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  char *v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint8_t *v86;
  __n128 v87;
  uint64_t v88;
  __n128 v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  __n128 v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  uint64_t v125;
  char v126;
  void (*v127)(char *);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  uint64_t v145;

  v0 = type metadata accessor for Logger(0);
  v138 = *(_QWORD *)(v0 - 8);
  v139 = v0;
  v1 = __chkstk_darwin(v0);
  v136 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v127 - v4;
  v6 = __chkstk_darwin(v3);
  v131 = (char *)&v127 - v7;
  v8 = __chkstk_darwin(v6);
  v133 = (char *)&v127 - v9;
  v10 = __chkstk_darwin(v8);
  v135 = (char *)&v127 - v11;
  v12 = __chkstk_darwin(v10);
  v132 = (char *)&v127 - v13;
  __chkstk_darwin(v12);
  v134 = (char *)&v127 - v14;
  v15 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL.DirectoryHint(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v22);
  v24 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v127 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v137 = (char *)&v127 - v30;
  v145 = -1;
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D5B8((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_100090FFC((uint64_t)v24);
    v31 = v139;
    v32 = v138;
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v5, v140 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v139);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed getting library path", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v31);
    v37 = sub_1000E73F0();
    v38 = swift_allocError(&type metadata for MigrationError, v37, 0, 0);
    *v39 = 0;
    v39[1] = 0;
    v40 = _convertErrorToNSError(_:)(v38);
    swift_errorRelease(v38);
    return v40;
  }
  v129 = v26;
  v130 = v25;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v137, v24, v25);
  v143 = 0x6E6F6973726576;
  v144[0] = 0xE700000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for URL.DirectoryHint.inferFromPath(_:), v18);
  sub_1000D4CF4();
  URL.appending<A>(path:directoryHint:)(&v143, v21, &type metadata for String);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v41 = swift_bridgeObjectRelease(v144[0]);
  static String.Encoding.utf8.getter(v41);
  v128 = v29;
  v42 = String.init(contentsOf:encoding:)(v29, v17);
  v44 = v43;
  v45 = v139;
  v46 = v140;
  v47 = v138;
  v48 = *(void (**)(char *))(v138 + 16);
  v136 = (char *)(v140 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger);
  v48(v134);
  v49 = swift_bridgeObjectRetain_n(v44, 2);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v142 = v53;
    v143 = v42;
    v127 = v48;
    *(_DWORD *)v52 = 136315138;
    v144[0] = v44;
    swift_bridgeObjectRetain(v44);
    v54 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v55 = String.init<A>(describing:)(&v143, v54);
    v57 = v56;
    v143 = sub_1000906BC(v55, v56, &v142);
    v48 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v52 + 4, v52 + 12);
    swift_bridgeObjectRelease_n(v44, 2);
    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Current data version string %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    v58 = v53;
    v59 = v139;
    swift_slowDealloc(v58, -1, -1);
    v46 = v140;
    swift_slowDealloc(v52, -1, -1);

    v60 = *(uint64_t (**)(char *, uint64_t))(v138 + 8);
    v45 = v59;
    result = v60(v134, v59);
  }
  else
  {

    swift_bridgeObjectRelease_n(v44, 2);
    v60 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
    result = v60(v134, v45);
  }
  v62 = v132;
  v63 = HIBYTE(v44) & 0xF;
  v64 = v42 & 0xFFFFFFFFFFFFLL;
  if ((v44 & 0x2000000000000000) != 0)
    v65 = HIBYTE(v44) & 0xF;
  else
    v65 = v42 & 0xFFFFFFFFFFFFLL;
  if (!v65)
  {
    swift_bridgeObjectRelease(v44);
    v81 = -1;
    v68 = v136;
    v73 = (uint64_t)v128;
LABEL_49:
    v145 = v81;
    v82 = ((uint64_t (*)(char *, char *, uint64_t))v48)(v62, v68, v45);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v85 = 134217984;
      v143 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v85 + 4, v85 + 12);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Current version int %ld", v85, 0xCu);
      v86 = v85;
      v46 = v140;
      swift_slowDealloc(v86, -1, -1);
    }

    v60(v62, v45);
    v87 = swift_beginAccess(&v145, &v143, 0, 0);
    v88 = v145;
    if (v88 >= currentSupportedAccessoryVersion.getter(v87))
    {
      v103 = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v135, v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v45);
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v106 = 134217984;
        v142 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v106 + 4, v106 + 12);
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "Version %ld doesn't need migration", v106, 0xCu);
        swift_slowDealloc(v106, -1, -1);
      }

      v60(v135, v45);
      v107 = v130;
      v108 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
      v108(v73, v130);
      v108((uint64_t)v137, v107);
      return 0;
    }
    currentSupportedAccessoryVersion.getter(v89);
    currentSupportedAccessoryVersion.getter(v90);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v91 = sub_10015891C(1);
    v92 = v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    if (v91)
    {
      v93 = v91;
      v94 = v133;
      v95 = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v133, v92, v45);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = swift_slowAlloc(22, -1);
        *(_DWORD *)v98 = 134218240;
        v142 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v98 + 4, v98 + 12);
        *(_WORD *)(v98 + 12) = 2048;
        v142 = currentSupportedAccessoryVersion.getter(v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v98 + 14, v98 + 22);
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Failed converting accessories from %ld to %ld", (uint8_t *)v98, 0x16u);
        v100 = v98;
        v94 = v133;
        swift_slowDealloc(v100, -1, -1);
      }

      v60(v94, v45);
      v101 = v130;
      v102 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
      v102(v73, v130);
      v102((uint64_t)v137, v101);
      v142 = v93;
    }
    else
    {
      v109 = v131;
      v110 = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v131, v92, v45);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v111, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc(12, -1);
        v114.n128_u64[0] = 134217984;
        *(_DWORD *)v113 = 134217984;
        v109 = v131;
        v142 = currentSupportedAccessoryVersion.getter(v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v113 + 4, v113 + 12);
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "Updating version to %ld", v113, 0xCu);
        swift_slowDealloc(v113, -1, -1);
      }

      v60(v109, v45);
      v116 = currentSupportedAccessoryVersion.getter(v115);
      v40 = sub_1000E70CC(v73, v116);
      sub_1001579F4();
      v117 = v130;
      v118 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
      v118(v73, v130);
      v118((uint64_t)v137, v117);
      if (!v40)
        return v40;
      v142 = v40;
    }
    v119 = sub_10009061C(&qword_10026CF70);
    v121 = sub_1000E7434(0, v120);
    if (swift_dynamicCast(&v141, &v142, v119, v121, 6))
      return v141;
    else
      return 0;
  }
  if ((v44 & 0x1000000000000000) != 0)
  {
    v69 = (uint64_t)sub_1001B3270(v42, v44, 10);
    v71 = v126;
    swift_bridgeObjectRelease(v44);
    v68 = v136;
    v73 = (uint64_t)v128;
LABEL_46:
    if ((v71 & 1) != 0)
      v81 = -1;
    else
      v81 = v69;
    goto LABEL_49;
  }
  if ((v44 & 0x2000000000000000) == 0)
  {
    v66 = v44;
    if ((v42 & 0x1000000000000000) != 0)
      v67 = (unsigned __int8 *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v67 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v42, v44);
    v68 = v136;
    v69 = (uint64_t)sub_1001B325C(v67, v64, 10);
    v71 = v70 & 1;
    goto LABEL_44;
  }
  v143 = v42;
  v144[0] = v44 & 0xFFFFFFFFFFFFFFLL;
  if (v42 == 43)
  {
    if (v63)
    {
      if (v63 != 1)
      {
        v66 = v44;
        if ((BYTE1(v42) - 48) <= 9u)
        {
          v69 = (BYTE1(v42) - 48);
          v77 = v63 - 2;
          v68 = v136;
          v73 = (uint64_t)v128;
          if (v77)
          {
            v78 = (unsigned __int8 *)&v143 + 2;
            while (1)
            {
              v79 = *v78 - 48;
              if (v79 > 9)
                goto LABEL_77;
              v80 = 10 * v69;
              if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63)
                goto LABEL_77;
              v69 = v80 + v79;
              if (__OFADD__(v80, v79))
                goto LABEL_77;
              v71 = 0;
              ++v78;
              if (!--v77)
                goto LABEL_45;
            }
          }
          goto LABEL_70;
        }
        goto LABEL_43;
      }
      goto LABEL_81;
    }
  }
  else
  {
    if (v42 != 45)
    {
      if (v63)
      {
        v66 = v44;
        if ((v42 - 48) <= 9u)
        {
          v69 = (v42 - 48);
          v122 = v63 - 1;
          v68 = v136;
          v73 = (uint64_t)v128;
          if (v122)
          {
            v123 = (unsigned __int8 *)&v143 + 1;
            while (1)
            {
              v124 = *v123 - 48;
              if (v124 > 9)
                goto LABEL_77;
              v125 = 10 * v69;
              if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63)
                goto LABEL_77;
              v69 = v125 + v124;
              if (__OFADD__(v125, v124))
                goto LABEL_77;
              v71 = 0;
              ++v123;
              if (!--v122)
                goto LABEL_45;
            }
          }
LABEL_70:
          v71 = 0;
          goto LABEL_45;
        }
LABEL_43:
        v69 = 0;
        v71 = 1;
        v68 = v136;
LABEL_44:
        v73 = (uint64_t)v128;
LABEL_45:
        swift_bridgeObjectRelease(v66);
        goto LABEL_46;
      }
LABEL_81:
      v66 = v44;
      goto LABEL_43;
    }
    if (v63)
    {
      if (v63 != 1)
      {
        v66 = v44;
        if ((BYTE1(v42) - 48) <= 9u)
        {
          v69 = -(uint64_t)(BYTE1(v42) - 48);
          v72 = v63 - 2;
          v68 = v136;
          v73 = (uint64_t)v128;
          if (v72)
          {
            v74 = (unsigned __int8 *)&v143 + 2;
            while (1)
            {
              v75 = *v74 - 48;
              if (v75 > 9)
                break;
              v76 = 10 * v69;
              if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63)
                break;
              v69 = v76 - v75;
              if (__OFSUB__(v76, v75))
                break;
              v71 = 0;
              ++v74;
              if (!--v72)
                goto LABEL_45;
            }
LABEL_77:
            v69 = 0;
            v71 = 1;
            goto LABEL_45;
          }
          goto LABEL_70;
        }
        goto LABEL_43;
      }
      goto LABEL_81;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E70CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  char *v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a2;
  v12 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v14 = v13;
  static String.Encoding.utf8.getter(v12);
  v15 = String.data(using:allowLossyConversion:)(v11, 0, v12, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v17 >> 60 == 15)
  {
    v18 = sub_1000E73F0();
    v19 = swift_allocError(&type metadata for MigrationError, v18, 0, 0);
    *v20 = 0xD00000000000001DLL;
    v20[1] = 0x80000001001FF0B0;
    swift_willThrow(v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v32 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    swift_errorRetain(v19);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v32 = v4;
      v25 = v7;
      v26 = (uint8_t *)v24;
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138412290;
      swift_errorRetain(v19);
      v28 = _swift_stdlib_bridgeErrorToNSError(v19);
      v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v26 + 4, v26 + 12);
      *v27 = v28;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed updating version string: %@", v26, 0xCu);
      v29 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      v7 = v25;
      v4 = v32;
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRelease(v19);
  }
  else
  {
    Data.write(to:options:)(a1, 0, v15, v17);
    sub_10009E3A0(v15, v17);
    return 0;
  }
  return v19;
}

unint64_t sub_1000E73F0()
{
  unint64_t result;

  result = qword_10026D7C0;
  if (!qword_10026D7C0)
  {
    result = swift_getWitnessTable(&unk_1001DF284, &type metadata for MigrationError);
    atomic_store(result, (unint64_t *)&qword_10026D7C0);
  }
  return result;
}

unint64_t sub_1000E7434(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026D7C8;
  if (!qword_10026D7C8)
  {
    v3 = objc_opt_self(NSError, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026D7C8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MigrationError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for MigrationError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for MigrationError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for MigrationError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrationError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MigrationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000E75B8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000E75D0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MigrationError()
{
  return &type metadata for MigrationError;
}

uint64_t sub_1000E7604(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = a1;
  v14 = a2;
  *(_QWORD *)&v9 = a1;
  *((_QWORD *)&v9 + 1) = a2;
  sub_10009B27C(a1, a2);
  v2 = sub_10009061C(&qword_10026D8F0);
  v3 = sub_10009061C(&qword_10026D8C8);
  if (!swift_dynamicCast(v7, &v9, v2, v3, 6))
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_1000EC978((uint64_t)v7);
    __asm { BR              X10 }
  }
  sub_10009B340(v7, (uint64_t)&v10);
  v4 = v11;
  v5 = v12;
  sub_10009B038(&v10, v11);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v9, sub_1001807A0, 0, &type metadata for Data._Representation, v4, v5);
  sub_10009B2FC(v13, v14);
  v7[0] = v9;
  sub_100090E88(&v10);
  return *(_QWORD *)&v7[0];
}

uint64_t sub_1000E7BE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_10009061C(&qword_10026D8C8);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_1000EC978((uint64_t)v17);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_1000EAFAC(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_1000AB600(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_1000EA6AC();
    __asm { BR              X12 }
  }
  sub_10009B340(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_10009B038(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_1001807A0, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100090E88(v20);
  return *(_QWORD *)&v17[0];
}

void sub_1000E80E0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000E8144
     + *((int *)qword_1000E8378 + (sub_10009B038(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1000E8154()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_10009B27C(v1, v0);
  sub_1001807A0(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_10009B2FC(v1, v0);
  v4 = v12;
  sub_100090E88(&v13);
  return v4;
}

uint64_t MotionFeedback.Velocity.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

dockaccessoryd::MotionFeedback (__swiftcall *MotionFeedback.positions.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

void MotionFeedback.Position.value.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MotionFeedback.Velocity.value.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

uint64_t sub_1000E83C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 25705;
}

uint64_t sub_1000E83F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000EB314(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E8414()
{
  return 0;
}

void sub_1000E8420(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000E842C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E84A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8454(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E84A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.Position.encode(to:)(_QWORD *a1, uint64_t a2, double a3)
{
  return sub_1000E8694(a1, a2, &qword_10026D7D0, (uint64_t (*)(void))sub_1000E84A8, (uint64_t)&type metadata for MotionFeedback.Position.CodingKeys, a3);
}

unint64_t sub_1000E84A8()
{
  unint64_t result;

  result = qword_10026D7D8;
  if (!qword_10026D7D8)
  {
    result = swift_getWitnessTable(&unk_1001DF6BC, &type metadata for MotionFeedback.Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D7D8);
  }
  return result;
}

double MotionFeedback.Position.init(from:)(_QWORD *a1)
{
  return sub_1000EB3E4(a1, (uint64_t *)&unk_10026D950, (uint64_t (*)(void))sub_1000E84A8, (uint64_t)&type metadata for MotionFeedback.Position.CodingKeys);
}

void sub_1000E8518(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E8818(a1, (uint64_t *)&unk_10026D950, (uint64_t (*)(void))sub_1000E84A8, (uint64_t)&type metadata for MotionFeedback.Position.CodingKeys, a2);
}

uint64_t sub_1000E8544(_QWORD *a1)
{
  uint64_t v1;

  return MotionFeedback.Position.encode(to:)(a1, *(_QWORD *)v1, *(double *)(v1 + 8));
}

uint64_t _s14dockaccessoryd14MotionFeedbackV8VelocityV11descriptionSSvg_0(double a1)
{
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 4023369;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x3D65756C615620;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)(v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  return v7[0];
}

uint64_t sub_1000E8618(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EB2D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8640(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EB2D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.Velocity.encode(to:)(_QWORD *a1, uint64_t a2, double a3)
{
  return sub_1000E8694(a1, a2, &qword_10026D7E0, (uint64_t (*)(void))sub_1000EB2D0, (uint64_t)&type metadata for MotionFeedback.Velocity.CodingKeys, a3);
}

uint64_t sub_1000E8694(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;

  v11 = sub_10009061C(a3);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10009B038(a1, v15);
  v17 = a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a5, a5, v17, v15, v16);
  v22 = 0;
  v18 = v20;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v22, v11);
  if (!v18)
  {
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v11, a6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

double MotionFeedback.Velocity.init(from:)(_QWORD *a1)
{
  return sub_1000EB3E4(a1, &qword_10026D948, (uint64_t (*)(void))sub_1000EB2D0, (uint64_t)&type metadata for MotionFeedback.Velocity.CodingKeys);
}

void sub_1000E87EC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E8818(a1, &qword_10026D948, (uint64_t (*)(void))sub_1000EB2D0, (uint64_t)&type metadata for MotionFeedback.Velocity.CodingKeys, a2);
}

void sub_1000E8818(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  double v8;

  v8 = sub_1000EB3E4(a1, a2, a3, a4);
  if (!v5)
  {
    *(_QWORD *)a5 = v7;
    *(double *)(a5 + 8) = v8;
  }
}

uint64_t sub_1000E8850(_QWORD *a1)
{
  uint64_t v1;

  return MotionFeedback.Velocity.encode(to:)(a1, *(_QWORD *)v1, *(double *)(v1 + 8));
}

uint64_t MotionFeedback.positions.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t MotionFeedback.velocities.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t MotionFeedback.velocities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t MotionFeedback.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;

  v4 = swift_bridgeObjectRetain(a1);
  v5._countAndFlagsBits = Array.description.getter(v4, &type metadata for MotionFeedback.Position);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x3D6C655620;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  v8 = swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = Array.description.getter(v8, &type metadata for MotionFeedback.Velocity);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v10);
  return 1030975312;
}

dockaccessoryd::MotionFeedback_optional __swiftcall MotionFeedback.init(data:)(NSData data)
{
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  dockaccessoryd::MotionFeedback_optional result;
  _QWORD v12[2];

  v2 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = PropertyListDecoder.init()();
  v4 = data.super.isa;
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(data.super.isa);
  v7 = v6;

  v8 = sub_1000EBA50();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v12, &type metadata for MotionFeedback, v5, v7, &type metadata for MotionFeedback, v8);

  sub_10009B2FC(v5, v7);
  swift_release(v3);
  v9 = (void *)v12[0];
  v10 = (void *)v12[1];
  result.value.velocities._rawValue = v10;
  result.value.positions._rawValue = v9;
  return result;
}

NSData_optional __swiftcall MotionFeedback.encode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;
  Swift::Bool v11;
  objc_class *v12;
  _QWORD v13[2];
  NSData_optional result;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v13[0] = v3;
  v13[1] = v2;
  v6 = sub_1000EBA94();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v13, &type metadata for MotionFeedback, v6);
  v9 = v8;
  swift_release(v5);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v7, v9);
  v12 = isa;
  result.value.super.isa = v12;
  result.is_nil = v11;
  return result;
}

uint64_t MotionFeedback.encode()(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  double *v5;
  double v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 0x100)
  {
    v4 = a1;
    v5 = (double *)sub_1000E97B0(0, 1, 1, _swiftEmptyArrayStorage);
    v7 = *((_QWORD *)v5 + 2);
    v6 = v5[3];
    v8 = v7 + 1;
    if (v7 >= *(_QWORD *)&v6 >> 1)
      goto LABEL_57;
    while (1)
    {
      *((_QWORD *)v5 + 2) = v8;
      *((_BYTE *)v5 + v7 + 32) = v2;
      v9 = *(_QWORD *)(a2 + 16);
      if (v9 >= 0x100)
        break;
      v10 = *((_QWORD *)v5 + 3);
      if ((uint64_t)(v7 + 2) > (uint64_t)(v10 >> 1))
        v5 = (double *)sub_1000E97B0((_QWORD *)(v10 > 1), v7 + 2, 1, v5);
      *((_QWORD *)v5 + 2) = v7 + 2;
      *((_BYTE *)v5 + v8 + 32) = v9;
      if (v2)
      {
        v11 = *(_QWORD *)(v4 + 32);
        if ((v11 & 0x8000000000000000) != 0)
        {
          v31 = v4;
          goto LABEL_60;
        }
        swift_bridgeObjectRetain(v4);
        if (v11 > 0xFF)
          break;
        v7 += 34;
        v12 = v2 - 1;
        v13 = 48;
        while (1)
        {
          v14 = *((_QWORD *)v5 + 3);
          v8 = v7 - 31;
          if (v7 - 32 >= v14 >> 1)
            v5 = (double *)sub_1000E97B0((_QWORD *)(v14 > 1), v7 - 31, 1, v5);
          *((_QWORD *)v5 + 2) = v8;
          *((_BYTE *)v5 + v7) = v11;
          if (!v12)
            break;
          v11 = *(_QWORD *)(v4 + v13);
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_61;
          ++v7;
          v13 += 16;
          --v12;
          if (v11 > 0xFF)
            goto LABEL_63;
        }
        swift_bridgeObjectRelease(v4);
      }
      if (v9)
      {
        v15 = *(_QWORD *)(a2 + 32);
        if ((v15 & 0x8000000000000000) != 0)
        {
          v31 = a2;
LABEL_60:
          swift_bridgeObjectRetain(v31);
LABEL_61:
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          goto LABEL_64;
        }
        if (v15 > 0xFF)
        {
          swift_bridgeObjectRetain(a2);
          break;
        }
        v7 = *((_QWORD *)v5 + 2);
        swift_bridgeObjectRetain(a2);
        v16 = v9 - 1;
        v17 = 48;
        while (1)
        {
          v18 = *((_QWORD *)v5 + 3);
          v8 = v7 + 1;
          if (v7 >= v18 >> 1)
            v5 = (double *)sub_1000E97B0((_QWORD *)(v18 > 1), v7 + 1, 1, v5);
          *((_QWORD *)v5 + 2) = v8;
          *((_BYTE *)v5 + v7 + 32) = v15;
          if (!v16)
            break;
          v15 = *(_QWORD *)(a2 + v17);
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_61;
          v17 += 16;
          --v16;
          ++v7;
          if (v15 > 0xFF)
            goto LABEL_63;
        }
        swift_bridgeObjectRelease(a2);
      }
      if (v2)
      {
        swift_bridgeObjectRetain(v4);
        v7 = 40;
        while (1)
        {
          v19 = *(double *)(v4 + v7) * 1000.0;
          v6 = v19;
          if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
            break;
          if (v19 <= -32769.0)
            goto LABEL_52;
          if (v19 >= 32768.0)
            goto LABEL_53;
          v21 = *((_QWORD *)v5 + 2);
          v20 = *((_QWORD *)v5 + 3);
          v22 = v20 >> 1;
          v8 = v21 + 1;
          if (v20 >> 1 <= v21)
          {
            v5 = (double *)sub_1000E97B0((_QWORD *)(v20 > 1), v21 + 1, 1, v5);
            v20 = *((_QWORD *)v5 + 3);
            v22 = v20 >> 1;
          }
          *((_QWORD *)v5 + 2) = v8;
          *((_BYTE *)v5 + v21 + 32) = (unsigned __int16)(int)v19 >> 8;
          v23 = v21 + 2;
          if (v22 < v23)
            v5 = (double *)sub_1000E97B0((_QWORD *)(v20 > 1), v23, 1, v5);
          *((_QWORD *)v5 + 2) = v23;
          *((_BYTE *)v5 + v8 + 32) = (int)v19;
          v7 += 16;
          if (!--v2)
          {
            swift_bridgeObjectRelease(v4);
            goto LABEL_39;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
      }
      else
      {
LABEL_39:
        if (!v9)
        {
LABEL_50:
          v29 = sub_1000EAC28((uint64_t)v5);
          swift_bridgeObjectRelease(v5);
          return v29;
        }
        swift_bridgeObjectRetain(a2);
        v24 = 40;
        v2 = 0x408F400000000000;
        while (1)
        {
          v25 = *(double *)(a2 + v24) * 1000.0;
          v6 = v25;
          if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
            break;
          if (v25 <= -32769.0)
            goto LABEL_55;
          if (v25 >= 32768.0)
            goto LABEL_56;
          v27 = *((_QWORD *)v5 + 2);
          v26 = *((_QWORD *)v5 + 3);
          v28 = v26 >> 1;
          v4 = v27 + 1;
          if (v26 >> 1 <= v27)
          {
            v5 = (double *)sub_1000E97B0((_QWORD *)(v26 > 1), v27 + 1, 1, v5);
            v26 = *((_QWORD *)v5 + 3);
            v28 = v26 >> 1;
          }
          v7 = (int)v25;
          *((_QWORD *)v5 + 2) = v4;
          *((_BYTE *)v5 + v27 + 32) = BYTE1(v7);
          v8 = v27 + 2;
          if (v28 < v8)
            v5 = (double *)sub_1000E97B0((_QWORD *)(v26 > 1), v8, 1, v5);
          *((_QWORD *)v5 + 2) = v8;
          *((_BYTE *)v5 + v4 + 32) = v7;
          v24 += 16;
          if (!--v9)
          {
            swift_bridgeObjectRelease(a2);
            goto LABEL_50;
          }
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      v5 = (double *)sub_1000E97B0((_QWORD *)(*(_QWORD *)&v6 > 1uLL), v8, 1, v5);
    }
  }
LABEL_63:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_1000E91C0()
{
  _BYTE *v0;

  if (*v0)
    return 0x697469636F6C6576;
  else
    return 0x6E6F697469736F70;
}

uint64_t sub_1000E9204@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000EBBA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E9228(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EBAD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E9250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EBAD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = sub_10009061C(&qword_10026D808);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10009B038(a1, v11);
  v13 = sub_1000EBAD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MotionFeedback.CodingKeys, &type metadata for MotionFeedback.CodingKeys, v13, v11, v12);
  v21 = a2;
  v20 = 0;
  v14 = sub_10009061C(&qword_10026D818);
  v15 = sub_1000ECB28(&qword_10026D820, &qword_10026D818, (void (*)(void))sub_1000EBB1C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v14, v15);
  if (!v3)
  {
    v21 = a3;
    v20 = 1;
    v16 = sub_10009061C(&qword_10026D830);
    v17 = sub_1000ECB28(&qword_10026D838, &qword_10026D830, (void (*)(void))sub_1000EBB60, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

_QWORD *MotionFeedback.init(from:)(_QWORD *a1)
{
  return sub_1000EBCAC(a1);
}

_QWORD *sub_1000E942C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1000EBCAC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000E9454(_QWORD *a1)
{
  uint64_t *v1;

  return MotionFeedback.encode(to:)(a1, *v1, v1[1]);
}

_QWORD *sub_1000E946C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8D8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EACC0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9578(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8F8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000EADB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9698(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C((uint64_t *)&unk_10026E6C0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EAEBC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E97A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E9F28(a1, a2, a3, a4, &qword_10026D8E8);
}

_QWORD *sub_1000E97B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026BF40);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000EB010(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E98A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8C0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000EB0F4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E99CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8E0);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EB1E8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9AD8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E9AF0(a1, a2, a3, a4, &qword_10026D938);
}

_QWORD *sub_1000E9AE4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E9AF0(a1, a2, a3, a4, &qword_10026D940);
}

_QWORD *sub_1000E9AF0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10009061C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EB54C(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9BF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8A0);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC3B8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9D04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_100271600);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC4A0(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9E10(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D8B8);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC4A0(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E9F1C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E9F28(a1, a2, a3, a4, &qword_10026D8A8);
}

_QWORD *sub_1000E9F28(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10009061C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC768(0, v9, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA030(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D908);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000EC588(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA154(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D900);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EB54C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA260(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D7F8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC674(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA36C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10009061C(&qword_10026D890);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000EC870(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

void sub_1000EA478()
{
  __asm { BR              X12 }
}

uint64_t sub_1000EA4D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_1000EA6AC()
{
  __asm { BR              X11 }
}

_QWORD *sub_1000EA70C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

uint64_t sub_1000EA99C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    return a1(a3, a4 - a3);
  else
    return a1(0, 0);
}

_QWORD *sub_1000EA9E8(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

void sub_1000EAA4C(void (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Data.InlineSlice.ensureUniqueReference()();
  v3 = *v1;
  v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = v5;
  v7 = __DataStorage._offset.getter();
  v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v4 - v3;
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  a1(v6 + v8, v6 + v8 + v11);
}

char *sub_1000EAAF4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1000EABA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EAC28(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = sub_10009061C((uint64_t *)&unk_10026EA70);
  v10 = sub_10009E3B4();
  v8[0] = a1;
  v2 = sub_10009B038(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_1001807A0(v3, v4, &v7);
  v5 = v7;
  sub_100090E88(v8);
  return v5;
}

uint64_t sub_1000EACC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EADB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10009061C(&qword_10026C2E0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000EAEBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_BYTE *sub_1000EAFAC(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_100180E74(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_100180F34((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_100180FAC((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

char *sub_1000EB010(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EB0F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000EB1E8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_1000EB2D0()
{
  unint64_t result;

  result = qword_10026D7E8;
  if (!qword_10026D7E8)
  {
    result = swift_getWitnessTable(&unk_1001DF66C, &type metadata for MotionFeedback.Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D7E8);
  }
  return result;
}

uint64_t sub_1000EB314(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_1000EB3E4(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;

  v17 = sub_10009061C(a2);
  v9 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10009B038(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (!v4)
  {
    v19 = 0;
    v15 = v17;
    KeyedDecodingContainer.decode(_:forKey:)(&v19, v17);
    v18 = 1;
    v5 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v15);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v15);
  }
  sub_100090E88(a1);
  return v5;
}

char *sub_1000EB54C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void _s14dockaccessoryd14MotionFeedbackV4dataACSg10Foundation4DataV_tcfC_0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_1000EB6B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8_optional v6;
  Swift::UInt8 v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  Swift::UInt8_optional v11;
  Swift::UInt8 value;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  Swift::UInt8_optional v19;
  Swift::UInt8 v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt8_optional v27;
  Swift::UInt8_optional v28;
  Swift::UInt8_optional v29;
  Swift::UInt8 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt8_optional v35;
  Swift::UInt8_optional v36;
  Swift::UInt8_optional v37;
  Swift::UInt8 v38;

  sub_10009B27C(v4, v2);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v4, v2, (int)v4);
  v6 = Data.Iterator.next()();
  if ((*(_WORD *)&v6 & 0x100) != 0 || (v7 = v6.value, LOWORD(v8) = Data.Iterator.next()(), (v8 & 0x100) != 0))
  {
    sub_10009B2FC(v4, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  }
  else
  {
    *(_QWORD *)(v5 - 112) = v8;
    *(_QWORD *)(v5 - 104) = v4;
    *(_QWORD *)(v5 - 96) = v3;
    *(_QWORD *)(v5 - 88) = v0;
    if (v7)
    {
      v9 = 0;
      v10 = _swiftEmptyArrayStorage;
      while (1)
      {
        v11 = Data.Iterator.next()();
        if ((*(_WORD *)&v11 & 0x100) != 0)
          break;
        value = v11.value;
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_1000E9AF0(0, v10[2] + 1, 1, v10, &qword_10026D940);
        v14 = v10[2];
        v13 = v10[3];
        if (v14 >= v13 >> 1)
          v10 = sub_1000E9AF0((_QWORD *)(v13 > 1), v14 + 1, 1, v10, &qword_10026D940);
        ++v9;
        v10[2] = v14 + 1;
        v15 = &v10[2 * v14];
        v15[4] = value;
        v15[5] = 0;
        if (v9 == v7)
          goto LABEL_14;
      }
      sub_10009B2FC(*(_QWORD *)(v5 - 104), v2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 96) + 8))(v1, *(_QWORD *)(v5 - 88));
    }
    else
    {
      v10 = _swiftEmptyArrayStorage;
LABEL_14:
      v16 = *(_QWORD *)(v5 - 112);
      if (*(_QWORD *)(v5 - 112))
      {
        v17 = 0;
        v18 = _swiftEmptyArrayStorage;
        while (1)
        {
          v19 = Data.Iterator.next()();
          if ((*(_WORD *)&v19 & 0x100) != 0)
            break;
          v20 = v19.value;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = sub_1000E9AF0(0, v18[2] + 1, 1, v18, &qword_10026D938);
          v22 = v18[2];
          v21 = v18[3];
          if (v22 >= v21 >> 1)
            v18 = sub_1000E9AF0((_QWORD *)(v21 > 1), v22 + 1, 1, v18, &qword_10026D938);
          ++v17;
          v18[2] = v22 + 1;
          v23 = &v18[2 * v22];
          v23[4] = v20;
          v23[5] = 0;
          if (v17 == v16)
            goto LABEL_25;
        }
      }
      else
      {
        v18 = _swiftEmptyArrayStorage;
LABEL_25:
        if (v7)
        {
          v24 = 0;
          v25 = v7;
          v26 = 5;
          while (1)
          {
            v27 = Data.Iterator.next()();
            if ((*(_WORD *)&v27 & 0x100) != 0)
              break;
            v28 = v27;
            v29 = Data.Iterator.next()();
            if ((*(_WORD *)&v29 & 0x100) != 0)
              break;
            v30 = v29.value;
            if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
              v10 = sub_1001714B8(v10);
            if (v24 >= v10[2])
            {
              __break(1u);
LABEL_48:
              __break(1u);
              JUMPOUT(0x1000EBA40);
            }
            ++v24;
            *(double *)&v10[v26] = (double)(__int16)(v30 | (unsigned __int16)(*(_WORD *)&v28 << 8)) / 1000.0;
            v26 += 2;
            if (v25 == v24)
              goto LABEL_33;
          }
        }
        else
        {
LABEL_33:
          v31 = *(_QWORD *)(v5 - 112);
          if (!(_BYTE)v31)
          {
LABEL_46:
            sub_10009B2FC(*(_QWORD *)(v5 - 104), v2);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 96) + 8))(v1, *(_QWORD *)(v5 - 88));
            return v10;
          }
          v32 = 0;
          v33 = v31;
          v34 = 5;
          while (1)
          {
            v35 = Data.Iterator.next()();
            if ((*(_WORD *)&v35 & 0x100) != 0)
              break;
            v36 = v35;
            v37 = Data.Iterator.next()();
            if ((*(_WORD *)&v37 & 0x100) != 0)
              break;
            v38 = v37.value;
            if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
              v18 = sub_1001714A4(v18);
            if (v32 >= v18[2])
              goto LABEL_48;
            ++v32;
            *(double *)&v18[v34] = (double)(__int16)(v38 | (unsigned __int16)(*(_WORD *)&v36 << 8)) / 1000.0;
            v34 += 2;
            if (v33 == v32)
              goto LABEL_46;
          }
        }
      }
      sub_10009B2FC(*(_QWORD *)(v5 - 104), v2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 96) + 8))(v1, *(_QWORD *)(v5 - 88));
      swift_bridgeObjectRelease(v18);
    }
    swift_bridgeObjectRelease(v10);
  }
  return 0;
}

unint64_t sub_1000EBA50()
{
  unint64_t result;

  result = qword_10026D7F0;
  if (!qword_10026D7F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback, &type metadata for MotionFeedback);
    atomic_store(result, (unint64_t *)&qword_10026D7F0);
  }
  return result;
}

unint64_t sub_1000EBA94()
{
  unint64_t result;

  result = qword_10026D800;
  if (!qword_10026D800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback, &type metadata for MotionFeedback);
    atomic_store(result, (unint64_t *)&qword_10026D800);
  }
  return result;
}

unint64_t sub_1000EBAD8()
{
  unint64_t result;

  result = qword_10026D810;
  if (!qword_10026D810)
  {
    result = swift_getWitnessTable(&unk_1001DF61C, &type metadata for MotionFeedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D810);
  }
  return result;
}

unint64_t sub_1000EBB1C()
{
  unint64_t result;

  result = qword_10026D828;
  if (!qword_10026D828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback.Position, &type metadata for MotionFeedback.Position);
    atomic_store(result, (unint64_t *)&qword_10026D828);
  }
  return result;
}

unint64_t sub_1000EBB60()
{
  unint64_t result;

  result = qword_10026D840;
  if (!qword_10026D840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback.Velocity, &type metadata for MotionFeedback.Velocity);
    atomic_store(result, (unint64_t *)&qword_10026D840);
  }
  return result;
}

uint64_t sub_1000EBBA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F697469736F70 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697469736F70, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x697469636F6C6576 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x697469636F6C6576, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_1000EBCAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = sub_10009061C(&qword_10026D910);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10009B038(a1, v7);
  v9 = sub_1000EBAD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MotionFeedback.CodingKeys, &type metadata for MotionFeedback.CodingKeys, v9, v7, v8);
  if (v1)
  {
    v13 = _swiftEmptyArrayStorage;
    sub_100090E88(a1);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  else
  {
    v10 = sub_10009061C(&qword_10026D818);
    HIBYTE(v16) = 0;
    v11 = sub_1000ECB28(&qword_10026D918, &qword_10026D818, (void (*)(void))sub_1000ECAE4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 7, v3, v10, v11);
    v13 = v17;
    v14 = sub_10009061C(&qword_10026D830);
    HIBYTE(v16) = 1;
    v15 = sub_1000ECB28(&qword_10026D928, &qword_10026D830, (void (*)(void))sub_1000ECB8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v14, (char *)&v16 + 7, v3, v14, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100090E88(a1);
  }
  return v13;
}

uint64_t destroy for MotionFeedback(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s14dockaccessoryd14MotionFeedbackVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for MotionFeedback(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for MotionFeedback(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MotionFeedback(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionFeedback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionFeedback()
{
  return &type metadata for MotionFeedback;
}

ValueMetadata *type metadata accessor for MotionFeedback.Position()
{
  return &type metadata for MotionFeedback.Position;
}

ValueMetadata *type metadata accessor for MotionFeedback.Velocity()
{
  return &type metadata for MotionFeedback.Velocity;
}

ValueMetadata *type metadata accessor for MotionFeedback.CodingKeys()
{
  return &type metadata for MotionFeedback.CodingKeys;
}

ValueMetadata *type metadata accessor for MotionFeedback.Velocity.CodingKeys()
{
  return &type metadata for MotionFeedback.Velocity.CodingKeys;
}

uint64_t _s14dockaccessoryd14MotionFeedbackV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000EC0B0 + 4 * byte_1001DF2C9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000EC0E4 + 4 * byte_1001DF2C4[v4]))();
}

uint64_t sub_1000EC0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EC0F4);
  return result;
}

uint64_t sub_1000EC100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EC108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000EC10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MotionFeedback.Position.CodingKeys()
{
  return &type metadata for MotionFeedback.Position.CodingKeys;
}

unint64_t sub_1000EC134()
{
  unint64_t result;

  result = qword_10026D848;
  if (!qword_10026D848)
  {
    result = swift_getWitnessTable(&unk_1001DF484, &type metadata for MotionFeedback.Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D848);
  }
  return result;
}

unint64_t sub_1000EC17C()
{
  unint64_t result;

  result = qword_10026D850;
  if (!qword_10026D850)
  {
    result = swift_getWitnessTable(&unk_1001DF53C, &type metadata for MotionFeedback.Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D850);
  }
  return result;
}

unint64_t sub_1000EC1C4()
{
  unint64_t result;

  result = qword_10026D858;
  if (!qword_10026D858)
  {
    result = swift_getWitnessTable(&unk_1001DF5F4, &type metadata for MotionFeedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D858);
  }
  return result;
}

unint64_t sub_1000EC20C()
{
  unint64_t result;

  result = qword_10026D860;
  if (!qword_10026D860)
  {
    result = swift_getWitnessTable(&unk_1001DF564, &type metadata for MotionFeedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D860);
  }
  return result;
}

unint64_t sub_1000EC254()
{
  unint64_t result;

  result = qword_10026D868;
  if (!qword_10026D868)
  {
    result = swift_getWitnessTable(&unk_1001DF58C, &type metadata for MotionFeedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D868);
  }
  return result;
}

unint64_t sub_1000EC29C()
{
  unint64_t result;

  result = qword_10026D870;
  if (!qword_10026D870)
  {
    result = swift_getWitnessTable(&unk_1001DF4AC, &type metadata for MotionFeedback.Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D870);
  }
  return result;
}

unint64_t sub_1000EC2E4()
{
  unint64_t result;

  result = qword_10026D878;
  if (!qword_10026D878)
  {
    result = swift_getWitnessTable(&unk_1001DF4D4, &type metadata for MotionFeedback.Velocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D878);
  }
  return result;
}

unint64_t sub_1000EC32C()
{
  unint64_t result;

  result = qword_10026D880;
  if (!qword_10026D880)
  {
    result = swift_getWitnessTable(&unk_1001DF3F4, &type metadata for MotionFeedback.Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D880);
  }
  return result;
}

unint64_t sub_1000EC374()
{
  unint64_t result;

  result = qword_10026D888;
  if (!qword_10026D888)
  {
    result = swift_getWitnessTable(&unk_1001DF41C, &type metadata for MotionFeedback.Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10026D888);
  }
  return result;
}

char *sub_1000EC3B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000EC4A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000EC588(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000EC674(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EC768(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_10009061C(&qword_10026D8B0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EC870(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10009061C(&qword_10026D898);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EC978(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C(&qword_10026D8D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1000EC9B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1000EA9E8((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000ECA14, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1000ECA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1000EABA0(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000ECA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];
  __int128 v5;

  v5 = *(_OWORD *)*(_QWORD *)(v2 + 16);
  v4[2] = &v5;
  return sub_1000EA99C((uint64_t (*)(uint64_t, uint64_t))sub_1000ECA78, (uint64_t)v4, a1, a2);
}

void sub_1000ECA78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(uint64_t **)(v3 + 16);
  v8 = *v7;
  v9 = v7[1];
  sub_10009B27C(*v7, v9);
  sub_1001C06D0(a3, a1, a2, v8, v9);
  *(_QWORD *)(a3 + 24) = v10;
}

unint64_t sub_1000ECAE4()
{
  unint64_t result;

  result = qword_10026D920;
  if (!qword_10026D920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback.Position, &type metadata for MotionFeedback.Position);
    atomic_store(result, (unint64_t *)&qword_10026D920);
  }
  return result;
}

uint64_t sub_1000ECB28(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100090F6C(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000ECB8C()
{
  unint64_t result;

  result = qword_10026D930;
  if (!qword_10026D930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionFeedback.Velocity, &type metadata for MotionFeedback.Velocity);
    atomic_store(result, (unint64_t *)&qword_10026D930);
  }
  return result;
}

uint64_t sub_1000ECBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint8_t *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v1 + 16))
  {
    v52 = v3;
    v53 = v5;
    v54 = v2;
    v13 = swift_retain_n(v1, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = (_QWORD *)swift_slowAlloc(32, -1);
      v56 = v51;
      *(_DWORD *)v16 = 136315138;
      v50 = v16 + 4;
      v17 = *(_QWORD *)(v1 + 64);
      v18 = *(_QWORD *)(v1 + 72);
      swift_bridgeObjectRetain(v18);
      v55 = sub_1000906BC(v17, v18, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v50, v16 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "starting txn %s", v16, 0xCu);
      v19 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_release_n(v1, 2);
    }

    v20 = *(_QWORD *)(v1 + 64);
    v21 = *(void **)(v1 + 72);
    v56 = (_QWORD *)0xD00000000000001DLL;
    v57 = 0x80000001001FF210;
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    v23 = v57;
    v24 = String.utf8CString.getter(v56, v57);
    swift_bridgeObjectRelease(v23);
    v25 = os_transaction_create(v24 + 32);
    swift_release(v24);
    v26 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v25;
    swift_unknownObjectRelease(v26);
    sub_1000ABAF4(0, v27);
    v56 = (_QWORD *)0xD000000000000023;
    v57 = 0x80000001001FF230;
    v50 = (uint8_t *)v21;
    v51 = (_QWORD *)v20;
    v28._countAndFlagsBits = v20;
    v28._object = v21;
    String.append(_:)(v28);
    v29 = v56;
    v30 = v57;
    static DispatchQoS.unspecified.getter(v31);
    v56 = _swiftEmptyArrayStorage;
    v32 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v33 = sub_10009061C(&qword_10026D000);
    v34 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v33, v34, v6, v32);
    v35 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v53, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v54);
    v36 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v29, v30, v12, v8, v35, 0);
    v37 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v36;

    v38 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
    objc_msgSend(v38, "timeIntervalSince1970");
    v40 = v39;

    *(_QWORD *)(v1 + 80) = v40;
    *(_BYTE *)(v1 + 88) = 0;
    if (*(double *)(v1 + 56) > 0.0)
    {
      v41 = swift_allocObject(&unk_10023B1F0, 24, 7);
      swift_weakInit(v41 + 16, v1);
      v42 = *(double *)(v1 + 56);
      v43 = *(void **)(v1 + 24);
      objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
      v44 = v43;
      swift_retain(v41);
      v45 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v43, sub_1000ED8D0, v41, v42);
      v46 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v45;
      swift_release(v41);

    }
    result = swift_unknownObjectWeakLoadStrong(v1 + 40);
    if (result)
    {
      v47 = result;
      v48 = *(_QWORD *)(v1 + 48);
      ObjectType = swift_getObjectType(result);
      (*(void (**)(_QWORD *, uint8_t *, uint64_t, uint64_t))(v48 + 8))(v51, v50, ObjectType, v48);
      return swift_unknownObjectRelease(v47);
    }
  }
  return result;
}

void sub_1000ED080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 16))
  {
    v11 = Logger.logObject.getter(v8);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "stopping txn", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = *(void **)(v1 + 24);
    if (v14)
    {
      aBlock[4] = sub_1000ED900;
      v26 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10012357C;
      aBlock[3] = &unk_10023B230;
      v15 = _Block_copy(aBlock);
      v16 = v14;
      v17 = swift_retain(v1);
      static DispatchQoS.unspecified.getter(v17);
      v24 = _swiftEmptyArrayStorage;
      v18 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v19 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v23 = v6;
      v20 = v3;
      v21 = v19;
      v22 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v21, v22, v2, v18);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v23);
      swift_release(v26);
    }
  }
}

uint64_t sub_1000ED2DC(_QWORD *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = (void *)a1[4];
  if (v2)
  {
    v3 = v2;
    dispatch thunk of RepeatingTimer.cancel()();

    v4 = (void *)a1[4];
    a1[4] = 0;

    v5 = (void *)a1[3];
    a1[3] = 0;

  }
  v6 = a1[2];
  a1[2] = 0;
  return swift_unknownObjectRelease(v6);
}

void sub_1000ED330()
{
  uint64_t v0;
  id v1;
  double v2;
  double v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  objc_msgSend(v1, "timeIntervalSince1970");
  v3 = v2;

  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
  {
    __break(1u);
  }
  else if (*(double *)(v0 + 56) < v3 - *(double *)(v0 + 80))
  {
    sub_1000ED080();
    Strong = swift_unknownObjectWeakLoadStrong(v0 + 40);
    if (Strong)
    {
      v5 = Strong;
      v6 = *(_QWORD *)(v0 + 48);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v6 + 16))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), ObjectType, v6);
      swift_unknownObjectRelease(v5);
    }
  }
}

uint64_t sub_1000ED3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  const void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v0 + 24);
  if (v10)
  {
    aBlock[4] = sub_1000B145C;
    v21 = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10012357C;
    aBlock[3] = &unk_10023B208;
    v11 = _Block_copy(aBlock);
    v18 = v2;
    v12 = v11;
    v13 = v10;
    v14 = swift_retain(v0);
    static DispatchQoS.unspecified.getter(v14);
    v19 = _swiftEmptyArrayStorage;
    v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v17 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v16, v17, v1, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v12);
    _Block_release(v12);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return swift_release(v21);
  }
  return result;
}

void sub_1000ED5CC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(double *)(a1 + 56) > 0.0)
  {
    v5 = *(void **)(a1 + 32);
    if (v5)
    {
      v6 = v5;
      dispatch thunk of RepeatingTimer.cancel()(v6, v7, v8, v9, v10);

    }
    v11 = swift_allocObject(&unk_10023B1F0, 24, 7);
    swift_weakInit(v11 + 16, a1);
    v12 = *(double *)(a1 + 56);
    v13 = *(void **)(a1 + 24);
    v14 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
    v15 = v13;
    swift_retain(v11);
    v16 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v13, sub_1000ED8D0, v11, v12);
    v17 = *(id *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v16;
    swift_release(v11);

  }
}

uint64_t sub_1000ED6F4(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  v2 = swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1, v2);
  if (result)
  {
    v4 = result;
    sub_1000ED330();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000ED748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_1000AD02C(v0 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd11Transaction_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000ED7C0()
{
  return type metadata accessor for Transaction(0);
}

uint64_t type metadata accessor for Transaction(uint64_t a1)
{
  uint64_t result;

  result = qword_10026D990;
  if (!qword_10026D990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Transaction);
  return result;
}

uint64_t sub_1000ED804(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = &unk_1001DF788;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_1001DF7A0;
  v4[6] = &unk_1001DF7B8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000ED8AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ED8D0()
{
  uint64_t v0;

  return sub_1000ED6F4(v0);
}

uint64_t sub_1000ED8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ED8F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000ED900()
{
  _QWORD *v0;

  return sub_1000ED2DC(v0);
}

uint64_t sub_1000ED910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  id v12;
  unsigned __int8 v13;

  v2 = v1;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 56) = 1;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_13;
  v4 = sub_100145264(0x6953676F4C78616DLL, 0xEA0000000000657ALL);
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)(v2 + 16) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8 * v4), "integerValue");
    *(_BYTE *)(v2 + 24) = 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_13;
  v6 = sub_100145264(0x79616C6564, 0xE500000000000000);
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v2 + 32) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8 * v6), "integerValue");
    *(_BYTE *)(v2 + 40) = 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_13;
  v8 = sub_100145264(0x746F687370616E73, 0xEC00000065707954);
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(v2 + 48) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8 * v8), "unsignedIntegerValue");
    *(_BYTE *)(v2 + 56) = 0;
  }
  if (*(_QWORD *)(a1 + 16) && (v10 = sub_100145264(0x74617453706D7564, 0xE900000000000065), (v11 & 1) != 0))
  {
    v12 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRelease(a1);
    v13 = objc_msgSend(v12, "BOOLValue");

    *(_BYTE *)(v2 + 57) = v13;
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(a1);
  }
  return v2;
}

unint64_t sub_1000EDA88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v12[2];
  __int128 v13;
  void *v14;

  v1 = v0;
  v2 = sub_1001B0FB8((uint64_t)_swiftEmptyArrayStorage);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + 40) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v10 = *(_QWORD *)(v1 + 32);
    v14 = &type metadata for Int;
    *(_QWORD *)&v13 = v10;
    sub_1000E6004(&v13, v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1001BA88C(v12, 0x79616C6564, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((*(_BYTE *)(v1 + 56) & 1) != 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(v1 + 16);
  v14 = &type metadata for Int;
  *(_QWORD *)&v13 = v8;
  sub_1000E6004(&v13, v12);
  v9 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_1001BA88C(v12, 0x6953676F4C78616DLL, 0xEA0000000000657ALL, v9);
  swift_bridgeObjectRelease(0x8000000000000000);
  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
  {
LABEL_4:
    v3 = *(_QWORD *)(v1 + 48);
    v14 = &type metadata for UInt;
    *(_QWORD *)&v13 = v3;
    sub_1000E6004(&v13, v12);
    v4 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1001BA88C(v12, 0x746F687370616E73, 0xEC00000065707954, v4);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
LABEL_5:
  v5 = *(_BYTE *)(v1 + 57);
  v14 = &type metadata for Bool;
  LOBYTE(v13) = v5;
  sub_1000E6004(&v13, v12);
  v6 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_1001BA88C(v12, 0x74617453706D7564, 0xE900000000000065, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v2;
}

uint64_t sub_1000EDC68()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 58, 7);
}

uint64_t type metadata accessor for AccessoryDiagnosticsOptions(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd27AccessoryDiagnosticsOptions, a2);
}

void sub_1000EDC98(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000EDCF4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000EDDAC + 4 * byte_1001DF827[a2]))(0x6E69686372616573);
}

uint64_t sub_1000EDDAC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E69686372616573 && v1 == 0xE900000000000067)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E69686372616573, 0xE900000000000067, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000067);
  return v2 & 1;
}

void sub_1000EDE9C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1000EDEEC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E69686372616573, 0xE900000000000067);
  swift_bridgeObjectRelease(0xE900000000000067);
  return Hasher._finalize()();
}

uint64_t sub_1000EDFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
  sub_10009B2FC(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 16));
  sub_10009B2FC(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EE030()
{
  return type metadata accessor for AccessoryPairingToken(0);
}

uint64_t type metadata accessor for AccessoryPairingToken(uint64_t a1)
{
  uint64_t result;

  result = qword_10026DC70;
  if (!qword_10026DC70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingToken);
  return result;
}

uint64_t sub_1000EE074(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001DF878;
    v4[2] = &unk_1001DF878;
    v4[3] = &unk_1001DF890;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000EE104(char *a1)
{
  sub_1000EDC98(*a1);
}

void sub_1000EE110()
{
  char *v0;

  sub_1000EDE9C(0, *v0);
}

void sub_1000EE11C()
{
  __asm { BR              X10 }
}

uint64_t sub_1000EE15C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E69686372616573, 0xE900000000000067);
  return swift_bridgeObjectRelease(0xE900000000000067);
}

void sub_1000EE210(uint64_t a1)
{
  char *v1;

  sub_1000EDE9C(a1, *v1);
}

unint64_t sub_1000EE218@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000EEA60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000EE244()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000EE278 + 4 * byte_1001DF83C[*v0]))();
}

void sub_1000EE278(_QWORD *a1@<X8>)
{
  *a1 = 0x6E69686372616573;
  a1[1] = 0xE900000000000067;
}

void sub_1000EE298(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x69746164696C6176;
  a1[1] = v1;
}

void sub_1000EE2B0(char *a1@<X8>)
{
  strcpy(a1, "waitingForAuth");
  a1[15] = -18;
}

void sub_1000EE2D8(_QWORD *a1@<X8>)
{
  *a1 = 0x7A69726F68747561;
  a1[1] = 0xEB00000000676E69;
}

uint64_t sub_1000EE32C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026DC30);
  sub_10008EA50(v0, (uint64_t)qword_10026DC30);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 2020569712, 0xE400000000000000);
}

id sub_1000EE3C4(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for DKProxManager(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for DKProxManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd13DKProxManager, a2);
}

uint64_t sub_1000EE4B4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  _BYTE v17[24];
  id v18;
  _QWORD v19[4];

  v2 = v1;
  if (qword_10026BB58 != -1)
    swift_once(&qword_10026BB58, sub_1000EE32C);
  v4 = type metadata accessor for Logger(0);
  sub_10008EA50(v4, (uint64_t)qword_10026DC30);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v18 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SBS did deactivate service: %{public}@", v8, 0xCu);
    v11 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate, v17, 0, 0);
  sub_1000EE9D8(v12, (uint64_t)&v18);
  if (v19[2])
  {
    sub_10009AFF4((uint64_t)&v18, (uint64_t)v16);
    sub_1000EEA20((uint64_t)&v18);
    sub_10009B038(v16, v16[3]);
    sub_1000C872C();
    sub_100090E88(v16);
  }
  else
  {
    sub_1000EEA20((uint64_t)&v18);
  }
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_discoveryTxn);
  swift_retain(v13);
  sub_1000ED080();
  swift_release(v13);
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard) = 0;
  return swift_release(v14);
}

uint64_t getEnumTagSinglePayload for ProxPairingState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxPairingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000EE880 + 4 * byte_1001DF848[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000EE8B4 + 4 * byte_1001DF843[v4]))();
}

uint64_t sub_1000EE8B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE8BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EE8C4);
  return result;
}

uint64_t sub_1000EE8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EE8D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000EE8DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE8E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProxPairingState()
{
  return &type metadata for ProxPairingState;
}

unint64_t sub_1000EE904()
{
  unint64_t result;

  result = qword_10026DE28;
  if (!qword_10026DE28)
  {
    result = swift_getWitnessTable(&unk_1001DF96C, &type metadata for ProxPairingState);
    atomic_store(result, (unint64_t *)&qword_10026DE28);
  }
  return result;
}

uint64_t sub_1000EE948()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[5];
  _BYTE v4[24];
  _BYTE v5[24];
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate, v4, 0, 0);
  sub_1000EE9D8(v1, (uint64_t)v5);
  if (!v6)
    return sub_1000EEA20((uint64_t)v5);
  sub_10009AFF4((uint64_t)v5, (uint64_t)v3);
  sub_1000EEA20((uint64_t)v5);
  sub_10009B038(v3, v3[3]);
  sub_1000C84A4();
  return sub_100090E88(v3);
}

uint64_t sub_1000EE9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026DE30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EEA20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C((uint64_t *)&unk_10026DE30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000EEA60(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002383F8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

void sub_1000EEAA8(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  if (qword_10026BB58 != -1)
    swift_once(&qword_10026BB58, sub_1000EE32C);
  v2 = type metadata accessor for Logger(0);
  sub_10008EA50(v2, (uint64_t)qword_10026DC30);
  v9 = a1;
  v3 = Logger.logObject.getter(v9);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v10 = v9;
    v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SBS did activate service: %{public}@", v5, 0xCu);
    v8 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

void sub_1000EEC58(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject **v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *oslog;
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    if (qword_10026BB58 != -1)
      swift_once(&qword_10026BB58, sub_1000EE32C);
    v4 = type metadata accessor for Logger(0);
    sub_10008EA50(v4, (uint64_t)qword_10026DC30);
    v5 = a1;
    swift_errorRetain(a2);
    v6 = v5;
    v7 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (_QWORD *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v27 = (uint64_t)v6;
      v28 = v11;
      *(_DWORD *)v9 = 138543618;
      v12 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v9 + 4, v9 + 12);
      *v10 = v6;

      *(_WORD *)(v9 + 12) = 2082;
      swift_getErrorValue(a2, v26, v25);
      v13 = Error.localizedDescription.getter(v25[1], v25[2]);
      v15 = v14;
      v27 = sub_1000906BC(v13, v14, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "SBS invalidated service: %{public}@ with error: %{public}s", (uint8_t *)v9, 0x16u);
      v16 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v10, 1, v16);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      return;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_10026BB58 != -1)
      swift_once(&qword_10026BB58, sub_1000EE32C);
    v17 = type metadata accessor for Logger(0);
    sub_10008EA50(v17, (uint64_t)qword_10026DC30);
    oslog = a1;
    v18 = Logger.logObject.getter(oslog);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138543362;
      v28 = (uint64_t)oslog;
      v22 = oslog;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4, v20 + 12);
      *v21 = oslog;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SBS invalidated service: %{public}@", v20, 0xCu);
      v23 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      return;
    }

  }
}

void sub_1000EF028(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  id v5;

  if (a2)
    a2 = String._bridgeToObjectiveC()();
  v5 = a2;
  (*(void (**)(uint64_t))(a4 + 16))(a4);

}

uint64_t sub_1000EF074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8, v9), v11 = -1 << *(_BYTE *)(a2 + 32), v12 = v10 & ~v11, ((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0))
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v20 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
    do
    {
      v15(v6, *(_QWORD *)(a2 + 48) + v14 * v12, v4);
      v16 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v16);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
      if ((v17 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1000EF1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000EF32C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026DE40);
  sub_10008EA50(v0, (uint64_t)qword_10026DE40);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6C6F636F746F7270, 0xE800000000000000);
}

void sub_1000EF3A0(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;

  v7 = *a1;
  if (objc_msgSend(*a1, "taskState") != 4)
    goto LABEL_8;
  v8 = objc_msgSend(v7, "endowmentNamespaces");
  if (!v8)
    goto LABEL_8;
  v9 = v8;
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, &protocol witness table for String);

  v11 = sub_1000EF1F8(a2, a3, v10);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = objc_msgSend(v7, "process");
  if (!v12)
    goto LABEL_8;
  v13 = v12;
  v14 = objc_msgSend(v12, "bundle");

  if (!v14)
    goto LABEL_8;
  v15 = objc_msgSend(v14, "identifier");

  if (!v15)
    goto LABEL_8;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(v18);
  v20 = sub_1000F77D0(v16, v18, 0);
  if (!v20)
  {
    swift_bridgeObjectRelease(v18);
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    return;
  }

  *a4 = v16;
  a4[1] = v18;
}

void sub_1000EF5A4(void *a1, int a2, void *aBlock, _QWORD *a4)
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  sub_1000F9B1C((void (**)(id, id, _QWORD))v6, a4);
  _Block_release(v6);
  _Block_release(v6);

}

void sub_1000EF624(uint64_t a1, char a2, uint64_t a3, unint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  void *v22;
  os_unfair_lock_s *v23;
  id v24;
  char *v25;
  void *v26;
  char *v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  id v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t *v90;
  double v91;
  __n128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  __int128 v113;
  id v114;
  uint64_t v115;
  _QWORD *v116;
  id v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;
  _QWORD v121[5];
  char v122[24];
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v119 = a5;
  v120 = a4;
  v118 = a1;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v111 - v17;
  if ((a2 & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v79 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v79, v8);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Animator callback, but not connected. Ignoring", v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  v115 = a6;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v19 = qword_100275638;
  v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v21 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v21);
  os_unfair_lock_lock(v21 + 4);
  swift_release(v21);
  v22 = *(void **)(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v23 = *(os_unfair_lock_s **)(v19 + v20);
  v24 = v22;
  swift_retain(v23);
  os_unfair_lock_unlock(v23 + 4);
  swift_release(v23);
  if (!v22)
    return;
  v25 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v116 = (_QWORD *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v26 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v117 = v25;
  v27 = v25;
  v28 = v26;
  OS_dispatch_semaphore.wait()();

  v29 = &v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v122, 0, 0);
  v30 = *(_QWORD *)v29;
  v31 = *(_QWORD *)(*(_QWORD *)v29 + 16);
  if (!v31)
    goto LABEL_10;
  *(_QWORD *)&v113 = v27;
  v114 = v24;
  v32 = v30 + 32;
  swift_bridgeObjectRetain(v30);
  do
  {
    sub_10009AFF4(v32, (uint64_t)v121);
    v33 = *(id *)(*sub_10009B038(v121, v121[3]) + 24);
    DockCoreInfo.identifier.getter(v33);

    DockCoreInfo.identifier.getter(v34);
    LOBYTE(v33) = static UUID.== infix(_:_:)(v18, v16);
    v35 = *(void (**)(char *, uint64_t))(v13 + 8);
    v35(v16, v12);
    v35(v18, v12);
    if ((v33 & 1) != 0)
    {
      swift_bridgeObjectRelease(v30);
      v84 = *(id *)((char *)v116 + (_QWORD)v117);
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v121, (uint64_t)&v123);
      sub_100090E88(v121);

      v24 = v114;
      if (*((_QWORD *)&v124 + 1))
        goto LABEL_11;
      goto LABEL_41;
    }
    sub_100090E88(v121);
    v32 += 40;
    --v31;
  }
  while (v31);
  swift_bridgeObjectRelease(v30);
  v24 = v114;
  v27 = (char *)v113;
LABEL_10:
  v36 = *(id *)((char *)v116 + (_QWORD)v117);
  OS_dispatch_semaphore.signal()();

  v125 = 0;
  v123 = 0u;
  v124 = 0u;

  if (!*((_QWORD *)&v124 + 1))
  {
LABEL_41:

    sub_10009B2C0((uint64_t)&v123, (uint64_t *)&unk_10026DF40);
    return;
  }
LABEL_11:
  v37 = sub_10009061C(&qword_10026C2E0);
  v38 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v121, &v123, v37, v38, 6) & 1) == 0)
  {

    return;
  }
  v39 = v121[0];
  sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  v40 = *(id *)(v39 + 24);
  v41 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v40);
  v42 = static NSObject.== infix(_:_:)(v40, v41);

  if ((v42 & 1) == 0
    || (v43 = *(_QWORD *)(v39 + 16)) == 0
    || (v44 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral,
        (v45 = *(void **)(v43 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral)) == 0))
  {

    swift_release(v39);
    return;
  }
  v46 = (id)v43;
  if (objc_msgSend(v45, "state") != (id)2)
    goto LABEL_88;
  v117 = v46;
  v48 = (_QWORD *)objc_opt_self(CBUUID, v47);
  v49 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v50 = swift_allocObject(v49, 72, 7);
  v113 = xmmword_1001DE690;
  *(_OWORD *)(v50 + 16) = xmmword_1001DE690;
  v51 = &type metadata for UInt32;
  *(_QWORD *)(v50 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v50 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v50 + 32) = 512;
  v52 = (unint64_t)"Swift/Integers.swift";
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v50);
  v54 = v53;
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v54);
  v116 = v48;
  v56 = objc_msgSend(v48, "UUIDWithString:", v55);

  v57 = *(void **)(v43 + v44);
  if (!v57 || (v58 = objc_msgSend(v57, "services")) == 0)
  {

    swift_release(v39);
    return;
  }
  v59 = v58;
  v114 = v24;
  v60 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
  v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

  v62 = v56;
  v63 = (uint64_t)sub_1000F78BC(v61, (uint64_t)v62);
  swift_bridgeObjectRelease(v61);

  if ((unint64_t)v63 >> 62)
    goto LABEL_90;
  v24 = v114;
  if (!*(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_94:

    swift_release(v39);
    swift_bridgeObjectRelease(v63);
    return;
  }
LABEL_20:
  if ((v63 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v64 = *(id *)(v63 + 32);
      goto LABEL_23;
    }
    __break(1u);
LABEL_98:
    if ((v44 & 0x8000000000000000) != 0)
      v109 = v44;
    else
      v109 = v44 & 0xFFFFFFFFFFFFFF8;
    v110 = _CocoaArrayWrapper.endIndex.getter(v109);
    v52 = (unint64_t)v119;
    v46 = v117;
    if (v110)
      goto LABEL_27;
    goto LABEL_102;
  }
  while (2)
  {
    v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v63);
LABEL_23:
    v112 = v64;

    swift_bridgeObjectRelease(v63);
    v65 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v65 + 16) = v113;
    *(_QWORD *)(v65 + 56) = v51;
    *(_QWORD *)(v65 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v65 + 32) = 260;
    String.init(format:_:)(0xD000000000000020, v52 | 0x8000000000000000, v65);
    v67 = v66;
    v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v67);
    v69 = objc_msgSend(v116, "UUIDWithString:", v68);

    if (!*(_QWORD *)(v43 + v44))
    {

LABEL_87:
      v46 = v117;
LABEL_88:

      swift_release(v39);
      return;
    }
    v70 = v112;
    v71 = objc_msgSend(v112, "characteristics");
    if (!v71)
    {

      goto LABEL_87;
    }
    v72 = v71;
    v73 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
    v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, v73);

    v62 = v69;
    v44 = (unint64_t)sub_1000F78BC(v74, (uint64_t)v62);
    swift_bridgeObjectRelease(v74);

    if (v44 >> 62)
      goto LABEL_98;
    v52 = (unint64_t)v119;
    v46 = v117;
    if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_102:

      swift_bridgeObjectRelease(v44);
      goto LABEL_88;
    }
LABEL_27:
    if ((v44 & 0xC000000000000001) != 0)
    {
      v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
LABEL_30:
      v111 = v75;

      swift_bridgeObjectRelease(v44);
      v51 = (_QWORD *)v118;
      v24 = (id)(v118 + 64);
      v76 = 1 << *(_BYTE *)(v118 + 32);
      v77 = -1;
      if (v76 < 64)
        v77 = ~(-1 << v76);
      v43 = v77 & *(_QWORD *)(v118 + 64);
      v78 = (unint64_t)(v76 + 63) >> 6;
      swift_bridgeObjectRetain(v118);
      v63 = 0;
      *(_QWORD *)&v113 = _swiftEmptyArrayStorage;
      v116 = _swiftEmptyArrayStorage;
      if (!v43)
      {
LABEL_46:
        v87 = v63 + 1;
        if (!__OFADD__(v63, 1))
        {
          v62 = &unk_100275000;
          if (v87 >= v78)
            goto LABEL_85;
          v88 = *((_QWORD *)v24 + v87);
          ++v63;
          if (!v88)
          {
            v63 = v87 + 1;
            if (v87 + 1 >= v78)
              goto LABEL_85;
            v88 = *((_QWORD *)v24 + v63);
            if (!v88)
            {
              v63 = v87 + 2;
              if (v87 + 2 >= v78)
                goto LABEL_85;
              v88 = *((_QWORD *)v24 + v63);
              if (!v88)
              {
                v89 = v87 + 3;
                if (v89 >= v78)
                {
LABEL_85:
                  swift_release(v51);
                  sub_10016A6A4();
                  v104 = v113;
                  v105 = v116;
                  v106 = v111;
                  sub_1001783A4(v113, (uint64_t)v116, 256, (uint64_t)v111);
                  swift_bridgeObjectRelease(v104);
                  swift_bridgeObjectRelease(v105);
                  sub_10017AD84(3.0);
                  swift_release(v39);

                  return;
                }
                v88 = *((_QWORD *)v24 + v89);
                if (!v88)
                {
                  while (1)
                  {
                    v63 = v89 + 1;
                    if (__OFADD__(v89, 1))
                      break;
                    if (v63 >= v78)
                      goto LABEL_85;
                    v88 = *((_QWORD *)v24 + v63);
                    ++v89;
                    if (v88)
                      goto LABEL_59;
                  }
                  __break(1u);
                  continue;
                }
                v63 = v89;
              }
            }
          }
LABEL_59:
          v43 = (v88 - 1) & v88;
          v86 = __clz(__rbit64(v88)) + (v63 << 6);
          goto LABEL_60;
        }
        __break(1u);
LABEL_90:
        if (v63 < 0)
          v107 = v63;
        else
          v107 = v63 & 0xFFFFFFFFFFFFFF8;
        v108 = _CocoaArrayWrapper.endIndex.getter(v107);
        v24 = v114;
        if (v108)
          goto LABEL_20;
        goto LABEL_94;
      }
      while (1)
      {
        while (1)
        {
          v85 = __clz(__rbit64(v43));
          v43 &= v43 - 1;
          v86 = v85 | (v63 << 6);
LABEL_60:
          v90 = (uint64_t *)(v51[6] + 16 * v86);
          v49 = *v90;
          v62 = (id)v90[1];
          v91 = *(double *)(v51[7] + 8 * v86);
          v92 = swift_bridgeObjectRetain(v62);
          v44 = v120;
          v93 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)(v49, v62, v52, v115, v92);
          if ((v93 & 0x8000000000000000) == 0)
          {
            v44 = v93;
            if (v93 < v51[2])
              break;
          }
          swift_bridgeObjectRelease(v62);
          if (!v43)
            goto LABEL_46;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
          *(_QWORD *)&v113 = sub_1000E9E10(0, *(_QWORD *)(v113 + 16) + 1, 1, (_QWORD *)v113);
        v95 = *(_QWORD *)(v113 + 16);
        v94 = *(_QWORD *)(v113 + 24);
        if (v95 >= v94 >> 1)
          *(_QWORD *)&v113 = sub_1000E9E10((_QWORD *)(v94 > 1), v95 + 1, 1, (_QWORD *)v113);
        v96 = v113;
        *(_QWORD *)(v113 + 16) = v95 + 1;
        *(_QWORD *)(v96 + 8 * v95 + 32) = v44;
        type metadata accessor for Actuator(0);
        v97 = static Actuator.Pitch.getter();
        if (v49 == v97 && v62 == v98)
          break;
        v100 = v98;
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v62, v97, v98, 0);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v62);
        v52 = (unint64_t)v119;
        if ((v49 & 1) != 0)
          goto LABEL_76;
        if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
          v116 = sub_1000E9D04(0, v116[2] + 1, 1, v116);
        v44 = v116[2];
        v101 = v116[3];
        v62 = (id)(v44 + 1);
        if (v44 >= v101 >> 1)
          v116 = sub_1000E9D04((_QWORD *)(v101 > 1), v44 + 1, 1, v116);
LABEL_81:
        v103 = v116;
        v116[2] = v62;
        *(double *)&v103[v44 + 4] = v91;
        v51 = (_QWORD *)v118;
        if (!v43)
          goto LABEL_46;
      }
      swift_bridgeObjectRelease_n(v62, 2);
      v52 = (unint64_t)v119;
LABEL_76:
      if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
        v116 = sub_1000E9D04(0, v116[2] + 1, 1, v116);
      v44 = v116[2];
      v102 = v116[3];
      v62 = (id)(v44 + 1);
      if (v44 >= v102 >> 1)
        v116 = sub_1000E9D04((_QWORD *)(v102 > 1), v44 + 1, 1, v116);
      v91 = -v91;
      goto LABEL_81;
    }
    break;
  }
  if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v75 = *(id *)(v44 + 32);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_1000F02EC(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *aBlock, void (*a8)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;

  v14 = _Block_copy(aBlock);
  if (a4)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    a4 = v16;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v15 = 0;
  if (a5)
LABEL_3:
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a5, &type metadata for String);
LABEL_4:
  if (a6)
    a6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a6, &type metadata for Double);
  v17 = a3;
  v18 = a1;
  _Block_copy(v14);
  a8(a3, v15, a4, a5, a6, v14);
  _Block_release(v14);
  _Block_release(v14);

  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a5);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_1000F03F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v8[17] = v12;
  v8[18] = v13;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  v9 = type metadata accessor for Logger(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F0468, 0, 0);
}

uint64_t sub_1000F0468()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(_QWORD, id);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;
  Class isa;
  id v13;
  id v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = TrajectoryCommand.encode()();
  *(_QWORD *)(v0 + 176) = v2;
  if (v2 >> 60 == 15)
  {
    v3 = *(void (**)(_QWORD, id))(v0 + 112);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v5 = v4;
    v6 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v6, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v8;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000019;
    *(_QWORD *)(inited + 56) = 0x80000001001FF9D0;
    v9 = sub_1001B0FB8(inited);
    v10 = objc_allocWithZone((Class)NSError);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v13 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 19, isa);

    v14 = v13;
    v3(0, v13);

    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = v1;
    v17 = v2;
    v18 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 184) = v1;
    v19 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 192) = v19;
    v19[2] = v18;
    v19[3] = v16;
    v19[4] = v17;
    v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 200) = v20;
    *v20 = v0;
    v20[1] = sub_1000F0698;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 208, 0, 0, 0xD000000000000012, 0x80000001001FF9F0, sub_1001149E0, v19, &type metadata for Bool);
  }
}

uint64_t sub_1000F0698()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000F06F4, 0, 0);
}

uint64_t sub_1000F06F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void (*v22)(_QWORD, id);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  id v29;
  NSString v30;
  Class isa;
  id v32;
  id v33;
  void (*v34)(uint64_t, _QWORD);

  sub_10009E3A0(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 176));
  if ((*(_BYTE *)(v0 + 208) & 1) != 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v2 = *(_QWORD *)(v0 + 160);
    v1 = *(_QWORD *)(v0 + 168);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = sub_10008EA50(v3, (uint64_t)qword_10026DE40);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering for trajectory progress callback", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 152);
    v14 = *(void **)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    v16 = (_QWORD *)swift_allocObject(&unk_10023B938, 40, 7);
    v16[2] = v14;
    v16[3] = v13;
    v16[4] = v11;
    v17 = *(os_unfair_lock_s **)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
    v18 = (_QWORD *)swift_task_alloc(48);
    v18[2] = v15;
    v18[3] = sub_100114A18;
    v18[4] = v16;
    v19 = swift_task_alloc(32);
    *(_QWORD *)(v19 + 16) = sub_100114A24;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = v14;
    swift_bridgeObjectRetain(v11);
    swift_retain(v17);
    os_unfair_lock_lock(v17 + 4);
    sub_100180780(v21, *(uint64_t (**)(void))(v19 + 16));
    os_unfair_lock_unlock(v17 + 4);
    v34 = *(void (**)(uint64_t, _QWORD))(v0 + 112);
    swift_release(v17);
    swift_release(v16);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    v34(1, 0);
  }
  else
  {
    v22 = *(void (**)(_QWORD, id))(v0 + 112);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v24 = v23;
    v25 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v25, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v27;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000019;
    *(_QWORD *)(inited + 56) = 0x80000001001FF9D0;
    v28 = sub_1001B0FB8(inited);
    v29 = objc_allocWithZone((Class)NSError);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28);
    v32 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v30, 19, isa);

    v33 = v32;
    v22(0, v32);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F0A4C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v21;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v12 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received trajectory progress callback", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v17 = qword_100275638;
  v18 = a1;
  v19 = a2;
  swift_bridgeObjectRetain(a4);
  sub_100173EC0(v17, v18, (uint64_t)v19, a3, a4);

  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_1000F0C08(unsigned int a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  void **v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  unsigned int v54;
  void *v55;
  NSString v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void **aBlock;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[32];

  v64 = a5;
  v65 = a6;
  v66 = a4;
  v69 = a2;
  v63 = sub_10009061C((uint64_t *)&unk_10026E0E0);
  v8 = __chkstk_darwin(v63);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v59 - v12;
  __chkstk_darwin(v11);
  v67 = (char *)&v59 - v14;
  v15 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v59 - v19;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v21 = qword_100275638
      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount;
  swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount, v77, 0, 0);
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)(*(_QWORD *)v21 + 16)
    && (v23 = sub_1001452C8(a1), (v24 & 1) != 0)
    && (v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23), v25 >= 1))
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v26 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 16))(v20, v26, v15);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(18, -1);
      *(_DWORD *)v30 = 67109376;
      LODWORD(aBlock) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v30 + 4, v30 + 8);
      *(_WORD *)(v30 + 8) = 2048;
      aBlock = (void **)v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v72, v30 + 10, v30 + 18);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client %d has %ld pending traj feedback messages, dropping", (uint8_t *)v30, 0x12u);
      swift_slowDealloc(v30, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v20, v15);
  }
  else
  {
    v75 = sub_1000F12C0;
    v76 = 0;
    aBlock = _NSConcreteStackBlock;
    v72 = 1107296256;
    v73 = sub_1000DBE34;
    v74 = &unk_10023B950;
    v32 = _Block_copy(&aBlock);
    v33 = objc_msgSend(v69, "remoteObjectProxyWithErrorHandler:", v32);
    _Block_release(v32);
    _bridgeAnyObjectToAny(_:)(&aBlock);
    swift_unknownObjectRelease(v33);
    v34 = sub_10009061C(&qword_10026DF38);
    result = swift_dynamicCast(&v70, &aBlock, (char *)&type metadata for Any + 8, v34, 6);
    if ((result & 1) != 0)
    {
      v62 = a1;
      v61 = (void *)v70;
      v35 = qword_100275638;
      v36 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
      v37 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
      swift_retain(v37);
      os_unfair_lock_lock(v37 + 4);
      swift_release(v37);
      v38 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
      if (v38)
      {
        swift_retain(*(_QWORD *)(v35 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn));
        sub_1000ED3F4();
        swift_release(v38);
      }
      v39 = *(os_unfair_lock_s **)(v35 + v36);
      swift_retain(v39);
      os_unfair_lock_unlock(v39 + 4);
      swift_release(v39);
      v40 = a3;
      v41 = (uint64_t)v67;
      TrajectoryCommand.Progress.init(nsdata:)();
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v42 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
      v43 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v18, v42, v15);
      v44 = sub_1000ACE4C(v41, (uint64_t)v13, (uint64_t *)&unk_10026E0E0);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc(12, -1);
        v60 = v40;
        v48 = (uint8_t *)v47;
        v49 = (void **)swift_slowAlloc(32, -1);
        aBlock = v49;
        *(_DWORD *)v48 = 136315138;
        sub_1000ACE4C((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_10026E0E0);
        v50 = String.init<A>(describing:)(v10, v63);
        v52 = v51;
        v70 = sub_1000906BC(v50, v51, (uint64_t *)&aBlock);
        v41 = (uint64_t)v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &aBlock, v48 + 4, v48 + 12);
        swift_bridgeObjectRelease(v52);
        sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E0E0);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Sending trajectory progress to client: %s", v48, 0xCu);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        v53 = v48;
        v40 = v60;
        swift_slowDealloc(v53, -1, -1);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v15);
      }
      else
      {
        sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E0E0);

        (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v15);
      }
      v54 = v62;
      sub_10016D840(v62, 1);
      v55 = v61;
      swift_unknownObjectRetain(v61);
      v56 = String._bridgeToObjectiveC()();
      objc_msgSend(v55, "trajectoryProgressFeedbackWithInfo:system:progress:", v66, v56, v40);
      swift_unknownObjectRelease(v55);

      v57 = swift_allocObject(&unk_10023B988, 20, 7);
      *(_DWORD *)(v57 + 16) = v54;
      v75 = sub_100114A50;
      v76 = v57;
      aBlock = _NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_10012357C;
      v74 = &unk_10023B9A0;
      v58 = _Block_copy(&aBlock);
      swift_release(v76);
      objc_msgSend(v69, "scheduleSendBarrierBlock:", v58);
      _Block_release(v58);
      swift_unknownObjectRelease(v55);
      return sub_10009B2C0(v41, (uint64_t *)&unk_10026E0E0);
    }
  }
  return result;
}

uint64_t sub_1000F1384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v8 = type metadata accessor for Logger(0);
  v7[7] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[8] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[9] = swift_task_alloc(v10);
  v7[10] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
  v7[11] = v11;
  *v11 = v7;
  v11[1] = sub_1000F140C;
  return sub_1000DFA04();
}

uint64_t sub_1000F140C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1000F1460, 0, 0);
}

uint64_t sub_1000F1460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  *(_QWORD *)(v2 + 96) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = type metadata accessor for AccessoryDiagnosticsOptions(0, a2);
    swift_allocObject(v5, 58, 7);
    swift_retain(v3);
    swift_bridgeObjectRetain(v4);
    v7 = sub_1000ED910(v6);
    *(_QWORD *)(v2 + 104) = v7;
    v8 = (_QWORD *)swift_task_alloc(dword_10026CC04);
    *(_QWORD *)(v2 + 112) = v8;
    *v8 = v2;
    v8[1] = sub_1000F162C;
    return sub_1000BD554(v7);
  }
  else
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v10 = *(_QWORD *)(v2 + 80);
    v11 = *(_QWORD *)(v2 + 56);
    v12 = *(_QWORD *)(v2 + 64);
    v13 = sub_10008EA50(v11, (uint64_t)qword_10026DE40);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v13, v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Diagnostics manager is nil", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v2 + 80);
    v19 = *(_QWORD *)(v2 + 56);
    v20 = *(_QWORD *)(v2 + 64);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 32);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    v21(0, 0, 0);
    v22 = *(_QWORD *)(v2 + 72);
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_1000F162C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 112);
  *(_QWORD *)(*v3 + 120) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000F1714;
  }
  else
  {
    *(_QWORD *)(v6 + 128) = a2;
    *(_QWORD *)(v6 + 136) = a1;
    v8 = sub_1000F16A4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000F16A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 136), v1, 0);
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease(v1);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F1714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, void *);
  void *v19;
  uint64_t v20;

  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = sub_10008EA50(v4, (uint64_t)qword_10026DE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v10);
    v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Diagnostics transfer failed: %@", v11, 0xCu);
    v14 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_errorRelease(v10);
  }

  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v18 = *(void (**)(_QWORD, _QWORD, void *))(v0 + 32);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v19 = (void *)_convertErrorToNSError(_:)(v15);
  v18(0, 0, v19);
  swift_release(v17);
  swift_release(v16);

  swift_errorRelease(v15);
  v20 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F1CBC(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t), void *a3, char *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  id v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v27;
  _BYTE v29[24];

  v13 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  objc_msgSend(v13, "timeIntervalSince1970");
  v15 = v14;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v16 = qword_100275638;
  sub_1001743B0(v15, (uint64_t)a1, (uint64_t)a2, a3, a5, a6);
  v17 = sub_1001C1AD0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v17);
  v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v19 = *(os_unfair_lock_s **)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v19);
  os_unfair_lock_lock(v19 + 4);
  swift_release(v19);
  v20 = (uint64_t *)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v29, 0, 0);
  v21 = *v20;
  v22 = *(os_unfair_lock_s **)(v16 + v18);
  swift_bridgeObjectRetain(*v20);
  swift_retain(v22);
  os_unfair_lock_unlock(v22 + 4);
  swift_release(v22);
  v23 = qword_100275638;
  swift_bridgeObjectRetain(v21);
  v24 = v27;
  v25 = a1;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  sub_1001745BC(v23, v21, a7 | ((HIDWORD(a7) & 1) << 32), v24, (uint64_t)v25, a2, (uint64_t)a3, a4, v15);
  swift_bridgeObjectRelease_n(v21, 2);

  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a5);
  return swift_bridgeObjectRelease(a6);
}

unint64_t sub_1000F1ED0(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t (*a7)(char *, uint64_t, uint64_t), uint64_t a8, double a9, char *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t result;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  char *v61;
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  os_unfair_lock_s *v88;
  char *v89;
  NSString v90;
  Class isa;
  Class v92;
  Class v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  char *v129;
  id v130;
  uint64_t (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138[4];
  char v139[24];
  __int128 aBlock;
  __int128 v141;
  void *v142;
  uint64_t v143;
  char v144[32];

  v132 = a8;
  v131 = a7;
  v135 = a5;
  v136 = a6;
  v130 = a2;
  v14 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v14);
  v129 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD **)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v125 - v21;
  v134 = type metadata accessor for Logger(0);
  v133 = *(_QWORD *)(v134 - 8);
  v23 = __chkstk_darwin(v134);
  v128 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v125 - v26;
  result = __chkstk_darwin(v25);
  v30 = (char *)&v125 - v29;
  if (!*(_QWORD *)(a3 + 16))
    return result;
  result = sub_1001452C8(a1);
  if ((v31 & 1) == 0)
    return result;
  v32 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
  if ((a4 & 0x100000000) == 0 && (_DWORD)a4 != a1)
    return result;
  v127 = a1;
  v33 = qword_10026BC00;
  swift_bridgeObjectRetain(v32);
  if (v33 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v34 = (uint64_t *)(qword_100275638
                  + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
  v35 = swift_beginAccess(qword_100275638+ OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount, v144, 0, 0);
  v36 = *v34;
  if (!*(_QWORD *)(v36 + 16)
    || (v37 = sub_1001452C8(v127), (v38 & 1) == 0)
    || (v39 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37), v39 < 1))
  {
    *(_QWORD *)&v135[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount] = 0;
    v71 = DockCoreInfo.description.getter(v35);
    v73 = v72;
    if (!*(_QWORD *)(v32 + 16))
      goto LABEL_36;
    v74 = v71;
    swift_bridgeObjectRetain(v32);
    sub_100145264(v74, v73);
    if ((v75 & 1) == 0)
    {
      swift_bridgeObjectRelease(v73);
      return swift_bridgeObjectRelease_n(v32, 2);
    }
    swift_bridgeObjectRelease(v32);
    if (*(_QWORD *)(v32 + 16) && (v76 = sub_100145264(v74, v73), (v77 & 1) != 0))
    {
      v78 = *(_QWORD *)(v32 + 56) + 32 * v76;
      v20 = *(char **)v78;
      v16 = *(_QWORD *)(v78 + 8);
      v17 = *(_QWORD **)(v78 + 16);
      v79 = *(_QWORD *)(v78 + 24);
      swift_bridgeObjectRetain_n(v16, 2);
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v32);
      v80 = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRetain(a10);
      v81 = sub_100104918((uint64_t)v20, v16, v17, (uint64_t)v131, v80, a10);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(a10);
      swift_bridgeObjectRelease(v80);
      if ((v81 & 1) != 0)
      {
        v142 = sub_1000F12C0;
        v143 = 0;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v141 = sub_1000DBE34;
        *((_QWORD *)&v141 + 1) = &unk_10023B450;
        v82 = _Block_copy(&aBlock);
        v83 = objc_msgSend(v130, "remoteObjectProxyWithErrorHandler:", v82);
        _Block_release(v82);
        _bridgeAnyObjectToAny(_:)(&aBlock);
        swift_unknownObjectRelease(v83);
        v84 = sub_10009061C(&qword_10026DF38);
        if (swift_dynamicCast(&v137, &aBlock, (char *)&type metadata for Any + 8, v84, 6))
        {
          v126 = v79;
          v135 = a10;
          v129 = (char *)v137;
          v85 = qword_100275638;
          v27 = (char *)OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          v86 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain(v86);
          os_unfair_lock_lock(v86 + 4);
          swift_release(v86);
          v87 = *(_QWORD *)(v85 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v87)
          {
            swift_retain(*(_QWORD *)(v85 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn));
            sub_1000ED3F4();
            swift_release(v87);
          }
          v88 = *(os_unfair_lock_s **)&v27[v85];
          swift_retain(v88);
          os_unfair_lock_unlock(v88 + 4);
          swift_release(v88);
          LODWORD(v27) = v127;
          sub_10016D840(v127, 0);
          v89 = v129;
          swift_unknownObjectRetain(v129);
          v90 = String._bridgeToObjectiveC()();
          isa = Array._bridgeToObjectiveC()().super.isa;
          v92 = Array._bridgeToObjectiveC()().super.isa;
          v93 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v89, "actuatorFeedbackWithInfo:system:actuators:positions:velocities:timestamp:", v136, v90, isa, v92, v93, a9);
          swift_unknownObjectRelease(v89);

          v94 = swift_allocObject(&unk_10023B488, 20, 7);
          *(_DWORD *)(v94 + 16) = (_DWORD)v27;
          v142 = sub_100114194;
          v143 = v94;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v141 = sub_10012357C;
          *((_QWORD *)&v141 + 1) = &unk_10023B4A0;
          v95 = _Block_copy(&aBlock);
          swift_release(v143);
          objc_msgSend(v130, "scheduleSendBarrierBlock:", v95);
          _Block_release(v95);
          v96 = ActuatorOccurrence.rawValue.getter(v126);
          if (v96 != ActuatorOccurrence.rawValue.getter(0))
          {
            swift_bridgeObjectRelease(v17);
            swift_bridgeObjectRelease(v16);
            return swift_unknownObjectRelease(v89);
          }
          if (qword_10026BB60 == -1)
            goto LABEL_34;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease(v17);
      v115 = v16;
    }
    else
    {
LABEL_36:
      swift_bridgeObjectRelease(v73);
      v115 = v32;
    }
    return swift_bridgeObjectRelease(v115);
  }
  swift_bridgeObjectRelease(v32);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v40 = v134;
  v41 = sub_10008EA50(v134, (uint64_t)qword_10026DE40);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 16);
  v132 = v41;
  v131 = v42;
  v43 = ((uint64_t (*)(char *))v42)(v30);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(18, -1);
    *(_DWORD *)v46 = 67109376;
    LODWORD(aBlock) = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v46 + 4, v46 + 8);
    *(_WORD *)(v46 + 8) = 2048;
    *(_QWORD *)&aBlock = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v46 + 10, v46 + 18);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Client %d has %ld pending actuator feedback messages, dropping", (uint8_t *)v46, 0x12u);
    v47 = v46;
    v40 = v134;
    swift_slowDealloc(v47, -1, -1);
  }

  v48 = *(uint64_t (**)(char *, uint64_t))(v133 + 8);
  result = v48(v30, v40);
  v49 = *(_QWORD *)&v135[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount];
  v50 = __OFADD__(v49, 1);
  v51 = v49 + 1;
  if (v50)
  {
    __break(1u);
LABEL_50:
    swift_once(&qword_10026BB60, sub_1000EF32C);
LABEL_34:
    v97 = v134;
    v98 = sub_10008EA50(v134, (uint64_t)qword_10026DE40);
    v99 = v133;
    v100 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v128, v98, v97);
    swift_bridgeObjectRetain_n(v16, 3);
    swift_bridgeObjectRetain_n(v17, 3);
    v101 = v135;
    v102 = swift_bridgeObjectRetain_n(v135, 2);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.default.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = swift_slowAlloc(32, -1);
      v130 = (id)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v130;
      *(_DWORD *)v105 = 136315650;
      swift_bridgeObjectRetain(v16);
      v137 = sub_1000906BC((uint64_t)v20, v16, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v105 + 4, v105 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease_n(v16, 3);
      *(_WORD *)(v105 + 12) = 2080;
      swift_bridgeObjectRetain(v17);
      v27 = (char *)Array.description.getter(v106, &type metadata for String);
      v108 = v107;
      swift_bridgeObjectRelease(v17);
      v109 = (uint64_t)v27;
      LODWORD(v27) = v127;
      v137 = sub_1000906BC(v109, v108, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v105 + 14, v105 + 22);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease(v108);
      *(_WORD *)(v105 + 22) = 2080;
      swift_bridgeObjectRetain(v135);
      v110 = Array.description.getter(v135, &type metadata for String);
      v112 = v111;
      swift_bridgeObjectRelease(v135);
      v113 = v110;
      v101 = v135;
      v137 = sub_1000906BC(v113, v112, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v105 + 24, v105 + 32);
      swift_bridgeObjectRelease_n(v101, 2);
      swift_bridgeObjectRelease(v112);
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Client rule (%s, %s) notified once, removing actuators %s from notification rule", (uint8_t *)v105, 0x20u);
      v114 = v130;
      swift_arrayDestroy(v130, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      (*(void (**)(char *, uint64_t))(v133 + 8))(v128, v97);
    }
    else
    {

      swift_bridgeObjectRelease_n(v101, 2);
      swift_bridgeObjectRelease_n(v17, 4);
      swift_bridgeObjectRelease_n(v16, 4);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v97);
    }
    v124 = sub_1001645F0(v27, v136, (uint64_t)v131, v132, v101, 0);
    swift_unknownObjectRelease(v129);
    v115 = v124;
    return swift_bridgeObjectRelease(v115);
  }
  *(_QWORD *)&v135[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount] = v51;
  if (v51 >= 6)
  {
    v52 = v134;
    v53 = v131(v27, v132, v134);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Dropped feedback for more than 5 times. Stopping feedback", v56, 2u);
      v57 = v56;
      v52 = v134;
      swift_slowDealloc(v57, -1, -1);
    }

    v48(v27, v52);
    v58 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v59 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v60 = *(void **)&v58[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v61 = v58;
    v62 = v60;
    OS_dispatch_semaphore.wait()();

    v63 = &v61[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v61[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v139, 0, 0);
    v64 = *(_QWORD *)v63;
    v65 = *(_QWORD *)(*(_QWORD *)v63 + 16);
    if (v65)
    {
      v134 = v59;
      v135 = v61;
      v66 = v64 + 32;
      swift_bridgeObjectRetain(v64);
      while (1)
      {
        sub_10009AFF4(v66, (uint64_t)&v137);
        v67 = *(id *)(*sub_10009B038(&v137, v138[2]) + 24);
        DockCoreInfo.identifier.getter(v67);

        DockCoreInfo.identifier.getter(v68);
        LOBYTE(v67) = static UUID.== infix(_:_:)(v22, v20);
        v69 = (void (*)(char *, uint64_t))v17[1];
        v69(v20, v16);
        v69(v22, v16);
        if ((v67 & 1) != 0)
          break;
        sub_100090E88(&v137);
        v66 += 40;
        if (!--v65)
        {
          swift_bridgeObjectRelease(v64);
          v61 = v135;
          v59 = v134;
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease(v64);
      v116 = *(id *)&v58[v134];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)&v137, (uint64_t)&aBlock);
      sub_100090E88(&v137);

    }
    else
    {
LABEL_23:
      v70 = *(id *)&v58[v59];
      OS_dispatch_semaphore.signal()();

      v142 = 0;
      aBlock = 0u;
      v141 = 0u;

    }
    if (*((_QWORD *)&v141 + 1))
    {
      v117 = sub_10009061C(&qword_10026C2E0);
      v118 = type metadata accessor for DaemonAccessory(0);
      result = swift_dynamicCast(&v137, &aBlock, v117, v118, 6);
      if ((result & 1) != 0)
      {
        v119 = v137;
        v120 = type metadata accessor for TaskPriority(0);
        v121 = (uint64_t)v129;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v129, 1, 1, v120);
        v122 = (_QWORD *)swift_allocObject(&unk_10023B4D8, 40, 7);
        v122[2] = 0;
        v122[3] = 0;
        v122[4] = v119;
        v123 = sub_10018A9B0(v121, (uint64_t)&unk_10026E020, (uint64_t)v122);
        return swift_release(v123);
      }
    }
    else
    {
      return sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
    }
  }
  return result;
}

uint64_t sub_1000F2C8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_100270224);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000F2CD8;
  return sub_100179530();
}

uint64_t sub_1000F2CD8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100114B40, 0, 0);
}

uint64_t sub_1000F2D34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v6 = sub_10008EA50(v2, (uint64_t)qword_10026DE40);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v17 = v3;
    v11 = (uint8_t *)v10;
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed something on remote proxy: %@", v11, 0xCu);
    v14 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    v15 = v11;
    v3 = v17;
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1000F2F38(unsigned int a1, char a2)
{
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  return sub_10016DAE8(a1, a2);
}

uint64_t sub_1000F2F9C(int a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  NSObject *v51;
  __int128 v52;
  int v53;
  char *v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  _QWORD v60[4];
  _BYTE v61[24];

  LODWORD(v5) = a1;
  v6 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
LABEL_46:
    swift_once(&qword_10026BC00, sub_100158DF8);
  v8 = qword_100275638;
  v9 = sub_1001C1AD0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v9);
  v10 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v11 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v11);
  os_unfair_lock_lock(v11 + 4);
  swift_release(v11);
  v12 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v61, 0, 0);
  v13 = *v12;
  v14 = *(os_unfair_lock_s **)(v8 + v10);
  swift_bridgeObjectRetain(v13);
  swift_retain(v14);
  os_unfair_lock_unlock(v14 + 4);
  swift_release(v14);
  if (!*(_QWORD *)(v13 + 16))
    return swift_bridgeObjectRelease(v13);
  v15 = sub_1001452C8(v5);
  if ((v16 & 1) == 0)
    return swift_bridgeObjectRelease(v13);
  v55 = a2;
  v56 = v6;
  v53 = v5;
  v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
  swift_bridgeObjectRetain(v17);
  result = swift_bridgeObjectRelease(v13);
  v6 = 0;
  v5 = 0;
  v20 = v17 + 64;
  v21 = 1 << *(_BYTE *)(v17 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v17 + 64);
  a2 = (void *)((unint64_t)(v21 + 63) >> 6);
  *(_QWORD *)&v19 = 138412546;
  v52 = v19;
  v54 = (char *)&type metadata for Any + 8;
  while (v23)
  {
    v26 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    v27 = v26 | (v5 << 6);
LABEL_28:
    v31 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * v27);
    v33 = *v31;
    v32 = v31[1];
    v34 = swift_bridgeObjectRetain(v32);
    v35 = DockCoreInfo.description.getter(v34);
    if (v33 == v35 && v32 == v36)
    {
      result = swift_bridgeObjectRelease_n(v32, 2);
      if ((v6 & 1) == 0)
      {
LABEL_34:
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v38 = v56;
        v39 = sub_10008EA50(v56, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v39, v38);
        v40 = a3;
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(18, -1);
          v51 = v40;
          v44 = v43;
          v45 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v44 = v52;
          *(_QWORD *)(v44 + 4) = v51;
          *v45 = a3;
          *(_WORD *)(v44 + 12) = 1024;
          *(_DWORD *)(v44 + 14) = v53;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "DockAccessory %@ was disconnected, invalidating XPC for feedback client: %d", (uint8_t *)v44, 0x12u);
          v46 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v45, 1, v46);
          swift_slowDealloc(v45, -1, -1);
          v38 = v56;
          swift_slowDealloc(v44, -1, -1);
        }
        else
        {

          v41 = v40;
        }

        (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v38);
        v47 = objc_msgSend(v55, "remoteObjectProxy");
        _bridgeAnyObjectToAny(_:)(v60);
        swift_unknownObjectRelease(v47);
        v48 = sub_10009061C(&qword_10026DF38);
        result = swift_dynamicCast(&v59, v60, v54, v48, 6);
        if ((result & 1) != 0)
        {
          v49 = v59;
          objc_msgSend(v59, "disconnectedWithErr:", 0);
          result = swift_unknownObjectRelease(v49);
        }
        v6 = 1;
      }
    }
    else
    {
      v24 = v36;
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, v35, v36, 0);
      swift_bridgeObjectRelease(v24);
      result = swift_bridgeObjectRelease(v32);
      if (!(v6 & 1 | ((v25 & 1) == 0)))
        goto LABEL_34;
    }
  }
  v28 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v28 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v28);
  ++v5;
  if (v29)
    goto LABEL_27;
  v5 = v28 + 1;
  if (v28 + 1 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v5);
  if (v29)
    goto LABEL_27;
  v5 = v28 + 2;
  if (v28 + 2 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v5);
  if (v29)
    goto LABEL_27;
  v5 = v28 + 3;
  if (v28 + 3 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v5);
  if (v29)
    goto LABEL_27;
  v5 = v28 + 4;
  if (v28 + 4 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v5);
  if (v29)
  {
LABEL_27:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v5 << 6);
    goto LABEL_28;
  }
  v30 = v28 + 5;
  if (v30 >= (uint64_t)a2)
    return swift_release(v17);
  v29 = *(_QWORD *)(v20 + 8 * v30);
  if (v29)
  {
    v5 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    v5 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v5 >= (uint64_t)a2)
      return swift_release(v17);
    v29 = *(_QWORD *)(v20 + 8 * v5);
    ++v30;
    if (v29)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F3578(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_100270224);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000F35C4;
  return sub_100179530();
}

uint64_t sub_1000F35C4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000F3620, 0, 0);
}

uint64_t sub_1000F3620()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F364C(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(void *, uint64_t, uint64_t, void *))
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  v10 = _Block_copy(aBlock);
  if (a4)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    a4 = v12;
  }
  else
  {
    v11 = 0;
  }
  _Block_copy(v10);
  v13 = a3;
  v14 = a1;
  a6(a3, v11, a4, v10);
  _Block_release(v10);
  _Block_release(v10);

  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_1000F36FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F375C, 0, 0);
}

uint64_t sub_1000F375C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = sub_10008EA50(v3, (uint64_t)qword_10026DE40);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sending feedback request to accessory", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v10 = v0[4];
  v9 = v0[5];
  v11 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v12 = (_QWORD *)swift_task_alloc(dword_10027021C);
  v0[6] = v12;
  *v12 = v0;
  v12[1] = sub_1000F3884;
  return sub_100179108();
}

uint64_t sub_1000F3884()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F38D4(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t), void *a7, unsigned int a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char v101[24];
  char v102[24];
  _BYTE v103[32];
  char v104[24];
  uint64_t v105;
  _BYTE v106[12];
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  char *v110;

  v98 = a6;
  v93 = a3;
  v92 = a2;
  v94 = a1;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = _swiftEmptyArrayStorage;
  v110 = (char *)_swiftEmptyArrayStorage;
  v108 = _swiftEmptyArrayStorage;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(a4);
  v97 = v17;
  if (!v17)
  {
    v78 = (char *)_swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease(v78);
  }
  v85 = a4;
  v18 = *(_QWORD *)(a5 + 16);
  v91 = a7;
  v96 = v18;
  v88 = v13;
  v87 = v14;
  v86 = v16;
  if (!v18)
    goto LABEL_55;
  v84 = a8;
  v19 = v94;
  v20 = v94[2];
  v95 = a5 + 32;
  v90 = v92 + 32;
  v89 = v93 + 32;
  v83 = a5;
  swift_bridgeObjectRetain(a5);
  v21 = 0;
  v100 = v20 - 2;
  v99 = (uint64_t)(v19 + 6);
  v22 = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v25 = (uint64_t *)(v95 + 16 * v21);
    v26 = *v25;
    v27 = v25[1];
    v28 = swift_bridgeObjectRetain(v27);
    v29 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)(v26, v27, v98, a7, v28);
    if (!v20)
      goto LABEL_6;
    if (v94[4] == v29)
    {
      swift_bridgeObjectRetain(v27);
      v30 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      if (v20 == 1)
        goto LABEL_6;
      if (v94[5] != v29)
      {
        v41 = 0;
        while (v100 != v41)
        {
          v42 = *(_QWORD *)(v99 + 8 * v41++);
          if (v42 == v29)
          {
            swift_bridgeObjectRetain(v27);
            v30 = v41 + 1;
            if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) != 0)
              goto LABEL_11;
            goto LABEL_31;
          }
        }
LABEL_6:
        swift_bridgeObjectRelease(v27);
        goto LABEL_7;
      }
      swift_bridgeObjectRetain(v27);
      v30 = 1;
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) != 0)
      {
        v30 = 1;
        goto LABEL_11;
      }
    }
LABEL_31:
    v24 = (char *)sub_1000E9698(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
LABEL_11:
    v32 = *((_QWORD *)v24 + 2);
    v31 = *((_QWORD *)v24 + 3);
    if (v32 >= v31 >> 1)
      v24 = (char *)sub_1000E9698((_QWORD *)(v31 > 1), v32 + 1, 1, v24);
    *((_QWORD *)v24 + 2) = v32 + 1;
    v33 = &v24[16 * v32];
    *((_QWORD *)v33 + 4) = v26;
    *((_QWORD *)v33 + 5) = v27;
    v110 = v24;
    if (v30 < *(_QWORD *)(v92 + 16))
    {
      type metadata accessor for Actuator(0);
      v35 = static Actuator.Pitch.getter();
      v36 = v34;
      if (v26 == v35 && v27 == v34)
      {
        swift_bridgeObjectRelease(v27);
      }
      else
      {
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v35, v34, 0);
        swift_bridgeObjectRelease(v36);
        if ((v37 & 1) == 0)
        {
          v43 = *(_QWORD *)(v90 + 8 * v30);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
            v23 = sub_1000E9D04(0, v23[2] + 1, 1, v23);
          v45 = v23[2];
          v44 = v23[3];
          if (v45 >= v44 >> 1)
            v23 = sub_1000E9D04((_QWORD *)(v44 > 1), v45 + 1, 1, v23);
          v23[2] = v45 + 1;
          v23[v45 + 4] = v43;
          goto LABEL_37;
        }
      }
      v38 = *(double *)(v90 + 8 * v30);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
        v23 = sub_1000E9D04(0, v23[2] + 1, 1, v23);
      v40 = v23[2];
      v39 = v23[3];
      if (v40 >= v39 >> 1)
        v23 = sub_1000E9D04((_QWORD *)(v39 > 1), v40 + 1, 1, v23);
      v23[2] = v40 + 1;
      *(double *)&v23[v40 + 4] = -v38;
LABEL_37:
      v109 = v23;
    }
    if (v30 >= *(_QWORD *)(v93 + 16))
    {
      swift_bridgeObjectRelease(v27);
      a7 = v91;
      goto LABEL_7;
    }
    type metadata accessor for Actuator(0);
    v47 = static Actuator.Pitch.getter();
    v48 = v46;
    if (v26 == v47 && v27 == v46)
    {
      swift_bridgeObjectRelease_n(v27, 2);
LABEL_44:
      v50 = *(double *)(v89 + 8 * v30);
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        v22 = sub_1000E9D04(0, v22[2] + 1, 1, v22);
      a7 = v91;
      v52 = v22[2];
      v51 = v22[3];
      if (v52 >= v51 >> 1)
        v22 = sub_1000E9D04((_QWORD *)(v51 > 1), v52 + 1, 1, v22);
      v22[2] = v52 + 1;
      *(double *)&v22[v52 + 4] = -v50;
      v108 = v22;
      goto LABEL_7;
    }
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v47, v46, 0);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v27);
    if ((v49 & 1) != 0)
      goto LABEL_44;
    v53 = *(_QWORD *)(v89 + 8 * v30);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      v22 = sub_1000E9D04(0, v22[2] + 1, 1, v22);
    a7 = v91;
    v55 = v22[2];
    v54 = v22[3];
    if (v55 >= v54 >> 1)
      v22 = sub_1000E9D04((_QWORD *)(v54 > 1), v55 + 1, 1, v22);
    v22[2] = v55 + 1;
    v22[v55 + 4] = v53;
    v108 = v22;
LABEL_7:
    ++v21;
  }
  while (v21 != v96);
  swift_bridgeObjectRelease(v83);
  a8 = v84;
  v13 = v88;
  v14 = v87;
  v16 = v86;
LABEL_55:
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v56 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
  v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v56, v13);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = swift_slowAlloc(38, -1);
    v99 = swift_slowAlloc(96, -1);
    v107 = v99;
    *(_DWORD *)v60 = 67109890;
    LODWORD(v105) = a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, (char *)&v105 + 4, v60 + 4, v60 + 8);
    *(_WORD *)(v60 + 8) = 2080;
    swift_beginAccess(&v110, v103, 0, 0);
    v61 = v110;
    swift_bridgeObjectRetain(v110);
    v63 = Array.description.getter(v62, &type metadata for String);
    v100 = a9;
    v64 = v63;
    v66 = v65;
    swift_bridgeObjectRelease(v61);
    v105 = sub_1000906BC(v64, v66, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v60 + 10, v60 + 18);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v60 + 18) = 2080;
    swift_beginAccess(&v109, v102, 0, 0);
    v67 = v109;
    swift_bridgeObjectRetain(v109);
    v69 = Array.description.getter(v68, &type metadata for Double);
    v71 = v70;
    swift_bridgeObjectRelease(v67);
    v105 = sub_1000906BC(v69, v71, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v60 + 20, v60 + 28);
    swift_bridgeObjectRelease(v71);
    *(_WORD *)(v60 + 28) = 2080;
    a7 = v91;
    swift_beginAccess(&v108, v101, 0, 0);
    v72 = v108;
    swift_bridgeObjectRetain(v108);
    v74 = Array.description.getter(v73, &type metadata for Double);
    v76 = v75;
    swift_bridgeObjectRelease(v72);
    v105 = sub_1000906BC(v74, v76, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v60 + 30, v60 + 38);
    swift_bridgeObjectRelease(v76);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "%d Received feedback a=%s p=%s v=%s", (uint8_t *)v60, 0x26u);
    v77 = v99;
    swift_arrayDestroy(v99, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  swift_beginAccess(&v110, &v107, 0, 0);
  v78 = v110;
  swift_beginAccess(&v109, &v105, 0, 0);
  v79 = (uint64_t)v109;
  swift_beginAccess(&v108, v104, 0, 0);
  v80 = (uint64_t)v108;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  v103[28] = 0;
  sub_1000F1CBC(v85, v98, a7, v78, v79, v80, a8);

  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease_n(v79, 2);
  swift_bridgeObjectRelease_n(v80, 2);
  return swift_bridgeObjectRelease(v78);
}

void sub_1000F4420(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  os_log_type_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47[4];

  v42 = a4;
  v39 = a2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = swift_bridgeObjectRetain(a1);
  if (!v12)
  {
LABEL_24:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_3:
  if (v12 >= 1)
  {
    v14 = 0;
    v45 = a1 & 0xC000000000000001;
    v44 = (char *)&type metadata for Any + 8;
    v13.n128_u64[0] = 136315394;
    v36 = v13;
    v37 = v8;
    v38 = a5;
    v40 = v9;
    v41 = v12;
    while (1)
    {
      if (v45)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a1);
      else
        v15 = *(id *)(a1 + 8 * v14 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, "remoteObjectProxy", *(_OWORD *)&v36);
      _bridgeAnyObjectToAny(_:)(v47);
      swift_unknownObjectRelease(v17);
      v18 = sub_10009061C(&qword_10026E078);
      if (swift_dynamicCast(&v46, v47, v44, v18, 6))
      {
        v43 = v46;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v19 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
        v20 = swift_bridgeObjectRetain_n(a3, 2);
        v21 = Logger.logObject.getter(v20);
        v22 = v11;
        v23 = static os_log_type_t.default.getter(v21);
        if (os_log_type_enabled(v21, v23))
        {
          v24 = a3;
          v25 = swift_slowAlloc(22, -1);
          v26 = swift_slowAlloc(64, -1);
          v47[0] = v26;
          *(_DWORD *)v25 = v36.n128_u32[0];
          swift_bridgeObjectRetain(v24);
          *(_QWORD *)(v25 + 4) = sub_1000906BC(v39, v24, v47);
          swift_bridgeObjectRelease_n(v24, 3);
          *(_WORD *)(v25 + 12) = 2080;
          v27 = DockFramingMode.description.getter(v42);
          v28 = a1;
          v30 = v29;
          *(_QWORD *)(v25 + 14) = sub_1000906BC(v27, v29, v47);
          v31 = v30;
          a1 = v28;
          swift_bridgeObjectRelease(v31);
          _os_log_impl((void *)&_mh_execute_header, v21, v23, "Notifying client that %s just set framing mode to %s", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
          v32 = v26;
          a5 = v38;
          swift_slowDealloc(v32, -1, -1);
          v33 = v25;
          a3 = v24;
          v8 = v37;
          swift_slowDealloc(v33, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        v9 = v40;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v8);
        v11 = v22;
        v34 = v43;
        objc_msgSend(v43, "setFramingModeEventWithMode:", v42);
        swift_unknownObjectRelease(v34);

        v12 = v41;
        if (__OFADD__(*a5, 1))
        {
          __break(1u);
LABEL_20:
          if (a1 < 0)
            v35 = a1;
          else
            v35 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v12 = _CocoaArrayWrapper.endIndex.getter(v35);
          if (!v12)
            goto LABEL_24;
          goto LABEL_3;
        }
        ++*a5;
      }
      else
      {

      }
      if (v12 == ++v14)
        goto LABEL_24;
    }
  }
  __break(1u);
}

void sub_1000F482C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  unint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  char *v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53[5];

  v51 = a6;
  v46 = a5;
  v42 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = swift_bridgeObjectRetain(a1);
  if (!v13)
  {
LABEL_24:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_3:
  if (v13 >= 1)
  {
    v15 = 0;
    v49 = a1 & 0xC000000000000001;
    v50 = v12;
    v48 = (char *)&type metadata for Any + 8;
    v14.n128_u64[0] = 136315650;
    v40 = v14;
    v44 = v13;
    v45 = a4;
    v41 = a1;
    v38 = v9;
    v39 = v10;
    while (1)
    {
      if (v49)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
      else
        v16 = *(id *)(a1 + 8 * v15 + 32);
      v17 = v16;
      v18 = objc_msgSend(v16, "remoteObjectProxy", v38, v39);
      _bridgeAnyObjectToAny(_:)(v53);
      swift_unknownObjectRelease(v18);
      v19 = sub_10009061C(&qword_10026E078);
      if (swift_dynamicCast(&v52, v53, v48, v19, 6))
      {
        v47 = v17;
        v12 = v52;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v20 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v50, v20, v9);
        swift_bridgeObjectRetain_n(a3, 2);
        v21 = (id)a4;
        v22 = v46;
        v23 = v21;
        v24 = v22;
        a4 = v9;
        v25 = v10;
        v26 = Logger.logObject.getter(v24);
        v27 = a3;
        v28 = static os_log_type_t.default.getter(v26);
        if (os_log_type_enabled(v26, v28))
        {
          v29 = swift_slowAlloc(32, -1);
          v43 = v12;
          v30 = v29;
          v31 = (uint64_t *)swift_slowAlloc(16, -1);
          v32 = swift_slowAlloc(32, -1);
          v53[0] = v32;
          *(_DWORD *)v30 = v40.n128_u32[0];
          swift_bridgeObjectRetain(v27);
          *(_QWORD *)(v30 + 4) = sub_1000906BC(v42, v27, v53);
          swift_bridgeObjectRelease_n(v27, 3);
          a4 = 2112;
          *(_WORD *)(v30 + 12) = 2112;
          *(_QWORD *)(v30 + 14) = v23;
          *v31 = v45;

          *(_WORD *)(v30 + 22) = 2112;
          *(_QWORD *)(v30 + 24) = v24;
          v31[1] = (uint64_t)v46;

          _os_log_impl((void *)&_mh_execute_header, v26, v28, "Notifying client that %s just set subject selection to %@, %@", (uint8_t *)v30, 0x20u);
          v33 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v31, 2, v33);
          swift_slowDealloc(v31, -1, -1);
          swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
          v34 = v32;
          a1 = v41;
          swift_slowDealloc(v34, -1, -1);
          v35 = v30;
          v12 = v43;
          swift_slowDealloc(v35, -1, -1);

          v36 = v38;
          v10 = v39;
          (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v38);
          a3 = v27;
          v9 = v36;
        }
        else
        {

          swift_bridgeObjectRelease_n(v27, 2);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v50, a4);
          a3 = v27;
          v9 = a4;
          v10 = v25;
        }
        objc_msgSend(v12, "selectSubjectAtEventWithX:y:", v23, v24);
        swift_unknownObjectRelease(v12);

        if (__OFADD__(*v51, 1))
        {
          __break(1u);
LABEL_20:
          if (a1 < 0)
            v37 = a1;
          else
            v37 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v13 = _CocoaArrayWrapper.endIndex.getter(v37);
          if (!v13)
            goto LABEL_24;
          goto LABEL_3;
        }
        ++*v51;
        v13 = v44;
        a4 = v45;
      }
      else
      {

      }
      if (v13 == ++v15)
        goto LABEL_24;
    }
  }
  __break(1u);
}

void sub_1000F4D00(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51[4];

  v43 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v13 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = swift_bridgeObjectRetain(v49);
  if (!v13)
  {
LABEL_24:
    swift_bridgeObjectRelease(v49);
    return;
  }
LABEL_3:
  if (v13 >= 1)
  {
    v15 = 0;
    v48 = v49 & 0xC000000000000001;
    v47 = (char *)&type metadata for Any + 8;
    v14.n128_u64[0] = 136315394;
    v40 = v14;
    v41 = v9;
    v42 = a5;
    v45 = v13;
    v46 = v10;
    v39 = v12;
    while (1)
    {
      if (v48)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v49);
      else
        v16 = *(id *)(v49 + 8 * v15 + 32);
      v17 = v16;
      v18 = objc_msgSend(v16, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(v51);
      swift_unknownObjectRelease(v18);
      v19 = sub_10009061C(&qword_10026E078);
      if ((swift_dynamicCast(&v50, v51, v47, v19, 6) & 1) != 0)
      {
        v20 = v50;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v21 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
        swift_bridgeObjectRetain_n(a3, 2);
        v22 = swift_bridgeObjectRetain_n(a4, 2);
        v23 = v12;
        v24 = Logger.logObject.getter(v22);
        v25 = static os_log_type_t.default.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = a3;
          v27 = swift_slowAlloc(22, -1);
          v28 = swift_slowAlloc(64, -1);
          v44 = v20;
          v29 = v28;
          v51[0] = v28;
          *(_DWORD *)v27 = v40.n128_u32[0];
          swift_bridgeObjectRetain(v26);
          *(_QWORD *)(v27 + 4) = sub_1000906BC(v43, v26, v51);
          swift_bridgeObjectRelease_n(v26, 3);
          *(_WORD *)(v27 + 12) = 2080;
          swift_bridgeObjectRetain(a4);
          v31 = Array.description.getter(v30, &type metadata for String);
          v33 = v32;
          swift_bridgeObjectRelease(a4);
          *(_QWORD *)(v27 + 14) = sub_1000906BC(v31, v33, v51);
          swift_bridgeObjectRelease_n(a4, 2);
          swift_bridgeObjectRelease(v33);
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Notifying client that %s just set subject selection to ids: %s", (uint8_t *)v27, 0x16u);
          swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
          v34 = v29;
          v20 = v44;
          a5 = v42;
          swift_slowDealloc(v34, -1, -1);
          v35 = v27;
          a3 = v26;
          v9 = v41;
          swift_slowDealloc(v35, -1, -1);

          v10 = v46;
          v12 = v39;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v9);
        }
        else
        {

          swift_bridgeObjectRelease_n(a4, 2);
          swift_bridgeObjectRelease_n(a3, 2);
          v10 = v46;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v9);
          v12 = v23;
        }
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v20, "selectSubjectsEvent:", isa);

        swift_unknownObjectRelease(v20);
        if (__OFADD__(*a5, 1))
        {
          __break(1u);
LABEL_20:
          if (v49 < 0)
            v37 = v49;
          else
            v37 = v49 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v49);
          v13 = _CocoaArrayWrapper.endIndex.getter(v37);
          if (!v13)
            goto LABEL_24;
          goto LABEL_3;
        }
        ++*a5;
        v13 = v45;
      }
      else
      {

      }
      if (v13 == ++v15)
        goto LABEL_24;
    }
  }
  __break(1u);
}

uint64_t sub_1000F512C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, void *), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), const char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(_QWORD, void *);

  v35 = a7;
  v36 = a8;
  v34 = a6;
  v38 = a4;
  v39 = a3;
  v11 = type metadata accessor for Errors(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v37 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (const char **)((char *)&v34 - v15);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  result = a5(a1, a2);
  if (result)
  {
    sub_1000B1410(result, v22);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v23 = sub_10008EA50(v17, (uint64_t)qword_10026DE40);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v23, v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v34, v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v28 = v36;
    *v16 = v35;
    v16[1] = v28;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.OperationCancelled(_:), v11);
    v29 = v37;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v37, v16, v11);
    v30 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v31 = swift_allocError(v11, v30, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v32, v29, v11);
    v33 = (void *)_convertErrorToNSError(_:)(v31);
    v39(0, v33);

    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v16, v11);
    return swift_errorRelease(v31);
  }
  return result;
}

void sub_1000F545C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  os_log_type_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char *v50;
  unint64_t v51;
  void *v52;
  _QWORD v53[5];

  v46 = a2;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v20 = swift_bridgeObjectRetain(a1);
  if (!v19)
  {
LABEL_24:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_3:
  if (v19 >= 1)
  {
    v21 = 0;
    v51 = a1 & 0xC000000000000001;
    v50 = (char *)&type metadata for Any + 8;
    v20.n128_u64[0] = 136315394;
    v43 = v20;
    v44 = v15;
    v45 = a4;
    v47 = v16;
    v48 = v19;
    while (1)
    {
      if (v51)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
      else
        v22 = *(id *)(a1 + 8 * v21 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, "remoteObjectProxy", *(_OWORD *)&v43);
      _bridgeAnyObjectToAny(_:)(v53);
      swift_unknownObjectRelease(v24);
      v25 = sub_10009061C(&qword_10026E078);
      if (swift_dynamicCast(&v52, v53, v50, v25, 6))
      {
        v49 = v52;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v26 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v26, v15);
        v27 = swift_bridgeObjectRetain_n(a3, 2);
        v28 = Logger.logObject.getter(v27);
        v29 = v18;
        v30 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v30))
        {
          v31 = swift_slowAlloc(22, -1);
          v32 = (void *)swift_slowAlloc(64, -1);
          v52 = v32;
          *(_DWORD *)v31 = v43.n128_u32[0];
          swift_bridgeObjectRetain(a3);
          *(_QWORD *)(v31 + 4) = sub_1000906BC(v46, a3, (uint64_t *)&v52);
          swift_bridgeObjectRelease_n(a3, 3);
          *(_WORD *)(v31 + 12) = 2080;
          *(double *)v53 = a5;
          *(double *)&v53[1] = a6;
          *(double *)&v53[2] = a7;
          *(double *)&v53[3] = a8;
          type metadata accessor for CGRect(0);
          v34 = String.init<A>(describing:)(v53, v33);
          v35 = a1;
          v37 = v36;
          *(_QWORD *)(v31 + 14) = sub_1000906BC(v34, v36, (uint64_t *)&v52);
          v38 = v37;
          a1 = v35;
          swift_bridgeObjectRelease(v38);
          _os_log_impl((void *)&_mh_execute_header, v28, v30, "Notifying client that %s just set subject ROI to %s", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
          v39 = v32;
          a4 = v45;
          swift_slowDealloc(v39, -1, -1);
          v40 = v31;
          v15 = v44;
          swift_slowDealloc(v40, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        v16 = v47;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v15);
        v18 = v29;
        v41 = v49;
        objc_msgSend(v49, "setRectOfInterestEventWithRect:", a5, a6, a7, a8);
        swift_unknownObjectRelease(v41);

        v19 = v48;
        if (__OFADD__(*a4, 1))
        {
          __break(1u);
LABEL_20:
          if (a1 < 0)
            v42 = a1;
          else
            v42 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v19 = _CocoaArrayWrapper.endIndex.getter(v42);
          if (!v19)
            goto LABEL_24;
          goto LABEL_3;
        }
        ++*a4;
      }
      else
      {

      }
      if (v19 == ++v21)
        goto LABEL_24;
    }
  }
  __break(1u);
}

uint64_t sub_1000F58D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[3] = a6;
  v7[4] = a7;
  v9 = type metadata accessor for Errors(0);
  v7[5] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[6] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[7] = swift_task_alloc(v11);
  v7[8] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v7[9] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[10] = v13;
  v7[11] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_task_alloc(dword_10026E064);
  v7[12] = v14;
  *v14 = v7;
  v14[1] = sub_1000F5984;
  return sub_10010D7B0(a5);
}

uint64_t sub_1000F5984(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000F5D7C;
  else
    v5 = sub_1000F59F0;
  return swift_task_switch(v5, 0, 0);
}

void sub_1000F59F0()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(_QWORD *, _QWORD);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, void *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  v1 = *(_QWORD *)(v0 + 104);
  if (!*(_QWORD *)(v1 + 16))
  {
    v27 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD **)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 40);
    v29 = *(_QWORD *)(v0 + 48);
    v30 = *(void (**)(_QWORD *, void *))(v0 + 24);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    *v26 = 0xD000000000000015;
    v26[1] = 0x80000001001FF7A0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v26, enum case for Errors.NotFound(_:), v28);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v29 + 16))(v27, v26, v28);
    v31 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v32 = swift_allocError(v28, v31, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v33, v27, v28);
    v34 = (void *)_convertErrorToNSError(_:)(v32);
    v30(_swiftEmptyArrayStorage, v34);

    (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v26, v28);
    swift_errorRelease(v32);
    goto LABEL_28;
  }
  v2 = 0;
  v4 = v1 + 64;
  v3 = *(_QWORD *)(v1 + 64);
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & v3;
  v38 = (unint64_t)(63 - v6) >> 6;
  if ((v5 & v3) != 0)
    goto LABEL_25;
LABEL_7:
  v8 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v8 < v38)
    {
      v9 = *(_QWORD *)(v4 + 8 * v8);
      ++v2;
      if (v9)
        goto LABEL_20;
      v2 = v8 + 1;
      if (v8 + 1 < v38)
      {
        v9 = *(_QWORD *)(v4 + 8 * v2);
        if (v9)
          goto LABEL_20;
        v2 = v8 + 2;
        if (v8 + 2 < v38)
        {
          v9 = *(_QWORD *)(v4 + 8 * v2);
          if (!v9)
          {
            v10 = v8 + 3;
            if (v10 < v38)
            {
              v9 = *(_QWORD *)(v4 + 8 * v10);
              if (v9)
              {
                v2 = v10;
                goto LABEL_20;
              }
              while (1)
              {
                v2 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_30;
                if (v2 >= v38)
                  goto LABEL_26;
                v9 = *(_QWORD *)(v4 + 8 * v2);
                ++v10;
                if (v9)
                  goto LABEL_20;
              }
            }
            goto LABEL_26;
          }
LABEL_20:
          v7 = (v9 - 1) & v9;
          for (i = __clz(__rbit64(v9)) + (v2 << 6); ; i = v24 | (v2 << 6))
          {
            v12 = 16 * i;
            v13 = (uint64_t *)(*(_QWORD *)(v1 + 48) + v12);
            v14 = *v13;
            v15 = v13[1];
            v16 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v12);
            v18 = *v16;
            v17 = v16[1];
            objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState(0));
            swift_bridgeObjectRetain(v15);
            sub_10009B27C(v18, v17);
            swift_bridgeObjectRetain(v15);
            sub_10009B27C(v18, v17);
            v19 = (void *)AccessoryBatteryState.init(data:name:)(v18, v17, v14, v15);
            if (v19)
            {
              v20 = v19;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
              v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
              v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v22 >= v21 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
              v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
              specialized Array._endMutation()(v23);
              swift_bridgeObjectRelease(v15);
              sub_10009B2FC(v18, v17);

              if (!v7)
                goto LABEL_7;
            }
            else
            {
              swift_bridgeObjectRelease(v15);
              sub_10009B2FC(v18, v17);
              if (!v7)
                goto LABEL_7;
            }
LABEL_25:
            v24 = __clz(__rbit64(v7));
            v7 &= v7 - 1;
          }
        }
      }
    }
LABEL_26:
    v0 = v37;
    v25 = *(void (**)(_QWORD *, _QWORD))(v37 + 24);
    swift_release(*(_QWORD *)(v37 + 104));
    v25(_swiftEmptyArrayStorage, 0);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_28:
    v35 = *(_QWORD *)(v0 + 56);
    v36 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v36);
    swift_task_dealloc(v35);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_1000F5D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, void *);
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = sub_10008EA50(v4, (uint64_t)qword_10026DE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 112);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v10);
    v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error thrown in battery state read: %@", v11, 0xCu);
    v14 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 112));
    swift_errorRelease(v10);
  }

  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(void (**)(_QWORD *, void *))(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v17 = (void *)_convertErrorToNSError(_:)(v15);
  v16(_swiftEmptyArrayStorage, v17);

  swift_errorRelease(v15);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F5FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  type metadata accessor for AccessoryBatteryState(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, uint64_t))(a3 + 16))(a3, isa, a2);

}

void sub_1000F6020(void *a1, int a2, void *a3, void *aBlock, void (*a5)(void *, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(a3, v8);
  _Block_release(v8);
  _Block_release(v8);

}

uint64_t sub_1000F60D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v7[2] = a6;
  v7[3] = a7;
  v9 = type metadata accessor for Errors(0);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[5] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[6] = swift_task_alloc(v11);
  v7[7] = swift_task_alloc(v11);
  v12 = (_QWORD *)swift_task_alloc(dword_10026E03C);
  v7[8] = v12;
  *v12 = v7;
  v12[1] = sub_1000F6158;
  return sub_100112740(a5);
}

uint64_t sub_1000F6158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v3 + 64);
  v5 = *v3;
  *(_QWORD *)(v5 + 72) = a1;
  *(_QWORD *)(v5 + 80) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1000F61DC, 0, 0);
  v6 = *(_QWORD *)(v5 + 48);
  swift_task_dealloc(*(_QWORD *)(v5 + 56));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000F61DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, void *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1 >> 60 == 15)
    goto LABEL_5;
  v2 = *(_QWORD *)(v0 + 72);
  v3 = objc_allocWithZone((Class)type metadata accessor for AccessorySystemEvent(0));
  sub_10009B27C(v2, v1);
  v4 = AccessorySystemEvent.init(data:name:)(v2, v1, 1414743380, 0xE400000000000000);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  if (!v4)
  {
    sub_10009E3A0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
LABEL_5:
    v9 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD **)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(void (**)(_QWORD, void *))(v0 + 16);
    *v8 = 0xD000000000000014;
    v8[1] = 0x80000001001FF650;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v8, enum case for Errors.NotFound(_:), v10);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v11 + 16))(v9, v8, v10);
    v13 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v14 = swift_allocError(v10, v13, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v9, v10);
    v16 = (void *)_convertErrorToNSError(_:)(v14);
    v12(0, v16);

    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v8, v10);
    swift_errorRelease(v14);
    goto LABEL_6;
  }
  v7 = (void *)v4;
  (*(void (**)(uint64_t, _QWORD))(v0 + 16))(v4, 0);

  sub_10009E3A0(v6, v5);
LABEL_6:
  v17 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F63A0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  Class isa;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v36 = a3;
  v37 = a1;
  v38 = a2;
  v5 = sub_10009061C(&qword_10026E048);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v13 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v6;
    v18 = v5;
    v19 = a4;
    v20 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reading System Event Data...", v17, 2u);
    v21 = v20;
    a4 = v19;
    v5 = v18;
    v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = v35;
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v22 = sub_10009061C(&qword_10026C340);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001DE6A0;
  v24 = v36;
  *(_QWORD *)(v23 + 32) = v36;
  aBlock[0] = v23;
  specialized Array._endMutation()(v23);
  v25 = aBlock[0];
  sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
  v26 = v24;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  v28 = *(void **)(a4 + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v37, v5);
  v29 = *(unsigned __int8 *)(v6 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_10023B550, v30 + v7, v29 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v31 + v30, v8, v5);
  aBlock[4] = sub_10011432C;
  v40 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100177F4C;
  aBlock[3] = &unk_10023B568;
  v32 = _Block_copy(aBlock);
  v33 = v40;
  v34 = v28;
  swift_release(v33);
  objc_msgSend(v38, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v34, v32, 10.0);
  _Block_release(v32);

}

uint64_t sub_1000F669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[3];
  _BYTE v36[8];
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39[3];
  uint64_t v40;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v11 = sub_10008EA50(v6, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
    swift_errorRetain(a2);
    v12 = swift_errorRetain(a2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(12, -1);
      v34[1] = a3;
      v16 = (uint8_t *)v15;
      v17 = swift_slowAlloc(32, -1);
      v39[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v34[0] = v16 + 4;
      swift_getErrorValue(a2, v36, v35);
      v18 = Error.localizedDescription.getter(v35[1], v35[2]);
      v20 = v19;
      *(_QWORD *)&v38[0] = sub_1000906BC(v18, v19, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, (char *)v38 + 8, v34[0], v16 + 12);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error reading System Event Data characteristic: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v39[0] = a2;
    goto LABEL_22;
  }
  if (!a1)
  {
    v24 = type metadata accessor for Errors(0);
    v25 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v24, v25, 0, 0);
    v28 = v26;
    v29 = 0xD000000000000035;
    v30 = "Error reading System Event Data: no results returned!";
LABEL_21:
    *v26 = v29;
    v26[1] = (unint64_t)(v30 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v28, enum case for Errors.CharacteristicReadWriteFailure(_:), v24);
    v39[0] = v27;
LABEL_22:
    v33 = sub_10009061C(&qword_10026E048);
    return CheckedContinuation.resume(throwing:)(v39, v33);
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_10;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(a1 + 32);
LABEL_10:
    v22 = v21;
    v23 = objc_msgSend(v21, "value");

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)(v38);
      swift_unknownObjectRelease(v23);
    }
    else
    {
      memset(v38, 0, sizeof(v38));
    }
    sub_10009AEEC((uint64_t)v38, (uint64_t)v39);
    if (v40)
    {
      if ((swift_dynamicCast(&v37, v39, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        *(_OWORD *)v39 = v37;
        v31 = sub_10009061C(&qword_10026E048);
        return CheckedContinuation.resume(returning:)(v39, v31);
      }
    }
    else
    {
      sub_10009B2C0((uint64_t)v39, &qword_10026E5F0);
    }
    v24 = type metadata accessor for Errors(0);
    v32 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v24, v32, 0, 0);
    v28 = v26;
    v29 = 0xD000000000000023;
    v30 = "System Event Data not found in read";
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_1000F6AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD v54[2];
  _OWORD v55[2];
  uint64_t v56[4];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v52 - v15;
  if (a2 || !a1)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v25 = sub_10008EA50(v10, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v25, v10);
    swift_errorRetain(a2);
    v26 = swift_errorRetain(a2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v56[0] = v30;
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)&v55[0] = a2;
      swift_errorRetain(a2);
      v31 = sub_10009061C(&qword_10026E070);
      v53 = v11;
      v32 = String.init<A>(describing:)(v55, v31);
      v52 = (uint8_t *)v10;
      v34 = v33;
      *(_QWORD *)&v55[0] = sub_1000906BC(v32, v33, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v34);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to read characteristic: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint8_t *))(v53 + 8))(v16, v52);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
  }
  else
  {
    v17 = objc_msgSend(a1, "metadata");
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(v17, "format");

      if (v19)
      {
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        if (v20 == 1635017060 && v22 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(0xE400000000000000);
        }
        else
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, 1635017060, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v22);
          if ((v24 & 1) == 0)
            return;
        }
        v35 = objc_msgSend(a1, "value");
        if (v35)
        {
          v36 = v35;
          _bridgeAnyObjectToAny(_:)(v55);
          swift_unknownObjectRelease(v36);
        }
        else
        {
          memset(v55, 0, sizeof(v55));
        }
        sub_10009AEEC((uint64_t)v55, (uint64_t)v56);
        if (v56[3])
        {
          if ((swift_dynamicCast(v54, v56, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
          {
            v37 = (_QWORD *)(a3 + 16);
            v38 = v54[0];
            v39 = v54[1];
            swift_beginAccess(v37, v56, 33, 0);
            swift_bridgeObjectRetain(a5);
            sub_10009B27C(v38, v39);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v37);
            *(_QWORD *)&v55[0] = *v37;
            *v37 = 0x8000000000000000;
            sub_1001BBF9C(v38, v39, a4, a5, isUniquelyReferenced_nonNull_native);
            v41 = *v37;
            *v37 = *(_QWORD *)&v55[0];
            swift_bridgeObjectRelease(a5);
            swift_bridgeObjectRelease(v41);
            swift_endAccess(v56);
            if (qword_10026BB60 != -1)
              swift_once(&qword_10026BB60, sub_1000EF32C);
            v42 = sub_10008EA50(v10, (uint64_t)qword_10026DE40);
            (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v42, v10);
            sub_10009B27C(v38, v39);
            v43 = sub_10009B27C(v38, v39);
            v44 = Logger.logObject.getter(v43);
            v45 = static os_log_type_t.default.getter(v44);
            if (os_log_type_enabled(v44, v45))
            {
              v53 = v11;
              v46 = (uint8_t *)swift_slowAlloc(12, -1);
              v47 = swift_slowAlloc(32, -1);
              v56[0] = v47;
              *(_DWORD *)v46 = 136315138;
              v52 = v46 + 4;
              sub_100117E20(v38, v39);
              v48 = v10;
              v50 = v49;
              *(_QWORD *)&v55[0] = sub_1000906BC(v51, v49, v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8, v52, v46 + 12);
              swift_bridgeObjectRelease(v50);
              sub_10009B2FC(v38, v39);
              sub_10009B2FC(v38, v39);
              _os_log_impl((void *)&_mh_execute_header, v44, v45, "Battery Data: %s", v46, 0xCu);
              swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v47, -1, -1);
              swift_slowDealloc(v46, -1, -1);

              sub_10009B2FC(v38, v39);
              (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v48);
            }
            else
            {
              sub_10009B2FC(v38, v39);
              sub_10009B2FC(v38, v39);
              sub_10009B2FC(v38, v39);

              (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
            }
          }
        }
        else
        {
          sub_10009B2C0((uint64_t)v56, &qword_10026E5F0);
        }
      }
    }
  }
}

id sub_1000F70B8()
{
  return sub_1000F7780((uint64_t (*)(void))type metadata accessor for dockaccessoryd);
}

uint64_t type metadata accessor for dockaccessoryd(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd14dockaccessoryd, a2);
}

void sub_1000F70E4(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t (*a7)(void))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *Strong;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  id v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void);
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[40];
  char v66[24];
  char v67[24];
  char v68[24];
  char v69[24];
  uint64_t v70;

  v60 = a7;
  v61 = a1;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v16 = a3 + 16;
  v17 = sub_10008EA50(v12, (uint64_t)qword_10026DE40);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
  v18 = sub_1000ACE4C(a2, (uint64_t)v65, &qword_10026E5F0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v59 = a5;
  v58 = a4;
  v57 = v16;
  if (v21)
  {
    v22 = swift_slowAlloc(18, -1);
    v23 = swift_slowAlloc(32, -1);
    v70 = v23;
    *(_DWORD *)v22 = 67109378;
    LODWORD(v62) = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 4, v22 + 4, v22 + 8);
    *(_WORD *)(v22 + 8) = 2080;
    v56 = (char *)(v22 + 10);
    sub_1000ACE4C((uint64_t)v65, (uint64_t)&v62, &qword_10026E5F0);
    v24 = sub_10009061C(&qword_10026E5F0);
    v25 = String.init<A>(describing:)(&v62, v24);
    v27 = v26;
    v62 = sub_1000906BC(v25, v26, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v56, v22 + 18);
    swift_bridgeObjectRelease(v27);
    sub_10009B2C0((uint64_t)v65, &qword_10026E5F0);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, a6, (uint8_t *)v22, 0x12u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v16 = v57;
    a4 = v58;
    a5 = v59;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_10009B2C0((uint64_t)v65, &qword_10026E5F0);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v28 = v61;
  sub_100164DFC(v61);
  swift_beginAccess(v16, &v62, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_1001749F0(v28);

  swift_beginAccess(v16, &v70, 0, 0);
  v30 = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_10017417C(v28);

  swift_beginAccess(v16, v69, 0, 0);
  v31 = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_1001754E8(v28);

  swift_beginAccess(v16, v68, 0, 0);
  v32 = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_100166A00(v28, v32);

  swift_beginAccess(v16, v67, 0, 0);
  v33 = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_100175F5C(v28);

  v34 = qword_100275638;
  sub_100162DD8(v28, a4, a5, 0);
  v35 = *(char **)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v36 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v37 = *(void **)&v35[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v38 = v35;
  v39 = v37;
  OS_dispatch_semaphore.wait()();

  v40 = &v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v66, 0, 0);
  v41 = *(_QWORD *)v40;
  v42 = *(_QWORD *)(*(_QWORD *)v40 + 16);
  if (v42)
  {
    v54 = v36;
    v55 = v35;
    v56 = v38;
    v43 = v41 + 32;
    v53 = v41;
    swift_bridgeObjectRetain(v41);
    do
    {
      sub_10009AFF4(v43, (uint64_t)v65);
      v44 = sub_10009061C(&qword_10026C2E0);
      v45 = type metadata accessor for DaemonAccessory(0);
      v46 = swift_dynamicCast(&v64, v65, v44, v45, 6);
      if ((_DWORD)v46)
      {
        v47 = v64;
        v48 = *(os_unfair_lock_s **)(v64 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
        __chkstk_darwin(v46);
        *(&v53 - 2) = v47;
        *((_DWORD *)&v53 - 2) = v61;
        swift_retain(v48);
        os_unfair_lock_lock(v48 + 4);
        sub_100180780(v49, v60);
        os_unfair_lock_unlock(v48 + 4);
        swift_release(v47);
        swift_release(v48);
      }
      v43 += 40;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease(v53);
    a5 = v59;
    a4 = v58;
    v16 = v57;
    v38 = v56;
    v35 = v55;
    v36 = v54;
  }
  v50 = *(id *)&v35[v36];
  OS_dispatch_semaphore.signal()();

  v51 = v61;
  sub_100160480(v61);
  sub_10016E69C(v51);
  swift_beginAccess(v16, v65, 0, 0);
  v52 = (void *)swift_unknownObjectWeakLoadStrong(v16);
  sub_1001602E0(a4, a5, v52);

}

id sub_1000F7774()
{
  return sub_1000F7780((uint64_t (*)(void))type metadata accessor for ServiceDelegate);
}

id sub_1000F7780(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for ServiceDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd15ServiceDelegate, a2);
}

id sub_1000F77D0(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

_QWORD *sub_1000F78A8(uint64_t a1, uint64_t a2)
{
  return sub_1000F78BC(a1, a2);
}

_QWORD *sub_1000F78BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_15;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v8 = objc_msgSend(v6, "UUID");
        v9 = static NSObject.== infix(_:_:)(v8, a2);

        if ((v9 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
          v11 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
          v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v6);
          specialized ContiguousArray._endMutation()(v12);
        }
        else
        {

        }
        ++v4;
        if (v7 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v14 = a1;
      else
        v14 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v14);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F7A3C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  os_unfair_lock_s *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72[3];
  id v73[3];
  _QWORD v74[4];
  _BYTE v75[24];

  if (qword_10026BC00 == -1)
    goto LABEL_2;
LABEL_84:
  swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_2:
  v2 = qword_100275638;
  v3 = (id)a1;
  sub_1001739F8(v2, v3);

  v4 = qword_100275638;
  v68 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v5 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, v75, 0, 0);
  a1 = *v6;
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  while (v10)
  {
    while (1)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
LABEL_24:
      v18 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v14);
      v19 = objc_msgSend(v18, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(v74);
      swift_unknownObjectRelease(v19);
      v20 = sub_10009061C((uint64_t *)&unk_10026DF20);
      if ((swift_dynamicCast(v73, v74, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
        break;

      if (!v10)
        goto LABEL_8;
    }
    v21 = v73[0];
    objc_msgSend(v73[0], "disconnectedWithErr:", 0);

    swift_unknownObjectRelease(v21);
  }
LABEL_8:
  v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v15 < v11)
  {
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v12;
    if (v16)
      goto LABEL_23;
    v12 = v15 + 1;
    if (v15 + 1 < v11)
    {
      v16 = *(_QWORD *)(v7 + 8 * v12);
      if (v16)
        goto LABEL_23;
      v12 = v15 + 2;
      if (v15 + 2 < v11)
      {
        v16 = *(_QWORD *)(v7 + 8 * v12);
        if (v16)
          goto LABEL_23;
        v12 = v15 + 3;
        if (v15 + 3 < v11)
        {
          v16 = *(_QWORD *)(v7 + 8 * v12);
          if (v16)
            goto LABEL_23;
          v17 = v15 + 4;
          if (v17 < v11)
          {
            v16 = *(_QWORD *)(v7 + 8 * v17);
            if (v16)
            {
              v12 = v17;
LABEL_23:
              v10 = (v16 - 1) & v16;
              v14 = __clz(__rbit64(v16)) + (v12 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              v12 = v17 + 1;
              if (__OFADD__(v17, 1))
                break;
              if (v12 >= v11)
                goto LABEL_27;
              v16 = *(_QWORD *)(v7 + 8 * v12);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
LABEL_81:
            __break(1u);
            goto LABEL_82;
          }
        }
      }
    }
  }
LABEL_27:
  swift_release(a1);
  v22 = *(os_unfair_lock_s **)(v4 + v68);
  swift_retain(v22);
  os_unfair_lock_unlock(v22 + 4);
  swift_release(v22);
  v23 = qword_100275638;
  v69 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v24 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v24);
  os_unfair_lock_lock(v24 + 4);
  swift_release(v24);
  v25 = (uint64_t *)(v23 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess(v23 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v73, 0, 0);
  a1 = *v25;
  v26 = a1 + 64;
  v27 = 1 << *(_BYTE *)(a1 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v31 = 0;
  while (1)
  {
    if (v29)
    {
      v33 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v34 = v33 | (v31 << 6);
      goto LABEL_49;
    }
    v35 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_79;
    if (v35 >= v30)
      break;
    v36 = *(_QWORD *)(v26 + 8 * v35);
    ++v31;
    if (!v36)
    {
      v31 = v35 + 1;
      if (v35 + 1 >= v30)
        break;
      v36 = *(_QWORD *)(v26 + 8 * v31);
      if (!v36)
      {
        v31 = v35 + 2;
        if (v35 + 2 >= v30)
          break;
        v36 = *(_QWORD *)(v26 + 8 * v31);
        if (!v36)
        {
          v31 = v35 + 3;
          if (v35 + 3 >= v30)
            break;
          v36 = *(_QWORD *)(v26 + 8 * v31);
          if (!v36)
          {
            v37 = v35 + 4;
            if (v37 >= v30)
              break;
            v36 = *(_QWORD *)(v26 + 8 * v37);
            if (!v36)
            {
              while (1)
              {
                v31 = v37 + 1;
                if (__OFADD__(v37, 1))
                  break;
                if (v31 >= v30)
                  goto LABEL_52;
                v36 = *(_QWORD *)(v26 + 8 * v31);
                ++v37;
                if (v36)
                  goto LABEL_48;
              }
LABEL_82:
              __break(1u);
              goto LABEL_83;
            }
            v31 = v37;
          }
        }
      }
    }
LABEL_48:
    v29 = (v36 - 1) & v36;
    v34 = __clz(__rbit64(v36)) + (v31 << 6);
LABEL_49:
    v38 = *(_QWORD *)(a1 + 56) + 16 * v34;
    v39 = *(void **)v38;
    if (*(_QWORD *)v38)
    {
      v40 = *(id *)(v38 + 8);
      v41 = v39;
      v42 = objc_msgSend(v41, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(v74);
      swift_unknownObjectRelease(v42);
      v43 = sub_10009061C((uint64_t *)&unk_10026EA80);
      if ((swift_dynamicCast(v72, v74, (char *)&type metadata for Any + 8, v43, 6) & 1) != 0)
      {
        v32 = v72[0];
        objc_msgSend(v72[0], "disconnectedWithErr:", 0);

        swift_unknownObjectRelease(v32);
      }
      else
      {

      }
    }
  }
LABEL_52:
  swift_release(a1);
  v44 = *(os_unfair_lock_s **)(v23 + v69);
  swift_retain(v44);
  os_unfair_lock_unlock(v44 + 4);
  swift_release(v44);
  v45 = qword_100275638;
  v70 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v46 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v46);
  os_unfair_lock_lock(v46 + 4);
  swift_release(v46);
  v47 = (uint64_t *)(v45 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess(v45 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v72, 0, 0);
  a1 = *v47;
  v48 = a1 + 64;
  v49 = 1 << *(_BYTE *)(a1 + 32);
  v50 = -1;
  if (v49 < 64)
    v50 = ~(-1 << v49);
  v51 = v50 & *(_QWORD *)(a1 + 64);
  v52 = (unint64_t)(v49 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v53 = 0;
  while (2)
  {
    if (v51)
    {
      v55 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v56 = v55 | (v53 << 6);
      goto LABEL_74;
    }
    v57 = v53 + 1;
    if (__OFADD__(v53, 1))
      goto LABEL_80;
    if (v57 < v52)
    {
      v58 = *(_QWORD *)(v48 + 8 * v57);
      ++v53;
      if (v58)
        goto LABEL_73;
      v53 = v57 + 1;
      if (v57 + 1 >= v52)
        break;
      v58 = *(_QWORD *)(v48 + 8 * v53);
      if (v58)
        goto LABEL_73;
      v53 = v57 + 2;
      if (v57 + 2 >= v52)
        break;
      v58 = *(_QWORD *)(v48 + 8 * v53);
      if (v58)
        goto LABEL_73;
      v53 = v57 + 3;
      if (v57 + 3 >= v52)
        break;
      v58 = *(_QWORD *)(v48 + 8 * v53);
      if (v58)
        goto LABEL_73;
      v59 = v57 + 4;
      if (v59 >= v52)
        break;
      v58 = *(_QWORD *)(v48 + 8 * v59);
      if (v58)
      {
        v53 = v59;
LABEL_73:
        v51 = (v58 - 1) & v58;
        v56 = __clz(__rbit64(v58)) + (v53 << 6);
LABEL_74:
        v60 = *(_QWORD *)(a1 + 56) + 16 * v56;
        v61 = *(void **)v60;
        if (*(_QWORD *)v60)
        {
          v62 = *(id *)(v60 + 8);
          v63 = v61;
          v64 = objc_msgSend(v63, "remoteObjectProxy");
          _bridgeAnyObjectToAny(_:)(v74);
          swift_unknownObjectRelease(v64);
          v65 = sub_10009061C(&qword_10026DF30);
          if ((swift_dynamicCast(&v71, v74, (char *)&type metadata for Any + 8, v65, 6) & 1) != 0)
          {
            v54 = v71;
            objc_msgSend(v71, "disconnectedWithErr:", 0);

            swift_unknownObjectRelease(v54);
          }
          else
          {

          }
        }
        continue;
      }
      while (1)
      {
        v53 = v59 + 1;
        if (__OFADD__(v59, 1))
          break;
        if (v53 >= v52)
          goto LABEL_77;
        v58 = *(_QWORD *)(v48 + 8 * v53);
        ++v59;
        if (v58)
          goto LABEL_73;
      }
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    break;
  }
LABEL_77:
  swift_release(a1);
  v66 = *(os_unfair_lock_s **)(v45 + v70);
  swift_retain(v66);
  os_unfair_lock_unlock(v66 + 4);
  return swift_release(v66);
}

uint64_t sub_1000F8178(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSString v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate, v9), "predicateMatchingBundleIdentifier:", v8);

  v12 = (void *)objc_opt_self(RBSProcessHandle, v11);
  v41 = 0;
  v13 = objc_msgSend(v12, "handleForPredicate:error:", v10, &v41);
  v14 = v41;
  if (!v13)
  {
    v23 = v41;
    v24 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v25);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v26 = sub_10008EA50(v4, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v26, v4);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(v24);
    swift_bridgeObjectRetain(a2);
    v27 = swift_errorRetain(v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      v38 = (void *)swift_slowAlloc(32, -1);
      v41 = v38;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain(a2);
      v39 = sub_1000906BC(a1, a2, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v30 + 12) = 2112;
      swift_errorRetain(v24);
      v31 = _swift_stdlib_bridgeErrorToNSError(v24);
      v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v30 + 14, v30 + 22);
      v32 = v37;
      *v37 = v31;
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed looking up process state for %s: %@", (uint8_t *)v30, 0x16u);
      v33 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v38;
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease(v24);
    }
    else
    {
      swift_errorRelease(v24);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v24);
      swift_errorRelease(v24);

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_16;
  }
  v15 = v13;
  v16 = v41;

  v17 = objc_msgSend(v15, "currentState");
  if (!v17)
  {

    goto LABEL_16;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "endowmentNamespaces");
  if (v19)
  {
    v20 = v19;
    v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, &protocol witness table for String);

    LOBYTE(v20) = sub_1000EF1F8(0xD00000000000001FLL, 0x80000001001FC440, v21);
    swift_bridgeObjectRelease(v21);
    v22 = v20 ^ 1;
  }
  else
  {
    v22 = 1;
  }
  if (objc_msgSend(v18, "taskState") != 4)
  {
    v35 = objc_msgSend(v18, "taskState");

    if (v35 == 3)
      return v22 & 1;
LABEL_16:
    v22 = 0;
    return v22 & 1;
  }

  return v22 & 1;
}

uint64_t sub_1000F85F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSString v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate, v9), "predicateMatchingBundleIdentifier:", v8);

  v12 = (void *)objc_opt_self(RBSProcessHandle, v11);
  v40 = 0;
  v13 = objc_msgSend(v12, "handleForPredicate:error:", v10, &v40);
  v14 = v40;
  if (!v13)
  {
    v24 = v40;
    v25 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v26);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v27 = sub_10008EA50(v4, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v27, v4);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(v25);
    swift_bridgeObjectRetain(a2);
    v28 = swift_errorRetain(v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v36 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = (void *)swift_slowAlloc(32, -1);
      v40 = v37;
      *(_DWORD *)v31 = 136315394;
      swift_bridgeObjectRetain(a2);
      v38 = sub_1000906BC(a1, a2, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v31 + 12) = 2112;
      swift_errorRetain(v25);
      v32 = _swift_stdlib_bridgeErrorToNSError(v25);
      v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 14, v31 + 22);
      v33 = v36;
      *v36 = v32;
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed looking up process state for %s: %@", (uint8_t *)v31, 0x16u);
      v34 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v33, 1, v34);
      swift_slowDealloc(v33, -1, -1);
      v35 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      swift_errorRelease(v25);
    }
    else
    {
      swift_errorRelease(v25);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v25);
      swift_errorRelease(v25);

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  v15 = v13;
  v16 = v40;

  v17 = objc_msgSend(v15, "currentState");
  if (!v17)
  {

    return 0;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "endowmentNamespaces");
  v20 = v19;
  if (v19)
  {
    v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, &protocol witness table for String);

    LOBYTE(v20) = sub_1000EF1F8(0xD00000000000001FLL, 0x80000001001FC440, v21);
    swift_bridgeObjectRelease(v21);
  }
  v22 = objc_msgSend(v18, "taskState");

  return (v22 == 4) & v20;
}

uint64_t sub_1000F8A48(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  _QWORD **v22;
  os_unfair_lock_s *v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _OWORD v47[2];
  uint64_t v48[4];
  char v49[24];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v43 - v15;
  if (a1 != a3 || a2 != a4)
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
    result = 0;
    if ((v17 & 1) != 0)
      return result;
    v43 = v14;
    v44 = v10;
    v45 = v11;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v19 = qword_100275638;
    v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    v21 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain(v21);
    os_unfair_lock_lock(v21 + 4);
    swift_release(v21);
    v22 = (_QWORD **)(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
    swift_beginAccess(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking, v49, 0, 0);
    LOBYTE(v22) = sub_100158CD0(a3, a4, *v22);
    v23 = *(os_unfair_lock_s **)(v19 + v20);
    swift_retain(v23);
    os_unfair_lock_unlock(v23 + 4);
    swift_release(v23);
    if ((v22 & 1) != 0)
    {
      if ((sub_1000F8178(a3, a4) & 1) != 0)
      {
        v24 = String._bridgeToObjectiveC()();
        v25 = objc_msgSend(a5, "valueForEntitlement:", v24);

        v27 = v44;
        v26 = v45;
        if (v25)
        {
          _bridgeAnyObjectToAny(_:)(v47);
          swift_unknownObjectRelease(v25);
        }
        else
        {
          memset(v47, 0, sizeof(v47));
        }
        sub_10009AEEC((uint64_t)v47, (uint64_t)v48);
        if (v48[3])
        {
          if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
            && (v46 & 1) != 0)
          {
            return 1;
          }
        }
        else
        {
          sub_10009B2C0((uint64_t)v48, &qword_10026E5F0);
        }
        if ((sub_1000F85F4(a1, a2) & 1) != 0)
          return 1;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v36 = sub_10008EA50(v27, (uint64_t)qword_10026DE40);
        v37 = v43;
        (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v43, v36, v27);
        v38 = swift_bridgeObjectRetain_n(a2, 2);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc(12, -1);
          v42 = swift_slowAlloc(32, -1);
          v48[0] = v42;
          *(_DWORD *)v41 = 136315138;
          swift_bridgeObjectRetain(a2);
          *(_QWORD *)&v47[0] = sub_1000906BC(a1, a2, v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, (char *)v47 + 8, v41 + 4, v41 + 12);
          swift_bridgeObjectRelease_n(a2, 3);
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "contender %s is not visible in foreground, stealing disallowed", v41, 0xCu);
          swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v41, -1, -1);

          (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v27);
        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
          (*(void (**)(char *, uint64_t))(v26 + 8))(v37, v27);
        }
      }
      else
      {
        v29 = v44;
        v28 = v45;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v30 = sub_10008EA50(v29, (uint64_t)qword_10026DE40);
        (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v16, v30, v29);
        v31 = swift_bridgeObjectRetain_n(a4, 2);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(12, -1);
          v35 = swift_slowAlloc(32, -1);
          v48[0] = v35;
          *(_DWORD *)v34 = 136315138;
          swift_bridgeObjectRetain(a4);
          *(_QWORD *)&v47[0] = sub_1000906BC(a3, a4, v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, (char *)v47 + 8, v34 + 4, v34 + 12);
          swift_bridgeObjectRelease_n(a4, 3);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "prior owner: %s is not backgrounded, stealing disallowed", v34, 0xCu);
          swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);

          (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v29);
        }
        else
        {

          swift_bridgeObjectRelease_n(a4, 2);
          (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
        }
      }
    }
  }
  return 0;
}

void sub_1000F8FD8()
{
  unint64_t v0;
  Class isa;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char **v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  char *v38;
  unint64_t v39;
  id v40;
  id v41;
  id v42[2];

  v0 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)RBSProcessStateDescriptor), "init");
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend((id)v0, "setEndowmentNamespaces:", isa);

  objc_msgSend((id)v0, "setValues:", 1);
  v3 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate, v2), "predicateMatchingProcessTypeApplication");
  v42[0] = 0;
  v5 = objc_msgSend((id)objc_opt_self(RBSProcessState, v4), "statesForPredicate:withDescriptor:error:", v3, v0, v42);
  v6 = v42[0];
  if (v5)
  {
    v7 = v5;
    v8 = sub_100090EE8(0, (unint64_t *)&unk_10026DF50, RBSProcessState_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);
    v10 = v6;

    v6 = 0;
    if (!((unint64_t)v9 >> 62))
      goto LABEL_3;
LABEL_24:
    if (v9 < 0)
      v35 = v9;
    else
      v35 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v11 = _CocoaArrayWrapper.endIndex.getter(v35);
    if (!v11)
      goto LABEL_31;
    goto LABEL_4;
  }
LABEL_23:
  v32 = v6;
  v33 = _convertNSErrorToError(_:)(v6);

  swift_willThrow(v34);
  swift_errorRelease(v33);
  v6 = 0;
  v9 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_24;
LABEL_3:
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v9);
  if (!v11)
    goto LABEL_31;
LABEL_4:
  v40 = v3;
  v39 = v0;
  v0 = 0;
  v3 = (id)(v9 & 0xC000000000000001);
  v12 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
  v13 = &type metadata for String;
  v38 = "uthorizing";
  while (1)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(v9);
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v0, v9);
    }
    else
    {
      v15 = *(void **)(v9 + 8 * v0 + 32);
      swift_bridgeObjectRetain(v9);
      v14 = v15;
    }
    v16 = v14;
    if (objc_msgSend(v14, v12[166], v38) != 4
      || (v17 = objc_msgSend(v16, "endowmentNamespaces")) == 0
      || (v18 = v17,
          v6 = (id)static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, v13, &protocol witness table for String),
          v18,
          LOBYTE(v18) = sub_1000EF1F8(0xD00000000000001FLL, 0x80000001001FC440, (uint64_t)v6),
          swift_bridgeObjectRelease(v6),
          (v18 & 1) == 0))
    {
      swift_bridgeObjectRelease(v9);

      v31 = (char *)(v0 + 1);
      if (__OFADD__(v0, 1))
        goto LABEL_22;
      goto LABEL_17;
    }
    v19 = v13;
    v20 = objc_msgSend(v16, "process");
    if (v20)
    {
      v21 = v20;
      v6 = objc_msgSend(v20, "bundle");

      if (v6)
      {
        v22 = objc_msgSend(v6, "identifier");

        if (v22)
          break;
      }
    }
    swift_bridgeObjectRelease(v9);

LABEL_20:
    v13 = v19;
    v12 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
    v31 = (char *)(v0 + 1);
    if (__OFADD__(v0, 1))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_17:
    ++v0;
    if (v31 == (char *)v11)
      goto LABEL_30;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v6 = v23;

  v24 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(v6);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v42[0] = 0;
  v26 = objc_msgSend(v24, "initWithBundleIdentifier:allowPlaceholder:error:", v25, 0, v42);

  v27 = v42[0];
  if (!v26)
  {
    v28 = v42[0];
    v29 = _convertNSErrorToError(_:)(v27);

    swift_willThrow(v30);
    swift_errorRelease(v29);
    swift_bridgeObjectRelease(v9);

    swift_bridgeObjectRelease(v6);
    goto LABEL_20;
  }
  v36 = v42[0];
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);

  if (v11 == v0)
  {
LABEL_30:
    v0 = v39;
    v3 = v40;
    goto LABEL_31;
  }
  if (v3)
  {
    v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v0, v9);
    v3 = v40;
    goto LABEL_37;
  }
  if ((v0 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
  }
  v3 = v40;
  if (v0 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_40;
  v37 = *(id *)(v9 + 8 * v0 + 32);
LABEL_37:
  v41 = v37;
  sub_1000EF3A0(&v41, 0xD00000000000001FLL, (unint64_t)v38 | 0x8000000000000000, (uint64_t *)v42);

  v0 = v39;
  if (v42[1])
  {
LABEL_31:

    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F94CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSString v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v4), "currentConnection");
  if (!v5)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v14 = sub_10008EA50(v0, (uint64_t)qword_10026DE40);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v14, v0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Couldn't fetch active XPC connection, ergo no camera TCC", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "processIdentifier");
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v8 = qword_100275638;
  v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v10 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v11 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera);
  swift_beginAccess(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera, v29, 0, 0);
  LOBYTE(v11) = sub_100158D94((uint64_t)v7, *v11);
  v12 = *(os_unfair_lock_s **)(v8 + v9);
  swift_retain(v12);
  os_unfair_lock_unlock(v12 + 4);
  swift_release(v12);
  if ((v11 & 1) == 0)
  {
    objc_msgSend(v6, "auditToken");
    v25 = v28;
    v26 = v27;
    v19 = String._bridgeToObjectiveC()();
    v27 = v26;
    v28 = v25;
    v20 = TCCAccessPreflightWithAuditToken(v19, &v27, 0);

    if (!v20)
    {
      v22 = sub_10016D5D0(v6);
      v24 = v23;
      v13 = 1;
      sub_100162DD8((uint64_t)v7, v22, v23, 1);

      swift_bridgeObjectRelease(v24);
      return v13;
    }

    return 0;
  }

  return 1;
}

void sub_1000F97A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Class v31;
  uint64_t v32;
  char v33[24];

  v2 = type metadata accessor for Errors(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v33[-v7 - 8];
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((sub_1000F94CC() & 1) != 0)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v13 = qword_100275638;
    v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v15 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v15);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    v16 = (uint64_t *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess(v13 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v33, 0, 0);
    v17 = *v16;
    v18 = *(os_unfair_lock_s **)(v13 + v14);
    swift_bridgeObjectRetain(v17);
    swift_retain(v18);
    os_unfair_lock_unlock(v18 + 4);
    swift_release(v18);
    type metadata accessor for DockCoreAccessory(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, isa, 0);
    swift_bridgeObjectRelease(v17);

  }
  else
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v20 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      v32 = a1;
      v25 = v24;
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Client doesn't have camera TCC, rejecting XPC message", v24, 2u);
      v26 = v25;
      a1 = v32;
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_QWORD *)v8 = 0xD000000000000012;
    *((_QWORD *)v8 + 1) = 0x80000001001FF590;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v27 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v28 = swift_allocError(v2, v27, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v29, v6, v2);
    v30 = (void *)_convertErrorToNSError(_:)(v28);
    type metadata accessor for DockCoreAccessory(0);
    v31 = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void *))(a1 + 16))(a1, v31, v30);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_errorRelease(v28);
  }
}

void sub_1000F9B1C(void (**a1)(id, id, _QWORD), _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;

  v4 = type metadata accessor for Errors(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v30 - v9);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000F94CC() & 1) != 0)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v15 = qword_100275638;
    v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v17 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v17);
    os_unfair_lock_lock(v17 + 4);
    swift_release(v17);
    v18 = *(os_unfair_lock_s **)(v15 + v16);
    v31 = *(id *)(v15 + *a2);
    swift_retain(v18);
    os_unfair_lock_unlock(v18 + 4);
    swift_release(v18);
    a1[2](a1, v31, 0);

  }
  else
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v19 = sub_10008EA50(v11, (uint64_t)qword_10026DE40);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v19, v11);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      v31 = a1;
      v24 = v23;
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client doesn't have camera TCC, rejecting XPC message", v23, 2u);
      v25 = v24;
      a1 = (void (**)(id, id, _QWORD))v31;
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *v10 = 0xD000000000000012;
    v10[1] = 0x80000001001FF590;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v10, enum case for Errors.CameraTCCMissing(_:), v4);
    (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v4, v26, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v28, v8, v4);
    v29 = (void *)_convertErrorToNSError(_:)(v27);
    ((void (**)(id, id, void *))a1)[2](a1, 0, v29);

    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v10, v4);
    swift_errorRelease(v27);
  }
}

uint64_t sub_1000F9E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for Errors(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v30 - v7);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000F94CC() & 1) != 0)
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v13 = qword_100275638;
    v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v15 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v15);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
    v17 = *(os_unfair_lock_s **)(v13 + v14);
    swift_retain(v17);
    os_unfair_lock_unlock(v17 + 4);
    swift_release(v17);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 16))(a1, v16, 0);
  }
  else
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v19 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, v9);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      v31 = a1;
      v24 = v23;
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client doesn't have camera TCC, rejecting XPC message", v23, 2u);
      v25 = v24;
      a1 = v31;
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *v8 = 0xD000000000000012;
    v8[1] = 0x80000001001FF590;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v2);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 16))(v6, v8, v2);
    v26 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v2, v26, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v28, v6, v2);
    v29 = (void *)_convertErrorToNSError(_:)(v27);
    (*(void (**)(uint64_t, uint64_t, void *))(a1 + 16))(a1, 2, v29);

    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v8, v2);
    return swift_errorRelease(v27);
  }
}

uint64_t sub_1000FA184(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  _QWORD **v33;
  char v34;
  os_unfair_lock_s *v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  _BYTE v60[24];
  uint64_t v61;

  v2 = type metadata accessor for Errors(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v51 - v6);
  v8 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v55 = (char *)&v51 - v12;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v13 = sub_10016D5D0(a1);
  if (!v14)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v19 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v20 = v57;
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16))(v11, v19, v8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed fetching App ID from connection", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v8);
    *v7 = 0xD000000000000028;
    v7[1] = 0x80000001001FFA10;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v7, enum case for Errors.NotFound(_:), v2);
    v25 = v56;
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 16))(v56, v7, v2);
    v26 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v27 = swift_allocError(v2, v26, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v28, v25, v2);
    _convertErrorToNSError(_:)(v27);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v7, v2);
    swift_errorRelease(v27);
    return 1;
  }
  v15 = v13;
  v16 = v14;
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a1, "valueForEntitlement:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v59);
    swift_unknownObjectRelease(v18);
  }
  else
  {
    memset(v59, 0, sizeof(v59));
  }
  sub_10009AEEC((uint64_t)v59, (uint64_t)v60);
  v54 = v3;
  if (v61)
  {
    if ((swift_dynamicCast(&v58, v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v29 = v58;
      goto LABEL_17;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)v60, &qword_10026E5F0);
  }
  v29 = 0;
LABEL_17:
  v30 = qword_100275638;
  v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v32 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v32);
  os_unfair_lock_lock(v32 + 4);
  swift_release(v32);
  v33 = (_QWORD **)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  swift_beginAccess(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking, v60, 0, 0);
  v34 = sub_100158CD0(v15, v16, *v33);
  v35 = *(os_unfair_lock_s **)(v30 + v31);
  swift_retain(v35);
  os_unfair_lock_unlock(v35 + 4);
  swift_release(v35);
  if ((v29 & 1) != 0 || (v34 & 1) != 0)
    return 0;
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v37 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
  v38 = v57;
  v39 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v55, v37, v8);
  v40 = swift_bridgeObjectRetain_n(v16, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  v43 = os_log_type_enabled(v41, v42);
  v44 = v54;
  if (v43)
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v59[0] = v53;
    *(_DWORD *)v45 = 136315138;
    v52 = v45 + 4;
    swift_bridgeObjectRetain(v16);
    v58 = sub_1000906BC(v15, v16, (uint64_t *)v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v52, v45 + 12);
    swift_bridgeObjectRelease_n(v16, 3);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Client %s is trying to control actuation, but system tracking still on. This is API violation", v45, 0xCu);
    v46 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n(v16, 2);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v8);
  }
  *v7 = 0xD000000000000032;
  v7[1] = 0x80000001001FFA40;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104))(v7, enum case for Errors.InvalidParameter(_:), v2);
  v47 = v56;
  (*(void (**)(char *, _QWORD *, uint64_t))(v44 + 16))(v56, v7, v2);
  v48 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
  v49 = swift_allocError(v2, v48, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v50, v47, v2);
  _convertErrorToNSError(_:)(v49);
  (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v7, v2);
  swift_errorRelease(v49);
  return 1;
}

void sub_1000FA830(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint8_t *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_unfair_lock_s *v89;
  void *v90;
  os_unfair_lock_s *v91;
  id v92;
  char *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  id v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  char v114;
  char *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSString v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSString v137;
  id v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t *v152;
  _QWORD *v153;
  _QWORD *v154;
  __n128 v155;
  double v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  __int128 v179;
  id v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD v195[5];
  char v196[24];
  __int128 v197;
  __int128 v198;
  uint64_t v199;

  v188 = a5;
  v189 = a4;
  v190 = a3;
  v187 = a2;
  v8 = type metadata accessor for UUID(0);
  v186 = *(char **)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v177 - v12;
  v14 = type metadata accessor for Errors(0);
  v193 = *(_QWORD *)(v14 - 8);
  v194 = v14;
  v15 = __chkstk_darwin(v14);
  v191 = (char *)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v192 = (uint64_t *)((char *)&v177 - v17);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v177 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v177 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v177 - v26;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v56 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v27, v56, v18);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = a6;
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Client doesn't have camera TCC, rejecting XPC message", v61, 2u);
      v62 = v61;
      a6 = v60;
      swift_slowDealloc(v62, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v18);
    v49 = v192;
    *v192 = 0xD000000000000012;
    v49[1] = 0x80000001001FF590;
    v63 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a1 || !v190 || !v189 || !v188)
  {
    v49 = v192;
    *v192 = 0xD000000000000016;
    v49[1] = 0x80000001001FF5B0;
    v63 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    v48 = v193;
    v50 = v194;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v193 + 104))(v49, *v63, v194);
    v64 = (uint64_t)v191;
    (*(void (**)(char *, _QWORD *, uint64_t))(v48 + 16))(v191, v49, v50);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v50, v65, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v66, v64, v50);
    v67 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(a6 + 16))(a6, 0, v67);
LABEL_27:

LABEL_28:
    (*(void (**)(_QWORD *, uint64_t))(v48 + 8))(v49, v50);
LABEL_31:
    swift_errorRelease(v53);
    return;
  }
  v184 = v8;
  v185 = a6;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(a1);
  v29 = v28;
  if (!v28
    || (v30 = type metadata accessor for ActuationController(0),
        v31 = v29,
        LOBYTE(v30) = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v187, v190, v30),
        v31,
        (v30 & 1) == 0)
    || (v32 = v31,
        v33 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(v187, v190, v189),
        v32,
        (v33 & 1) == 0))
  {
    v69 = v192;
    v68 = v193;
    *v192 = 0xD000000000000019;
    v69[1] = 0x80000001001FF870;
    v70 = v194;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v69, enum case for Errors.NotFound(_:), v194);
    v71 = (uint64_t)v191;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 16))(v191, v69, v70);
    v72 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v70, v72, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v73, v71, v70);
    v74 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v185 + 16))(v185, 0, v74);

LABEL_30:
    (*(void (**)(_QWORD *, uint64_t))(v68 + 8))(v69, v70);
    goto LABEL_31;
  }
  v35 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v34), "currentConnection");
  if (!v35)
  {
    v75 = v32;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v76 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v25, v76, v18);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    v80 = os_log_type_enabled(v78, v79);
    v81 = v185;
    if (v80)
    {
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed fetching current NSXPCConnection, cannot construct client", v82, 2u);
      swift_slowDealloc(v82, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    v49 = v192;
    v48 = v193;
    *v192 = 0xD000000000000017;
    v49[1] = 0x80000001001FDAB0;
    v50 = v194;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104))(v49, enum case for Errors.XPCNil(_:), v194);
    v83 = (uint64_t)v191;
    (*(void (**)(char *, _QWORD *, uint64_t))(v48 + 16))(v191, v49, v50);
    v84 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v50, v84, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v85, v83, v50);
    v67 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v81 + 16))(v81, 0, v67);

    goto LABEL_27;
  }
  v182 = v35;
  v36 = sub_1000FA184(v35);
  v183 = v37;
  swift_bridgeObjectRelease(v38);
  if ((v36 & 1) != 0 || v183)
  {
    (*(void (**)(uint64_t, _QWORD, id))(v185 + 16))(v185, 0, v183);

    return;
  }
  v39 = qword_100275638;
  if ((sub_10016DDE8(objc_msgSend(v182, "processIdentifier"), 0x7469736F50746573, 0xEC000000736E6F69) & 1) != 0)
  {
    v40 = v32;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v41 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v41, v18);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = v185;
    if (v45)
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Rate limit exceeded for setActuatorPositions", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v49 = v192;
    v48 = v193;
    *v192 = 0xD00000000000002BLL;
    v49[1] = 0x80000001001FFA80;
    v50 = v194;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104))(v49, enum case for Errors.rateLimitXPC(_:), v194);
    v51 = (uint64_t)v191;
    (*(void (**)(char *, _QWORD *, uint64_t))(v48 + 16))(v191, v49, v50);
    v52 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v50, v52, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v54, v51, v50);
    v55 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v46 + 16))(v46, 0, v55);

    goto LABEL_28;
  }
  v181 = v32;
  sub_10016BF20(1);
  sub_10016A93C(v29);
  v183 = a1;
  v86 = DockCoreInfo.type.getter(v183);
  v87 = DockCoreAccessoryType.rawValue.getter(v86);
  if (v87 != DockCoreAccessoryType.rawValue.getter(1))
    goto LABEL_93;
  v88 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v89 = *(os_unfair_lock_s **)(v39 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v89);
  os_unfair_lock_lock(v89 + 4);
  swift_release(v89);
  v90 = *(void **)(v39 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v91 = *(os_unfair_lock_s **)(v39 + v88);
  v92 = v90;
  swift_retain(v91);
  os_unfair_lock_unlock(v91 + 4);
  swift_release(v91);
  if (!v90)
    goto LABEL_93;
  v180 = v92;
  v93 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v94 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v95 = *(void **)&v93[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v96 = v93;
  v97 = v95;
  OS_dispatch_semaphore.wait()();

  v98 = &v96[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v96[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v196, 0, 0);
  v99 = *(_QWORD *)v98;
  v100 = *(_QWORD *)(*(_QWORD *)v98 + 16);
  if (v100)
  {
    *(_QWORD *)&v179 = v96;
    v101 = v99 + 32;
    swift_bridgeObjectRetain(v99);
    v102 = v184;
    while (1)
    {
      sub_10009AFF4(v101, (uint64_t)v195);
      v103 = *(id *)(*sub_10009B038(v195, v195[3]) + 24);
      DockCoreInfo.identifier.getter(v103);

      DockCoreInfo.identifier.getter(v104);
      LOBYTE(v103) = static UUID.== infix(_:_:)(v13, v11);
      v105 = (void (*)(char *, uint64_t))*((_QWORD *)v186 + 1);
      v105(v11, v102);
      v105(v13, v102);
      if ((v103 & 1) != 0)
        break;
      sub_100090E88(v195);
      v101 += 40;
      if (!--v100)
      {
        swift_bridgeObjectRelease(v99);
        v96 = (char *)v179;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease(v99);
    v107 = *(id *)&v93[v94];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v195, (uint64_t)&v197);
    sub_100090E88(v195);

  }
  else
  {
LABEL_45:
    v106 = *(id *)&v93[v94];
    OS_dispatch_semaphore.signal()();

    v199 = 0;
    v197 = 0u;
    v198 = 0u;

  }
  v108 = v180;
  if (!*((_QWORD *)&v198 + 1))
  {

    sub_10009B2C0((uint64_t)&v197, (uint64_t *)&unk_10026DF40);
LABEL_93:
    v69 = v192;
    v68 = v193;
    *v192 = 0x6C706D6920746F6ELL;
    v69[1] = 0xEF6465746E656D65;
    v70 = v194;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v69, enum case for Errors.OperationNotSupported(_:), v194);
    v168 = (uint64_t)v191;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 16))(v191, v69, v70);
    v169 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v70, v169, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v170, v168, v70);
    v171 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v185 + 16))(v185, 0, v171);

    goto LABEL_30;
  }
  v109 = sub_10009061C(&qword_10026C2E0);
  v110 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v195, &v197, v109, v110, 6) & 1) == 0)
  {

    goto LABEL_93;
  }
  v111 = v195[0];
  sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  v112 = *(id *)(v111 + 24);
  v113 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v112);
  v114 = static NSObject.== infix(_:_:)(v112, v113);

  if ((v114 & 1) == 0
    || (v115 = *(char **)(v111 + 16)) == 0
    || (v116 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral,
        (v117 = *(void **)&v115[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) == 0))
  {

    swift_release(v111);
    goto LABEL_93;
  }
  v186 = v115;
  if (objc_msgSend(v117, "state") != (id)2)
  {

    v172 = v111;
LABEL_95:
    swift_release(v172);

    goto LABEL_93;
  }
  v184 = v111;
  v119 = (id)objc_opt_self(CBUUID, v118);
  v120 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v121 = swift_allocObject(v120, 72, 7);
  v179 = xmmword_1001DE690;
  *(_OWORD *)(v121 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v121 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v121 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v121 + 32) = 512;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v121);
  v123 = v122;
  v124 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v123);
  v125 = objc_msgSend(v119, "UUIDWithString:", v124);

  v126 = *(void **)&v115[v116];
  if (!v126 || (v127 = objc_msgSend(v126, "services")) == 0)
  {

    swift_release(v184);
    goto LABEL_93;
  }
  v128 = v127;
  v129 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
  v130 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v128, v129);

  v131 = v125;
  v132 = (uint64_t)sub_1000F78BC(v130, (uint64_t)v131);
  swift_bridgeObjectRelease(v130);

  if (!((unint64_t)v132 >> 62))
  {
    if (*(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_57;
LABEL_106:

    swift_release(v184);
    swift_bridgeObjectRelease(v132);
    goto LABEL_93;
  }
  if (v132 < 0)
    v175 = v132;
  else
    v175 = v132 & 0xFFFFFFFFFFFFFF8;
  if (!_CocoaArrayWrapper.endIndex.getter(v175))
    goto LABEL_106;
LABEL_57:
  if ((v132 & 0xC000000000000001) != 0)
  {
    v133 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v132);
  }
  else
  {
    if (!*(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_109:
      if (v120 < 0)
        v176 = v120;
      else
        v176 = v120 & 0xFFFFFFFFFFFFFF8;
      if (_CocoaArrayWrapper.endIndex.getter(v176))
        goto LABEL_64;
      goto LABEL_113;
    }
    v133 = *(id *)(v132 + 32);
  }
  v178 = v133;

  swift_bridgeObjectRelease(v132);
  v134 = swift_allocObject(v120, 72, 7);
  *(_OWORD *)(v134 + 16) = v179;
  *(_QWORD *)(v134 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v134 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v134 + 32) = 261;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v134);
  v136 = v135;
  v137 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v136);
  v138 = objc_msgSend(v119, "UUIDWithString:", v137);

  if (!*(_QWORD *)&v115[v116]
    || (v139 = objc_msgSend(v178, "characteristics")) == 0)
  {

LABEL_98:
    v172 = v184;
    goto LABEL_95;
  }
  v140 = v139;
  v141 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
  v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v140, v141);

  v119 = v138;
  v120 = (uint64_t)sub_1000F78BC(v142, (uint64_t)v119);
  swift_bridgeObjectRelease(v142);

  if ((unint64_t)v120 >> 62)
    goto LABEL_109;
  if (!*(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_113:

    swift_bridgeObjectRelease(v120);
    goto LABEL_98;
  }
LABEL_64:
  if ((v120 & 0xC000000000000001) != 0)
  {
    v143 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v120);
  }
  else
  {
    if (!*(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v143 = (char *)*(id *)(v120 + 32);
  }
  v191 = v143;

  swift_bridgeObjectRelease(v120);
  v144 = v189[2];
  if (!v144 || (v145 = *(_QWORD *)(v188 + 16)) == 0)
  {
    v154 = _swiftEmptyArrayStorage;
    v153 = _swiftEmptyArrayStorage;
    goto LABEL_101;
  }
  v146 = v189;
  v148 = v189[4];
  v147 = v189[5];
  v194 = type metadata accessor for Actuator(0);
  v149 = v188;
  v193 = v188 + 32;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v149);
  v150 = 0;
  v192 = (_QWORD *)(v145 - 1);
  v151 = (_QWORD *)(v144 - 1);
  v152 = v146 + 7;
  v153 = _swiftEmptyArrayStorage;
  v154 = _swiftEmptyArrayStorage;
  while (1)
  {
    v155 = swift_bridgeObjectRetain(v147);
    v156 = *(double *)(v193 + 8 * (_QWORD)v150);
    v157 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)(v148, v147, v187, v190, v155);
    if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
      v153 = sub_1000E9E10(0, v153[2] + 1, 1, v153);
    v159 = v153[2];
    v158 = v153[3];
    if (v159 >= v158 >> 1)
      v153 = sub_1000E9E10((_QWORD *)(v158 > 1), v159 + 1, 1, v153);
    v153[2] = v159 + 1;
    v153[v159 + 4] = v157;
    v161 = static Actuator.Pitch.getter();
    v162 = v160;
    if (v148 == v161 && v147 == v160)
    {
      swift_bridgeObjectRelease_n(v147, 2);
LABEL_78:
      if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
        v154 = sub_1000E9D04(0, v154[2] + 1, 1, v154);
      v165 = v154[2];
      v164 = v154[3];
      v166 = v165 + 1;
      if (v165 >= v164 >> 1)
        v154 = sub_1000E9D04((_QWORD *)(v164 > 1), v165 + 1, 1, v154);
      v156 = -v156;
      goto LABEL_87;
    }
    v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v147, v161, v160, 0);
    swift_bridgeObjectRelease(v162);
    swift_bridgeObjectRelease(v147);
    if ((v163 & 1) != 0)
      goto LABEL_78;
    if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
      v154 = sub_1000E9D04(0, v154[2] + 1, 1, v154);
    v165 = v154[2];
    v167 = v154[3];
    v166 = v165 + 1;
    if (v165 >= v167 >> 1)
      v154 = sub_1000E9D04((_QWORD *)(v167 > 1), v165 + 1, 1, v154);
LABEL_87:
    v154[2] = v166;
    *(double *)&v154[v165 + 4] = v156;
    if (v151 == v150 || v192 == v150)
      break;
    v148 = *(v152 - 1);
    v147 = *v152;
    v150 = (_QWORD *)((char *)v150 + 1);
    v152 += 2;
  }
  swift_bridgeObjectRelease(v188);
  swift_bridgeObjectRelease(v189);
LABEL_101:
  v173 = v191;
  v174 = v184;
  sub_1001783A4((uint64_t)v153, (uint64_t)v154, 0, (uint64_t)v191);
  swift_bridgeObjectRelease(v153);
  swift_bridgeObjectRelease(v154);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v185 + 16))(v185, 1, 0);

  swift_release(v174);
}

uint64_t sub_1000FBCE8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  void *v27;
  os_unfair_lock_s *v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  _QWORD *v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v140 = a8;
  v141 = a4;
  v138 = a7;
  v139 = a3;
  v143 = a5;
  v144 = a6;
  v142 = a2;
  v149 = a9;
  v10 = type metadata accessor for Errors(0);
  v147 = *(_QWORD *)(v10 - 8);
  v148 = v10;
  v11 = __chkstk_darwin(v10);
  v146 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (id *)((char *)&v135 - v13);
  v145 = type metadata accessor for Logger(0);
  v150 = *(_QWORD *)(v145 - 8);
  v15 = __chkstk_darwin(v145);
  v17 = (char *)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v136 = (char *)&v135 - v19;
  v20 = __chkstk_darwin(v18);
  v137 = (char *)&v135 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v135 - v22;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v24 = qword_100275638;
  v25 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v26 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v26);
  os_unfair_lock_lock(v26 + 4);
  swift_release(v26);
  v27 = *(void **)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v28 = *(os_unfair_lock_s **)(v24 + v25);
  v29 = v27;
  swift_retain(v28);
  os_unfair_lock_unlock(v28 + 4);
  swift_release(v28);
  if (!v27)
    goto LABEL_14;
  v30 = v29;
  v31 = dispatch thunk of DockCoreAccessory.info.getter(v30);

  type metadata accessor for DockCoreInfo(0);
  v32 = a1;
  v33 = (id)v31;
  LOBYTE(v31) = static NSObject.== infix(_:_:)(v33, v32);

  if ((v31 & 1) == 0)
  {
LABEL_14:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v74 = v145;
    v75 = sub_10008EA50(v145, (uint64_t)qword_10026DE40);
    v76 = v150;
    v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v150 + 16))(v23, v75, v74);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "No such connected accessory, not setting velocity", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v76 + 8))(v23, v74);
    *v14 = 0xD000000000000016;
    v14[1] = 0x80000001001FF4E0;
    v82 = v147;
    v81 = v148;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v147 + 104))(v14, enum case for Errors.OperationNotSupported(_:), v148);
    v83 = v146;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v146, v14, v81);
    v84 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v85 = swift_allocError(v81, v84, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v86, v83, v81);
    v87 = (void *)_convertErrorToNSError(_:)(v85);
    (*(void (**)(uint64_t, _QWORD, void *))(v149 + 16))(v149, 0, v87);

    goto LABEL_25;
  }
  sub_10015DAB8(v32);
  v35 = v150;
  if (!v34)
    goto LABEL_20;
  v36 = v34;
  v37 = type metadata accessor for ActuationController(0);
  if ((dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v143, v144, v37) & 1) == 0)
  {

LABEL_20:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v88 = v30;
    v89 = v145;
    v90 = sub_10008EA50(v145, (uint64_t)qword_10026DE40);
    v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16))(v17, v90, v89);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed to find valid accessory with actuation controller.", v94, 2u);
      swift_slowDealloc(v94, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v89);
    *v14 = 0xD000000000000015;
    v14[1] = 0x80000001001FF500;
    v82 = v147;
    v81 = v148;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v147 + 104))(v14, enum case for Errors.NotFound(_:), v148);
    v95 = v146;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v146, v14, v81);
    v96 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v85 = swift_allocError(v81, v96, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v97, v95, v81);
    v87 = (void *)_convertErrorToNSError(_:)(v85);
    (*(void (**)(uint64_t, _QWORD, void *))(v149 + 16))(v149, 0, v87);

    goto LABEL_25;
  }
  sub_10016BF20(1);
  v38 = v36;
  sub_10016A93C(v36);

  v40 = DockCoreInfo.type.getter(v39);
  v41 = DockCoreAccessoryType.rawValue.getter(v40);
  v42 = DockCoreAccessoryType.rawValue.getter(1);
  if (v41 != v42)
  {
    *v14 = 0x6C706D6920746F6ELL;
    v14[1] = 0xEF6465746E656D65;
    v100 = v147;
    v101 = v30;
    v102 = v148;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v147 + 104))(v14, enum case for Errors.OperationNotSupported(_:), v148);
    v103 = v146;
    (*(void (**)(char *, _QWORD *, uint64_t))(v100 + 16))(v146, v14, v102);
    v104 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v105 = swift_allocError(v102, v104, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v106, v103, v102);
    v107 = (void *)_convertErrorToNSError(_:)(v105);
    (*(void (**)(uint64_t, _QWORD, void *))(v149 + 16))(v149, 0, v107);

    (*(void (**)(_QWORD *, uint64_t))(v100 + 8))(v14, v102);
    v98 = v105;
    return swift_errorRelease(v98);
  }
  v43 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v42);
  v44 = swift_allocObject(&unk_10023B9D8, 56, 7);
  *(_BYTE *)(v44 + 16) = 1;
  *(_QWORD *)(v44 + 24) = v32;
  *(_QWORD *)(v44 + 32) = v38;
  v45 = v144;
  *(_QWORD *)(v44 + 40) = v143;
  *(_QWORD *)(v44 + 48) = v45;
  v46 = v32;
  v47 = v38;
  swift_bridgeObjectRetain(v45);
  v48 = sub_100169000(v43, v142, v139, v141, (uint64_t)sub_1000FD940, v44);
  v50 = v49;

  swift_release(v44);
  if (!v48)
  {
    *v14 = 0xD000000000000014;
    v14[1] = 0x80000001001FF520;
    v82 = v147;
    v108 = v30;
    v81 = v148;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v147 + 104))(v14, enum case for Errors.NotFound(_:), v148);
    v109 = v146;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v146, v14, v81);
    v110 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v85 = swift_allocError(v81, v110, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v111, v109, v81);
    v87 = (void *)_convertErrorToNSError(_:)(v85);
    (*(void (**)(uint64_t, _QWORD, void *))(v149 + 16))(v149, 0, v87);

LABEL_25:
    (*(void (**)(_QWORD *, uint64_t))(v82 + 8))(v14, v81);
    v98 = v85;
    return swift_errorRelease(v98);
  }
  if ((v50 & 1) != 0)
  {
    v51 = qword_10026BB60;
    swift_retain(v48);
    v52 = v150;
    if (v51 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v53 = v145;
    v54 = sub_10008EA50(v145, (uint64_t)qword_10026DE40);
    v55 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v137, v54, v53);
    v56 = v47;
    v57 = v140;
    swift_bridgeObjectRetain_n(v140, 2);
    v58 = v56;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(28, -1);
      v135 = v30;
      v62 = v61;
      v63 = swift_slowAlloc(8, -1);
      v144 = v47;
      v64 = (_QWORD *)v63;
      v65 = swift_slowAlloc(32, -1);
      v148 = v65;
      v152 = v65;
      *(_DWORD *)v62 = 138412802;
      v66 = dispatch thunk of DockCoreAccessory.info.getter(v65);
      v151 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v62 + 4, v62 + 12);
      *v64 = v66;

      *(_WORD *)(v62 + 12) = 2080;
      swift_bridgeObjectRetain(v140);
      v67 = Array.description.getter(v140, &type metadata for Double);
      v69 = v68;
      swift_bridgeObjectRelease(v140);
      v151 = sub_1000906BC(v67, v69, &v152);
      v57 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease_n(v57, 2);
      swift_bridgeObjectRelease(v69);
      *(_WORD *)(v62 + 22) = 1024;
      LODWORD(v151) = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, (char *)&v151 + 4, v62 + 24, v62 + 28);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Animator was started for %@, target %s, owner %d", (uint8_t *)v62, 0x1Cu);
      v70 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v64, 1, v70);
      v71 = v64;
      v47 = v144;
      swift_slowDealloc(v71, -1, -1);
      v72 = v148;
      swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      v73 = v62;
      v30 = v135;
      swift_slowDealloc(v73, -1, -1);

      (*(void (**)(char *, uint64_t))(v150 + 8))(v137, v53);
    }
    else
    {

      swift_bridgeObjectRelease_n(v57, 2);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v55, v53);
    }
    v113 = v138;
    v114 = v57;
    goto LABEL_33;
  }
  v112 = v150;
  if (*(_DWORD *)(v48 + 16) != v142)
  {
    v115 = qword_10026BB60;
    swift_retain(v48);
    if (v115 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v116 = v145;
    v117 = sub_10008EA50(v145, (uint64_t)qword_10026DE40);
    v118 = v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v136, v117, v116);
    swift_retain_n(v48, 2);
    v119 = v141;
    v120 = swift_bridgeObjectRetain_n(v141, 2);
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.default.getter(v121);
    v123 = os_log_type_enabled(v121, v122);
    v135 = v30;
    if (v123)
    {
      v124 = swift_slowAlloc(22, -1);
      v125 = swift_slowAlloc(64, -1);
      v144 = v47;
      v126 = v125;
      v152 = v125;
      *(_DWORD *)v124 = 136315394;
      v127 = v48;
      v128 = *(_QWORD *)(v48 + 24);
      v129 = *(_QWORD *)(v48 + 32);
      swift_bridgeObjectRetain(v129);
      v151 = sub_1000906BC(v128, v129, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v124 + 4, v124 + 12);
      swift_release_n(v127, 2);
      v130 = v129;
      v48 = v127;
      swift_bridgeObjectRelease(v130);
      *(_WORD *)(v124 + 12) = 2080;
      swift_bridgeObjectRetain(v119);
      v151 = sub_1000906BC(v139, v119, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v124 + 14, v124 + 22);
      swift_bridgeObjectRelease_n(v119, 3);
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "animator owned by %s, rejecting request from %s", (uint8_t *)v124, 0x16u);
      swift_arrayDestroy(v126, 2, (char *)&type metadata for Any + 8);
      v131 = v126;
      v47 = v144;
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v124, -1, -1);

      (*(void (**)(char *, uint64_t))(v150 + 8))(v136, v145);
    }
    else
    {

      swift_bridgeObjectRelease_n(v119, 2);
      swift_release_n(v48, 2);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v118, v145);
    }
    *v14 = 0xD000000000000021;
    v14[1] = 0x80000001001FF540;
    v82 = v147;
    v81 = v148;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v147 + 104))(v14, enum case for Errors.UnexpectedError(_:), v148);
    v132 = v146;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v146, v14, v81);
    v133 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v85 = swift_allocError(v81, v133, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v134, v132, v81);
    v87 = (void *)_convertErrorToNSError(_:)(v85);
    (*(void (**)(uint64_t, _QWORD, void *))(v149 + 16))(v149, 0, v87);

    swift_release_n(v48, 2);
    goto LABEL_25;
  }
  swift_retain(v48);
  v113 = v138;
  v114 = v140;
LABEL_33:
  sub_1000BA328(v113, v114, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v149 + 16))(v149, 1, 0);

  return swift_release_n(v48, 2);
}

uint64_t sub_1000FCB30(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  void *v26;
  os_unfair_lock_s *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint8_t *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  NSObject *v115;
  unint64_t v116;
  os_log_type_t v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  int v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v133 = a3;
  v134 = a8;
  v131 = a7;
  v132 = a4;
  v136 = a5;
  v137 = a6;
  v135 = a2;
  v9 = type metadata accessor for Errors(0);
  v140 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v139 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (id *)((char *)&v128 - v12);
  v138 = type metadata accessor for Logger(0);
  v141 = *(_QWORD *)(v138 - 8);
  v14 = __chkstk_darwin(v138);
  v16 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v129 = (char *)&v128 - v18;
  v19 = __chkstk_darwin(v17);
  v130 = (char *)&v128 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v128 - v21;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v23 = qword_100275638;
  v24 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v25 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v25);
  os_unfair_lock_lock(v25 + 4);
  swift_release(v25);
  v26 = *(void **)(v23 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v27 = *(os_unfair_lock_s **)(v23 + v24);
  v28 = v26;
  swift_retain(v27);
  os_unfair_lock_unlock(v27 + 4);
  swift_release(v27);
  if (!v26)
    goto LABEL_14;
  v29 = v28;
  v30 = dispatch thunk of DockCoreAccessory.info.getter(v29);

  type metadata accessor for DockCoreInfo(0);
  v31 = a1;
  v32 = (id)v30;
  LOBYTE(v30) = static NSObject.== infix(_:_:)(v32, v31);

  if ((v30 & 1) == 0)
  {
LABEL_14:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v73 = v138;
    v74 = sub_10008EA50(v138, (uint64_t)qword_10026DE40);
    v75 = v141;
    v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 16))(v22, v74, v73);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "No such connected accessory, not setting velocity", v79, 2u);
      swift_slowDealloc(v79, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v73);
    *v13 = 0xD000000000000016;
    v13[1] = 0x80000001001FF4E0;
    v80 = v140;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v13, enum case for Errors.OperationNotSupported(_:), v9);
    v81 = v139;
    (*(void (**)(char *, _QWORD *, uint64_t))(v80 + 16))(v139, v13, v9);
    v82 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v83 = swift_allocError(v9, v82, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v84, v81, v9);
    v85 = (void *)_convertErrorToNSError(_:)(v83);
    sub_10019971C(0, v85);

    goto LABEL_25;
  }
  sub_10015DAB8(v31);
  v34 = v141;
  if (!v33)
    goto LABEL_20;
  v35 = v33;
  v36 = type metadata accessor for ActuationController(0);
  if ((dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v136, v137, v36) & 1) == 0)
  {

LABEL_20:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v86 = v29;
    v87 = v138;
    v88 = sub_10008EA50(v138, (uint64_t)qword_10026DE40);
    v89 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 16))(v16, v88, v87);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Failed to find valid accessory with actuation controller.", v92, 2u);
      v93 = v92;
      v34 = v141;
      swift_slowDealloc(v93, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v87);
    *v13 = 0xD000000000000015;
    v13[1] = 0x80000001001FF500;
    v80 = v140;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v13, enum case for Errors.NotFound(_:), v9);
    v94 = v139;
    (*(void (**)(char *, _QWORD *, uint64_t))(v80 + 16))(v139, v13, v9);
    v95 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v83 = swift_allocError(v9, v95, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v96, v94, v9);
    v85 = (void *)_convertErrorToNSError(_:)(v83);
    sub_10019971C(0, v85);

    goto LABEL_25;
  }
  sub_10016BF20(1);
  v37 = v35;
  sub_10016A93C(v35);

  v39 = DockCoreInfo.type.getter(v38);
  v40 = DockCoreAccessoryType.rawValue.getter(v39);
  v41 = DockCoreAccessoryType.rawValue.getter(1);
  if (v40 != v41)
  {
    *v13 = 0x6C706D6920746F6ELL;
    v13[1] = 0xEF6465746E656D65;
    v98 = v29;
    v80 = v140;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v13, enum case for Errors.OperationNotSupported(_:), v9);
    v99 = v139;
    (*(void (**)(char *, _QWORD *, uint64_t))(v80 + 16))(v139, v13, v9);
    v100 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v83 = swift_allocError(v9, v100, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v101, v99, v9);
    v102 = (void *)_convertErrorToNSError(_:)(v83);
    sub_10019971C(0, v102);

    goto LABEL_26;
  }
  v42 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v41);
  v43 = swift_allocObject(&unk_10023B370, 56, 7);
  *(_BYTE *)(v43 + 16) = 1;
  *(_QWORD *)(v43 + 24) = v31;
  *(_QWORD *)(v43 + 32) = v37;
  v44 = v137;
  *(_QWORD *)(v43 + 40) = v136;
  *(_QWORD *)(v43 + 48) = v44;
  v45 = v31;
  v46 = v37;
  swift_bridgeObjectRetain(v44);
  v47 = v132;
  v48 = sub_100169000(v42, v135, v133, v132, (uint64_t)sub_1000FD940, v43);
  v50 = v49;

  swift_release(v43);
  if (!v48)
  {
    *v13 = 0xD000000000000014;
    v13[1] = 0x80000001001FF520;
    v103 = v29;
    v80 = v140;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v13, enum case for Errors.NotFound(_:), v9);
    v104 = v46;
    v105 = v139;
    (*(void (**)(char *, _QWORD *, uint64_t))(v80 + 16))(v139, v13, v9);
    v106 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v83 = swift_allocError(v9, v106, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v107, v105, v9);
    v85 = (void *)_convertErrorToNSError(_:)(v83);
    sub_10019971C(0, v85);

LABEL_25:
LABEL_26:
    (*(void (**)(_QWORD *, uint64_t))(v80 + 8))(v13, v9);
    return swift_errorRelease(v83);
  }
  if ((v50 & 1) != 0)
  {
    v51 = v46;
    v52 = qword_10026BB60;
    swift_retain(v48);
    v53 = v141;
    v54 = v134;
    if (v52 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v55 = v138;
    v56 = sub_10008EA50(v138, (uint64_t)qword_10026DE40);
    v57 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v130, v56, v55);
    v58 = v51;
    swift_bridgeObjectRetain_n(v54, 2);
    v59 = v58;
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(28, -1);
      v63 = (uint64_t *)swift_slowAlloc(8, -1);
      v64 = swift_slowAlloc(32, -1);
      v140 = v64;
      v143 = v64;
      *(_DWORD *)v62 = 138412802;
      v65 = dispatch thunk of DockCoreAccessory.info.getter(v64);
      v142 = v65;
      v128 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v62 + 4, v62 + 12);
      *v63 = v65;

      *(_WORD *)(v62 + 12) = 2080;
      swift_bridgeObjectRetain(v54);
      v67 = Array.description.getter(v66, &type metadata for Double);
      v69 = v68;
      swift_bridgeObjectRelease(v134);
      v142 = sub_1000906BC(v67, v69, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease_n(v134, 2);
      v70 = v69;
      v54 = v134;
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v62 + 22) = 1024;
      LODWORD(v142) = v135;
      v29 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 4, v62 + 24, v62 + 28);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Animator was started for %@, target %s, owner %d", (uint8_t *)v62, 0x1Cu);
      v71 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v63, 1, v71);
      swift_slowDealloc(v63, -1, -1);
      v72 = v140;
      swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      (*(void (**)(char *, uint64_t))(v141 + 8))(v130, v138);
    }
    else
    {

      swift_bridgeObjectRelease_n(v54, 2);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v57, v55);
    }
    sub_1000BA328(v131, v54, 0);

    return swift_release_n(v48, 2);
  }
  v108 = v134;
  if (*(_DWORD *)(v48 + 16) != v135)
  {
    v137 = v46;
    v109 = qword_10026BB60;
    swift_retain(v48);
    if (v109 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v110 = v138;
    v111 = sub_10008EA50(v138, (uint64_t)qword_10026DE40);
    v112 = v141;
    v113 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v129, v111, v110);
    swift_retain_n(v48, 2);
    v114 = swift_bridgeObjectRetain_n(v47, 2);
    v115 = Logger.logObject.getter(v114);
    v116 = v47;
    v117 = static os_log_type_t.default.getter(v115);
    v118 = os_log_type_enabled(v115, v117);
    v128 = v29;
    if (v118)
    {
      v119 = swift_slowAlloc(22, -1);
      v136 = swift_slowAlloc(64, -1);
      v143 = v136;
      *(_DWORD *)v119 = 136315394;
      v120 = v48;
      v121 = *(_QWORD *)(v48 + 24);
      v122 = *(_QWORD *)(v48 + 32);
      swift_bridgeObjectRetain(v122);
      v142 = sub_1000906BC(v121, v122, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v119 + 4, v119 + 12);
      swift_release_n(v120, 2);
      v123 = v122;
      v48 = v120;
      swift_bridgeObjectRelease(v123);
      *(_WORD *)(v119 + 12) = 2080;
      swift_bridgeObjectRetain(v116);
      v142 = sub_1000906BC(v133, v116, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v119 + 14, v119 + 22);
      swift_bridgeObjectRelease_n(v116, 3);
      _os_log_impl((void *)&_mh_execute_header, v115, v117, "animator owned by %s, rejecting request from %s", (uint8_t *)v119, 0x16u);
      v124 = v136;
      swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1, -1);
      swift_slowDealloc(v119, -1, -1);

      (*(void (**)(char *, uint64_t))(v141 + 8))(v129, v138);
    }
    else
    {

      swift_bridgeObjectRelease_n(v116, 2);
      swift_release_n(v48, 2);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v110);
    }
    *v13 = 0xD000000000000021;
    v13[1] = 0x80000001001FF540;
    v80 = v140;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v13, enum case for Errors.UnexpectedError(_:), v9);
    v125 = v139;
    (*(void (**)(char *, _QWORD *, uint64_t))(v80 + 16))(v139, v13, v9);
    v126 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v83 = swift_allocError(v9, v126, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v127, v125, v9);
    v85 = (void *)_convertErrorToNSError(_:)(v83);
    sub_10019971C(0, v85);

    swift_release_n(v48, 2);
    goto LABEL_25;
  }
  swift_retain(v48);
  sub_1000BA328(v131, v108, 0);

  return swift_release_n(v48, 2);
}

void sub_1000FD944(void *a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, void (**a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  __n128 v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  unsigned int *v45;
  void (**v46)(_QWORD *, _QWORD, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  id v58;
  uint8_t *v59;
  uint8_t *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  os_unfair_lock_s *v71;
  void *v72;
  os_unfair_lock_s *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  char v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  void *v127;
  __n128 v128;
  void *v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  unint64_t v133;
  void *v134;
  int v135;
  char *v136;
  uint64_t v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (**v145)(_QWORD *, _QWORD, uint64_t);
  void (**v146)(_QWORD, _QWORD, _QWORD);
  uint64_t v147;
  char *v148;
  char v149[32];

  v139 = a5;
  v140 = a4;
  v141 = a3;
  v137 = a2;
  v8 = type metadata accessor for Errors(0);
  v145 = *(void (***)(_QWORD *, _QWORD, uint64_t))(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v144 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v131 - v11);
  v13 = sub_10009061C(&qword_10026E0A0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v142 = *(_QWORD *)(v17 - 8);
  v143 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v138 = (char *)&v131 - v22;
  v23 = __chkstk_darwin(v21);
  v136 = (char *)&v131 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v131 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v131 - v28;
  v146 = a6;
  _Block_copy(a6);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v38 = v143;
    v39 = sub_10008EA50(v143, (uint64_t)qword_10026DE40);
    v40 = v142;
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 16))(v29, v39, v38);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Client doesn't have camera TCC, rejecting XPC message", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v38);
    *v12 = 0xD000000000000012;
    v12[1] = 0x80000001001FF590;
    v45 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_17;
  }
  if (!a1 || !v141 || !v140 || !v139)
  {
    *v12 = 0xD000000000000016;
    v12[1] = 0x80000001001FF5B0;
    v45 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_17:
    v46 = v145;
    v145[13](v12, *v45, v8);
    v47 = v144;
    ((void (**)(char *, _QWORD *, uint64_t))v46)[2](v144, v12, v8);
    v48 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v49 = swift_allocError(v8, v48, 0, 0);
    ((void (**)(_QWORD *, char *, uint64_t))v46)[4](v50, v47, v8);
    v51 = (void *)_convertErrorToNSError(_:)(v49);
    v37 = v146;
    ((void (**)(_QWORD, _QWORD, void *))v146)[2](v146, 0, v51);
LABEL_18:

LABEL_19:
    ((void (*)(_QWORD *, uint64_t))v46[1])(v12, v8);
    swift_errorRelease(v49);
    goto LABEL_20;
  }
  v31 = (void *)objc_opt_self(NSXPCConnection, v30);
  v32 = a1;
  v33 = objc_msgSend(v31, "currentConnection");
  if (!v33)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v52 = v143;
    v53 = sub_10008EA50(v143, (uint64_t)qword_10026DE40);
    v54 = v142;
    v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 16))(v27, v53, v52);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = v32;
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed fetching current NSXPCConnection, cannot construct client", v59, 2u);
      v60 = v59;
      v32 = v58;
      swift_slowDealloc(v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v52);
    *v12 = 0xD000000000000017;
    v12[1] = 0x80000001001FDAB0;
    v46 = v145;
    v145[13](v12, enum case for Errors.XPCNil(_:), v8);
    v61 = v144;
    ((void (**)(char *, _QWORD *, uint64_t))v46)[2](v144, v12, v8);
    v62 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v49 = swift_allocError(v8, v62, 0, 0);
    ((void (**)(_QWORD *, char *, uint64_t))v46)[4](v63, v61, v8);
    v51 = (void *)_convertErrorToNSError(_:)(v49);
    v37 = v146;
    ((void (**)(_QWORD, _QWORD, void *))v146)[2](v146, 0, v51);

    goto LABEL_18;
  }
  v34 = v33;
  v135 = objc_msgSend(v33, "processIdentifier");
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v35 = qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  v36 = swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v149, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v16, v35, v13, v36);
  DKThreadSafe.wrappedValue.getter(&v148, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((v148 & 1) != 0)
  {
    v37 = v146;
    v146[2](v146, 1, 0);

    goto LABEL_20;
  }
  v64 = sub_1000FA184(v34);
  v68 = v65;
  if ((v64 & 1) != 0 || v65)
  {
    swift_bridgeObjectRelease(v67);
    v37 = v146;
    ((void (**)(_QWORD, _QWORD, void *))v146)[2](v146, 0, v68);

    goto LABEL_20;
  }
  v131 = v66;
  v132 = v34;
  v133 = v67;
  v134 = v32;
  v69 = qword_100275638;
  v70 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v71 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v71);
  os_unfair_lock_lock(v71 + 4);
  swift_release(v71);
  v72 = *(void **)(v69 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v73 = *(os_unfair_lock_s **)(v69 + v70);
  v74 = v72;
  swift_retain(v73);
  os_unfair_lock_unlock(v73 + 4);
  swift_release(v73);
  if (!v72)
    goto LABEL_39;
  v75 = v74;
  v76 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v75);

  type metadata accessor for DockCoreInfo(0);
  v77 = v134;
  v78 = v76;
  v79 = static NSObject.== infix(_:_:)(v78, v77);

  if ((v79 & 1) == 0)
  {
LABEL_39:
    v106 = v74;
    swift_bridgeObjectRelease(v133);
    v108 = v142;
    v107 = v143;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v109 = sub_10008EA50(v107, (uint64_t)qword_10026DE40);
    v110 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 16))(v20, v109, v107);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "No such connected accessory, not setting velocity", v113, 2u);
      swift_slowDealloc(v113, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v108 + 8))(v20, v107);
    *v12 = 0xD000000000000016;
    v12[1] = 0x80000001001FF4E0;
    v46 = v145;
    v145[13](v12, enum case for Errors.OperationNotSupported(_:), v8);
    v114 = v144;
    ((void (**)(char *, _QWORD *, uint64_t))v46)[2](v144, v12, v8);
    v115 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v49 = swift_allocError(v8, v115, 0, 0);
    ((void (**)(_QWORD *, char *, uint64_t))v46)[4](v116, v114, v8);
    v117 = (void *)_convertErrorToNSError(_:)(v49);
    v37 = v146;
    ((void (**)(_QWORD, _QWORD, void *))v146)[2](v146, 0, v117);

    goto LABEL_50;
  }
  sub_10015DAB8(v77);
  v82 = v142;
  v81 = v143;
  if (!v80)
  {
LABEL_45:
    swift_bridgeObjectRelease(v133);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v118 = sub_10008EA50(v81, (uint64_t)qword_10026DE40);
    v119 = v138;
    v120 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16))(v138, v118, v81);
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v121, v122))
    {
      v123 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Failed fetching current NSXPCConnection, cannot construct client", v123, 2u);
      swift_slowDealloc(v123, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v82 + 8))(v119, v81);
    *v12 = 0xD000000000000017;
    v12[1] = 0x80000001001FDAB0;
    v46 = v145;
    v145[13](v12, enum case for Errors.OperationNotSupported(_:), v8);
    v124 = v144;
    ((void (**)(char *, _QWORD *, uint64_t))v46)[2](v144, v12, v8);
    v125 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v49 = swift_allocError(v8, v125, 0, 0);
    ((void (**)(_QWORD *, char *, uint64_t))v46)[4](v126, v124, v8);
    v117 = (void *)_convertErrorToNSError(_:)(v49);
    v37 = v146;
    ((void (**)(_QWORD, _QWORD, void *))v146)[2](v146, 0, v117);

LABEL_50:
    goto LABEL_19;
  }
  v83 = v80;
  v134 = v77;
  v84 = type metadata accessor for ActuationController(0);
  v85 = v137;
  v86 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v137, v141, v84);
  if ((v86 & 1) == 0)
  {

    v77 = v134;
    goto LABEL_45;
  }
  v87 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v86);
  v89 = sub_100169710(v88);

  if (v89)
  {
    v90 = *(_QWORD *)(v89 + 24);
    v91 = *(_QWORD *)(v89 + 32);
    swift_bridgeObjectRetain(v91);
    LOBYTE(v90) = sub_1000F8A48(v131, v133, v90, v91, v132);
    swift_bridgeObjectRelease(v91);
    if ((v90 & 1) != 0)
    {
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v92 = sub_10008EA50(v81, (uint64_t)qword_10026DE40);
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v136, v92, v81);
      v93 = v133;
      swift_bridgeObjectRetain_n(v133, 2);
      v94 = swift_retain_n(v89, 2);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.default.getter(v95);
      v97 = v96;
      if (os_log_type_enabled(v95, v96))
      {
        v98 = swift_slowAlloc(22, -1);
        LODWORD(v144) = v97;
        v99 = v98;
        v138 = (char *)swift_slowAlloc(64, -1);
        v148 = v138;
        *(_DWORD *)v99 = 136315394;
        swift_bridgeObjectRetain(v93);
        v147 = sub_1000906BC(v131, v93, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v99 + 4, v99 + 12);
        swift_bridgeObjectRelease_n(v93, 3);
        *(_WORD *)(v99 + 12) = 2080;
        v145 = (void (**)(_QWORD *, _QWORD, uint64_t))v75;
        v100 = *(_QWORD *)(v89 + 24);
        v101 = *(_QWORD *)(v89 + 32);
        swift_bridgeObjectRetain(v101);
        v102 = v100;
        v85 = v137;
        v147 = sub_1000906BC(v102, v101, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v99 + 14, v99 + 22);
        swift_release_n(v89, 2);
        v103 = v101;
        v75 = v145;
        swift_bridgeObjectRelease(v103);
        _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v144, "Foreground app %s force-removing animator for %s", (uint8_t *)v99, 0x16u);
        v104 = v138;
        swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v104, -1, -1);
        swift_slowDealloc(v99, -1, -1);

        v105 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v136, v143);
      }
      else
      {

        swift_release_n(v89, 2);
        swift_bridgeObjectRelease_n(v93, 2);
        v105 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v136, v81);
      }
      v127 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v105);
      sub_100169828(v128);

    }
  }
  v37 = v146;
  _Block_copy(v146);
  v130 = v133;
  v129 = v134;
  sub_1000FBCE8(v134, v135, v131, v133, v85, v141, v140, v139, (uint64_t)v37);
  _Block_release(v37);

  swift_bridgeObjectRelease(v130);
  swift_release(v89);
LABEL_20:
  _Block_release(v37);
}

void sub_1000FE71C(void *a1, uint64_t a2, uint64_t a3, void *a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD);
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  unint64_t v78;
  id v79;
  NSString v80;
  Class isa;
  id v82;
  id v83;
  void (**v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  BOOL v105;
  void (**v106)(_QWORD, _QWORD, _QWORD);
  uint8_t *v107;
  uint8_t *v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  id v127;
  NSString v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  char *v141;
  char *v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  id v153;
  NSString v154;
  Class v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  void *v160;
  unint64_t v161;
  unint64_t v162;
  void *v163;
  __n128 v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  void *v168;
  char **v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  int v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  NSObject *v193;
  os_log_type_t v194;
  BOOL v195;
  void (**v196)(_QWORD, _QWORD, _QWORD);
  uint8_t *v197;
  uint8_t *v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void *v205;
  __n128 v206;
  int v207;
  char *v208;
  unsigned int v209;
  char *v210;
  char v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t (**v225)(char, uint64_t);
  uint64_t (*v226)(char, uint64_t);
  void *v227;
  _QWORD *v228;
  uint64_t v229;
  id v230;
  uint64_t v231;
  char *v232;
  void *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  NSObject *v237;
  os_log_type_t v238;
  BOOL v239;
  void (**v240)(_QWORD, _QWORD, _QWORD);
  uint8_t *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  NSObject *v254;
  os_log_type_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  void (**v260)(_QWORD, _QWORD, _QWORD);
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  void (**v274)(_QWORD, _QWORD, _QWORD);
  char *v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  id v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  id v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301[4];
  char v302[24];
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  char v306[88];

  v284 = a4;
  v294 = a3;
  v278 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v268 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v268 - v12;
  v14 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v14);
  v281 = (uint64_t)&v268 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10009061C((uint64_t *)&unk_10026E0C0);
  __chkstk_darwin(v16);
  v283 = (char *)&v268 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TrajectoryCommand(0);
  v286 = *(_QWORD *)(v18 - 8);
  v287 = v18;
  v19 = __chkstk_darwin(v18);
  v276 = v20;
  v277 = (char *)&v268 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v285 = (char *)&v268 - v21;
  v22 = type metadata accessor for Errors(0);
  v293 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v291 = (char *)&v268 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v292 = (uint64_t *)((char *)&v268 - v25);
  v26 = type metadata accessor for Logger(0);
  v27 = *(char **)(v26 - 8);
  v295 = v26;
  v296 = v27;
  v28 = __chkstk_darwin(v26);
  v290 = (char *)&v268 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v275 = (char *)&v268 - v31;
  v32 = __chkstk_darwin(v30);
  v280 = (char *)&v268 - v33;
  v34 = __chkstk_darwin(v32);
  v279 = (char *)&v268 - v35;
  v36 = __chkstk_darwin(v34);
  v282 = (char *)&v268 - v37;
  v38 = __chkstk_darwin(v36);
  v288 = (char *)&v268 - v39;
  v40 = __chkstk_darwin(v38);
  v289 = (char *)&v268 - v41;
  __chkstk_darwin(v40);
  v43 = (char *)&v268 - v42;
  v44 = swift_allocObject(&unk_10023B8E8, 24, 7);
  *(_QWORD *)(v44 + 16) = a5;
  _Block_copy(a5);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v58 = v295;
    v59 = sub_10008EA50(v295, (uint64_t)qword_10026DE40);
    v60 = v296;
    v61 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v296 + 2))(v43, v59, v58);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Client doesn't have camera TCC, rejecting XPC message", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    (*((void (**)(char *, uint64_t))v60 + 1))(v43, v58);
    v66 = v292;
    v65 = v293;
    *v292 = 0xD000000000000012;
    v66[1] = 0x80000001001FF590;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for Errors.CameraTCCMissing(_:), v22);
    v67 = v291;
    (*(void (**)(char *, _QWORD *, uint64_t))(v65 + 16))(v291, v66, v22);
    v68 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v69 = swift_allocError(v22, v68, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v70, v67, v22);
    v71 = (void *)_convertErrorToNSError(_:)(v69);
    ((void (**)(_QWORD, _QWORD, void *))a5)[2](a5, 0, v71);
    goto LABEL_17;
  }
  if (!a1 || !v294)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v74 = v73;
    v75 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v75, &v306);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v77;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001001FD090;
    v78 = sub_1001B0FB8(inited);
    v79 = objc_allocWithZone((Class)NSError);
    v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v74);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v78);
    v82 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v80, 72, isa);

    ((void (**)(_QWORD, _QWORD, id))a5)[2](a5, 0, v82);
    swift_release(v44);
LABEL_42:

    return;
  }
  v274 = a5;
  v45 = qword_10026BC00;
  v297 = a1;
  swift_bridgeObjectRetain(v294);
  if (v45 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v46 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v271 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v272 = v46;
  v47 = *(void **)&v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v48 = v46;
  v49 = v47;
  OS_dispatch_semaphore.wait()();

  v273 = v48;
  v50 = &v48[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v48[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], &v302, 0, 0);
  v51 = *(_QWORD *)v50;
  v52 = *(_QWORD *)(*(_QWORD *)v50 + 16);
  if (v52)
  {
    v269 = v44;
    v270 = v22;
    v53 = v51 + 32;
    swift_bridgeObjectRetain(v51);
    while (1)
    {
      sub_10009AFF4(v53, (uint64_t)&v300);
      v54 = *(id *)(*sub_10009B038(&v300, v301[2]) + 24);
      DockCoreInfo.identifier.getter(v54);

      DockCoreInfo.identifier.getter(v55);
      LOBYTE(v54) = static UUID.== infix(_:_:)(v13, v11);
      v56 = *(void (**)(_QWORD, _QWORD))(v8 + 8);
      v56(v11, v7);
      v56(v13, v7);
      if ((v54 & 1) != 0)
        break;
      sub_100090E88(&v300);
      v53 += 40;
      if (!--v52)
      {
        swift_bridgeObjectRelease(v51);
        v44 = v269;
        v22 = v270;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v51);
    v83 = *(id *)&v272[v271];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)&v300, (uint64_t)&v303);
    sub_100090E88(&v300);

    v44 = v269;
    v22 = v270;
  }
  else
  {
LABEL_11:
    v57 = *(id *)&v272[v271];
    OS_dispatch_semaphore.signal()();

    v305 = 0;
    v303 = 0u;
    v304 = 0u;

  }
  v84 = v274;
  v85 = v295;
  v86 = v296;
  if (!*((_QWORD *)&v304 + 1))
  {
    swift_bridgeObjectRelease(v294);
    sub_10009B2C0((uint64_t)&v303, (uint64_t *)&unk_10026DF40);
LABEL_37:
    v115 = v290;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v116 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
    v117 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v86 + 2))(v115, v116, v85);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Accessory record not found", v120, 2u);
      swift_slowDealloc(v120, -1, -1);
    }

    (*((void (**)(char *, uint64_t))v86 + 1))(v115, v85);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v122 = v121;
    v123 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    v124 = swift_initStackObject(v123, &v299);
    *(_OWORD *)(v124 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v124 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v124 + 40) = v125;
    *(_QWORD *)(v124 + 72) = &type metadata for String;
    *(_QWORD *)(v124 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v124 + 56) = 0x80000001001FD0B0;
    v126 = sub_1001B0FB8(v124);
    v127 = objc_allocWithZone((Class)NSError);
    v128 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v122);
    v129 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v126);
    v82 = objc_msgSend(v127, "initWithDomain:code:userInfo:", v128, 19, v129);

    ((void (**)(_QWORD, _QWORD, id))v84)[2](v84, 0, v82);
    swift_release(v44);

    goto LABEL_42;
  }
  v87 = sub_10009061C(&qword_10026C2E0);
  v88 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(&v300, &v303, v87, v88, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v294);
    goto LABEL_37;
  }
  v90 = (char *)v300;
  if (*(_BYTE *)(v300 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release(v300);
    swift_bridgeObjectRelease(v294);
    v85 = v295;
    v86 = v296;
    goto LABEL_37;
  }
  v91 = (char *)objc_msgSend((id)objc_opt_self(NSXPCConnection, v89), "currentConnection");
  if (!v91)
  {
    swift_bridgeObjectRelease(v294);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v130 = v295;
    v131 = sub_10008EA50(v295, (uint64_t)qword_10026DE40);
    v132 = v289;
    v133 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v296 + 2))(v289, v131, v130);
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v134, v135))
    {
      v136 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v136 = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "Failed fetching current NgitsSXPCConnection, cannot construct client", v136, 2u);
      swift_slowDealloc(v136, -1, -1);
    }

    (*((void (**)(char *, uint64_t))v296 + 1))(v132, v295);
    v66 = v292;
    v65 = v293;
    *v292 = 0xD000000000000017;
    v66[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for Errors.XPCNil(_:), v22);
    v137 = v291;
    (*(void (**)(char *, _QWORD *, uint64_t))(v65 + 16))(v291, v66, v22);
    v138 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v69 = swift_allocError(v22, v138, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v139, v137, v22);
    v71 = (void *)_convertErrorToNSError(_:)(v69);
    ((void (**)(_QWORD, _QWORD, void *))v84)[2](v84, 0, v71);
    swift_release(v90);

    goto LABEL_17;
  }
  v92 = v91;
  v93 = sub_1000FA184(v91);
  v95 = v94;
  swift_bridgeObjectRelease(v96);
  if ((v93 & 1) == 0 && !v95)
  {
    if ((sub_10016DDE8(objc_msgSend(v92, "processIdentifier"), 0x6A617254646E6573, 0xEE0079726F746365) & 1) != 0)
    {
      v97 = v22;
      swift_bridgeObjectRelease(v294);
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v98 = v92;
      v290 = v90;
      v99 = v295;
      v100 = sub_10008EA50(v295, (uint64_t)qword_10026DE40);
      v101 = v288;
      v102 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v296 + 2))(v288, v100, v99);
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter(v103);
      v105 = os_log_type_enabled(v103, v104);
      v106 = v274;
      if (v105)
      {
        v107 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Rate limit exceeded for sendTrajectory", v107, 2u);
        v108 = v107;
        v101 = v288;
        swift_slowDealloc(v108, -1, -1);
      }

      (*((void (**)(char *, uint64_t))v296 + 1))(v101, v99);
      v110 = v292;
      v109 = v293;
      *v292 = 0xD000000000000024;
      v110[1] = 0x80000001001FF9A0;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v109 + 104))(v110, enum case for Errors.rateLimitXPC(_:), v97);
      v111 = v291;
      (*(void (**)(char *, _QWORD *, uint64_t))(v109 + 16))(v291, v110, v97);
      v112 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v69 = swift_allocError(v97, v112, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v109 + 32))(v113, v111, v97);
      v114 = (void *)_convertErrorToNSError(_:)(v69);
      ((void (**)(_QWORD, _QWORD, void *))v106)[2](v106, 0, v114);

      swift_release(v290);
      (*(void (**)(_QWORD *, uint64_t))(v109 + 8))(v110, v97);
      goto LABEL_18;
    }
    v289 = v92;
    v140 = v297;
    sub_10015DAB8(v297);
    if (v141)
    {
      v142 = v141;
      v143 = v284;
      v144 = v283;
      TrajectoryCommand.init(nsdata:)(v143);
      v146 = v286;
      v145 = v287;
      if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v286 + 48))(v144, 1, v287) == 1)
      {
        swift_bridgeObjectRelease(v294);
        sub_10009B2C0((uint64_t)v144, (uint64_t *)&unk_10026E0C0);
        static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
        v148 = v147;
        v149 = sub_10009061C((uint64_t *)&unk_10026C2D0);
        v150 = swift_initStackObject(v149, &v298);
        *(_OWORD *)(v150 + 16) = xmmword_1001DE690;
        *(_QWORD *)(v150 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(v150 + 40) = v151;
        *(_QWORD *)(v150 + 72) = &type metadata for String;
        *(_QWORD *)(v150 + 48) = 0xD000000000000020;
        *(_QWORD *)(v150 + 56) = 0x80000001001FF970;
        v152 = sub_1001B0FB8(v150);
        v153 = objc_allocWithZone((Class)NSError);
        v154 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v148);
        v155 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v152);
        v82 = objc_msgSend(v153, "initWithDomain:code:userInfo:", v154, 19, v155);

        ((void (**)(_QWORD, _QWORD, id))v274)[2](v274, 0, v82);
        swift_release(v44);

        swift_release(v90);
        goto LABEL_42;
      }
      v290 = v90;
      v270 = v22;
      v159 = *(char **)(v146 + 32);
      ((void (*)(char *, id, uint64_t))v159)(v285, v144, v145);
      v160 = (void *)sub_10016D5D0(v289);
      v284 = v160;
      if (v161)
      {
        v162 = v161;
        v282 = v159;
        v163 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v160);
        v165 = sub_100169710(v164);

        v166 = v289;
        v167 = v295;
        v288 = (char *)v165;
        v168 = v140;
        v169 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
        if (!v165)
          goto LABEL_68;
        v170 = *(_QWORD *)(v165 + 24);
        v171 = *(_QWORD *)(v165 + 32);
        swift_bridgeObjectRetain(v171);
        LOBYTE(v170) = sub_1000F8A48((uint64_t)v284, v162, v170, v171, v166);
        swift_bridgeObjectRelease(v171);
        if ((v170 & 1) != 0)
        {
          v172 = v288;
          if (qword_10026BB60 != -1)
            swift_once(&qword_10026BB60, sub_1000EF32C);
          v173 = sub_10008EA50(v167, (uint64_t)qword_10026DE40);
          v174 = v279;
          (*((void (**)(char *, uint64_t, uint64_t))v296 + 2))(v279, v173, v167);
          swift_bridgeObjectRetain_n(v162, 2);
          v175 = swift_retain_n(v172, 2);
          v176 = Logger.logObject.getter(v175);
          v177 = static os_log_type_t.default.getter(v176);
          v178 = v177;
          if (os_log_type_enabled(v176, v177))
          {
            v179 = v172;
            v180 = swift_slowAlloc(22, -1);
            v273 = (char *)swift_slowAlloc(64, -1);
            *(_QWORD *)&v303 = v273;
            *(_DWORD *)v180 = 136315394;
            v283 = v142;
            swift_bridgeObjectRetain(v162);
            v300 = sub_1000906BC((uint64_t)v284, v162, (uint64_t *)&v303);
            LODWORD(v272) = v178;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v180 + 4, v180 + 12);
            swift_bridgeObjectRelease_n(v162, 3);
            *(_WORD *)(v180 + 12) = 2080;
            v269 = v44;
            v181 = *((_QWORD *)v179 + 3);
            v182 = *((_QWORD *)v179 + 4);
            swift_bridgeObjectRetain(v182);
            v183 = v181;
            v142 = v283;
            v300 = sub_1000906BC(v183, v182, (uint64_t *)&v303);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v180 + 14, v180 + 22);
            swift_release_n(v179, 2);
            v184 = v182;
            v44 = v269;
            v168 = v297;
            swift_bridgeObjectRelease(v184);
            _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v272, "Foreground app %s force-removing animator for %s", (uint8_t *)v180, 0x16u);
            v185 = v273;
            swift_arrayDestroy(v273, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v185, -1, -1);
            swift_slowDealloc(v180, -1, -1);

            v186 = (*((uint64_t (**)(char *, uint64_t))v296 + 1))(v279, v167);
          }
          else
          {

            swift_release_n(v172, 2);
            swift_bridgeObjectRelease_n(v162, 2);
            v186 = (*((uint64_t (**)(char *, uint64_t))v296 + 1))(v174, v167);
          }
          v205 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v186);
          sub_100169828(v206);

          v166 = v289;
          v169 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
        }
        v207 = *((_DWORD *)v288 + 4);
        if (v207 != objc_msgSend(v166, v169[74]))
        {
          swift_bridgeObjectRelease(v294);
          if (qword_10026BB60 != -1)
            swift_once(&qword_10026BB60, sub_1000EF32C);
          v283 = v142;
          v249 = sub_10008EA50(v167, (uint64_t)qword_10026DE40);
          v250 = v296;
          v251 = v280;
          (*((void (**)(char *, uint64_t, uint64_t))v296 + 2))(v280, v249, v167);
          swift_bridgeObjectRetain(v162);
          v252 = v288;
          v253 = swift_retain(v288);
          v254 = Logger.logObject.getter(v253);
          v255 = static os_log_type_t.default.getter(v254);
          if (os_log_type_enabled(v254, v255))
          {
            v256 = swift_slowAlloc(22, -1);
            v257 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v303 = v257;
            *(_DWORD *)v256 = 136315394;
            v269 = v44;
            v258 = *((_QWORD *)v252 + 3);
            v259 = *((_QWORD *)v252 + 4);
            swift_bridgeObjectRetain(v259);
            v300 = sub_1000906BC(v258, v259, (uint64_t *)&v303);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v256 + 4, v256 + 12);
            swift_release(v252);
            swift_bridgeObjectRelease(v259);
            *(_WORD *)(v256 + 12) = 2080;
            swift_bridgeObjectRetain(v162);
            v300 = sub_1000906BC((uint64_t)v284, v162, (uint64_t *)&v303);
            v168 = v297;
            v44 = v269;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v256 + 14, v256 + 22);
            swift_bridgeObjectRelease_n(v162, 3);
            _os_log_impl((void *)&_mh_execute_header, v254, v255, "animator owned by %s, rejecting request from %s", (uint8_t *)v256, 0x16u);
            swift_arrayDestroy(v257, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v257, -1, -1);
            swift_slowDealloc(v256, -1, -1);

            (*((void (**)(char *, uint64_t))v296 + 1))(v280, v295);
          }
          else
          {

            swift_bridgeObjectRelease_n(v162, 2);
            swift_release(v252);
            (*((void (**)(char *, uint64_t))v250 + 1))(v251, v167);
          }
          v260 = v274;
          v262 = v292;
          v261 = v293;
          *v292 = 0xD000000000000021;
          v262[1] = 0x80000001001FF540;
          v263 = v270;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v261 + 104))(v262, enum case for Errors.UnexpectedError(_:), v270);
          v264 = v291;
          (*(void (**)(char *, _QWORD *, uint64_t))(v261 + 16))(v291, v262, v263);
          v265 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
          v69 = swift_allocError(v263, v265, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v261 + 32))(v266, v264, v263);
          v267 = (void *)_convertErrorToNSError(_:)(v69);
          ((void (**)(_QWORD, _QWORD, void *))v260)[2](v260, 0, v267);

          swift_release(v252);
          swift_release(v290);

          (*(void (**)(_QWORD *, uint64_t))(v261 + 8))(v262, v263);
        }
        else
        {
LABEL_68:
          swift_bridgeObjectRelease(v162);
          v208 = v166;
          v209 = objc_msgSend(v166, v169[74]);
          v210 = v208;
          v211 = sub_100173EAC(v209, v208);

          if ((v211 & 1) != 0)
          {
            v296 = v210;
            v283 = v142;
            v269 = v44;
            sub_10016A6A4();
            v212 = v286;
            v213 = v288;
            if (v288)
            {
              swift_retain(v288);
              sub_1000BC1F8();
              swift_release(v213);
            }
            v214 = type metadata accessor for TaskPriority(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v214 - 8) + 56))(v281, 1, 1, v214);
            v215 = v277;
            (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v277, v285, v287);
            v216 = *(unsigned __int8 *)(v212 + 80);
            v217 = (v216 + 40) & ~v216;
            v218 = (v276 + v217 + 7) & 0xFFFFFFFFFFFFFFF8;
            v219 = (v218 + 23) & 0xFFFFFFFFFFFFFFF8;
            v220 = (v219 + 15) & 0xFFFFFFFFFFFFFFF8;
            v221 = (_QWORD *)swift_allocObject(&unk_10023B910, v220 + 16, v216 | 7);
            v221[2] = 0;
            v221[3] = 0;
            v222 = v290;
            v221[4] = v290;
            v223 = v215;
            v224 = v287;
            ((void (*)(char *, char *, uint64_t))v282)((char *)v221 + v217, v223, v287);
            v225 = (uint64_t (**)(char, uint64_t))((char *)v221 + v218);
            v226 = (uint64_t (*)(char, uint64_t))v269;
            *v225 = sub_100114AD8;
            v225[1] = v226;
            v227 = v297;
            *(_QWORD *)((char *)v221 + v219) = v297;
            v228 = (_QWORD *)((char *)v221 + v220);
            v229 = v294;
            *v228 = v278;
            v228[1] = v229;
            v230 = v227;
            swift_retain(v222);
            swift_retain(v226);
            v231 = sub_10018A990(v281, (uint64_t)&unk_10026E0D8, (uint64_t)v221);

            swift_release(v213);
            swift_release(v222);

            swift_release(v231);
            (*(void (**)(char *, uint64_t))(v212 + 8))(v285, v224);
            v72 = (uint64_t)v226;
            goto LABEL_19;
          }
          v232 = v210;
          swift_bridgeObjectRelease(v294);
          if (qword_10026BB60 != -1)
            swift_once(&qword_10026BB60, sub_1000EF32C);
          v233 = v142;
          v234 = sub_10008EA50(v167, (uint64_t)qword_10026DE40);
          v235 = v275;
          v236 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v296 + 2))(v275, v234, v167);
          v237 = Logger.logObject.getter(v236);
          v238 = static os_log_type_t.error.getter();
          v239 = os_log_type_enabled(v237, v238);
          v240 = v274;
          if (v239)
          {
            v241 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v241 = 0;
            _os_log_impl((void *)&_mh_execute_header, v237, v238, "Failed adding client to client list", v241, 2u);
            swift_slowDealloc(v241, -1, -1);
          }

          (*((void (**)(char *, uint64_t))v296 + 1))(v235, v167);
          v243 = v292;
          v242 = v293;
          *v292 = 0xD00000000000001CLL;
          v243[1] = 0x80000001001FF720;
          v244 = v270;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v242 + 104))(v243, enum case for Errors.UnexpectedError(_:), v270);
          v245 = v291;
          (*(void (**)(char *, _QWORD *, uint64_t))(v242 + 16))(v291, v243, v244);
          v246 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
          v69 = swift_allocError(v244, v246, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v242 + 32))(v247, v245, v244);
          v248 = (void *)_convertErrorToNSError(_:)(v69);
          ((void (**)(_QWORD, _QWORD, void *))v240)[2](v240, 0, v248);

          swift_release(v290);
          swift_release(v288);
          (*(void (**)(_QWORD *, uint64_t))(v242 + 8))(v243, v244);
        }
      }
      else
      {
        v187 = v142;
        swift_bridgeObjectRelease(v294);
        v188 = v270;
        v189 = v295;
        if (qword_10026BB60 != -1)
          swift_once(&qword_10026BB60, sub_1000EF32C);
        v190 = sub_10008EA50(v189, (uint64_t)qword_10026DE40);
        v191 = v282;
        v192 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v296 + 2))(v282, v190, v189);
        v193 = Logger.logObject.getter(v192);
        v194 = static os_log_type_t.error.getter();
        v195 = os_log_type_enabled(v193, v194);
        v196 = v274;
        if (v195)
        {
          v197 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v197 = 0;
          _os_log_impl((void *)&_mh_execute_header, v193, v194, "Failed fetching App ID from connection", v197, 2u);
          v198 = v197;
          v191 = v282;
          swift_slowDealloc(v198, -1, -1);
        }

        (*((void (**)(char *, uint64_t))v296 + 1))(v191, v189);
        v200 = v292;
        v199 = v293;
        *v292 = 0xD000000000000026;
        v200[1] = 0x80000001001FDAD0;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v199 + 104))(v200, enum case for Errors.NotFound(_:), v188);
        v201 = v291;
        (*(void (**)(char *, _QWORD *, uint64_t))(v199 + 16))(v291, v200, v188);
        v202 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
        v69 = swift_allocError(v188, v202, 0, 0);
        (*(void (**)(uint64_t, char *, uint64_t))(v199 + 32))(v203, v201, v188);
        v204 = (void *)_convertErrorToNSError(_:)(v69);
        ((void (**)(_QWORD, _QWORD, void *))v196)[2](v196, 0, v204);

        swift_release(v290);
        (*(void (**)(_QWORD *, uint64_t))(v199 + 8))(v200, v188);
      }
      (*(void (**)(char *, uint64_t))(v286 + 8))(v285, v287);
LABEL_18:
      swift_errorRelease(v69);
      v72 = v44;
LABEL_19:
      swift_release(v72);
      return;
    }
    swift_bridgeObjectRelease(v294);
    v66 = v292;
    v65 = v293;
    *v292 = 0xD000000000000013;
    v66[1] = 0x80000001001FF950;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for Errors.NotFound(_:), v22);
    v156 = v291;
    (*(void (**)(char *, _QWORD *, uint64_t))(v65 + 16))(v291, v66, v22);
    v157 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v69 = swift_allocError(v22, v157, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v158, v156, v22);
    v71 = (void *)_convertErrorToNSError(_:)(v69);
    ((void (**)(_QWORD, _QWORD, void *))v274)[2](v274, 0, v71);

    swift_release(v90);
LABEL_17:

    (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v66, v22);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease(v294);
  ((void (**)(_QWORD, _QWORD, void *))v84)[2](v84, 0, v95);
  swift_release(v44);

  swift_release(v90);
}

void sub_1001003F8(void *a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  void *v31;
  os_unfair_lock_s *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint8_t *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void (**v69)(_QWORD, _QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint8_t *v91;
  uint8_t *v92;
  NSObject *v93;
  uint64_t v94;
  NSObject *v95;
  void *v96;
  NSObject *v97;
  _QWORD *v98;
  uint8_t *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  Swift::String v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void (**v138)(_QWORD, _QWORD, _QWORD);
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint8_t *v144;
  void *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  _QWORD v151[5];
  char v152[24];
  __int128 v153;
  __int128 v154;
  uint64_t v155;

  v140 = a2;
  v145 = a1;
  v4 = type metadata accessor for Errors(0);
  v148 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v146 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v147 = (char *)&v137 - v7;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v137 - v13;
  v15 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v15);
  v139 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v149 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v144 = (uint8_t *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v143 = (char *)&v137 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v137 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v137 - v25;
  v27 = swift_allocObject(&unk_10023B898, 24, 7);
  *(_QWORD *)(v27 + 16) = a3;
  _Block_copy(a3);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v52 = sub_10008EA50(v17, (uint64_t)qword_10026DE40);
    v53 = v149;
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 16))(v26, v52, v17);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = v4;
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Client doesn't have camera TCC, rejecting XPC message", v58, 2u);
      v59 = v58;
      v4 = v57;
      swift_slowDealloc(v59, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v17);
    v61 = v147;
    v60 = v148;
    *(_QWORD *)v147 = 0xD000000000000012;
    *((_QWORD *)v61 + 1) = 0x80000001001FF590;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v61, enum case for Errors.CameraTCCMissing(_:), v4);
    v62 = v146;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v146, v61, v4);
    v63 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v64 = swift_allocError(v4, v63, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v65, v62, v4);
    v66 = (void *)_convertErrorToNSError(_:)(v64);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v66);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v4);
    swift_errorRelease(v64);
    v67 = v27;
    goto LABEL_45;
  }
  v137 = v4;
  v142 = v17;
  v138 = a3;
  v141 = v27;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v28 = qword_100275638;
  v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v30 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v30);
  os_unfair_lock_lock(v30 + 4);
  swift_release(v30);
  v31 = *(void **)(v28 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v32 = *(os_unfair_lock_s **)(v28 + v29);
  v33 = v31;
  swift_retain(v32);
  os_unfair_lock_unlock(v32 + 4);
  v34 = swift_release(v32);
  if (!v31)
  {
    v68 = v141;
    v69 = v138;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v70 = v142;
    v71 = sub_10008EA50(v142, (uint64_t)qword_10026DE40);
    v72 = v149;
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 16))(v24, v71, v70);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "No accessory connected. Cannot initiate accessory diagnostics", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v70);
    v78 = v147;
    v77 = v148;
    *(_QWORD *)v147 = 0xD000000000000016;
    *((_QWORD *)v78 + 1) = 0x80000001001FD120;
    v79 = v137;
    (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v78, enum case for Errors.AccessoryNotReachable(_:), v137);
    v80 = v146;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v146, v78, v79);
    v81 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v82 = swift_allocError(v79, v81, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v83, v80, v79);
    v84 = (void *)_convertErrorToNSError(_:)(v82);
    ((void (**)(_QWORD, _QWORD, void *))v69)[2](v69, 0, v84);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    swift_errorRelease(v82);
    v67 = v68;
    goto LABEL_45;
  }
  v150 = (id)dispatch thunk of DockCoreAccessory.info.getter(v34);

  v35 = v141;
  v36 = v145;
  if (v145)
  {
    type metadata accessor for DockCoreInfo(0);
    v37 = v36;
    v38 = static NSObject.== infix(_:_:)(v150, v37);
    v39 = v142;
    if ((v38 & 1) == 0)
    {
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v85 = sub_10008EA50(v39, (uint64_t)qword_10026DE40);
      v86 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v143, v85, v39);
      v87 = v37;
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v140 = (_QWORD *)swift_slowAlloc(8, -1);
        v144 = v90;
        *(_DWORD *)v90 = 138412290;
        v91 = v90 + 12;
        v92 = v90 + 4;
        *(_QWORD *)&v153 = v87;
        v93 = v87;
        v94 = v35;
        v95 = v87;
        v96 = v36;
        v97 = v93;
        v39 = v142;
        v86 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 8, v92, v91);
        v98 = v140;
        *v140 = v96;
        v87 = v95;
        v35 = v94;

        v99 = v144;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "%@ is not connected", v144, 0xCu);
        v100 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v98, 1, v100);
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v99, -1, -1);
      }
      else
      {

        v88 = v87;
      }

      (*(void (**)(char *, uint64_t))(v86 + 8))(v143, v39);
      *(_QWORD *)&v153 = 0;
      *((_QWORD *)&v153 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      v121 = *((_QWORD *)&v153 + 1);
      v122 = -[NSObject description](v87, "description");
      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
      v125 = v124;
      swift_bridgeObjectRelease(v121);

      *(_QWORD *)&v153 = v123;
      *((_QWORD *)&v153 + 1) = v125;
      v126._object = (void *)0x80000001001FD170;
      v126._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v126);
      v127 = *((_QWORD *)&v153 + 1);
      v128 = v87;
      v130 = v147;
      v129 = v148;
      *(_QWORD *)v147 = v153;
      *((_QWORD *)v130 + 1) = v127;
      v131 = v137;
      (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v130, enum case for Errors.AccessoryNotReachable(_:), v137);
      v132 = v146;
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v146, v130, v131);
      v133 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v134 = swift_allocError(v131, v133, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v135, v132, v131);
      v136 = (void *)_convertErrorToNSError(_:)(v134);
      ((void (**)(_QWORD, _QWORD, void *))v138)[2](v138, 0, v136);

      (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v131);
      swift_errorRelease(v134);
      v67 = v35;
      goto LABEL_45;
    }

  }
  v40 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v148 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v41 = *(void **)&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v42 = v40;
  v43 = v41;
  OS_dispatch_semaphore.wait()();

  v44 = &v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v152, 0, 0);
  v45 = *(_QWORD *)v44;
  v46 = *(_QWORD *)(*(_QWORD *)v44 + 16);
  if (v46)
  {
    v147 = v42;
    v47 = v45 + 32;
    swift_bridgeObjectRetain(v45);
    while (1)
    {
      sub_10009AFF4(v47, (uint64_t)v151);
      v48 = *(id *)(*sub_10009B038(v151, v151[3]) + 24);
      DockCoreInfo.identifier.getter(v48);

      DockCoreInfo.identifier.getter(v49);
      LOBYTE(v48) = static UUID.== infix(_:_:)(v14, v12);
      v50 = *(void (**)(char *, uint64_t))(v9 + 8);
      v50(v12, v8);
      v50(v14, v8);
      if ((v48 & 1) != 0)
        break;
      sub_100090E88(v151);
      v47 += 40;
      if (!--v46)
      {
        swift_bridgeObjectRelease(v45);
        v35 = v141;
        v42 = v147;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v45);
    v101 = *(id *)&v40[v148];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v151, (uint64_t)&v153);
    sub_100090E88(v151);

    v35 = v141;
  }
  else
  {
LABEL_13:
    v51 = *(id *)&v40[v148];
    OS_dispatch_semaphore.signal()();

    v155 = 0;
    v153 = 0u;
    v154 = 0u;

  }
  v102 = v142;
  v103 = v149;
  v104 = v144;
  if (*((_QWORD *)&v154 + 1))
  {
    v105 = sub_10009061C(&qword_10026C2E0);
    v106 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v151, &v153, v105, v106, 6) & 1) != 0)
    {
      v107 = v151[0];
      if (*(_BYTE *)(v151[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
        && (v108 = *(char **)(v151[0] + 16)) != 0
        && (v109 = *(void **)&v108[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
      {
        v110 = v108;
        if (objc_msgSend(v109, "state") == (id)2)
        {
          sub_10009E60C();
          v111 = type metadata accessor for TaskPriority(0);
          v112 = (uint64_t)v139;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v139, 1, 1, v111);
          v113 = (_QWORD *)swift_allocObject(&unk_10023B8C0, 64, 7);
          v113[2] = 0;
          v113[3] = 0;
          v113[4] = v107;
          v113[5] = sub_100114760;
          v114 = v140;
          v113[6] = v35;
          v113[7] = v114;
          swift_retain(v107);
          swift_retain(v35);
          swift_bridgeObjectRetain(v114);
          v115 = sub_10018A990(v112, (uint64_t)&unk_10026E0B8, (uint64_t)v113);
          swift_release(v35);

          swift_release(v107);
          v67 = v115;
LABEL_45:
          swift_release(v67);
          return;
        }
        swift_release(v107);

      }
      else
      {
        swift_release(v151[0]);
      }
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v153, (uint64_t *)&unk_10026DF40);
  }
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v116 = sub_10008EA50(v102, (uint64_t)qword_10026DE40);
  v117 = (*(uint64_t (**)(uint8_t *, uint64_t, uint64_t))(v103 + 16))(v104, v116, v102);
  v118 = Logger.logObject.getter(v117);
  v119 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v118, v119))
  {
    v120 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v120 = 0;
    _os_log_impl((void *)&_mh_execute_header, v118, v119, "accessory does not exist and/or is not paired ", v120, 2u);
    swift_slowDealloc(v120, -1, -1);
  }

  (*(void (**)(uint8_t *, uint64_t))(v103 + 8))(v104, v102);
  v138[2](v138, 0, 0);
  swift_release(v35);

}

void sub_10010118C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  os_log_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  unsigned int *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  char v85;
  __n128 v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint8_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  os_log_t v99;
  uint64_t v100;
  _QWORD *v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t);
  id v106;
  unsigned int v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117[2];

  v110 = a5;
  v113 = a4;
  v114 = a3;
  v112 = a2;
  v8 = type metadata accessor for Errors(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v115 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v95 - v12);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v111 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v95 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v95 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v95 - v24;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v59 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v25, v59, v14);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Client doesn't have camera TCC, rejecting XPC message", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v14);
    *v13 = 0xD000000000000012;
    v13[1] = 0x80000001001FF590;
    v64 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_27;
  }
  if (!a1 || !v114 || !v113)
  {
    *v13 = 0xD000000000000016;
    v13[1] = 0x80000001001FF5B0;
    v64 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_27:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v13, *v64, v8);
    v75 = v115;
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v115, v13, v8);
    v76 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v8, v76, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v77, v75, v8);
    v78 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(a6 + 16))(a6, 0, v78);
LABEL_28:

    goto LABEL_29;
  }
  v27 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v26), "currentConnection");
  if (!v27)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v70 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
    v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v70, v14);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed fetching current NSXPCConnection, cannot construct client", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    *v13 = 0xD000000000000017;
    v13[1] = 0x80000001001FDAB0;
    v64 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_27;
  }
  v108 = a6;
  v109 = v27;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(a1);
  v29 = v28;
  if (!v28
    || (v30 = type metadata accessor for SensorController(0),
        v31 = v29,
        LOBYTE(v30) = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v112, v114, v30),
        v31,
        (v30 & 1) == 0)
    || (v32 = v31,
        v33 = dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)(v112, v114, v113),
        v32,
        (v33 & 1) == 0))
  {
    *v13 = 0xD000000000000011;
    v13[1] = 0x80000001001FF900;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v13, enum case for Errors.NotFound(_:), v8);
    v65 = v115;
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v115, v13, v8);
    v66 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v8, v66, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v68, v65, v8);
    v69 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v108 + 16))(v108, 0, v69);

LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v13, v8);
    swift_errorRelease(v67);
    return;
  }
  v106 = v32;
  v107 = objc_msgSend(v109, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v34 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v104 = v34;
  v105 = v35;
  ((void (*)(char *))v35)(v20);
  v36 = a1;
  swift_bridgeObjectRetain_n(v114, 2);
  v37 = v113;
  swift_bridgeObjectRetain_n(v113, 2);
  v38 = v36;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  LODWORD(v102) = v40;
  v41 = os_log_type_enabled(v39, v40);
  v103 = (uint64_t)v38;
  if (v41)
  {
    v42 = swift_slowAlloc(48, -1);
    v99 = v39;
    v43 = v42;
    v101 = (_QWORD *)swift_slowAlloc(8, -1);
    v100 = swift_slowAlloc(96, -1);
    v117[0] = v100;
    *(_DWORD *)v43 = 67110146;
    LODWORD(v116) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 4, v43 + 4, v43 + 8);
    *(_WORD *)(v43 + 8) = 2112;
    v97 = v43 + 10;
    v96 = v43 + 18;
    v116 = (uint64_t)v38;
    v44 = v38;
    v98 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v97, v96);
    *v101 = a1;

    *(_WORD *)(v43 + 18) = 2080;
    v45 = v114;
    swift_bridgeObjectRetain(v114);
    v116 = sub_1000906BC(v112, v45, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v43 + 20, v43 + 28);
    swift_bridgeObjectRelease_n(v45, 3);
    *(_WORD *)(v43 + 28) = 2080;
    v97 = v43 + 30;
    swift_bridgeObjectRetain(v113);
    v46 = Array.description.getter(v113, &type metadata for String);
    v48 = v47;
    swift_bridgeObjectRelease(v113);
    v116 = sub_1000906BC(v46, v48, v117);
    v49 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v98, v97, v43 + 38);
    swift_bridgeObjectRelease_n(v113, 2);
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v43 + 38) = 2080;
    v50 = SensorOccurrence.description.getter(v110);
    v52 = v51;
    v116 = sub_1000906BC(v50, v51, v117);
    v53 = v49;
    v54 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v53, v43 + 40, v43 + 48);
    swift_bridgeObjectRelease(v52);
    v55 = v99;
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v102, "Client %d registering for sensor data %@ %s %s occurrence:%s", (uint8_t *)v43, 0x30u);
    v56 = sub_10009061C(&qword_10026BC40);
    v57 = v101;
    swift_arrayDestroy(v101, 1, v56);
    swift_slowDealloc(v57, -1, -1);
    v58 = v100;
    swift_arrayDestroy(v100, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    v102 = *(void (**)(char *, uint64_t))(v15 + 8);
    v102(v20, v14);
  }
  else
  {

    swift_bridgeObjectRelease_n(v37, 2);
    swift_bridgeObjectRelease_n(v114, 2);

    v102 = *(void (**)(char *, uint64_t))(v15 + 8);
    v102(v20, v14);
    v54 = v107;
  }
  v79 = v108;
  v80 = v106;
  v81 = v109;
  v82 = v109;
  v83 = v81;
  v84 = v82;
  v85 = sub_1001740D4(v54, v83);

  if ((v85 & 1) == 0)
  {
    v87 = v105(v111, v104, v14);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Failed adding client to client list", v90, 2u);
      v91 = v90;
      v79 = v108;
      swift_slowDealloc(v91, -1, -1);
    }

    v102(v111, v14);
    *v13 = 0xD00000000000001CLL;
    v13[1] = 0x80000001001FF720;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v13, enum case for Errors.UnexpectedError(_:), v8);
    v92 = v115;
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v115, v13, v8);
    v93 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v8, v93, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v94, v92, v8);
    v78 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v79 + 16))(v79, 0, v78);

    goto LABEL_28;
  }
  sub_100167098(v54, v86, v103, v112, v114, v113, v110);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v79 + 16))(v79, 1, 0);

}

void sub_100101C70(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(char *, uint64_t);
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  id v70;
  char v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_t v84;
  int v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  unsigned int v88;
  uint64_t v89;
  id v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v96 = a5;
  v93 = a2;
  v94 = a3;
  v7 = type metadata accessor for Errors(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v95 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v81 - v11);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v91 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v92 = (char *)&v81 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v81 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v81 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v81 - v25;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v45 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v26, v45, v13);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Client doesn't have camera TCC, rejecting XPC message", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    *v12 = 0xD000000000000012;
    v12[1] = 0x80000001001FF590;
    v50 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_21;
  }
  if (!a1 || !v94 || !a4)
  {
    *v12 = 0xD000000000000016;
    v12[1] = 0x80000001001FF5B0;
    v50 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_21:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v12, *v50, v7);
    v56 = v95;
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v95, v12, v7);
    v57 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v58 = swift_allocError(v7, v57, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v59, v56, v7);
    v60 = (void *)_convertErrorToNSError(_:)(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v96 + 16))(v96, 0, v60);

    goto LABEL_22;
  }
  v28 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v27), "currentConnection");
  if (!v28)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v51 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v21, v51, v13);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed fetching current NSXPCConnection, cannot construct client", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    *v12 = 0xD000000000000017;
    v12[1] = 0x80000001001FDAB0;
    v50 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_21;
  }
  v89 = a1;
  v90 = v28;
  v29 = objc_msgSend(v28, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v30 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v86 = v30;
  v87 = v31;
  ((void (*)(char *))v31)(v24);
  v32 = swift_bridgeObjectRetain_n(a4, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = v34;
  v36 = os_log_type_enabled(v33, v34);
  v88 = v29;
  if (v36)
  {
    v37 = swift_slowAlloc(18, -1);
    v84 = v33;
    v85 = v35;
    v38 = v37;
    v82 = swift_slowAlloc(32, -1);
    v98 = v82;
    *(_DWORD *)v38 = 67109378;
    LODWORD(v97) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v38 + 4, v38 + 8);
    *(_WORD *)(v38 + 8) = 2080;
    v83 = v38 + 10;
    swift_bridgeObjectRetain(a4);
    v40 = Array.description.getter(v39, &type metadata for String);
    v42 = v41;
    swift_bridgeObjectRelease(a4);
    v97 = sub_1000906BC(v40, v42, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v83, v38 + 18);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v42);
    v43 = v84;
    _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v85, "Client %d stopping sensor events for %s", (uint8_t *)v38, 0x12u);
    v44 = v82;
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v61 = *(void (**)(char *, uint64_t))(v14 + 8);
  v61(v24, v13);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v62 = v88;
  v63 = sub_100167338(v88, v89, v93, v94, a4);
  if (!v63)
  {
    v64 = v62;
    v65 = v92;
    v66 = v87(v92, v86, v13);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v69 = 67109120;
      v65 = v92;
      LODWORD(v98) = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, (char *)&v98 + 4, v69 + 4, v69 + 8);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Client %d stopping sensor events", v69, 8u);
      swift_slowDealloc(v69, -1, -1);
    }

    v61(v65, v13);
    v70 = v90;
    v71 = sub_10017417C(v64);

    if ((v71 & 1) != 0)
      goto LABEL_31;
    v72 = v91;
    v73 = v87(v91, v86, v13);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed removing client from list", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    v61(v72, v13);
    *v12 = 0xD000000000000020;
    v12[1] = 0x80000001001FF5D0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v12, enum case for Errors.UnexpectedError(_:), v7);
    v77 = v95;
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v95, v12, v7);
    v78 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v58 = swift_allocError(v7, v78, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v79, v77, v7);
    v80 = (void *)_convertErrorToNSError(_:)(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v96 + 16))(v96, 0, v80);

LABEL_22:
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v12, v7);
    swift_errorRelease(v58);
    return;
  }
  swift_bridgeObjectRelease(v63);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v96 + 16))(v96, 1, 0);

}

uint64_t sub_100102568(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  __int128 v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  unsigned int v36;
  void *v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  id v54;
  id v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  const void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  NSString v75;
  Class isa;
  Class v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  id v103;
  uint64_t v104;
  id v105;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t aBlock[5];
  uint64_t v139;
  _QWORD *v140;
  char v141[8];
  char v142[8];

  v126 = a5;
  v133 = a3;
  v134 = a4;
  v132 = a2;
  v137 = a1;
  v123 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v125 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for DispatchWorkItemFlags(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DispatchQoS(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v124 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
LABEL_51:
    swift_once(&qword_10026BC00, sub_100158DF8);
  v9 = qword_100275638;
  v10 = sub_1001C1BB0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v10);
  v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v12 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v12);
  os_unfair_lock_lock(v12 + 4);
  swift_release(v12);
  v13 = (uint64_t *)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules, v142, 0, 0);
  v14 = *v13;
  v15 = *(os_unfair_lock_s **)(v9 + v11);
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  v16 = qword_100275638;
  v17 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v17);
  v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v19 = *(os_unfair_lock_s **)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v19);
  os_unfair_lock_lock(v19 + 4);
  swift_release(v19);
  v20 = (uint64_t *)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v141, 0, 0);
  v21 = *v20;
  v22 = *(os_unfair_lock_s **)(v16 + v18);
  swift_bridgeObjectRetain(v21);
  swift_retain(v22);
  os_unfair_lock_unlock(v22 + 4);
  swift_release(v22);
  v24 = 0;
  v25 = v21 + 64;
  v26 = 1 << *(_BYTE *)(v21 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v21 + 64);
  v29 = (unint64_t)(v26 + 63) >> 6;
  v121 = v141;
  v129 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v23 = 136315650;
  v115 = v23;
  v122 = v5;
  v135 = v21 + 64;
  v136 = v29;
  v131 = v21;
  while (1)
  {
    while (v28)
    {
      v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v32 = v31 | (v24 << 6);
      if (*(_QWORD *)(v14 + 16))
      {
LABEL_24:
        v36 = *(_DWORD *)(*(_QWORD *)(v21 + 48) + 4 * v32);
        v37 = *(void **)(*(_QWORD *)(v21 + 56) + 8 * v32);
        v38 = sub_1001452C8(v36);
        if ((v39 & 1) != 0)
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v38);
          v41 = v37;
          v42 = swift_bridgeObjectRetain(v40);
          v43 = DockCoreInfo.description.getter(v42);
          v5 = v44;
          if (!*(_QWORD *)(v40 + 16))
          {
            v30 = v44;
            goto LABEL_6;
          }
          v45 = v43;
          swift_bridgeObjectRetain(v40);
          sub_100145264(v45, v5);
          if ((v46 & 1) != 0)
          {
            swift_bridgeObjectRelease(v40);
            if (!*(_QWORD *)(v40 + 16) || (v47 = sub_100145264(v45, v5), (v48 & 1) == 0))
            {
              swift_bridgeObjectRelease(v5);
              swift_bridgeObjectRelease(v40);

              goto LABEL_41;
            }
            v49 = (uint64_t *)(*(_QWORD *)(v40 + 56) + 32 * v47);
            v50 = *v49;
            v51 = v49[1];
            v52 = (_QWORD *)v49[2];
            v130 = v49[3];
            swift_bridgeObjectRetain_n(v51, 2);
            swift_bridgeObjectRetain_n(v52, 2);
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease(v40);
            v5 = v133;
            swift_bridgeObjectRetain(v133);
            v53 = v134;
            swift_bridgeObjectRetain(v134);
            v127 = v50;
            LOBYTE(v50) = sub_100104918(v50, v51, v52, v132, v5, v53);
            swift_bridgeObjectRelease(v52);
            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease(v53);
            swift_bridgeObjectRelease(v5);
            if ((v50 & 1) == 0)
            {

              swift_bridgeObjectRelease(v52);
              swift_bridgeObjectRelease(v51);
              v25 = v135;
              v29 = v136;
              goto LABEL_44;
            }
            v5 = (uint64_t)v52;
            v128 = v51;
            v54 = v41;
            v55 = objc_msgSend(v54, "remoteObjectProxy");
            _bridgeAnyObjectToAny(_:)(aBlock);
            swift_unknownObjectRelease(v55);
            v56 = sub_10009061C(&qword_10026E0A8);
            v57 = swift_dynamicCast(&v140, aBlock, v129, v56, 6);
            v29 = v136;
            if (v57)
            {
              v114 = v54;
              v58 = v140;
              v59 = qword_100275638;
              v112 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
              v60 = *(os_unfair_lock_s **)(qword_100275638
                                         + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
              swift_retain(v60);
              os_unfair_lock_lock(v60 + 4);
              swift_release(v60);
              v61 = *(_QWORD *)(v59 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
              v62 = v59;
              v113 = v5;
              v21 = v131;
              if (v61)
              {
                v63 = *(void **)(v61 + 24);
                if (v63)
                {
                  v110 = v62;
                  aBlock[4] = (uint64_t)sub_1000B145C;
                  v139 = v61;
                  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  aBlock[2] = (uint64_t)sub_10012357C;
                  aBlock[3] = (uint64_t)&unk_10023B860;
                  v109 = _Block_copy(aBlock);
                  swift_retain_n(v61, 2);
                  v108 = v63;
                  v64 = v124;
                  static DispatchQoS.unspecified.getter(v108);
                  v140 = _swiftEmptyArrayStorage;
                  v107 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                  v65 = sub_10009061C((uint64_t *)&unk_10026BF60);
                  v66 = sub_100090F20();
                  v67 = v118;
                  v111 = (uint64_t)v58;
                  v68 = v120;
                  dispatch thunk of SetAlgebra.init<A>(_:)(&v140, v65, v66, v120, v107);
                  v69 = v64;
                  v70 = v109;
                  v71 = v108;
                  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v69, v67, v109);
                  _Block_release(v70);

                  v72 = v68;
                  v58 = (_QWORD *)v111;
                  (*(void (**)(char *, uint64_t))(v119 + 8))(v67, v72);
                  (*(void (**)(char *, uint64_t))(v116 + 8))(v124, v117);
                  v73 = v139;
                  swift_release(v61);
                  swift_release(v73);
                  v62 = v110;
                }
              }
              v74 = *(os_unfair_lock_s **)(v62 + v112);
              swift_retain(v74);
              os_unfair_lock_unlock(v74 + 4);
              swift_release(v74);
              swift_unknownObjectRetain(v58);
              v75 = String._bridgeToObjectiveC()();
              isa = Array._bridgeToObjectiveC()().super.isa;
              type metadata accessor for SensorData(0);
              v5 = (uint64_t)v58;
              v77 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend((id)v5, "sensorDataWithInfo:system:sensors:data:", v137, v75, isa, v77);
              swift_unknownObjectRelease(v5);

              v78 = SensorOccurrence.rawValue.getter(v130);
              if (v78 == SensorOccurrence.rawValue.getter(0))
              {
                v111 = v5;
                v5 = v122;
                v79 = v128;
                if (qword_10026BB60 != -1)
                  swift_once(&qword_10026BB60, sub_1000EF32C);
                v80 = v123;
                v81 = sub_10008EA50(v123, (uint64_t)qword_10026DE40);
                (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v125, v81, v80);
                swift_bridgeObjectRetain_n(v79, 3);
                v82 = v113;
                swift_bridgeObjectRetain_n(v113, 3);
                v83 = swift_bridgeObjectRetain_n(v134, 2);
                v84 = Logger.logObject.getter(v83);
                v85 = static os_log_type_t.default.getter(v84);
                v86 = v85;
                v130 = v84;
                if (os_log_type_enabled(v84, v85))
                {
                  v87 = swift_slowAlloc(32, -1);
                  v112 = swift_slowAlloc(96, -1);
                  aBlock[0] = v112;
                  *(_DWORD *)v87 = v115;
                  v88 = v128;
                  swift_bridgeObjectRetain(v128);
                  v140 = (_QWORD *)sub_1000906BC(v127, v88, aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v121, v87 + 4, v87 + 12);
                  swift_bridgeObjectRelease_n(v82, 2);
                  swift_bridgeObjectRelease_n(v88, 3);
                  *(_WORD *)(v87 + 12) = 2080;
                  v110 = v87 + 14;
                  swift_bridgeObjectRetain(v82);
                  v90 = Array.description.getter(v89, &type metadata for String);
                  LODWORD(v127) = v86;
                  v91 = v90;
                  v93 = v92;
                  swift_bridgeObjectRelease(v82);
                  v94 = v91;
                  v95 = v93;
                  v140 = (_QWORD *)sub_1000906BC(v94, v93, aBlock);
                  v5 = v122;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v121, v110, v87 + 22);
                  swift_bridgeObjectRelease_n(v82, 2);
                  swift_bridgeObjectRelease_n(v88, 2);
                  swift_bridgeObjectRelease(v95);
                  *(_WORD *)(v87 + 22) = 2080;
                  swift_bridgeObjectRetain(v134);
                  v96 = Array.description.getter(v134, &type metadata for String);
                  v98 = v97;
                  swift_bridgeObjectRelease(v134);
                  v140 = (_QWORD *)sub_1000906BC(v96, v98, aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v121, v87 + 24, v87 + 32);
                  swift_bridgeObjectRelease_n(v134, 2);
                  swift_bridgeObjectRelease(v98);
                  v99 = v130;
                  _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v127, "Client rule (%s, %s) notified once, removing sensors %s from notification rule", (uint8_t *)v87, 0x20u);
                  v100 = v112;
                  swift_arrayDestroy(v112, 3, (char *)&type metadata for Any + 8);
                  v101 = v100;
                  v102 = v134;
                  swift_slowDealloc(v101, -1, -1);
                  swift_slowDealloc(v87, -1, -1);

                  (*(void (**)(char *, uint64_t))(v5 + 8))(v125, v123);
                }
                else
                {

                  v102 = v134;
                  swift_bridgeObjectRelease_n(v134, 2);
                  swift_bridgeObjectRelease_n(v82, 4);
                  swift_bridgeObjectRelease_n(v128, 4);
                  (*(void (**)(char *, uint64_t))(v5 + 8))(v125, v80);
                }
                v104 = sub_100167338(v36, v137, v132, v133, v102);
                v105 = v114;

                swift_unknownObjectRelease(v111);
                swift_bridgeObjectRelease(v104);
              }
              else
              {
                swift_bridgeObjectRelease(v113);
                swift_bridgeObjectRelease(v128);
                v103 = v114;

                swift_unknownObjectRelease(v5);
              }
LABEL_41:
              v25 = v135;
              v29 = v136;
            }
            else
            {
              swift_bridgeObjectRelease(v52);
              swift_bridgeObjectRelease(v128);

              v25 = v135;
LABEL_44:
              v21 = v131;
            }
          }
          else
          {
            swift_bridgeObjectRelease(v5);
            v30 = v40;
LABEL_6:
            swift_bridgeObjectRelease(v30);
            v25 = v135;
            swift_bridgeObjectRelease(v40);

            v29 = v136;
          }
        }
      }
    }
    v33 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v33 >= v29)
      goto LABEL_48;
    v34 = *(_QWORD *)(v25 + 8 * v33);
    ++v24;
    if (!v34)
    {
      v24 = v33 + 1;
      if (v33 + 1 >= v29)
        goto LABEL_48;
      v34 = *(_QWORD *)(v25 + 8 * v24);
      if (!v34)
      {
        v24 = v33 + 2;
        if (v33 + 2 >= v29)
          goto LABEL_48;
        v34 = *(_QWORD *)(v25 + 8 * v24);
        if (!v34)
          break;
      }
    }
LABEL_23:
    v28 = (v34 - 1) & v34;
    v32 = __clz(__rbit64(v34)) + (v24 << 6);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_24;
  }
  v35 = v33 + 3;
  if (v35 < v29)
  {
    v34 = *(_QWORD *)(v25 + 8 * v35);
    if (!v34)
    {
      while (1)
      {
        v24 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_50;
        if (v24 >= v29)
          goto LABEL_48;
        v34 = *(_QWORD *)(v25 + 8 * v24);
        ++v35;
        if (v34)
          goto LABEL_23;
      }
    }
    v24 = v35;
    goto LABEL_23;
  }
LABEL_48:
  swift_bridgeObjectRelease(v14);
  return swift_release(v21);
}

void sub_1001031D4(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  char *v40;
  char v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint8_t *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  unsigned int *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD *, uint64_t);
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  BOOL v86;
  uint64_t v87;
  uint8_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __n128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  BOOL v119;
  uint64_t v120;
  uint8_t *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  unint64_t v132;
  _QWORD *v133;
  id v134;
  NSObject *v135;
  os_log_type_t v136;
  int v137;
  _BOOL4 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  unint64_t v167;
  uint64_t v168;
  os_log_type_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  void *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  __n128 v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  os_unfair_lock_s *v194;
  void *v195;
  os_unfair_lock_s *v196;
  id v197;
  char *v198;
  uint64_t v199;
  char *v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  NSObject *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  char *v217;
  id v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233[4];

  v224 = a2;
  v225 = a5;
  v228 = a4;
  v229 = a3;
  v8 = sub_10009061C(&qword_10026E0A0);
  v222 = *(_QWORD *)(v8 - 8);
  v223 = v8;
  __chkstk_darwin(v8);
  v221 = (char *)&v209 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Errors(0);
  v231 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v230 = (char *)&v209 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v209 - v13);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v226 = (char *)v15;
  v227 = v16;
  v17 = __chkstk_darwin(v15);
  v220 = (char *)&v209 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v209 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v209 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v209 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v209 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v209 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v209 - v34;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v60 = (uint64_t)v226;
    v61 = sub_10008EA50((uint64_t)v226, (uint64_t)qword_10026DE40);
    v62 = v227;
    v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v227 + 16))(v35, v61, v60);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Client doesn't have camera TCC, rejecting XPC message", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v60);
    *v14 = 0xD000000000000012;
    v14[1] = 0x80000001001FF590;
    v67 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  if (!a1 || !v229 || !v228 || !v225)
  {
    *v14 = 0xD000000000000016;
    v14[1] = 0x80000001001FF5B0;
    v67 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_24:
    v54 = v231;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v231 + 104))(v14, *v67, v10);
    v68 = v230;
    (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 16))(v230, v14, v10);
    v69 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v57 = swift_allocError(v10, v69, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v70, v68, v10);
    v59 = (void *)_convertErrorToNSError(_:)(v57);
    (*(void (**)(uint64_t, _QWORD, void *))(a6 + 16))(a6, 0, v59);
    goto LABEL_25;
  }
  v218 = (id)v10;
  v219 = a6;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(a1);
  v37 = v36;
  if (!v36
    || (v38 = type metadata accessor for SensorController(0),
        v39 = v37,
        LOBYTE(v38) = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v224, v229, v38),
        v39,
        (v38 & 1) == 0)
    || (v40 = (char *)v39,
        v41 = dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)(v224, v229, v228),
        v40,
        (v41 & 1) == 0))
  {
    *v14 = 0xD000000000000011;
    v14[1] = 0x80000001001FF900;
    v74 = v231;
    v75 = (uint64_t)v218;
    (*(void (**)(_QWORD *, _QWORD, id))(v231 + 104))(v14, enum case for Errors.NotFound(_:), v218);
    v76 = v230;
    (*(void (**)(char *, _QWORD *, uint64_t))(v74 + 16))(v230, v14, v75);
    v77 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v57 = swift_allocError(v75, v77, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v78, v76, v75);
    v79 = (void *)_convertErrorToNSError(_:)(v57);
    (*(void (**)(uint64_t, _QWORD, void *))(v219 + 16))(v219, 0, v79);

    v71 = *(void (**)(_QWORD *, uint64_t))(v74 + 8);
    v72 = v14;
    v73 = v75;
    goto LABEL_29;
  }
  v43 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v42), "currentConnection");
  if (!v43)
  {
    if (qword_10026BB60 != -1)
      goto LABEL_93;
    goto LABEL_31;
  }
  v217 = v40;
  v44 = v43;
  if ((sub_10016DDE8(objc_msgSend(v43, "processIdentifier"), 0x6F736E6553746573, 0xEF73657461745372) & 1) != 0)
  {
    v45 = v219;
    v46 = v217;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v47 = (uint64_t)v226;
    v48 = sub_10008EA50((uint64_t)v226, (uint64_t)qword_10026DE40);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v227 + 16))(v30, v48, v47);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v10 = (uint64_t)v218;
    if (v52)
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Rate limit exceeded for setSensorStates", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v227 + 8))(v30, v47);
    *v14 = 0xD000000000000025;
    v14[1] = 0x80000001001FF920;
    v54 = v231;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v231 + 104))(v14, enum case for Errors.rateLimitXPC(_:), v10);
    v55 = v230;
    (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 16))(v230, v14, v10);
    v56 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v57 = swift_allocError(v10, v56, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v58, v55, v10);
    v59 = (void *)_convertErrorToNSError(_:)(v57);
    (*(void (**)(uint64_t, _QWORD, void *))(v45 + 16))(v45, 0, v59);

    goto LABEL_25;
  }
  v216 = v44;
  v214 = sub_10016D5D0(v44);
  if (!v92)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v113 = (uint64_t)v226;
    v114 = sub_10008EA50((uint64_t)v226, (uint64_t)qword_10026DE40);
    v115 = v227;
    v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v227 + 16))(v27, v114, v113);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.error.getter();
    v119 = os_log_type_enabled(v117, v118);
    v10 = (uint64_t)v218;
    v120 = v219;
    if (v119)
    {
      v121 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Failed fetching App ID from connection", v121, 2u);
      swift_slowDealloc(v121, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v115 + 8))(v27, v113);
    *v14 = 0xD000000000000026;
    v14[1] = 0x80000001001FDAD0;
    v54 = v231;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v231 + 104))(v14, enum case for Errors.NotFound(_:), v10);
    v122 = v230;
    (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 16))(v230, v14, v10);
    v123 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v57 = swift_allocError(v10, v123, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v124, v122, v10);
    v125 = (void *)_convertErrorToNSError(_:)(v57);
    (*(void (**)(uint64_t, _QWORD, void *))(v120 + 16))(v120, 0, v125);

    goto LABEL_26;
  }
  v94 = v92;
  v95 = sub_100169710(v93);
  v215 = v95;
  if (v95)
  {
    v96 = *(_QWORD *)(v95 + 24);
    v97 = v95;
    v98 = *(_QWORD *)(v95 + 32);
    swift_bridgeObjectRetain(v98);
    LOBYTE(v96) = sub_1000F8A48(v214, v94, v96, v98, v216);
    v99 = v98;
    v100 = v97;
    swift_bridgeObjectRelease(v99);
    if ((v96 & 1) != 0)
    {
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v101 = (uint64_t)v226;
      v102 = sub_10008EA50((uint64_t)v226, (uint64_t)qword_10026DE40);
      (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v24, v102, v101);
      swift_bridgeObjectRetain_n(v94, 2);
      v103 = swift_retain_n(v100, 2);
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.default.getter(v104);
      v213 = v104;
      v211 = v105;
      if (os_log_type_enabled(v104, v105))
      {
        v106 = swift_slowAlloc(22, -1);
        v210 = swift_slowAlloc(64, -1);
        v233[0] = v210;
        *(_DWORD *)v106 = 136315394;
        swift_bridgeObjectRetain(v94);
        v232 = sub_1000906BC(v214, v94, v233);
        v212 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v106 + 4, v106 + 12);
        swift_bridgeObjectRelease_n(v212, 3);
        *(_WORD *)(v106 + 12) = 2080;
        v209 = v106 + 14;
        v107 = *(_QWORD *)(v215 + 24);
        v108 = *(_QWORD *)(v215 + 32);
        swift_bridgeObjectRetain(v108);
        v232 = sub_1000906BC(v107, v108, v233);
        v94 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v209, v106 + 22);
        swift_release_n(v215, 2);
        swift_bridgeObjectRelease(v108);
        v109 = v213;
        _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v211, "Foreground app %s force-removing animator for %s", (uint8_t *)v106, 0x16u);
        v110 = v210;
        swift_arrayDestroy(v210, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1, -1);
        v111 = v106;
        v100 = v215;
        swift_slowDealloc(v111, -1, -1);

        v112.n128_f64[0] = (*(double (**)(char *, char *))(v227 + 8))(v24, v226);
      }
      else
      {

        swift_release_n(v100, 2);
        swift_bridgeObjectRelease_n(v94, 2);
        v112.n128_f64[0] = (*(double (**)(char *, uint64_t))(v227 + 8))(v24, v101);
      }
      sub_100169828(v112);
    }
    v126 = *(_DWORD *)(v100 + 16);
    if (v126 != objc_msgSend(v216, "processIdentifier"))
    {
      v162 = (uint64_t)v226;
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v163 = sub_10008EA50(v162, (uint64_t)qword_10026DE40);
      v164 = v227;
      (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v21, v163, v162);
      swift_bridgeObjectRetain(v94);
      v165 = swift_retain(v100);
      v166 = Logger.logObject.getter(v165);
      v167 = v94;
      v168 = v100;
      v169 = static os_log_type_t.default.getter(v166);
      v170 = os_log_type_enabled(v166, v169);
      v10 = (uint64_t)v218;
      if (v170)
      {
        v171 = swift_slowAlloc(22, -1);
        v229 = swift_slowAlloc(64, -1);
        v233[0] = v229;
        *(_DWORD *)v171 = 136315394;
        v172 = *(_QWORD *)(v215 + 24);
        v173 = *(_QWORD *)(v215 + 32);
        swift_bridgeObjectRetain(v173);
        v232 = sub_1000906BC(v172, v173, v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v171 + 4, v171 + 12);
        swift_release(v215);
        swift_bridgeObjectRelease(v173);
        *(_WORD *)(v171 + 12) = 2080;
        swift_bridgeObjectRetain(v167);
        v232 = sub_1000906BC(v214, v167, v233);
        v168 = v215;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v171 + 14, v171 + 22);
        swift_bridgeObjectRelease_n(v167, 3);
        _os_log_impl((void *)&_mh_execute_header, v166, v169, "animator owned by %s, rejecting request from %s", (uint8_t *)v171, 0x16u);
        v174 = v229;
        swift_arrayDestroy(v229, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v174, -1, -1);
        swift_slowDealloc(v171, -1, -1);

        (*(void (**)(char *, char *))(v227 + 8))(v21, v226);
      }
      else
      {

        swift_bridgeObjectRelease_n(v167, 2);
        swift_release(v168);
        (*(void (**)(char *, uint64_t))(v164 + 8))(v21, v162);
      }
      v199 = v219;
      v200 = v217;
      *v14 = 0xD000000000000021;
      v14[1] = 0x80000001001FF540;
      v201 = v231;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v231 + 104))(v14, enum case for Errors.UnexpectedError(_:), v10);
      v202 = v230;
      (*(void (**)(char *, _QWORD *, uint64_t))(v201 + 16))(v230, v14, v10);
      v203 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v57 = swift_allocError(v10, v203, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v201 + 32))(v204, v202, v10);
      v205 = (void *)_convertErrorToNSError(_:)(v57);
      (*(void (**)(uint64_t, _QWORD, void *))(v199 + 16))(v199, 0, v205);

      swift_release(v168);
      v71 = *(void (**)(_QWORD *, uint64_t))(v201 + 8);
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease(v94);
  v33 = v226;
  sub_10016BF20(1);
  sub_10016A93C(v37);
  v127 = v225;
  v128 = v220;
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v129 = sub_10008EA50((uint64_t)v33, (uint64_t)qword_10026DE40);
  v130 = v227;
  (*(void (**)(char *, uint64_t, char *))(v227 + 16))(v128, v129, v33);
  swift_bridgeObjectRetain_n(v127, 2);
  v131 = a1;
  v132 = v229;
  swift_bridgeObjectRetain_n(v229, 2);
  v133 = v228;
  swift_bridgeObjectRetain_n(v228, 2);
  v134 = v131;
  v135 = Logger.logObject.getter(v134);
  v136 = static os_log_type_t.default.getter(v135);
  v137 = v136;
  v138 = os_log_type_enabled(v135, v136);
  v218 = v134;
  if (v138)
  {
    v139 = swift_slowAlloc(42, -1);
    LODWORD(v230) = v137;
    v140 = v139;
    v141 = swift_slowAlloc(128, -1);
    v231 = v141;
    v233[0] = v141;
    *(_DWORD *)v140 = 136315906;
    v142 = DockCoreInfo.name.getter(v141);
    v143 = v134;
    v145 = v144;
    v232 = sub_1000906BC(v142, v144, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v140 + 4, v140 + 12);

    swift_bridgeObjectRelease(v145);
    *(_WORD *)(v140 + 12) = 2080;
    swift_bridgeObjectRetain(v132);
    v146 = v224;
    v232 = sub_1000906BC(v224, v132, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v140 + 14, v140 + 22);
    swift_bridgeObjectRelease_n(v132, 3);
    *(_WORD *)(v140 + 22) = 2080;
    swift_bridgeObjectRetain(v133);
    v148 = Array.description.getter(v147, &type metadata for String);
    v150 = v149;
    swift_bridgeObjectRelease(v133);
    v232 = sub_1000906BC(v148, v150, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v140 + 24, v140 + 32);
    swift_bridgeObjectRelease_n(v133, 2);
    swift_bridgeObjectRelease(v150);
    *(_WORD *)(v140 + 32) = 2080;
    v151 = type metadata accessor for SensorData(0);
    swift_bridgeObjectRetain(v127);
    v153 = Array.description.getter(v152, v151);
    v33 = v154;
    swift_bridgeObjectRelease(v127);
    v232 = sub_1000906BC(v153, (unint64_t)v33, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v232, v233, v140 + 34, v140 + 42);
    swift_bridgeObjectRelease_n(v127, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v230, "Processing request for setSensorStates(%s, %s, %s, %s", (uint8_t *)v140, 0x2Au);
    v155 = v231;
    swift_arrayDestroy(v231, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v155, -1, -1);
    swift_slowDealloc(v140, -1, -1);

    (*(void (**)(char *, char *))(v227 + 8))(v220, v226);
    v156 = v217;
  }
  else
  {

    swift_bridgeObjectRelease_n(v127, 2);
    swift_bridgeObjectRelease_n(v133, 2);
    swift_bridgeObjectRelease_n(v132, 2);

    (*(void (**)(char *, char *))(v130 + 8))(v128, v33);
    v156 = v217;
    v146 = v224;
  }
  v157 = v156;
  v158 = dispatch thunk of DockCoreAccessory.getSystemSensors(name:sensors:)(v146, v132, v133);
  v220 = v157;

  if ((unint64_t)v158 >> 62)
  {
    if (v158 < 0)
      v206 = v158;
    else
      v206 = v158 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v158);
    v159 = _CocoaArrayWrapper.endIndex.getter(v206);
    swift_bridgeObjectRelease(v158);
  }
  else
  {
    v159 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v160 = v127;
  v14 = (_QWORD *)(v127 & 0xFFFFFFFFFFFFFF8);
  if ((unint64_t)v160 >> 62)
  {
    if (v160 >= 0)
      v207 = v14;
    else
      v207 = (_QWORD *)v160;
    swift_bridgeObjectRetain(v160);
    v208 = _CocoaArrayWrapper.endIndex.getter(v207);
    swift_bridgeObjectRelease(v160);
    if (v159 == v208)
      goto LABEL_58;
LABEL_102:
    swift_bridgeObjectRelease(v158);
    sub_100102568((uint64_t)v218, v224, v229, v228, v160);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v219 + 16))(v219, 1, 0);

    swift_release(v215);
    return;
  }
  if (v159 != v14[2])
    goto LABEL_102;
LABEL_58:
  if ((unint64_t)v158 >> 62)
  {
    if (v158 < 0)
      v175 = v158;
    else
      v175 = v158 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v158);
    v161 = _CocoaArrayWrapper.endIndex.getter(v175);
    swift_bridgeObjectRelease(v158);
  }
  else
  {
    v161 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v161)
    goto LABEL_102;
  if (v161 < 1)
  {
    __break(1u);
    return;
  }
  v176 = 0;
  v230 = (char *)(v160 & 0xC000000000000001);
  v231 = v158 & 0xC000000000000001;
  v226 = (char *)v161;
  v227 = v158;
  while (1)
  {
    v178 = v231
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v176, v158)
         : (char *)*(id *)(v158 + 8 * v176 + 32);
    v40 = v178;
    v179 = type metadata accessor for SensorTracker(0);
    if (swift_dynamicCastClass(v40, v179))
      break;
LABEL_73:
    ++v176;

    if (v161 == v176)
      goto LABEL_102;
  }
  if (v230)
  {
    v198 = v40;
    v182 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v176, v160);
    goto LABEL_81;
  }
  if (v176 < v14[2])
  {
    v180 = *(void **)(v160 + 8 * v176 + 32);
    v181 = v40;
    v182 = v180;
LABEL_81:
    v33 = v182;
    v183 = type metadata accessor for SensorTrackerState(0);
    if (swift_dynamicCastClass(v33, v183))
    {
      dispatch thunk of SensorTracker.setState(state:)();
      v184 = qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
      v185 = swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v233, 0, 0);
      v187 = v221;
      v186 = v222;
      v188 = v223;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v222 + 16))(v221, v184, v223, v185);
      DKThreadSafe.wrappedValue.getter(&v232, v188);
      v189 = (*(uint64_t (**)(char *, uint64_t))(v186 + 8))(v187, v188);
      if ((v232 & 1) != 0)
      {
        v177 = v33;
        v33 = v40;
        v158 = v227;
        v160 = v225;
      }
      else
      {
        v190 = qword_100275638;
        v191 = dispatch thunk of SensorTrackerState.state.getter(v189);
        v192 = v190 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
        *(_QWORD *)v192 = v191;
        *(_BYTE *)(v192 + 8) = 0;
        v193 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        v194 = *(os_unfair_lock_s **)(v190 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain(v194);
        os_unfair_lock_lock(v194 + 4);
        swift_release(v194);
        v195 = *(void **)(v190 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
        v196 = *(os_unfair_lock_s **)(v190 + v193);
        v197 = v195;
        swift_retain(v196);
        os_unfair_lock_unlock(v196 + 4);
        swift_release(v196);
        if (v195)
        {
          v177 = (char *)v197;
          sub_10015F4C8(v191, v195);

          v40 = v177;
        }
        else
        {
          v177 = v40;
        }
        v160 = v225;
        v158 = v227;
      }
      v161 = (uint64_t)v226;
    }
    else
    {
      v177 = v40;
    }

    v40 = v33;
    goto LABEL_73;
  }
  __break(1u);
LABEL_93:
  swift_once(&qword_10026BB60, sub_1000EF32C);
LABEL_31:
  v80 = (uint64_t)v226;
  v81 = sub_10008EA50((uint64_t)v226, (uint64_t)qword_10026DE40);
  v82 = v227;
  v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v227 + 16))(v33, v81, v80);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter();
  v86 = os_log_type_enabled(v84, v85);
  v10 = (uint64_t)v218;
  v87 = v219;
  if (v86)
  {
    v88 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed fetching current NSXPCConnection, cannot construct client", v88, 2u);
    swift_slowDealloc(v88, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v82 + 8))(v33, v80);
  *v14 = 0xD000000000000017;
  v14[1] = 0x80000001001FDAB0;
  v54 = v231;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v231 + 104))(v14, enum case for Errors.XPCNil(_:), v10);
  v89 = v230;
  (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 16))(v230, v14, v10);
  v90 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
  v57 = swift_allocError(v10, v90, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v91, v89, v10);
  v59 = (void *)_convertErrorToNSError(_:)(v57);
  (*(void (**)(uint64_t, _QWORD, void *))(v87 + 16))(v87, 0, v59);

LABEL_25:
LABEL_26:
  v71 = *(void (**)(_QWORD *, uint64_t))(v54 + 8);
LABEL_27:
  v72 = v14;
  v73 = v10;
LABEL_29:
  v71(v72, v73);
  swift_errorRelease(v57);
}

uint64_t sub_100104918(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t i;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;

  if (a1 != a4 || a2 != a5)
  {
    v8 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0) & 1) == 0)
      return v8;
  }
  v9 = a6[2];
  if (!v9)
    return 1;
  v10 = a3[2];
  if (!v10)
    return 0;
  v11 = a6 + 4;
  v13 = a6[4];
  v12 = (_QWORD *)a6[5];
  v14 = a3[4];
  v15 = (_QWORD *)a3[5];
  swift_bridgeObjectRetain(a6);
  v32 = a3 + 9;
  for (i = 1; ; ++i)
  {
    swift_bridgeObjectRetain(v12);
    if (v14 != v13)
      break;
    v17 = v15;
    if (v15 != v12)
      break;
LABEL_15:
    swift_bridgeObjectRelease(v17);
    if (i == v9)
    {
      v8 = 1;
LABEL_33:
      swift_bridgeObjectRelease(a6);
      return v8;
    }
    v21 = &v11[2 * i];
    v13 = *v21;
    v12 = (_QWORD *)v21[1];
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v13, v12, 0) & 1) != 0)
    goto LABEL_14;
  if (v10 == 1)
    goto LABEL_31;
  if ((v18 = a3[6], v19 = (_QWORD *)a3[7], v18 == v13) && v19 == v12
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v13, v12, 0), (result & 1) != 0))
  {
LABEL_14:
    v17 = v12;
    goto LABEL_15;
  }
  if (v10 == 2)
  {
LABEL_31:
    v28 = a6;
LABEL_32:
    swift_bridgeObjectRelease(v28);
    v8 = 0;
    a6 = v12;
    goto LABEL_33;
  }
  v29 = v11;
  v30 = a3;
  v31 = a6;
  v22 = v32;
  v23 = 2;
  while (1)
  {
    v24 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    v25 = *(v22 - 1);
    v26 = (_QWORD *)*v22;
    v27 = v25 == v13 && v26 == v12;
    if (v27 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v13, v12, 0), (result & 1) != 0))
    {
      v17 = v12;
      a3 = v30;
      a6 = v31;
      v11 = v29;
      goto LABEL_15;
    }
    v22 += 2;
    ++v23;
    if (v24 == v10)
    {
      v28 = v31;
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100104AE8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  int v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD v69[5];
  char v70[24];
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v6 = v5;
  v60 = a5;
  v61 = a4;
  v59 = a3;
  v68 = a2;
  v62 = a1;
  v7 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  __chkstk_darwin(v10);
  v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v19 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v66 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v20 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v21 = v19;
  v22 = v20;
  OS_dispatch_semaphore.wait()();

  v67 = v21;
  v23 = &v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v70, 0, 0);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
  if (v25)
  {
    v57 = v9;
    v58 = v6;
    v26 = v24 + 32;
    swift_bridgeObjectRetain(v24);
    while (1)
    {
      sub_10009AFF4(v26, (uint64_t)v69);
      v27 = *(id *)(*sub_10009B038(v69, v69[3]) + 24);
      DockCoreInfo.identifier.getter(v27);

      DockCoreInfo.identifier.getter(v28);
      LOBYTE(v27) = static UUID.== infix(_:_:)(v18, v16);
      v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v16, v12);
      v29(v18, v12);
      if ((v27 & 1) != 0)
        break;
      sub_100090E88(v69);
      v26 += 40;
      if (!--v25)
      {
        swift_bridgeObjectRelease(v24);
        v6 = v58;
        v9 = v57;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease(v24);
    v54 = *(id *)&v19[v66];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v69, (uint64_t)&v71);
    sub_100090E88(v69);

    v6 = v58;
    v9 = v57;
    if (!*((_QWORD *)&v72 + 1))
      goto LABEL_16;
  }
  else
  {
LABEL_8:
    v30 = *(id *)&v19[v66];
    OS_dispatch_semaphore.signal()();

    v73 = 0;
    v71 = 0u;
    v72 = 0u;

    if (!*((_QWORD *)&v72 + 1))
    {
LABEL_16:
      sub_10009B2C0((uint64_t)&v71, (uint64_t *)&unk_10026DF40);
      return 0;
    }
  }
  v31 = sub_10009061C(&qword_10026C2E0);
  v32 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v69, &v71, v31, v32, 6) & 1) == 0)
    return 0;
  v33 = v69[0];
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v34 = v65;
  v35 = sub_10008EA50(v65, (uint64_t)qword_10026DE40);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v35, v34);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v39 = 67109120;
    LODWORD(v71) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 4, v39 + 4, v39 + 8);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "pid %d Registering for device feedback", v39, 8u);
    swift_slowDealloc(v39, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  v40 = type metadata accessor for TaskPriority(0);
  v41 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v9, 1, 1, v40);
  v42 = (_QWORD *)swift_allocObject(&unk_10023B7F8, 40, 7);
  v42[2] = 0;
  v42[3] = 0;
  v42[4] = v33;
  swift_retain(v33);
  v43 = sub_10018A990((uint64_t)v9, (uint64_t)&unk_10026E088, (uint64_t)v42);
  swift_release(v43);
  v44 = swift_allocObject(&unk_10023B820, 64, 7);
  v45 = v60;
  *(_QWORD *)(v44 + 16) = v68;
  *(_QWORD *)(v44 + 24) = v45;
  v46 = v61;
  *(_QWORD *)(v44 + 32) = v59;
  *(_QWORD *)(v44 + 40) = v46;
  *(_DWORD *)(v44 + 48) = v62;
  *(_QWORD *)(v44 + 56) = v6;
  v47 = *(os_unfair_lock_s **)(v33 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
  v48 = __chkstk_darwin(v44);
  *(&v56 - 4) = v33;
  *((_DWORD *)&v56 - 6) = v49;
  *(&v56 - 2) = (uint64_t)sub_100114644;
  *(&v56 - 1) = v48;
  v51 = v50;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  v52 = v6;
  swift_retain(v47);
  os_unfair_lock_lock(v47 + 4);
  sub_100180780(v53, sub_100114674);
  os_unfair_lock_unlock(v47 + 4);
  swift_release(v44);
  swift_release(v33);
  swift_release(v47);
  return v41;
}

void sub_100105094(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint8_t *v63;
  unsigned int *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  id v88;
  char v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  char v95;
  void *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  id v108;
  uint8_t *v109;
  uint8_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  os_log_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t (*v123)(char *, uint64_t, uint64_t);
  id v124;
  id v125;
  unsigned int v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  id v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138[2];

  v136 = a7;
  v129 = a5;
  v130 = a6;
  v133 = a2;
  v134 = a4;
  v9 = type metadata accessor for Errors(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v135 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v114 - v13);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v131 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v132 = (char *)&v114 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v114 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v114 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v114 - v27;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v57 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
    v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v28, v57, v15);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = v10;
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Client doesn't have camera TCC, rejecting XPC message", v62, 2u);
      v63 = v62;
      v10 = v61;
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v15);
    *v14 = 0xD000000000000012;
    v14[1] = 0x80000001001FF590;
    v64 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_21;
  }
  if (!a1 || !a3 || !v134)
  {
    *v14 = 0xD000000000000016;
    v14[1] = 0x80000001001FF5B0;
    v64 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_21:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v14, *v64, v9);
    v65 = v135;
    (*(void (**)(char *, _QWORD *, uint64_t))(v10 + 16))(v135, v14, v9);
    v66 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v9, v66, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v68, v65, v9);
    v69 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v136 + 16))(v136, 0, v69);

    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v14, v9);
LABEL_22:
    swift_errorRelease(v67);
    return;
  }
  v30 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v29), "currentConnection");
  if (!v30)
  {
    v75 = v10;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v76 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
    v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v26, v76, v15);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed fetching current NSXPCConnection, cannot construct client", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v15);
    *v14 = 0xD000000000000017;
    v14[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v75 + 104))(v14, enum case for Errors.XPCNil(_:), v9);
    v81 = v135;
    (*(void (**)(char *, _QWORD *, uint64_t))(v75 + 16))(v135, v14, v9);
    v82 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v9, v82, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v83, v81, v9);
    v84 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v136 + 16))(v136, 0, v84);

    (*(void (**)(_QWORD *, uint64_t))(v75 + 8))(v14, v9);
    goto LABEL_22;
  }
  v127 = v10;
  v128 = v30;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_10015DAB8(a1);
  v32 = v31;
  if (!v31
    || (v33 = type metadata accessor for ActuationController(0),
        v34 = v32,
        LOBYTE(v33) = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v133, a3, v33),
        v34,
        (v33 & 1) == 0)
    || (v35 = v34,
        v36 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(v133, a3, v134),
        v35,
        (v36 & 1) == 0))
  {
    *v14 = 0xD00000000000001ALL;
    v14[1] = 0x80000001001FF8E0;
    v70 = v127;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v127 + 104))(v14, enum case for Errors.NotFound(_:), v9);
    v71 = v135;
    (*(void (**)(char *, _QWORD *, uint64_t))(v70 + 16))(v135, v14, v9);
    v72 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v9, v72, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v73, v71, v9);
    v74 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v136 + 16))(v136, 0, v74);

LABEL_24:
    (*(void (**)(_QWORD *, uint64_t))(v70 + 8))(v14, v9);
    goto LABEL_22;
  }
  v124 = v35;
  v126 = objc_msgSend(v128, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v37 = sub_10008EA50(v15, (uint64_t)qword_10026DE40);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v122 = v37;
  v123 = v38;
  ((void (*)(char *))v38)(v23);
  v39 = a1;
  swift_bridgeObjectRetain_n(a3, 2);
  v40 = (uint64_t)v134;
  swift_bridgeObjectRetain_n(v134, 2);
  v125 = v39;
  v41 = Logger.logObject.getter(v125);
  v42 = static os_log_type_t.default.getter(v41);
  LODWORD(v121) = v42;
  v43 = os_log_type_enabled(v41, v42);
  v120 = a3;
  if (v43)
  {
    v44 = swift_slowAlloc(38, -1);
    v117 = v41;
    v45 = v44;
    v119 = (_QWORD *)swift_slowAlloc(8, -1);
    v118 = swift_slowAlloc(64, -1);
    v138[0] = v118;
    *(_DWORD *)v45 = 67109890;
    LODWORD(v137) = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 4, v45 + 4, v45 + 8);
    *(_WORD *)(v45 + 8) = 2112;
    v115 = v45 + 10;
    v114 = v45 + 18;
    v137 = (uint64_t)v125;
    v46 = v125;
    v116 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v115, v114);
    *v119 = a1;

    *(_WORD *)(v45 + 18) = 2080;
    swift_bridgeObjectRetain(a3);
    v137 = sub_1000906BC(v133, a3, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v45 + 20, v45 + 28);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v45 + 28) = 2080;
    swift_bridgeObjectRetain(v134);
    v47 = Array.description.getter(v134, &type metadata for String);
    v49 = v48;
    swift_bridgeObjectRelease(v134);
    v137 = sub_1000906BC(v47, v49, v138);
    v50 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v116, v45 + 30, v45 + 38);
    swift_bridgeObjectRelease_n(v134, 2);
    v51 = v49;
    v52 = (uint64_t)v134;
    swift_bridgeObjectRelease(v51);
    v53 = v117;
    _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v121, "Client %d registering for feedback for %@ %s %s", (uint8_t *)v45, 0x26u);
    v54 = sub_10009061C(&qword_10026BC40);
    v55 = v119;
    swift_arrayDestroy(v119, 1, v54);
    swift_slowDealloc(v55, -1, -1);
    v56 = v118;
    swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v121 = *(void (**)(char *, uint64_t))(v16 + 8);
    v121(v23, v15);
  }
  else
  {

    swift_bridgeObjectRelease_n(v40, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    v85 = v125;

    v121 = *(void (**)(char *, uint64_t))(v16 + 8);
    v121(v23, v15);
    v50 = v126;
    v52 = v40;
  }
  v86 = v124;
  v87 = v128;
  v88 = v128;
  v89 = sub_100174814(v50, v87);

  v134 = v88;
  if ((v89 & 1) == 0)
  {
    v96 = v86;
    v97 = v123(v132, v122, v15);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed adding client to client list", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    v121(v132, v15);
    *v14 = 0xD00000000000001CLL;
    v14[1] = 0x80000001001FF720;
    v70 = v127;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v127 + 104))(v14, enum case for Errors.UnexpectedError(_:), v9);
    v101 = v135;
    (*(void (**)(char *, _QWORD *, uint64_t))(v70 + 16))(v135, v14, v9);
    v102 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v9, v102, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v103, v101, v9);
    v104 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v136 + 16))(v136, 0, v104);

    goto LABEL_40;
  }
  v91 = (uint64_t)v125;
  v92 = v133;
  v93 = v120;
  sub_1001642AC(v50, v90, (uint64_t)v125, v133, v120, v52, v129);
  v94 = v86;
  v95 = sub_100104AE8(v50, v91, v92, v93, v52);

  if ((v95 & 1) == 0)
  {
    v105 = v123(v131, v122, v15);
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = v94;
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Failed starting feedback from accessory", v109, 2u);
      v110 = v109;
      v94 = v108;
      swift_slowDealloc(v110, -1, -1);
    }

    v121(v131, v15);
    *v14 = 0xD000000000000027;
    v14[1] = 0x80000001001FF890;
    v70 = v127;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v127 + 104))(v14, enum case for Errors.UnexpectedError(_:), v9);
    v111 = v135;
    (*(void (**)(char *, _QWORD *, uint64_t))(v70 + 16))(v135, v14, v9);
    v112 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v67 = swift_allocError(v9, v112, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v113, v111, v9);
    v104 = (void *)_convertErrorToNSError(_:)(v67);
    (*(void (**)(uint64_t, _QWORD, void *))(v136 + 16))(v136, 0, v104);

LABEL_40:
    goto LABEL_24;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v136 + 16))(v136, 1, 0);

}

void sub_100105DE0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  char v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD *v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  unsigned int *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  char *v87;
  char v88;
  char v89;
  __n128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void *v94;
  char *v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  char *v103;
  uint64_t v104;
  char v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  uint64_t v108;
  id v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint8_t *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  id v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int v139;
  os_log_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t (*v144)(char *, uint64_t, uint64_t);
  id v145;
  uint64_t v146;
  unsigned int v147;
  id v148;
  id v149;
  uint64_t v150;
  id v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  uint64_t v162;
  uint64_t v163[4];
  char v164[16];
  __int128 v165;
  __int128 v166;
  uint64_t v167;

  v159 = a2;
  v7 = type metadata accessor for Errors(0);
  v160 = *(void (**)(char *, uint64_t))(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v161 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v137 - v10;
  v12 = type metadata accessor for UUID(0);
  v157 = *(_QWORD *)(v12 - 8);
  v158 = v12;
  v13 = __chkstk_darwin(v12);
  v156 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v155 = (char *)&v137 - v15;
  v16 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v16);
  v152 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v153 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v154 = (char *)&v137 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v137 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v137 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v137 - v30;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v60 = a4;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v61 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v31, v61, v18);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Client doesn't have camera TCC, rejecting XPC message", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v31, v18);
    *(_QWORD *)v11 = 0xD000000000000012;
    *((_QWORD *)v11 + 1) = 0x80000001001FF590;
    v66 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_19;
  }
  if (!a1 || !a3)
  {
    *(_QWORD *)v11 = 0xD000000000000016;
    *((_QWORD *)v11 + 1) = 0x80000001001FF5B0;
    v73 = (void (**)(char *, _QWORD *, uint64_t))v160;
    (*((void (**)(char *, _QWORD, uint64_t))v160 + 13))(v11, enum case for Errors.NilParams(_:), v7);
    v74 = v161;
    ((void (**)(char *, char *, uint64_t))v73)[2](v161, v11, v7);
    v75 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v76 = a4;
    v70 = swift_allocError(v7, v75, 0, 0);
    ((void (**)(char *, char *, uint64_t))v73)[4](v77, v74, v7);
    v78 = (void *)_convertErrorToNSError(_:)(v70);
    (*(void (**)(uint64_t, _QWORD, void *))(v76 + 16))(v76, 0, v78);

    ((void (*)(char *, uint64_t))v73[1])(v11, v7);
    goto LABEL_22;
  }
  v33 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v32), "currentConnection");
  if (!v33)
  {
    v60 = a4;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v82 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v29, v82, v18);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed fetching current NSXPCConnection, cannot construct client", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v18);
    *(_QWORD *)v11 = 0xD000000000000017;
    *((_QWORD *)v11 + 1) = 0x80000001001FDAB0;
    v66 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_19:
    v67 = (void (**)(char *, _QWORD *, uint64_t))v160;
    (*((void (**)(char *, _QWORD, uint64_t))v160 + 13))(v11, *v66, v7);
    v68 = v161;
    ((void (**)(char *, char *, uint64_t))v67)[2](v161, v11, v7);
    v69 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v70 = swift_allocError(v7, v69, 0, 0);
    ((void (**)(char *, char *, uint64_t))v67)[4](v71, v68, v7);
    v72 = (void *)_convertErrorToNSError(_:)(v70);
    (*(void (**)(uint64_t, _QWORD, void *))(v60 + 16))(v60, 0, v72);
LABEL_20:

    ((void (*)(char *, uint64_t))v67[1])(v11, v7);
LABEL_22:
    swift_errorRelease(v70);
    return;
  }
  v151 = v33;
  v150 = a4;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v149 = a1;
  sub_10015DAB8(a1);
  v35 = v34;
  if (!v34
    || (v36 = type metadata accessor for ActuationController(0),
        v37 = v35,
        v38 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v159, a3, v36),
        v37,
        (v38 & 1) == 0)
    || (v39 = v37,
        v40 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v159, a3, v36),
        v39,
        (v40 & 1) == 0))
  {
    *(_QWORD *)v11 = 0xD000000000000010;
    *((_QWORD *)v11 + 1) = 0x80000001001FF8C0;
    v67 = (void (**)(char *, _QWORD *, uint64_t))v160;
    (*((void (**)(char *, _QWORD, uint64_t))v160 + 13))(v11, enum case for Errors.NotFound(_:), v7);
    v79 = v161;
    ((void (**)(char *, char *, uint64_t))v67)[2](v161, v11, v7);
    v80 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v70 = swift_allocError(v7, v80, 0, 0);
    ((void (**)(char *, char *, uint64_t))v67)[4](v81, v79, v7);
    v72 = (void *)_convertErrorToNSError(_:)(v70);
    (*(void (**)(uint64_t, _QWORD, void *))(v150 + 16))(v150, 0, v72);

    goto LABEL_20;
  }
  v147 = objc_msgSend(v151, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v41 = v18;
  v42 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v44 = v26;
  v143 = v42;
  v146 = v41;
  v144 = v43;
  ((void (*)(char *))v43)(v26);
  v45 = v149;
  v46 = v149;
  swift_bridgeObjectRetain_n(a3, 2);
  v47 = v46;
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  v51 = os_log_type_enabled(v48, v49);
  v145 = v39;
  v148 = v47;
  if (v51)
  {
    v52 = swift_slowAlloc(28, -1);
    v140 = v48;
    v53 = v52;
    v138 = (_QWORD *)swift_slowAlloc(8, -1);
    v141 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v165 = v141;
    *(_DWORD *)v53 = 67109634;
    v139 = v50;
    LODWORD(v162) = v147;
    v142 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, (char *)&v162 + 4, v53 + 4, v53 + 8);
    *(_WORD *)(v53 + 8) = 2112;
    v162 = (uint64_t)v47;
    v54 = v47;
    v39 = v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v53 + 10, v53 + 18);
    v55 = v138;
    *v138 = v45;

    *(_WORD *)(v53 + 18) = 2080;
    swift_bridgeObjectRetain(a3);
    v162 = sub_1000906BC(v159, a3, (uint64_t *)&v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v53 + 20, v53 + 28);
    swift_bridgeObjectRelease_n(a3, 3);
    v56 = v140;
    _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v139, "Client %d de-registering for feedback for %@ %s", (uint8_t *)v53, 0x1Cu);
    v57 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v55, 1, v57);
    swift_slowDealloc(v55, -1, -1);
    v58 = v141;
    swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    v59 = *(void (**)(char *, uint64_t))(v19 + 8);
    v59(v142, v146);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v59 = *(void (**)(char *, uint64_t))(v19 + 8);
    v59(v44, v146);
  }
  v87 = (char *)v151;
  sub_1001749F0(v147);
  v89 = v88;

  if ((v89 & 1) == 0)
  {
    v110 = v59;
    v111 = v154;
    v112 = v146;
    v113 = v144(v154, v143, v146);
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v116 = 0;
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Failed removing client from client list", v116, 2u);
      v117 = v116;
      v39 = v145;
      swift_slowDealloc(v117, -1, -1);
    }

    v110(v111, v112);
    *(_QWORD *)v11 = 0xD000000000000020;
    *((_QWORD *)v11 + 1) = 0x80000001001FF5D0;
    v67 = (void (**)(char *, _QWORD *, uint64_t))v160;
    (*((void (**)(char *, _QWORD, uint64_t))v160 + 13))(v11, enum case for Errors.UnexpectedError(_:), v7);
    v118 = v161;
    ((void (**)(char *, char *, uint64_t))v67)[2](v161, v11, v7);
    v119 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v70 = swift_allocError(v7, v119, 0, 0);
    ((void (**)(char *, char *, uint64_t))v67)[4](v120, v118, v7);
    v72 = (void *)_convertErrorToNSError(_:)(v70);
    (*(void (**)(uint64_t, _QWORD, void *))(v150 + 16))(v150, 0, v72);

    goto LABEL_20;
  }
  v91 = qword_100275638;
  sub_100164BE0(v147, v90);
  v92 = *(char **)(v91 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v93 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v94 = *(void **)&v92[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v95 = v92;
  v96 = v94;
  OS_dispatch_semaphore.wait()();

  v97 = &v95[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v95[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v164, 0, 0);
  v98 = *(_QWORD *)v97;
  v99 = *(_QWORD *)(*(_QWORD *)v97 + 16);
  if (v99)
  {
    v160 = v59;
    v161 = v87;
    v100 = v98 + 32;
    swift_bridgeObjectRetain(v98);
    v101 = v155;
    while (1)
    {
      sub_10009AFF4(v100, (uint64_t)&v162);
      v102 = *(id *)(*sub_10009B038(&v162, v163[2]) + 24);
      DockCoreInfo.identifier.getter(v102);

      v103 = v156;
      DockCoreInfo.identifier.getter(v104);
      v105 = static UUID.== infix(_:_:)(v101, v103);
      v106 = *(void (**)(char *, uint64_t))(v157 + 8);
      v107 = v103;
      v108 = v158;
      v106(v107, v158);
      v106(v101, v108);
      if ((v105 & 1) != 0)
        break;
      sub_100090E88(&v162);
      v100 += 40;
      if (!--v99)
      {
        swift_bridgeObjectRelease(v98);
        v59 = v160;
        v87 = v161;
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease(v98);
    v121 = *(id *)&v92[v93];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)&v162, (uint64_t)&v165);
    sub_100090E88(&v162);

    v59 = v160;
    v87 = v161;
  }
  else
  {
LABEL_36:
    v109 = *(id *)&v92[v93];
    OS_dispatch_semaphore.signal()();

    v167 = 0;
    v165 = 0u;
    v166 = 0u;

  }
  v122 = v145;
  if (*((_QWORD *)&v166 + 1))
  {
    v123 = sub_10009061C(&qword_10026C2E0);
    v124 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(&v162, &v165, v123, v124, 6) & 1) != 0)
    {
      v125 = v162;
      v126 = v144(v153, v143, v146);
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.default.getter(v127);
      if (os_log_type_enabled(v127, v128))
      {
        v129 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v129 = 0;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "Deregistering for device feedback", v129, 2u);
        swift_slowDealloc(v129, -1, -1);
      }

      v130 = ((uint64_t (*)(char *, uint64_t))v59)(v153, v146);
      v131 = *(os_unfair_lock_s **)(v125 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
      __chkstk_darwin(v130);
      *(&v137 - 2) = v125;
      *((_DWORD *)&v137 - 2) = v147;
      swift_retain(v131);
      os_unfair_lock_lock(v131 + 4);
      sub_100180780(v132, (uint64_t (*)(void))sub_100114B2C);
      os_unfair_lock_unlock(v131 + 4);
      swift_release(v131);
      v133 = type metadata accessor for TaskPriority(0);
      v134 = (uint64_t)v152;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v152, 1, 1, v133);
      v135 = (_QWORD *)swift_allocObject(&unk_10023B848, 40, 7);
      v135[2] = 0;
      v135[3] = 0;
      v135[4] = v125;
      swift_retain(v125);
      v136 = sub_10018A9B0(v134, (uint64_t)&unk_10026E098, (uint64_t)v135);
      swift_release(v125);
      swift_release(v136);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v165, (uint64_t *)&unk_10026DF40);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v150 + 16))(v150, 1, 0);

}

void sub_100106D4C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint8_t *v35;
  os_log_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void (*v57)(char *, uint64_t);
  id v58;
  char v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t, uint64_t);
  id v76;
  unsigned int v77;
  id v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v82 = a4;
  v79 = a2;
  v6 = type metadata accessor for Errors(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v81 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v67 - v10);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v80 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v67 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v67 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v67 - v22;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v40 = sub_10008EA50(v12, (uint64_t)qword_10026DE40);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v23, v40, v12);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Client doesn't have camera TCC, rejecting XPC message", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
    *v11 = 0xD000000000000012;
    v11[1] = 0x80000001001FF590;
    v45 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_20;
  }
  if (!a1 || !a3)
  {
    *v11 = 0xD000000000000016;
    v11[1] = 0x80000001001FF5B0;
    v45 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_20:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v11, *v45, v6);
    v51 = v81;
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v81, v11, v6);
    v52 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v6, v52, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v54, v51, v6);
    v55 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v82 + 16))(v82, 0, v55);
LABEL_21:

    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v11, v6);
    swift_errorRelease(v53);
    return;
  }
  v25 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v24), "currentConnection");
  if (!v25)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v46 = sub_10008EA50(v12, (uint64_t)qword_10026DE40);
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v46, v12);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed fetching current NSXPCConnection, cannot construct client", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    *v11 = 0xD000000000000017;
    v11[1] = 0x80000001001FDAB0;
    v45 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_20;
  }
  v78 = v25;
  v26 = objc_msgSend(v25, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v27 = sub_10008EA50(v12, (uint64_t)qword_10026DE40);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v74 = v27;
  v75 = v28;
  ((void (*)(char *))v28)(v21);
  swift_bridgeObjectRetain_n(a3, 2);
  v76 = a1;
  v29 = Logger.logObject.getter(v76);
  v30 = static os_log_type_t.default.getter(v29);
  v73 = v30;
  v31 = os_log_type_enabled(v29, v30);
  v77 = v26;
  if (v31)
  {
    v32 = swift_slowAlloc(28, -1);
    v70 = v29;
    v33 = v32;
    v72 = (_QWORD *)swift_slowAlloc(8, -1);
    v71 = swift_slowAlloc(32, -1);
    v84 = v71;
    *(_DWORD *)v33 = 67109634;
    LODWORD(v83) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v33 + 4, v33 + 8);
    *(_WORD *)(v33 + 8) = 2112;
    v68 = v33 + 10;
    v69 = v33;
    v67 = v33 + 18;
    v83 = (uint64_t)v76;
    v34 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v68, v67);
    *v72 = a1;

    v35 = (uint8_t *)v69;
    *(_WORD *)(v69 + 18) = 2080;
    swift_bridgeObjectRetain(a3);
    v83 = sub_1000906BC(v79, a3, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v35 + 20, v35 + 28);
    swift_bridgeObjectRelease_n(a3, 3);
    v36 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v73, "Client %d de-registering for trajectory progress feedback for %@ %s", v35, 0x1Cu);
    v37 = sub_10009061C(&qword_10026BC40);
    v38 = v72;
    swift_arrayDestroy(v72, 1, v37);
    swift_slowDealloc(v38, -1, -1);
    v39 = v71;
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v56 = v76;

  }
  v57 = *(void (**)(char *, uint64_t))(v13 + 8);
  v57(v21, v12);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v58 = v78;
  v59 = sub_1001754E8(v77);

  if ((v59 & 1) == 0)
  {
    v60 = v75(v80, v74, v12);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed removing client from client list", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    v57(v80, v12);
    *v11 = 0xD000000000000020;
    v11[1] = 0x80000001001FF5D0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v11, enum case for Errors.UnexpectedError(_:), v6);
    v64 = v81;
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v81, v11, v6);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v53 = swift_allocError(v6, v65, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v66, v64, v6);
    v55 = (void *)_convertErrorToNSError(_:)(v53);
    (*(void (**)(uint64_t, _QWORD, void *))(v82 + 16))(v82, 0, v55);

    goto LABEL_21;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v82 + 16))(v82, 1, 0);

}

void sub_10010759C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  char v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void (*v81)(char *, uint64_t);
  int v82;
  id v83;
  NSObject *v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint8_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  void *v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;

  v109 = a6;
  v104 = a5;
  v105 = a2;
  v106 = a4;
  v8 = type metadata accessor for Errors(0);
  v108 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v107 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (uint8_t **)((char *)&v95 - v11);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v103 = (char *)&v95 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v95 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v95 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v95 - v26;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v50 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v27, v50, v13);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client doesn't have camera TCC, rejecting XPC message", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
    *v12 = 0xD000000000000012;
    v12[1] = 0x80000001001FF590;
    v55 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a3 || !v106 || !a1)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v56 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v56, v13);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Client did not provide a system, actuators, or accessory info", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    *v12 = 0xD000000000000016;
    v12[1] = 0x80000001001FF5B0;
    v55 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    v61 = v108;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v108 + 104))(v12, *v55, v8);
    v62 = v107;
    (*(void (**)(char *, _QWORD *, uint64_t))(v61 + 16))(v107, v12, v8);
    v63 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v64 = swift_allocError(v8, v63, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v65, v62, v8);
    v66 = (void *)_convertErrorToNSError(_:)(v64);
    (*(void (**)(uint64_t, _QWORD, void *))(v109 + 16))(v109, 0, v66);

LABEL_27:
    (*(void (**)(_QWORD *, uint64_t))(v61 + 8))(v12, v8);
    swift_errorRelease(v64);
    return;
  }
  v102 = (void *)a3;
  v29 = (void *)objc_opt_self(NSXPCConnection, v28);
  v30 = a1;
  v31 = objc_msgSend(v29, "currentConnection");
  if (!v31)
  {
    v71 = v30;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v72 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v25, v72, v13);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed fetching current NSXPCConnection, cannot construct client", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, v13);
    *v12 = 0xD000000000000017;
    v12[1] = 0x80000001001FDAB0;
    v61 = v108;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v108 + 104))(v12, enum case for Errors.XPCNil(_:), v8);
    v77 = v107;
    (*(void (**)(char *, _QWORD *, uint64_t))(v61 + 16))(v107, v12, v8);
    v78 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v64 = swift_allocError(v8, v78, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v79, v77, v8);
    v80 = (void *)_convertErrorToNSError(_:)(v64);
    (*(void (**)(uint64_t, _QWORD, void *))(v109 + 16))(v109, 0, v80);

    goto LABEL_27;
  }
  v100 = v31;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v101 = v30;
  sub_10015DAB8(v30);
  v33 = v32;
  v34 = v102;
  v35 = v105;
  if (!v32
    || (v36 = type metadata accessor for ActuationController(0),
        v37 = v33,
        LOBYTE(v36) = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(v35, v34, v36),
        v37,
        (v36 & 1) == 0)
    || (v38 = v37,
        v39 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(v35, v34, v106),
        v38,
        (v39 & 1) == 0))
  {
    *v12 = 0xD000000000000019;
    v12[1] = 0x80000001001FF870;
    v61 = v108;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v108 + 104))(v12, enum case for Errors.NotFound(_:), v8);
    v67 = v107;
    (*(void (**)(char *, _QWORD *, uint64_t))(v61 + 16))(v107, v12, v8);
    v68 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v64 = swift_allocError(v8, v68, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v69, v67, v8);
    v70 = (void *)_convertErrorToNSError(_:)(v64);
    (*(void (**)(uint64_t, _QWORD, void *))(v109 + 16))(v109, 0, v70);

    goto LABEL_27;
  }
  v99 = v38;
  v40 = v101;
  v41 = sub_1001756E0((uint64_t)v101, v35, v34);
  v42 = v100;
  if (!v41)
  {
    v98 = 0;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v43 = sub_10008EA50(v13, (uint64_t)qword_10026DE40);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v96 = v43;
    v97 = v44;
    ((void (*)(char *))v44)(v22);
    v45 = v42;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 67109120;
      v95 = v48 + 4;
      v110 = -[NSObject processIdentifier](v45, "processIdentifier");
      v42 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v95, v48 + 8);

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Trying to start feedback from accessory for %d", v48, 8u);
      v49 = v48;
      v40 = v101;
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {

      v46 = v45;
    }
    v41 = v98;

    v81 = *(void (**)(char *, uint64_t))(v14 + 8);
    v81(v22, v13);
    v82 = -[NSObject processIdentifier](v45, "processIdentifier");
    v83 = v99;
    LOBYTE(v82) = sub_100104AE8(v82, (uint64_t)v40, v105, (uint64_t)v102, v106);

    if ((v82 & 1) == 0)
    {
      v84 = v45;
      v85 = v103;
      v86 = v97(v103, v96, v13);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed starting feedback from accessory", v89, 2u);
        v90 = v89;
        v40 = v101;
        swift_slowDealloc(v90, -1, -1);
      }

      v81(v85, v13);
      *v12 = 0xD000000000000027;
      v12[1] = 0x80000001001FF890;
      v61 = v108;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v108 + 104))(v12, enum case for Errors.UnexpectedError(_:), v8);
      v91 = v107;
      (*(void (**)(char *, _QWORD *, uint64_t))(v61 + 16))(v107, v12, v8);
      v92 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v64 = swift_allocError(v8, v92, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v93, v91, v8);
      v94 = (void *)_convertErrorToNSError(_:)(v64);
      (*(void (**)(uint64_t, _QWORD, void *))(v109 + 16))(v109, 0, v94);

      goto LABEL_27;
    }
  }
  (*(void (**)(uint64_t, void *, _QWORD))(v109 + 16))(v109, v41, 0);

}

void sub_100108048(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  id v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  BOOL v61;
  id v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  int v80;
  uint64_t v81;
  int v82;
  id v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v86 = a2;
  v84 = a1;
  v2 = type metadata accessor for Errors(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v85 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v81 - v6;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v81 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v81 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v81 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v81 - v22;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v43 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v23, v43, v8);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Client doesn't have camera TCC, rejecting XPC message", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v23, v8);
    *(_QWORD *)v7 = 0xD000000000000012;
    *((_QWORD *)v7 + 1) = 0x80000001001FF590;
    v48 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  v25 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v24), "currentConnection");
  if (!v25)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v49 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v21, v49, v8);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed fetching current NSXPCConnection, cannot construct client", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
    *(_QWORD *)v7 = 0xD000000000000017;
    *((_QWORD *)v7 + 1) = 0x80000001001FDAB0;
    v48 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_24:
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v7, *v48, v2);
    v54 = v85;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v85, v7, v2);
    v55 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v40 = swift_allocError(v2, v55, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v56, v54, v2);
    v42 = (void *)_convertErrorToNSError(_:)(v40);
    (*(void (**)(uint64_t, _QWORD, void *))(v86 + 16))(v86, 0, v42);
LABEL_25:

LABEL_26:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    swift_errorRelease(v40);
    return;
  }
  v26 = v25;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v83 = v26;
  v27 = sub_10016D5D0(v26);
  if (!v28)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v57 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v57, v8);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    v61 = os_log_type_enabled(v59, v60);
    v62 = v83;
    if (v61)
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed fetching App ID from connection", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    *(_QWORD *)v7 = 0xD000000000000026;
    *((_QWORD *)v7 + 1) = 0x80000001001FDAD0;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v7, enum case for Errors.NotFound(_:), v2);
    v64 = v85;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v85, v7, v2);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v40 = swift_allocError(v2, v65, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v66, v64, v2);
    v67 = (void *)_convertErrorToNSError(_:)(v40);
    (*(void (**)(uint64_t, _QWORD, void *))(v86 + 16))(v86, 0, v67);

    goto LABEL_26;
  }
  v29 = v27;
  v30 = v28;
  if (v27 == 0xD000000000000018 && v28 == (void (*)(_QWORD, _QWORD))0x80000001001FF850
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0xD000000000000018, 0x80000001001FF850, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v30);
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v31 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v31, v8);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = v83;
    if (v35)
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Invalid client, can't disable tracking from self", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    strcpy(v7, "invalid client");
    v7[15] = -18;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v7, enum case for Errors.InvalidParameter(_:), v2);
    v38 = v85;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v85, v7, v2);
    v39 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v40 = swift_allocError(v2, v39, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v41, v38, v2);
    v42 = (void *)_convertErrorToNSError(_:)(v40);
    (*(void (**)(uint64_t, _QWORD, void *))(v86 + 16))(v86, 0, v42);

    goto LABEL_25;
  }
  v68 = v29;
  if ((v84 & 1) != 0)
    v69 = 20047;
  else
    v69 = 4605519;
  if ((v84 & 1) != 0)
    v70 = 0xE200000000000000;
  else
    v70 = 0xE300000000000000;
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v71 = sub_10008EA50(v8, (uint64_t)qword_10026DE40);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v71, v8);
  swift_bridgeObjectRetain_n(v30, 2);
  swift_bridgeObjectRetain(v70);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    v76 = swift_slowAlloc(22, -1);
    v81 = v69;
    v77 = v76;
    v85 = (char *)swift_slowAlloc(64, -1);
    v88 = v85;
    *(_DWORD *)v77 = 136315394;
    v82 = v75;
    swift_bridgeObjectRetain(v30);
    v87 = sub_1000906BC(v68, (unint64_t)v30, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v77 + 4, v77 + 12);
    swift_bridgeObjectRelease_n(v30, 3);
    *(_WORD *)(v77 + 12) = 2080;
    swift_bridgeObjectRetain(v70);
    v87 = sub_1000906BC(v81, v70, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v77 + 14, v77 + 22);
    swift_bridgeObjectRelease_n(v70, 3);
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v82, "Client %s requested set system tracking %s", (uint8_t *)v77, 0x16u);
    v78 = v85;
    swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v70, 2);
    swift_bridgeObjectRelease_n(v30, 2);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v79 = v83;
  v80 = objc_msgSend(v83, "processIdentifier");
  sub_100167900(v68, v30, v84 & 1, v80);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v86 + 16))(v86, 1, 0);

}

void sub_100108A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v74 = a2;
  v3 = type metadata accessor for Errors(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v73 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (uint8_t **)((char *)&v68 - v7);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v68 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v68 - v20;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v30 = v4;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v31 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v21, v31, v9);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Client doesn't have camera TCC, rejecting XPC message", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    *v8 = 0xD000000000000012;
    v8[1] = 0x80000001001FF590;
    v36 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  v23 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v22), "currentConnection");
  if (!v23)
  {
    v30 = v4;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v37 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v19, v37, v9);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed fetching current NSXPCConnection, cannot construct client", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
    *v8 = 0xD000000000000017;
    v8[1] = 0x80000001001FDAB0;
    v36 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v30 + 104))(v8, *v36, v3);
    v42 = v73;
    (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 16))(v73, v8, v3);
    v43 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v44 = swift_allocError(v3, v43, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v45, v42, v3);
    v46 = (void *)_convertErrorToNSError(_:)(v44);
    (*(void (**)(uint64_t, _QWORD, void *))(v74 + 16))(v74, 0, v46);

    (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v8, v3);
    goto LABEL_31;
  }
  v24 = v23;
  v71 = v4;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v25 = qword_100275638;
  v72 = v24;
  v26 = sub_10016D5D0(v24);
  if (v27)
  {
    v28 = v26;
    v29 = v27;
    v77 = 0;
    swift_bridgeObjectRetain(v27);
    sub_1001758A4(v28, v29, v25, v28, v29, a1, (uint64_t)&v77);
    swift_bridgeObjectRelease(v29);
    if (v77)
    {
      swift_bridgeObjectRelease(v29);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v74 + 16))(v74, 1, 0);

      return;
    }
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v57 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v57, v9);
    swift_bridgeObjectRetain(v29);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v76 = v70;
      v69 = v61;
      *(_DWORD *)v61 = 136315138;
      v68 = v61 + 4;
      swift_bridgeObjectRetain(v29);
      v75 = sub_1000906BC(v28, v29, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v68, v61 + 12);
      swift_bridgeObjectRelease_n(v29, 3);
      v62 = v69;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "No clients registered for config changes on %s", v69, 0xCu);
      v63 = v70;
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v29, 2);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    *v8 = 0xD000000000000014;
    v8[1] = 0x80000001001FF810;
    v52 = v71;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v71 + 104))(v8, enum case for Errors.UnexpectedError(_:), v3);
    v64 = v73;
    (*(void (**)(char *, _QWORD *, uint64_t))(v52 + 16))(v73, v8, v3);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v44 = swift_allocError(v3, v65, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v66, v64, v3);
    v67 = (void *)_convertErrorToNSError(_:)(v44);
    (*(void (**)(uint64_t, _QWORD, void *))(v74 + 16))(v74, 0, v67);

  }
  else
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v47 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v47, v9);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed fetching App ID from connection", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    *v8 = 0xD000000000000026;
    v8[1] = 0x80000001001FDAD0;
    v52 = v71;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v71 + 104))(v8, enum case for Errors.NotFound(_:), v3);
    v53 = v73;
    (*(void (**)(char *, _QWORD *, uint64_t))(v52 + 16))(v73, v8, v3);
    v54 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v44 = swift_allocError(v3, v54, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v55, v53, v3);
    v56 = (void *)_convertErrorToNSError(_:)(v44);
    (*(void (**)(uint64_t, _QWORD, void *))(v74 + 16))(v74, 0, v56);

  }
  (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v8, v3);
LABEL_31:
  swift_errorRelease(v44);
}

