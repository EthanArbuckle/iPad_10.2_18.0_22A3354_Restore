uint64_t sub_10018ECCC(uint64_t a1)
{
  return sub_10018ECE8(a1, (uint64_t)&unk_10023E190, (uint64_t)sub_10019F9C4, (uint64_t)&unk_10023E1A8);
}

uint64_t sub_10018ECE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v4 + qword_100270AE8);
  v15 = swift_allocObject(&unk_10023E168, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  v16 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = a3;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain(a1);
  v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v21 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  v22 = v29;
  swift_release(v15);
  return swift_release(v22);
}

void sub_10018EF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  Swift::Int v29;
  Swift::Int v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t Strong;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  BOOL v80;
  char *v81;
  uint64_t v82;
  char *v83;
  double v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  char *v118;
  id v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (**v142)(unint64_t, char *, uint64_t);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[24];
  uint64_t v147[3];
  _QWORD v148[3];
  char v149[8];
  char v150[8];
  uint64_t v151;

  v140 = a2;
  v2 = type metadata accessor for DockKitIDSMessageType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v126 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DockKitIDSMessage(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v127 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v139 - 8);
  v8 = __chkstk_darwin(v139);
  v131 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v130 = (char *)&v123 - v10;
  v11 = sub_10009061C(&qword_10026E6A0);
  v12 = __chkstk_darwin(v11);
  v132 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v134 = (uint64_t)&v123 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v123 - v16;
  v138 = sub_10009061C(&qword_10026E0A0);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  __chkstk_darwin(v19);
  v143 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for DockKitBoundingBox(0);
  v142 = *(void (***)(unint64_t, char *, uint64_t))(v144 - 8);
  v21 = __chkstk_darwin(v144);
  v23 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = dispatch thunk of TrackingSummaryInternal.subjects.getter(v21);
  v24 = dispatch thunk of TrackingSummaryInternal.subjects.getter(v141);
  v25 = v24;
  v133 = v17;
  if (v24 < 0 || (v24 & 0x4000000000000000) != 0)
    goto LABEL_47;
  v26 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v24);
  while (1)
  {
    v151 = v26;
    sub_10019BC58(&v151, sub_1001A8EA8, sub_10019C4E4);
    swift_bridgeObjectRelease(v25);
    v27 = v151;
    v28 = v151 < 0 || (v151 & 0x4000000000000000) != 0;
    v129 = v5;
    v128 = v6;
    v125 = v2;
    v124 = v3;
    if (!v28)
      break;
    swift_bridgeObjectRetain(v151);
    v58 = _CocoaArrayWrapper.endIndex.getter(v57);
    swift_release(v27);
    swift_bridgeObjectRetain(v27);
    v5 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_release(v27);
    if (v5 < 0)
    {
      __break(1u);
      swift_release(v151);
      __break(1u);
      return;
    }
    if (v58 >= 10)
      v60 = 10;
    else
      v60 = v58;
    if (v58 >= 0)
      v3 = v60;
    else
      v3 = 10;
    swift_bridgeObjectRetain(v27);
    v25 = _CocoaArrayWrapper.endIndex.getter(v61);
    swift_release(v27);
    if (v25 >= v3)
      goto LABEL_11;
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain(v25);
    v26 = (uint64_t)sub_1001BFFA4(v62);
    swift_bridgeObjectRelease(v25);
  }
  if (*(uint64_t *)(v151 + 16) >= 10)
    v3 = 10;
  else
    v3 = *(_QWORD *)(v151 + 16);
LABEL_11:
  if ((v27 & 0xC000000000000001) != 0 && v3)
  {
    type metadata accessor for TrackedSubjectInternal(0);
    v29 = 0;
    do
    {
      v30 = v29 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v29);
      v29 = v30;
    }
    while (v3 != v30);
  }
  if (v28)
  {
    v31 = swift_bridgeObjectRetain(v27);
    v32 = _CocoaArrayWrapper.subscript.getter(0, v3, v27, v31);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    swift_release_n(v27, 2);
    v27 = v32;
    if ((v38 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v36 = 0;
    v34 = v27 + 32;
    v38 = (2 * v3) | 1;
    if ((v38 & 1) == 0)
      goto LABEL_19;
  }
  v39 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v40 = swift_unknownObjectRetain_n(v27, 2);
  v41 = (_QWORD *)swift_dynamicCastClass(v40, v39);
  if (!v41)
  {
    swift_unknownObjectRelease(v27);
    v41 = _swiftEmptyArrayStorage;
  }
  v42 = v41[2];
  v43 = swift_release(v41);
  if (__OFSUB__(v38 >> 1, v36))
    goto LABEL_76;
  v43 = v27;
  if (v42 != (v38 >> 1) - v36)
    goto LABEL_77;
  v34 = swift_dynamicCastClass(v27, v39);
  if (!v34)
  {
    swift_unknownObjectRelease(v27);
    v34 = (uint64_t)_swiftEmptyArrayStorage;
  }
  while (1)
  {
    swift_unknownObjectRelease(v27);
    if (v34 < 0 || (v34 & 0x4000000000000000) != 0)
    {
      v38 = _CocoaArrayWrapper.endIndex.getter(v34);
      if (!v38)
      {
LABEL_49:
        swift_release(v34);
        v45 = _swiftEmptyArrayStorage;
        goto LABEL_50;
      }
    }
    else
    {
      v38 = *(_QWORD *)(v34 + 16);
      if (!v38)
        goto LABEL_49;
    }
    v151 = (uint64_t)_swiftEmptyArrayStorage;
    v27 = (uint64_t)&v151;
    v43 = sub_1001A5100(0, v38 & ~((uint64_t)v38 >> 63), 0);
    if ((v38 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_unknownObjectRelease(v43);
LABEL_19:
    v34 = (uint64_t)sub_1001BFE0C(v27, v34, v36, v38);
  }
  v44 = 0;
  v45 = (_QWORD *)v151;
  do
  {
    if ((v34 & 0xC000000000000001) != 0)
    {
      v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v34);
    }
    else
    {
      v46 = *(_QWORD *)(v34 + 8 * v44 + 32);
      swift_retain(v46);
    }
    v47 = dispatch thunk of TrackedSubjectInternal.rect.getter();
    v49 = v48;
    v51 = v50;
    v53 = v52;
    v54 = v143;
    dispatch thunk of TrackedSubjectInternal.identifier.getter();
    DockKitBoundingBox.init(_:id:)(v54, v47, v49, v51, v53);
    swift_release(v46);
    v151 = (uint64_t)v45;
    v56 = v45[2];
    v55 = v45[3];
    if (v56 >= v55 >> 1)
    {
      sub_1001A5100(v55 > 1, v56 + 1, 1);
      v45 = (_QWORD *)v151;
    }
    ++v44;
    v45[2] = v56 + 1;
    v142[4]((unint64_t)v45+ ((*((unsigned __int8 *)v142 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v142 + 80))+ (_QWORD)v142[9] * v56, v23, v144);
  }
  while (v38 != v44);
  swift_release(v34);
LABEL_50:
  v63 = v140 + 16;
  swift_beginAccess(v140 + 16, &v151, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v63);
  v65 = v141;
  if (!Strong)
  {
    swift_bridgeObjectRelease(v141);
    v74 = v45;
LABEL_57:
    swift_bridgeObjectRelease(v74);
    return;
  }
  v66 = (char *)Strong;
  v67 = Strong + qword_100270B00;
  swift_beginAccess(Strong + qword_100270B00, v150, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v67 + 16))
    goto LABEL_55;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v68 = qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  v69 = swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v149, 0, 0);
  v70 = v137;
  v71 = v136;
  v72 = v68;
  v73 = v138;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v137 + 16))(v136, v72, v138, v69);
  DKThreadSafe.wrappedValue.getter(v148, v73);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v73);
  if ((v148[0] & 1) != 0)
  {
LABEL_55:
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v45);

    return;
  }
  v75 = (uint64_t)&v66[qword_100270B10];
  swift_beginAccess(&v66[qword_100270B10], v148, 0, 0);
  v76 = (uint64_t)v133;
  sub_10019F9CC(v75, (uint64_t)v133);
  v77 = v135;
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  v79 = v139;
  if (v78(v76, 1, v139))
  {
    sub_10009B2C0(v76, &qword_10026E6A0);
    v80 = 0;
  }
  else
  {
    v81 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v130, v76, v79);
    v82 = sub_10009B2C0(v76, &qword_10026E6A0);
    v83 = v131;
    static Date.now.getter(v82);
    v84 = Date.distance(to:)(v83);
    v85 = *(void (**)(char *, uint64_t))(v77 + 8);
    v85(v83, v139);
    v85(v81, v139);
    v79 = v139;
    v80 = v84 > 0.1;
  }
  v86 = v134;
  sub_10019F9CC(v75, v134);
  v87 = v78(v86, 1, v79);
  v88 = sub_10009B2C0(v86, &qword_10026E6A0);
  if (v87 != 1 && !v80 && v45[2])
  {

    swift_bridgeObjectRelease(v45);
    v74 = (_QWORD *)v65;
    goto LABEL_57;
  }
  v89 = (uint64_t)v132;
  static Date.now.getter(v88);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v135 + 56))(v89, 0, 1, v139);
  swift_beginAccess(v75, v147, 33, 0);
  sub_10019FA14(v89, v75);
  swift_endAccess(v147);
  v90 = qword_100270B08;
  v91 = *(_QWORD *)&v66[qword_100270B08];
  *(_QWORD *)&v66[qword_100270B08] = v45;
  swift_bridgeObjectRelease(v91);
  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v92 = type metadata accessor for Logger(0);
  v93 = sub_10008EA50(v92, (uint64_t)qword_100270AB8);
  v94 = v66;
  swift_bridgeObjectRetain(v65);
  v96 = Logger.logObject.getter(v95);
  v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, (os_log_type_t)v97))
  {
    LODWORD(v139) = v97;
    v98 = swift_slowAlloc(32, -1);
    v138 = swift_slowAlloc(32, -1);
    v147[0] = v138;
    *(_DWORD *)v98 = 134218498;
    v99 = *(_QWORD *)(*(_QWORD *)&v66[v90] + 16);

    v145 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v98 + 4, v98 + 12);

    *(_WORD *)(v98 + 12) = 2048;
    v142 = (void (**)(unint64_t, char *, uint64_t))v94;
    v140 = v93;
    if ((unint64_t)v65 >> 62)
    {
      if (v65 < 0)
        v122 = v65;
      else
        v122 = v65 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v65);
      v100 = _CocoaArrayWrapper.endIndex.getter(v122);
      swift_bridgeObjectRelease(v65);
    }
    else
    {
      v100 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v65);
    v145 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease(v65);
    *(_WORD *)(v98 + 22) = 2080;
    v101 = *(_QWORD *)&v66[v90];
    swift_bridgeObjectRetain(v101);
    v103 = Array.description.getter(v102, v144);
    v104 = v90;
    v106 = v105;
    swift_bridgeObjectRelease(v101);
    v145 = sub_1000906BC(v103, v106, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v98 + 24, v98 + 32);
    v94 = (char *)v142;

    v107 = v106;
    v90 = v104;
    swift_bridgeObjectRelease(v107);
    _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v139, "Sending bounding box information %ld of %ld: %s", (uint8_t *)v98, 0x20u);
    v108 = v138;
    swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    swift_slowDealloc(v98, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v65, 2);
  }
  v109 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
  v110 = PropertyListEncoder.init()();
  v111 = *(_QWORD *)&v66[v90];
  v147[0] = v111;
  swift_bridgeObjectRetain(v111);
  v112 = sub_10009061C(&qword_100270C18);
  v113 = sub_10019F920();
  v114 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v147, v112, v113);
  v116 = v115;
  swift_release(v110);
  swift_bridgeObjectRelease(v111);
  v117 = *(void **)&v94[qword_100270AF0];
  if (v117)
  {
    v118 = v126;
    (*(void (**)(char *, _QWORD, uint64_t))(v124 + 104))(v126, enum case for DockKitIDSMessageType.objects(_:), v125);
    type metadata accessor for DockKitIDSClient(0);
    v119 = v117;
    v120 = v143;
    static DockKitIDSClient.DockKitBroadcastToken.getter();
    sub_10009B27C(v114, v116);
    v121 = v127;
    DockKitIDSMessage.init(type:token:payload:)(v118, v120, v114, v116);
    DKIDSMessagingCenter.send(_:)(v121);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v121, v129);
    sub_10009B2FC(v114, v116);

  }
  else
  {
    sub_10009B2FC(v114, v116);

  }
}

void sub_10018FE08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v3 = v2;
  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v6 = type metadata accessor for Logger(0);
  sub_10008EA50(v6, (uint64_t)qword_100270AB8);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v19[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    v17 = sub_1000906BC(a1, a2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Expiring client %s due to keep-alive timeout.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v12 = (uint64_t *)(v3 + qword_100270B00);
  swift_beginAccess(v3 + qword_100270B00, v19, 1, 0);
  v13 = *v12;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v13);
  v15 = sub_10019E9BC(v14, a1, a2);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(a2);
  v16 = *v12;
  *v12 = v15;
  swift_bridgeObjectRelease(v16);
  if (!*(_QWORD *)(*v12 + 16))
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015EF84();
  }
}

void sub_100190054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  id v15;
  _BYTE v17[24];

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v3 = v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  v4 = type metadata accessor for DockKitIDSMessageType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  v8 = type metadata accessor for DockKitIDSMessage(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  v12 = v0 + qword_100270B00;
  v13 = swift_beginAccess(v0 + qword_100270B00, v17, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v12 + 16))
  {
    v14 = *(void **)(v0 + qword_100270AF0);
    if (v14)
    {
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v7, enum case for DockKitIDSMessageType.keepAlive(_:), v4, v13);
      type metadata accessor for DockKitIDSClient(0);
      v15 = v14;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      DockKitIDSMessage.init(type:token:payload:)(v7, v3, 0, 0xF000000000000000);
      DKIDSMessagingCenter.send(_:)(v11);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    }
  }
}

void sub_100190394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  id v47;
  void *v48;
  void (*v49)(char *, uint64_t);
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_t v57;
  int v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v66 = a1;
  v65 = type metadata accessor for DockKitIDSMessageType(0);
  v67 = *(_QWORD *)(v65 - 8);
  v6 = __chkstk_darwin(v65);
  v64 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - v8;
  v10 = type metadata accessor for DockKitIDSMessage(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = __chkstk_darwin(v14);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v3;
  if (a3 && (v19 = *(void **)(v3 + qword_100270AF0)) != 0)
  {
    v61 = v4;
    v62 = v16;
    v60 = v15;
    v20 = v19;
    v21 = (void *)DKIDSMessagingCenter.service.getter();

    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v21, "deviceForFromID:", v22);

    if (v23)
    {
      v24 = v66;
      if (qword_10026BC10 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v25 = v60;
      v26 = sub_10008EA50(v60, (uint64_t)qword_100270AB8);
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v18, v26, v25);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, v10);
      v59 = v23;
      v27 = Logger.logObject.getter(v59);
      v58 = static os_log_type_t.debug.getter();
      v28 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
      if (os_log_type_enabled(v27, (os_log_type_t)v58))
      {
        v57 = v27;
        v29 = swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(64, -1);
        v56 = v30;
        v70 = v30;
        *(_DWORD *)v29 = 136315395;
        DockKitIDSMessage.type.getter(v30);
        v31 = sub_10018B044();
        v33 = v32;
        v34 = v9;
        v35 = v65;
        (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v65);
        v68 = sub_1000906BC(v31, v33, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease(v33);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        *(_WORD *)(v29 + 12) = 2081;
        v36 = v59;
        v37 = objc_msgSend(v59, "uniqueIDOverride");
        if (!v37)
          goto LABEL_44;
        v38 = v37;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v41 = v40;

        v68 = sub_1000906BC(v39, v41, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v29 + 14, v29 + 22);

        swift_bridgeObjectRelease(v41);
        v42 = v57;
        _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "Got IDS message %s from %{private}s", (uint8_t *)v29, 0x16u);
        v43 = v56;
        swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        (*(void (**)(char *, uint64_t))(v62 + 8))(v18, v60);
        v24 = v66;
        v44 = v64;
        v28 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

        v36 = v59;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v18, v25);
        v44 = v64;
        v35 = v65;
      }
      v47 = objc_msgSend(v36, v28[249]);
      if (v47)
      {
        v48 = v47;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
        v46 = v49;

        goto LABEL_15;
      }
      __break(1u);
LABEL_44:

      __break(1u);
      return;
    }
    v45 = 0;
    v46 = (void (*)(char *, uint64_t))0xE000000000000000;
  }
  else
  {
    v45 = 0;
    v46 = (void (*)(char *, uint64_t))0xE000000000000000;
  }
  v35 = v65;
  v24 = v66;
  v44 = v64;
LABEL_15:
  DockKitIDSMessage.type.getter(v15);
  v50 = (*(uint64_t (**)(char *, uint64_t))(v67 + 88))(v44, v35);
  if (v50 == enum case for DockKitIDSMessageType.register(_:))
  {
    sub_100190B38(v24, v45, v46);
LABEL_19:
    swift_bridgeObjectRelease(v46);
    return;
  }
  if (v50 == enum case for DockKitIDSMessageType.deRegister(_:))
  {
    sub_100191900(v24, v45, (uint64_t)v46);
    goto LABEL_19;
  }
  if (v50 == enum case for DockKitIDSMessageType.select(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100192A00();
  }
  else if (v50 == enum case for DockKitIDSMessageType.offset(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100196F18();
  }
  else if (v50 == enum case for DockKitIDSMessageType.region(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100193600();
  }
  else if (v50 == enum case for DockKitIDSMessageType.frame(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100196944();
  }
  else if (v50 == enum case for DockKitIDSMessageType.velocity(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_1001940F4();
  }
  else if (v50 == enum case for DockKitIDSMessageType.objects(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_1001985D0(v24);
  }
  else if (v50 == enum case for DockKitIDSMessageType.trajectory(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100195970();
  }
  else if (v50 == enum case for DockKitIDSMessageType.diagnostics(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_1001921A8(v24);
  }
  else if (v50 == enum case for DockKitIDSMessageType.systemTracking(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_100194F24();
  }
  else if (v50 == enum case for DockKitIDSMessageType.camera(_:))
  {
    swift_bridgeObjectRelease(v46);
    sub_10019743C();
  }
  else
  {
    if (v50 == enum case for DockKitIDSMessageType.keepAliveResp(_:))
    {
      sub_1001981E4(v24, v45, (uint64_t)v46);
      goto LABEL_19;
    }
    swift_bridgeObjectRelease(v46);
    v51 = type metadata accessor for DockKitIDSMessagingError(0);
    v52 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v51, v52, 0, 0);
    v54 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v53, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v51);
    swift_willThrow(v54);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v35);
  }
}

void sub_100190B38(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  os_log_t v50;
  char *v51;
  uint64_t (*isa)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  os_log_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(os_log_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  os_log_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  os_log_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  char *v122;
  id v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  char *v131;
  void (*v132)(char *, _QWORD, uint64_t);
  uint64_t v133;
  char *v134;
  char *v135;
  os_log_t v136;
  os_log_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  os_log_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148[3];
  _QWORD v149[4];
  uint64_t v150;
  uint64_t v151;

  v140 = a3;
  v143 = a2;
  v4 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v4);
  v138 = (uint64_t)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for DockKitIDSMessage(0);
  v142 = *(os_log_t *)(v144 - 8);
  v6 = __chkstk_darwin(v144);
  v139 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v136 = (os_log_t)((char *)&v127 - v9);
  v10 = __chkstk_darwin(v8);
  v135 = (char *)&v127 - v11;
  __chkstk_darwin(v10);
  v141 = (char *)&v127 - v12;
  v13 = type metadata accessor for UUID(0);
  v145 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v131 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v127 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v127 - v19;
  v21 = type metadata accessor for DockKitIDSMessageType(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v127 - v27;
  v147 = a1;
  DockKitIDSMessage.type.getter(v26);
  v132 = *(void (**)(char *, _QWORD, uint64_t))(v22 + 104);
  v132(v25, enum case for DockKitIDSMessageType.register(_:), v21);
  v29 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v149, v21, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(v148, v21, v29);
  v30 = v149[0];
  v31 = v148[0];
  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v25, v21);
  v133 = v21;
  v134 = v28;
  v33 = ((uint64_t (*)(char *, uint64_t))v32)(v28, v21);
  if (v30 != v31)
  {
    v39 = type metadata accessor for DockKitIDSMessagingError(0);
    v44 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v39, v44, 0, 0);
    v42 = v45;
    v43 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_5;
  }
  v34 = v147;
  DockKitIDSMessage.token.getter(v33);
  type metadata accessor for DockKitIDSClient(0);
  static DockKitIDSClient.DockKitBroadcastToken.getter();
  v35 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v18, v13, v35);
  v37 = *(void (**)(char *, uint64_t))(v145 + 8);
  v37(v18, v13);
  v145 = v13;
  v38 = ((uint64_t (*)(char *, uint64_t))v37)(v20, v13);
  if ((v36 & 1) != 0)
  {
    v39 = type metadata accessor for DockKitIDSMessagingError(0);
    v40 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v39, v40, 0, 0);
    v42 = v41;
    v43 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
LABEL_5:
    v46 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v42, *v43, v39);
    swift_willThrow(v46);
    return;
  }
  v130 = v37;
  v129 = v20;
  v47 = DockKitIDSMessage.payload.getter(v38);
  v49 = v48;
  sub_10009E3A0(v47, v48);
  v51 = v141;
  v50 = v142;
  isa = (uint64_t (*)(char *, uint64_t, uint64_t))v142[2].isa;
  v53 = v144;
  v54 = isa(v141, v34, v144);
  if (v49 >> 60 != 15)
  {
    DockKitIDSMessage.payload.getter(v54);
    if (v57 >> 60 != 15)
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x1001918ECLL);
  }
  v55 = (void (*)(char *, uint64_t))v50[1].isa;
  v55(v51, v53);
  LODWORD(v141) = 0;
  v56 = (unint64_t)v140;
  v58 = (uint64_t *)(v146 + qword_100270B00);
  swift_beginAccess(v146 + qword_100270B00, v149, 1, 0);
  v59 = *v58;
  __chkstk_darwin(v60);
  *(&v127 - 2) = v34;
  swift_bridgeObjectRetain(v59);
  v61 = v138;
  v62 = v137;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019B304, v59, v138);
  v142 = v62;
  swift_bridgeObjectRelease(v59);
  v63 = sub_10009061C(&qword_100270B90);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v61, 1, v63);
  sub_10009B2C0(v61, &qword_100270B80);
  v140 = v55;
  if (v64 == 1)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v65 = type metadata accessor for Logger(0);
    sub_10008EA50(v65, (uint64_t)qword_100270AB8);
    v66 = v136;
    isa((char *)v136, v34, v53);
    v67 = swift_bridgeObjectRetain_n(v56, 2);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    v70 = v69;
    if (os_log_type_enabled(v68, v69))
    {
      v71 = swift_slowAlloc(22, -1);
      v72 = swift_slowAlloc(64, -1);
      v138 = v72;
      v148[0] = v72;
      *(_DWORD *)v71 = 136315394;
      v128 = v71 + 4;
      v73 = v129;
      v137 = v68;
      DockKitIDSMessage.token.getter(v72);
      v74 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v135) = v70;
      v75 = (void (*)(os_log_t, uint64_t))v55;
      v76 = v145;
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v145, v74);
      v79 = v78;
      v130(v73, v76);
      v150 = sub_1000906BC(v77, v79, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v128, v71 + 12);
      swift_bridgeObjectRelease(v79);
      v75(v136, v53);
      *(_WORD *)(v71 + 12) = 2080;
      swift_bridgeObjectRetain(v56);
      v80 = v143;
      v150 = sub_1000906BC(v143, v56, v148);
      v81 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease_n(v56, 3);
      v82 = v137;
      _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v135, "Registering new client %s for device %s", (uint8_t *)v71, 0x16u);
      v83 = v138;
      swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      goto LABEL_22;
    }
    v55((char *)v66, v53);

  }
  else
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v84 = type metadata accessor for Logger(0);
    sub_10008EA50(v84, (uint64_t)qword_100270AB8);
    v85 = v135;
    isa(v135, v34, v53);
    v86 = swift_bridgeObjectRetain_n(v56, 2);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter(v87);
    v89 = v88;
    if (os_log_type_enabled(v87, v88))
    {
      v90 = swift_slowAlloc(22, -1);
      v91 = swift_slowAlloc(64, -1);
      v138 = v91;
      v148[0] = v91;
      *(_DWORD *)v90 = 136315394;
      v128 = v90 + 4;
      LODWORD(v137) = v89;
      v92 = v129;
      v136 = v87;
      DockKitIDSMessage.token.getter(v91);
      v93 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v94 = v55;
      v95 = v145;
      v96 = dispatch thunk of CustomStringConvertible.description.getter(v145, v93);
      v98 = v97;
      v130(v92, v95);
      v150 = sub_1000906BC(v96, v98, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v128, v90 + 12);
      swift_bridgeObjectRelease(v98);
      v94(v135, v53);
      *(_WORD *)(v90 + 12) = 2080;
      swift_bridgeObjectRetain(v56);
      v81 = v143;
      v150 = sub_1000906BC(v143, v56, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v90 + 14, v90 + 22);
      swift_bridgeObjectRelease_n(v56, 3);
      v99 = v136;
      _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v137, "Re-registering client %s for device %s", (uint8_t *)v90, 0x16u);
      v100 = v138;
      swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v90, -1, -1);

      goto LABEL_22;
    }
    v55(v85, v53);

  }
  swift_bridgeObjectRelease_n(v56, 2);
  v81 = v143;
LABEL_22:
  v101 = v139;
  v102 = (void (*)(uint64_t, uint64_t))v130;
  if ((_DWORD)v141)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v103 = type metadata accessor for Logger(0);
    v104 = sub_10008EA50(v103, (uint64_t)qword_100270AB8);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v107 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Treating this as an initial registration and clearing state.", v107, 2u);
      swift_slowDealloc(v107, -1, -1);
    }

    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015EF84();
  }
  v108 = *v58;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v108);
  v109 = v142;
  v111 = sub_10019E9BC(v110, v81, v56);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease(v56);
  v112 = *v58;
  *v58 = v111;
  swift_bridgeObjectRelease(v112);
  swift_bridgeObjectRetain(v56);
  v113 = (uint64_t)v129;
  DockKitIDSMessage.token.getter(v114);
  swift_beginAccess(v58, v148, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v58);
  v150 = *v58;
  *v58 = 0x8000000000000000;
  sub_10019D604(v81, v56, v113, isUniquelyReferenced_nonNull_native);
  v117 = v116;
  v118 = *v58;
  *v58 = v150;
  swift_bridgeObjectRelease(v118);
  v119 = v145;
  v102(v113, v145);
  swift_endAccess(v148);
  v120 = swift_bridgeObjectRelease(v117);
  v121 = *(void **)(v146 + qword_100270AF0);
  if (v121)
  {
    v122 = v134;
    v132(v134, enum case for DockKitIDSMessageType.ack(_:), v133);
    v123 = v121;
    DockKitIDSMessage.token.getter(v123);
    DockKitIDSMessage.init(type:token:payload:)(v122, v113, 0, 0xF000000000000000);
    DKIDSMessagingCenter.send(_:)(v101);
    if (v109)
    {
      v140(v101, v144);

      return;
    }
    v140(v101, v144);

    v102 = (void (*)(uint64_t, uint64_t))v130;
  }
  v124 = (unint64_t)v131;
  DockKitIDSMessage.token.getter(v120);
  v125 = v146;
  sub_100198E28(v124);
  v102(v124, v119);
  if (!v109)
  {
    v126 = *(_QWORD *)(v125 + qword_100270B18);
    swift_retain(v126);
    dispatch thunk of DKIDSKeepAlive.monitor(from:)(v143, v56);
    swift_release(v126);
  }
}

void sub_100191900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t *v79;
  uint64_t v80;
  os_log_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  id v87;
  char *v88;
  uint64_t v89;
  os_log_t v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106[3];
  _QWORD v107[4];
  uint64_t v108;
  uint64_t v109;

  v96 = a2;
  v97 = a3;
  v98 = type metadata accessor for DockKitIDSMessage(0);
  v95 = *(_QWORD *)(v98 - 8);
  v4 = __chkstk_darwin(v98);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v99 = (char *)&v89 - v6;
  v7 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v7);
  v101 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v103 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v100 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v89 - v13;
  __chkstk_darwin(v12);
  v105 = (char *)&v89 - v15;
  v16 = type metadata accessor for DockKitIDSMessageType(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v89 - v22;
  v24 = a1;
  DockKitIDSMessage.type.getter(v21);
  v92 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
  v92(v20, enum case for DockKitIDSMessageType.deRegister(_:), v16);
  v25 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v107, v16, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(v106, v16, v25);
  v26 = v107[0];
  v27 = v106[0];
  v28 = *(void (**)(char *, uint64_t))(v17 + 8);
  v28(v20, v16);
  v93 = v23;
  v91 = v16;
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v23, v16);
  if (v26 != v27)
  {
    v35 = type metadata accessor for DockKitIDSMessagingError(0);
    v40 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v35, v40, 0, 0);
    v38 = v41;
    v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_5;
  }
  v30 = v105;
  DockKitIDSMessage.token.getter(v29);
  type metadata accessor for DockKitIDSClient(0);
  static DockKitIDSClient.DockKitBroadcastToken.getter();
  v31 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v14, v9, v31);
  v33 = *(void (**)(char *, uint64_t))(v103 + 8);
  v33(v14, v9);
  v34 = ((uint64_t (*)(char *, uint64_t))v33)(v30, v9);
  if ((v32 & 1) != 0)
  {
    v35 = type metadata accessor for DockKitIDSMessagingError(0);
    v36 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v35, v36, 0, 0);
    v38 = v37;
    v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
LABEL_5:
    v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, *v39, v35);
LABEL_6:
    swift_willThrow(v42);
    return;
  }
  v43 = v24;
  v44 = v9;
  v45 = v100;
  DockKitIDSMessage.token.getter(v34);
  v46 = (uint64_t *)&v104[qword_100270B00];
  swift_beginAccess(&v104[qword_100270B00], v107, 0, 0);
  v103 = v43;
  v47 = *v46;
  __chkstk_darwin(v48);
  *(&v89 - 2) = (uint64_t)v45;
  swift_bridgeObjectRetain(v47);
  v49 = v101;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019EB7C, v47, v101);
  swift_bridgeObjectRelease(v47);
  v50 = v103;
  v51 = sub_10009061C(&qword_100270B90);
  v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v49, 1, v51);
  sub_10009B2C0(v49, &qword_100270B80);
  v53 = v45;
  v54 = v44;
  v55 = ((uint64_t (*)(char *, uint64_t))v33)(v53, v44);
  v56 = (uint64_t)v105;
  DockKitIDSMessage.token.getter(v55);
  if (v52 == 1)
  {
    v57 = type metadata accessor for DockKitIDSMessagingError(0);
    v58 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v59 = swift_allocError(v57, v58, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v60, enum case for DockKitIDSMessagingError.notRegistered(_:), v57);
    sub_100198AE8(v56, v59);
    v33((char *)v56, v54);
    v42 = swift_errorRelease(v59);
    goto LABEL_6;
  }
  swift_beginAccess(v46, v106, 33, 0);
  sub_1001B412C(v56);
  v62 = v61;
  v101 = v54;
  v33((char *)v56, v54);
  swift_endAccess(v106);
  swift_bridgeObjectRelease(v62);
  v102 = v46;
  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v63 = type metadata accessor for Logger(0);
  sub_10008EA50(v63, (uint64_t)qword_100270AB8);
  v64 = v95;
  v66 = v98;
  v65 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v99, v50, v98);
  v67 = v104;
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.default.getter(v68);
  LODWORD(v104) = v69;
  if (os_log_type_enabled(v68, v69))
  {
    v70 = swift_slowAlloc(22, -1);
    v71 = swift_slowAlloc(32, -1);
    v100 = (char *)v71;
    v106[0] = v71;
    *(_DWORD *)v70 = 136315394;
    v89 = v70 + 4;
    v90 = v68;
    DockKitIDSMessage.token.getter(v71);
    v72 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v73 = v101;
    v74 = dispatch thunk of CustomStringConvertible.description.getter(v101, v72);
    v75 = v64;
    v77 = v76;
    v33(v105, v73);
    v108 = sub_1000906BC(v74, v77, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v89, v70 + 12);
    swift_bridgeObjectRelease(v77);
    v78 = *(void (**)(char *, uint64_t))(v75 + 8);
    v78(v99, v66);
    *(_WORD *)(v70 + 12) = 2048;
    v79 = v102;
    v80 = *(_QWORD *)(*v102 + 16);

    v108 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v70 + 14, v70 + 22);

    v81 = v90;
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v104, "De-registering client %s. %ld client(s) remaining.", (uint8_t *)v70, 0x16u);
    v82 = v100;
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    v83 = v70;
    v56 = (uint64_t)v105;
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

    v78 = *(void (**)(char *, uint64_t))(v64 + 8);
    v78(v65, v66);

    v79 = v102;
  }
  if (!*(_QWORD *)(*v79 + 16))
  {
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015EF84();
  }
  v84 = *(_QWORD *)&v67[qword_100270B18];
  swift_retain(v84);
  dispatch thunk of DKIDSKeepAlive.expire(from:fail:)(v96, v97, 0);
  swift_release(v84);
  v85 = *(void **)&v67[qword_100270AF0];
  if (v85)
  {
    v86 = v93;
    v92(v93, enum case for DockKitIDSMessageType.ack(_:), v91);
    v87 = v85;
    DockKitIDSMessage.token.getter(v87);
    v88 = v94;
    DockKitIDSMessage.init(type:token:payload:)(v86, v56, 0, 0xF000000000000000);
    DKIDSMessagingCenter.send(_:)(v88);
    v78(v88, v66);

  }
}

void sub_1001921A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  void *v50;
  os_unfair_lock_s *v51;
  char *v52;
  char *v53;
  void *v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _QWORD v88[5];
  char v89[24];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char v93[32];
  uint64_t v94;

  v2 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v2);
  v82 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v4);
  v84 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v85 - 8);
  v6 = __chkstk_darwin(v85);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v82 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v82 - v12;
  v14 = type metadata accessor for DockKitIDSMessageType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v82 - v20;
  v94 = a1;
  DockKitIDSMessage.type.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DockKitIDSMessageType.diagnostics(_:), v14);
  v22 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v90, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(v88, v14, v22);
  v23 = v90;
  v24 = v88[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 != v24)
  {
    v41 = type metadata accessor for DockKitIDSMessagingError(0);
    v42 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v41, v42, 0, 0);
    v44 = v43;
    v45 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v44, *v45, v41);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter(v26);
  v27 = (uint64_t *)&v87[qword_100270B00];
  swift_beginAccess(&v87[qword_100270B00], v93, 0, 0);
  v28 = *v27;
  __chkstk_darwin(v29);
  *(&v82 - 2) = v13;
  swift_bridgeObjectRetain(v28);
  v30 = (uint64_t)v84;
  v31 = v86;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v28, (uint64_t)v84);
  swift_bridgeObjectRelease(v28);
  v32 = sub_10009061C(&qword_100270B90);
  LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v30, 1, v32);
  sub_10009B2C0(v30, &qword_100270B80);
  v33 = *(uint64_t (**)(char *, uint64_t))(v83 + 8);
  v34 = v85;
  v35 = v33(v13, v85);
  if ((_DWORD)v28 == 1)
  {
    DockKitIDSMessage.token.getter(v35);
    v36 = type metadata accessor for DockKitIDSMessagingError(0);
    v37 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v38 = swift_allocError(v36, v37, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v39, enum case for DockKitIDSMessagingError.notRegistered(_:), v36);
    sub_100198AE8((uint64_t)v11, v38);
    v33(v11, v34);
    v40 = swift_errorRelease(v38);
LABEL_6:
    swift_willThrow(v40);
    return;
  }
  v94 = v31;
  v46 = v34;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v47 = qword_100275638;
  v48 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v49 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v49);
  os_unfair_lock_lock(v49 + 4);
  swift_release(v49);
  v50 = *(void **)(v47 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v51 = *(os_unfair_lock_s **)(v47 + v48);
  v52 = v50;
  swift_retain(v51);
  os_unfair_lock_unlock(v51 + 4);
  swift_release(v51);
  if (!v50)
  {
    v41 = type metadata accessor for DockKitIDSMessagingError(0);
    v63 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v41, v63, 0, 0);
    v44 = v64;
    v45 = (unsigned int *)&enum case for DockKitIDSMessagingError.noPairedDevice(_:);
    goto LABEL_5;
  }
  v53 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v87 = v52;
  v54 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v53);
  v86 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v55 = *(id *)&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v56 = &v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v89, 0, 0);
  v57 = *(_QWORD *)v56;
  v58 = *(_QWORD *)(*(_QWORD *)v56 + 16);
  if (v58)
  {
    v84 = v53;
    v59 = v57 + 32;
    v83 = v57;
    swift_bridgeObjectRetain(v57);
    while (1)
    {
      sub_10009AFF4(v59, (uint64_t)v88);
      v60 = *(id *)(*sub_10009B038(v88, v88[3]) + 24);
      DockCoreInfo.identifier.getter(v60);

      DockCoreInfo.identifier.getter(v61);
      LOBYTE(v60) = static UUID.== infix(_:_:)(v11, v8);
      v33(v8, v46);
      v33(v11, v46);
      if ((v60 & 1) != 0)
        break;
      sub_100090E88(v88);
      v59 += 40;
      if (!--v58)
      {
        swift_bridgeObjectRelease(v83);
        v53 = v84;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(v83);
    v65 = v84;
    v66 = *(id *)&v84[v86];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v88, (uint64_t)&v90);
    sub_100090E88(v88);

  }
  else
  {
LABEL_15:
    v62 = *(id *)&v53[v86];
    OS_dispatch_semaphore.signal()();

    v92 = 0;
    v90 = 0u;
    v91 = 0u;

  }
  v67 = v87;
  if (!*((_QWORD *)&v91 + 1))
  {
    sub_10009B2C0((uint64_t)&v90, (uint64_t *)&unk_10026DF40);
    goto LABEL_27;
  }
  v68 = sub_10009061C(&qword_10026C2E0);
  v69 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v88, &v90, v68, v69, 6) & 1) == 0)
  {
LABEL_27:
    v78 = type metadata accessor for DockKitIDSMessagingError(0);
    v79 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v78, v79, 0, 0);
    v81 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v78 - 8) + 104))(v80, enum case for DockKitIDSMessagingError.noPairedDevice(_:), v78);
    swift_willThrow(v81);
    goto LABEL_28;
  }
  v70 = v88[0];
  if (*(_BYTE *)(v88[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2
    || (v71 = *(char **)(v88[0] + 16)) == 0
    || (v72 = *(void **)&v71[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) == 0)
  {
    swift_release(v88[0]);
    goto LABEL_27;
  }
  v73 = v71;
  if (objc_msgSend(v72, "state") != (id)2)
  {
    swift_release(v70);

    goto LABEL_27;
  }
  sub_10009E60C();
  v74 = type metadata accessor for TaskPriority(0);
  v75 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v82, 1, 1, v74);
  v76 = (_QWORD *)swift_allocObject(&unk_10023E000, 40, 7);
  v76[2] = 0;
  v76[3] = 0;
  v76[4] = v70;
  swift_retain(v70);
  v77 = sub_10018AB1C(v75, (uint64_t)&unk_100270BA0, (uint64_t)v76);
  swift_release(v70);

  swift_release(v77);
LABEL_28:

}

void sub_100192A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  os_unfair_lock_s *v88;
  _QWORD *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  os_unfair_lock_s *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  double aBlock;
  double v129[4];
  uint64_t v130;
  _QWORD v131[4];
  _QWORD *v132;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v121 = *(_QWORD *)(v0 - 8);
  v122 = v0;
  __chkstk_darwin(v0);
  v120 = (char *)&v110 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS(0);
  v118 = *(_QWORD *)(v2 - 8);
  v119 = v2;
  __chkstk_darwin(v2);
  v117 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for DispatchTime(0);
  v114 = *(_QWORD *)(v116 - 8);
  v4 = __chkstk_darwin(v116);
  v113 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v115 = (char *)&v110 - v6;
  v112 = type metadata accessor for DispatchQoS.QoSClass(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v8);
  v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v124 = *(_QWORD *)(v11 - 8);
  v125 = v11;
  v12 = __chkstk_darwin(v11);
  v123 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v110 - v14;
  v16 = type metadata accessor for DockKitIDSMessageType(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v110 - v22;
  DockKitIDSMessage.type.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for DockKitIDSMessageType.select(_:), v16);
  v24 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v16, v24);
  dispatch thunk of RawRepresentable.rawValue.getter(v131, v16, v24);
  v25 = aBlock;
  v26 = v131[0];
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  v28 = ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
  if (*(_QWORD *)&v25 != v26)
  {
    v43 = type metadata accessor for DockKitIDSMessagingError(0);
    v44 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v43, v44, 0, 0);
    v46 = v45;
    v47 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_7:
    v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v46, *v47, v43);
    goto LABEL_8;
  }
  DockKitIDSMessage.token.getter(v28);
  v29 = (uint64_t *)((char *)v127 + qword_100270B00);
  swift_beginAccess((char *)v127 + qword_100270B00, v131, 0, 0);
  v30 = *v29;
  __chkstk_darwin(v31);
  *(&v110 - 2) = v15;
  swift_bridgeObjectRetain(v30);
  v32 = v126;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v30, (uint64_t)v10);
  swift_bridgeObjectRelease(v30);
  v33 = sub_10009061C(&qword_100270B90);
  LODWORD(v30) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v10, 1, v33);
  sub_10009B2C0((uint64_t)v10, &qword_100270B80);
  v34 = v125;
  v35 = *(uint64_t (**)(char *, uint64_t))(v124 + 8);
  v36 = v35(v15, v125);
  if ((_DWORD)v30 == 1)
  {
    v37 = (uint64_t)v123;
    DockKitIDSMessage.token.getter(v36);
    v38 = type metadata accessor for DockKitIDSMessagingError(0);
    v39 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v40 = swift_allocError(v38, v39, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v41, enum case for DockKitIDSMessagingError.notRegistered(_:), v38);
    sub_100198AE8(v37, v40);
    v35((char *)v37, v34);
    v42 = swift_errorRelease(v40);
LABEL_8:
    swift_willThrow(v42);
    return;
  }
  v48 = DockKitIDSMessage.payload.getter(v36);
  v50 = v49;
  sub_10009E3A0(v48, v49);
  if (v50 >> 60 == 15)
  {
LABEL_6:
    v43 = type metadata accessor for DockKitIDSMessagingError(0);
    v51 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v43, v51, 0, 0);
    v46 = v52;
    v47 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_7;
  }
  v53 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = PropertyListDecoder.init()();
  v55 = DockKitIDSMessage.payload.getter(v54);
  if (v56 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  v57 = v55;
  v58 = v56;
  type metadata accessor for CGPoint(0);
  v60 = v59;
  v61 = sub_100090E1C(&qword_100270BA8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&aBlock, v60, v57, v58, v60, v61);
  sub_10009E3A0(v57, v58);
  swift_release(v54);
  if (!v32)
  {
    v63 = aBlock;
    v62 = v129[0];
    if (aBlock == CGPointZero.x && v129[0] == CGPointZero.y)
      goto LABEL_6;
    if (aBlock < 0.0 || aBlock > 1.0 || v129[0] < 0.0 || v129[0] > 1.0)
    {
      if (qword_10026BC10 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v70 = type metadata accessor for Logger(0);
      v71 = sub_10008EA50(v70, (uint64_t)qword_100270AB8);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = (_QWORD *)swift_slowAlloc(32, -1);
        v132 = v75;
        *(_DWORD *)v74 = 136315138;
        aBlock = v63;
        v129[0] = v62;
        v76 = String.init<A>(describing:)(&aBlock, v60);
        v78 = v77;
        aBlock = COERCE_DOUBLE(sub_1000906BC(v76, v77, (uint64_t *)&v132));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v129, v74 + 4, v74 + 12);
        swift_bridgeObjectRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Subject selection point not normalized: %s", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);
      }

      v43 = type metadata accessor for DockKitIDSMessagingError(0);
      v79 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
      swift_allocError(v43, v79, 0, 0);
      v46 = v80;
      v47 = (unsigned int *)&enum case for DockKitIDSMessagingError.argumentNotNormalized(_:);
      goto LABEL_7;
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015D34C();
    if (v66)
    {
      v67 = v64;
      v68 = v65;
      v69 = v66;
      swift_bridgeObjectRetain(v66);
      sub_10019EC40(v68, v69, v67, v68, v69, v63, v62);
      swift_bridgeObjectRelease(v69);
      v86 = qword_100275638;
      v87 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v88 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_bridgeObjectRetain(v69);
      swift_retain(v88);
      os_unfair_lock_lock(v88 + 4);
      swift_release(v88);
      v89 = (_QWORD *)(v86 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
      swift_beginAccess(v86 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions, &aBlock, 33, 0);
      swift_bridgeObjectRetain(v69);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
      v132 = (_QWORD *)*v89;
      *v89 = 0x8000000000000000;
      sub_1001BB098((uint64_t)sub_10018AC50, 0, v68, v69, isUniquelyReferenced_nonNull_native);
      v91 = *v89;
      *v89 = v132;
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v91);
      swift_endAccess(&aBlock);
      v92 = *(os_unfair_lock_s **)(v86 + v87);
      swift_retain(v92);
      os_unfair_lock_unlock(v92 + 4);
      swift_bridgeObjectRelease(v69);
      swift_release(v92);
      sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
      v93 = v111;
      v94 = v110;
      v95 = v112;
      (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v110, enum case for DispatchQoS.QoSClass.default(_:), v112);
      v126 = static OS_dispatch_queue.global(qos:)(v94);
      v96 = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v94, v95);
      v97 = v113;
      static DispatchTime.now()(v96);
      v98 = v115;
      + infix(_:_:)(v97, 1.0);
      v127 = *(void (**)(char *, uint64_t))(v114 + 8);
      v99 = v116;
      v127(v97, v116);
      v100 = swift_allocObject(&unk_10023E028, 40, 7);
      *(_DWORD *)(v100 + 16) = v67;
      *(_QWORD *)(v100 + 24) = v68;
      *(_QWORD *)(v100 + 32) = v69;
      *(_QWORD *)&v129[3] = sub_10019EED8;
      v130 = v100;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      *(_QWORD *)&v129[0] = 1107296256;
      *(_QWORD *)&v129[1] = sub_10012357C;
      *(_QWORD *)&v129[2] = &unk_10023E040;
      v101 = _Block_copy(&aBlock);
      v102 = v117;
      static DispatchQoS.unspecified.getter(v101);
      v132 = _swiftEmptyArrayStorage;
      v103 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v104 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v105 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
      v106 = v120;
      v107 = v104;
      v108 = v122;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v132, v107, v105, v122, v103);
      v109 = (void *)v126;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v98, v102, v106, v101);
      _Block_release(v101);

      (*(void (**)(char *, uint64_t))(v121 + 8))(v106, v108);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v102, v119);
      v127(v98, v99);
      swift_release(v130);
    }
    else
    {
      if (qword_10026BC10 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v81 = type metadata accessor for Logger(0);
      v82 = sub_10008EA50(v81, (uint64_t)qword_100270AB8);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "No foregrounded app available to select subject!", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

    }
  }
}

void sub_100193600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  os_unfair_lock_s *v80;
  _QWORD *v81;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  os_unfair_lock_s *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  double aBlock;
  uint64_t v121;
  double v122;
  double v123;
  uint64_t (*v124)();
  uint64_t v125;
  _QWORD v126[4];
  _QWORD *v127;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v113 = *(_QWORD *)(v0 - 8);
  v114 = v0;
  __chkstk_darwin(v0);
  v112 = (char *)&v102 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DispatchQoS(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for DispatchTime(0);
  v106 = *(_QWORD *)(v108 - 8);
  v3 = __chkstk_darwin(v108);
  v105 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v107 = (char *)&v102 - v5;
  v104 = type metadata accessor for DispatchQoS.QoSClass(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v7);
  v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v10 - 8);
  v117 = v10;
  v11 = __chkstk_darwin(v10);
  v115 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v102 - v13;
  v15 = type metadata accessor for DockKitIDSMessageType(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v102 - v21;
  DockKitIDSMessage.type.getter(v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for DockKitIDSMessageType.region(_:), v15);
  v23 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v15, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(v126, v15, v23);
  v24 = aBlock;
  v25 = v126[0];
  v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26(v19, v15);
  v27 = ((uint64_t (*)(char *, uint64_t))v26)(v22, v15);
  if (*(_QWORD *)&v24 != v25)
  {
    v42 = type metadata accessor for DockKitIDSMessagingError(0);
    v43 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v42, v43, 0, 0);
    v45 = v44;
    v46 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v45, *v46, v42);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter(v27);
  v28 = (uint64_t *)((char *)v119 + qword_100270B00);
  swift_beginAccess((char *)v119 + qword_100270B00, v126, 0, 0);
  v29 = *v28;
  __chkstk_darwin(v30);
  *(&v102 - 2) = v14;
  swift_bridgeObjectRetain(v29);
  v31 = v118;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v29, (uint64_t)v9);
  swift_bridgeObjectRelease(v29);
  v32 = sub_10009061C(&qword_100270B90);
  LODWORD(v29) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v9, 1, v32);
  sub_10009B2C0((uint64_t)v9, &qword_100270B80);
  v33 = v117;
  v34 = *(uint64_t (**)(char *, uint64_t))(v116 + 8);
  v35 = v34(v14, v117);
  if ((_DWORD)v29 == 1)
  {
    v36 = (uint64_t)v115;
    DockKitIDSMessage.token.getter(v35);
    v37 = type metadata accessor for DockKitIDSMessagingError(0);
    v38 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v39 = swift_allocError(v37, v38, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v40, enum case for DockKitIDSMessagingError.notRegistered(_:), v37);
    sub_100198AE8(v36, v39);
    v34((char *)v36, v33);
    v41 = swift_errorRelease(v39);
LABEL_6:
    swift_willThrow(v41);
    return;
  }
  v47 = DockKitIDSMessage.payload.getter(v35);
  v49 = v48;
  sub_10009E3A0(v47, v48);
  if (v49 >> 60 == 15)
  {
    v42 = type metadata accessor for DockKitIDSMessagingError(0);
    v50 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v42, v50, 0, 0);
    v45 = v51;
    v46 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  v52 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v53 = PropertyListDecoder.init()();
  v54 = DockKitIDSMessage.payload.getter(v53);
  if (v55 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  v56 = v54;
  v57 = v55;
  type metadata accessor for CGRect(0);
  v59 = v58;
  v60 = sub_100090E1C(&qword_100270BB0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&aBlock, v59, v56, v57, v59, v60);
  sub_10009E3A0(v56, v57);
  swift_release(v53);
  if (!v31)
  {
    v61 = aBlock;
    if (aBlock < 0.0
      || aBlock > 1.0
      || (v62 = *(double *)&v121, *(double *)&v121 < 0.0)
      || *(double *)&v121 > 1.0
      || (v63 = v122, aBlock + v122 > 1.0)
      || (v64 = v123, *(double *)&v121 + v123 > 1.0))
    {
      v42 = type metadata accessor for DockKitIDSMessagingError(0);
      v71 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
      swift_allocError(v42, v71, 0, 0);
      v45 = v72;
      v46 = (unsigned int *)&enum case for DockKitIDSMessagingError.argumentNotNormalized(_:);
      goto LABEL_5;
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015D34C();
    if (v67)
    {
      v68 = v65;
      v69 = v66;
      v70 = v67;
      swift_bridgeObjectRetain(v67);
      sub_10019EF24(v69, v70, v68, v69, v70, v61, v62, v63, v64);
      swift_bridgeObjectRelease(v70);
      v78 = qword_100275638;
      v79 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v80 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_bridgeObjectRetain(v70);
      swift_retain(v80);
      os_unfair_lock_lock(v80 + 4);
      swift_release(v80);
      v81 = (_QWORD *)(v78 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
      swift_beginAccess(v78 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions, &aBlock, 33, 0);
      swift_bridgeObjectRetain(v70);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v81);
      v127 = (_QWORD *)*v81;
      *v81 = 0x8000000000000000;
      sub_1001BB098((uint64_t)sub_10018AC7C, 0, v69, v70, isUniquelyReferenced_nonNull_native);
      v83 = *v81;
      *v81 = v127;
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v83);
      swift_endAccess(&aBlock);
      v84 = *(os_unfair_lock_s **)(v78 + v79);
      swift_retain(v84);
      os_unfair_lock_unlock(v84 + 4);
      swift_bridgeObjectRelease(v70);
      swift_release(v84);
      sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
      v85 = v103;
      v86 = v102;
      v87 = v104;
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, enum case for DispatchQoS.QoSClass.default(_:), v104);
      v118 = static OS_dispatch_queue.global(qos:)(v86);
      v88 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v87);
      v89 = v105;
      static DispatchTime.now()(v88);
      v90 = v107;
      + infix(_:_:)(v89, 1.0);
      v119 = *(void (**)(char *, uint64_t))(v106 + 8);
      v91 = v108;
      v119(v89, v108);
      v92 = swift_allocObject(&unk_10023E078, 40, 7);
      *(_DWORD *)(v92 + 16) = v68;
      *(_QWORD *)(v92 + 24) = v69;
      *(_QWORD *)(v92 + 32) = v70;
      v124 = sub_10019F1F8;
      v125 = v92;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v121 = 1107296256;
      v122 = COERCE_DOUBLE(sub_10012357C);
      v123 = COERCE_DOUBLE(&unk_10023E090);
      v93 = _Block_copy(&aBlock);
      v94 = v109;
      static DispatchQoS.unspecified.getter(v93);
      v127 = _swiftEmptyArrayStorage;
      v95 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v96 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v97 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
      v98 = v112;
      v99 = v96;
      v100 = v114;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v127, v99, v97, v114, v95);
      v101 = (void *)v118;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v90, v94, v98, v93);
      _Block_release(v93);

      (*(void (**)(char *, uint64_t))(v113 + 8))(v98, v100);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v94, v111);
      v119(v90, v91);
      swift_release(v125);
    }
    else
    {
      if (qword_10026BC10 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v73 = type metadata accessor for Logger(0);
      v74 = sub_10008EA50(v73, (uint64_t)qword_100270AB8);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "No foregrounded app available to set region of interest!", v77, 2u);
        swift_slowDealloc(v77, -1, -1);
      }

    }
  }
}

uint64_t sub_1001940F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  void *v39;
  os_unfair_lock_s *v40;
  id v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void *v60;
  os_unfair_lock_s *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t (*v89)(char *, unint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t inited;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  __int128 v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161[72];
  uint64_t v162[3];
  char v163[8];
  uint64_t v164;
  uint64_t v165;

  v155 = type metadata accessor for ActuatorLimit(0);
  v156 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v157 = (char *)&v140 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_10009061C(&qword_10026E0A0);
  v153 = *(uint64_t *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v140 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v2);
  v4 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for UUID(0);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v6 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DockKitIDSMessageType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v140 - v13;
  DockKitIDSMessage.type.getter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DockKitIDSMessageType.velocity(_:), v7);
  v15 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v162, v7, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v164, v7, v15);
  v16 = v162[0];
  v17 = v164;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  v19 = ((uint64_t (*)(char *, uint64_t))v18)(v14, v7);
  if (v16 != v17)
  {
    v26 = type metadata accessor for DockKitIDSMessagingError(0);
    v31 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v26, v31, 0, 0);
    v29 = v32;
    v30 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_19;
  }
  DockKitIDSMessage.token.getter(v19);
  v20 = (uint64_t *)(v158 + qword_100270B00);
  swift_beginAccess(v158 + qword_100270B00, &v164, 0, 0);
  v21 = *v20;
  __chkstk_darwin(v22);
  *(&v140 - 2) = (uint64_t)v6;
  swift_bridgeObjectRetain(v21);
  v23 = v165;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v21, (uint64_t)v4);
  swift_bridgeObjectRelease(v21);
  v24 = sub_10009061C(&qword_100270B90);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v4, 1, v24);
  sub_10009B2C0((uint64_t)v4, &qword_100270B80);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v159 + 8))(v6, v160);
  if ((_DWORD)v21 == 1)
  {
    v26 = type metadata accessor for DockKitIDSMessagingError(0);
    v27 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v26, v27, 0, 0);
    v29 = v28;
    v30 = (unsigned int *)&enum case for DockKitIDSMessagingError.notRegistered(_:);
LABEL_19:
    v76 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v29, *v30, v26);
    return swift_willThrow(v76);
  }
  v33 = DockKitIDSMessage.payload.getter(v25);
  v35 = v34;
  sub_10009E3A0(v33, v34);
  if (v35 >> 60 == 15)
    goto LABEL_17;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v36 = qword_100275638;
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v38 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v38);
  os_unfair_lock_lock(v38 + 4);
  swift_release(v38);
  v39 = *(void **)(v36 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v40 = *(os_unfair_lock_s **)(v36 + v37);
  v41 = v39;
  swift_retain(v40);
  os_unfair_lock_unlock(v40 + 4);

  swift_release(v40);
  if (!v39)
  {
    v26 = type metadata accessor for DockKitIDSMessagingError(0);
    v74 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v26, v74, 0, 0);
    v29 = v75;
    v30 = (unsigned int *)&enum case for DockKitIDSMessagingError.noPairedDevice(_:);
    goto LABEL_19;
  }
  v42 = qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  v43 = swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v163, 0, 0);
  v44 = v153;
  v45 = v152;
  v46 = v42;
  v47 = v154;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v153 + 16))(v152, v46, v154, v43);
  DKThreadSafe.wrappedValue.getter(v162, v47);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v47);
  if (LOBYTE(v162[0]) != 1)
  {
LABEL_17:
    v26 = type metadata accessor for DockKitIDSMessagingError(0);
    v72 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v26, v72, 0, 0);
    v29 = v73;
    v30 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_19;
  }
  v48 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = PropertyListDecoder.init()();
  result = DockKitIDSMessage.payload.getter(v49);
  if (v51 >> 60 == 15)
  {
    __break(1u);
    return result;
  }
  v52 = result;
  v53 = v51;
  type metadata accessor for Vector3D(0);
  v55 = v54;
  v56 = sub_100090E1C(&qword_100270BB8, (uint64_t (*)(uint64_t))type metadata accessor for Vector3D, (uint64_t)&protocol conformance descriptor for SPVector3D);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v162, v55, v52, v53, v55, v56);
  sub_10009E3A0(v52, v53);
  result = swift_release(v49);
  if (!v23)
  {
    v158 = v162[0];
    v154 = v162[1];
    v153 = v162[2];
    v57 = qword_100275638;
    v58 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v59 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v59);
    os_unfair_lock_lock(v59 + 4);
    swift_release(v59);
    v60 = *(void **)(v57 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v61 = *(os_unfair_lock_s **)(v57 + v58);
    v62 = v60;
    swift_retain(v61);
    os_unfair_lock_unlock(v61 + 4);
    result = swift_release(v61);
    if (v60)
    {
      v63 = dispatch thunk of DockCoreAccessory.systems.getter(result);
      if ((unint64_t)v63 >> 62)
      {
LABEL_60:
        if (v63 < 0)
          v139 = v63;
        else
          v139 = v63 & 0xFFFFFFFFFFFFFF8;
        v64 = _CocoaArrayWrapper.endIndex.getter(v139);
      }
      else
      {
        v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v65 = v155;
      v66 = v157;
      if (!v64)
      {
LABEL_56:

        return swift_bridgeObjectRelease(v63);
      }
      v67 = 0;
      v159 = v63 & 0xC000000000000001;
      v148 = v63 & 0xFFFFFFFFFFFFFF8;
      v147 = v63 + 32;
      v68 = v158;
      v69 = *(double *)&v154;
      v70 = *(double *)&v153;
      *((_QWORD *)&v71 + 1) = 6;
      v151 = xmmword_1001DEEB0;
      *(_QWORD *)&v71 = 136315138;
      v142 = v71;
      v141 = (char *)&type metadata for Any + 8;
      v150 = v62;
      v145 = v63;
      v143 = v64;
      while (1)
      {
        if (v159)
        {
          v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v67, v63);
        }
        else
        {
          if (v67 >= *(_QWORD *)(v148 + 16))
            goto LABEL_59;
          v77 = *(id *)(v147 + 8 * v67);
        }
        v160 = v67 + 1;
        if (__OFADD__(v67, 1))
        {
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        v78 = v77;
        v79 = System.type.getter();
        v80 = SystemType.rawValue.getter(v79);
        if (v80 == SystemType.rawValue.getter(0)
          && (v81 = type metadata accessor for ActuationController(0), (v82 = swift_dynamicCastClass(v78, v81)) != 0))
        {
          v83 = v82;
          v149 = v78;
          v152 = v78;
          v84 = ActuationController.getActuatorLimits()();
          v85 = v84;
          v86 = *(_QWORD *)(v84 + 16);
          v146 = v83;
          if (v86)
          {
            type metadata accessor for Actuator(0);
            v87 = (*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
            v144 = v85;
            v88 = v85 + v87;
            v165 = *(_QWORD *)(v156 + 72);
            v89 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v156 + 16);
            while (1)
            {
              v90 = v89(v66, v88, v65);
              v91 = ActuatorLimit.name.getter(v90);
              v93 = v92;
              v94 = static Actuator.Pitch.getter();
              v96 = v95;
              if (v94 == v91 && v95 == v93)
              {
                swift_bridgeObjectRelease_n(v93, 2);
                v97 = v69;
              }
              else
              {
                v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v95, v91, v93, 0);
                v99 = swift_bridgeObjectRelease(v96);
                if ((v98 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v93);
                  v97 = v69;
                }
                else
                {
                  v100 = static Actuator.Roll.getter(v99);
                  v102 = v101;
                  if (v100 == v91 && v101 == v93)
                  {
                    swift_bridgeObjectRelease_n(v93, 2);
                    v97 = v70;
                  }
                  else
                  {
                    v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v101, v91, v93, 0);
                    swift_bridgeObjectRelease(v93);
                    swift_bridgeObjectRelease(v102);
                    v97 = (v103 & 1) != 0 ? v70 : *(double *)&v68;
                  }
                }
                v65 = v155;
              }
              v66 = v157;
              if (ActuatorLimit.maxSpeed.getter() < fabs(v97))
                break;
              (*(void (**)(char *, uint64_t))(v156 + 8))(v66, v65);
              v88 += v165;
              if (!--v86)
              {
                swift_bridgeObjectRelease(v144);
                goto LABEL_48;
              }
            }
            swift_bridgeObjectRelease(v145);
            swift_bridgeObjectRelease(v144);
            v134 = type metadata accessor for DockKitIDSMessagingError(0);
            v135 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
            swift_allocError(v134, v135, 0, 0);
            v137 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v134 - 8) + 104))(v136, enum case for DockKitIDSMessagingError.argumentNotNormalized(_:), v134);
            swift_willThrow(v137);
            v138 = v152;

            return (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v66, v65);
          }
          swift_bridgeObjectRelease(v84);
LABEL_48:
          v104 = sub_10009061C((uint64_t *)&unk_10026E6C0);
          inited = swift_initStackObject(v104, v161);
          *(_OWORD *)(inited + 16) = v151;
          type metadata accessor for Actuator(0);
          *(_QWORD *)(inited + 32) = static Actuator.Yaw.getter();
          v144 = inited + 32;
          *(_QWORD *)(inited + 40) = v106;
          v107 = static Actuator.Pitch.getter();
          *(_QWORD *)(inited + 48) = v107;
          *(_QWORD *)(inited + 56) = v108;
          *(_QWORD *)(inited + 64) = static Actuator.Roll.getter(v107);
          *(_QWORD *)(inited + 72) = v109;
          v165 = inited;
          v110 = sub_10009061C(&qword_100271600);
          v111 = swift_allocObject(v110, 56, 7);
          *(_OWORD *)(v111 + 16) = v151;
          v112 = v154;
          *(double *)(v111 + 32) = *(double *)&v158;
          *(_QWORD *)(v111 + 40) = v112;
          *(double *)(v111 + 48) = *(double *)&v153;
          if (qword_10026BC10 != -1)
            swift_once(&qword_10026BC10, sub_10018AF9C);
          v113 = type metadata accessor for Logger(0);
          sub_10008EA50(v113, (uint64_t)qword_100270AB8);
          v114 = swift_bridgeObjectRetain_n(v111, 2);
          v115 = Logger.logObject.getter(v114);
          v116 = static os_log_type_t.default.getter(v115);
          if (os_log_type_enabled(v115, v116))
          {
            v117 = swift_slowAlloc(12, -1);
            v118 = swift_slowAlloc(32, -1);
            v162[0] = v118;
            *(_DWORD *)v117 = v142;
            swift_bridgeObjectRetain(v111);
            v120 = Array.description.getter(v119, &type metadata for Double);
            v122 = v121;
            swift_bridgeObjectRelease(v111);
            *(_QWORD *)(v117 + 4) = sub_1000906BC(v120, v122, v162);
            swift_bridgeObjectRelease_n(v111, 2);
            swift_bridgeObjectRelease(v122);
            _os_log_impl((void *)&_mh_execute_header, v115, v116, "Setting actuation: %s", (uint8_t *)v117, 0xCu);
            swift_arrayDestroy(v118, 1, v141);
            swift_slowDealloc(v118, -1, -1);
            swift_slowDealloc(v117, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v111, 2);
          }
          v124 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v123);
          if (qword_10026BC18 != -1)
            swift_once(&qword_10026BC18, sub_10018B008);
          v125 = dword_100270AD0;
          v126 = qword_100270AD8;
          v127 = unk_100270AE0;
          v128 = v152;
          v129 = System.name.getter();
          v131 = v130;

          v132 = v129;
          v133 = v165;
          sub_1000FCB30(v124, v125, v126, v127, v132, v131, v165, (_QWORD *)v111);
          swift_bridgeObjectRelease(v111);

          swift_bridgeObjectRelease(v131);
          swift_setDeallocating(v133);
          swift_arrayDestroy(v144, *(_QWORD *)(v133 + 16), &type metadata for String);
          v65 = v155;
          v66 = v157;
          v63 = v145;
          v64 = v143;
          v67 = v160;
          v78 = v149;
          v62 = v150;
        }
        else
        {
          v67 = v160;
        }

        if (v67 == v64)
          goto LABEL_56;
      }
    }
  }
  return result;
}

uint64_t sub_100194F24()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  __int128 v56;
  char v57[32];
  uint64_t v58;

  v0 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v0);
  v2 = (char *)v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  v4 = __chkstk_darwin(v3);
  v51[1] = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v52 = (char *)v51 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)v51 - v8;
  v10 = type metadata accessor for DockKitIDSMessageType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v51 - v16;
  DockKitIDSMessage.type.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DockKitIDSMessageType.systemTracking(_:), v10);
  v18 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v56, v10, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(v55, v10, v18);
  v19 = v56;
  v20 = v55[0];
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  v22 = ((uint64_t (*)(char *, uint64_t))v21)(v17, v10);
  if (v19 != v20)
  {
    v38 = type metadata accessor for DockKitIDSMessagingError(0);
    v39 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v38, v39, 0, 0);
    v41 = v40;
    v42 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_9:
    v37 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v41, *v42, v38);
    return swift_willThrow(v37);
  }
  DockKitIDSMessage.token.getter(v22);
  v23 = (uint64_t *)(v58 + qword_100270B00);
  swift_beginAccess(v58 + qword_100270B00, v57, 0, 0);
  v24 = *v23;
  __chkstk_darwin(v25);
  v51[-2] = v9;
  swift_bridgeObjectRetain(v24);
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v24, (uint64_t)v2);
  swift_bridgeObjectRelease(v24);
  v26 = sub_10009061C(&qword_100270B90);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v2, 1, v26);
  sub_10009B2C0((uint64_t)v2, &qword_100270B80);
  v28 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
  v29 = v9;
  v30 = v54;
  v31 = v28(v29, v54);
  if (v27 != 1)
  {
    v43 = DockKitIDSMessage.payload.getter(v31);
    v45 = v44;
    v46 = sub_10009E3A0(v43, v44);
    if (v45 >> 60 != 15)
    {
      DockKitIDSMessage.payload.getter(v46);
      if (v47 >> 60 != 15)
        __asm { BR              X10 }
      __break(1u);
      JUMPOUT(0x10019595CLL);
    }
    v38 = type metadata accessor for DockKitIDSMessagingError(0);
    v48 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v38, v48, 0, 0);
    v41 = v49;
    v42 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_9;
  }
  v32 = (uint64_t)v52;
  DockKitIDSMessage.token.getter(v31);
  v33 = type metadata accessor for DockKitIDSMessagingError(0);
  v34 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
  v35 = swift_allocError(v33, v34, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v36, enum case for DockKitIDSMessagingError.notRegistered(_:), v33);
  sub_100198AE8(v32, v35);
  v28((char *)v32, v30);
  v37 = swift_errorRelease(v35);
  return swift_willThrow(v37);
}

uint64_t sub_100195970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, char *);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  void *v68;
  os_unfair_lock_s *v69;
  id v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  void (*v80)(char *, uint64_t);
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t (*v96)(char *, char *, uint64_t);
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  void *v114;
  uint64_t v115;
  id v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  id v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, _QWORD, uint64_t);
  id v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168[4];
  char v169[24];
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  char v173[8];
  char *v174;

  v0 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v0);
  v151 = (char *)&v147 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for TrajectoryCommand.Animation(0);
  v154 = *(_QWORD *)(v156 - 8);
  v2 = __chkstk_darwin(v156);
  v157 = (char *)&v147 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v158 = (char *)&v147 - v4;
  v162 = type metadata accessor for TrajectoryCommand(0);
  v160 = *(_QWORD *)(v162 - 8);
  v5 = __chkstk_darwin(v162);
  v152 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v153 = (char *)&v147 - v8;
  v9 = __chkstk_darwin(v7);
  v155 = (char *)&v147 - v10;
  v150 = v11;
  __chkstk_darwin(v9);
  v161 = (uint64_t *)((char *)&v147 - v12);
  v13 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v13);
  v15 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = (char *)type metadata accessor for UUID(0);
  v164 = *((_QWORD *)v174 - 1);
  v16 = __chkstk_darwin(v174);
  v159 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v163 = (char *)&v147 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v147 - v20;
  v22 = type metadata accessor for DockKitIDSMessageType(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v147 - v28;
  DockKitIDSMessage.type.getter(v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v26, enum case for DockKitIDSMessageType.trajectory(_:), v22);
  v30 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v170, v22, v30);
  dispatch thunk of RawRepresentable.rawValue.getter(&v167, v22, v30);
  v31 = v170;
  v32 = v167;
  v33 = *(void (**)(char *, uint64_t))(v23 + 8);
  v33(v26, v22);
  v34 = ((uint64_t (*)(char *, uint64_t))v33)(v29, v22);
  if (v31 != v32)
  {
    v49 = type metadata accessor for DockKitIDSMessagingError(0);
    v50 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v49, v50, 0, 0);
    v52 = v51;
    v53 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_7:
    v48 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v52, *v53, v49);
    return swift_willThrow(v48);
  }
  DockKitIDSMessage.token.getter(v34);
  v35 = (uint64_t *)(v166 + qword_100270B00);
  swift_beginAccess(v166 + qword_100270B00, v173, 0, 0);
  v36 = *v35;
  __chkstk_darwin(v37);
  *(&v147 - 2) = (uint64_t)v21;
  swift_bridgeObjectRetain(v36);
  v38 = v165;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v36, (uint64_t)v15);
  swift_bridgeObjectRelease(v36);
  v39 = sub_10009061C(&qword_100270B90);
  LODWORD(v36) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v15, 1, v39);
  sub_10009B2C0((uint64_t)v15, &qword_100270B80);
  v40 = *(uint64_t (**)(char *, char *))(v164 + 8);
  v41 = v174;
  v42 = v40(v21, v174);
  if ((_DWORD)v36 == 1)
  {
    v43 = (uint64_t)v163;
    DockKitIDSMessage.token.getter(v42);
    v44 = type metadata accessor for DockKitIDSMessagingError(0);
    v45 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v46 = swift_allocError(v44, v45, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v47, enum case for DockKitIDSMessagingError.notRegistered(_:), v44);
    sub_100198AE8(v43, v46);
    v40((char *)v43, v41);
    v48 = swift_errorRelease(v46);
    return swift_willThrow(v48);
  }
  v54 = DockKitIDSMessage.payload.getter(v42);
  if (v55 >> 60 == 15)
  {
    v49 = type metadata accessor for DockKitIDSMessagingError(0);
    v56 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v49, v56, 0, 0);
    v52 = v57;
    v53 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_7;
  }
  v59 = v54;
  v60 = v55;
  v61 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v62 = PropertyListDecoder.init()();
  v63 = sub_100090E1C(&qword_100270BC0, (uint64_t (*)(uint64_t))&type metadata accessor for TrajectoryCommand, (uint64_t)&protocol conformance descriptor for TrajectoryCommand);
  v64 = v161;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v161, v162, v59, v60, v162, v63);
  if (v38)
  {
    sub_10009E3A0(v59, v60);
    return swift_release(v62);
  }
  v165 = v59;
  v166 = v60;
  swift_release(v62);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v65 = qword_100275638;
  v66 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v67 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v67);
  os_unfair_lock_lock(v67 + 4);
  swift_release(v67);
  v68 = *(void **)(v65 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v69 = *(os_unfair_lock_s **)(v65 + v66);
  v70 = v68;
  swift_retain(v69);
  os_unfair_lock_unlock(v69 + 4);
  v71 = swift_release(v69);
  v72 = v157;
  v73 = v158;
  if (!v68)
  {
    v85 = type metadata accessor for DockKitIDSMessagingError(0);
    v86 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v85, v86, 0, 0);
    v88 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v85 - 8) + 104))(v87, enum case for DockKitIDSMessagingError.noPairedDevice(_:), v85);
    swift_willThrow(v88);
    sub_10009E3A0(v165, v166);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v160 + 8))(v64, v162);
  }
  v149 = v70;
  v164 = 0;
  TrajectoryCommand.type.getter(v71);
  v74 = v154;
  v75 = v72;
  v76 = v156;
  v148 = *(void (**)(char *, _QWORD, uint64_t))(v154 + 104);
  v148(v72, enum case for TrajectoryCommand.Animation.ReturnToHome(_:), v156);
  v77 = sub_100090E1C(&qword_100270BC8, (uint64_t (*)(uint64_t))&type metadata accessor for TrajectoryCommand.Animation, (uint64_t)&protocol conformance descriptor for TrajectoryCommand.Animation);
  dispatch thunk of RawRepresentable.rawValue.getter(&v170, v76, v77);
  dispatch thunk of RawRepresentable.rawValue.getter(&v167, v76, v77);
  v78 = v170;
  v79 = v167;
  v80 = *(void (**)(char *, uint64_t))(v74 + 8);
  v80(v75, v76);
  v80(v73, v76);
  v81 = v64;
  v82 = v155;
  v83 = v162;
  v154 = *(_QWORD *)(v160 + 16);
  v84 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v154)(v155, v81, v162);
  if (v78 == v79)
  {
    v158 = *(char **)(v160 + 8);
    ((void (*)(char *, uint64_t))v158)(v82, v83);
LABEL_18:
    sub_10015D34C();
    v94 = v166;
    v95 = v153;
    v96 = (uint64_t (*)(char *, char *, uint64_t))v154;
    if (v93)
    {
      v97 = v93;
      *((_DWORD *)&v147 - 12) = __chkstk_darwin(v92);
      *(&v147 - 5) = v98;
      *(&v147 - 4) = v99;
      v100 = v161;
      v101 = v165;
      *(&v147 - 3) = (uint64_t)v161;
      *(&v147 - 2) = v101;
      *(&v147 - 1) = v94;
      sub_10019F338(v98, v97, (void (*)(_QWORD *, __n128))sub_10019F324, (uint64_t)(&v147 - 8));
      sub_10009E3A0(v101, v94);

      swift_bridgeObjectRelease(v97);
      v102 = v100;
    }
    else
    {
      if (qword_10026BC10 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v103 = type metadata accessor for Logger(0);
      sub_10008EA50(v103, (uint64_t)qword_100270AB8);
      v104 = v96(v95, (char *)v161, v83);
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v105, v106))
      {
        v107 = (uint8_t *)swift_slowAlloc(12, -1);
        v108 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v170 = v108;
        *(_DWORD *)v107 = 136315138;
        v174 = (char *)(v107 + 4);
        v109 = v152;
        v96(v152, v95, v83);
        v110 = String.init<A>(describing:)(v109, v83);
        v112 = v111;
        v167 = sub_1000906BC(v110, v111, (uint64_t *)&v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v174, v107 + 12);
        swift_bridgeObjectRelease(v112);
        ((void (*)(char *, uint64_t))v158)(v95, v83);
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "No foregrounded app available to send trajectory: %s", v107, 0xCu);
        swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v108, -1, -1);
        swift_slowDealloc(v107, -1, -1);
        sub_10009E3A0(v165, v166);

      }
      else
      {
        sub_10009E3A0(v165, v94);

        ((void (*)(char *, uint64_t))v158)(v95, v83);
      }
      v102 = v161;
    }
    v127 = v83;
    return ((uint64_t (*)(_QWORD *, uint64_t))v158)(v102, v127);
  }
  v89 = v158;
  TrajectoryCommand.type.getter(v84);
  v148(v75, enum case for TrajectoryCommand.Animation.Flip180(_:), v76);
  dispatch thunk of RawRepresentable.rawValue.getter(&v170, v76, v77);
  dispatch thunk of RawRepresentable.rawValue.getter(&v167, v76, v77);
  v90 = v170;
  v91 = v167;
  v80(v75, v76);
  v80(v89, v76);
  v158 = *(char **)(v160 + 8);
  ((void (*)(char *, uint64_t))v158)(v82, v83);
  if (v90 == v91)
    goto LABEL_18;
  v113 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v114 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v113);
  v115 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v116 = *(id *)&v113[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v117 = &v113[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v113[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v169, 0, 0);
  v118 = *(_QWORD *)v117;
  v119 = *(_QWORD *)(*(_QWORD *)v117 + 16);
  if (v119)
  {
    v156 = v115;
    v157 = v113;
    v120 = v118 + 32;
    swift_bridgeObjectRetain(v118);
    v121 = v174;
    v122 = v163;
    v123 = v159;
    while (1)
    {
      sub_10009AFF4(v120, (uint64_t)&v167);
      v124 = *(id *)(*sub_10009B038(&v167, v168[2]) + 24);
      DockCoreInfo.identifier.getter(v124);

      DockCoreInfo.identifier.getter(v125);
      LOBYTE(v124) = static UUID.== infix(_:_:)(v122, v123);
      v40(v123, v121);
      v40(v122, v121);
      if ((v124 & 1) != 0)
        break;
      sub_100090E88(&v167);
      v120 += 40;
      if (!--v119)
      {
        swift_bridgeObjectRelease(v118);
        v113 = v157;
        v115 = v156;
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease(v118);
    v128 = v157;
    v129 = *(id *)&v157[v156];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)&v167, (uint64_t)&v170);
    sub_100090E88(&v167);

  }
  else
  {
LABEL_29:
    v126 = *(id *)&v113[v115];
    OS_dispatch_semaphore.signal()();

    v172 = 0;
    v170 = 0u;
    v171 = 0u;

  }
  v130 = v162;
  v131 = v149;
  if (!*((_QWORD *)&v171 + 1))
  {
    sub_10009E3A0(v165, v166);

    sub_10009B2C0((uint64_t)&v170, (uint64_t *)&unk_10026DF40);
LABEL_48:
    v102 = v161;
    goto LABEL_49;
  }
  v132 = sub_10009061C(&qword_10026C2E0);
  v133 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(&v167, &v170, v132, v133, 6) & 1) == 0)
  {
    sub_10009E3A0(v165, v166);

    goto LABEL_48;
  }
  v134 = v167;
  if (*(_BYTE *)(v167 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    sub_10009E3A0(v165, v166);

LABEL_45:
    swift_release(v134);
    goto LABEL_48;
  }
  v135 = *(char **)(v167 + 16);
  if (!v135)
  {
    sub_10009E3A0(v165, v166);

    goto LABEL_45;
  }
  v136 = *(void **)&v135[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
  if (!v136)
  {
    v146 = v135;
    goto LABEL_47;
  }
  v174 = v135;
  if (objc_msgSend(v136, "state") != (id)2)
  {
LABEL_47:
    sub_10009E3A0(v165, v166);
    swift_release(v134);

    goto LABEL_48;
  }
  v137 = type metadata accessor for TaskPriority(0);
  v138 = (uint64_t)v151;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v151, 1, 1, v137);
  v139 = v152;
  v140 = v161;
  ((void (*)(char *, _QWORD *, uint64_t))v154)(v152, v161, v130);
  v141 = v160;
  v142 = *(unsigned __int8 *)(v160 + 80);
  v143 = (v142 + 40) & ~v142;
  v144 = (char *)swift_allocObject(&unk_10023E0C8, v143 + v150, v142 | 7);
  *((_QWORD *)v144 + 2) = 0;
  *((_QWORD *)v144 + 3) = 0;
  *((_QWORD *)v144 + 4) = v134;
  (*(void (**)(char *, char *, uint64_t))(v141 + 32))(&v144[v143], v139, v130);
  swift_retain(v134);
  v145 = sub_10018A9CC(v138, (uint64_t)&unk_100270BD8, (uint64_t)v144, (uint64_t)&unk_10023E0F0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_10026D658);
  sub_10009E3A0(v165, v166);
  swift_release(v134);

  swift_release(v145);
  v102 = v140;
LABEL_49:
  v127 = v130;
  return ((uint64_t (*)(_QWORD *, uint64_t))v158)(v102, v127);
}

void sub_100196944()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;

  v0 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v0);
  v2 = (char *)v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  v4 = __chkstk_darwin(v3);
  v62[0] = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)v62 - v6;
  v8 = type metadata accessor for DockKitIDSMessageType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v62 - v14;
  DockKitIDSMessage.type.getter(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DockKitIDSMessageType.frame(_:), v8);
  v16 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v66, v8, v16);
  dispatch thunk of RawRepresentable.rawValue.getter(&v67, v8, v16);
  v17 = v66[0];
  v18 = v67;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, v8);
  v20 = ((uint64_t (*)(char *, uint64_t))v19)(v15, v8);
  if (v17 != v18)
  {
    v35 = type metadata accessor for DockKitIDSMessagingError(0);
    v36 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v35, v36, 0, 0);
    v38 = v37;
    v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    v34 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, *v39, v35);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter(v20);
  v21 = (uint64_t *)(v65 + qword_100270B00);
  swift_beginAccess(v65 + qword_100270B00, v66, 0, 0);
  v22 = *v21;
  __chkstk_darwin(v23);
  v62[-2] = v7;
  swift_bridgeObjectRetain(v22);
  v24 = v62[1];
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v22, (uint64_t)v2);
  swift_bridgeObjectRelease(v22);
  v25 = sub_10009061C(&qword_100270B90);
  LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v2, 1, v25);
  sub_10009B2C0((uint64_t)v2, &qword_100270B80);
  v26 = v64;
  v27 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
  v28 = v27(v7, v64);
  if ((_DWORD)v22 == 1)
  {
    v29 = v62[0];
    DockKitIDSMessage.token.getter(v28);
    v30 = type metadata accessor for DockKitIDSMessagingError(0);
    v31 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v32 = swift_allocError(v30, v31, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v33, enum case for DockKitIDSMessagingError.notRegistered(_:), v30);
    sub_100198AE8(v29, v32);
    v27((char *)v29, v26);
    v34 = swift_errorRelease(v32);
LABEL_6:
    swift_willThrow(v34);
    return;
  }
  v40 = DockKitIDSMessage.payload.getter(v28);
  v42 = v41;
  sub_10009E3A0(v40, v41);
  if (v42 >> 60 == 15)
  {
    v35 = type metadata accessor for DockKitIDSMessagingError(0);
    v43 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v35, v43, 0, 0);
    v38 = v44;
    v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  v45 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v46 = PropertyListDecoder.init()();
  v47 = DockKitIDSMessage.payload.getter(v46);
  if (v48 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v49 = v47;
    v50 = v48;
    v51 = sub_10019F5C4();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v67, &type metadata for DockFramingMode, v49, v50, &type metadata for DockFramingMode, v51);
    sub_10009E3A0(v49, v50);
    swift_release(v46);
    if (!v24)
    {
      v52 = v67;
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      sub_10015D34C();
      if (v55)
      {
        v56 = v55;
        sub_10019F608(v54, v55, v53, v54, v55, v52);
        swift_bridgeObjectRelease(v56);
      }
      else
      {
        if (qword_10026BC10 != -1)
          swift_once(&qword_10026BC10, sub_10018AF9C);
        v57 = type metadata accessor for Logger(0);
        v58 = sub_10008EA50(v57, (uint64_t)qword_100270AB8);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "No foregrounded app available to set framing mode!", v61, 2u);
          swift_slowDealloc(v61, -1, -1);
        }

      }
    }
  }
}

uint64_t sub_100196F18()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;

  v0 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v0);
  v2 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  v4 = __chkstk_darwin(v3);
  v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - v6;
  v8 = type metadata accessor for DockKitIDSMessageType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v47 - v14;
  DockKitIDSMessage.type.getter(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DockKitIDSMessageType.offset(_:), v8);
  v16 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v51, v8, v16);
  dispatch thunk of RawRepresentable.rawValue.getter(&v52, v8, v16);
  v17 = v51[0];
  v18 = v52;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, v8);
  v20 = ((uint64_t (*)(char *, uint64_t))v19)(v15, v8);
  if (v17 != v18)
  {
    v34 = type metadata accessor for DockKitIDSMessagingError(0);
    v35 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v34, v35, 0, 0);
    v37 = v36;
    v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_9:
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v37, *v38, v34);
    return swift_willThrow(v33);
  }
  DockKitIDSMessage.token.getter(v20);
  v21 = (uint64_t *)(v50 + qword_100270B00);
  swift_beginAccess(v50 + qword_100270B00, v51, 0, 0);
  v22 = *v21;
  __chkstk_darwin(v23);
  *(&v47 - 2) = v7;
  swift_bridgeObjectRetain(v22);
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v22, (uint64_t)v2);
  swift_bridgeObjectRelease(v22);
  v24 = sub_10009061C(&qword_100270B90);
  LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v2, 1, v24);
  sub_10009B2C0((uint64_t)v2, &qword_100270B80);
  v25 = v49;
  v26 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
  v27 = v26(v7, v49);
  if ((_DWORD)v22 != 1)
  {
    v39 = DockKitIDSMessage.payload.getter(v27);
    v41 = v40;
    v42 = sub_10009E3A0(v39, v40);
    if (v41 >> 60 != 15)
    {
      DockKitIDSMessage.payload.getter(v42);
      if (v43 >> 60 != 15)
        __asm { BR              X10 }
      __break(1u);
      JUMPOUT(0x10019741CLL);
    }
    v34 = type metadata accessor for DockKitIDSMessagingError(0);
    v44 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v34, v44, 0, 0);
    v37 = v45;
    v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_9;
  }
  v28 = (uint64_t)v47;
  DockKitIDSMessage.token.getter(v27);
  v29 = type metadata accessor for DockKitIDSMessagingError(0);
  v30 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
  v31 = swift_allocError(v29, v30, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v32, enum case for DockKitIDSMessagingError.notRegistered(_:), v29);
  sub_100198AE8(v28, v31);
  v26((char *)v28, v25);
  v33 = swift_errorRelease(v31);
  return swift_willThrow(v33);
}

void sub_10019743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  objc_class *v71;
  unint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  os_unfair_lock_s *v77;
  void *v78;
  os_unfair_lock_s *v79;
  id v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  os_unfair_lock_s *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  os_unfair_lock_s *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, uint64_t);
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t inited;
  uint64_t v112;
  unint64_t v113;
  Class isa;
  uint64_t v115;
  id v116;
  id v117;
  NSString v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void **aBlock;
  uint64_t v141;
  void (*v142)(uint64_t, void *, void *);
  void *v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  char v146[104];
  _QWORD v147[2];
  uint64_t v148;

  v0 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v0);
  v129 = (char *)&v129 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DockKitCameraCommand(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v129 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for DockKitCameraCommandPayload(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v135 = (char **)((char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v4);
  v6 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for UUID(0);
  v137 = *(_QWORD *)(v139 - 8);
  v7 = __chkstk_darwin(v139);
  v136 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v129 - v9;
  v11 = type metadata accessor for DockKitIDSMessageType(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v129 - v17;
  DockKitIDSMessage.type.getter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DockKitIDSMessageType.camera(_:), v11);
  v19 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(v147, v11, v19);
  v20 = aBlock;
  v21 = (void **)v147[0];
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v15, v11);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v18, v11);
  if (v20 != v21)
  {
    v38 = type metadata accessor for DockKitIDSMessagingError(0);
    v39 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v38, v39, 0, 0);
    v41 = v40;
    v42 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    v37 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v41, *v42, v38);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter(v23);
  v24 = (uint64_t *)(v148 + qword_100270B00);
  swift_beginAccess(v148 + qword_100270B00, v147, 0, 0);
  v25 = *v24;
  __chkstk_darwin(v26);
  *(&v129 - 2) = v10;
  swift_bridgeObjectRetain(v25);
  v27 = v138;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v25, (uint64_t)v6);
  swift_bridgeObjectRelease(v25);
  v28 = sub_10009061C(&qword_100270B90);
  LODWORD(v25) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v6, 1, v28);
  sub_10009B2C0((uint64_t)v6, &qword_100270B80);
  v29 = *(uint64_t (**)(char *, uint64_t))(v137 + 8);
  v30 = v139;
  v31 = v29(v10, v139);
  if ((_DWORD)v25 == 1)
  {
    v32 = (uint64_t)v136;
    DockKitIDSMessage.token.getter(v31);
    v33 = type metadata accessor for DockKitIDSMessagingError(0);
    v34 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v35 = swift_allocError(v33, v34, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v36, enum case for DockKitIDSMessagingError.notRegistered(_:), v33);
    sub_100198AE8(v32, v35);
    v29((char *)v32, v30);
    v37 = swift_errorRelease(v35);
LABEL_6:
    swift_willThrow(v37);
    return;
  }
  v43 = DockKitIDSMessage.payload.getter(v31);
  v45 = v44;
  sub_10009E3A0(v43, v44);
  if (v45 >> 60 == 15)
  {
    v38 = type metadata accessor for DockKitIDSMessagingError(0);
    v46 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v38, v46, 0, 0);
    v41 = v47;
    v42 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  v48 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = PropertyListDecoder.init()();
  v50 = DockKitIDSMessage.payload.getter(v49);
  if (v51 >> 60 == 15)
  {
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    return;
  }
  v52 = v50;
  v53 = v51;
  v54 = sub_100090E1C(&qword_100270BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitCameraCommandPayload, (uint64_t)&protocol conformance descriptor for DockKitCameraCommandPayload);
  v55 = v135;
  v56 = v134;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v135, v134, v52, v53, v134, v54);
  sub_10009E3A0(v52, v53);
  v57 = swift_release(v49);
  if (!v27)
  {
    v58 = v130;
    DockKitCameraCommandPayload.command.getter(v57);
    v59 = v131;
    v60 = v132;
    v61 = (*(uint64_t (**)(char *, uint64_t))(v131 + 88))(v58, v132);
    if (v61 == enum case for DockKitCameraCommand.photo(_:))
    {
      v62 = DockKitCameraCommandPayload.payload.getter();
      v64 = v63;
      sub_10009E3A0(v62, v63);
      if (v64 >> 60 == 15)
      {
        v65 = 0;
LABEL_26:
        v96 = v133;
        v97 = type metadata accessor for TaskPriority(0);
        v98 = (uint64_t)v129;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v129, 1, 1, v97);
        v99 = (_QWORD *)swift_allocObject(&unk_10023E118, 40, 7);
        v99[2] = 0;
        v99[3] = 0;
        v99[4] = v65;
        v100 = sub_10018AB1C(v98, (uint64_t)&unk_100270C00, (uint64_t)v99);
        swift_release(v100);
        v101 = *(void (**)(_QWORD *, uint64_t))(v96 + 8);
LABEL_34:
        v101(v55, v56);
        return;
      }
      swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      v91 = PropertyListDecoder.init()();
      v92 = DockKitCameraCommandPayload.payload.getter();
      if (v93 >> 60 != 15)
      {
        v94 = v92;
        v95 = v93;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&aBlock, &type metadata for Int, v92, v93, &type metadata for Int, &protocol witness table for Int);
        sub_10009E3A0(v94, v95);
        swift_release(v91);
        v65 = aBlock;
        goto LABEL_26;
      }
      goto LABEL_41;
    }
    if (v61 != enum case for DockKitCameraCommand.flip(_:))
    {
      if (v61 == enum case for DockKitCameraCommand.zoom(_:))
      {
        v102 = DockKitCameraCommandPayload.payload.getter();
        v104 = v103;
        sub_10009E3A0(v102, v103);
        if (v104 >> 60 != 15)
        {
          swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
          v120 = PropertyListDecoder.init()();
          v121 = DockKitCameraCommandPayload.payload.getter();
          if (v122 >> 60 != 15)
          {
            v123 = v121;
            v124 = v122;
            dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&aBlock, &type metadata for Double, v121, v122, &type metadata for Double, &protocol witness table for Double);
            (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v55, v56);
            sub_10009E3A0(v123, v124);
            swift_release(v120);
            return;
          }
          goto LABEL_42;
        }
        v105 = type metadata accessor for DockKitIDSMessagingError(0);
        v106 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
        swift_allocError(v105, v106, 0, 0);
        v108 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v105 - 8) + 104))(v107, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v105);
        swift_willThrow(v108);
      }
      else
      {
        if (v61 != enum case for DockKitCameraCommand.open(_:))
        {
          v125 = type metadata accessor for DockKitIDSMessagingError(0);
          v126 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
          swift_allocError(v125, v126, 0, 0);
          v128 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v125 - 8) + 104))(v127, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v125);
          swift_willThrow(v128);
          (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v55, v56);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
          return;
        }
        v109 = (id)SBSCreateOpenApplicationService();
        v110 = sub_10009061C((uint64_t *)&unk_10026CFB0);
        inited = swift_initStackObject(v110, v146);
        *(_OWORD *)(inited + 16) = xmmword_1001DE690;
        aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
        v141 = v112;
        AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(inited + 96) = &type metadata for Bool;
        *(_BYTE *)(inited + 72) = 1;
        v113 = sub_1001B1560(inited);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v113);
        v116 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions, v115), "optionsWithDictionary:", isa);

        if (!v109)
        {
          (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v55, v56);

          return;
        }
        v117 = v109;
        v118 = String._bridgeToObjectiveC()();
        v144 = sub_10019ABF4;
        v145 = 0;
        aBlock = _NSConcreteStackBlock;
        v141 = 1107296256;
        v142 = sub_10009F2B8;
        v143 = &unk_10023E130;
        v119 = _Block_copy(&aBlock);
        objc_msgSend(v117, "openApplication:withOptions:completion:", v118, v116, v119);
        _Block_release(v119);

      }
      v101 = *(void (**)(_QWORD *, uint64_t))(v133 + 8);
      goto LABEL_34;
    }
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v66 = type metadata accessor for Logger(0);
    v67 = sub_10008EA50(v66, (uint64_t)qword_100270AB8);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Doing camera flip!", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }

    v71 = (objc_class *)type metadata accessor for AccessorySystemEvent(0);
    v72 = (unint64_t)static AccessorySystemEvent.kHeaderCameraFlip.getter() << 24;
    v73 = objc_allocWithZone(v71);
    LOBYTE(aBlock) = 0;
    v74 = (void *)AccessorySystemEvent.init(name:payload:)(0x662E6172656D6163, 0xEB0000000070696CLL, v72);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v75 = qword_100275638;
    v76 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v77 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v77);
    os_unfair_lock_lock(v77 + 4);
    swift_release(v77);
    v78 = *(void **)(v75 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v79 = *(os_unfair_lock_s **)(v75 + v76);
    v80 = v78;
    swift_retain(v79);
    os_unfair_lock_unlock(v79 + 4);
    v81 = swift_release(v79);
    if (v78)
    {
      v82 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v81);

      v83 = qword_100275638;
      v84 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v85 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain(v85);
      os_unfair_lock_lock(v85 + 4);
      swift_release(v85);
      v86 = sub_1001B2320((uint64_t)_swiftEmptyArrayStorage);
      v87 = (unint64_t *)(v83 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
      swift_beginAccess(v83 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions, &aBlock, 1, 0);
      v88 = *v87;
      *v87 = v86;
      swift_bridgeObjectRelease(v88);
      v89 = *(os_unfair_lock_s **)(v83 + v84);
      swift_retain(v89);
      os_unfair_lock_unlock(v89 + 4);
      swift_release(v89);
      v90 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                          + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                              + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server));
      sub_100140E98((uint64_t)v82, (uint64_t)v74);

      (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v135, v56);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v135, v56);

    }
  }
}

uint64_t sub_1001981E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  v48 = a2;
  v47 = a3;
  v4 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for DockKitIDSMessageType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  v52 = a1;
  DockKitIDSMessage.type.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DockKitIDSMessageType.keepAliveResp(_:), v13);
  v21 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v53, v13, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v54, v13, v21);
  v22 = v53[0];
  v23 = v54;
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v13);
  v25 = ((uint64_t (*)(char *, uint64_t))v24)(v20, v13);
  if (v22 != v23)
  {
    v42 = type metadata accessor for DockKitIDSMessagingError(0);
    v43 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v42, v43, 0, 0);
    v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v44, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v42);
    return swift_willThrow(v41);
  }
  v26 = v48;
  v27 = (uint64_t)v10;
  DockKitIDSMessage.token.getter(v25);
  v28 = v51;
  v29 = (uint64_t *)(v51 + qword_100270B00);
  swift_beginAccess(v51 + qword_100270B00, v53, 0, 0);
  v30 = *v29;
  __chkstk_darwin(v31);
  *(&v47 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain(v30);
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v30, (uint64_t)v6);
  swift_bridgeObjectRelease(v30);
  v32 = sub_10009061C(&qword_100270B90);
  LODWORD(v30) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v6, 1, v32);
  sub_10009B2C0((uint64_t)v6, &qword_100270B80);
  v33 = *(uint64_t (**)(char *, uint64_t))(v49 + 8);
  v34 = v12;
  v35 = v50;
  v36 = v33(v34, v50);
  if ((_DWORD)v30 == 1)
  {
    DockKitIDSMessage.token.getter(v36);
    v37 = type metadata accessor for DockKitIDSMessagingError(0);
    v38 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v39 = swift_allocError(v37, v38, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v40, enum case for DockKitIDSMessagingError.notRegistered(_:), v37);
    sub_100198AE8(v27, v39);
    v33((char *)v27, v35);
    v41 = swift_errorRelease(v39);
    return swift_willThrow(v41);
  }
  v46 = *(_QWORD *)(v28 + qword_100270B18);
  swift_retain(v46);
  dispatch thunk of DKIDSKeepAlive.monitor(from:)(v26, v47);
  return swift_release(v46);
}

void sub_1001985D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void (*v20)(_QWORD);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void (*v24)(_BYTE *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_BYTE *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  id v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE v55[12];
  unsigned int v56;
  void (*v57)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  _QWORD *v67;

  v2 = type metadata accessor for DockKitIDSMessage(0);
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  __chkstk_darwin(v2);
  v58 = &v55[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_10009061C(&qword_100270B80);
  __chkstk_darwin(v4);
  v6 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v64 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v64 - 8);
  v8 = __chkstk_darwin(v64);
  v61 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v11 = &v55[-v10];
  v12 = type metadata accessor for DockKitIDSMessageType(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v55[-v18];
  v65 = a1;
  DockKitIDSMessage.type.getter(v17);
  v20 = *(void (**)(_QWORD))(v13 + 104);
  v56 = enum case for DockKitIDSMessageType.objects(_:);
  v57 = (void (*)(_BYTE *, _QWORD, uint64_t))v20;
  v20(v16);
  v21 = sub_100090E1C(&qword_100270B88, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType, (uint64_t)&protocol conformance descriptor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter(v66, v12, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v67, v12, v21);
  v22 = (_QWORD *)v66[0];
  v23 = v67;
  v24 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v24(v16, v12);
  v25 = ((uint64_t (*)(_BYTE *, uint64_t))v24)(v19, v12);
  if (v22 != v23)
  {
    v41 = type metadata accessor for DockKitIDSMessagingError(0);
    v42 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v41, v42, 0, 0);
    v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v41);
    goto LABEL_5;
  }
  DockKitIDSMessage.token.getter(v25);
  v26 = v63;
  v27 = (uint64_t *)(v63 + qword_100270B00);
  swift_beginAccess(v63 + qword_100270B00, v66, 0, 0);
  v28 = *v27;
  __chkstk_darwin(v29);
  *(_QWORD *)&v55[-16] = v11;
  swift_bridgeObjectRetain(v28);
  v30 = v62;
  sub_10018ACA8((uint64_t (*)(char *, __n128))sub_10019FC08, v28, (uint64_t)v6);
  swift_bridgeObjectRelease(v28);
  v31 = sub_10009061C(&qword_100270B90);
  LODWORD(v28) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v6, 1, v31);
  sub_10009B2C0((uint64_t)v6, &qword_100270B80);
  v32 = *(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8);
  v33 = v64;
  v34 = v32(v11, v64);
  if ((_DWORD)v28 == 1)
  {
    v35 = (uint64_t)v61;
    DockKitIDSMessage.token.getter(v34);
    v36 = type metadata accessor for DockKitIDSMessagingError(0);
    v37 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v38 = swift_allocError(v36, v37, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v39, enum case for DockKitIDSMessagingError.notRegistered(_:), v36);
    sub_100198AE8(v35, v38);
    v32((_BYTE *)v35, v33);
    v40 = swift_errorRelease(v38);
LABEL_5:
    swift_willThrow(v40);
    return;
  }
  v44 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  v45 = PropertyListEncoder.init()();
  v67 = _swiftEmptyArrayStorage;
  v46 = sub_10009061C(&qword_100270C18);
  v47 = sub_10019F920();
  v48 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v67, v46, v47);
  v50 = v49;
  swift_release(v45);
  if (!v30)
  {
    v51 = *(void **)(v26 + qword_100270AF0);
    if (v51)
    {
      v57(v19, v56, v12);
      type metadata accessor for DockKitIDSClient(0);
      v52 = v51;
      v53 = v61;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      sub_10009B27C(v48, v50);
      v54 = v58;
      DockKitIDSMessage.init(type:token:payload:)(v19, v53, v48, v50);
      DKIDSMessagingCenter.send(_:)(v54);
      (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v54, v60);
      sub_10009B2FC(v48, v50);

    }
    else
    {
      sub_10009B2FC(v48, v50);
    }
  }
}

uint64_t sub_100198AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  char *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = a1;
  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  __chkstk_darwin(v3);
  v38 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DockKitIDSMessageType(0);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DockKitIDSMessage(0);
  v36 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DockKitIDSMessagingError(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  v41 = a2;
  swift_errorRetain(a2);
  v18 = sub_10009061C(&qword_10026CF70);
  v19 = swift_dynamicCast(v17, &v41, v18, v11, 6);
  v39 = v8;
  if ((v19 & 1) != 0)
  {
    v20 = *(void (**)(char *, uint64_t))(v12 + 8);
    v20(v17, v11);
    v21 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v22 = PropertyListEncoder.init()();
    v41 = a2;
    swift_errorRetain(a2);
    swift_dynamicCast(v15, &v41, v18, v11, 7);
    v23 = sub_100090E1C(&qword_100270C48, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v15, v11, v23);
    v26 = v25;
    swift_release(v22);
    v20(v15, v11);
  }
  else
  {
    v24 = 0;
    v26 = 0xF000000000000000;
  }
  v27 = *(void **)(v40 + qword_100270AF0);
  if (v27)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v7, enum case for DockKitIDSMessageType.ack(_:), v33);
    v28 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v38, v37, v35);
    v29 = v27;
    sub_10009E38C(v24, v26);
    DockKitIDSMessage.init(type:token:payload:)(v7, v28, v24, v26);
    DKIDSMessagingCenter.send(_:)(v10);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v39);
    sub_10009E3A0(v24, v26);

  }
  else
  {
    sub_10009E3A0(v24, v26);
  }
  swift_errorRetain(a2);
  return a2;
}

void sub_100198E28(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  char *v72;
  id v73;
  char *v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  void (*v105)(char *, unint64_t, uint64_t);
  char v106[24];
  uint64_t v107;

  v86 = a1;
  v2 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v85 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for DockKitIDSMessageType(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DockKitIDSMessage(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_10009061C(&qword_100270C38);
  v7 = __chkstk_darwin(v97);
  v77 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v76 - v10;
  v12 = __chkstk_darwin(v9);
  v95 = (char *)&v76 - v13;
  v14 = __chkstk_darwin(v12);
  v103 = (uint64_t)&v76 - v15;
  __chkstk_darwin(v14);
  v93 = v1;
  v94 = (char *)&v76 - v16;
  v17 = (uint64_t *)(v1 + qword_100270AF8);
  swift_beginAccess(v17, v106, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(*v17 + 64);
  v87 = *v17 + 64;
  v20 = 1 << *(_BYTE *)(v18 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v92 = qword_100270AF0;
  v88 = (unint64_t)(v20 + 63) >> 6;
  v80 = enum case for DockKitIDSMessageType.info(_:);
  v98 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v23.n128_u64[0] = 138412290;
  v76 = v23;
  v91 = v2;
  v96 = v11;
  v81 = v6;
  while (1)
  {
    if (v22)
    {
      v100 = (v22 - 1) & v22;
      v101 = v24;
      v25 = __clz(__rbit64(v22)) | (v24 << 6);
      goto LABEL_19;
    }
    v26 = __OFADD__(v24, 1);
    v27 = v24 + 1;
    if (v26)
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v27 >= v88)
      goto LABEL_34;
    v28 = *(_QWORD *)(v87 + 8 * v27);
    if (!v28)
      break;
LABEL_18:
    v100 = (v28 - 1) & v28;
    v101 = v27;
    v25 = __clz(__rbit64(v28)) + (v27 << 6);
LABEL_19:
    v30 = v98;
    v31 = v99;
    v32 = *(_QWORD *)(v98 + 48) + *(_QWORD *)(v99 + 72) * v25;
    v33 = v94;
    v34 = v2;
    v105 = *(void (**)(char *, unint64_t, uint64_t))(v99 + 16);
    v105(v94, v32, v2);
    v35 = *(_QWORD *)(v30 + 56);
    v36 = type metadata accessor for DockKitIDSInfo(0);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = v35 + *(_QWORD *)(v37 + 72) * v25;
    v39 = v97;
    v40 = &v33[*(int *)(v97 + 48)];
    v104 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    v104(v40, v38, v36);
    v41 = v103;
    v42 = v33;
    v43 = v103 + *(int *)(v39 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v103, v42, v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v43, v40, v36);
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v44 = type metadata accessor for Logger(0);
    sub_10008EA50(v44, (uint64_t)qword_100270AB8);
    v45 = (uint64_t)v95;
    v46 = &v95[*(int *)(v39 + 48)];
    v105(v95, v41, v34);
    v102 = v43;
    v104(v46, v43, v36);
    v47 = (uint64_t)v96;
    v48 = sub_1000D55A0(v45, (uint64_t)v96, &qword_100270C38);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (_DWORD *)swift_slowAlloc(12, -1);
      v89 = v51;
      v90 = swift_slowAlloc(8, -1);
      *v51 = v76.n128_u32[0];
      v52 = *(int *)(v39 + 48);
      v53 = v47;
      v54 = v77;
      v55 = &v77[v52];
      v56 = v53 + v52;
      v105(v77, v53, v34);
      v57 = ((uint64_t (*)(char *, uint64_t, uint64_t))v104)(v55, v56, v36);
      v58 = DockKitIDSInfo.info.getter(v57);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v55, v36);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v34);
      v60 = (uint8_t *)v89;
      v59 = (_QWORD *)v90;
      *(_QWORD *)(v89 + 1) = v58;
      *v59 = v58;
      sub_10009B2C0(v53, &qword_100270C38);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Sending INFO for accessory %@", v60, 0xCu);
      v61 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v59, 1, v61);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      sub_10009B2C0(v47, &qword_100270C38);
    }

    v62 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    v63 = PropertyListEncoder.init()();
    v64 = sub_100090E1C(&qword_100270C40, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSInfo, (uint64_t)&protocol conformance descriptor for DockKitIDSInfo);
    v65 = v107;
    v66 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v102, v36, v64);
    v68 = v67;
    swift_release(v63);
    v107 = v65;
    v69 = v103;
    if (v65)
      goto LABEL_33;
    v70 = *(void **)(v93 + v92);
    if (v70)
    {
      v71 = v82;
      (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, v80, v84);
      v72 = v85;
      v2 = v91;
      v105(v85, v86, v91);
      v73 = v70;
      sub_10009B27C(v66, v68);
      v74 = v81;
      DockKitIDSMessage.init(type:token:payload:)(v71, v72, v66, v68);
      v75 = v107;
      DKIDSMessagingCenter.send(_:)(v74);
      v107 = v75;
      if (v75)
      {

        sub_10009B2FC(v66, v68);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v79);
LABEL_33:
        sub_10009B2C0(v69, &qword_100270C38);
LABEL_34:
        swift_release(v98);
        return;
      }

      sub_10009B2FC(v66, v68);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v79);
      sub_10009B2C0(v69, &qword_100270C38);
    }
    else
    {
      sub_10009B2C0(v103, &qword_100270C38);
      sub_10009B2FC(v66, v68);
      v2 = v91;
    }
    v22 = v100;
    v24 = v101;
  }
  v29 = v27 + 1;
  if (v27 + 1 >= v88)
    goto LABEL_34;
  v28 = *(_QWORD *)(v87 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v29 = v27 + 2;
  if (v27 + 2 >= v88)
    goto LABEL_34;
  v28 = *(_QWORD *)(v87 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v29 = v27 + 3;
  if (v27 + 3 >= v88)
    goto LABEL_34;
  v28 = *(_QWORD *)(v87 + 8 * v29);
  if (v28)
  {
LABEL_17:
    v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v88)
      goto LABEL_34;
    v28 = *(_QWORD *)(v87 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_18;
  }
LABEL_36:
  __break(1u);
}

void sub_1001995EC()
{
  _swift_stdlib_reportUnimplementedInitializer("dockaccessoryd.DockIDSServer", 28, "init()", 6, 0);
  __break(1u);
}

void sub_100199618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100270B58)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100270B58);
  }
}

uint64_t sub_10019966C()
{
  return type metadata accessor for DockIDSServer(0);
}

uint64_t sub_10019967C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  DockKitIDSMessage.token.getter(v4);
  v7 = static UUID.== infix(_:_:)(a1, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7 & 1;
}

void sub_10019971C(char a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v3 = type metadata accessor for Logger(0);
    sub_10008EA50(v3, (uint64_t)qword_100270AB8);
    v16 = a2;
    v4 = Logger.logObject.getter(v16);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v18 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = -[NSObject localizedDescription](v16, "localizedDescription");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v17 = sub_1000906BC(v9, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);

      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to set actuator velocities: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      return;
    }

    goto LABEL_13;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10008EA50(v12, (uint64_t)qword_100270AB8);
    v16 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v14, "Unable to set actuator velocities!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
LABEL_13:

  }
}

uint64_t sub_1001999C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 32) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
  *(_QWORD *)(v4 + 40) = v5;
  *v5 = v4;
  v5[1] = sub_100199A0C;
  return sub_1000DFA04();
}

uint64_t sub_100199A0C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100199A60, 0, 0);
}

uint64_t sub_100199A60()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  Class v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  *(_QWORD *)(v0 + 48) = v1;
  if (v1)
  {
    swift_retain(v1);
    v2 = sub_1001B243C((uint64_t)_swiftEmptyArrayStorage);
    sub_100090EE8(0, &qword_10026C380, NSNumber_ptr);
    isa = NSNumber.init(integerLiteral:)(5242880).super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1001BC6C8((uint64_t)isa, 0x6953676F4C78616DLL, 0xEA0000000000657ALL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = NSNumber.init(integerLiteral:)(2).super.super.isa;
    v6 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1001BC6C8((uint64_t)v5, 0x746F687370616E73, 0xEC00000065707954, v6);
    swift_bridgeObjectRelease(0x8000000000000000);
    v8 = type metadata accessor for AccessoryDiagnosticsOptions(0, v7);
    swift_allocObject(v8, 58, 7);
    v9 = sub_1000ED910(v2);
    *(_QWORD *)(v0 + 56) = v9;
    v10 = (_QWORD *)swift_task_alloc(dword_10026CC04);
    *(_QWORD *)(v0 + 64) = v10;
    *v10 = v0;
    v10[1] = sub_100199C64;
    return sub_1000BD554(v9);
  }
  else
  {
    v12 = type metadata accessor for DockKitIDSMessagingError(0);
    v13 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v12, v13, 0, 0);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v12);
    swift_willThrow(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100199C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100199EB8;
  else
    v6 = sub_100199CD4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100199CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10008EA50(v2, (uint64_t)qword_100270AB8);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 56);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 24) = sub_1000906BC(v8, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Diagnostic logs saved to %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_release(v14);
    swift_release(v15);

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 80), 2);
    swift_release(v11);

    swift_release(v12);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100199EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_10008EA50(v2, (uint64_t)qword_100270AB8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v14 = *(_QWORD *)(v0 + 56);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Diagnostics transfer failed: %@", v9, 0xCu);
    v12 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_release(v8);
    swift_release(v14);

    swift_errorRelease(v7);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 56));
    swift_release(v8);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10019A0B0(void **a1, double a2, double a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  Class v18;
  double v19;
  uint64_t v20;

  v10 = *a1;
  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v11 = type metadata accessor for Logger(0);
  sub_10008EA50(v11, (uint64_t)qword_100270AB8);
  v12 = swift_bridgeObjectRetain_n(a6, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(32, -1);
    v16 = swift_slowAlloc(32, -1);
    v20 = v16;
    *(_DWORD *)v15 = 136315650;
    swift_bridgeObjectRetain(a6);
    v19 = COERCE_DOUBLE(sub_1000906BC(a5, a6, &v20));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a6, 3);
    *(_WORD *)(v15 + 12) = 2048;
    v19 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2048;
    v19 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 24, v15 + 32);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Notifying client that %s just set subject selection to %f, %f", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a6, 2);
  }
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v18 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v10, "selectSubjectAtEventWithX:y:", isa, v18);

}

void sub_10019A2D0(char a1, void *a2, const char *a3, const char *a4)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    v5 = qword_10026BC10;
    v6 = a2;
    if (v5 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v7 = type metadata accessor for Logger(0);
    sub_10008EA50(v7, (uint64_t)qword_100270AB8);
    v22 = v6;
    v8 = Logger.logObject.getter(v22);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v24 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = -[NSObject localizedDescription](v22, "localizedDescription");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v23 = sub_1000906BC(v13, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a3, v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10008EA50(v18, (uint64_t)qword_100270AB8);
    v22 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 67109120;
      LODWORD(v24) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v21 + 4, v21 + 8);
      _os_log_impl((void *)&_mh_execute_header, v22, v20, a4, v21, 8u);
      swift_slowDealloc(v21, -1, -1);

      return;
    }
  }

}

uint64_t sub_10019A5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), const char *a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  _BYTE v25[24];

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  result = a4(a2, a3);
  if (result)
  {
    sub_1000B1410(result, v12);
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10008EA50(v13, (uint64_t)qword_100270AB8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, a5, v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = qword_100275638;
    v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v20 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v20);
    os_unfair_lock_lock(v20 + 4);
    swift_release(v20);
    swift_beginAccess(v18 + *a6, v25, 33, 0);
    v21 = sub_1001B3F64(a2, a3);
    v23 = v22;
    swift_endAccess(v25);
    if (v21)
      sub_1000B1410(v21, v23);
    v24 = *(os_unfair_lock_s **)(v18 + v19);
    swift_retain(v24);
    os_unfair_lock_unlock(v24 + 4);
    return swift_release(v24);
  }
  return result;
}

void sub_10019A788(id *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;

  v13 = type metadata accessor for TrajectoryCommand(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v38 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - v17;
  v39 = *a1;
  if (qword_10026BC10 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v19 = type metadata accessor for Logger(0);
  sub_10008EA50(v19, (uint64_t)qword_100270AB8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20(v18, a5, v13);
  v21 = swift_bridgeObjectRetain_n(a4, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v36 = a6;
    v25 = v24;
    v35 = swift_slowAlloc(64, -1);
    v41 = v35;
    *(_DWORD *)v25 = 136315394;
    v37 = a7;
    swift_bridgeObjectRetain(a4);
    v40 = sub_1000906BC(a3, a4, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 4, v25 + 12);
    v26 = swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v25 + 12) = 2080;
    v27 = v38;
    ((void (*)(char *, char *, uint64_t, __n128))v20)(v38, v18, v13, v26);
    v28 = String.init<A>(describing:)(v27, v13);
    v30 = v29;
    v40 = sub_1000906BC(v28, v29, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Notifying client that %s just sent a trajectory: %s ", (uint8_t *)v25, 0x16u);
    v31 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    v32 = swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v18, v13, v32);
  }

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v39, "sendCommandEventWithCommand:", isa);

}

uint64_t sub_10019AA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10019AA74, 0, 0);
}

uint64_t sub_10019AA74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = TrajectoryCommand.encode()(a1);
  *(_QWORD *)(v1 + 32) = v3;
  if (v3 >> 60 == 15)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v5 = v2;
  v6 = v3;
  v7 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 40) = v2;
  v8 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v1 + 48) = v8;
  v8[2] = v7;
  v8[3] = v5;
  v8[4] = v6;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 56) = v9;
  *v9 = v1;
  v9[1] = sub_10019AB68;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 64, 0, 0, 0xD000000000000012, 0x80000001001FF9F0, sub_1001149E0, v8, &type metadata for Bool);
}

uint64_t sub_10019AB68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10019ABC4, 0, 0);
}

uint64_t sub_10019ABC4()
{
  uint64_t v0;

  sub_10009E3A0(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10019ABF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];
  uint64_t v15;

  if (a2)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v3 = type metadata accessor for Logger(0);
    sub_10008EA50(v3, (uint64_t)qword_100270AB8);
    swift_errorRetain(a2);
    v4 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v15 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_getErrorValue(a2, v14, v13);
      v8 = Error.localizedDescription.getter(v13[1], v13[2]);
      v10 = v9;
      v12 = sub_1000906BC(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Unable to launch camera app: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
}

uint64_t sub_10019ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019AE30, 0, 0);
}

uint64_t sub_10019AE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v2 = *(_QWORD *)(v1 + 16);
  v3 = 1000000000000000000 * v2;
  v4 = ((v2 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v2 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()(a1);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100270C08 + dword_100270C08);
  v5 = (_QWORD *)swift_task_alloc(unk_100270C0C);
  *(_QWORD *)(v1 + 48) = v5;
  *v5 = v1;
  v5[1] = sub_10019AEDC;
  return v7(v3, v4, 0, 0, 1);
}

uint64_t sub_10019AEDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *(_QWORD *)(*v1 + 32);
  v6 = *v1;
  *(_QWORD *)(v6 + 56) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_10019AF7C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10019AF7C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019AFB0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10019B014;
  return v6(a1);
}

uint64_t sub_10019B014()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10019B060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10019B104, 0, 0);
}

uint64_t sub_10019B104()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100090E1C(&qword_1002701B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100090E1C(&qword_100270C10, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_10019B21C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_10019B21C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_10019B2C8, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10019B2C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B304(uint64_t a1)
{
  return sub_10019967C(a1) & 1;
}

Swift::Int sub_10019B320(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[9];

  v42 = a1;
  v7 = type metadata accessor for BTDiscoveredDevice(0);
  v45 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v44 = (char *)&v40 - v10;
  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (Swift::Int)a4;
  }
  v43 = v9;
  sub_10009061C(&qword_100270C60);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v12 = result;
  v41 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v42;
  v14 = 0;
  v15 = result + 64;
  v16 = v43;
  v17 = (uint64_t)v44;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v46 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v41)
        return v12;
      v21 = v42[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v41)
          return v12;
        v21 = v42[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v41)
            return v12;
          v21 = v42[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v41)
              return v12;
            v21 = v42[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v41)
                  return v12;
                v21 = v42[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v46 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = a4[7];
    v25 = a4;
    v26 = (uint64_t *)(a4[6] + 16 * v19);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v45 + 72);
    sub_1000D537C(v24 + v29 * v19, v17);
    sub_10019FB98(v17, v16);
    Hasher.init(_seed:)(v47);
    swift_bridgeObjectRetain(v27);
    String.hash(into:)(v47, v28, v27);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v16 = v43;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      v16 = v43;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v37 == -1);
      v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v38 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v33);
    *v38 = v28;
    v38[1] = v27;
    result = sub_10019FB98(v16, *(_QWORD *)(v12 + 56) + v33 * v29);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v25;
    v14 = v46;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10019B664(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_10009061C((uint64_t *)&unk_100271560);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v19);
    swift_retain(v21);
    String.hash(into:)(v34, v20, v19);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10019B8FC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v50 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v50 - 8);
  v8 = __chkstk_darwin(v50);
  v49 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - v10;
  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_10009061C((uint64_t *)&unk_1002714A0);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v12 = result;
  v41 = a1;
  v42 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 64;
  v43 = a4;
  v16 = v50;
  while (1)
  {
    if (v13)
    {
      v46 = (v13 - 1) & v13;
      v47 = v14;
      v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v42)
        return v12;
      v19 = v41[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v42)
          return v12;
        v19 = v41[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v42)
            return v12;
          v19 = v41[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v42)
              return v12;
            v19 = v41[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v42)
                  return v12;
                v19 = v41[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v46 = (v19 - 1) & v19;
      v47 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = v44;
    v23 = v45;
    v24 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v44, a4[6] + v24 * v17, v16);
    v25 = (uint64_t *)(a4[7] + 16 * v17);
    v26 = v25[1];
    v48 = *v25;
    v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v27(v49, v22, v16);
    v28 = *(_QWORD *)(v12 + 40);
    v29 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = swift_bridgeObjectRetain(v26);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v16, v29, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(_QWORD *)(v12 + 48) + v34 * v24, v49, v50);
    v39 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v34);
    *v39 = v48;
    v39[1] = v26;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v43;
    v13 = v46;
    v14 = v47;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10019BC58(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = a2(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v11[0] = v6 + 32;
  v11[1] = v8;
  v9 = a3(v11);
  return specialized ContiguousArray._endMutation()(v9);
}

Swift::Int sub_10019BCE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t *v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t *v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t *v41;
  Swift::Int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  Swift::Int v117;
  Swift::Int v118;
  Swift::Int v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_10019CCF4(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v6 = result;
  v114 = v2;
  if (v3 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v124 = (uint64_t)_swiftEmptyArrayStorage;
    v120 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_115:
      if (v14 >= 2)
      {
        v104 = *v114;
        do
        {
          v105 = v14 - 2;
          if (v14 < 2)
            goto LABEL_147;
          if (!v104)
            goto LABEL_159;
          v97 = v11;
          v106 = v11 + 32;
          v107 = *(_QWORD *)&v11[16 * v105 + 32];
          v108 = *(_QWORD *)&v11[16 * v14 + 24];
          sub_10019CF38((char *)(v104 + 8 * v107), (char *)(v104 + 8 * *(_QWORD *)&v106[16 * v14 - 16]), (char *)(v104 + 8 * v108), v120);
          if (v1)
            goto LABEL_127;
          if (v108 < v107)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
            v97 = sub_1001A89A8((uint64_t)v97);
          if (v105 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v109 = &v97[16 * v105 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v97 + 2);
          if (v14 > v110)
            goto LABEL_150;
          v11 = v97;
          memmove(&v97[16 * v14 + 16], &v97[16 * v14 + 32], 16 * (v110 - v14));
          *((_QWORD *)v97 + 2) = v110 - 1;
          v14 = v110 - 1;
        }
        while (v110 > 2);
      }
      v111 = v11;
LABEL_129:
      v112 = swift_bridgeObjectRelease(v111);
      *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v112);
      return swift_bridgeObjectRelease(v124);
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    v9 = type metadata accessor for DKPersonTrackerState(0);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v120 = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v124 = v10;
  }
  v12 = 0;
  v13 = *v2;
  v115 = *v2 + 16;
  v116 = *v2 - 8;
  v117 = v6;
  v11 = (char *)_swiftEmptyArrayStorage;
  v119 = v3;
  v121 = *v2;
  while (1)
  {
    v15 = v12++;
    if (v12 >= v3)
      goto LABEL_46;
    v16 = *(_QWORD *)(v13 + 8 * v12);
    v17 = *(_QWORD *)(v13 + 8 * v15);
    swift_retain(v16);
    v18 = swift_retain(v17);
    v19 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v18);
    dispatch thunk of DKProbabilityValue.variable.getter(&v123);
    v20 = swift_release(v19);
    v21 = v123;
    v22 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v20);
    dispatch thunk of DKProbabilityValue.variable.getter(&v122);
    swift_release(v16);
    swift_release(v17);
    swift_release(v22);
    v24 = v21 >= 1 && (v122 < 1 || v21 < v122);
    v12 = v15 + 2;
    v13 = v121;
    if (v15 + 2 >= v119)
    {
LABEL_36:
      if (!v24)
        goto LABEL_46;
LABEL_39:
      if (v12 < v15)
        goto LABEL_153;
      if (v15 < v12)
      {
        v35 = (uint64_t *)(v116 + 8 * v12);
        v36 = v12;
        v37 = v15;
        v38 = (uint64_t *)(v13 + 8 * v15);
        while (1)
        {
          if (v37 != --v36)
          {
            if (!v13)
              goto LABEL_158;
            v39 = *v38;
            *v38 = *v35;
            *v35 = v39;
          }
          ++v37;
          --v35;
          ++v38;
          if (v37 >= v36)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
    v25 = (_QWORD *)(v115 + 8 * v15);
    do
    {
      v27 = *(v25 - 1);
      v26 = *v25;
      swift_retain(*v25);
      v28 = swift_retain(v27);
      v29 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v28);
      dispatch thunk of DKProbabilityValue.variable.getter(&v123);
      v30 = swift_release(v29);
      v31 = v123;
      v32 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v30);
      dispatch thunk of DKProbabilityValue.variable.getter(&v122);
      swift_release(v26);
      swift_release(v27);
      swift_release(v32);
      if (v31 <= 0)
      {
        v13 = v121;
        if ((v24 & 1) != 0)
          goto LABEL_39;
      }
      else
      {
        v34 = v122 < 1 || v31 < v122;
        v13 = v121;
        if (v24 != v34)
          goto LABEL_36;
      }
      ++v12;
      ++v25;
    }
    while (v119 != v12);
    v12 = v119;
    if (v24)
      goto LABEL_39;
LABEL_46:
    v40 = v119;
    if (v12 >= v119)
      goto LABEL_67;
    if (__OFSUB__(v12, v15))
      goto LABEL_151;
    if (v12 - v15 >= v117)
      goto LABEL_67;
    if (__OFADD__(v15, v117))
      goto LABEL_154;
    if (v15 + v117 < v119)
      v40 = v15 + v117;
    if (v40 < v15)
      break;
    if (v12 != v40)
    {
      v118 = v15;
      v113 = v11;
      v41 = (uint64_t *)(v116 + 8 * v12);
      do
      {
        v42 = v40;
        v43 = *(_QWORD *)(v13 + 8 * v12);
        v44 = v118;
        v45 = v41;
        while (1)
        {
          v46 = *v45;
          swift_retain(v43);
          v47 = swift_retain(v46);
          v48 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v47);
          dispatch thunk of DKProbabilityValue.variable.getter(&v123);
          v49 = swift_release(v48);
          v50 = v123;
          v51 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v49);
          dispatch thunk of DKProbabilityValue.variable.getter(&v122);
          swift_release(v43);
          swift_release(v46);
          swift_release(v51);
          if (v50 < 1)
            break;
          if (v122 <= 0)
          {
            v13 = v121;
            if (!v121)
              goto LABEL_156;
          }
          else
          {
            v13 = v121;
            if (v50 >= (unint64_t)v122)
              goto LABEL_56;
            if (!v121)
              goto LABEL_156;
          }
          v52 = *v45;
          v43 = v45[1];
          *v45 = v43;
          v45[1] = v52;
          --v45;
          if (v12 == ++v44)
            goto LABEL_56;
        }
        v13 = v121;
LABEL_56:
        ++v12;
        ++v41;
        v40 = v42;
      }
      while (v12 != v42);
      v12 = v42;
      v11 = v113;
      v15 = v118;
    }
LABEL_67:
    if (v12 < v15)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001A85E8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v54 = *((_QWORD *)v11 + 2);
    v53 = *((_QWORD *)v11 + 3);
    v14 = v54 + 1;
    v13 = v121;
    if (v54 >= v53 >> 1)
    {
      v103 = sub_1001A85E8((char *)(v53 > 1), v54 + 1, 1, v11);
      v13 = v121;
      v11 = v103;
    }
    *((_QWORD *)v11 + 2) = v14;
    v55 = v11 + 32;
    v56 = &v11[16 * v54 + 32];
    *(_QWORD *)v56 = v15;
    *((_QWORD *)v56 + 1) = v12;
    if (v54)
    {
      while (1)
      {
        v57 = v14 - 1;
        if (v14 >= 4)
        {
          v62 = &v55[16 * v14];
          v63 = *((_QWORD *)v62 - 8);
          v64 = *((_QWORD *)v62 - 7);
          v68 = __OFSUB__(v64, v63);
          v65 = v64 - v63;
          if (v68)
            goto LABEL_135;
          v67 = *((_QWORD *)v62 - 6);
          v66 = *((_QWORD *)v62 - 5);
          v68 = __OFSUB__(v66, v67);
          v60 = v66 - v67;
          v61 = v68;
          if (v68)
            goto LABEL_136;
          v69 = v14 - 2;
          v70 = &v55[16 * v14 - 32];
          v72 = *(_QWORD *)v70;
          v71 = *((_QWORD *)v70 + 1);
          v68 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v68)
            goto LABEL_138;
          v68 = __OFADD__(v60, v73);
          v74 = v60 + v73;
          if (v68)
            goto LABEL_141;
          if (v74 >= v65)
          {
            v92 = &v55[16 * v57];
            v94 = *(_QWORD *)v92;
            v93 = *((_QWORD *)v92 + 1);
            v68 = __OFSUB__(v93, v94);
            v95 = v93 - v94;
            if (v68)
              goto LABEL_145;
            v85 = v60 < v95;
            goto LABEL_104;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v86 = *((_QWORD *)v11 + 4);
            v87 = *((_QWORD *)v11 + 5);
            v68 = __OFSUB__(v87, v86);
            v79 = v87 - v86;
            v80 = v68;
            goto LABEL_98;
          }
          v59 = *((_QWORD *)v11 + 4);
          v58 = *((_QWORD *)v11 + 5);
          v68 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          v61 = v68;
        }
        if ((v61 & 1) != 0)
          goto LABEL_137;
        v69 = v14 - 2;
        v75 = &v55[16 * v14 - 32];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v78 = __OFSUB__(v76, v77);
        v79 = v76 - v77;
        v80 = v78;
        if (v78)
          goto LABEL_140;
        v81 = &v55[16 * v57];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v68 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v68)
          goto LABEL_143;
        if (__OFADD__(v79, v84))
          goto LABEL_144;
        if (v79 + v84 >= v60)
        {
          v85 = v60 < v84;
LABEL_104:
          if (v85)
            v57 = v69;
          goto LABEL_106;
        }
LABEL_98:
        if ((v80 & 1) != 0)
          goto LABEL_139;
        v88 = &v55[16 * v57];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v68 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v68)
          goto LABEL_142;
        if (v91 < v79)
          goto LABEL_14;
LABEL_106:
        v96 = v57 - 1;
        if (v57 - 1 >= v14)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        if (!v13)
          goto LABEL_157;
        v97 = v11;
        v98 = &v55[16 * v96];
        v99 = *(_QWORD *)v98;
        v100 = &v55[16 * v57];
        v101 = *((_QWORD *)v100 + 1);
        sub_10019CF38((char *)(v13 + 8 * *(_QWORD *)v98), (char *)(v13 + 8 * *(_QWORD *)v100), (char *)(v13 + 8 * v101), v120);
        if (v1)
        {
LABEL_127:
          v111 = v97;
          goto LABEL_129;
        }
        if (v101 < v99)
          goto LABEL_132;
        if (v57 > *((_QWORD *)v97 + 2))
          goto LABEL_133;
        *(_QWORD *)v98 = v99;
        *(_QWORD *)&v55[16 * v96 + 8] = v101;
        v102 = *((_QWORD *)v97 + 2);
        if (v57 >= v102)
          goto LABEL_134;
        v11 = v97;
        v14 = v102 - 1;
        memmove(&v55[16 * v57], v100 + 16, 16 * (v102 - 1 - v57));
        *((_QWORD *)v97 + 2) = v102 - 1;
        v13 = v121;
        if (v102 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v3 = v119;
    if (v12 >= v119)
      goto LABEL_115;
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_10019C4E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  _BOOL4 v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  Swift::Int v116;
  Swift::Int v117;
  Swift::Int v118;
  char *v119;
  Swift::Int v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_165;
    if (v3)
      return sub_10019CE18(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_173;
  v6 = result;
  v114 = v2;
  if (v3 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v123 = (uint64_t)_swiftEmptyArrayStorage;
    v121 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_131:
      if (v14 >= 2)
      {
        v107 = *v114;
        do
        {
          v108 = v14 - 2;
          if (v14 < 2)
            goto LABEL_160;
          if (!v107)
            goto LABEL_172;
          v109 = *(_QWORD *)&v11[16 * v108 + 32];
          v110 = *(_QWORD *)&v11[16 * v14 + 24];
          sub_10019D29C((char *)(v107 + 8 * v109), (char *)(v107 + 8 * *(_QWORD *)&v11[16 * v14 + 16]), v107 + 8 * v110, v121);
          if (v1)
            break;
          if (v110 < v109)
            goto LABEL_161;
          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
            v11 = sub_1001A89A8((uint64_t)v11);
          if (v108 >= *((_QWORD *)v11 + 2))
            goto LABEL_162;
          v111 = &v11[16 * v108 + 32];
          *(_QWORD *)v111 = v109;
          *((_QWORD *)v111 + 1) = v110;
          v112 = *((_QWORD *)v11 + 2);
          if (v14 > v112)
            goto LABEL_163;
          memmove(&v11[16 * v14 + 16], &v11[16 * v14 + 32], 16 * (v112 - v14));
          *((_QWORD *)v11 + 2) = v112 - 1;
          v14 = v112 - 1;
        }
        while (v112 > 2);
      }
LABEL_142:
      v113 = swift_bridgeObjectRelease(v11);
      *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v113);
      return swift_bridgeObjectRelease(v123);
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    v9 = type metadata accessor for TrackedSubjectInternal(0);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v121 = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v123 = v10;
  }
  v12 = 0;
  v13 = *v2;
  v115 = *v2 - 8;
  v116 = v6;
  v11 = (char *)_swiftEmptyArrayStorage;
  v120 = v3;
  v122 = *v2;
LABEL_15:
  v15 = v12++;
  v119 = v11;
  if (v12 >= v3)
    goto LABEL_57;
  v16 = *(_QWORD *)(v13 + 8 * v12);
  v17 = *(_QWORD *)(v13 + 8 * v15);
  swift_retain(v16);
  v18 = swift_retain(v17);
  v19 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v18);
  if ((v20 & 1) != 0)
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  v22 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v19);
  v24 = v23;
  swift_release(v16);
  swift_release(v17);
  if ((v24 & 1) == 0)
  {
    v13 = v122;
    if (v21 <= 0)
      goto LABEL_28;
    if (v22 < 1)
    {
      v25 = 1;
LABEL_26:
      v26 = v15 + 2;
      v11 = v119;
      if (v15 + 2 < v120)
        goto LABEL_30;
LABEL_44:
      v12 = v26;
      if (v25)
        goto LABEL_47;
LABEL_57:
      v42 = v120;
      if (v12 >= v120)
        goto LABEL_82;
      if (__OFSUB__(v12, v15))
        goto LABEL_164;
      if (v12 - v15 >= v116)
        goto LABEL_82;
      if (__OFADD__(v15, v116))
        goto LABEL_166;
      if (v15 + v116 < v120)
        v42 = v15 + v116;
      if (v42 < v15)
      {
LABEL_167:
        __break(1u);
        goto LABEL_168;
      }
      if (v12 == v42)
        goto LABEL_82;
      v43 = (uint64_t *)(v115 + 8 * v12);
      v117 = v42;
      v118 = v15;
LABEL_68:
      v44 = *(_QWORD *)(v13 + 8 * v12);
      v45 = v15;
      v46 = v43;
      while (1)
      {
        v47 = *v46;
        swift_retain(v44);
        v48 = swift_retain(v47);
        v49 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v48);
        if ((v50 & 1) != 0)
          v51 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        v52 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v49);
        v54 = v53;
        swift_release(v44);
        swift_release(v47);
        if ((v54 & 1) != 0)
        {
          v13 = v122;
          if ((unint64_t)(v51 - 1) >= 0x7FFFFFFFFFFFFFFELL)
            goto LABEL_67;
        }
        else
        {
          if (v51 <= 0)
          {
            v13 = v122;
LABEL_67:
            ++v12;
            ++v43;
            v15 = v118;
            if (v12 != v117)
              goto LABEL_68;
            v12 = v117;
            v11 = v119;
LABEL_82:
            if (v12 < v15)
              goto LABEL_159;
            if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
              v11 = sub_1001A85E8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
            v57 = *((_QWORD *)v11 + 2);
            v56 = *((_QWORD *)v11 + 3);
            v14 = v57 + 1;
            v13 = v122;
            if (v57 >= v56 >> 1)
            {
              v106 = sub_1001A85E8((char *)(v56 > 1), v57 + 1, 1, v11);
              v13 = v122;
              v11 = v106;
            }
            *((_QWORD *)v11 + 2) = v14;
            v58 = v11 + 32;
            v59 = &v11[16 * v57 + 32];
            *(_QWORD *)v59 = v15;
            *((_QWORD *)v59 + 1) = v12;
            if (v57)
            {
              while (2)
              {
                v60 = v14 - 1;
                if (v14 >= 4)
                {
                  v65 = &v58[16 * v14];
                  v66 = *((_QWORD *)v65 - 8);
                  v67 = *((_QWORD *)v65 - 7);
                  v71 = __OFSUB__(v67, v66);
                  v68 = v67 - v66;
                  if (v71)
                    goto LABEL_148;
                  v70 = *((_QWORD *)v65 - 6);
                  v69 = *((_QWORD *)v65 - 5);
                  v71 = __OFSUB__(v69, v70);
                  v63 = v69 - v70;
                  v64 = v71;
                  if (v71)
                    goto LABEL_149;
                  v72 = v14 - 2;
                  v73 = &v58[16 * v14 - 32];
                  v75 = *(_QWORD *)v73;
                  v74 = *((_QWORD *)v73 + 1);
                  v71 = __OFSUB__(v74, v75);
                  v76 = v74 - v75;
                  if (v71)
                    goto LABEL_151;
                  v71 = __OFADD__(v63, v76);
                  v77 = v63 + v76;
                  if (v71)
                    goto LABEL_154;
                  if (v77 >= v68)
                  {
                    v95 = &v58[16 * v60];
                    v97 = *(_QWORD *)v95;
                    v96 = *((_QWORD *)v95 + 1);
                    v71 = __OFSUB__(v96, v97);
                    v98 = v96 - v97;
                    if (v71)
                      goto LABEL_158;
                    v88 = v63 < v98;
                  }
                  else
                  {
LABEL_101:
                    if ((v64 & 1) != 0)
                      goto LABEL_150;
                    v72 = v14 - 2;
                    v78 = &v58[16 * v14 - 32];
                    v80 = *(_QWORD *)v78;
                    v79 = *((_QWORD *)v78 + 1);
                    v81 = __OFSUB__(v79, v80);
                    v82 = v79 - v80;
                    v83 = v81;
                    if (v81)
                      goto LABEL_153;
                    v84 = &v58[16 * v60];
                    v86 = *(_QWORD *)v84;
                    v85 = *((_QWORD *)v84 + 1);
                    v71 = __OFSUB__(v85, v86);
                    v87 = v85 - v86;
                    if (v71)
                      goto LABEL_156;
                    if (__OFADD__(v82, v87))
                      goto LABEL_157;
                    if (v82 + v87 < v63)
                      goto LABEL_113;
                    v88 = v63 < v87;
                  }
                  if (v88)
                    v60 = v72;
                }
                else
                {
                  if (v14 == 3)
                  {
                    v62 = *((_QWORD *)v11 + 4);
                    v61 = *((_QWORD *)v11 + 5);
                    v71 = __OFSUB__(v61, v62);
                    v63 = v61 - v62;
                    v64 = v71;
                    goto LABEL_101;
                  }
                  v89 = *((_QWORD *)v11 + 4);
                  v90 = *((_QWORD *)v11 + 5);
                  v71 = __OFSUB__(v90, v89);
                  v82 = v90 - v89;
                  v83 = v71;
LABEL_113:
                  if ((v83 & 1) != 0)
                    goto LABEL_152;
                  v91 = &v58[16 * v60];
                  v93 = *(_QWORD *)v91;
                  v92 = *((_QWORD *)v91 + 1);
                  v71 = __OFSUB__(v92, v93);
                  v94 = v92 - v93;
                  if (v71)
                    goto LABEL_155;
                  if (v94 < v82)
                    goto LABEL_14;
                }
                v99 = v60 - 1;
                if (v60 - 1 >= v14)
                {
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
                  goto LABEL_167;
                }
                if (!v13)
                  goto LABEL_170;
                v100 = v11;
                v101 = &v58[16 * v99];
                v102 = *(_QWORD *)v101;
                v103 = &v58[16 * v60];
                v104 = *((_QWORD *)v103 + 1);
                sub_10019D29C((char *)(v13 + 8 * *(_QWORD *)v101), (char *)(v13 + 8 * *(_QWORD *)v103), v13 + 8 * v104, v121);
                if (v1)
                {
                  v11 = v100;
                  goto LABEL_142;
                }
                if (v104 < v102)
                  goto LABEL_145;
                if (v60 > *((_QWORD *)v100 + 2))
                  goto LABEL_146;
                *(_QWORD *)v101 = v102;
                *(_QWORD *)&v58[16 * v99 + 8] = v104;
                v105 = *((_QWORD *)v100 + 2);
                if (v60 >= v105)
                  goto LABEL_147;
                v11 = v100;
                v14 = v105 - 1;
                memmove(&v58[16 * v60], v103 + 16, 16 * (v105 - 1 - v60));
                *((_QWORD *)v100 + 2) = v105 - 1;
                v13 = v122;
                if (v105 <= 2)
                  goto LABEL_14;
                continue;
              }
            }
            v14 = 1;
LABEL_14:
            v3 = v120;
            if (v12 >= v120)
              goto LABEL_131;
            goto LABEL_15;
          }
          v13 = v122;
          if (v52 >= 1 && v51 >= v52)
            goto LABEL_67;
        }
        if (!v13)
          goto LABEL_169;
        v55 = *v46;
        v44 = v46[1];
        *v46 = v44;
        v46[1] = v55;
        --v46;
        if (v12 == ++v45)
          goto LABEL_67;
      }
    }
LABEL_25:
    v25 = v21 < (unint64_t)v22;
    goto LABEL_26;
  }
  v13 = v122;
  if (v21 > 0)
  {
    v22 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
LABEL_28:
  v26 = v15 + 2;
  if (v15 + 2 >= v3)
  {
    v12 = v15 + 2;
    v11 = v119;
    goto LABEL_57;
  }
  v25 = 0;
LABEL_30:
  v27 = v26;
  do
  {
    v26 = v27;
    v28 = *(_QWORD *)(v13 + 8 * v27);
    v29 = *(_QWORD *)(v13 + 8 * v12);
    swift_retain(v28);
    v30 = swift_retain(v29);
    v31 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v30);
    if ((v32 & 1) != 0)
      v33 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v34 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v31);
    v36 = v35;
    swift_release(v28);
    swift_release(v29);
    if ((v36 & 1) != 0)
    {
      v11 = v119;
      if (v33 <= 0)
      {
LABEL_31:
        v13 = v122;
        if (v25)
          goto LABEL_47;
        goto LABEL_32;
      }
      v34 = 0x7FFFFFFFFFFFFFFFLL;
      v13 = v122;
    }
    else
    {
      v11 = v119;
      if (v33 <= 0)
        goto LABEL_31;
      v13 = v122;
      if (v34 <= 0)
      {
        if (!v25)
          goto LABEL_55;
        goto LABEL_32;
      }
    }
    if (((v25 ^ (v33 >= (unint64_t)v34)) & 1) == 0)
      goto LABEL_44;
LABEL_32:
    v27 = v26 + 1;
    v12 = v26;
  }
  while (v26 + 1 < v120);
  ++v26;
  v12 = v27;
  if (!v25)
    goto LABEL_57;
LABEL_47:
  if (v26 >= v15)
  {
    if (v15 < v26)
    {
      v37 = (uint64_t *)(v115 + 8 * v26);
      v38 = v26;
      v39 = v15;
      v40 = (uint64_t *)(v13 + 8 * v15);
      do
      {
        if (v39 != --v38)
        {
          if (!v13)
            goto LABEL_171;
          v41 = *v40;
          *v40 = *v37;
          *v37 = v41;
        }
        ++v39;
        --v37;
        ++v40;
      }
      while (v39 < v38);
    }
LABEL_55:
    v12 = v26;
    goto LABEL_57;
  }
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019CCF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(_QWORD *)(v5 + 8 * v4);
    v8 = v18;
    v9 = (uint64_t *)v6;
    while (1)
    {
      v10 = *v9;
      swift_retain(v7);
      v11 = swift_retain(v10);
      v12 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v11);
      dispatch thunk of DKProbabilityValue.variable.getter(&v20);
      v13 = swift_release(v12);
      v14 = v20;
      v15 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v13);
      dispatch thunk of DKProbabilityValue.variable.getter(&v19);
      swift_release(v7);
      swift_release(v10);
      result = swift_release(v15);
      if (v14 < 1 || v19 > 0 && v14 >= (unint64_t)v19)
      {
LABEL_4:
        ++v4;
        v6 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v16 = *v9;
      v7 = v9[1];
      *v9 = v7;
      v9[1] = v16;
      --v9;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10019CE18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v19 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 8 * a3 - 8);
LABEL_5:
    v7 = *(_QWORD *)(v5 + 8 * v4);
    v8 = v19;
    v20 = v6;
    while (1)
    {
      v9 = *v6;
      swift_retain(v7);
      v10 = swift_retain(v9);
      v11 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v10);
      v13 = (v12 & 1) != 0 ? 0x7FFFFFFFFFFFFFFFLL : v11;
      v14 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v11);
      v16 = v15;
      swift_release(v7);
      result = swift_release(v9);
      if ((v16 & 1) != 0)
      {
        if ((unint64_t)(v13 - 1) >= 0x7FFFFFFFFFFFFFFELL)
          goto LABEL_4;
      }
      else if (v13 <= 0 || v14 >= 1 && v13 >= v14)
      {
LABEL_4:
        ++v4;
        v6 = v20 + 1;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v17 = *v6;
      v7 = v6[1];
      *v6 = v7;
      v6[1] = v17;
      --v6;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10019CF38(char *a1, char *__src, char *a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;

  v4 = a3;
  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 7;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 3;
  v9 = a3 - __src;
  v10 = a3 - __src + 7;
  if (a3 - __src >= 0)
    v10 = a3 - __src;
  v11 = v10 >> 3;
  v41 = a1;
  v40 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7)
      goto LABEL_49;
    if (a4 != __src || &__src[8 * v11] <= a4)
      memmove(a4, __src, 8 * v11);
    v23 = &a4[8 * v11];
    v39 = v23;
    v41 = v5;
    if (a1 >= v5 || v9 < 8)
      goto LABEL_48;
    v24 = v5;
    while (1)
    {
      v25 = *((_QWORD *)v23 - 1);
      v26 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      swift_retain(v25);
      v27 = swift_retain(v26);
      v28 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v27);
      dispatch thunk of DKProbabilityValue.variable.getter(&v38);
      v29 = swift_release(v28);
      v30 = v38;
      v31 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v29);
      dispatch thunk of DKProbabilityValue.variable.getter(&v37);
      swift_release(v25);
      swift_release(v26);
      swift_release(v31);
      if (v30 <= 0)
        break;
      v32 = v4 - 8;
      if (v37 >= 1 && v30 >= v37)
        goto LABEL_41;
      if (v4 != v5 || v32 >= v5)
        *(_QWORD *)v32 = *(_QWORD *)v24;
      v41 = v24;
      v33 = a4;
LABEL_46:
      if (v24 > a1)
      {
        v5 = v24;
        v4 = v32;
        if (v23 > v33)
          continue;
      }
      goto LABEL_48;
    }
    v32 = v4 - 8;
LABEL_41:
    v39 = v23 - 8;
    v33 = a4;
    if (v4 < v23 || v32 >= v23 || v4 != v23)
      *(_QWORD *)v32 = *((_QWORD *)v23 - 1);
    v24 = v5;
    v23 -= 8;
    goto LABEL_46;
  }
  if (v6 >= -7)
  {
    v12 = a4;
    if (a4 != a1 || &a1[8 * v8] <= a4)
      memmove(a4, a1, 8 * v8);
    v13 = &a4[8 * v8];
    v39 = v13;
    if (v5 < v4 && v6 >= 8)
    {
      v14 = a1;
      do
      {
        v15 = *(_QWORD *)v5;
        v16 = *(_QWORD *)v12;
        swift_retain(*(_QWORD *)v5);
        v17 = swift_retain(v16);
        v18 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v17);
        dispatch thunk of DKProbabilityValue.variable.getter(&v38);
        v19 = swift_release(v18);
        v20 = v38;
        v21 = dispatch thunk of DKPersonTrackerState.rankConfidence.getter(v19);
        dispatch thunk of DKProbabilityValue.variable.getter(&v37);
        swift_release(v15);
        swift_release(v16);
        swift_release(v21);
        if (v20 < 1 || v37 > 0 && v20 >= (unint64_t)v37)
        {
          if (v14 != v12)
            *(_QWORD *)v14 = *(_QWORD *)v12;
          v12 += 8;
          v40 = v12;
          v22 = v5;
        }
        else
        {
          v22 = v5 + 8;
          if (v14 < v5 || v14 >= v22 || v14 != v5)
            *(_QWORD *)v14 = *(_QWORD *)v5;
        }
        v14 += 8;
        if (v12 >= v13)
          break;
        v5 = v22;
      }
      while (v22 < v4);
      v41 = v14;
    }
LABEL_48:
    sub_1001A88FC(&v41, &v40, &v39);
    return 1;
  }
LABEL_49:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019D29C(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t result;
  char *v39;
  char *v41;
  char *v43;
  char *v44;
  char *v45;
  char *v46;

  v4 = a2;
  v5 = __src;
  v6 = a2 - __src;
  v7 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v7 = a2 - __src;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  v46 = __src;
  v45 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7)
      goto LABEL_58;
    if (a4 != a2 || &a2[8 * v11] <= a4)
      memmove(a4, a2, 8 * v11);
    v24 = &a4[8 * v11];
    v44 = v24;
    v46 = v4;
    if (v5 >= v4 || v9 < 8)
    {
LABEL_57:
      sub_1001A88FC(&v46, &v45, &v44);
      return 1;
    }
    v25 = (char *)(a3 - 8);
    v26 = v4;
    v39 = v5;
    while (1)
    {
      v41 = v25 + 8;
      v43 = v24;
      v28 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      v27 = v28;
      v30 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v29 = v30;
      swift_retain(v27);
      v31 = swift_retain(v30);
      v32 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v31);
      if ((v33 & 1) != 0)
        v34 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      v35 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v32);
      v37 = v36;
      swift_release(v27);
      swift_release(v29);
      if ((v37 & 1) != 0)
      {
        if ((unint64_t)(v34 - 1) < 0x7FFFFFFFFFFFFFFELL)
          goto LABEL_51;
      }
      else if (v34 > 0 && (v35 < 1 || v34 < v35))
      {
LABEL_51:
        v24 = v43;
        if (v41 != v4 || v25 >= v4)
          *(_QWORD *)v25 = *(_QWORD *)v26;
        v46 = v26;
        goto LABEL_55;
      }
      v44 = v24;
      if (v41 < v43 || v25 >= v43 || v41 != v43)
        *(_QWORD *)v25 = *(_QWORD *)v24;
      v26 = v4;
LABEL_55:
      if (v26 > v39)
      {
        v25 -= 8;
        v4 = v26;
        if (v24 > a4)
          continue;
      }
      goto LABEL_57;
    }
  }
  if (v6 >= -7)
  {
    if (a4 != __src || &__src[8 * v8] <= a4)
      memmove(a4, __src, 8 * v8);
    v12 = &a4[8 * v8];
    v44 = v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      v13 = a4;
      while (1)
      {
        v14 = *(_QWORD *)v4;
        v15 = *(_QWORD *)v13;
        swift_retain(*(_QWORD *)v4);
        v16 = swift_retain(v15);
        v17 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v16);
        if ((v18 & 1) != 0)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v20 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter(v17);
        v22 = v21;
        swift_release(v14);
        swift_release(v15);
        if ((v22 & 1) != 0)
        {
          if ((unint64_t)(v19 - 1) < 0x7FFFFFFFFFFFFFFELL)
            goto LABEL_24;
        }
        else if (v19 > 0 && (v20 < 1 || v19 < v20))
        {
LABEL_24:
          v23 = v4 + 8;
          if (v5 < v4 || v5 >= v23 || v5 != v4)
            *(_QWORD *)v5 = *(_QWORD *)v4;
          goto LABEL_28;
        }
        if (v5 != v13)
          *(_QWORD *)v5 = *(_QWORD *)v13;
        v13 += 8;
        v45 = v13;
        v23 = v4;
LABEL_28:
        v5 += 8;
        if (v13 < v12)
        {
          v4 = v23;
          if ((unint64_t)v23 < a3)
            continue;
        }
        v46 = v5;
        goto LABEL_57;
      }
    }
    goto LABEL_57;
  }
LABEL_58:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019D604(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100145330(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = *v22;
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001BDA0C();
    goto LABEL_7;
  }
  sub_1001B65E0(v18, a4 & 1);
  v25 = sub_100145330(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  sub_1001BC74C(v15, (uint64_t)v12, a1, v28, v21);
  return 0;
}

void (*sub_10019D774(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10019D84C(v6, a2, a3);
  return sub_10019D7C8;
}

void (*sub_10019D7CC(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_10019D8B8(v6, a2, a3);
  return sub_10019D7C8;
}

void sub_10019D820(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_10019D84C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return sub_10019FC68;
  }
  __break(1u);
  return result;
}

uint64_t *sub_10019D8B8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_10019D924;
  }
  __break(1u);
  return result;
}

uint64_t sub_10019D924(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_10019D92C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10019D994;
  return v5(v2 + 32);
}

uint64_t sub_10019D994()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_10019D9E4(unint64_t a1, _QWORD *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  void *v50;

  v15 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = swift_bridgeObjectRetain(a1);
  if (!v16)
  {
LABEL_27:
    swift_bridgeObjectRelease(v15);
    return;
  }
LABEL_3:
  v18 = v16 - 1;
  if (v16 >= 1)
  {
    v19 = 0;
    v20 = v15 & 0xC000000000000001;
    v21 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
    v17.n128_u64[0] = 136315394;
    v43 = v17;
    v44 = v16 - 1;
    v45 = a2;
    if ((v15 & 0xC000000000000001) != 0)
    {
LABEL_5:
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
      goto LABEL_7;
    }
    while (1)
    {
      v22 = *(id *)(v15 + 8 * v19 + 32);
LABEL_7:
      v23 = v22;
      v24 = objc_msgSend(v22, v21[83], *(_OWORD *)&v43);
      _bridgeAnyObjectToAny(_:)(v49);
      swift_unknownObjectRelease(v24);
      v25 = sub_10009061C(&qword_10026E078);
      if ((swift_dynamicCast(&v50, v49, (char *)&type metadata for Any + 8, v25, 6) & 1) == 0)
        break;
      v26 = v50;
      if (!v50)
        goto LABEL_14;
      v27 = qword_10026BC10;
      swift_unknownObjectRetain(v50);
      if (v27 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v28 = type metadata accessor for Logger(0);
      sub_10008EA50(v28, (uint64_t)qword_100270AB8);
      v29 = swift_bridgeObjectRetain_n(a9, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v47 = swift_slowAlloc(64, -1);
        v48 = v47;
        *(_DWORD *)v32 = v43.n128_u32[0];
        swift_bridgeObjectRetain(a9);
        *(_QWORD *)(v32 + 4) = sub_1000906BC(a8, a9, &v48);
        swift_bridgeObjectRelease_n(a9, 3);
        *(_WORD *)(v32 + 12) = 2080;
        *(double *)v49 = a3;
        *(double *)&v49[1] = a4;
        *(double *)&v49[2] = a5;
        *(double *)&v49[3] = a6;
        type metadata accessor for CGRect(0);
        v34 = String.init<A>(describing:)(v49, v33);
        v35 = v15;
        v36 = v20;
        v37 = a9;
        v39 = v38;
        *(_QWORD *)(v32 + 14) = sub_1000906BC(v34, v38, &v48);
        v40 = v39;
        a9 = v37;
        v20 = v36;
        v15 = v35;
        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Notifying client that %s just set subject ROI to %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        v18 = v44;
        swift_slowDealloc(v47, -1, -1);
        v41 = v32;
        a2 = v45;
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a9, 2);
      }
      objc_msgSend(v26, "setRectOfInterestEventWithRect:", a3, a4, a5, a6);
      swift_unknownObjectRelease(v26);

      v21 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
LABEL_23:
        if (v15 < 0)
          v42 = v15;
        else
          v42 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        v16 = _CocoaArrayWrapper.endIndex.getter(v42);
        if (!v16)
          goto LABEL_27;
        goto LABEL_3;
      }
      ++*a2;
LABEL_18:
      swift_unknownObjectRelease(v50);
      if (v18 == v19)
        goto LABEL_27;
      ++v19;
      if (v20)
        goto LABEL_5;
    }
    v50 = 0;
LABEL_14:

    goto LABEL_18;
  }
  __break(1u);
}

void sub_10019DD80(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42[4];
  void *v43;

  v9 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = swift_bridgeObjectRetain(a1);
  if (!v10)
  {
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return;
  }
LABEL_3:
  v12 = v10 - 1;
  if (v10 >= 1)
  {
    v13 = 0;
    v14 = v9 & 0xC000000000000001;
    v11.n128_u64[0] = 136315394;
    v36 = v11;
    v37 = v10 - 1;
    v38 = a2;
    v41 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) != 0)
    {
LABEL_5:
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v9);
      goto LABEL_7;
    }
    while (1)
    {
      v15 = *(id *)(v9 + 8 * v13 + 32);
LABEL_7:
      v16 = v15;
      v17 = objc_msgSend(v15, "remoteObjectProxy", *(_OWORD *)&v36);
      _bridgeAnyObjectToAny(_:)(v42);
      swift_unknownObjectRelease(v17);
      v18 = sub_10009061C(&qword_10026E078);
      if ((swift_dynamicCast(&v43, v42, (char *)&type metadata for Any + 8, v18, 6) & 1) == 0)
        break;
      v19 = v43;
      if (!v43)
        goto LABEL_14;
      v20 = qword_10026BC10;
      swift_unknownObjectRetain(v43);
      if (v20 != -1)
        swift_once(&qword_10026BC10, sub_10018AF9C);
      v21 = type metadata accessor for Logger(0);
      sub_10008EA50(v21, (uint64_t)qword_100270AB8);
      v22 = swift_bridgeObjectRetain_n(a5, 2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v40 = swift_slowAlloc(64, -1);
        v42[0] = v40;
        *(_DWORD *)v25 = v36.n128_u32[0];
        swift_bridgeObjectRetain(a5);
        *(_QWORD *)(v25 + 4) = sub_1000906BC(a4, a5, v42);
        swift_bridgeObjectRelease_n(a5, 3);
        *(_WORD *)(v25 + 12) = 2080;
        v26 = DockFramingMode.description.getter(a6);
        v27 = v9;
        v28 = a5;
        v29 = a6;
        v31 = v30;
        *(_QWORD *)(v25 + 14) = sub_1000906BC(v26, v30, v42);
        v32 = v31;
        a6 = v29;
        a5 = v28;
        v9 = v27;
        v12 = v37;
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Notifying client that %s just set framing mode to %s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        v33 = v25;
        a2 = v38;
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

        *(_QWORD *)&v34 = swift_bridgeObjectRelease_n(a5, 2).n128_u64[0];
      }
      v14 = v41;
      objc_msgSend(v19, "setFramingModeEventWithMode:", a6, v34);
      swift_unknownObjectRelease(v19);

      if (__OFADD__(*a2, 1))
      {
        __break(1u);
LABEL_23:
        if (v9 < 0)
          v35 = v9;
        else
          v35 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v9);
        v10 = _CocoaArrayWrapper.endIndex.getter(v35);
        if (!v10)
          goto LABEL_27;
        goto LABEL_3;
      }
      ++*a2;
LABEL_18:
      swift_unknownObjectRelease(v43);
      if (v12 == v13)
        goto LABEL_27;
      ++v13;
      if (v14)
        goto LABEL_5;
    }
    v43 = 0;
LABEL_14:

    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_10019E0DC(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  id v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v50 = a2;
  v56 = a4;
  v51 = a1;
  v55 = sub_10009061C(&qword_100270B90);
  v5 = __chkstk_darwin(v55);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (char *)&v49 - v8;
  v61 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v61 - 8);
  result = __chkstk_darwin(v61);
  v60 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v57 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v52 = 0;
  v53 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v54 = (unint64_t)(v14 + 63) >> 6;
  v17 = v61;
  while (v16)
  {
    v58 = (v16 - 1) & v16;
    v59 = v12;
    v20 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_21:
    v25 = v57;
    v26 = v9;
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v28 = v60;
    v27(v60, v57[6] + *(_QWORD *)(v9 + 72) * v20, v17);
    v29 = (uint64_t *)(v25[7] + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = (uint64_t)v62;
    v27(v62, (unint64_t)v28, v17);
    v33 = *(int *)(v55 + 48);
    v34 = (_QWORD *)(v32 + v33);
    *v34 = v31;
    v34[1] = v30;
    v35 = &v7[v33];
    v27(v7, v32, v17);
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v30;
    swift_bridgeObjectRetain_n(v30, 3);
    v36 = objc_msgSend(v56, "uniqueIDOverride");
    if (v36)
    {
      v37 = v36;
      v38 = v7;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v41 = v40;

      if (v31 == v39 && v30 == v41)
      {
        sub_10009B2C0((uint64_t)v62, &qword_100270B90);
        swift_bridgeObjectRelease_n(v30, 2);
        v9 = v26;
        v18 = *(void (**)(char *, uint64_t))(v26 + 8);
        v7 = v38;
        v19 = v61;
        v18(v38, v61);
        swift_bridgeObjectRelease(v30);
        result = ((uint64_t (*)(char *, uint64_t))v18)(v60, v19);
        v16 = v58;
        v12 = v59;
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, v39, v41, 0);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRelease(v41);
        sub_10009B2C0((uint64_t)v62, &qword_100270B90);
        swift_bridgeObjectRelease_n(v30, 2);
        v9 = v26;
        v44 = *(void (**)(char *, uint64_t))(v26 + 8);
        v7 = v38;
        v45 = v61;
        v44(v38, v61);
        swift_bridgeObjectRelease(v30);
        result = ((uint64_t (*)(char *, uint64_t))v44)(v60, v45);
        v16 = v58;
        v12 = v59;
        if ((v43 & 1) == 0)
          goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v30);
      sub_10009B2C0((uint64_t)v62, &qword_100270B90);
      swift_bridgeObjectRelease_n(v30, 2);
      v9 = v26;
      v46 = *(void (**)(char *, uint64_t))(v26 + 8);
      v47 = v61;
      v46(v7, v61);
      swift_bridgeObjectRelease(v30);
      result = ((uint64_t (*)(char *, uint64_t))v46)(v60, v47);
      v16 = v58;
      v12 = v59;
LABEL_29:
      *(unint64_t *)((char *)v51 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v52++, 1))
      {
        __break(1u);
        return sub_10019B8FC(v51, v50, v52, v57);
      }
    }
  }
  v21 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v21 >= v54)
    return sub_10019B8FC(v51, v50, v52, v57);
  v22 = *(_QWORD *)(v53 + 8 * v21);
  v23 = v12 + 1;
  if (v22)
    goto LABEL_20;
  v23 = v12 + 2;
  if (v12 + 2 >= v54)
    return sub_10019B8FC(v51, v50, v52, v57);
  v22 = *(_QWORD *)(v53 + 8 * v23);
  if (v22)
    goto LABEL_20;
  v23 = v12 + 3;
  if (v12 + 3 >= v54)
    return sub_10019B8FC(v51, v50, v52, v57);
  v22 = *(_QWORD *)(v53 + 8 * v23);
  if (v22)
  {
LABEL_20:
    v58 = (v22 - 1) & v22;
    v59 = v23;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
    goto LABEL_21;
  }
  v24 = v12 + 4;
  if (v12 + 4 >= v54)
    return sub_10019B8FC(v51, v50, v52, v57);
  v22 = *(_QWORD *)(v53 + 8 * v24);
  if (v22)
  {
    v23 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v54)
      return sub_10019B8FC(v51, v50, v52, v57);
    v22 = *(_QWORD *)(v53 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10019E518(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (char *)&v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    v10 = v8;
    v11 = sub_10019E0DC((unint64_t *)v9, v6, a1, v10);

    if (v2)
      swift_willThrow(v12);

  }
  else
  {
    v13 = (void *)swift_slowAlloc(8 * v6, -1);
    bzero(v13, 8 * v6);
    v14 = v8;
    v11 = sub_10019E0DC((unint64_t *)v13, v6, a1, v14);

    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

uint64_t sub_10019E6B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;

  v33 = a2;
  v41 = a4;
  v42 = a5;
  v34 = a1;
  v40 = sub_10009061C(&qword_100270B90);
  __chkstk_darwin(v40);
  v39 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v43 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v35 = 0;
  v36 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v37 = (unint64_t)(v13 + 63) >> 6;
  v16 = v38;
  v17 = (uint64_t)v39;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v44 = v11;
    v19 = v18 | (v11 << 6);
LABEL_18:
    v24 = v43;
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v25(v16, v43[6] + *(_QWORD *)(v8 + 72) * v19, v7);
    v26 = (uint64_t *)(v24[7] + 16 * v19);
    v28 = *v26;
    v27 = v26[1];
    v25((char *)v17, (unint64_t)v16, v7);
    v29 = v41;
    v30 = (_QWORD *)(v17 + *(int *)(v40 + 48));
    *v30 = v28;
    v30[1] = v27;
    if (v28 == v29 && v27 == v42)
    {
      swift_bridgeObjectRetain(v42);
      sub_10009B2C0(v17, &qword_100270B90);
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      v11 = v44;
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, v29, v42, 0);
      swift_bridgeObjectRetain(v27);
      sub_10009B2C0(v17, &qword_100270B90);
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      v11 = v44;
      if ((v32 & 1) == 0)
      {
        *(unint64_t *)((char *)v34 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        v20 = __OFADD__(v35++, 1);
        if (v20)
          goto LABEL_33;
      }
    }
  }
  v20 = __OFADD__(v11, 1);
  v21 = v11 + 1;
  if (v20)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= v37)
    return sub_10019B8FC(v34, v33, v35, v43);
  v22 = *(_QWORD *)(v36 + 8 * v21);
  if (v22)
  {
LABEL_17:
    v15 = (v22 - 1) & v22;
    v44 = v21;
    v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_18;
  }
  v23 = v21 + 1;
  if (v21 + 1 >= v37)
    return sub_10019B8FC(v34, v33, v35, v43);
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 2;
  if (v21 + 2 >= v37)
    return sub_10019B8FC(v34, v33, v35, v43);
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 3;
  if (v21 + 3 >= v37)
    return sub_10019B8FC(v34, v33, v35, v43);
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
LABEL_16:
    v21 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v37)
      return sub_10019B8FC(v34, v33, v35, v43);
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10019E9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10019E6B4((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    v13 = swift_bridgeObjectRelease(a3);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10019E6B4((unint64_t *)v14, v9, a1, a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  return v12;
}

uint64_t sub_10019EB7C(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10019EBA8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019EBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100270B9C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10009B7AC;
  v3[4] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
  v3[5] = v4;
  *v4 = v3;
  v4[1] = sub_100199A0C;
  return sub_1000DFA04();
}

uint64_t sub_10019EC40(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  v14 = qword_10026BC00;
  swift_bridgeObjectRetain(a5);
  if (v14 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_1001769F8(a1, a2, qword_100275638, &v28, a3, a4, a5, a6, a7);
  result = swift_bridgeObjectRelease(a5);
  if (!v28)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v16 = type metadata accessor for Logger(0);
    sub_10008EA50(v16, (uint64_t)qword_100270AB8);
    v17 = swift_bridgeObjectRetain_n(a2, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v27 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(a2);
      v26 = sub_1000906BC(a1, a2, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No clients registered for config changes on %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v22 = type metadata accessor for DockKitIDSMessagingError(0);
    v23 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v22, v23, 0, 0);
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v22);
    return swift_willThrow(v25);
  }
  return result;
}

uint64_t sub_10019EED8()
{
  uint64_t v0;

  return sub_10019A5BC(*(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_100166E10, "Subject selection not completed after 1 sec, expiring", &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
}

uint64_t sub_10019EF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019EF1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10019EF24(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = 0;
  v18 = qword_10026BC00;
  swift_bridgeObjectRetain(a5);
  if (v18 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_100176DC8(a1, a2, qword_100275638, &v32, a3, a4, a5, a6, a7, a8, a9);
  result = swift_bridgeObjectRelease(a5);
  if (!v32)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v20 = type metadata accessor for Logger(0);
    sub_10008EA50(v20, (uint64_t)qword_100270AB8);
    v21 = swift_bridgeObjectRetain_n(a2, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain(a2);
      v30 = sub_1000906BC(a1, a2, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No clients registered for config changes on %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v26 = type metadata accessor for DockKitIDSMessagingError(0);
    v27 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v26, v27, 0, 0);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v26);
    return swift_willThrow(v29);
  }
  return result;
}

uint64_t sub_10019F1D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019F1F8()
{
  uint64_t v0;

  return sub_10019A5BC(*(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_100166F54, "Region of Interest not completed after 1 sec, expiring", &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
}

uint64_t sub_10019F22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TrajectoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10019F2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrajectoryCommand(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100270BD4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10009B0EC;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_10019AA74, 0, 0);
}

void sub_10019F324(id *a1)
{
  uint64_t v1;

  sub_10019A788(a1, *(unsigned int *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

void sub_10019F338(uint64_t a1, unint64_t a2, void (*a3)(_QWORD *, __n128), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_100177288(a1, a2, qword_100275638, a3, a4, &v20);
  if (!v20)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v8 = type metadata accessor for Logger(0);
    sub_10008EA50(v8, (uint64_t)qword_100270AB8);
    v9 = swift_bridgeObjectRetain_n(a2, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      swift_bridgeObjectRetain(a2);
      v18 = sub_1000906BC(a1, a2, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No clients registered for config changes on %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v14 = type metadata accessor for DockKitIDSMessagingError(0);
    v15 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v14, v15, 0, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v14);
    swift_willThrow(v17);
  }
}

uint64_t sub_10019F5A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10019F5C4()
{
  unint64_t result;

  result = qword_100270BE8;
  if (!qword_100270BE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DockFramingMode, &type metadata for DockFramingMode);
    atomic_store(result, (unint64_t *)&qword_100270BE8);
  }
  return result;
}

uint64_t sub_10019F608(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = 0;
  v12 = qword_10026BC00;
  swift_bridgeObjectRetain(a5);
  if (v12 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  sub_100177040(a1, a2, qword_100275638, &v26, a3, a4, a5, a6);
  result = swift_bridgeObjectRelease(a5);
  if (!v26)
  {
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v14 = type metadata accessor for Logger(0);
    sub_10008EA50(v14, (uint64_t)qword_100270AB8);
    v15 = swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(a2);
      v24 = sub_1000906BC(a1, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No clients registered for config changes on %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v20 = type metadata accessor for DockKitIDSMessagingError(0);
    v21 = sub_100090E1C(&qword_100270B78, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError, (uint64_t)&protocol conformance descriptor for DockKitIDSMessagingError);
    swift_allocError(v20, v21, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v20);
    return swift_willThrow(v23);
  }
  return result;
}

uint64_t sub_10019F890()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019F8B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100270BFC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10009B0EC;
  return sub_10019ADD0(a1, v4, v5, v6);
}

unint64_t sub_10019F920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100270C20;
  if (!qword_100270C20)
  {
    v1 = sub_100090F6C(&qword_100270C18);
    sub_100090E1C(&qword_100270C28, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitBoundingBox, (uint64_t)&protocol conformance descriptor for DockKitBoundingBox);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100270C20);
  }
  return result;
}

uint64_t sub_10019F99C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10019F9C4()
{
  uint64_t v0;

  sub_10018EF08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10019F9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026E6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019FA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026E6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10019FA60()
{
  uint64_t v0;

  sub_10018DDE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10019FA68()
{
  return sub_10019FABC(32);
}

uint64_t sub_10019FA70()
{
  uint64_t v0;

  return sub_10018D084(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10019FA78()
{
  return sub_10019FABC(40);
}

uint64_t sub_10019FA80()
{
  uint64_t *v0;

  return sub_10018CA5C(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t))&DockKitIDSInfo.trackingState.getter, (void (*)(uint64_t))&DockKitIDSInfo.trackingState.setter, (uint64_t (*)(_QWORD))&TrackingButtonState.rawValue.getter);
}

uint64_t sub_10019FAB4()
{
  return sub_10019FABC(40);
}

uint64_t sub_10019FABC(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10019FAF4()
{
  uint64_t *v0;

  return sub_10018CA5C(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t))&DockKitIDSInfo.dockState.getter, (void (*)(uint64_t))&DockKitIDSInfo.dockState.setter, (uint64_t (*)(_QWORD))&DockState.rawValue.getter);
}

uint64_t sub_10019FB28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100270C54);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10009B7AC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100270C50 + dword_100270C50))(a1, v4);
}

uint64_t sub_10019FB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BTDiscoveredDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019FBDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10019FC00()
{
  uint64_t v0;

  sub_10018B964(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10019FC08(uint64_t a1)
{
  return sub_10019EB7C(a1) & 1;
}

void sub_10019FC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X9 }
}

uint64_t sub_10019FE90()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  v1 = (char *)v0 + OBJC_IVAR____TtC14dockaccessoryd19RotationRateStorage_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10019FEF4()
{
  return type metadata accessor for RotationRateStorage(0);
}

uint64_t type metadata accessor for RotationRateStorage(uint64_t a1)
{
  uint64_t result;

  result = qword_100270CA0;
  if (!qword_100270CA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RotationRateStorage);
  return result;
}

uint64_t sub_10019FF38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RotationRateStamped(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RotationRateStamped(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RotationRateStamped()
{
  return &type metadata for RotationRateStamped;
}

ValueMetadata *type metadata accessor for RotationErrorStamped()
{
  return &type metadata for RotationErrorStamped;
}

uint64_t sub_1001A004C()
{
  uint64_t v0;

  return v0;
}

uint64_t (*sub_1001A0058(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1001A0094()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A00F4, 0, 0);
}

uint64_t sub_1001A00F4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 16))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, *(_QWORD *)(v0 + 48));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Shutting down", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v9 = *(void **)(v8 + 32);
  *(_QWORD *)(v0 + 72) = v9;
  if (v9)
  {
    v10 = dword_10026D704;
    v9;
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 80) = v11;
    *v11 = v0;
    v11[1] = sub_1001A02C8;
    return sub_1000E28A8();
  }
  else
  {
    v13 = *(_QWORD **)(v0 + 40);
    v13[4] = 0;
    swift_beginAccess(v13 + 13, v0 + 16, 1, 0);
    v14 = v13[13];
    v15 = v13[14];
    *(_OWORD *)(v13 + 13) = xmmword_1001DE8C0;
    sub_10009E3A0(v14, v15);
    if (v13[5])
    {
      v16 = type metadata accessor for Errors(0);
      v17 = sub_10009F444();
      v18 = swift_allocError(v16, v17, 0, 0);
      *v19 = 0;
      v19[1] = 0xE000000000000000;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, enum case for Errors.OperationCancelled(_:), v16);
      sub_1001A1138(v18);
      swift_errorRelease(v18);
    }
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A02C8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));

  return swift_task_switch(sub_1001A0320, 0, 0);
}

uint64_t sub_1001A0320()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD **)(v0 + 40);
  v2 = (void *)v1[4];
  v1[4] = 0;

  swift_beginAccess(v1 + 13, v0 + 16, 1, 0);
  v3 = v1[13];
  v4 = v1[14];
  *(_OWORD *)(v1 + 13) = xmmword_1001DE8C0;
  sub_10009E3A0(v3, v4);
  if (v1[5])
  {
    v5 = type metadata accessor for Errors(0);
    v6 = sub_10009F444();
    v7 = swift_allocError(v5, v6, 0, 0);
    *v8 = 0;
    v8[1] = 0xE000000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v8, enum case for Errors.OperationCancelled(_:), v5);
    sub_1001A1138(v7);
    swift_errorRelease(v7);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A0400()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = v0;
  return swift_task_switch(sub_1001A0418, 0, 0);
}

uint64_t sub_1001A0418(__n128 a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  Swift::String v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  Strong = swift_weakLoadStrong(*(_QWORD *)(v1 + 160) + 16, a1);
  *(_QWORD *)(v1 + 168) = Strong;
  if (!Strong)
  {
    v34 = type metadata accessor for Errors(0);
    v35 = sub_10009F444();
    swift_allocError(v34, v35, 0, 0);
    *v36 = 0xD000000000000010;
    v36[1] = 0x80000001001FEB90;
    v37 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, enum case for Errors.AccessoryServerNil(_:), v34);
    swift_willThrow(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v3 = Strong;
  v4 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (!v4 || (objc_msgSend(v4, "canAcceptBulkSendListeners") & 1) == 0)
  {
    v5 = *(id *)(v3 + 40);
    OS_dispatch_queue.sync<A>(execute:)((_QWORD *)(v1 + 192), sub_100146CEC, v3, &type metadata for Bool);

    if (*(_BYTE *)(v1 + 192) == 1)
    {
      v6 = type metadata accessor for Errors(0);
      v7 = sub_10009F444();
      swift_allocError(v6, v7, 0, 0);
      v9 = v8;
      _StringGuts.grow(_:)(53);
      v10._countAndFlagsBits = 0xD000000000000033;
      v10._object = (void *)0x8000000100201020;
      String.append(_:)(v10);
      v11 = *(id *)(v3 + 24);
      v12 = objc_msgSend(v11, "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);

      swift_bridgeObjectRelease(v15);
      *v9 = 0;
      v9[1] = 0xE000000000000000;
      v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v9, enum case for Errors.OperationNotSupported(_:), v6);
      swift_willThrow(v17);
      swift_release(v3);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  v18 = *(_QWORD **)(v1 + 160);
  v19 = (void *)v18[3];
  v20 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v20, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = 0x79616C6564;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 0;
  v22 = v19;
  swift_retain(v3);
  v23 = sub_1001B0FB8(inited);
  v24 = v18[7];
  v25 = v18[8];
  objc_allocWithZone((Class)type metadata accessor for AccessoryDataStreamAdapter(0));
  swift_bridgeObjectRetain(v25);
  v26 = sub_1000E5E54(v3, v22, v23, 0xD000000000000015, 0x8000000100202530, v24, v25);
  swift_release(v3);

  v27 = (void *)v18[4];
  v18[4] = v26;

  v28 = (char *)v18[4];
  if (v28)
  {
    v29 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 120) = type metadata accessor for AccessoryDescriptionSession(0);
    *(_QWORD *)(v1 + 128) = &off_10023E4D8;
    *(_QWORD *)(v1 + 96) = v29;
    v30 = (uint64_t)&v28[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate];
    swift_beginAccess(&v28[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate], v1 + 136, 33, 0);
    v31 = v28;
    swift_retain(v29);
    sub_100146D04(v1 + 96, v30);
    swift_endAccess(v1 + 136);

  }
  v32 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 176) = v32;
  *v32 = v1;
  v32[1] = sub_1001A0808;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v32, 0, 0, 0x292870757465735FLL, 0xE800000000000000, sub_1001A1EE0, *(_QWORD *)(v1 + 160), (char *)&type metadata for () + 8);
}

uint64_t sub_1001A0808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001A08A0;
  else
    v3 = sub_1001A086C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A086C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A08A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A08D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v4 = sub_10009061C(&qword_10026EDD0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  result = __chkstk_darwin(v4);
  v8 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(char **)(a2 + 32);
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 16) & ~v10;
    v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_10023E508, v12 + 8, v10 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v13 + v11, v8, v4);
    *(_QWORD *)(v13 + v12) = a2;
    v14 = (uint64_t *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
    if (*(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback])
    {
      v15 = type metadata accessor for Errors(0);
      v16 = sub_10009F444();
      v17 = swift_allocError(v15, v16, 0, 0);
      *v18 = 0xD00000000000001ELL;
      v18[1] = 0x8000000100201060;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v18, enum case for Errors.OperationInProgress(_:), v15);
      v19 = swift_retain(a2);
      swift_willThrow(v19);
      swift_release(v13);
      v23[0] = v17;
      return CheckedContinuation.resume(throwing:)(v23, v4);
    }
    else
    {
      swift_retain(a2);
      v20 = v9;
      sub_1000E3BF4();
      v21 = *v14;
      v22 = v14[1];
      *v14 = (uint64_t)sub_1001A1F60;
      v14[1] = v13;
      swift_retain(v13);
      sub_1000B1410(v21, v22);

      return swift_release(v13);
    }
  }
  return result;
}

uint64_t sub_1001A0AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v18 = a2;
    swift_errorRetain(a2);
    v10 = sub_10009061C(&qword_10026EDD0);
    return CheckedContinuation.resume(throwing:)(&v18, v10);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v6);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessory Description data stream was setup successfully", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_BYTE *)(a4 + 96) = 1;
    *(_QWORD *)(a4 + 88) = 1;
    v16 = sub_10009061C(&qword_10026EDD0);
    return CheckedContinuation.resume(returning:)(v16, v16);
  }
}

void sub_1001A0C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_QWORD *)(v2 + 32))
  {
    v10 = type metadata accessor for Errors(0);
    v11 = sub_10009F444();
    swift_allocError(v10, v11, 0, 0);
    v13 = v12;
    v14 = 0xD000000000000017;
    v15 = "Data stream not present";
LABEL_7:
    *v12 = v14;
    v12[1] = (unint64_t)(v15 - 32) | 0x8000000000000000;
    v9 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v13, enum case for Errors.NotFound(_:), v10);
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v2 + 96) & 1) == 0)
  {
    v10 = type metadata accessor for Errors(0);
    v16 = sub_10009F444();
    swift_allocError(v10, v16, 0, 0);
    v13 = v12;
    v14 = 0xD00000000000001FLL;
    v15 = "Session not ready for data read";
    goto LABEL_7;
  }
  if (*(_QWORD *)(v2 + 40))
  {
    v3 = type metadata accessor for Errors(0);
    v4 = sub_10009F444();
    v5 = swift_allocError(v3, v4, 0, 0);
    *v6 = 0xD000000000000031;
    v6[1] = 0x80000001002024F0;
    v7 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104);
    v7(v6, enum case for Errors.OperationInProgress(_:), v3);
    sub_1001A1138(v5);
    swift_errorRelease(v5);
    swift_allocError(v3, v4, 0, 0);
    *v8 = 0xD000000000000031;
    v8[1] = 0x80000001002024F0;
    v9 = ((uint64_t (*)(_QWORD *, _QWORD, uint64_t))v7)(v8, enum case for Errors.NotFound(_:), v3);
LABEL_8:
    swift_willThrow(v9);
    return;
  }
  v17 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  swift_retain(a2);
  sub_1000B1410(0, v17);
  v18 = *(id *)(v2 + 24);
  v19 = sub_10009061C(&qword_10026C588);
  OS_dispatch_queue.sync<A>(execute:)(&v20, sub_100146CD4, v2, v19);

}

uint64_t sub_1001A0E20(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t result;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  id v35;
  _BYTE v36[24];
  char v37[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[10];
  v9 = (unint64_t)objc_msgSend(a1, "length");
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_18;
  v10 = (char *)(v8 + v9);
  if (__CFADD__(v8, v9))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = v2[9];
  if (v11 < (unint64_t)v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    swift_retain(v2);
    v24 = a1;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (_DWORD *)swift_slowAlloc(32, -1);
      v34 = v10;
      v28 = v27;
      *v27 = 134218496;
      v35 = (id)v2[10];
      v33 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v27 + 1, v27 + 3);
      *((_WORD *)v28 + 6) = 2048;
      v35 = -[NSObject length](v24, "length");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, (char *)v28 + 14, (char *)v28 + 22);

      *((_WORD *)v28 + 11) = 2048;
      v35 = (id)v2[9];
      v11 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v28 + 6, v28 + 8);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Accessory Description exceeded max size (written: %llu, new data: %ld, max: %llu", (uint8_t *)v28, 0x20u);
      v29 = v28;
      v10 = v34;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      swift_release(v2);
      v25 = v24;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v11 >= (unint64_t)v10;
  }
  v12 = (unint64_t)objc_msgSend(a1, "length");
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = v2[10];
    v14 = __CFADD__(v13, v12);
    v15 = (char *)(v13 + v12);
    if (!v14)
    {
      v2[10] = v15;
      v16 = v2 + 13;
      swift_beginAccess(v2 + 13, v37, 1, 0);
      v17 = v2[14];
      if (v17 >> 60 == 15)
      {
        v18 = *v16;
        *(_OWORD *)v16 = xmmword_1001DE7B0;
        sub_10009E3A0(v18, v17);
      }
      v19 = sub_1001A0058((uint64_t)&v35);
      if (*(_QWORD *)(v20 + 8) >> 60 != 15)
      {
        v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
        v23 = v22;
        Data.append(_:)(v21, v22);
        sub_10009B2FC(v21, v23);
      }
      ((void (*)(id *, _QWORD))v19)(&v35, 0);
      return v11 >= (unint64_t)v10;
    }
    goto LABEL_17;
  }
LABEL_18:
  v31 = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v31, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A1138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(uint64_t, _QWORD, unint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19 = v2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v13 = _swift_stdlib_bridgeErrorToNSError(a1);
      v20 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
    }
    else
    {
      v20 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      v13 = 0;
    }
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling completion handler with error: %@", v11, 0xCu);
    v14 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    v2 = v19;
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = *(void (**)(uint64_t, _QWORD, unint64_t))(v2 + 40);
  if (v16)
  {
    v17 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    swift_retain(v17);
    sub_1000B1410((uint64_t)v16, v17);
    v16(a1, 0, 0xF000000000000000);
    return sub_1000B1410((uint64_t)v16, v17);
  }
  return result;
}

uint64_t sub_1001A13A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_weakDestroy(v0 + 16);

  sub_1000B1410(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  sub_10009E3A0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A1420()
{
  return type metadata accessor for AccessoryDescriptionSession(0);
}

uint64_t type metadata accessor for AccessoryDescriptionSession(uint64_t a1)
{
  uint64_t result;

  result = qword_100270E68;
  if (!qword_100270E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDescriptionSession);
  return result;
}

uint64_t sub_1001A1464(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1001E0BE8;
  v4[3] = &unk_1001E0C00;
  v4[4] = &unk_1001E0C18;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_1001E0C30;
  v4[9] = &unk_1001E0C48;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A152C(uint64_t a1, uint64_t a2)
{
  return sub_1001A18FC(a2) & 1;
}

uint64_t sub_1001A1554()
{
  return sub_1001A1B44();
}

uint64_t sub_1001A1574()
{
  return sub_1001A1658();
}

uint64_t sub_1001A1594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_weakInit(v2 + 16, 0);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0xD000000000000018;
  *(_QWORD *)(v2 + 64) = 0x8000000100202550;
  *(_QWORD *)(v2 + 72) = 5242880;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 104) = xmmword_1001DE8C0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD00000000000001BLL, 0x8000000100202570);
  swift_weakAssign(v2 + 16, a1);
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1001A1658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  __n128 v10;
  uint64_t Strong;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  v6 = swift_retain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v10.n128_u64[0] = 138412290;
    *(_DWORD *)v9 = 138412290;
    Strong = swift_weakLoadStrong(v1 + 16, v10);
    if (Strong)
    {
      v12 = Strong;
      v13 = *(id *)(Strong + 24);
      swift_release(v12);
      v23 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    }
    else
    {
      v23 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
      v13 = 0;
    }
    v14 = v22;
    *v22 = v13;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to read data for accessory: %@", v9, 0xCu);
    v15 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v14, 1, v15);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (*(_QWORD *)(v1 + 40))
  {
    v17 = type metadata accessor for Errors(0);
    v18 = sub_10009F444();
    v19 = swift_allocError(v17, v18, 0, 0);
    *v20 = 0x722064656C696166;
    v20[1] = 0xEB00000000646165;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, enum case for Errors.CommunicationFailure(_:), v17);
    sub_1001A1138(v19);
    return swift_errorRelease(v19);
  }
  return result;
}

uint64_t sub_1001A18FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;
  void *v27;
  _BYTE v28[32];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  if (*(_QWORD *)(a1 + 16)
    && (v11 = sub_100145264(1635017060, 0xE400000000000000), (v12 & 1) != 0)
    && (sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v28),
        v14 = sub_1001A1EA4(0, v13),
        (swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0))
  {
    v15 = v27;
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Data frame received", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v20 = sub_1001A0E20(v15);

  }
  else
  {
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No data present in frame", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_1001A1B44()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (**v9)(_QWORD, uint64_t, unint64_t);
  uint64_t (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t Strong;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t result;
  void (*v26)(_QWORD, uint64_t, unint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _BYTE v33[16];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = (void (**)(_QWORD, uint64_t, unint64_t))(v1 + 5);
  if (v1[5])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  }
  else
  {
    v31 = v3;
    v10 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
    v11 = v10((char *)&v30 - v7, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Data read completed but no completion handler", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v3 = v31;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v2);
    v10(v6, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  }
  v15 = swift_retain_n(v1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v30 = v2;
    v31 = v3;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (_QWORD *)swift_slowAlloc(8, -1);
    v20.n128_u64[0] = 138412290;
    *(_DWORD *)v18 = 138412290;
    Strong = swift_weakLoadStrong(v1 + 2, v20);
    if (Strong)
    {
      v22 = Strong;
      v23 = *(id *)(Strong + 24);
      swift_release(v22);
      v32 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v18 + 4, v18 + 12);
    }
    else
    {
      v32 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v18 + 4, v18 + 12);
      v23 = 0;
    }
    *v19 = v23;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Data read completed for accessory: %@", v18, 0xCu);
    v24 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v19, 1, v24);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v2 = v30;
    v3 = v31;
  }
  else
  {

    swift_release_n(v1, 2);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v26 = *v9;
  if (*v9)
  {
    v27 = v1[6];
    *v9 = 0;
    v1[6] = 0;
    swift_retain(v27);
    sub_1000B1410((uint64_t)v26, v27);
    swift_beginAccess(v1 + 13, &v32, 0, 0);
    v29 = v1[13];
    v28 = v1[14];
    sub_10009E38C(v29, v28);
    v26(0, v29, v28);
    sub_10009E3A0(v29, v28);
    return sub_1000B1410((uint64_t)v26, v27);
  }
  return result;
}

unint64_t sub_1001A1EA4(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026DFB8;
  if (!qword_10026DFB8)
  {
    v3 = objc_opt_self(NSData, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026DFB8);
  }
  return result;
}

uint64_t sub_1001A1EE0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001A08D4(a1, v1);
}

uint64_t sub_1001A1EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10009061C(&qword_10026EDD0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001A1F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_10009061C(&qword_10026EDD0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1001A0AA4(a1, a2, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

dockaccessoryd::VirtualEvent_optional __swiftcall VirtualEvent.init(rawValue:)(Swift::Int rawValue)
{
  dockaccessoryd::VirtualEvent_optional v1;

  if (rawValue == 1)
    v1.value = dockaccessoryd_VirtualEvent_ShutterButtonUp;
  else
    v1.value = dockaccessoryd_VirtualEvent_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t VirtualEvent.rawValue.getter(char a1)
{
  return a1 & 1;
}

unint64_t sub_1001A1FE8()
{
  unint64_t result;

  result = qword_100271080;
  if (!qword_100271080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VirtualEvent, &type metadata for VirtualEvent);
    atomic_store(result, (unint64_t *)&qword_100271080);
  }
  return result;
}

_QWORD *sub_1001A202C@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for VirtualEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001A2098 + 4 * byte_1001E0C75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001A20CC + 4 * byte_1001E0C70[v4]))();
}

uint64_t sub_1001A20CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A20D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A20DCLL);
  return result;
}

uint64_t sub_1001A20E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A20F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001A20F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A20FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VirtualEvent()
{
  return &type metadata for VirtualEvent;
}

char *sub_1001A2118()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t inited;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  objc_class *v27;
  id v28;
  id v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  uint64_t v51;
  objc_super v52;
  uint64_t v53;

  v1 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v1 - 8);
  v49 = v1;
  __chkstk_darwin(v1);
  v47 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000013, 0x80000001001E0D20);
  v13 = OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_workQueue;
  v15 = sub_1000ABAF4(0, v14);
  static DispatchQoS.unspecified.getter(v15);
  v50[0] = _swiftEmptyArrayStorage;
  v16 = sub_1000BC860();
  v17 = sub_10009061C(&qword_10026D000);
  v18 = sub_1000BC8A8();
  dispatch thunk of SetAlgebra.init<A>(_:)(v50, v17, v18, v6, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v46);
  *(_QWORD *)&v12[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x8000000100202610, v11, v8, v5, 0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = 0;
  v19 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v19, &v53);
  *(_OWORD *)(inited + 16) = xmmword_1001E0D70;
  *(_QWORD *)(inited + 32) = 0x726F70736E617254;
  *(_QWORD *)(inited + 40) = 0xE900000000000074;
  *(_QWORD *)(inited + 48) = 0x6C617574726956;
  *(_QWORD *)(inited + 56) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 88) = 0x8000000100202640;
  *(_BYTE *)(inited + 96) = 1;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_QWORD *)(inited + 128) = 0xD000000000000016;
  *(_QWORD *)(inited + 136) = 0x8000000100202660;
  v21 = v47;
  v22 = UUID.init()(inited);
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
  *(_QWORD *)(inited + 144) = v23;
  *(_QWORD *)(inited + 152) = v25;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0xD000000000000010;
  *(_QWORD *)(inited + 184) = 0x80000001001FC460;
  *(_QWORD *)(inited + 192) = 65280;
  *(_QWORD *)(inited + 216) = &type metadata for Int;
  strcpy((char *)(inited + 224), "PrimaryUsage");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(_QWORD *)(inited + 240) = 1;
  *(_QWORD *)(inited + 264) = &type metadata for Int;
  *(_QWORD *)(inited + 272) = 0x6E492D746C697542;
  *(_QWORD *)(inited + 280) = 0xE800000000000000;
  *(_QWORD *)(inited + 288) = 1;
  *(_QWORD *)(inited + 312) = &type metadata for Int;
  *(_QWORD *)(inited + 320) = 0x4449726F646E6556;
  *(_QWORD *)(inited + 328) = 0xE800000000000000;
  *(_QWORD *)(inited + 336) = 65280;
  *(_QWORD *)(inited + 360) = &type metadata for Int;
  *(_QWORD *)(inited + 368) = 0x49746375646F7250;
  *(_QWORD *)(inited + 376) = 0xE900000000000044;
  *(_QWORD *)(inited + 384) = 65280;
  *(_QWORD *)(inited + 408) = &type metadata for Int;
  strcpy((char *)(inited + 416), "ReportInterval");
  *(_BYTE *)(inited + 431) = -18;
  *(_QWORD *)(inited + 432) = 0;
  *(_QWORD *)(inited + 456) = &type metadata for Int;
  *(_QWORD *)(inited + 464) = 0xD000000000000010;
  *(_QWORD *)(inited + 472) = 0x8000000100202680;
  v26 = sub_1001B232C((uint64_t)&off_1002386D8);
  *(_QWORD *)(inited + 504) = sub_10009061C((uint64_t *)&unk_100271120);
  *(_QWORD *)(inited + 480) = v26;
  *(_QWORD *)&v12[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_properties] = sub_1001B0FB8(inited);

  v27 = (objc_class *)type metadata accessor for VirtualEventService(0);
  v52.receiver = v12;
  v52.super_class = v27;
  v28 = objc_msgSendSuper2(&v52, "init");
  v29 = objc_allocWithZone((Class)HIDVirtualEventService);
  v30 = (char *)v28;
  v31 = objc_msgSend(v29, "init");
  v32 = OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService;
  v33 = *(void **)&v30[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService];
  *(_QWORD *)&v30[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = v31;

  v34 = *(void **)&v30[v32];
  if (v34)
  {
    objc_msgSend(v34, "setDelegate:", v30);
    v35 = *(void **)&v30[v32];
    if (v35)
    {
      v36 = swift_allocObject(&unk_10023E5D0, 24, 7);
      *(_QWORD *)(v36 + 16) = v30;
      v50[4] = sub_1001A2FC8;
      v51 = v36;
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 1107296256;
      v50[2] = sub_10012357C;
      v50[3] = &unk_10023E5E8;
      v37 = _Block_copy(v50);
      v38 = v51;
      v39 = v30;
      v40 = v35;
      swift_release(v38);
      objc_msgSend(v40, "setCancelHandler:", v37);
      _Block_release(v37);

      v41 = *(void **)&v30[v32];
      if (v41)
      {
        objc_msgSend(v41, "setDispatchQueue:", *(_QWORD *)&v39[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_workQueue]);
        v42 = *(void **)&v30[v32];
        if (v42)
        {
          v43 = v42;
          objc_msgSend(v43, "activate");

        }
      }
    }
  }

  return v30;
}

uint64_t sub_1001A26A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "event service cancelled", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id sub_1001A27C4()
{
  char *v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService];
  *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = 0;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for VirtualEventService(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1001A28D4()
{
  return type metadata accessor for VirtualEventService(0);
}

uint64_t type metadata accessor for VirtualEventService(uint64_t a1)
{
  uint64_t result;

  result = qword_100271110;
  if (!qword_100271110)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VirtualEventService);
  return result;
}

uint64_t sub_1001A29C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_properties);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = result;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v5);
    v8 = sub_100145264(v7, a2);
    if ((v9 & 1) != 0)
    {
      sub_100090EA8(*(_QWORD *)(v5 + 56) + 32 * v8, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(v5);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1001A2D4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A2DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_logger, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136315138;
    v15 = v11;
    if (a1 == 10)
      v12 = 0x746172656D756E65;
    else
      v12 = 0x74616E696D726574;
    v14 = sub_1000906BC(v12, 0xEA00000000006465, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(0xEA00000000006465);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "notification:, %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001A2FA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A2FC8()
{
  uint64_t v0;

  return sub_1001A26A4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001A2FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A2FE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001A2FE8()
{
  id *v0;
  double v1;
  id v2;
  _BYTE v4[24];

  *(_QWORD *)&v1 = swift_beginAccess(v0 + 5, v4, 0, 0).n128_u64[0];
  v2 = v0[5];
  if (v2)
    objc_msgSend(v2, "invalidate", v1);

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for PairingUIServiceAlert(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd21PairingUIServiceAlert, a2);
}

id sub_1001A3078()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BTLink(0)), "init");
  qword_1002757B0 = (uint64_t)result;
  return result;
}

char *sub_1001A30A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  objc_super v48;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6B6E696C2E7462, 0xE700000000000000);
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device] = 0;
  v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan] = 0;
  v11 = &v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 4) = 0;
  v12 = &v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_match];
  *v12 = 0;
  v12[1] = 0;
  v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_shouldScan] = 0;
  v13 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn;
  v14 = type metadata accessor for Transaction(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  swift_unknownObjectWeakInit(v15 + 40, 0);
  *(_QWORD *)(v15 + 80) = 0;
  *(_BYTE *)(v15 + 88) = 1;
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v15 + 64) = 0xD000000000000026;
  *(_QWORD *)(v15 + 72) = 0x8000000100202820;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0x402E000000000000;
  swift_unknownObjectWeakAssign(v15 + 40, 0);
  *(_QWORD *)&v10[v13] = v15;
  v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn] = 0;
  v16 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue;
  v18 = sub_1000ABAF4(0, v17);
  static DispatchQoS.unspecified.getter(v18);
  *(_QWORD *)&v46[0] = _swiftEmptyArrayStorage;
  v19 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10009061C(&qword_10026D000);
  v21 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
  dispatch thunk of SetAlgebra.init<A>(_:)(v46, v20, v21, v4, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  *(_QWORD *)&v10[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100202850, v9, v6, v3, 0);
  v22 = &v10[OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate];
  *((_QWORD *)v22 + 4) = 0;
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v23 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  v24 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v25 = swift_allocObject(v24, 20, 7);
  *(_DWORD *)(v25 + 16) = 0;
  *(_QWORD *)&v10[v23] = v25;
  v26 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices;
  *(_QWORD *)&v10[v26] = sub_1001B255C((uint64_t)_swiftEmptyArrayStorage);

  v27 = (objc_class *)type metadata accessor for BTLink(0);
  v48.receiver = v10;
  v48.super_class = v27;
  v28 = (char *)objc_msgSendSuper2(&v48, "init");
  v29 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue;
  v30 = *(_QWORD *)&v28[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  v31 = objc_allocWithZone((Class)CBCentralManager);
  v32 = v28;
  v33 = objc_msgSend(v31, "initWithDelegate:queue:", v32, v30);
  v34 = *(void **)&v28[v29];
  v36 = type metadata accessor for BTScanEngine(0, v35);
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  swift_allocObject(v36, 120, 7);
  v37 = v33;
  v38 = v34;
  v39 = sub_1000DE9BC(v37, v38, (uint64_t)v46);

  v40 = *(_QWORD *)&v32[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan];
  *(_QWORD *)&v32[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan] = v39;
  swift_release(v40);
  v41 = *(void **)&v32[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager];
  *(_QWORD *)&v32[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager] = v37;

  v42 = *(_QWORD *)&v32[OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn];
  *(_QWORD *)(v42 + 48) = &off_10023E6F8;
  swift_unknownObjectWeakAssign(v42 + 40, v32);
  return v32;
}

uint64_t sub_1001A3584(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  v13 = (_QWORD *)swift_allocObject(&unk_10023E770, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001A90C4;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023E788;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  v16 = v2;
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v20 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v25);
}

void sub_1001A3788(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  _BYTE v23[24];

  v6 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  v7 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager);
  if (v7 && (v7 = objc_msgSend(v7, "state"), v7 == (id)5))
  {
    v8 = Logger.logObject.getter(5);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Central already powered on, performing action immediately.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(void **)(a1 + v6);
    if (v11)
    {
      v22 = v11;
      a2();

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v12 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Queueing power on action...", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = swift_allocObject(&unk_10023E7C0, 32, 7);
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = a3;
    v16 = (_QWORD **)(a1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
    swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions, v23, 33, 0);
    v17 = *v16;
    swift_retain(a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *v16 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_1000E9F1C(0, v17[2] + 1, 1, v17);
      *v16 = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_1000E9F1C((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *v16 = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[2 * v20];
    v21[4] = sub_1001A90F4;
    v21[5] = v15;
    swift_endAccess(v23);
  }
}

uint64_t sub_1001A39EC(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  v13 = (_QWORD *)swift_allocObject(&unk_10023E720, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001A9060;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023E738;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  v16 = v2;
  static DispatchQoS.unspecified.getter(a2);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v19 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v24);
}

uint64_t sub_1001A3BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v17[24];

  v4 = v3;
  v8 = sub_10009061C(&qword_1002712B0);
  __chkstk_darwin(v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  v12 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain(v12);
  os_unfair_lock_lock(v12 + 4);
  swift_release(v12);
  sub_1000D537C(a3, (uint64_t)v10);
  v13 = type metadata accessor for BTDiscoveredDevice(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v17, 33, 0);
  swift_bridgeObjectRetain(a2);
  sub_1001A91FC((uint64_t)v10, a1, a2);
  swift_endAccess(v17);
  v14 = *(os_unfair_lock_s **)(v4 + v11);
  swift_retain(v14);
  os_unfair_lock_unlock(v14 + 4);
  return swift_release(v14);
}

uint64_t sub_1001A3D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  _BYTE v14[24];

  v3 = v2;
  v6 = sub_10009061C(&qword_1002712B0);
  __chkstk_darwin(v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  v10 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v14, 33, 0);
  sub_1001B4218(a1, a2, (uint64_t)v8);
  sub_10009B2C0((uint64_t)v8, &qword_1002712B0);
  swift_endAccess(v14);
  v11 = *(os_unfair_lock_s **)(v3 + v9);
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  return swift_release(v11);
}

uint64_t sub_1001A3E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v15;
  _BYTE v16[24];

  v1 = v0;
  v2 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  v3 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  swift_release(v3);
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v16, 0, 0);
  v5 = *v4;
  swift_bridgeObjectRetain_n(v5, 2);
  v6 = sub_1001BF934(v5);
  swift_bridgeObjectRelease(v5);
  v15 = v6;
  sub_1001A5C6C(&v15);
  swift_bridgeObjectRelease(v5);
  v7 = (uint64_t)v15;
  v8 = sub_1001A3FB4((uint64_t)v15);
  swift_release(v7);
  v9 = v8[2];
  if (v9)
  {
    sub_10009061C(&qword_100270C60);
    v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = &_swiftEmptyDictionarySingleton;
  }
  v15 = v10;
  swift_bridgeObjectRetain(v8);
  sub_1001A89BC(v11, 1, &v15);
  swift_bridgeObjectRelease(v8);
  v12 = (uint64_t)v15;
  v13 = *(os_unfair_lock_s **)(v1 + v2);
  swift_retain(v13);
  os_unfair_lock_unlock(v13 + 4);
  swift_release(v13);
  return v12;
}

_QWORD *sub_1001A3FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10009061C(&qword_100271490);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_1001A509C(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v12 = *(_QWORD *)(v2 + 72);
    v10 = v17;
    do
    {
      sub_1000ACE4C(v11, (uint64_t)v4, (uint64_t *)&unk_10026E6B0);
      swift_dynamicCast(v8, v4, v16, v5, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_1001A509C(0, v10[2] + 1, 1);
        v10 = v17;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001A509C(v13 > 1, v14 + 1, 1);
        v10 = v17;
      }
      v10[2] = v14 + 1;
      sub_1000D55A0((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_100271490);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_1001A4174()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  os_unfair_lock_s *v7;
  _QWORD *v9;
  char v10[24];

  v1 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain(v2);
  os_unfair_lock_lock(v2 + 4);
  swift_release(v2);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v10, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain_n(v4, 2);
  v5 = sub_1001BF738(v4);
  swift_bridgeObjectRelease(v4);
  v9 = v5;
  sub_1001A5BEC(&v9);
  swift_bridgeObjectRelease(v4);
  v6 = v9;
  v7 = *(os_unfair_lock_s **)(v0 + v1);
  swift_retain(v7);
  os_unfair_lock_unlock(v7 + 4);
  swift_release(v7);
  return v6;
}

void sub_1001A4258(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  int v31;
  uint8_t *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  _QWORD v52[3];
  char v53[8];
  uint64_t v54;
  uint64_t v55;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v12 = a4;
    swift_errorRetain(a2);
    v13 = v12;
    v14 = swift_errorRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v55 = v18;
      *(_DWORD *)v17 = 136315394;
      v19 = sub_10011B948();
      v21 = v20;
      v54 = sub_1000906BC(v19, v20, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v17 + 4, v17 + 12);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v17 + 12) = 2080;
      swift_getErrorValue(a2, v53, v52);
      v22 = Error.localizedDescription.getter(v52[1], v52[2]);
      v24 = v23;
      v54 = sub_1000906BC(v22, v23, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to connect to %s: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    return;
  }
  v25 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  if (*(_QWORD *)&a4[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v26 = *(void **)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    *(_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device) = a4;
    v27 = a4;

    *(_BYTE *)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 2;
    v28 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn);
    swift_retain(v28);
    sub_1000ECBEC();
    swift_release(v28);
    v29 = v27;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      v50 = v31;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v55 = v49;
      *(_DWORD *)v32 = 136315138;
      v51 = v25;
      v33 = *(Class *)((char *)&v25->isa + (_QWORD)a4);
      if (!v33)
      {
LABEL_17:

        __break(1u);
        return;
      }
      v48 = v32 + 4;
      v34 = objc_msgSend(v33, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v54 = sub_1000906BC(v36, v38, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48, v32 + 12);

      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v50, "Connecting peripheral %s", v32, 0xCu);
      v39 = v49;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v25 = v51;
    }
    else
    {

    }
    v47 = *(uint64_t *)((char *)&v25->isa + (_QWORD)a4);
    if (v47)
    {
      objc_msgSend(a1, "connectPeripheral:options:", v47, 0);
      return;
    }
    __break(1u);
    goto LABEL_17;
  }
  v40 = a4;
  v51 = Logger.logObject.getter(v40);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v55 = v43;
    *(_DWORD *)v42 = 136315138;
    v44 = sub_10011B948();
    v46 = v45;
    v54 = sub_1000906BC(v44, v45, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v51, v41, "Unable to connect to %s: Peripheral is nil", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {

  }
}

void sub_1001A47F4(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  double v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  void *v43;
  uint64_t v44;
  uint8_t *v45;
  _QWORD v46[3];
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  uint64_t v51[3];
  char *v52;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v12 = a4;
    swift_errorRetain(a2);
    v13 = v12;
    v14 = swift_errorRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v51[0] = v18;
      *(_DWORD *)v17 = 136315394;
      if (a4)
      {
        v19 = sub_10011B948();
        v21 = v20;
      }
      else
      {
        v21 = 0xE600000000000000;
        v19 = 0x656369766564;
      }
      v49 = sub_1000906BC(v19, v21, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v17 + 4, v17 + 12);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v17 + 12) = 2080;
      swift_getErrorValue(a2, v47, v46);
      v39 = Error.localizedDescription.getter(v46[1], v46[2]);
      v41 = v40;
      v49 = sub_1000906BC(v39, v40, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v41);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to disconnect %s: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    return;
  }
  v52 = a4;
  v22 = a4;
  if (!a4)
  {
    v22 = *(char **)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    v52 = v22;
    if (!v22)
      goto LABEL_14;
    v23 = v22;
  }
  if (*(_QWORD *)&v22[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v24 = Logger.logObject.getter(a4);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v51[0] = v27;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)&v28 = swift_beginAccess(&v52, &v49, 0, 0).n128_u64[0];
      v29 = v52;
      if (!v52)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v30 = *(void **)&v52[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (!v30)
      {
LABEL_27:

        __break(1u);
        return;
      }
      v45 = v26 + 4;
      v31 = objc_msgSend(v30, "identifier", v28);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v48 = sub_1000906BC(v33, v35, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v45, v26 + 12);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Disconnecting peripheral %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)&v42 = swift_beginAccess(&v52, v51, 0, 0).n128_u64[0];
    v43 = v52;
    if (v52)
    {
      v29 = (void *)OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
      if (*(_QWORD *)&v52[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        objc_msgSend(a1, "cancelPeripheralConnection:", v42);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_14:
  v36 = Logger.logObject.getter(a4);
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to disconnect: Invalid BT peripheral", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

}

id sub_1001A4CE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BTLink(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001A4E1C()
{
  return type metadata accessor for BTLink(0);
}

uint64_t type metadata accessor for BTLink(uint64_t a1)
{
  uint64_t result;

  result = qword_100271280;
  if (!qword_100271280)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTLink);
  return result;
}

uint64_t sub_1001A4E60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    v4[4] = &unk_1001E0DF8;
    v4[5] = "\b";
    v4[6] = &unk_1001E0E10;
    v4[7] = &unk_1001E0E28;
    v4[8] = &unk_1001E0E40;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = &unk_1001E0E40;
    v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[12] = &unk_1001E0E10;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BTLink.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001A4F7C + 4 * byte_1001E0DBD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001A4FB0 + 4 * asc_1001E0DB8[v4]))();
}

uint64_t sub_1001A4FB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4FB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4FC0);
  return result;
}

uint64_t sub_1001A4FCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A4FD4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001A4FD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4FE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTLink.Mode()
{
  return &type metadata for BTLink.Mode;
}

unint64_t sub_1001A5000()
{
  unint64_t result;

  result = qword_100271290;
  if (!qword_100271290)
  {
    result = swift_getWitnessTable(&unk_1001E0EA0, &type metadata for BTLink.Mode);
    atomic_store(result, (unint64_t *)&qword_100271290);
  }
  return result;
}

uint64_t sub_1001A5048(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001A512C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001A5064(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001A5288(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001A5080(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001A53E4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001A509C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001A554C(a1, a2, a3, (_QWORD *)*v3, &qword_1002712A0, &qword_100271490);
  *v3 = result;
  return result;
}

uint64_t sub_1001A50C8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001A572C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001A50E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001A58B0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001A5100(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001A5A0C(a1, a2, a3, (_QWORD *)*v3, &qword_1002712B8, (uint64_t (*)(_QWORD))&type metadata accessor for DockKitBoundingBox);
  *v3 = result;
  return result;
}

uint64_t sub_1001A512C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_100271600);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A5288(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_10026D8A0);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A53E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C((uint64_t *)&unk_10026E6C0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A554C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10009061C(a5);
  v14 = *(_QWORD *)(sub_10009061C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_10009061C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A572C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_10026D8C0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A58B0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_10026D8B8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A5A0C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10009061C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001A5BEC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BTDiscoveredDevice(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001A8E40(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1001A5CF0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001A5C6C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_10009061C((uint64_t *)&unk_10026E6B0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001A8E74(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1001A66AC(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001A5CF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::Int v18;
  unint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  unint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  Swift::Int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  Swift::Int v138;
  char *v139;
  Swift::Int v140;
  uint64_t v141;
  Swift::Int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  Swift::Int v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  Swift::Int v153;

  v2 = v1;
  v151 = type metadata accessor for BTDiscoveredDevice(0);
  v144 = *(_QWORD *)(v151 - 8);
  v4 = __chkstk_darwin(v151);
  v141 = (uint64_t)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v152 = (uint64_t)&v136 - v7;
  v8 = __chkstk_darwin(v6);
  v148 = (uint64_t)&v136 - v9;
  __chkstk_darwin(v8);
  v147 = (uint64_t)&v136 - v10;
  v11 = a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_142;
    if (v11)
      return sub_1001A7450(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_150;
  v138 = result;
  if (v11 < 2)
  {
    v17 = (char *)_swiftEmptyArrayStorage;
    v143 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v144 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80));
    v137 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v19 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v19 >= 2)
      {
        v128 = *a1;
        do
        {
          v129 = v19 - 2;
          if (v19 < 2)
            goto LABEL_137;
          if (!v128)
            goto LABEL_149;
          v122 = v17;
          v130 = *(_QWORD *)&v17[16 * v129 + 32];
          v131 = *(_QWORD *)&v17[16 * v19 + 24];
          sub_1001A7A34(v128 + *(_QWORD *)(v144 + 72) * v130, v128 + *(_QWORD *)(v144 + 72) * *(_QWORD *)&v17[16 * v19 + 16], v128 + *(_QWORD *)(v144 + 72) * v131, v143);
          if (v2)
            goto LABEL_117;
          if (v131 < v130)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v122 = sub_1001A89A8((uint64_t)v17);
          if (v129 >= *((_QWORD *)v122 + 2))
            goto LABEL_139;
          v132 = &v122[16 * v129 + 32];
          *(_QWORD *)v132 = v130;
          *((_QWORD *)v132 + 1) = v131;
          v133 = *((_QWORD *)v122 + 2);
          if (v19 > v133)
            goto LABEL_140;
          memmove(&v122[16 * v19 + 16], &v122[16 * v19 + 32], 16 * (v133 - v19));
          *((_QWORD *)v122 + 2) = v133 - 1;
          v19 = v133 - 1;
          v17 = v122;
        }
        while (v133 > 2);
      }
      v134 = v17;
LABEL_119:
      swift_bridgeObjectRelease(v134);
      v135 = v137;
      v137[2] = 0;
      return swift_bridgeObjectRelease(v135);
    }
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v151);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v144 + 80);
    v137 = (_QWORD *)v15;
    v143 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v17 = (char *)_swiftEmptyArrayStorage;
  v150 = a1;
  while (1)
  {
    v20 = v18;
    v21 = v18 + 1;
    v142 = v18;
    if (v18 + 1 >= v11)
    {
      v33 = v18 + 1;
    }
    else
    {
      v22 = v18;
      v23 = *a1;
      v24 = *(_QWORD *)(v144 + 72);
      v25 = *a1 + v24 * v21;
      v26 = v147;
      sub_1000D537C(v25, v147);
      v149 = v11;
      v27 = v148;
      v28 = sub_1000D537C(v23 + v24 * v22, v148);
      v29 = Date.timeIntervalSince1970.getter(v28);
      v31 = Date.timeIntervalSince1970.getter(v30);
      v32 = v27;
      v11 = v149;
      sub_1000D53C0(v32);
      sub_1000D53C0(v26);
      v33 = v142 + 2;
      v145 = v23;
      v153 = v24;
      if (v142 + 2 >= v11)
      {
        a1 = v150;
      }
      else
      {
        v136 = v2;
        v139 = v17;
        v34 = v24 * v21;
        v35 = v23;
        v36 = v24 * v33;
        while (1)
        {
          v37 = v33;
          v38 = v147;
          sub_1000D537C(v35 + v36, v147);
          v39 = v148;
          v40 = sub_1000D537C(v35 + v34, v148);
          v41 = Date.timeIntervalSince1970.getter(v40);
          v43 = Date.timeIntervalSince1970.getter(v42) >= v41;
          sub_1000D53C0(v39);
          sub_1000D53C0(v38);
          if (v31 < v29 == v43)
            break;
          v33 = v37 + 1;
          v35 += v153;
          v11 = v149;
          if (v149 == v37 + 1)
          {
            v33 = v149;
            a1 = v150;
            v17 = v139;
            goto LABEL_24;
          }
        }
        v11 = v149;
        a1 = v150;
        v17 = v139;
        v33 = v37;
LABEL_24:
        v2 = v136;
      }
      v20 = v142;
      if (v31 < v29)
      {
        if (v33 < v142)
          goto LABEL_143;
        if (v142 < v33)
        {
          v139 = v17;
          v44 = 0;
          v45 = v153;
          v46 = v153 * (v33 - 1);
          v47 = v33 * v153;
          v48 = v142;
          v49 = v142 * v153;
          do
          {
            if (v48 != v33 + v44 - 1)
            {
              v52 = v33;
              v53 = v145;
              if (!v145)
                goto LABEL_148;
              v54 = v145 + v49;
              v146 = v145 + v46;
              sub_10019FB98(v145 + v49, v141);
              if (v49 < v46 || v54 >= v53 + v47)
              {
                v50 = v53 + v49;
                v51 = v146;
                swift_arrayInitWithTakeFrontToBack(v50, v146, 1, v151);
              }
              else
              {
                v51 = v146;
                if (v49 != v46)
                  swift_arrayInitWithTakeBackToFront(v54, v146);
              }
              sub_10019FB98(v141, v51);
              a1 = v150;
              v33 = v52;
              v45 = v153;
            }
            ++v48;
            --v44;
            v46 -= v45;
            v47 -= v45;
            v49 += v45;
          }
          while (v48 < v33 + v44);
          v17 = v139;
          v20 = v142;
          v11 = v149;
        }
      }
    }
    if (v33 < v11)
    {
      if (__OFSUB__(v33, v20))
        goto LABEL_141;
      if (v33 - v20 < v138)
        break;
    }
LABEL_57:
    if (v33 < v20)
      goto LABEL_136;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v149 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = sub_1001A85E8(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v77 = *((_QWORD *)v17 + 2);
    v76 = *((_QWORD *)v17 + 3);
    v19 = v77 + 1;
    if (v77 >= v76 >> 1)
      v17 = sub_1001A85E8((char *)(v76 > 1), v77 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v19;
    v78 = v17 + 32;
    v79 = &v17[16 * v77 + 32];
    v80 = v149;
    *(_QWORD *)v79 = v20;
    *((_QWORD *)v79 + 1) = v80;
    if (v77)
    {
      while (1)
      {
        v81 = v19 - 1;
        if (v19 >= 4)
        {
          v86 = &v78[16 * v19];
          v87 = *((_QWORD *)v86 - 8);
          v88 = *((_QWORD *)v86 - 7);
          v92 = __OFSUB__(v88, v87);
          v89 = v88 - v87;
          if (v92)
            goto LABEL_125;
          v91 = *((_QWORD *)v86 - 6);
          v90 = *((_QWORD *)v86 - 5);
          v92 = __OFSUB__(v90, v91);
          v84 = v90 - v91;
          v85 = v92;
          if (v92)
            goto LABEL_126;
          v93 = v19 - 2;
          v94 = &v78[16 * v19 - 32];
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v92 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          if (v92)
            goto LABEL_128;
          v92 = __OFADD__(v84, v97);
          v98 = v84 + v97;
          if (v92)
            goto LABEL_131;
          if (v98 >= v89)
          {
            v116 = &v78[16 * v81];
            v118 = *(_QWORD *)v116;
            v117 = *((_QWORD *)v116 + 1);
            v92 = __OFSUB__(v117, v118);
            v119 = v117 - v118;
            if (v92)
              goto LABEL_135;
            v109 = v84 < v119;
            goto LABEL_94;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v110 = *((_QWORD *)v17 + 4);
            v111 = *((_QWORD *)v17 + 5);
            v92 = __OFSUB__(v111, v110);
            v103 = v111 - v110;
            v104 = v92;
            goto LABEL_88;
          }
          v83 = *((_QWORD *)v17 + 4);
          v82 = *((_QWORD *)v17 + 5);
          v92 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          v85 = v92;
        }
        if ((v85 & 1) != 0)
          goto LABEL_127;
        v93 = v19 - 2;
        v99 = &v78[16 * v19 - 32];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v102 = __OFSUB__(v100, v101);
        v103 = v100 - v101;
        v104 = v102;
        if (v102)
          goto LABEL_130;
        v105 = &v78[16 * v81];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v92 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v92)
          goto LABEL_133;
        if (__OFADD__(v103, v108))
          goto LABEL_134;
        if (v103 + v108 >= v84)
        {
          v109 = v84 < v108;
LABEL_94:
          if (v109)
            v81 = v93;
          goto LABEL_96;
        }
LABEL_88:
        if ((v104 & 1) != 0)
          goto LABEL_129;
        v112 = &v78[16 * v81];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v92 = __OFSUB__(v113, v114);
        v115 = v113 - v114;
        if (v92)
          goto LABEL_132;
        if (v115 < v103)
          goto LABEL_14;
LABEL_96:
        v120 = v81 - 1;
        if (v81 - 1 >= v19)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        v121 = *a1;
        if (!*a1)
          goto LABEL_147;
        v122 = v17;
        v123 = &v78[16 * v120];
        v124 = *(_QWORD *)v123;
        v125 = &v78[16 * v81];
        v126 = *((_QWORD *)v125 + 1);
        sub_1001A7A34(v121 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v123, v121 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v125, v121 + *(_QWORD *)(v144 + 72) * v126, v143);
        if (v2)
        {
LABEL_117:
          v134 = v122;
          goto LABEL_119;
        }
        if (v126 < v124)
          goto LABEL_122;
        if (v81 > *((_QWORD *)v122 + 2))
          goto LABEL_123;
        *(_QWORD *)v123 = v124;
        *(_QWORD *)&v78[16 * v120 + 8] = v126;
        v127 = *((_QWORD *)v122 + 2);
        if (v81 >= v127)
          goto LABEL_124;
        v17 = v122;
        v19 = v127 - 1;
        memmove(&v78[16 * v81], v125 + 16, 16 * (v127 - 1 - v81));
        *((_QWORD *)v122 + 2) = v127 - 1;
        a1 = v150;
        if (v127 <= 2)
          goto LABEL_14;
      }
    }
    v19 = 1;
LABEL_14:
    v11 = a1[1];
    v18 = v149;
    if (v149 >= v11)
      goto LABEL_105;
  }
  if (__OFADD__(v20, v138))
    goto LABEL_144;
  if (v20 + v138 >= v11)
    v55 = v11;
  else
    v55 = v20 + v138;
  if (v55 >= v20)
  {
    if (v33 != v55)
    {
      v139 = v17;
      v140 = v55;
      v136 = v2;
      v56 = *(_QWORD *)(v144 + 72);
      v57 = v56 * (v33 - 1);
      v145 = v56;
      v58 = v33 * v56;
      do
      {
        v60 = 0;
        v149 = v33;
        v146 = v58;
        while (1)
        {
          v153 = v20;
          v61 = *a1;
          v62 = v58 + v60 + *a1;
          v63 = v147;
          sub_1000D537C(v62, v147);
          v64 = v57;
          v65 = v57 + v60 + v61;
          v66 = a1;
          v67 = v148;
          v68 = sub_1000D537C(v65, v148);
          v69 = Date.timeIntervalSince1970.getter(v68);
          v71 = Date.timeIntervalSince1970.getter(v70);
          sub_1000D53C0(v67);
          sub_1000D53C0(v63);
          if (v71 >= v69)
            break;
          v72 = *v66;
          if (!*v66)
            goto LABEL_146;
          v58 = v146;
          v73 = v72 + v146 + v60;
          v57 = v64;
          v74 = v72 + v64 + v60;
          sub_10019FB98(v73, v152);
          swift_arrayInitWithTakeFrontToBack(v73, v74, 1, v151);
          sub_10019FB98(v152, v74);
          v60 -= v145;
          v20 = v153 + 1;
          v59 = v149;
          a1 = v150;
          if (v149 == v153 + 1)
            goto LABEL_50;
        }
        v59 = v149;
        a1 = v66;
        v57 = v64;
        v58 = v146;
LABEL_50:
        v33 = v59 + 1;
        v57 += v145;
        v58 += v145;
        v20 = v142;
      }
      while (v33 != v140);
      v33 = v140;
      v2 = v136;
      v17 = v139;
    }
    goto LABEL_57;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001A66AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int result;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  double v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  _QWORD *v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  Swift::Int v185;
  char *v186;
  uint64_t v187;
  Swift::Int v188;
  Swift::Int v189;
  uint64_t v190;
  Swift::Int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  Swift::Int v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  void (*v210)(char *, uint64_t);
  uint64_t v211;

  v2 = v1;
  v203 = type metadata accessor for Date(0);
  v194 = *(_QWORD *)(v203 - 8);
  v4 = __chkstk_darwin(v203);
  v202 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v201 = (char *)&v182 - v6;
  v211 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v193 = *(_QWORD *)(v211 - 8);
  v7 = __chkstk_darwin(v211);
  v190 = (uint64_t)&v182 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v207 = (uint64_t)&v182 - v10;
  v11 = __chkstk_darwin(v9);
  v200 = (uint64_t *)((char *)&v182 - v12);
  v13 = __chkstk_darwin(v11);
  v199 = (uint64_t *)((char *)&v182 - v14);
  v15 = __chkstk_darwin(v13);
  v198 = (uint64_t *)((char *)&v182 - v16);
  __chkstk_darwin(v15);
  v204 = (uint64_t *)((char *)&v182 - v17);
  v18 = a1[1];
  result = _minimumMergeRunLength(_:)(v18);
  if (result >= v18)
  {
    if (v18 < 0)
      goto LABEL_136;
    if (v18)
      return sub_1001A767C(0, v18, 1, a1);
    return result;
  }
  if (v18 >= 0)
    v20 = v18;
  else
    v20 = v18 + 1;
  if (v18 < -1)
    goto LABEL_144;
  v21 = result;
  if (v18 < 2)
  {
    v25 = (char *)_swiftEmptyArrayStorage;
    v192 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80));
    v183 = _swiftEmptyArrayStorage;
    if (v18 != 1)
    {
      v27 = _swiftEmptyArrayStorage[2];
LABEL_102:
      if (v27 >= 2)
      {
        v175 = *a1;
        do
        {
          v176 = v27 - 2;
          if (v27 < 2)
            goto LABEL_131;
          if (!v175)
            goto LABEL_143;
          v177 = *(_QWORD *)&v25[16 * v176 + 32];
          v178 = *(_QWORD *)&v25[16 * v27 + 24];
          sub_1001A7EC8(v175 + *(_QWORD *)(v193 + 72) * v177, v175 + *(_QWORD *)(v193 + 72) * *(_QWORD *)&v25[16 * v27 + 16], v175 + *(_QWORD *)(v193 + 72) * v178, v192);
          if (v2)
            break;
          if (v178 < v177)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
            v25 = sub_1001A89A8((uint64_t)v25);
          if (v176 >= *((_QWORD *)v25 + 2))
            goto LABEL_133;
          v179 = &v25[16 * v176 + 32];
          *(_QWORD *)v179 = v177;
          *((_QWORD *)v179 + 1) = v178;
          v180 = *((_QWORD *)v25 + 2);
          if (v27 > v180)
            goto LABEL_134;
          memmove(&v25[16 * v27 + 16], &v25[16 * v27 + 32], 16 * (v180 - v27));
          *((_QWORD *)v25 + 2) = v180 - 1;
          v27 = v180 - 1;
        }
        while (v180 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease(v25);
      v181 = v183;
      v183[2] = 0;
      return swift_bridgeObjectRelease(v181);
    }
  }
  else
  {
    v22 = v20 >> 1;
    v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(v20 >> 1, v211);
    *(_QWORD *)(v23 + 16) = v22;
    v24 = *(unsigned __int8 *)(v193 + 80);
    v183 = (_QWORD *)v23;
    v192 = v23 + ((v24 + 32) & ~v24);
  }
  v26 = 0;
  v25 = (char *)_swiftEmptyArrayStorage;
  v205 = a1;
  v185 = v21;
  while (1)
  {
    v28 = (Swift::Int)(v26 + 1);
    if ((uint64_t)(v26 + 1) < v18)
    {
      v184 = v2;
      v187 = *a1;
      v29 = v187;
      v30 = *(_QWORD *)(v193 + 72);
      v208 = v30;
      v209 = v26 + 1;
      v31 = v204;
      sub_1000ACE4C(v187 + v30 * v28, (uint64_t)v204, (uint64_t *)&unk_10026E6B0);
      v32 = v29 + v30 * (_QWORD)v26;
      v33 = v198;
      sub_1000ACE4C(v32, (uint64_t)v198, (uint64_t *)&unk_10026E6B0);
      v34 = *(int *)(v211 + 48);
      v35 = v199;
      v36 = (uint64_t)v199 + v34;
      v37 = v31[1];
      *v199 = *v31;
      v35[1] = v37;
      sub_1000D537C((uint64_t)v31 + v34, v36);
      v38 = type metadata accessor for BTDiscoveredDevice(0);
      v39 = v36 + *(int *)(v38 + 28);
      v40 = v194;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
      v42 = v201;
      v197 = v18;
      v43 = v203;
      v41(v201, v39, v203);
      v44 = sub_1000D53C0(v36);
      v45 = Date.timeIntervalSince1970.getter(v44);
      v46 = *(void (**)(char *, uint64_t))(v40 + 8);
      v46(v42, v43);
      v47 = *(int *)(v211 + 48);
      v48 = v200;
      v49 = (uint64_t)v200 + v47;
      v50 = v33[1];
      *v200 = *v33;
      v48[1] = v50;
      sub_1000D537C((uint64_t)v33 + v47, v49);
      v195 = (uint64_t)v41;
      v196 = v38;
      v51 = v202;
      v41(v202, v49 + *(int *)(v38 + 28), v43);
      v52 = sub_1000D53C0(v49);
      v53 = Date.timeIntervalSince1970.getter(v52);
      v54 = v51;
      v55 = v187;
      v56 = v43;
      v18 = v197;
      v210 = v46;
      v46(v54, v56);
      sub_10009B2C0((uint64_t)v33, (uint64_t *)&unk_10026E6B0);
      sub_10009B2C0((uint64_t)v204, (uint64_t *)&unk_10026E6B0);
      v191 = (Swift::Int)v26;
      v28 = (Swift::Int)(v26 + 2);
      if ((uint64_t)(v26 + 2) < v18)
      {
        v186 = v25;
        v189 = v208 * (_QWORD)v209;
        v188 = v208 * v28;
        while (1)
        {
          v206 = (char *)v28;
          LODWORD(v209) = v53 < v45;
          v57 = v204;
          sub_1000ACE4C(v55 + v188, (uint64_t)v204, (uint64_t *)&unk_10026E6B0);
          v58 = v198;
          sub_1000ACE4C(v55 + v189, (uint64_t)v198, (uint64_t *)&unk_10026E6B0);
          v59 = v211;
          v60 = *(int *)(v211 + 48);
          v61 = v199;
          v62 = (uint64_t)v199 + v60;
          v63 = v57[1];
          *v199 = *v57;
          v61[1] = v63;
          sub_1000D537C((uint64_t)v57 + v60, v62);
          v65 = (void (*)(char *, uint64_t, uint64_t))v195;
          v64 = v196;
          v66 = v201;
          v67 = v203;
          ((void (*)(char *, uint64_t, uint64_t))v195)(v201, v62 + *(int *)(v196 + 28), v203);
          v68 = sub_1000D53C0(v62);
          v69 = Date.timeIntervalSince1970.getter(v68);
          v210(v66, v67);
          v70 = *(int *)(v59 + 48);
          v71 = v200;
          v72 = (uint64_t)v200 + v70;
          v73 = v58[1];
          *v200 = *v58;
          v71[1] = v73;
          sub_1000D537C((uint64_t)v58 + v70, v72);
          v74 = v202;
          v65(v202, v72 + *(int *)(v64 + 28), v67);
          v75 = sub_1000D53C0(v72);
          v76 = Date.timeIntervalSince1970.getter(v75);
          v210(v74, v67);
          sub_10009B2C0((uint64_t)v58, (uint64_t *)&unk_10026E6B0);
          sub_10009B2C0((uint64_t)v57, (uint64_t *)&unk_10026E6B0);
          if ((_DWORD)v209 == v76 >= v69)
            break;
          v28 = (Swift::Int)(v206 + 1);
          v55 += v208;
          v18 = v197;
          if ((char *)v197 == v206 + 1)
          {
            v28 = v197;
            v25 = v186;
            goto LABEL_22;
          }
        }
        v25 = v186;
        v28 = (Swift::Int)v206;
        v18 = v197;
      }
LABEL_22:
      a1 = v205;
      v2 = v184;
      v21 = v185;
      v26 = (char *)v191;
      if (v53 < v45)
      {
        if (v28 < v191)
          goto LABEL_137;
        if (v191 < v28)
        {
          v77 = 0;
          v78 = v208;
          v79 = v208 * (v28 - 1);
          v80 = v28 * v208;
          v81 = v191;
          v82 = v191 * v208;
          v186 = v25;
          do
          {
            if (v81 != v28 + v77 - 1)
            {
              v85 = v187;
              if (!v187)
                goto LABEL_142;
              v86 = v187 + v82;
              v210 = (void (*)(char *, uint64_t))(v187 + v79);
              sub_1000D55A0(v187 + v82, v190, (uint64_t *)&unk_10026E6B0);
              if (v82 < v79 || v86 >= v85 + v80)
              {
                v83 = v85 + v82;
                v84 = (uint64_t)v210;
                swift_arrayInitWithTakeFrontToBack(v83, v210, 1, v211);
              }
              else
              {
                v84 = (uint64_t)v210;
                if (v82 != v79)
                  swift_arrayInitWithTakeBackToFront(v86, v210);
              }
              sub_1000D55A0(v190, v84, (uint64_t *)&unk_10026E6B0);
              v25 = v186;
              v78 = v208;
            }
            ++v81;
            --v77;
            v79 -= v78;
            v80 -= v78;
            v82 += v78;
          }
          while (v81 < v28 + v77);
          a1 = v205;
          v21 = v185;
          v26 = (char *)v191;
          v18 = v197;
        }
      }
    }
    if (v28 < v18)
    {
      if (__OFSUB__(v28, v26))
        goto LABEL_135;
      if (v28 - (uint64_t)v26 < v21)
        break;
    }
LABEL_54:
    if (v28 < (uint64_t)v26)
      goto LABEL_130;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    v206 = (char *)v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v25 = sub_1001A85E8(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v124 = *((_QWORD *)v25 + 2);
    v123 = *((_QWORD *)v25 + 3);
    v27 = v124 + 1;
    if (v124 >= v123 >> 1)
      v25 = sub_1001A85E8((char *)(v123 > 1), v124 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v27;
    v125 = v25 + 32;
    v126 = &v25[16 * v124 + 32];
    v127 = v206;
    *(_QWORD *)v126 = v26;
    *((_QWORD *)v126 + 1) = v127;
    if (v124)
    {
      while (1)
      {
        v128 = v27 - 1;
        if (v27 >= 4)
        {
          v133 = &v125[16 * v27];
          v134 = *((_QWORD *)v133 - 8);
          v135 = *((_QWORD *)v133 - 7);
          v139 = __OFSUB__(v135, v134);
          v136 = v135 - v134;
          if (v139)
            goto LABEL_119;
          v138 = *((_QWORD *)v133 - 6);
          v137 = *((_QWORD *)v133 - 5);
          v139 = __OFSUB__(v137, v138);
          v131 = v137 - v138;
          v132 = v139;
          if (v139)
            goto LABEL_120;
          v140 = v27 - 2;
          v141 = &v125[16 * v27 - 32];
          v143 = *(_QWORD *)v141;
          v142 = *((_QWORD *)v141 + 1);
          v139 = __OFSUB__(v142, v143);
          v144 = v142 - v143;
          if (v139)
            goto LABEL_122;
          v139 = __OFADD__(v131, v144);
          v145 = v131 + v144;
          if (v139)
            goto LABEL_125;
          if (v145 >= v136)
          {
            v163 = &v125[16 * v128];
            v165 = *(_QWORD *)v163;
            v164 = *((_QWORD *)v163 + 1);
            v139 = __OFSUB__(v164, v165);
            v166 = v164 - v165;
            if (v139)
              goto LABEL_129;
            v156 = v131 < v166;
            goto LABEL_91;
          }
        }
        else
        {
          if (v27 != 3)
          {
            v157 = *((_QWORD *)v25 + 4);
            v158 = *((_QWORD *)v25 + 5);
            v139 = __OFSUB__(v158, v157);
            v150 = v158 - v157;
            v151 = v139;
            goto LABEL_85;
          }
          v130 = *((_QWORD *)v25 + 4);
          v129 = *((_QWORD *)v25 + 5);
          v139 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          v132 = v139;
        }
        if ((v132 & 1) != 0)
          goto LABEL_121;
        v140 = v27 - 2;
        v146 = &v125[16 * v27 - 32];
        v148 = *(_QWORD *)v146;
        v147 = *((_QWORD *)v146 + 1);
        v149 = __OFSUB__(v147, v148);
        v150 = v147 - v148;
        v151 = v149;
        if (v149)
          goto LABEL_124;
        v152 = &v125[16 * v128];
        v154 = *(_QWORD *)v152;
        v153 = *((_QWORD *)v152 + 1);
        v139 = __OFSUB__(v153, v154);
        v155 = v153 - v154;
        if (v139)
          goto LABEL_127;
        if (__OFADD__(v150, v155))
          goto LABEL_128;
        if (v150 + v155 >= v131)
        {
          v156 = v131 < v155;
LABEL_91:
          if (v156)
            v128 = v140;
          goto LABEL_93;
        }
LABEL_85:
        if ((v151 & 1) != 0)
          goto LABEL_123;
        v159 = &v125[16 * v128];
        v161 = *(_QWORD *)v159;
        v160 = *((_QWORD *)v159 + 1);
        v139 = __OFSUB__(v160, v161);
        v162 = v160 - v161;
        if (v139)
          goto LABEL_126;
        if (v162 < v150)
          goto LABEL_14;
LABEL_93:
        v167 = v128 - 1;
        if (v128 - 1 >= v27)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!*v205)
          goto LABEL_141;
        v168 = &v125[16 * v167];
        v169 = v125;
        v170 = *(_QWORD *)v168;
        v171 = v169;
        v172 = &v169[16 * v128];
        v173 = *((_QWORD *)v172 + 1);
        sub_1001A7EC8(*v205 + *(_QWORD *)(v193 + 72) * *(_QWORD *)v168, *v205 + *(_QWORD *)(v193 + 72) * *(_QWORD *)v172, *v205 + *(_QWORD *)(v193 + 72) * v173, v192);
        if (v2)
          goto LABEL_113;
        if (v173 < v170)
          goto LABEL_116;
        if (v128 > *((_QWORD *)v25 + 2))
          goto LABEL_117;
        *(_QWORD *)v168 = v170;
        *(_QWORD *)&v171[16 * v167 + 8] = v173;
        v174 = *((_QWORD *)v25 + 2);
        if (v128 >= v174)
          goto LABEL_118;
        v125 = v171;
        v27 = v174 - 1;
        memmove(v172, v172 + 16, 16 * (v174 - 1 - v128));
        *((_QWORD *)v25 + 2) = v174 - 1;
        if (v174 <= 2)
          goto LABEL_14;
      }
    }
    v27 = 1;
LABEL_14:
    a1 = v205;
    v26 = v206;
    v18 = v205[1];
    v21 = v185;
    if ((uint64_t)v206 >= v18)
      goto LABEL_102;
  }
  if (__OFADD__(v26, v21))
    goto LABEL_138;
  if ((uint64_t)&v26[v21] >= v18)
    v87 = v18;
  else
    v87 = (Swift::Int)&v26[v21];
  if (v87 >= (uint64_t)v26)
  {
    if (v28 != v87)
    {
      v191 = (Swift::Int)v26;
      v186 = v25;
      v184 = v2;
      v88 = *(_QWORD *)(v193 + 72);
      v89 = v88 * (v28 - 1);
      v195 = v88;
      v90 = v28 * v88;
      v189 = v87;
      do
      {
        v92 = 0;
        v93 = (void (*)(char *, uint64_t))v191;
        v206 = (char *)v28;
        v196 = v90;
        v197 = v89;
        while (1)
        {
          v210 = v93;
          v94 = *a1;
          v209 = (char *)(v90 + v92);
          v95 = v90 + v92 + v94;
          v96 = v204;
          sub_1000ACE4C(v95, (uint64_t)v204, (uint64_t *)&unk_10026E6B0);
          v208 = v89 + v92;
          v97 = v198;
          sub_1000ACE4C(v89 + v92 + v94, (uint64_t)v198, (uint64_t *)&unk_10026E6B0);
          v98 = *(int *)(v211 + 48);
          v99 = v199;
          v100 = (uint64_t)v199 + v98;
          v101 = v96[1];
          *v199 = *v96;
          v99[1] = v101;
          sub_1000D537C((uint64_t)v96 + v98, v100);
          v102 = type metadata accessor for BTDiscoveredDevice(0);
          v103 = v194;
          v104 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
          v105 = v201;
          v106 = v203;
          v104(v201, v100 + *(int *)(v102 + 28), v203);
          v107 = sub_1000D53C0(v100);
          v108 = Date.timeIntervalSince1970.getter(v107);
          v109 = v205;
          v110 = *(void (**)(char *, uint64_t))(v103 + 8);
          v110(v105, v106);
          v111 = *(int *)(v211 + 48);
          v112 = v200;
          v113 = (uint64_t)v200 + v111;
          v114 = v97[1];
          *v200 = *v97;
          v112[1] = v114;
          sub_1000D537C((uint64_t)v97 + v111, v113);
          v115 = v113 + *(int *)(v102 + 28);
          v116 = v202;
          v104(v202, v115, v106);
          v117 = sub_1000D53C0(v113);
          v118 = Date.timeIntervalSince1970.getter(v117);
          v110(v116, v106);
          sub_10009B2C0((uint64_t)v97, (uint64_t *)&unk_10026E6B0);
          sub_10009B2C0((uint64_t)v96, (uint64_t *)&unk_10026E6B0);
          if (v118 >= v108)
            break;
          v119 = *v109;
          if (!*v109)
            goto LABEL_140;
          a1 = v109;
          v90 = v196;
          v89 = v197;
          v120 = v119 + v196 + v92;
          v121 = v119 + v197 + v92;
          sub_1000D55A0(v120, v207, (uint64_t *)&unk_10026E6B0);
          swift_arrayInitWithTakeFrontToBack(v120, v121, 1, v211);
          sub_1000D55A0(v207, v121, (uint64_t *)&unk_10026E6B0);
          v92 -= v195;
          v93 = (void (*)(char *, uint64_t))((char *)v210 + 1);
          v91 = v206;
          if (v206 == (char *)v210 + 1)
            goto LABEL_47;
        }
        a1 = v109;
        v91 = v206;
        v90 = v196;
        v89 = v197;
LABEL_47:
        v28 = (Swift::Int)(v91 + 1);
        v89 += v195;
        v90 += v195;
      }
      while (v28 != v189);
      v28 = v189;
      v2 = v184;
      v25 = v186;
      v26 = (char *)v191;
    }
    goto LABEL_54;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A7450(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a1;
  v33 = type metadata accessor for BTDiscoveredDevice(0);
  v7 = __chkstk_darwin(v33);
  v34 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v28 - v10;
  result = __chkstk_darwin(v9);
  v15 = (char *)&v28 - v14;
  v32 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v36 = v16 * (v32 - 1);
    v31 = v16;
    v35 = v16 * v32;
LABEL_5:
    v17 = 0;
    v18 = v30;
    while (1)
    {
      v19 = *a4;
      sub_1000D537C(v35 + v17 + *a4, (uint64_t)v15);
      v20 = sub_1000D537C(v36 + v17 + v19, (uint64_t)v11);
      v21 = Date.timeIntervalSince1970.getter(v20);
      v23 = Date.timeIntervalSince1970.getter(v22);
      sub_1000D53C0((uint64_t)v11);
      result = sub_1000D53C0((uint64_t)v15);
      if (v23 >= v21)
      {
LABEL_4:
        v36 += v31;
        v35 += v31;
        if (++v32 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = a4;
      v26 = v24 + v35 + v17;
      v27 = v24 + v36 + v17;
      sub_10019FB98(v26, v34);
      swift_arrayInitWithTakeFrontToBack(v26, v27, 1, v33);
      result = sub_10019FB98(v34, v27);
      v17 -= v31;
      ++v18;
      a4 = v25;
      if (v32 == v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A767C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v38;
  uint64_t v39;
  double v40;
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _BYTE *v59;
  _BYTE *v60;
  _QWORD *v61;
  _QWORD *v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v57 = a1;
  v7 = type metadata accessor for Date(0);
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  v8 = __chkstk_darwin(v7);
  v64 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v63 = &v55[-v10];
  v75 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v11 = __chkstk_darwin(v75);
  v71 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v62 = &v55[-v14];
  v15 = __chkstk_darwin(v13);
  v61 = &v55[-v16];
  v17 = __chkstk_darwin(v15);
  v60 = &v55[-v18];
  result = __chkstk_darwin(v17);
  v59 = &v55[-v21];
  v70 = a3;
  v56 = a2;
  if (a3 != a2)
  {
    v22 = *(_QWORD *)(v20 + 72);
    v23 = v22 * (v70 - 1);
    v67 = v22;
    v24 = v22 * v70;
    v58 = a4;
    v25 = v59;
LABEL_5:
    v26 = 0;
    v74 = v57;
    v68 = v24;
    v69 = v23;
    while (1)
    {
      v27 = *a4;
      v73 = v24 + v26;
      sub_1000ACE4C(v24 + v26 + v27, (uint64_t)v25, (uint64_t *)&unk_10026E6B0);
      v72 = v23 + v26;
      v28 = v23 + v26 + v27;
      v29 = v60;
      sub_1000ACE4C(v28, (uint64_t)v60, (uint64_t *)&unk_10026E6B0);
      v30 = *(int *)(v75 + 48);
      v31 = v61;
      v32 = (uint64_t)v61 + v30;
      v33 = v25[1];
      *v61 = *v25;
      v31[1] = v33;
      sub_1000D537C((uint64_t)v25 + v30, v32);
      v34 = type metadata accessor for BTDiscoveredDevice(0);
      v36 = v65;
      v35 = v66;
      v37 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16);
      v38 = v63;
      v37(v63, v32 + *(int *)(v34 + 28), v66);
      v39 = sub_1000D53C0(v32);
      v40 = Date.timeIntervalSince1970.getter(v39);
      v41 = *(void (**)(_BYTE *, uint64_t))(v36 + 8);
      v41(v38, v35);
      v42 = *(int *)(v75 + 48);
      v43 = v62;
      v44 = (uint64_t)v62 + v42;
      v45 = v29[1];
      *v62 = *v29;
      v43[1] = v45;
      sub_1000D537C((uint64_t)v29 + v42, v44);
      v46 = v44 + *(int *)(v34 + 28);
      v47 = v64;
      v37(v64, v46, v35);
      a4 = v58;
      v48 = sub_1000D53C0(v44);
      v49 = Date.timeIntervalSince1970.getter(v48);
      v50 = v35;
      v24 = v68;
      v41(v47, v50);
      v51 = (uint64_t)v29;
      v23 = v69;
      sub_10009B2C0(v51, (uint64_t *)&unk_10026E6B0);
      result = sub_10009B2C0((uint64_t)v25, (uint64_t *)&unk_10026E6B0);
      if (v49 >= v40)
      {
LABEL_4:
        v23 += v67;
        v24 += v67;
        if (++v70 == v56)
          return result;
        goto LABEL_5;
      }
      v52 = *a4;
      if (!*a4)
        break;
      v53 = v52 + v24 + v26;
      v54 = v52 + v23 + v26;
      sub_1000D55A0(v53, (uint64_t)v71, (uint64_t *)&unk_10026E6B0);
      swift_arrayInitWithTakeFrontToBack(v53, v54, 1, v75);
      result = sub_1000D55A0((uint64_t)v71, v54, (uint64_t *)&unk_10026E6B0);
      v26 -= v67;
      if (v70 == ++v74)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A7A34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for BTDiscoveredDevice(0);
  v8 = __chkstk_darwin(v45);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_61;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v16 = (uint64_t)(a2 - a1) / v14;
  v48 = a1;
  v47 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v19;
      v46 = a4 + v19;
      v48 = a2;
      v44 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        v31 = -v14;
        v43 = a4;
        do
        {
          v32 = a3 + v31;
          sub_1000D537C(v29 + v31, (uint64_t)v12);
          v33 = a2 + v31;
          v34 = sub_1000D537C(a2 + v31, (uint64_t)v10);
          v35 = Date.timeIntervalSince1970.getter(v34);
          v37 = Date.timeIntervalSince1970.getter(v36);
          sub_1000D53C0((uint64_t)v10);
          sub_1000D53C0((uint64_t)v12);
          if (v37 >= v35)
          {
            v39 = v46;
            v40 = v46 + v31;
            v46 += v31;
            if (a3 < v39 || v32 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack(v32, v40, 1, v45);
            }
            else if (a3 != v39)
            {
              swift_arrayInitWithTakeBackToFront(v32, v40);
            }
            v33 = a2;
            v38 = v43;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v32, a2 + v31, 1, v45);
              v38 = v43;
            }
            else
            {
              v38 = v43;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v32, a2 + v31);
            }
            v48 += v31;
          }
          v29 = v46;
          if (v46 <= v38)
            break;
          a2 = v33;
          a3 += v31;
        }
        while (v33 > v44);
      }
      goto LABEL_59;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v20 = a4 + v18;
    v46 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_1000D537C(a2, (uint64_t)v12);
        v22 = sub_1000D537C(a4, (uint64_t)v10);
        v23 = Date.timeIntervalSince1970.getter(v22);
        v25 = Date.timeIntervalSince1970.getter(v24);
        sub_1000D53C0((uint64_t)v10);
        sub_1000D53C0((uint64_t)v12);
        v26 = v48;
        if (v25 >= v23)
        {
          v28 = v47 + v14;
          if (v48 < v47 || v48 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v28;
          v27 = a2;
        }
        else
        {
          v27 = a2 + v14;
          if (v48 < a2 || v48 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v26 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        v48 = v26 + v14;
        a4 = v47;
        if (v47 >= v20)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_59:
    sub_1001A86E0(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A7EC8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  double v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  double v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;

  v8 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  v9 = __chkstk_darwin(v8);
  v100 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v99 = (char *)&v90 - v11;
  v105 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v12 = __chkstk_darwin(v105);
  v96 = (uint64_t *)((char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v12);
  v98 = (uint64_t *)((char *)&v90 - v15);
  v16 = __chkstk_darwin(v14);
  v104 = (uint64_t *)((char *)&v90 - v17);
  __chkstk_darwin(v16);
  v97 = (uint64_t *)((char *)&v90 - v18);
  v20 = *(_QWORD *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v20 == -1)
    goto LABEL_61;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v20 == -1)
    goto LABEL_62;
  v22 = (uint64_t)(a2 - a1) / v20;
  v109 = a1;
  v108 = a4;
  v23 = v21 / v20;
  if (v22 >= v21 / v20)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v25 = v23 * v20;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v23, v105);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v56 = a4 + v25;
      v107 = a4 + v25;
      v109 = a2;
      if (v25 >= 1 && a1 < a2)
      {
        v58 = -v20;
        v92 = a1;
        v93 = a4;
        v91 = v58;
        do
        {
          v103 = a3;
          v106 = a2;
          v95 = a3 + v58;
          v59 = v97;
          sub_1000ACE4C(v56 + v58, (uint64_t)v97, (uint64_t *)&unk_10026E6B0);
          v94 = a2 + v58;
          sub_1000ACE4C(a2 + v58, (uint64_t)v104, (uint64_t *)&unk_10026E6B0);
          v60 = v105;
          v61 = *(int *)(v105 + 48);
          v62 = v98;
          v63 = (uint64_t)v98 + v61;
          v64 = v59[1];
          *v98 = *v59;
          v62[1] = v64;
          sub_1000D537C((uint64_t)v59 + v61, v63);
          v65 = type metadata accessor for BTDiscoveredDevice(0);
          v67 = v101;
          v66 = v102;
          v68 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
          v69 = v99;
          v68(v99, v63 + *(int *)(v65 + 28), v102);
          v70 = v63;
          v71 = v60;
          v72 = v96;
          v73 = v104;
          v74 = sub_1000D53C0(v70);
          v75 = Date.timeIntervalSince1970.getter(v74);
          v76 = *(void (**)(char *, uint64_t))(v67 + 8);
          v76(v69, v66);
          v77 = *(int *)(v71 + 48);
          v78 = (uint64_t)v72 + v77;
          v79 = v73[1];
          *v72 = *v73;
          v72[1] = v79;
          sub_1000D537C((uint64_t)v73 + v77, (uint64_t)v72 + v77);
          v80 = v78 + *(int *)(v65 + 28);
          v81 = v100;
          v68(v100, v80, v66);
          v82 = sub_1000D53C0(v78);
          v83 = Date.timeIntervalSince1970.getter(v82);
          v76(v81, v66);
          sub_10009B2C0((uint64_t)v73, (uint64_t *)&unk_10026E6B0);
          sub_10009B2C0((uint64_t)v59, (uint64_t *)&unk_10026E6B0);
          if (v83 >= v75)
          {
            v86 = v106;
            v87 = v107;
            v88 = v107 + v91;
            v107 += v91;
            v58 = v91;
            a3 = v95;
            if (v103 < v87 || v95 >= v87)
            {
              swift_arrayInitWithTakeFrontToBack(v95, v88, 1, v105);
              v84 = v92;
              v85 = v93;
            }
            else
            {
              v84 = v92;
              v85 = v93;
              if (v103 != v87)
                swift_arrayInitWithTakeBackToFront(v95, v88);
            }
          }
          else
          {
            v58 = v91;
            a3 = v95;
            if (v103 < v106 || v95 >= v106)
            {
              v86 = v94;
              swift_arrayInitWithTakeFrontToBack(v95, v94, 1, v105);
              v84 = v92;
              v85 = v93;
            }
            else
            {
              v84 = v92;
              v85 = v93;
              v86 = v94;
              if (v103 != v106)
                swift_arrayInitWithTakeBackToFront(v95, v94);
            }
            v109 += v58;
          }
          v56 = v107;
          if (v107 <= v85)
            break;
          a2 = v86;
        }
        while (v86 > v84);
      }
      goto LABEL_59;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22 * v20;
    if (a4 < a1 || a1 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v22, v105);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v95 = a4 + v24;
    v107 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      v103 = a3;
      v94 = v20;
      v27 = v97;
      v28 = v105;
      do
      {
        v106 = a2;
        sub_1000ACE4C(a2, (uint64_t)v27, (uint64_t *)&unk_10026E6B0);
        v29 = a4;
        v30 = v104;
        sub_1000ACE4C(v29, (uint64_t)v104, (uint64_t *)&unk_10026E6B0);
        v31 = *(int *)(v28 + 48);
        v32 = v98;
        v33 = (uint64_t)v98 + v31;
        v34 = v27[1];
        *v98 = *v27;
        v32[1] = v34;
        sub_1000D537C((uint64_t)v27 + v31, v33);
        v35 = type metadata accessor for BTDiscoveredDevice(0);
        v37 = v101;
        v36 = v102;
        v38 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
        v39 = v99;
        v38(v99, v33 + *(int *)(v35 + 28), v102);
        v40 = sub_1000D53C0(v33);
        v41 = Date.timeIntervalSince1970.getter(v40);
        v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v39, v36);
        v43 = *(int *)(v28 + 48);
        v44 = v96;
        v45 = (uint64_t)v96 + v43;
        v46 = v30[1];
        *v96 = *v30;
        v44[1] = v46;
        sub_1000D537C((uint64_t)v30 + v43, v45);
        v47 = v100;
        v38(v100, v45 + *(int *)(v35 + 28), v36);
        v48 = sub_1000D53C0(v45);
        v49 = Date.timeIntervalSince1970.getter(v48);
        v42(v47, v36);
        sub_10009B2C0((uint64_t)v30, (uint64_t *)&unk_10026E6B0);
        sub_10009B2C0((uint64_t)v27, (uint64_t *)&unk_10026E6B0);
        v50 = v109;
        if (v49 >= v41)
        {
          v54 = v106;
          v51 = v94;
          v55 = v108 + v94;
          if (v109 < v108 || v109 >= v55)
          {
            swift_arrayInitWithTakeFrontToBack(v109, v108, 1, v105);
            v53 = v103;
          }
          else
          {
            v53 = v103;
            if (v109 != v108)
              swift_arrayInitWithTakeBackToFront(v109, v108);
          }
          v108 = v55;
          v52 = v54;
        }
        else
        {
          v51 = v94;
          v52 = v106 + v94;
          if (v109 < v106 || v109 >= v52)
          {
            swift_arrayInitWithTakeFrontToBack(v109, v106, 1, v105);
            v53 = v103;
          }
          else
          {
            v53 = v103;
            if (v109 == v106)
              v50 = v106;
            else
              swift_arrayInitWithTakeBackToFront(v109, v106);
          }
        }
        v109 = v50 + v51;
        a4 = v108;
        if (v108 >= v95)
          break;
        a2 = v52;
      }
      while (v52 < v53);
    }
LABEL_59:
    sub_1001A87EC(&v109, &v108, (uint64_t *)&v107);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1001A85E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10009061C(&qword_100271298);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1001A86E0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for BTDiscoveredDevice(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

uint64_t sub_1001A87EC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_1001A8900(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1001A89A8(uint64_t a1)
{
  return sub_1001A85E8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001A89BC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  char v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v7 = type metadata accessor for BTDiscoveredDevice(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10009061C(&qword_100271490);
  v12 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  v64 = a1;
  v65 = v8;
  v17 = a2;
  v62 = v3;
  v63 = v16;
  v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  v61 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = a1 + v61;
  v67 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain(a1);
  sub_1000ACE4C(v19, (uint64_t)v15, &qword_100271490);
  v20 = v15[1];
  v70 = *v15;
  v21 = v70;
  v71 = v20;
  v66 = v18;
  sub_10019FB98(v18, (uint64_t)v10);
  v22 = (_QWORD *)*a3;
  v24 = sub_100145264(v21, v20);
  v25 = v22[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    goto LABEL_23;
  v28 = v23;
  if (v22[3] >= v27)
  {
    if ((v17 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1001BDEAC();
      if ((v28 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v36 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v37 = (uint64_t *)(v36[6] + 16 * v24);
    *v37 = v21;
    v37[1] = v20;
    v38 = v36[7];
    v65 = *(_QWORD *)(v65 + 72);
    sub_10019FB98((uint64_t)v10, v38 + v65 * v24);
    v39 = v36[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v36[2] = v41;
    v42 = v63 - 1;
    if (v63 == 1)
      return swift_bridgeObjectRelease_n(v64, 2);
    v43 = v64 + v67 + v61;
    while (1)
    {
      sub_1000ACE4C(v43, (uint64_t)v15, &qword_100271490);
      v45 = v15[1];
      v70 = *v15;
      v44 = v70;
      v71 = v45;
      sub_10019FB98(v66, (uint64_t)v10);
      v46 = (_QWORD *)*a3;
      v47 = sub_100145264(v44, v45);
      v49 = v46[2];
      v50 = (v48 & 1) == 0;
      v40 = __OFADD__(v49, v50);
      v51 = v49 + v50;
      if (v40)
        break;
      v52 = v48;
      if (v46[3] < v51)
      {
        sub_1001B6D20(v51, 1);
        v47 = sub_100145264(v44, v45);
        if ((v52 & 1) != (v53 & 1))
          goto LABEL_25;
      }
      if ((v52 & 1) != 0)
        goto LABEL_10;
      v54 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v47 >> 6) + 64) |= 1 << v47;
      v55 = (uint64_t *)(v54[6] + 16 * v47);
      *v55 = v44;
      v55[1] = v45;
      sub_10019FB98((uint64_t)v10, v54[7] + v65 * v47);
      v56 = v54[2];
      v40 = __OFADD__(v56, 1);
      v57 = v56 + 1;
      if (v40)
        goto LABEL_24;
      v54[2] = v57;
      v43 += v67;
      if (!--v42)
        return swift_bridgeObjectRelease_n(v64, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1001B6D20(v27, v17 & 1);
  v29 = sub_100145264(v21, v20);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    if ((v28 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v32);
    v72 = v32;
    swift_errorRetain(v32);
    v33 = sub_10009061C(&qword_10026CF70);
    if ((swift_dynamicCast(v33, &v72, v33, &type metadata for _MergeError, 0) & 1) == 0)
    {
      v34 = v64;
      swift_bridgeObjectRelease(v64);
      sub_1000D53C0((uint64_t)v10);
      v35 = v71;
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v35);
      return swift_errorRelease(v72);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v58._object = (void *)0x8000000100202800;
  v58._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v58);
  _print_unlocked<A, B>(_:_:)(&v70, &v68, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v59._countAndFlagsBits = 39;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v68, v69, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001A8E40(_QWORD *a1)
{
  return sub_1001A5A0C(0, a1[2], 0, a1, (uint64_t *)&unk_100271480, type metadata accessor for BTDiscoveredDevice);
}

uint64_t sub_1001A8E74(_QWORD *a1)
{
  return sub_1001A554C(0, a1[2], 0, a1, &qword_1002712A8, (uint64_t *)&unk_10026E6B0);
}

uint64_t sub_1001A8EA8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_1001A8EBC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connection timeout occured!", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
  if (v6 && *(_QWORD *)(v6 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral))
  {
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager), "cancelPeripheralConnection:");
    *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
  }
  else
  {
    oslog = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "No peripheral to disconnect.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

uint64_t sub_1001A9034()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_1001A9060()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(v0[2] + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager), "setDesiredConnectionLatency:forPeripheral:", v0[3], v0[4]);
}

uint64_t sub_1001A9080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A9090(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001A9098()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001A90C4()
{
  uint64_t v0;

  sub_1001A3788(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001A90D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A90F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1001A9128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000E6004((_OWORD *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001BA88C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_10009B2C0(a1, &qword_10026E5F0);
    sub_1001B3A8C(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_10009B2C0((uint64_t)v11, &qword_10026E5F0);
  }
}

uint64_t sub_1001A91FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_10009061C(&qword_1002712B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BTDiscoveredDevice(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10009B2C0(a1, &qword_1002712B0);
    sub_1001B4218(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    return sub_10009B2C0((uint64_t)v10, &qword_1002712B0);
  }
  else
  {
    sub_10019FB98(a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v19 = *v4;
    *v4 = 0x8000000000000000;
    sub_1001BB4D4((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    v17 = *v4;
    *v4 = v19;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v17);
  }
}

unint64_t sub_1001A935C(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t result;
  char v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v15 = *v2;
    *v2 = 0x8000000000000000;
    sub_1001BB8AC(a1, a2, isUniquelyReferenced_nonNull_native);
    v7 = *v2;
    *v2 = v15;
  }
  else
  {
    result = sub_1001452C8(a2);
    if ((v9 & 1) == 0)
      return result;
    v10 = result;
    v11 = swift_isUniquelyReferenced_nonNull_native(*v2);
    v12 = *v2;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if (!v11)
    {
      sub_1001BD180();
      v12 = v16;
    }
    v13 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v10);
    sub_1001B9790(v10, v12);
    v14 = *v3;
    *v3 = v12;

    v7 = v14;
  }
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1001A9438(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_10009061C((uint64_t *)&unk_100271360);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DockKitIDSInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10009B2C0(a1, (uint64_t *)&unk_100271360);
    sub_1001B4950(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_10009B2C0((uint64_t)v8, (uint64_t *)&unk_100271360);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001BC540((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

_OWORD *sub_1001A95C4(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _OWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _OWORD v34[4];
  _OWORD v35[2];
  _OWORD v36[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10009061C(&qword_100271388);
    v3 = (_BYTE *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 64;
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v3);
  v32 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v32 << 6);
      goto LABEL_28;
    }
    v12 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v30)
      goto LABEL_37;
    v13 = *(_QWORD *)(v31 + 8 * v12);
    v14 = v32 + 1;
    if (!v13)
    {
      v14 = v32 + 2;
      if (v32 + 2 >= v30)
        goto LABEL_37;
      v13 = *(_QWORD *)(v31 + 8 * v14);
      if (!v13)
      {
        v14 = v32 + 3;
        if (v32 + 3 >= v30)
          goto LABEL_37;
        v13 = *(_QWORD *)(v31 + 8 * v14);
        if (!v13)
        {
          v14 = v32 + 4;
          if (v32 + 4 >= v30)
            goto LABEL_37;
          v13 = *(_QWORD *)(v31 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v32 = v14;
LABEL_28:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    *(_QWORD *)&v36[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    *(_QWORD *)&v35[0] = v16;
    v17 = *(id *)&v36[0];
    swift_dynamicCast((char *)v36 + 8, v35, &type metadata for Int, (char *)&type metadata for Any + 8, 7);
    v18 = *(_QWORD *)&v36[0];
    sub_1000E6004((_OWORD *)((char *)v36 + 8), v34);
    sub_1000E6004(v34, v36);
    sub_1000E6004(v36, v35);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;
    Hasher.init(_seed:)(&v33);
    String.hash(into:)(&v33, v19, v21);
    v22 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v21);
    v23 = -1 << v3[32];
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v7[8 * v25];
      }
      while (v29 == -1);
      v9 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v9) = v18;
    result = sub_1000E6004(v35, (_OWORD *)(*((_QWORD *)v3 + 7) + 32 * v9));
    ++*((_QWORD *)v3 + 2);
  }
  v15 = v32 + 5;
  if (v32 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_1000E6210(a1);
    return v3;
  }
  v13 = *(_QWORD *)(v31 + 8 * v15);
  if (v13)
  {
    v14 = v32 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v30)
      goto LABEL_37;
    v13 = *(_QWORD *)(v31 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

_OWORD *sub_1001A9958(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _OWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[4];
  _OWORD v36[2];
  _OWORD v37[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10009061C(&qword_100271510);
    v3 = (_BYTE *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 64;
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v3);
  v33 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v33 << 6);
      goto LABEL_28;
    }
    v12 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v31)
      goto LABEL_37;
    v13 = *(_QWORD *)(v32 + 8 * v12);
    v14 = v33 + 1;
    if (!v13)
    {
      v14 = v33 + 2;
      if (v33 + 2 >= v31)
        goto LABEL_37;
      v13 = *(_QWORD *)(v32 + 8 * v14);
      if (!v13)
      {
        v14 = v33 + 3;
        if (v33 + 3 >= v31)
          goto LABEL_37;
        v13 = *(_QWORD *)(v32 + 8 * v14);
        if (!v13)
        {
          v14 = v33 + 4;
          if (v33 + 4 >= v31)
            goto LABEL_37;
          v13 = *(_QWORD *)(v32 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v33 = v14;
LABEL_28:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    *(_QWORD *)&v37[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    *(_QWORD *)&v36[0] = v16;
    v17 = *(id *)&v37[0];
    swift_bridgeObjectRetain(v16);
    v18 = sub_10009061C((uint64_t *)&unk_100271370);
    swift_dynamicCast((char *)v37 + 8, v36, v18, (char *)&type metadata for Any + 8, 7);
    v19 = *(_QWORD *)&v37[0];
    sub_1000E6004((_OWORD *)((char *)v37 + 8), v35);
    sub_1000E6004(v35, v37);
    sub_1000E6004(v37, v36);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;
    Hasher.init(_seed:)(&v34);
    String.hash(into:)(&v34, v20, v22);
    v23 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v22);
    v24 = -1 << v3[32];
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v9 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v9) = v19;
    result = sub_1000E6004(v36, (_OWORD *)(*((_QWORD *)v3 + 7) + 32 * v9));
    ++*((_QWORD *)v3 + 2);
  }
  v15 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_1000E6210(a1);
    return v3;
  }
  v13 = *(_QWORD *)(v32 + 8 * v15);
  if (v13)
  {
    v14 = v33 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v31)
      goto LABEL_37;
    v13 = *(_QWORD *)(v32 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1001A9CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10009061C(&qword_100271340);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v38 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v37 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v8 = (uint64_t *)&unk_100271348;
  v9 = (uint64_t *)&unk_100271350;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v19 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v19 >= v37)
    goto LABEL_32;
  v20 = *(_QWORD *)(v38 + 8 * v19);
  v21 = i + 1;
  if (!v20)
  {
    v21 = i + 2;
    if (i + 2 >= v37)
      goto LABEL_32;
    v20 = *(_QWORD *)(v38 + 8 * v21);
    if (!v20)
    {
      v21 = i + 3;
      if (i + 3 >= v37)
        goto LABEL_32;
      v20 = *(_QWORD *)(v38 + 8 * v21);
      if (!v20)
      {
        v21 = i + 4;
        if (i + 4 >= v37)
          goto LABEL_32;
        v20 = *(_QWORD *)(v38 + 8 * v21);
        if (!v20)
        {
          v22 = i + 5;
          if (i + 5 < v37)
          {
            v20 = *(_QWORD *)(v38 + 8 * v22);
            if (v20)
            {
              v21 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v37)
                break;
              v20 = *(_QWORD *)(v38 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1000E6210(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v6 = (v20 - 1) & v20;
  v18 = __clz(__rbit64(v20)) + (v21 << 6);
  for (i = v21; ; v18 = v17 | (i << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v40 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v18);
    v26 = v40;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    v27 = sub_10009061C(v8);
    v28 = sub_10009061C(v9);
    swift_dynamicCast(&v41, &v40, v27, v28, 7);
    v29 = v41;
    v30 = sub_100145264(v25, v24);
    v31 = v30;
    if ((v32 & 1) != 0)
    {
      v39 = v29;
      v10 = v6;
      v11 = v1;
      v12 = i;
      v13 = v9;
      v14 = v8;
      v15 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v8 = v14;
      v9 = v13;
      i = v12;
      v1 = v11;
      v6 = v10;
      v16 = v3[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v31));
      *(_QWORD *)(v16 + 8 * v31) = v39;
      if (!v10)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v30;
    v33 = (uint64_t *)(v3[6] + 16 * v30);
    *v33 = v25;
    v33[1] = v24;
    *(_QWORD *)(v3[7] + 8 * v30) = v29;
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_34;
    v3[2] = v36;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v17 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1001AA018(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001AA038(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1001AA058()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_1002712C0);
  sub_10008EA50(v0, (uint64_t)qword_1002712C0);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6E61486775626564, 0xEC00000072656C64);
}

id sub_1001AA0D4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  objc_class *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;
  _QWORD *v41;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v38 = v1;
  v39 = v2;
  __chkstk_darwin(v1);
  v36 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v0[OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger];
  v35 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6C6F636F746F7270, 0xED00006775626544);
  v34 = OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue;
  v14 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v14);
  v41 = _swiftEmptyArrayStorage;
  v15 = sub_1000BC860();
  v16 = sub_10009061C(&qword_10026D000);
  v17 = sub_1000D5BAC((unint64_t *)&qword_10026C540, &qword_10026D000, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = v16;
  v19 = v38;
  v20 = v15;
  v21 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v18, v17, v7, v20);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v23 = v39;
  v22(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  v24 = v9;
  v25 = v35;
  v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001CLL, 0x80000001002028F0, v12, v24, v6, 0);
  *(_QWORD *)&v25[v34] = v26;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v21, v13, v19);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "debug interface open", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v19);
  v31 = (objc_class *)type metadata accessor for dockDebug(0);
  v40.receiver = v25;
  v40.super_class = v31;
  return objc_msgSendSuper2(&v40, "init");
}

void sub_1001AA544(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_1001AA5B4(_QWORD *a1, uint64_t a2, SEL *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  id v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  double v35;
  id v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  _BYTE v46[24];

  if (qword_10026BC00 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_2:
    v4 = qword_100275638;
    v5 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v5);
    v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    v7 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain(v7);
    os_unfair_lock_lock(v7 + 4);
    swift_release(v7);
    v8 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, v46, 0, 0);
    v9 = *v8;
    v10 = *(os_unfair_lock_s **)(v4 + v6);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    os_unfair_lock_unlock(v10 + 4);
    swift_release(v10);
    v11 = 0;
    v12 = *(_QWORD *)(v9 + 64);
    v42 = v9 + 64;
    v13 = 1 << *(_BYTE *)(v9 + 32);
    v14 = -1;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    v15 = v14 & v12;
    v43 = (unint64_t)(v13 + 63) >> 6;
    v16 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
    v17 = (uint64_t *)&unk_100271358;
    v18 = (char *)&type metadata for Any + 8;
    v38 = v9;
    v39 = a1;
    if ((v14 & v12) != 0)
    {
      do
      {
        while (1)
        {
          v19 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
          v20 = v19 | (v11 << 6);
LABEL_22:
          v24 = *(_DWORD *)(*(_QWORD *)(v9 + 48) + 4 * v20);
          v25 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v20);
          v26 = objc_msgSend(v25, v16[83]);
          _bridgeAnyObjectToAny(_:)(v45);
          swift_unknownObjectRelease(v26);
          v27 = sub_10009061C(v17);
          if (swift_dynamicCast(&v44, v45, v18, v27, 6))
            break;

          if (!v15)
            goto LABEL_8;
        }
        v28 = v18;
        v29 = v17;
        v30 = v44;
        v31 = (_QWORD *)*a1;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
        *a1 = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v31 = sub_1000E9BF8(0, v31[2] + 1, 1, v31);
          *a1 = v31;
        }
        v34 = v31[2];
        v33 = v31[3];
        if (v34 >= v33 >> 1)
          v31 = sub_1000E9BF8((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
        v31[2] = v34 + 1;
        *((_DWORD *)v31 + v34 + 8) = v24;
        a1 = v39;
        *v39 = v31;
        *(_QWORD *)&v35 = swift_unknownObjectRetain(v30).n128_u64[0];
        objc_msgSend(v36, *a3, a2, v35);
        swift_unknownObjectRelease_n(v30, 2);

        v16 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
        v17 = v29;
        v18 = v28;
        v9 = v38;
      }
      while (v15);
    }
LABEL_8:
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v43)
      return swift_release(v9);
    v22 = *(_QWORD *)(v42 + 8 * v21);
    ++v11;
    if (v22)
      goto LABEL_21;
    v11 = v21 + 1;
    if (v21 + 1 >= v43)
      return swift_release(v9);
    v22 = *(_QWORD *)(v42 + 8 * v11);
    if (v22)
      goto LABEL_21;
    v11 = v21 + 2;
    if (v21 + 2 >= v43)
      return swift_release(v9);
    v22 = *(_QWORD *)(v42 + 8 * v11);
    if (v22)
      goto LABEL_21;
    v23 = v21 + 3;
    if (v23 >= v43)
      return swift_release(v9);
    v22 = *(_QWORD *)(v42 + 8 * v23);
    if (v22)
    {
      v11 = v23;
LABEL_21:
      v15 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v11 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      v11 = v23 + 1;
      if (__OFADD__(v23, 1))
        break;
      if (v11 >= v43)
        return swift_release(v9);
      v22 = *(_QWORD *)(v42 + 8 * v11);
      ++v23;
      if (v22)
        goto LABEL_21;
    }
LABEL_31:
    __break(1u);
  }
}

uint64_t sub_1001AA93C(_QWORD *a1, char a2, SEL *a3)
{
  id v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  uint64_t *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  double v35;
  id v36;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  _BYTE v46[24];

  LOBYTE(v3) = a2;
  if (qword_10026BC00 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_2:
    v5 = qword_100275638;
    v6 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v6);
    v7 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    v8 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain(v8);
    os_unfair_lock_lock(v8 + 4);
    swift_release(v8);
    v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, v46, 0, 0);
    v10 = *v9;
    v11 = *(os_unfair_lock_s **)(v5 + v7);
    swift_bridgeObjectRetain(v10);
    swift_retain(v11);
    os_unfair_lock_unlock(v11 + 4);
    swift_release(v11);
    v12 = 0;
    v13 = *(_QWORD *)(v10 + 64);
    v42 = v10 + 64;
    v14 = 1 << *(_BYTE *)(v10 + 32);
    v15 = -1;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    v16 = v15 & v13;
    v43 = (unint64_t)(v14 + 63) >> 6;
    v17 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
    v18 = (uint64_t *)&unk_100271358;
    v19 = (char *)&type metadata for Any + 8;
    v38 = v3 & 1;
    v39 = v10;
    v40 = a1;
    if ((v15 & v13) != 0)
    {
      do
      {
        while (1)
        {
          v20 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
          v21 = v20 | (v12 << 6);
LABEL_22:
          v25 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v21);
          v3 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v21);
          v26 = objc_msgSend(v3, v17[83]);
          _bridgeAnyObjectToAny(_:)(v45);
          swift_unknownObjectRelease(v26);
          v27 = sub_10009061C(v18);
          if (swift_dynamicCast(&v44, v45, v19, v27, 6))
            break;

          if (!v16)
            goto LABEL_8;
        }
        v28 = v19;
        v29 = v18;
        v30 = v44;
        v31 = (_QWORD *)*a1;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
        *a1 = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v31 = sub_1000E9BF8(0, v31[2] + 1, 1, v31);
          *a1 = v31;
        }
        v34 = v31[2];
        v33 = v31[3];
        if (v34 >= v33 >> 1)
          v31 = sub_1000E9BF8((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
        v31[2] = v34 + 1;
        *((_DWORD *)v31 + v34 + 8) = v25;
        a1 = v40;
        *v40 = v31;
        *(_QWORD *)&v35 = swift_unknownObjectRetain(v30).n128_u64[0];
        objc_msgSend(v36, *a3, v38, v35);
        swift_unknownObjectRelease_n(v30, 2);

        v17 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
        v18 = v29;
        v19 = v28;
        v10 = v39;
      }
      while (v16);
    }
LABEL_8:
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v22 >= v43)
      return swift_release(v10);
    v23 = *(_QWORD *)(v42 + 8 * v22);
    ++v12;
    if (v23)
      goto LABEL_21;
    v12 = v22 + 1;
    if (v22 + 1 >= v43)
      return swift_release(v10);
    v23 = *(_QWORD *)(v42 + 8 * v12);
    if (v23)
      goto LABEL_21;
    v12 = v22 + 2;
    if (v22 + 2 >= v43)
      return swift_release(v10);
    v23 = *(_QWORD *)(v42 + 8 * v12);
    if (v23)
      goto LABEL_21;
    v24 = v22 + 3;
    if (v24 >= v43)
      return swift_release(v10);
    v23 = *(_QWORD *)(v42 + 8 * v24);
    if (v23)
    {
      v12 = v24;
LABEL_21:
      v16 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v12 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      v12 = v24 + 1;
      if (__OFADD__(v24, 1))
        break;
      if (v12 >= v43)
        return swift_release(v10);
      v23 = *(_QWORD *)(v42 + 8 * v12);
      ++v24;
      if (v23)
        goto LABEL_21;
    }
LABEL_31:
    __break(1u);
  }
}

void sub_1001AACC8(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);

}

uint64_t sub_1001AAED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _OWORD v51[2];
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v8 = sub_10009061C(&qword_100271380);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3 + 16;
  v12 = swift_projectBox(a4);
  if (!a2 && a1)
  {
    v13 = v12;
    v14 = objc_msgSend(a1, "metadata");
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "format");

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        if (v17 == 0x38746E6975 && v19 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease(0xE500000000000000);
        }
        else
        {
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, 0x38746E6975, 0xE500000000000000, 0);
          swift_bridgeObjectRelease(v19);
          if ((v21 & 1) == 0)
            goto LABEL_23;
        }
        v26 = objc_msgSend(a1, "value");
        if (v26)
        {
          v27 = v26;
          _bridgeAnyObjectToAny(_:)(v51);
          swift_unknownObjectRelease(v27);
        }
        else
        {
          memset(v51, 0, sizeof(v51));
        }
        sub_10009AEEC((uint64_t)v51, (uint64_t)&v52);
        if (v54)
        {
          result = swift_dynamicCast(&v50, &v52, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6);
          if ((result & 1) != 0)
          {
            switch(v50)
            {
              case 3:
                v43 = enum case for ComponentType.Battery(_:);
                v44 = type metadata accessor for ComponentType(0);
                v45 = *(_QWORD *)(v44 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v45 + 104))(v10, v43, v44);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v10, 0, 1, v44);
                swift_beginAccess(v13, &v52, 1, 0);
                sub_1001B08A8((uint64_t)v10, v13);
                swift_beginAccess(v11, v51, 33, 0);
                v32 = 0x2079726574746142;
                v33 = 0xEF0A726F736E6573;
                break;
              case 2:
                v46 = enum case for ComponentType.Button(_:);
                v47 = type metadata accessor for ComponentType(0);
                v48 = *(_QWORD *)(v47 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v48 + 104))(v10, v46, v47);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v10, 0, 1, v47);
                swift_beginAccess(v13, &v52, 1, 0);
                sub_1001B08A8((uint64_t)v10, v13);
                swift_beginAccess(v11, v51, 33, 0);
                v32 = 0x73206E6F74747542;
                v33 = 0xEE000A726F736E65;
                break;
              case 1:
                v29 = enum case for ComponentType.LED(_:);
                v30 = type metadata accessor for ComponentType(0);
                v31 = *(_QWORD *)(v30 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v10, v29, v30);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v10, 0, 1, v30);
                swift_beginAccess(v13, &v52, 1, 0);
                sub_1001B08A8((uint64_t)v10, v13);
                swift_beginAccess(v11, v51, 33, 0);
                v32 = 0x736E65732044454CLL;
                v33 = 0xEB000000000A726FLL;
                break;
              default:
                return result;
            }
            String.append(_:)(*(Swift::String *)&v32);
            return swift_endAccess(v51);
          }
        }
        else
        {
          sub_10009B2C0((uint64_t)&v52, &qword_10026E5F0);
        }
      }
    }
LABEL_23:
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v53);
    v52 = 0xD000000000000029;
    v53 = 0x8000000100202970;
    v34 = objc_msgSend(a1, "type");
    if (v34)
    {
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

    }
    else
    {
      v36 = 0;
      v38 = 0;
    }
    *(_QWORD *)&v51[0] = v36;
    *((_QWORD *)&v51[0] + 1) = v38;
    v39 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v23 = String.init<A>(describing:)(v51, v39);
    v25 = v24;
    goto LABEL_27;
  }
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v53);
  v52 = 0xD00000000000001FLL;
  v53 = 0x8000000100202930;
  *(_QWORD *)&v51[0] = a2;
  swift_errorRetain(a2);
  v22 = sub_10009061C(&qword_10026E070);
  v23 = String.init<A>(describing:)(v51, v22);
  v25 = v24;
LABEL_27:
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease(v25);
  v40 = v52;
  v41 = (void *)v53;
  swift_beginAccess(v11, &v52, 33, 0);
  v42._countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_endAccess(&v52);
  return swift_bridgeObjectRelease(v41);
}

void sub_1001AB3F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  id v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  Swift::String v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  id v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  double v49;
  Swift::String v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  _QWORD v59[2];
  _OWORD v60[2];
  _QWORD v61[4];

  v8 = sub_10009061C(&qword_100271380);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v59 - v12;
  v14 = a3 + 16;
  v15 = swift_projectBox(a4);
  if (a2 || !a1)
  {
    v61[0] = 0;
    v61[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v61[1]);
    v61[0] = 0xD00000000000001FLL;
    v61[1] = 0x8000000100202930;
    *(_QWORD *)&v60[0] = a2;
    swift_errorRetain(a2);
    v25 = sub_10009061C(&qword_10026E070);
    v26._countAndFlagsBits = String.init<A>(describing:)(v60, v25);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    v28 = v61[0];
    v29 = (void *)v61[1];
    swift_beginAccess(v14, v61, 33, 0);
    v30._countAndFlagsBits = v28;
    v30._object = v29;
    String.append(_:)(v30);
    swift_endAccess(v61);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v16 = v15;
    v17 = objc_msgSend(a1, "metadata");
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(v17, "format");

      if (v19)
      {
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        if (v20 == 1635017060 && v22 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(0xE400000000000000);
        }
        else
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, 1635017060, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v22);
          if ((v24 & 1) == 0)
            return;
        }
        v31 = objc_msgSend(a1, "value");
        if (v31)
        {
          v32 = v31;
          _bridgeAnyObjectToAny(_:)(v60);
          swift_unknownObjectRelease(v32);
        }
        else
        {
          memset(v60, 0, sizeof(v60));
        }
        sub_10009AEEC((uint64_t)v60, (uint64_t)v61);
        if (!v61[3])
        {
          v43 = &qword_10026E5F0;
          v44 = (char *)v61;
LABEL_33:
          sub_10009B2C0((uint64_t)v44, v43);
          return;
        }
        if ((swift_dynamicCast(v59, v61, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v34 = v59[0];
          v33 = v59[1];
          v61[0] = 0;
          v61[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease(v61[1]);
          strcpy((char *)v61, "\nSensor Data: ");
          HIBYTE(v61[1]) = -18;
          sub_100117E20(v34, v33);
          v36 = v35._object;
          String.append(_:)(v35);
          swift_bridgeObjectRelease(v36);
          v37._countAndFlagsBits = 10;
          v37._object = (void *)0xE100000000000000;
          String.append(_:)(v37);
          v38 = v61[0];
          v39 = (void *)v61[1];
          swift_beginAccess(v14, v61, 33, 0);
          v40._countAndFlagsBits = v38;
          v40._object = v39;
          String.append(_:)(v40);
          swift_endAccess(v61);
          swift_bridgeObjectRelease(v39);
          swift_beginAccess(v16, v61, 0, 0);
          sub_1001B0860(v16, (uint64_t)v13);
          v41 = type metadata accessor for ComponentType(0);
          v42 = *(_QWORD *)(v41 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v41) != 1)
          {
            sub_1001B0860((uint64_t)v13, (uint64_t)v11);
            if ((*(unsigned int (**)(char *, uint64_t))(v42 + 88))(v11, v41) != enum case for ComponentType.Battery(_:))
            {
              sub_10009B2FC(v34, v33);
              (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v41);
              goto LABEL_32;
            }
            v45 = objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState(0));
            sub_10009B27C(v34, v33);
            v46 = AccessoryBatteryState.init(data:name:)(v34, v33, 0x6E776F6E6B6E75, 0xE700000000000000);
            if (v46)
            {
              v47 = (void *)v46;
              *(_QWORD *)&v60[0] = 0;
              *((_QWORD *)&v60[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(45);
              v48._object = (void *)0xEE00203A61746164;
              v48._countAndFlagsBits = 0x2079726574746142;
              String.append(_:)(v48);
              v49 = AccessoryBatteryState.batteryPercent.getter();
              Double.write<A>(to:)(v60, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v49 * 100.0);
              v50._countAndFlagsBits = 0x6142776F6C202C25;
              v50._object = (void *)0xEB000000003D7474;
              String.append(_:)(v50);
              v51 = AccessoryBatteryState.lowBattery.getter();
              v52 = (v51 & 1) == 0;
              if ((v51 & 1) != 0)
                v53 = 1702195828;
              else
                v53 = 0x65736C6166;
              if (v52)
                v54 = 0xE500000000000000;
              else
                v54 = 0xE400000000000000;
              v55 = v54;
              String.append(_:)(*(Swift::String *)&v53);
              swift_bridgeObjectRelease(v54);
              v56._countAndFlagsBits = 0x656772616863202CLL;
              v56._object = (void *)0xEE003D6574617453;
              String.append(_:)(v56);
              v59[0] = AccessoryBatteryState.chargeState.getter();
              _print_unlocked<A, B>(_:_:)(v59, v60, &type metadata for AccessoryChargeState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
              v57 = (Swift::String)v60[0];
              swift_beginAccess(v14, v60, 33, 0);
              String.append(_:)(v57);
              swift_endAccess(v60);
              sub_10009B2FC(v34, v33);

              swift_bridgeObjectRelease(v57._object);
              goto LABEL_32;
            }
            swift_beginAccess(v14, v60, 33, 0);
            v58._object = (void *)0x8000000100202950;
            v58._countAndFlagsBits = 0xD00000000000001CLL;
            String.append(_:)(v58);
            swift_endAccess(v60);
          }
          sub_10009B2FC(v34, v33);
LABEL_32:
          v43 = &qword_100271380;
          v44 = v13;
          goto LABEL_33;
        }
      }
    }
  }
}

id sub_1001AB9CC()
{
  return sub_100094D38(0, (uint64_t (*)(void))type metadata accessor for dockDebug);
}

uint64_t sub_1001ABA2C()
{
  return type metadata accessor for dockDebug(0);
}

uint64_t type metadata accessor for dockDebug(uint64_t a1)
{
  uint64_t result;

  result = qword_100271300;
  if (!qword_100271300)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for dockDebug);
  return result;
}

uint64_t sub_1001ABA70(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  void *Strong;
  uint64_t v31;
  os_unfair_lock_s *v32;
  void *v33;
  os_unfair_lock_s *v34;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC28 != -1)
    swift_once(&qword_10026BC28, sub_1001AA058);
  v14 = sub_10008EA50(v10, (uint64_t)qword_1002712C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v39 = a1;
  if (v18)
  {
    v19 = swift_slowAlloc(18, -1);
    v37 = a5;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v38 = a4;
    v22 = v21;
    v40[0] = v21;
    *(_DWORD *)v20 = 67109378;
    LODWORD(v41) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v20 + 4, v20 + 8);
    *(_WORD *)(v20 + 8) = 2080;
    v41 = a2;
    v42 = a3;
    swift_bridgeObjectRetain(a3);
    v23 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v24 = String.init<A>(describing:)(&v41, v23);
    v26 = v25;
    v41 = sub_1000906BC(v24, v25, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 10, v20 + 18);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v37, (uint8_t *)v20, 0x12u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a4 = v38;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    v28 = swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v28);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v29 = qword_100275638;
  swift_beginAccess(a4 + 16, &v41, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a4 + 16);
  v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v32 = *(os_unfair_lock_s **)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v32);
  os_unfair_lock_lock(v32 + 4);
  swift_release(v32);
  swift_beginAccess(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, v40, 33, 0);
  v33 = (void *)sub_1001B3E28(v39);
  swift_endAccess(v40);

  v34 = *(os_unfair_lock_s **)(v29 + v31);
  swift_retain(v34);
  os_unfair_lock_unlock(v34 + 4);

  return swift_release(v34);
}

id sub_1001ABE2C(uint64_t a1)
{
  return sub_100094D38(a1, (uint64_t (*)(void))type metadata accessor for DebugServiceDelegate);
}

uint64_t type metadata accessor for DebugServiceDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd20DebugServiceDelegate, a2);
}

uint64_t sub_1001ABE58(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001ABF58(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1001BC748, (void (*)(uint64_t, _QWORD))sub_1001B9928);
}

double sub_1001ABE6C(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  double result;
  uint64_t v18;

  v10 = type metadata accessor for ComponentType(0);
  __chkstk_darwin(v10);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  if (v15)
  {
    v16 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v16[7] + 8 * a4) = v15;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a5);
      sub_1001BC7EC(a4, (uint64_t)v14, v15, v16);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v12 + 72) * a4, 1, v11);
    sub_1001BA10C(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v15).n128_u64[0];
  return result;
}

uint64_t sub_1001ABF58(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), void (*a8)(uint64_t, _QWORD))
{
  uint64_t v10;

  v10 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    a8(a4, *a3);
  }
  return swift_bridgeObjectRetain(v10);
}

id sub_1001AC000(void *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  void *v11;
  os_unfair_lock_s *v12;
  id v13;
  char *v14;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void (*v22)(char **, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  id result;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __objc2_prot_list **p_prots;
  Swift::String v32;
  id v33;
  BOOL v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  Swift::String v67;
  void *v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String v74;
  void *v75;
  Swift::String v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  id v81;
  void *v82;
  void *v83;
  uint64_t v84;
  Swift::String v85;
  void *v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  NSString v99;
  id v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  Swift::String v106;
  Swift::String v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  NSString v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  NSString v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  Swift::String v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  Swift::String v141;
  void *v142;
  Swift::String v143;
  void *v144;
  uint64_t v145;
  void *v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  id v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t countAndFlagsBits;
  void *v159;
  void *v160;
  uint64_t v161;
  unint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  Swift::String v167;
  uint64_t v168;
  char v169[24];
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;

  v163 = a1;
  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char **)((char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (uint64_t)&v149 - v6;
  v173 = 0;
  v174 = 0xE000000000000000;
  if (qword_10026BC00 != -1)
    goto LABEL_83;
  while (1)
  {
    v8 = qword_100275638;
    v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v10 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v10);
    os_unfair_lock_lock(v10 + 4);
    swift_release(v10);
    v11 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v12 = *(os_unfair_lock_s **)(v8 + v9);
    v13 = v11;
    swift_retain(v12);
    os_unfair_lock_unlock(v12 + 4);
    swift_release(v12);
    if (!v11)
      return (id)v173;
    v14 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v15 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v14);
    v164 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v16 = *(id *)&v14[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v17 = &v14[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v14[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v169, 0, 0);
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(*(_QWORD *)v17 + 16);
    v155 = v13;
    if (!v19)
      goto LABEL_8;
    v162 = (unint64_t)v14;
    v20 = v18 + 32;
    swift_bridgeObjectRetain(v18);
    do
    {
      sub_10009AFF4(v20, (uint64_t)&v167);
      v21 = *(id *)(*sub_10009B038(&v167, v168) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v21) = static UUID.== infix(_:_:)(v7, v5);
      v22 = *(void (**)(char **, uint64_t))(v2 + 8);
      v22(v5, v1);
      v22((char **)v7, v1);
      if ((v21 & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        v146 = (void *)v162;
        v147 = *(id *)(v162 + v164);
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v167, (uint64_t)&v170);
        sub_100090E88(&v167);

        v13 = v155;
        if (*((_QWORD *)&v171 + 1))
          goto LABEL_9;
LABEL_78:

        sub_10009B2C0((uint64_t)&v170, (uint64_t *)&unk_10026DF40);
        return (id)v173;
      }
      sub_100090E88(&v167);
      v20 += 40;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v18);
    v13 = v155;
    v14 = (char *)v162;
LABEL_8:
    v23 = *(id *)&v14[v164];
    OS_dispatch_semaphore.signal()();

    v172 = 0;
    v170 = 0u;
    v171 = 0u;

    if (!*((_QWORD *)&v171 + 1))
      goto LABEL_78;
LABEL_9:
    v24 = sub_10009061C(&qword_10026C2E0);
    v25 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(&v167, &v170, v24, v25, 6) & 1) == 0)
    {

      return (id)v173;
    }
    countAndFlagsBits = v167._countAndFlagsBits;
    result = objc_msgSend(v163, "services");
    if (!result)
      goto LABEL_102;
    v27 = result;
    v28 = sub_100090EE8(0, &qword_10026C418, off_100235E68);
    v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if (!((unint64_t)v1 >> 62))
    {
      v29 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v29)
        goto LABEL_13;
LABEL_88:

      swift_bridgeObjectRelease(v1);
      swift_release(countAndFlagsBits);
      return (id)v173;
    }
    if (v1 < 0)
      v148 = v1;
    else
      v148 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v29 = _CocoaArrayWrapper.endIndex.getter(v148);
    swift_bridgeObjectRelease(v1);
    if (!v29)
      goto LABEL_88;
LABEL_13:
    v30 = 0;
    v154 = v1 & 0xC000000000000001;
    v151 = v1 & 0xFFFFFFFFFFFFFF8;
    v150 = v1 + 32;
    v2 = 0xE000000000000000;
    v5 = &selRef_authSession_authComplete_;
    p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_ + 16);
    v160 = (void *)0x80000001002029A0;
    v152 = v29;
    v153 = v1;
LABEL_15:
    if (v154)
    {
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v1);
    }
    else
    {
      if (v30 >= *(_QWORD *)(v151 + 16))
        goto LABEL_82;
      v33 = *(id *)(v150 + 8 * v30);
    }
    v159 = v33;
    v34 = __OFADD__(v30, 1);
    v35 = v30 + 1;
    if (!v34)
      break;
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once(&qword_10026BC00, sub_100158DF8);
  }
  v167._countAndFlagsBits = 0;
  v167._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v167._object);
  v167._countAndFlagsBits = 0x6976726553504148;
  v167._object = (void *)0xEB00000000206563;
  result = objc_msgSend(v159, v5[447]);
  if (!result)
    goto LABEL_97;
  v36 = result;
  v165 = 0;
  v166 = 1;
  result = (id)static Int._forceBridgeFromObjectiveC(_:result:)(result, &v165);
  if ((v166 & 1) == 0)
  {
    v37 = v165;

    v165 = v37;
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    v40._countAndFlagsBits = 32;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    result = objc_msgSend(v159, "type");
    if (!result)
      goto LABEL_99;
    v41 = result;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v44);
    v46 = v167._object;
    String.append(_:)(v167);
    swift_bridgeObjectRelease(v46);
    if (qword_10026BB80 != -1)
      swift_once(&qword_10026BB80, sub_1001191BC);
    v47 = qword_1002754F0;
    result = objc_msgSend(v159, "type");
    if (!result)
      goto LABEL_100;
    v48 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v50 = v49;

    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    v163 = (id)objc_opt_self(CBUUID, v52);
    v53 = objc_msgSend(v163, (SEL)p_prots[198], v51);

    if (*(_QWORD *)(v47 + 16) && (v54 = sub_100145534((uint64_t)v53), (v55 & 1) != 0))
    {
      v56 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 16 * v54);
      v57 = *v56;
      v58 = (void *)v56[1];
      swift_bridgeObjectRetain(v58);

      v167._countAndFlagsBits = 10272;
      v167._object = (void *)0xE200000000000000;
      v59._countAndFlagsBits = v57;
      v59._object = v58;
      String.append(_:)(v59);
      swift_bridgeObjectRelease(v58);
      v60._countAndFlagsBits = 41;
      v60._object = (void *)0xE100000000000000;
      String.append(_:)(v60);
      v61 = v167._object;
      String.append(_:)(v167);
      swift_bridgeObjectRelease(v61);
    }
    else
    {

    }
    v62 = objc_msgSend(v159, "propertiesDescription");
    if (v62)
    {
      v63 = v62;
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v66 = v65;

      v167._countAndFlagsBits = 32;
      v167._object = (void *)0xE100000000000000;
      v67._countAndFlagsBits = v64;
      v67._object = v66;
      String.append(_:)(v67);
      swift_bridgeObjectRelease(v66);
      v68 = v167._object;
      String.append(_:)(v167);
      swift_bridgeObjectRelease(v68);
    }
    v167._countAndFlagsBits = 0x3D20656D614E2820;
    v167._object = (void *)0xE900000000000020;
    v69 = v159;
    v70 = sub_10017D850(v159);
    if (v71)
    {
      v72 = v71;
    }
    else
    {
      v70 = 4271950;
      v72 = 0xE300000000000000;
    }
    v73 = v72;
    String.append(_:)(*(Swift::String *)&v70);
    swift_bridgeObjectRelease(v72);
    v74._countAndFlagsBits = 41;
    v74._object = (void *)0xE100000000000000;
    String.append(_:)(v74);
    v75 = v167._object;
    String.append(_:)(v167);
    swift_bridgeObjectRelease(v75);
    v76._countAndFlagsBits = 686858;
    v76._object = (void *)0xE300000000000000;
    String.append(_:)(v76);
    result = objc_msgSend(v69, "characteristics");
    if (!result)
      goto LABEL_101;
    v77 = result;
    v78 = sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v78);

    v5 = &selRef_authSession_authComplete_;
    v156 = v35;
    if (!((unint64_t)v7 >> 62))
    {
      v79 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      v80 = &selRef_setStateChanged_;
      if (v79)
        goto LABEL_38;
      goto LABEL_14;
    }
    if (v7 < 0)
      v145 = v7;
    else
      v145 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v79 = _CocoaArrayWrapper.endIndex.getter(v145);
    swift_bridgeObjectRelease(v7);
    v80 = &selRef_setStateChanged_;
    if (!v79)
    {
LABEL_14:
      swift_bridgeObjectRelease(v7);
      v32._countAndFlagsBits = 2685;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);

      v30 = v156;
      v13 = v155;
      v1 = v153;
      p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
      if (v156 == v152)
        goto LABEL_88;
      goto LABEL_15;
    }
LABEL_38:
    v162 = v7 & 0xC000000000000001;
    v1 = 4;
    v157 = v7;
    v161 = v79;
    while (2)
    {
      if (v162)
        v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1 - 4, v7);
      else
        v81 = *(id *)(v7 + 8 * v1);
      v82 = v81;
      if (__OFADD__(v1 - 4, 1))
      {
        __break(1u);
        goto LABEL_81;
      }
      v167._countAndFlagsBits = 0;
      v167._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v167._object);
      v167._countAndFlagsBits = 0xD000000000000014;
      v167._object = v160;
      result = objc_msgSend(v82, v5[447]);
      if (!result)
      {
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        break;
      }
      v83 = result;
      v165 = 0;
      v166 = 1;
      result = (id)static Int._forceBridgeFromObjectiveC(_:result:)(result, &v165);
      if ((v166 & 1) != 0)
        goto LABEL_91;
      v164 = v1 - 3;
      v84 = v165;

      v165 = v84;
      v85._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v86 = v85._object;
      String.append(_:)(v85);
      swift_bridgeObjectRelease(v86);
      v87._countAndFlagsBits = 32;
      v87._object = (void *)0xE100000000000000;
      String.append(_:)(v87);
      result = objc_msgSend(v82, v80[148]);
      if (!result)
        goto LABEL_92;
      v88 = result;
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v91 = v90;

      v92._countAndFlagsBits = v89;
      v92._object = v91;
      String.append(_:)(v92);
      swift_bridgeObjectRelease(v91);
      v93._countAndFlagsBits = 32;
      v93._object = (void *)0xE100000000000000;
      String.append(_:)(v93);
      v94 = v167._object;
      String.append(_:)(v167);
      swift_bridgeObjectRelease(v94);
      if (qword_10026BB88 != -1)
        swift_once(&qword_10026BB88, sub_100119A34);
      v95 = qword_1002754F8;
      result = objc_msgSend(v82, v80[148]);
      if (!result)
        goto LABEL_93;
      v96 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v98 = v97;

      v99 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v98);
      v100 = objc_msgSend(v163, "UUIDWithString:", v99);

      if (*(_QWORD *)(v95 + 16) && (v101 = sub_100145534((uint64_t)v100), (v102 & 1) != 0))
      {
        v103 = (uint64_t *)(*(_QWORD *)(v95 + 56) + 16 * v101);
        v104 = *v103;
        v105 = (void *)v103[1];
        swift_bridgeObjectRetain(v105);

        v167._countAndFlagsBits = 40;
        v167._object = (void *)0xE100000000000000;
        v106._countAndFlagsBits = v104;
        v106._object = v105;
        String.append(_:)(v106);
        swift_bridgeObjectRelease(v105);
        v107._countAndFlagsBits = 8233;
        v107._object = (void *)0xE200000000000000;
        String.append(_:)(v107);
        v108 = v167._object;
        String.append(_:)(v167);
        swift_bridgeObjectRelease(v108);
      }
      else
      {

      }
      v109 = objc_msgSend(v82, "metadata");
      if (v109)
      {
        v110 = v109;
        v111 = objc_msgSend(v109, "format");
        if (v111)
        {
          v112 = v111;
          v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
          v115 = v114;

          if (v113 == 0x676E69727473 && v115 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease(0xE600000000000000);
            goto LABEL_59;
          }
          v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, 0x676E69727473, 0xE600000000000000, 0);
          swift_bridgeObjectRelease(v115);
          if ((v116 & 1) != 0)
          {
LABEL_59:
            v167._countAndFlagsBits = 0x203A65756C6156;
            v167._object = (void *)0xE700000000000000;
            result = objc_msgSend(v82, "type");
            if (!result)
              goto LABEL_95;
            v117 = result;
            static String._unconditionallyBridgeFromObjectiveC(_:)(result);
            v119 = v118;

            v120 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v119);
            v121 = v163;
            v122 = objc_msgSend(v163, "UUIDWithString:", v120);

            result = objc_msgSend(v159, "type");
            if (!result)
              goto LABEL_96;
            v123 = result;
            static String._unconditionallyBridgeFromObjectiveC(_:)(result);
            v125 = v124;

            v126 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v125);
            v127 = objc_msgSend(v121, "UUIDWithString:", v126);

            v128 = swift_allocObject(&unk_10023EAF8, 32, 7);
            *(_QWORD *)(v128 + 24) = 0;
            *(_QWORD *)(v128 + 16) = 0;
            v129 = countAndFlagsBits;
            swift_retain(countAndFlagsBits);
            sub_100181B1C(v122, v127, v129, v129, v128);
            swift_release(v129);
            swift_beginAccess(v128 + 16, &v170, 0, 0);
            v130 = *(_QWORD *)(v128 + 16);
            v131 = *(_QWORD *)(v128 + 24);
            swift_bridgeObjectRetain(v131);

            swift_release(v128);
            if (v131)
              v132 = v130;
            else
              v132 = 4271950;
            if (v131)
              v133 = v131;
            else
              v133 = 0xE300000000000000;
            v134 = v133;
            String.append(_:)(*(Swift::String *)&v132);
            swift_bridgeObjectRelease(v133);
            v135._countAndFlagsBits = 2592;
            v135._object = (void *)0xE200000000000000;
            String.append(_:)(v135);
            v136 = v167._object;
            String.append(_:)(v167);
            swift_bridgeObjectRelease(v136);
            v2 = 0xE000000000000000;
            v5 = &selRef_authSession_authComplete_;
            v7 = v157;
          }
        }

      }
      result = objc_msgSend(v82, "shortDescription");
      if (!result)
        goto LABEL_94;
      v137 = result;
      v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v140 = v139;

      v167._countAndFlagsBits = 0x202020200A7BLL;
      v167._object = (void *)0xE600000000000000;
      v141._countAndFlagsBits = v138;
      v141._object = v140;
      String.append(_:)(v141);
      swift_bridgeObjectRelease(v140);
      v142 = v167._object;
      swift_bridgeObjectRetain(v167._object);
      v143._countAndFlagsBits = 0xA7D20200ALL;
      v143._object = (void *)0xE500000000000000;
      String.append(_:)(v143);
      swift_bridgeObjectRelease(v142);
      v144 = v167._object;
      String.append(_:)(v167);

      swift_bridgeObjectRelease(v144);
      ++v1;
      v80 = &selRef_setStateChanged_;
      if (v164 == v161)
        goto LABEL_14;
      continue;
    }
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
  return result;
}

uint64_t sub_1001ACEEC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  void *v44;
  id v45;
  char *v46;
  void *v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE __dst[14];
  unsigned __int8 v89;
  _QWORD v90[5];
  char v91[24];
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v2 = type metadata accessor for UUID(0);
  v85 = *(_QWORD *)(v2 - 8);
  v86 = v2;
  v3 = __chkstk_darwin(v2);
  v84 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v83 = (char *)&v72 - v5;
  v6 = (_QWORD *)swift_allocObject(&unk_10023EAD0, 32, 7);
  v6[2] = 0;
  v7 = v6 + 2;
  v6[3] = 0xE000000000000000;
  v8 = objc_msgSend(a1, "services");
  if (!v8)
LABEL_53:
    __break(1u);
  v9 = v8;
  v10 = sub_100090EE8(0, &qword_10026C418, off_100235E68);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
  {
LABEL_46:
    if (v11 < 0)
      v69 = v11;
    else
      v69 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease(v11);
    if (v12)
      goto LABEL_4;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
LABEL_4:
      v75 = v6;
      v73 = v7;
      v13 = 0;
      v87 = v11 & 0xC000000000000001;
      v81 = v11 & 0xFFFFFFFFFFFFFF8;
      v80 = v11 + 32;
      v74 = v11;
      while (1)
      {
        if (v87)
        {
          v14 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
        }
        else
        {
          if (v13 >= *(_QWORD *)(v81 + 16))
            goto LABEL_45;
          v14 = *(id *)(v80 + 8 * v13);
        }
        v15 = v14;
        if (__OFADD__(v13++, 1))
        {
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v17 = objc_msgSend(v14, "type");
        if (!v17)
        {
          __break(1u);
          goto LABEL_53;
        }
        v18 = v17;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v20);
        v23 = objc_msgSend((id)objc_opt_self(CBUUID, v22), "UUIDWithString:", v21);

        v24 = objc_msgSend(v23, "data");
        v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

        sub_100177DCC(12, v25, v27);
        v28 = v90[0];
        v29 = v90[1];
        v30 = sub_10009061C((uint64_t *)&unk_10026EA70);
        *((_QWORD *)&v93 + 1) = v30;
        v94 = sub_1000D5BAC((unint64_t *)&qword_10026CFE0, (uint64_t *)&unk_10026EA70, (uint64_t)&protocol conformance descriptor for <A> [A]);
        *(_QWORD *)&v92 = &off_1002382C8;
        v31 = sub_10009B038(&v92, v30);
        v32 = *v31;
        v33 = *(_QWORD *)(*v31 + 16);
        if (v33)
        {
          v34 = v32 + 32;
          if (v33 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            v89 = v33;
            memcpy(__dst, (const void *)(v32 + 32), v33);
            v7 = *(_QWORD **)__dst;
            v6 = (_QWORD *)(*(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v89 << 48));
          }
          else
          {
            v35 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
            v36 = __DataStorage.init(bytes:length:)(v34, v33);
            v37 = v36;
            if (v33 >= 0x7FFFFFFF)
            {
              v38 = type metadata accessor for Data.RangeReference(0);
              v7 = (_QWORD *)swift_allocObject(v38, 32, 7);
              v7[2] = 0;
              v7[3] = v33;
              v6 = (_QWORD *)(v37 | 0x8000000000000000);
            }
            else
            {
              v7 = (_QWORD *)(v33 << 32);
              v6 = (_QWORD *)(v36 | 0x4000000000000000);
            }
          }
        }
        else
        {
          v7 = 0;
          v6 = (_QWORD *)0xC000000000000000;
        }
        sub_100090E88(&v92);
        sub_1001810E0(v28, v29);
        v40 = v39;
        sub_10009B2FC((uint64_t)v7, (unint64_t)v6);
        sub_10009B2FC(v28, v29);
        if ((v40 & 1) != 0 && (v7 = v23, sub_100119010() >= 0x300))
        {
          v82 = v15;
          v7 = v23;
          if (sub_100119010() <= 0x320)
          {
            if (qword_10026BC00 != -1)
              swift_once(&qword_10026BC00, sub_100158DF8);
            v41 = qword_100275638;
            v42 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
            v43 = *(os_unfair_lock_s **)(qword_100275638
                                       + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
            swift_retain(v43);
            os_unfair_lock_lock(v43 + 4);
            swift_release(v43);
            v44 = *(void **)(v41 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
            v7 = *(_QWORD **)(v41 + v42);
            v6 = v7 + 2;
            v45 = v44;
            swift_retain(v7);
            os_unfair_lock_unlock((os_unfair_lock_t)v7 + 4);
            swift_release(v7);
            if (v44)
            {
              v46 = (char *)objc_retain(*(id *)(qword_100275638
                                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager));
              v47 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v46);
              v48 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
              v49 = *(id *)&v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
              OS_dispatch_semaphore.wait()();

              v50 = &v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
              swift_beginAccess(&v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v91, 0, 0);
              v51 = *(_QWORD *)v50;
              v52 = *(_QWORD *)(*(_QWORD *)v50 + 16);
              if (v52)
              {
                v77 = v48;
                v78 = v46;
                v79 = v45;
                v53 = v51 + 32;
                v76 = v51;
                swift_bridgeObjectRetain(v51);
                while (1)
                {
                  sub_10009AFF4(v53, (uint64_t)v90);
                  v54 = *(id *)(*sub_10009B038(v90, v90[3]) + 24);
                  v55 = v83;
                  DockCoreInfo.identifier.getter();

                  v56 = v84;
                  DockCoreInfo.identifier.getter();
                  LOBYTE(v54) = static UUID.== infix(_:_:)(v55, v56);
                  v57 = *(void (**)(char *, uint64_t))(v85 + 8);
                  v58 = v56;
                  v59 = v86;
                  v57(v58, v86);
                  v57(v55, v59);
                  if ((v54 & 1) != 0)
                    break;
                  sub_100090E88(v90);
                  v53 += 40;
                  if (!--v52)
                  {
                    swift_bridgeObjectRelease(v76);
                    v11 = v74;
                    v45 = v79;
                    v46 = v78;
                    v48 = v77;
                    goto LABEL_31;
                  }
                }
                swift_bridgeObjectRelease(v76);
                v60 = v78;
                v7 = *(id *)&v78[v77];
                OS_dispatch_semaphore.signal()();

                sub_10009AFF4((uint64_t)v90, (uint64_t)&v92);
                sub_100090E88(v90);

                v11 = v74;
                v45 = v79;
              }
              else
              {
LABEL_31:
                v7 = *(id *)&v46[v48];
                OS_dispatch_semaphore.signal()();

                v94 = 0;
                v92 = 0u;
                v93 = 0u;

              }
              v6 = v82;
              if (!*((_QWORD *)&v93 + 1))
              {

                sub_10009B2C0((uint64_t)&v92, (uint64_t *)&unk_10026DF40);
                goto LABEL_6;
              }
              v7 = (_QWORD *)sub_10009061C(&qword_10026C2E0);
              v61 = type metadata accessor for DaemonAccessory(0);
              if ((swift_dynamicCast(v90, &v92, v7, v61, 6) & 1) == 0)
              {

                goto LABEL_6;
              }
              v7 = (_QWORD *)v90[0];
              v62 = sub_10009061C(&qword_100271380);
              v63 = swift_allocBox(v62);
              v65 = v64;
              v66 = type metadata accessor for ComponentType(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
              if (qword_10026BBD8 != -1)
                swift_once(&qword_10026BBD8, sub_10012E878);
              v67 = (void *)qword_1002755B8;
              v68 = (uint64_t)v75;
              swift_retain(v75);
              swift_retain(v63);
              sub_100182410(v67, v23, (uint64_t)v7, v68, v63);
              swift_release(v63);
              swift_release(v68);
              if (qword_10026BBE0 != -1)
                swift_once(&qword_10026BBE0, sub_10012E948);
              v6 = (_QWORD *)qword_1002755C0;
              swift_retain(v68);
              swift_retain(v63);
              sub_100182D04(v6, v23, (uint64_t)v7, v68, v63);

              swift_release(v7);
              swift_release_n(v63, 2);
              swift_release(v68);
            }
          }

        }
        else
        {

        }
LABEL_6:
        if (v13 == v12)
        {
          swift_bridgeObjectRelease(v11);
          v7 = v73;
          v6 = v75;
          goto LABEL_51;
        }
      }
    }
  }
  swift_bridgeObjectRelease(v11);
LABEL_51:
  swift_beginAccess(v7, &v92, 0, 0);
  v70 = v6[2];
  swift_bridgeObjectRetain(v6[3]);
  swift_release(v6);
  return v70;
}

id sub_1001AD7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void *v10;
  os_unfair_lock_s *v11;
  id v12;
  char *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(char *, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  id result;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  void *object;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  Swift::String v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  char *v57;
  id v58;
  char *v59;
  id v60;
  const char *v61;
  uint64_t v62;
  _QWORD v63[5];
  char v64[24];
  Swift::String v65;
  __int128 v66;
  uint64_t v67;
  Swift::String v68;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v59 - v5;
  v68._countAndFlagsBits = 0;
  v68._object = (void *)0xE000000000000000;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v7 = qword_100275638;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v11 = *(os_unfair_lock_s **)(v7 + v8);
  v12 = v10;
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  swift_release(v11);
  if (!v10)
    return (id)0xD000000000000019;
  v61 = "dockaccessoryd.debug.clients";
  v13 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v13);
  v62 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v15 = *(id *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v16 = &v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v64, 0, 0);
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  if (v18)
  {
    v59 = v13;
    v60 = v12;
    v19 = v17 + 32;
    swift_bridgeObjectRetain(v17);
    while (1)
    {
      sub_10009AFF4(v19, (uint64_t)v63);
      v20 = *(id *)(*sub_10009B038(v63, v63[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v20) = static UUID.== infix(_:_:)(v6, v4);
      v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v4, v0);
      v21(v6, v0);
      if ((v20 & 1) != 0)
        break;
      sub_100090E88(v63);
      v19 += 40;
      if (!--v18)
      {
        swift_bridgeObjectRelease(v17);
        v13 = v59;
        v12 = v60;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v17);
    v57 = v59;
    v58 = *(id *)&v59[v62];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v63, (uint64_t)&v65);
    sub_100090E88(v63);

    v12 = v60;
    if (!*((_QWORD *)&v66 + 1))
      goto LABEL_18;
  }
  else
  {
LABEL_9:
    v22 = *(id *)&v13[v62];
    OS_dispatch_semaphore.signal()();

    v67 = 0;
    v65 = (Swift::String)0;
    v66 = 0u;

    if (!*((_QWORD *)&v66 + 1))
    {
LABEL_18:

      sub_10009B2C0((uint64_t)&v65, (uint64_t *)&unk_10026DF40);
      return (id)0xD000000000000019;
    }
  }
  v23 = sub_10009061C(&qword_10026C2E0);
  v24 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v63, &v65, v23, v24, 6) & 1) == 0)
  {
LABEL_20:

    return (id)0xD000000000000019;
  }
  v26 = v63[0];
  v27 = *(void **)(v63[0] + 32);
  if (!v27
    || (v28 = objc_opt_self(_HAPAccessoryServerBTLE200, v25),
        (v29 = swift_dynamicCastObjCClass(v27, v28)) == 0))
  {
    swift_release(v26);
    goto LABEL_20;
  }
  v30 = (void *)v29;
  v31 = *(void **)(v26 + 24);
  v32 = v27;
  v33 = v31;
  v34 = objc_msgSend(v33, "description");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v65._countAndFlagsBits = v35;
  v65._object = v37;
  v38._countAndFlagsBits = 10;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v68 = v65;
  v65._countAndFlagsBits = 0;
  v65._object = (void *)0xE000000000000000;
  result = objc_msgSend(v30, "primaryAccessory");
  if (result)
  {
    v40 = result;
    v41 = objc_msgSend(result, "description");

    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v44);
    object = v65._object;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(object);
    result = objc_msgSend(v30, "primaryAccessory");
    if (result)
    {
      v47 = result;
      v48 = sub_1001AC000(result);
      v50 = v49;

      v51._countAndFlagsBits = (uint64_t)v48;
      v51._object = v50;
      String.append(_:)(v51);
      swift_bridgeObjectRelease(v50);
      result = objc_msgSend(v30, "primaryAccessory");
      if (result)
      {
        v52 = result;
        v53 = sub_1001ACEEC(result);
        v55 = v54;

        v56._countAndFlagsBits = v53;
        v56._object = v55;
        String.append(_:)(v56);

        swift_release(v26);
        swift_bridgeObjectRelease(v55);
        return (id)v68._countAndFlagsBits;
      }
      goto LABEL_24;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1001ADCB0(int a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  void *v24;

  v4 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    sub_100145264(0x6F69746175746361, 0xE90000000000006ELL);
    if ((v5 & 1) != 0)
      goto LABEL_5;
    v4 = *a2;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)&v23 = *a2;
  *a2 = 0x8000000000000000;
  sub_1001BC6D4((uint64_t)_swiftEmptyArrayStorage, 0x6F69746175746361, 0xE90000000000006ELL, isUniquelyReferenced_nonNull_native);
  v7 = *a2;
  *a2 = v23;
  swift_bridgeObjectRelease(v7);
LABEL_5:
  v24 = &type metadata for Int32;
  LODWORD(v23) = a1;
  v8 = swift_isUniquelyReferenced_nonNull_native(*a2);
  v22 = (_QWORD *)*a2;
  v9 = v22;
  *a2 = 0x8000000000000000;
  v11 = sub_100145264(0x6F69746175746361, 0xE90000000000006ELL);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_17:
    v9 = sub_1000EA260(0, v9[2] + 1, 1, v9);
    goto LABEL_13;
  }
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((v8 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      sub_1001BF210();
      if ((v15 & 1) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    sub_1001B8C10(v14, v8);
    v16 = sub_100145264(0x6F69746175746361, 0xE90000000000006ELL);
    if ((v15 & 1) != (v17 & 1))
    {
LABEL_20:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    v11 = v16;
    if ((v15 & 1) == 0)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  v8 = (uint64_t)v22;
  v9 = *(_QWORD **)(v22[7] + 8 * v11);
  v21 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    goto LABEL_17;
LABEL_13:
  v19 = v9[2];
  v18 = v9[3];
  if (v19 >= v18 >> 1)
    v9 = sub_1000EA260((_QWORD *)(v18 > 1), v19 + 1, 1, v9);
  v9[2] = v19 + 1;
  sub_1000E6004(&v23, &v9[4 * v19 + 4]);
  v21 = v9;
  sub_1001ABF58((uint64_t *)&v21, 1, &v22, v11, 0x6F69746175746361, 0xE90000000000006ELL, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1001BC748, (void (*)(uint64_t, _QWORD))sub_1001B9928);
  result = swift_bridgeObjectRelease(v21);
  *a2 = v8;
  return result;
}

void sub_1001ADF1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  NSString v35;
  Class v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  unint64_t v49;
  id v50;
  NSString v51;
  Class isa;
  uint64_t v53;
  int v54;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[80];
  char v63[88];

  v59 = a2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v7);
    v11 = a1;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      v15 = swift_slowAlloc(22, -1);
      v58 = v11;
      v16 = v15;
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      v56 = swift_slowAlloc(32, -1);
      v61 = v56;
      *(_DWORD *)v16 = 138412546;
      v55 = v12;
      v60 = (uint64_t)v58;
      v57 = a4;
      v18 = v58;
      v54 = v14;
      v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v16 + 4, v16 + 12);
      *v17 = a1;

      *(_WORD *)(v16 + 12) = 2080;
      v20 = v59;
      v21 = DockState.description.getter(v59);
      v23 = v22;
      v60 = sub_1000906BC(v21, v22, &v61);
      a4 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v23);
      v24 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "Setting %@ state to d=%s", (uint8_t *)v16, 0x16u);
      v25 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v17, 1, v25);
      swift_slowDealloc(v17, -1, -1);
      v26 = v56;
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v16;
      v11 = v58;
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v20 = v59;
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v38 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
    if (v38)
    {
      sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
      v39 = v38;
      v40 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v39);
      static NSObject.== infix(_:_:)(v11, v40);

    }
    sub_10015DAB8(v11);
    if (v41)
    {
      v42 = (void *)v41;
      if ((sub_10016A818(v41, v20) & 1) != 0)
      {
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, 1, 0);
        v37 = (id)dispatch thunk of DockCoreAccessory.info.getter(v43);
        sub_1000F7A3C((uint64_t)v37);

        goto LABEL_15;
      }

    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v45 = v44;
    v46 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v46, v62);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v48;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 48), "not permitted");
    *(_WORD *)(inited + 62) = -4864;
    v49 = sub_1001B0FB8(inited);
    v50 = objc_allocWithZone((Class)NSError);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v45);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v49);
    v37 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v51, 1, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a4 + 16))(a4, 0, v37);
    goto LABEL_15;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v29 = v28;
  v30 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  v31 = swift_initStackObject(v30, v63);
  *(_OWORD *)(v31 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(v31 + 40) = v32;
  *(_QWORD *)(v31 + 72) = &type metadata for String;
  *(_QWORD *)(v31 + 48) = 0xD000000000000012;
  *(_QWORD *)(v31 + 56) = 0x80000001001FD090;
  v33 = sub_1001B0FB8(v31);
  v34 = objc_allocWithZone((Class)NSError);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v36 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v33);
  v37 = objc_msgSend(v34, "initWithDomain:code:userInfo:", v35, 72, v36);

  (*(void (**)(uint64_t, _QWORD, id))(a4 + 16))(a4, 0, v37);
LABEL_15:

}

void sub_1001AE500(void *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v13;
  id v14;
  NSString v15;
  Class isa;
  id v17;
  id v18;
  _BYTE v19[80];

  if (a1)
  {
    v18 = a1;
    v5 = AccessorySystemEvent.header.getter(v18);
    type metadata accessor for AccessorySystemEvent(0);
    if (v5 != static AccessorySystemEvent.kHeaderCameraShutter.getter())
      goto LABEL_7;
    v6 = AccessorySystemEvent.payload.getter();
    if (v6 != static AccessorySystemEvent.kHeaderEventRelease.getter())
      goto LABEL_7;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    if ((sub_10015D4FC() & 1) == 0)
    {
      sub_10015CDF4();
    }
    else
    {
LABEL_7:
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v7 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                         + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                             + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server));
      sub_100140E98((uint64_t)v18, a2);

    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a3 + 16))(a3, 1, 0);

  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v9 = v8;
    v10 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v10, v19);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v12;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001001FD090;
    v13 = sub_1001B0FB8(inited);
    v14 = objc_allocWithZone((Class)NSError);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    v17 = objc_msgSend(v14, "initWithDomain:code:userInfo:", v15, 72, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a3 + 16))(a3, 0, v17);
  }
}

void sub_1001AE77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  id v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  unint64_t v37;
  id v38;
  NSString v39;
  Class isa;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _BYTE v44[80];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v41 - v9;
  v12 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v11), "currentConnection");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "processIdentifier");
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 67109120;
      v42 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 4, v18 + 8);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Client %d registering for debug notifications", v18, 8u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v19 = qword_100275638;
    v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v21 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    v22 = v13;
    swift_retain(v21);
    os_unfair_lock_lock(v21 + 4);
    swift_release(v21);
    v23 = (_QWORD *)(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, &v42, 33, 0);
    v24 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    v41 = *v23;
    *v23 = 0x8000000000000000;
    sub_1001BB8AC((uint64_t)v24, v14, isUniquelyReferenced_nonNull_native);
    v26 = *v23;
    *v23 = v41;
    swift_bridgeObjectRelease(v26);
    swift_endAccess(&v42);
    v27 = *(os_unfair_lock_s **)(v19 + v20);
    swift_retain(v27);
    os_unfair_lock_unlock(v27 + 4);

    swift_release(v27);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, 1, 0);
  }
  else
  {
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed fetching current NSXPCConnection, cannot construct client", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v33 = v32;
    v34 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v34, v44);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v36;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000029;
    *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
    v37 = sub_1001B0FB8(inited);
    v38 = objc_allocWithZone((Class)NSError);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v37);
    v24 = objc_msgSend(v38, "initWithDomain:code:userInfo:", v39, 100, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a2 + 16))(a2, 0, v24);
  }

}

void sub_1001AEBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  id v22;
  void *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  unint64_t v34;
  id v35;
  NSString v36;
  Class isa;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _BYTE v41[80];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v38 - v9;
  v12 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v11), "currentConnection");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "processIdentifier");
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 67109120;
      v39 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4, v18 + 8);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Client %d de-registering for debug notifications", v18, 8u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v19 = qword_100275638;
    v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v21 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    v22 = v13;
    swift_retain(v21);
    os_unfair_lock_lock(v21 + 4);
    swift_release(v21);
    swift_beginAccess(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, &v39, 33, 0);
    v23 = (void *)sub_1001B3E28(v14);
    swift_endAccess(&v39);

    v24 = *(os_unfair_lock_s **)(v19 + v20);
    swift_retain(v24);
    os_unfair_lock_unlock(v24 + 4);

    swift_release(v24);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, 1, 0);
  }
  else
  {
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed fetching current NSXPCConnection, cannot construct client", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v30 = v29;
    v31 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v31, v41);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v33;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000029;
    *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
    v34 = sub_1001B0FB8(inited);
    v35 = objc_allocWithZone((Class)NSError);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
    v22 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 100, isa);

    (*(void (**)(uint64_t, _QWORD, id))(a2 + 16))(a2, 0, v22);
  }

}

uint64_t sub_1001AEFE0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t result;
  _QWORD *v13;
  Class isa;
  _QWORD *v15;
  _QWORD aBlock[5];
  uint64_t v17;
  _QWORD *v18;

  v18 = _swiftEmptyArrayStorage;
  v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  v6 = swift_allocObject(&unk_10023EA58, 32, 7);
  *(_QWORD *)(v6 + 16) = &v18;
  *(_QWORD *)(v6 + 24) = a1;
  v7 = swift_allocObject(&unk_10023EA80, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001B080C;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1001B08F0;
  v17 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA038;
  aBlock[3] = &unk_10023EA98;
  v8 = _Block_copy(aBlock);
  v9 = v17;
  v10 = v5;
  v11 = a1;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v7, "", 98, 228, 26, 1);
  result = swift_release(v7);
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v18;
    swift_bridgeObjectRetain(v18);
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease(v13);

    v15 = v18;
    swift_release(v6);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

uint64_t sub_1001AF17C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t result;
  _QWORD *v13;
  Class isa;
  _QWORD *v15;
  _QWORD aBlock[5];
  uint64_t v17;
  _QWORD *v18;

  v18 = _swiftEmptyArrayStorage;
  v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  v6 = swift_allocObject(&unk_10023E9E0, 32, 7);
  *(_QWORD *)(v6 + 16) = &v18;
  *(_QWORD *)(v6 + 24) = a1;
  v7 = swift_allocObject(&unk_10023EA08, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001B07DC;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1001B08F0;
  v17 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA038;
  aBlock[3] = &unk_10023EA20;
  v8 = _Block_copy(aBlock);
  v9 = v17;
  v10 = v5;
  v11 = a1;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v7, "", 98, 246, 26, 1);
  result = swift_release(v7);
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v18;
    swift_bridgeObjectRetain(v18);
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease(v13);

    v15 = v18;
    swift_release(v6);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

uint64_t sub_1001AF318(char a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t result;
  _QWORD *v12;
  Class isa;
  _QWORD *v14;
  _QWORD aBlock[5];
  uint64_t v16;
  _QWORD *v17;

  v17 = _swiftEmptyArrayStorage;
  v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  v6 = swift_allocObject(&unk_10023E968, 25, 7);
  *(_QWORD *)(v6 + 16) = &v17;
  *(_BYTE *)(v6 + 24) = a1;
  v7 = swift_allocObject(&unk_10023E990, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001B0784;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1001B08F0;
  v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA038;
  aBlock[3] = &unk_10023E9A8;
  v8 = _Block_copy(aBlock);
  v9 = v16;
  v10 = v5;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 98, 264, 26, 1);
  result = swift_release(v7);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v12 = v17;
    swift_bridgeObjectRetain(v17);
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease(v12);

    v14 = v17;
    swift_release(v6);
    return swift_bridgeObjectRelease(v14);
  }
  return result;
}

uint64_t sub_1001AF4AC(char a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t result;
  _QWORD *v12;
  Class isa;
  _QWORD *v14;
  _QWORD aBlock[5];
  uint64_t v16;
  _QWORD *v17;

  v17 = _swiftEmptyArrayStorage;
  v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  v6 = swift_allocObject(&unk_10023E8F0, 25, 7);
  *(_QWORD *)(v6 + 16) = &v17;
  *(_BYTE *)(v6 + 24) = a1;
  v7 = swift_allocObject(&unk_10023E918, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001B0720;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1001B0754;
  v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA038;
  aBlock[3] = &unk_10023E930;
  v8 = _Block_copy(aBlock);
  v9 = v16;
  v10 = v5;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 98, 282, 26, 1);
  result = swift_release(v7);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v12 = v17;
    swift_bridgeObjectRetain(v17);
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease(v12);

    v14 = v17;
    swift_release(v6);
    return swift_bridgeObjectRelease(v14);
  }
  return result;
}

uint64_t sub_1001AF640(void (**a1)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t result;
  int64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83[3];
  __int128 v84;
  void *v85;
  _BYTE v86[24];
  unint64_t v87;

  v87 = sub_1001B26F4((uint64_t)_swiftEmptyArrayStorage);
  if (qword_10026BC00 == -1)
    goto LABEL_2;
LABEL_81:
  swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_2:
  v1 = qword_100275638;
  sub_100166C58(qword_100275638, (uint64_t *)&v87);
  v2 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v2);
  v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients, v86, 0, 0);
  v6 = *v5;
  v7 = *(os_unfair_lock_s **)(v1 + v3);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  os_unfair_lock_unlock(v7 + 4);
  swift_release(v7);
  v8 = 0;
  v9 = v6 + 64;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v80 = (unint64_t)(v10 + 63) >> 6;
  if (v12)
  {
LABEL_5:
    v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v14 = v13 | (v8 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_77;
    if (v15 >= v80)
      goto LABEL_38;
    v16 = *(_QWORD *)(v9 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v80)
        goto LABEL_38;
      v16 = *(_QWORD *)(v9 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v80)
          goto LABEL_38;
        v16 = *(_QWORD *)(v9 + 8 * v8);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v80)
            goto LABEL_38;
          v16 = *(_QWORD *)(v9 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v8 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_79;
              if (v8 >= v80)
                goto LABEL_38;
              v16 = *(_QWORD *)(v9 + 8 * v8);
              ++v17;
              if (v16)
                goto LABEL_19;
            }
          }
          v8 = v17;
        }
      }
    }
LABEL_19:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_20:
    v18 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14);
    v19 = v87;
    v20 = *(_QWORD *)(v87 + 16);
    v21 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v14);
    if (!v20 || (sub_100145264(0x6775626564, 0xE500000000000000), (v22 & 1) == 0))
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      *(_QWORD *)&v84 = v19;
      sub_1001BC6D4((uint64_t)_swiftEmptyArrayStorage, 0x6775626564, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
      v19 = v84;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v85 = &type metadata for Int32;
    LODWORD(v84) = v18;
    v24 = swift_isUniquelyReferenced_nonNull_native(v19);
    v83[0] = v19;
    v87 = 0x8000000000000000;
    v26 = sub_100145264(0x6775626564, 0xE500000000000000);
    v27 = *(_QWORD *)(v19 + 16);
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    v30 = v25;
    if (*(_QWORD *)(v19 + 24) < v29)
      break;
    if ((v24 & 1) != 0)
    {
      if ((v25 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      sub_1001BF210();
      if ((v30 & 1) == 0)
      {
LABEL_37:
        __break(1u);
LABEL_38:
        swift_release(v6);
        v37 = qword_100275638;
        v38 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(v38);
        v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
        v40 = *(os_unfair_lock_s **)(v37 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
        swift_retain(v40);
        os_unfair_lock_lock(v40 + 4);
        swift_release(v40);
        v41 = (uint64_t *)(v37 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
        swift_beginAccess(v37 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v83, 0, 0);
        v42 = *v41;
        v43 = *(os_unfair_lock_s **)(v37 + v39);
        swift_bridgeObjectRetain(v42);
        swift_retain(v43);
        os_unfair_lock_unlock(v43 + 4);
        swift_release(v43);
        v44 = 0;
        v45 = v42 + 64;
        v46 = 1 << *(_BYTE *)(v42 + 32);
        v47 = -1;
        if (v46 < 64)
          v47 = ~(-1 << v46);
        v48 = v47 & *(_QWORD *)(v42 + 64);
        v81 = (unint64_t)(v46 + 63) >> 6;
        if (v48)
        {
LABEL_41:
          v49 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          v50 = v49 | (v44 << 6);
          goto LABEL_56;
        }
        while (1)
        {
          v51 = v44 + 1;
          if (__OFADD__(v44, 1))
            break;
          if (v51 >= v81)
            goto LABEL_74;
          v52 = *(_QWORD *)(v45 + 8 * v51);
          ++v44;
          if (!v52)
          {
            v44 = v51 + 1;
            if (v51 + 1 >= v81)
              goto LABEL_74;
            v52 = *(_QWORD *)(v45 + 8 * v44);
            if (!v52)
            {
              v44 = v51 + 2;
              if (v51 + 2 >= v81)
                goto LABEL_74;
              v52 = *(_QWORD *)(v45 + 8 * v44);
              if (!v52)
              {
                v53 = v51 + 3;
                if (v53 >= v81)
                  goto LABEL_74;
                v52 = *(_QWORD *)(v45 + 8 * v53);
                if (!v52)
                {
                  while (1)
                  {
                    v44 = v53 + 1;
                    if (__OFADD__(v53, 1))
                      goto LABEL_80;
                    if (v44 >= v81)
                      goto LABEL_74;
                    v52 = *(_QWORD *)(v45 + 8 * v44);
                    ++v53;
                    if (v52)
                      goto LABEL_55;
                  }
                }
                v44 = v53;
              }
            }
          }
LABEL_55:
          v48 = (v52 - 1) & v52;
          v50 = __clz(__rbit64(v52)) + (v44 << 6);
LABEL_56:
          v54 = *(_DWORD *)(*(_QWORD *)(v42 + 48) + 4 * v50);
          v55 = (_QWORD *)v87;
          v56 = *(_QWORD *)(v87 + 16);
          v57 = *(id *)(*(_QWORD *)(v42 + 56) + 8 * v50);
          if (!v56 || (sub_100145264(0x73726F736E6573, 0xE700000000000000), (v58 & 1) == 0))
          {
            v59 = swift_isUniquelyReferenced_nonNull_native(v55);
            *(_QWORD *)&v84 = v55;
            sub_1001BC6D4((uint64_t)_swiftEmptyArrayStorage, 0x73726F736E6573, 0xE700000000000000, v59);
            v55 = (_QWORD *)v84;
            swift_bridgeObjectRelease(0x8000000000000000);
          }
          v85 = &type metadata for Int32;
          LODWORD(v84) = v54;
          v60 = swift_isUniquelyReferenced_nonNull_native(v55);
          v82 = (unint64_t)v55;
          v87 = 0x8000000000000000;
          v62 = sub_100145264(0x73726F736E6573, 0xE700000000000000);
          v63 = v55[2];
          v64 = (v61 & 1) == 0;
          v65 = v63 + v64;
          if (__OFADD__(v63, v64))
            goto LABEL_76;
          v66 = v61;
          if (v55[3] >= v65)
          {
            if ((v60 & 1) != 0)
            {
              if ((v61 & 1) == 0)
                goto LABEL_73;
            }
            else
            {
              sub_1001BF210();
              if ((v66 & 1) == 0)
                goto LABEL_73;
            }
          }
          else
          {
            sub_1001B8C10(v65, v60);
            v67 = sub_100145264(0x73726F736E6573, 0xE700000000000000);
            if ((v66 & 1) != (v68 & 1))
              goto LABEL_82;
            v62 = v67;
            if ((v66 & 1) == 0)
            {
LABEL_73:
              __break(1u);
LABEL_74:
              swift_release(v42);
              v72 = v87;
              swift_bridgeObjectRetain(v87);
              sub_1001A9CFC(v73);
              v75 = v74;
              swift_bridgeObjectRelease(v72);
              v76 = objc_allocWithZone((Class)type metadata accessor for ClientDictionary(0));
              v77 = (void *)ClientDictionary.init(dictionary:)(v75);
              ((void (**)(_QWORD, void *, _QWORD))a1)[2](a1, v77, 0);

              return swift_bridgeObjectRelease(v87);
            }
          }
          v69 = *(_QWORD **)(v55[7] + 8 * v62);
          if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v62)) & 1) == 0)
            v69 = sub_1000EA260(0, v69[2] + 1, 1, v69);
          v71 = v69[2];
          v70 = v69[3];
          if (v71 >= v70 >> 1)
            v69 = sub_1000EA260((_QWORD *)(v70 > 1), v71 + 1, 1, v69);
          v69[2] = v71 + 1;
          sub_1000E6004(&v84, &v69[4 * v71 + 4]);
          *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v62) = v69;
          v87 = v82;

          if (v48)
            goto LABEL_41;
        }
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
LABEL_30:
    v33 = v83[0];
    v34 = *(_QWORD **)(*(_QWORD *)(v83[0] + 56) + 8 * v26);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = sub_1000EA260(0, v34[2] + 1, 1, v34);
    v36 = v34[2];
    v35 = v34[3];
    if (v36 >= v35 >> 1)
      v34 = sub_1000EA260((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
    v34[2] = v36 + 1;
    sub_1000E6004(&v84, &v34[4 * v36 + 4]);
    *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v26) = v34;
    v87 = v33;

    if (v12)
      goto LABEL_5;
  }
  sub_1001B8C10(v29, v24);
  v31 = sub_100145264(0x6775626564, 0xE500000000000000);
  if ((v30 & 1) == (v32 & 1))
  {
    v26 = v31;
    if ((v30 & 1) == 0)
      goto LABEL_37;
    goto LABEL_30;
  }
LABEL_82:
  _Block_release(a1);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1001AFE00(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;

  v2 = sub_10009061C(&qword_100271338);
  inited = swift_initStackObject(v2, &v7);
  *(_OWORD *)(inited + 16) = xmmword_1001DD7E0;
  strcpy((char *)(inited + 32), "dockaccessoryd");
  *(_BYTE *)(inited + 47) = -18;
  v4 = *(_QWORD *)algn_100275328;
  *(_QWORD *)(inited + 48) = qword_100275320;
  *(_QWORD *)(inited + 56) = v4;
  strcpy((char *)(inited + 64), "dockkit-core");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(_QWORD *)(inited + 80) = 0x312E303332;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1001B1440(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, isa, 0);
  swift_bridgeObjectRelease(v5);

}

void sub_1001AFF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Got here! Do the migration", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v12 = (void *)sub_1000E6264();
  (*(void (**)(uint64_t, BOOL, void *))(a2 + 16))(a2, v12 == 0, v12);

}

uint64_t sub_1001B0064(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  NSString v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD v51[2];
  uint64_t aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  _OWORD v58[3];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "processIdentifier");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "valueForEntitlement:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v58);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v58, 0, 32);
  }
  sub_10009AEEC((uint64_t)v58, (uint64_t)&aBlock);
  if (v55)
  {
    v9 = swift_dynamicCast(v51, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v9)
      v10 = v51[0];
    else
      v10 = 0;
    if (v9)
      v11 = v51[1];
    else
      v11 = 0;
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
    v10 = 0;
    v11 = 0;
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v47 = sub_10016D5D0(a1);
  v13 = v12;
  if (qword_10026BC28 != -1)
    swift_once(&qword_10026BC28, sub_1001AA058);
  v14 = sub_10008EA50(v2, (uint64_t)qword_1002712C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
  swift_bridgeObjectRetain(v13);
  v15 = swift_bridgeObjectRetain_n(v11, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v48 = v5;
  v18 = v17;
  v19 = os_log_type_enabled(v16, v17);
  v50 = v6;
  v49 = v10;
  if (v19)
  {
    v20 = swift_slowAlloc(28, -1);
    v46 = v3;
    v21 = v20;
    v22 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v58[0] = v22;
    *(_DWORD *)v21 = 67109634;
    LODWORD(aBlock) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v21 + 4, v21 + 8);
    *(_WORD *)(v21 + 8) = 2080;
    v45 = v2;
    aBlock = v10;
    v53 = v11;
    swift_bridgeObjectRetain(v11);
    v23 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v24 = String.init<A>(describing:)(&aBlock, v23);
    v26 = v25;
    aBlock = sub_1000906BC(v24, v25, (uint64_t *)v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v53, v21 + 10, v21 + 18);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 18) = 2080;
    aBlock = v47;
    v53 = v13;
    swift_bridgeObjectRetain(v13);
    v27 = String.init<A>(describing:)(&aBlock, v23);
    v29 = v28;
    aBlock = sub_1000906BC(v27, v28, (uint64_t *)v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v53, v21 + 20, v21 + 28);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v21, 0x1Cu);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease_n(v11, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v48, v2);
  }
  v31 = (void *)objc_opt_self(NSXPCInterface, v30);
  v48 = (char *)objc_msgSend(v31, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore23DockDaemonDebugProtocol_);
  v32 = swift_allocObject(&unk_10023E828, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, a1);
  v33 = swift_allocObject(&unk_10023E850, 48, 7);
  v34 = v50;
  *(_DWORD *)(v33 + 16) = v50;
  v35 = v49;
  *(_QWORD *)(v33 + 24) = v49;
  *(_QWORD *)(v33 + 32) = v11;
  *(_QWORD *)(v33 + 40) = v32;
  v56 = sub_1001B06A4;
  v57 = v33;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v53 = 1107296256;
  v54 = sub_10012357C;
  v55 = &unk_10023E868;
  v36 = _Block_copy(&aBlock);
  v37 = v57;
  swift_bridgeObjectRetain(v11);
  swift_retain(v32);
  swift_release(v37);
  objc_msgSend(a1, "setInvalidationHandler:", v36);
  _Block_release(v36);
  v38 = swift_allocObject(&unk_10023E8A0, 48, 7);
  *(_DWORD *)(v38 + 16) = v34;
  *(_QWORD *)(v38 + 24) = v35;
  *(_QWORD *)(v38 + 32) = v11;
  *(_QWORD *)(v38 + 40) = v32;
  v56 = sub_1001B06E8;
  v57 = v38;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v53 = 1107296256;
  v54 = sub_10012357C;
  v55 = &unk_10023E8B8;
  v39 = _Block_copy(&aBlock);
  v40 = v57;
  swift_retain(v32);
  swift_release(v40);
  objc_msgSend(a1, "setInterruptionHandler:", v39);
  _Block_release(v39);
  v41 = v48;
  objc_msgSend(a1, "setExportedInterface:", v48);
  v42 = objc_msgSend(v31, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore23DockClientDebugProtocol_);
  objc_msgSend(a1, "setRemoteObjectInterface:", v42);
  v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for dockDebug(0)), "init");
  objc_msgSend(a1, "setExportedObject:", v43);
  objc_msgSend(a1, "resume");
  swift_release(v32);

  return 1;
}

uint64_t sub_1001B067C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B06A4()
{
  uint64_t v0;

  return sub_1001ABA70(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1001B06CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B06DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001B06E8()
{
  uint64_t v0;

  return sub_1001ABA70(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1001B0710()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001B0720()
{
  uint64_t v0;

  return sub_1001AA93C(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24), (SEL *)&selRef_stopSearchWithCalibrate_);
}

uint64_t sub_1001B0744()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B0754()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001B0774()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001B0784()
{
  uint64_t v0;

  return sub_1001AA93C(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24), (SEL *)&selRef_searchWithCalibrate_);
}

uint64_t sub_1001B07A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B07B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B07DC()
{
  uint64_t v0;

  return sub_1001AA5B4(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_dumpTrackerStateWithPath_);
}

uint64_t sub_1001B07FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B080C()
{
  uint64_t v0;

  return sub_1001AA5B4(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_dumpTrackerDiagnosticsWithPath_);
}

uint64_t sub_1001B082C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B083C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B0860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_100271380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B08A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_100271380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001B0924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_1002715A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_1000BC8F4(v9, v10);
    result = sub_100145264(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0A48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271618);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v13 = *v6;
    v7 = *((id *)v6 - 1);
    result = sub_1001452FC((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v7;
    *(_OWORD *)(v4[7] + 16 * result) = v13;
    v10 = v4[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4[2] = v12;
    v6 = (_OWORD *)((char *)v6 + 24);
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C((uint64_t *)&unk_100271560);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    result = sub_100145264(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0C6C(uint64_t a1)
{
  return sub_1001B2448(a1, &qword_1002715F0);
}

unint64_t sub_1001B0C78(uint64_t a1)
{
  return sub_1001B2700(a1, &qword_100271608);
}

unint64_t sub_1001B0C84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_1002714B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((_QWORD *)&v15 + 1));
    result = sub_100145264(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0DAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271448);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100145264(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C((uint64_t *)&unk_1002715C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_10014532C();
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v14;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B0FB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_10026D7B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000ACE4C(v7, (uint64_t)&v16, &qword_100271470);
    v8 = v16;
    v9 = v17;
    result = sub_100145264(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000E6004(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B10EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_10009061C(&qword_100271610);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_10009061C(&qword_1002714F8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000ACE4C(v13, (uint64_t)v5, &qword_100271610);
    result = sub_100145330((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for DockKitIDSInfo(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1001B12A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_10009061C(&qword_1002715F8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_10009061C((uint64_t *)&unk_1002714A0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000ACE4C(v13, (uint64_t)v5, &qword_1002715F8);
    result = sub_100145330((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = (_QWORD *)(v8[7] + 16 * v17);
    v21 = *((_QWORD *)v10 + 1);
    *v20 = *(_QWORD *)v10;
    v20[1] = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1001B1440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271458);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100145264(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B1560(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_1002714C8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000ACE4C(v7, (uint64_t)v16, &qword_1002714D0);
    result = sub_1001453C8((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000E6004(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B16A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271510);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000ACE4C(v7, (uint64_t)&v14, &qword_100271518);
    v8 = v14;
    result = sub_10014532C(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000E6004(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B17CC(uint64_t a1)
{
  return sub_1001B17E4(a1, &qword_100271508);
}

unint64_t sub_1001B17D8(uint64_t a1)
{
  return sub_1001B17E4(a1, &qword_100271500);
}

unint64_t sub_1001B17E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *v7;
    v9 = (id)*(v7 - 1);
    swift_bridgeObjectRetain(v8);
    result = sub_10014532C(v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v5[6] + v12) = v9;
    *(_QWORD *)(v5[7] + v12) = v8;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v5[2] = v15;
    v7 += 2;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B18E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C((uint64_t *)&unk_1002715B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    result = sub_100145534((uint64_t)v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v9;
    v12 = (_QWORD *)(v4[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B19FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10009061C(&qword_100271530);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10009061C((uint64_t *)&unk_100271520);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000ACE4C(v13, (uint64_t)v5, &qword_100271530);
    result = sub_100145580((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for ComponentType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1001B1B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_1002715E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = (id)*(v6 - 2);
    sub_10009B27C(v7, v8);
    result = sub_100145534((uint64_t)v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v9;
    v12 = (uint64_t *)(v4[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B1CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10009061C(&qword_100271540);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10009061C(&qword_100271548);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000ACE4C(v13, (uint64_t)v5, &qword_100271540);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100145264(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Date(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1001B1E48(uint64_t a1)
{
  return sub_1001B1E60(a1, &qword_100271580);
}

unint64_t sub_1001B1E54(uint64_t a1)
{
  return sub_1001B1E60(a1, &qword_100271598);
}

unint64_t sub_1001B1E60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = v7[1];
    v19 = *((_OWORD *)v7 + 1);
    v11 = v7[4];
    swift_bridgeObjectRetain(*v7);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
    result = sub_100145264(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    v15 = v5[7] + 32 * result;
    *(_QWORD *)v15 = v10;
    *(_OWORD *)(v15 + 8) = v19;
    *(_QWORD *)(v15 + 24) = v11;
    v16 = v5[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v7 += 6;
    v5[2] = v18;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B1FA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271558);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_10009B27C(v9, v10);
    result = sub_100145264(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B20CC(uint64_t a1)
{
  return sub_1001B2210(a1, &qword_1002715D8, (uint64_t (*)(id))sub_100145664);
}

unint64_t sub_1001B20E0(uint64_t a1)
{
  return sub_1001B2210(a1, &qword_1002715D0, (uint64_t (*)(id))sub_100145618);
}

unint64_t sub_1001B20F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C((uint64_t *)&unk_10026E868);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    v8 = *v6;
    swift_retain(v7);
    v9 = v8;
    result = sub_100145484(v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v7;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B21FC(uint64_t a1)
{
  return sub_1001B2210(a1, &qword_10026E878, (uint64_t (*)(id))sub_1001454E8);
}

unint64_t sub_1001B2210(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  id v11;
  id v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (void **)(a1 + 40);
  while (1)
  {
    v10 = *v9;
    v11 = *(v9 - 1);
    v12 = v10;
    result = a3(v11);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = 8 * result;
    *(_QWORD *)(v7[6] + v15) = v11;
    *(_QWORD *)(v7[7] + v15) = v12;
    v16 = v7[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v7[2] = v18;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B2320(uint64_t a1)
{
  return sub_1001B2700(a1, &qword_1002714C0);
}

unint64_t sub_1001B232C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(&qword_100271498);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100145264(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B243C(uint64_t a1)
{
  return sub_1001B2448(a1, &qword_1002714B0);
}

unint64_t sub_1001B2448(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_100145264(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B255C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10009061C(&qword_100271490);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10009061C(&qword_100270C60);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000ACE4C(v13, (uint64_t)v5, &qword_100271490);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100145264(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for BTDiscoveredDevice(0);
    result = sub_10019FB98(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1001B26F4(uint64_t a1)
{
  return sub_1001B2700(a1, (uint64_t *)&unk_100271460);
}

unint64_t sub_1001B2700(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009061C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_100145264(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1001B2814(uint64_t a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v3 = v1;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000014, 0x8000000100203140);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories] = _swiftEmptyArrayStorage;
  v4 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems;
  *(_QWORD *)&v3[v4] = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271440);
  v5 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors;
  *(_QWORD *)&v3[v5] = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271438);
  v6 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators;
  *(_QWORD *)&v3[v6] = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271430);
  v7 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes;
  *(_QWORD *)&v3[v7] = sub_1001B2700((uint64_t)_swiftEmptyArrayStorage, &qword_100271428);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId] = -1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId] = -1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId] = -1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorType] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensor] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error] = 0;
  v8 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser;
  *(_QWORD *)&v3[v8] = objc_msgSend(objc_allocWithZone((Class)NSXMLParser), "init");
  v9 = &v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_identifier];
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);

  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for AccessoryDescriptionParser(0);
  v12 = objc_msgSendSuper2(&v14, "init");
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v12;
}

void sub_1001B29F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE v28[24];

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static String.Encoding.utf8.getter(v7);
  v10 = String.data(using:allowLossyConversion:)(v9, 0, a1, a2);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v12 >> 60 != 15)
  {
    v13 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error;
    v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error) = 0;
    swift_errorRelease(v14);
    v15 = objc_allocWithZone((Class)NSXMLParser);
    sub_10009B27C(v10, v12);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(v15, "initWithData:", isa);
    sub_10009E3A0(v10, v12);

    v18 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser;
    v19 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser) = v17;

    objc_msgSend(*(id *)(v2 + v18), "setDelegate:", v2);
    sub_1001B2C54();
    v20 = objc_msgSend(*(id *)(v2 + v18), "parse");
    v21 = *(_QWORD *)(v2 + v13);
    if ((v20 & 1) != 0)
    {
      if (!v21)
      {
        sub_10009E3A0(v10, v12);
        v22 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories);
        swift_beginAccess(v22, v28, 0, 0);
        swift_bridgeObjectRetain(*v22);
        return;
      }
    }
    else if (!v21)
    {
      v24 = type metadata accessor for Errors(0);
      v25 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      swift_allocError(v24, v25, 0, 0);
      strcpy(v26, "Unknown error");
      *((_WORD *)v26 + 7) = -4864;
      v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for Errors.ParseFailure(_:), v24);
      goto LABEL_8;
    }
    v23 = swift_errorRetain(*(_QWORD *)(v2 + v13));
LABEL_8:
    swift_willThrow(v23);
    sub_10009E3A0(v10, v12);
  }
}

uint64_t sub_1001B2C54()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  char v15[24];
  char v16[24];
  char v17[24];

  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = -1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId) = -1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = -1;
  v1 = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271440);
  v2 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems, v17, 1, 0);
  v3 = *v2;
  *v2 = v1;
  swift_bridgeObjectRelease(v3);
  v4 = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271438);
  v5 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors, v16, 1, 0);
  v6 = *v5;
  *v5 = v4;
  swift_bridgeObjectRelease(v6);
  v7 = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271430);
  v8 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators, v15, 1, 0);
  v9 = *v8;
  *v8 = v7;
  swift_bridgeObjectRelease(v9);
  v10 = sub_1001B2700((uint64_t)_swiftEmptyArrayStorage, &qword_100271428);
  v11 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
  swift_beginAccess(v11, &v14, 1, 0);
  v12 = *v11;
  *v11 = v10;
  return swift_bridgeObjectRelease(v12);
}

id sub_1001B2F58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDescriptionParser(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001B3074()
{
  return type metadata accessor for AccessoryDescriptionParser(0);
}

uint64_t type metadata accessor for AccessoryDescriptionParser(uint64_t a1)
{
  uint64_t result;

  result = qword_100271418;
  if (!qword_100271418)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDescriptionParser);
  return result;
}

uint64_t sub_1001B30B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[14];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[10] = "\b";
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[11] = *(_QWORD *)(result - 8) + 64;
      v5[12] = "\b";
      v5[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
      return swift_updateClassMetadata2(a1, 256, 14, v5, a1 + 80);
    }
  }
  return result;
}

_QWORD *sub_1001B3180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10009061C(&qword_10026BF40);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001B31E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_1001B325C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3354(a1, a2, a3);
}

unsigned __int8 *sub_1001B3270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1001B35D0(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1001B3354(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_1001B3354(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001B35D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1001B364C(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1001B364C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001B3790(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1001B3180(v12, 0);
      v5 = sub_1001B387C((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1001B3790(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1001B31E4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1001B31E4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001B387C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1001B31E4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1001B31E4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

double sub_1001B3A8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100145264(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001BCA9C();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1000E6004((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1001B9234(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1001B3B7C(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v17;

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_100145484(a1);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001BCE38();
        v4 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v6 = swift_retain(a1);
  v7 = __CocoaDictionary.lookup(_:)(v6, v5);
  swift_release(a1);
  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v8 = __CocoaDictionary.count.getter(v5);
  v4 = sub_10012CBE0(v5, v8);
  swift_retain(v4);
  a1 = sub_100145484(a1);
  v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:
  swift_release(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * a1));
  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_1001B9408(a1, v4);
  v15 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

uint64_t sub_1001B3CDC(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v17;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_1001454E8(a1);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001BCFDC();
        v4 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = (id)a1;
  v7 = __CocoaDictionary.lookup(_:)(v6, v5);

  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v8 = __CocoaDictionary.count.getter(v5);
  v4 = sub_10012CE40(v5, v8);
  swift_retain(v4);
  a1 = sub_1001454E8((uint64_t)v6);
  v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_1001B95E0(a1, v4);
  v15 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

uint64_t sub_1001B3E28(unsigned int a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_1001452C8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BD180();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_1001B9790(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_1001B3EBC(unsigned int a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_1001452C8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BD330();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v5);
  sub_1001B992C(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_1001B3F64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BD4DC();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_1001B9AC4(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B4048(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BD848();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_1001B9AC4(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B412C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_100145330(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BDA0C();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v5);
  sub_1001B9E6C(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B4218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100145264(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001BDEAC();
      v12 = v19;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for BTDiscoveredDevice(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_10019FB98(v13 + *(_QWORD *)(v15 + 72) * v9, a3);
    sub_1001BA3AC(v9, v12, type metadata accessor for BTDiscoveredDevice);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for BTDiscoveredDevice(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
}

uint64_t sub_1001B434C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100145264(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001BE0D8();
      v12 = v19;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(_QWORD *)(v15 + 72) * v9, v14);
    sub_1001BA3AC(v9, v12, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
}

uint64_t sub_1001B4488(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BE340();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1001B9C98(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B4554(unsigned int a1)
{
  return sub_1001B4670(a1, &qword_100271578);
}

uint64_t sub_1001B4560(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BE690(&qword_100271598);
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7);
  sub_1001B9234(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B4664(unsigned int a1)
{
  return sub_1001B4670(a1, &qword_100271478);
}

uint64_t sub_1001B4670(unsigned int a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = v2;
  v5 = sub_1001452C8(a1);
  if ((v6 & 1) == 0)
    return 0;
  v7 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v9 = *v2;
  v13 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BE87C(a2);
    v9 = v13;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v7);
  sub_1001B9790(v7, v9);
  v11 = *v4;
  *v4 = v9;
  swift_bridgeObjectRelease(v11);
  return v10;
}

uint64_t sub_1001B470C(unsigned int a1)
{
  return sub_1001B4724(a1, &qword_100271590);
}

uint64_t sub_1001B4718(unsigned int a1)
{
  return sub_1001B4724(a1, &qword_100271588);
}

uint64_t sub_1001B4724(unsigned int a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = v2;
  v5 = sub_1001452C8(a1);
  if ((v6 & 1) == 0)
    return 0;
  v7 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v9 = *v2;
  v13 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BEA18(a2);
    v9 = v13;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v7);
  sub_1001B992C(v7, v9);
  v11 = *v4;
  *v4 = v9;
  swift_bridgeObjectRelease(v11);
  return v10;
}

uint64_t sub_1001B47D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BF3C8(&qword_1002715A0);
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1001B9C98(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B48A8(unsigned int a1)
{
  uint64_t *v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_1001452C8(a1);
  if ((v3 & 1) == 0)
    return 1;
  v4 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v6 = *v1;
  v10 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BED84();
    v6 = v10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v4);
  sub_1001B992C(v4, v6);
  v8 = *v1;
  *v1 = v6;
  swift_bridgeObjectRelease(v8);
  return v7;
}

uint64_t sub_1001B4950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145330(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001BEF30();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for DockKitIDSInfo(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(_QWORD *)(v15 + 72) * v7, v14);
    sub_1001BA5B8(v7, v10);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for DockKitIDSInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_1001B4A8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100145264(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001BF21C(&qword_100271428);
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1001B9C98(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001B4B60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_10026D7B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1000E6004(v25, v38);
      }
      else
      {
        sub_100090EA8((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1000E6004(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001B4E5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271458);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001B5180(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C((uint64_t *)&unk_10026E868);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v40 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_36;
      v26 = *(_QWORD *)(v40 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v7 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v39)
              goto LABEL_36;
            v26 = *(_QWORD *)(v40 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(_QWORD *)(v5 + 48);
    v34 = *(_QWORD *)(v33 + v32);
    v35 = *(void **)(*(_QWORD *)(v5 + 56) + v32);
    if ((v7 & 1) == 0)
    {
      swift_retain(*(_QWORD *)(v33 + v32));
      v36 = v35;
    }
    Hasher.init(_seed:)(v41);
    v16 = *(id *)(v34 + 24);
    NSObject.hash(into:)(v41);

    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v13 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v34;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v35;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v25 = (_QWORD *)(v5 + 64);
  if ((v7 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_1001B5488(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_10026E878);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1001B5758(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271450);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v32 = 1 << *(_BYTE *)(v5 + 32);
    v33 = v3;
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v10[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v10[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v34);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v10[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v10[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v20);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        v30 = v29;
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v28, 4);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v18) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_1001B5A04(uint64_t a1, uint64_t a2)
{
  return sub_1001B8C1C(a1, a2, &qword_100271608);
}

uint64_t sub_1001B5A10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271570);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v29[1]);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v28, 4);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001B5CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_1002714B8);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_retain(*((_QWORD *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_1001B5FD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271448);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001B62D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_1002715A8);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_1000BC8F4(v39, *((uint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_1001B65E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10009061C((uint64_t *)&unk_1002714A0);
  v48 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v46 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v44 = v2;
  v45 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v45)
      break;
    v24 = v46;
    v25 = v46[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v45)
        goto LABEL_36;
      v25 = v46[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_36:
          swift_release(v9);
          v3 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v45)
              goto LABEL_36;
            v25 = v46[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v49 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 32))(v8, v28, v6);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v8, v28, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34, v35);
    v36 = -1 << *(_BYTE *)(v11 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      v19 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v49 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v44;
  v24 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v9 + 32);
  if (v43 >= 64)
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v43;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

uint64_t sub_1001B698C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for ComponentType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10009061C((uint64_t *)&unk_100271520);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100090E1C(&qword_10026EDA8, (uint64_t (*)(uint64_t))&type metadata accessor for ComponentType, (uint64_t)&protocol conformance descriptor for ComponentType);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31, v32);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_1001B6D20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for BTDiscoveredDevice(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(&qword_100270C60);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_10019FB98(v31, (uint64_t)v8);
    }
    else
    {
      sub_1000D537C(v31, (uint64_t)v8);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v45);
    String.hash(into:)(v45, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_10019FB98((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_1001B7088(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(&qword_100271548);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47);
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

uint64_t sub_1001B73F0(uint64_t a1, uint64_t a2)
{
  return sub_1001B7CF4(a1, a2, &qword_100271538);
}

Swift::Int sub_1001B73FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C((uint64_t *)&unk_100271560);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1001B7710(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271550);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    v32 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v18);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v22, 4);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v16) = v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_1001B79B0(uint64_t a1, uint64_t a2)
{
  return sub_1001B7CF4(a1, a2, &qword_100271578);
}

Swift::Int sub_1001B79BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  _QWORD v43[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(a3);
  v41 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v38 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v40 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v39 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v6);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v39)
          goto LABEL_36;
        v25 = v40[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v39)
            goto LABEL_36;
          v25 = v40[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v39)
            {
LABEL_36:
              swift_release(v6);
              v4 = v38;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v6 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v40[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v39)
                  goto LABEL_36;
                v25 = v40[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v23);
      v33 = *v31;
      v32 = v31[1];
      v34 = *(_QWORD *)(v6 + 56) + 32 * v23;
      v35 = *(_QWORD *)v34;
      v42 = *(_OWORD *)(v34 + 8);
      v36 = *(_QWORD *)(v34 + 24);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(*((_QWORD *)&v42 + 1));
      }
      Hasher.init(_seed:)(v43);
      String.hash(into:)(v43, v33, v32);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
      *v20 = v33;
      v20[1] = v32;
      v21 = *(_QWORD *)(v9 + 56) + 32 * v19;
      *(_QWORD *)v21 = v35;
      *(_OWORD *)(v21 + 8) = v42;
      *(_QWORD *)(v21 + 24) = v36;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1001B7CE8(uint64_t a1, uint64_t a2)
{
  return sub_1001B7CF4(a1, a2, &qword_100271478);
}

uint64_t sub_1001B7CF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v12;
    v33 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v12 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v10 << 6);
      }
      else
      {
        v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_36;
        v23 = v11[v22];
        ++v10;
        if (!v23)
        {
          v10 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_36;
          v23 = v11[v10];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v11 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v11[v24];
            if (!v23)
            {
              while (1)
              {
                v10 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v10 >= v34)
                  goto LABEL_36;
                v23 = v11[v10];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v10 = v24;
          }
        }
LABEL_33:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      v29 = *(_QWORD *)(v6 + 56);
      v30 = *(unsigned int *)(*(_QWORD *)(v6 + 48) + 4 * v21);
      v31 = *(_QWORD *)(v29 + 8 * v21);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v29 + 8 * v21));
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v9 + 40), v30, 4);
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_DWORD *)(*(_QWORD *)(v9 + 48) + 4 * v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v31;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1001B7FA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t *v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v39 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v35 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v36 = 1 << *(_BYTE *)(v6 + 32);
    v37 = v4;
    v38 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v10 << 6);
      }
      else
      {
        v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v22 >= v38)
          goto LABEL_36;
        v23 = v39[v22];
        ++v10;
        if (!v23)
        {
          v10 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_36;
          v23 = v39[v10];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v6);
                v4 = v37;
                goto LABEL_43;
              }
              if (v36 >= 64)
                bzero(v39, 8 * v38);
              else
                *v39 = v35;
              v4 = v37;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v10 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v10 >= v38)
                  goto LABEL_36;
                v23 = v39[v10];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v10 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      v29 = *(unsigned int *)(*(_QWORD *)(v6 + 48) + 4 * v21);
      v30 = *(_QWORD *)(v6 + 56) + 16 * v21;
      v32 = *(void **)v30;
      v31 = *(void **)(v30 + 8);
      if ((a2 & 1) == 0)
      {
        v33 = v32;
        v34 = v31;
      }
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v9 + 40), v29, 4);
      v15 = -1 << *(_BYTE *)(v9 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(_QWORD *)(v9 + 48) + 4 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
LABEL_43:
  *v4 = v9;
  return result;
}

Swift::Int sub_1001B8254(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_100271558);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_10009B27C(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_1001B8560(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_1002715E8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v21);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        sub_1000BC8F4(v33, *((uint64_t *)&v33 + 1));
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v29, 4);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_1001B8818(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[4];
  int v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;

  v3 = v2;
  v6 = type metadata accessor for DockKitIDSInfo(0);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  __chkstk_darwin(v6);
  v56 = &v48[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(&qword_1002714F8);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v45 = v11;
LABEL_45:
    result = swift_release(v45);
    *v3 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v52 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v50 = v3;
  v51 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v54 = v11;
  result = swift_retain(v11);
  v21 = 0;
  v49 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v53 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v27 >= v51)
    {
      v46 = v54;
      swift_release(v54);
      v3 = v50;
      v28 = v52;
      if ((v49 & 1) != 0)
      {
LABEL_40:
        v47 = 1 << *(_BYTE *)(v46 + 32);
        if (v47 >= 64)
          bzero(v28, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v28 = -1 << v47;
        *(_QWORD *)(v46 + 16) = 0;
      }
LABEL_44:
      v45 = v46;
      goto LABEL_45;
    }
    v28 = v52;
    v29 = v52[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v51)
        goto LABEL_37;
      v29 = v52[v21];
      if (!v29)
        break;
    }
LABEL_26:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    v31 = v54;
    v32 = *(_QWORD *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v23))(v10, *(_QWORD *)(v54 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v57 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v57 + v23))(v56, v33 + v34 * v26, v58);
    v35 = *(_QWORD *)(v14 + 40);
    v36 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36, v37);
    v38 = -1 << *(_BYTE *)(v14 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v19 + 8 * v40);
      }
      while (v44 == -1);
      v24 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v10, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v57 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v56, v58);
    ++*(_QWORD *)(v14 + 16);
  }
  v30 = v27 + 2;
  if (v30 >= v51)
  {
LABEL_37:
    v46 = v54;
    swift_release(v54);
    v3 = v50;
    if ((v49 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v29 = v52[v30];
  if (v29)
  {
    v21 = v30;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v51)
      goto LABEL_37;
    v29 = v52[v21];
    ++v30;
    if (v29)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

Swift::Int sub_1001B8C10(uint64_t a1, uint64_t a2)
{
  return sub_1001B8C1C(a1, a2, (uint64_t *)&unk_100271460);
}

Swift::Int sub_1001B8C1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1001B8F2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10009061C(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

unint64_t sub_1001B9234(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001B9408(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v26);
        v10 = *(void **)(v9 + 24);
        swift_retain(v9);
        v11 = v10;
        NSObject.hash(into:)(v26);

        v12 = Hasher._finalize()();
        result = swift_release(v9);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1001B95E0(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1001B9790(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001B992C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001B9AC4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001B9C98(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001B9E6C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v22 = v21 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v15 * a1;
            v26 = v25 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v26 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_OWORD *)(v27 + 16 * a1);
            v29 = (_OWORD *)(v27 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001BA10C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for ComponentType(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100090E1C(&qword_10026EDA8, (uint64_t (*)(uint64_t))&type metadata accessor for ComponentType, (uint64_t)&protocol conformance descriptor for ComponentType);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v22 = v21 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v15 * a1;
            v26 = v25 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v26 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v26);
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_QWORD *)(v27 + 8 * a1);
            v29 = (_QWORD *)(v27 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001BA3AC(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v31);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v31, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v15 < v10)
          goto LABEL_11;
LABEL_12:
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_OWORD *)(v16 + 16 * v4);
        v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v21 = v20 * v4;
        result = v19 + v20 * v4;
        v22 = v20 * v7;
        v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v21 == v22)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v15 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v15)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v26 = *v25;
    v27 = (-1 << v4) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001BA5B8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  unint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v44 = (result + 1) & v11;
      v12 = *(_QWORD *)(v45 + 72);
      v43 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v43(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v7, v4);
        v13 = v17;
        v22 = v21 & v17;
        if (a1 >= (uint64_t)v44)
        {
          if (v22 >= v44 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            v26 = v25 + v15 * a1;
            v27 = v25 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v26 >= v27 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v26, v27, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v28 = *(_QWORD *)(a2 + 56);
            v29 = type metadata accessor for DockKitIDSInfo(0);
            v30 = *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72);
            v31 = v30 * a1;
            result = v28 + v30 * a1;
            v32 = v30 * v10;
            v33 = v28 + v30 * v10;
            v34 = v33 + v30;
            if (v31 < v32 || result >= v34)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v33, 1, v29);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v31 != v32)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v44 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v36 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v36;
    v38 = (-1 << a1) - 1;
  }
  else
  {
    v36 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v38 = *v36;
    v37 = (-1 << a1) - 1;
  }
  *v36 = v38 & v37;
  v39 = *(_QWORD *)(a2 + 16);
  v40 = __OFSUB__(v39, 1);
  v41 = v39 - 1;
  if (v40)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v41;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1001BA88C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100145264(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100090E88(v19);
        return sub_1000E6004(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001BCA9C();
      goto LABEL_7;
    }
    sub_1001B4B60(v15, a4 & 1);
    v21 = sub_100145264(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001BC6E0(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001BA9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100145264(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001BCC80();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_1001B4E5C(v17, a5 & 1);
  v23 = sub_100145264(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1001BAB30(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100145484(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001BCE38();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      swift_retain(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B5180(v13, a3 & 1);
  v18 = sub_100145484(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = type metadata accessor for DaemonAccessory(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_1001BAC80(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  unint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1001454E8((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001BCFDC();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v18 = 8 * v9;
    *(_QWORD *)(v15[6] + v18) = a2;
    *(_QWORD *)(v15[7] + v18) = a1;
    v19 = v15[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v15[2] = v21;
      v22 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B5488(v12, a3 & 1);
  v17 = sub_1001454E8((uint64_t)a2);
  if ((v13 & 1) == (v8 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v23 = sub_1001C5860(0, v8);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
}

void sub_1001BADD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BAF24(a1, a2, a3, a4, &qword_100271608);
}

void sub_1001BADDC(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1001452C8(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001BD330();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_bridgeObjectRelease(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B5A10(v15, a4 & 1);
  v20 = sub_1001452C8(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
}

void sub_1001BAF18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BAF24(a1, a2, a3, a4, &qword_1002714C0);
}

void sub_1001BAF24(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_100145264(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001BF21C(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B8C1C(v17, a4 & 1, a5);
  v22 = sub_100145264(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BB098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100145264(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001BD4DC();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_release(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B5CC8(v17, a5 & 1);
  v22 = sub_100145264(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1001BB20C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100145330(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_bridgeObjectRelease(v22[1]);
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001BDA0C();
    goto LABEL_7;
  }
  sub_1001B65E0(v18, a4 & 1);
  v25 = sub_100145330(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1001BC74C(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_1001BB378(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ComponentType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100145580(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1001BDC7C();
    goto LABEL_7;
  }
  sub_1001B698C(v17, a3 & 1);
  v23 = sub_100145580(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001BC7EC(v14, (uint64_t)v11, a1, v20);
}

void sub_1001BB4D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100145264(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for BTDiscoveredDevice(0) - 8) + 72) * v12;
        sub_1001C57DC(a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001BDEAC();
      goto LABEL_7;
    }
    sub_1001B6D20(v15, a4 & 1);
    v21 = sub_100145264(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001BC884(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BB608(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100145264(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Date(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001BE0D8();
      goto LABEL_7;
    }
    sub_1001B7088(v15, a4 & 1);
    v21 = sub_100145264(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001BC90C(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BB744(uint64_t a1, unsigned int a2, char a3)
{
  sub_1001BBB20(a1, a2, a3, &qword_100271538);
}

void sub_1001BB750(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100145264(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001BE340();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B73FC(v15, a4 & 1);
  v20 = sub_100145264(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BB8AC(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1001452C8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001BD180();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B5758(v13, a3 & 1);
  v18 = sub_1001452C8(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
}

uint64_t sub_1001BB9E0(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1001452C8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1001BE4F4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001B7710(result, a3 & 1);
  result = sub_1001452C8(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
  return result;
}

void sub_1001BBB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  sub_1001BBC78(a1, a2, a3, a4, a5, a6, a7, &qword_100271580);
}

void sub_1001BBB14(uint64_t a1, unsigned int a2, char a3)
{
  sub_1001BBB20(a1, a2, a3, &qword_100271578);
}

void sub_1001BBB20(uint64_t a1, unsigned int a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v6 = v4;
  v10 = *v4;
  v12 = sub_1001452C8(a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_1001BE87C(a4);
LABEL_7:
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a2;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B7CF4(v15, a3 & 1, a4);
  v20 = sub_1001452C8(a2);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
}

void sub_1001BBC60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BC11C(a1, a2, a3, a4, &qword_1002715F0);
}

void sub_1001BBC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  sub_1001BBC78(a1, a2, a3, a4, a5, a6, a7, &qword_100271598);
}

void sub_1001BBC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v10 = v8;
  v16 = *v8;
  v18 = sub_100145264(a5, a6);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a7 & 1) != 0)
    goto LABEL_7;
  if (v23 >= v21 && (a7 & 1) == 0)
  {
    sub_1001BE690(a8);
LABEL_7:
    v24 = (_QWORD *)*v10;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = (_QWORD *)(v24[7] + 32 * v18);
      v26 = v25[1];
      swift_bridgeObjectRelease(v25[2]);
      swift_bridgeObjectRelease(v26);
      *v25 = a1;
      v25[1] = a2;
      v25[2] = a3;
      v25[3] = a4;
      return;
    }
LABEL_11:
    v24[(v18 >> 6) + 8] |= 1 << v18;
    v29 = (uint64_t *)(v24[6] + 16 * v18);
    *v29 = a5;
    v29[1] = a6;
    v30 = (_QWORD *)(v24[7] + 32 * v18);
    *v30 = a1;
    v30[1] = a2;
    v30[2] = a3;
    v30[3] = a4;
    v31 = v24[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (!v32)
    {
      v24[2] = v33;
      swift_bridgeObjectRetain(a6);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B79BC(v21, a7 & 1, a8);
  v27 = sub_100145264(a5, a6);
  if ((v22 & 1) == (v28 & 1))
  {
    v18 = v27;
    v24 = (_QWORD *)*v10;
    if ((v22 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BBE24(uint64_t a1, unsigned int a2, char a3)
{
  sub_1001BBB20(a1, a2, a3, &qword_100271478);
}

void sub_1001BBE30(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  sub_1001BBE48(a1, a2, a3, a4, &qword_100271590);
}

void sub_1001BBE3C(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  sub_1001BBE48(a1, a2, a3, a4, &qword_100271588);
}

void sub_1001BBE48(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1001452C8(a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001BEA18(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      v22 = *(void **)v21;

      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    *(_DWORD *)(v20[6] + 4 * v14) = a3;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return;
    }
    goto LABEL_14;
  }
  sub_1001B7FA0(v17, a4 & 1, a5);
  v23 = sub_1001452C8(a3);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
}

void sub_1001BBF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100145264(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001BEBC0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      sub_10009B2FC(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B8254(v17, a5 & 1);
  v22 = sub_100145264(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BC110(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BC11C(a1, a2, a3, a4, &qword_1002715A0);
}

void sub_1001BC11C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_100145264(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001BF3C8(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B8F2C(v17, a4 & 1, a5);
  v22 = sub_100145264(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001BC290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100145264(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001BD848();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (uint64_t *)(v20[7] + 16 * v14);
      sub_1000B1410(*v21, v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (uint64_t *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1001B62D4(v17, a5 & 1);
  v22 = sub_100145264(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1001BC404(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1001452C8(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1001BED84();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (uint64_t *)(v18[7] + 16 * v12);
      result = sub_1000B1410(*v19, v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    v21 = (uint64_t *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001B8560(result, a4 & 1);
  result = sub_1001452C8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
  return result;
}

uint64_t sub_1001BC540(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100145330(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for DockKitIDSInfo(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001BEF30();
      goto LABEL_7;
    }
    sub_1001B8818(v17, a3 & 1);
    v24 = sub_100145330(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001BC99C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_1001BC6C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BC11C(a1, a2, a3, a4, &qword_1002714B0);
}

void sub_1001BC6D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001BAF24(a1, a2, a3, a4, (uint64_t *)&unk_100271460);
}

_OWORD *sub_1001BC6E0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000E6004(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1001BC74C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_1001BC7EC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ComponentType(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1001BC884(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for BTDiscoveredDevice(0);
  result = sub_10019FB98(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_1001BC90C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_1001BC99C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for DockKitIDSInfo(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_1001BCA54(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void *sub_1001BCA9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10009061C(&qword_10026D7B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100090EA8(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000E6004(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001BCC80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10009061C(&qword_100271458);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001BCE38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10009061C((uint64_t *)&unk_10026E868);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    result = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001BCFDC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10009061C(&qword_10026E878);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001BD180()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10009061C(&qword_100271450);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(void **)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001BD324()
{
  sub_1001BF21C(&qword_100271608);
}

void sub_1001BD330()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10009061C(&qword_100271570);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1001BD4DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10009061C(&qword_1002714B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(*((_QWORD *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001BD69C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10009061C(&qword_100271448);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1001BD848()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10009061C(&qword_1002715A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_1000BC8F4(v24, *((uint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001BDA0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C((uint64_t *)&unk_1002714A0);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1001BDC7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for ComponentType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C((uint64_t *)&unk_100271520);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001BDEAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for BTDiscoveredDevice(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C(&qword_100270C60);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v28 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_1000D537C(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v21;
    v23[1] = v20;
    sub_10019FB98((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    swift_bridgeObjectRetain(v20);
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    swift_release(v5);
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1001BE0D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C(&qword_100271548);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1001BE334()
{
  sub_1001BE87C(&qword_100271538);
}

void *sub_1001BE340()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10009061C((uint64_t *)&unk_100271560);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001BE4F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  sub_10009061C(&qword_100271550);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001BE684()
{
  sub_1001BE87C(&qword_100271578);
}

void sub_1001BE690(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  __int128 v30;

  v2 = v1;
  sub_10009061C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v14)
      goto LABEL_26;
    v28 = *(_QWORD *)(v7 + 8 * v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v14)
        goto LABEL_26;
      v28 = *(_QWORD *)(v7 + 8 * v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 32 * v16;
    v22 = *(_QWORD *)(v3 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 24);
    v25 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    v30 = *(_OWORD *)(v22 + 8);
    *v25 = v20;
    v25[1] = v19;
    v26 = *(_QWORD *)(v5 + 56) + v21;
    *(_QWORD *)v26 = v23;
    *(_OWORD *)(v26 + 8) = v30;
    *(_QWORD *)(v26 + 24) = v24;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(*((_QWORD *)&v30 + 1));
  }
  v29 = v27 + 2;
  if (v29 >= v14)
    goto LABEL_26;
  v28 = *(_QWORD *)(v7 + 8 * v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v28 = *(_QWORD *)(v7 + 8 * v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001BE870()
{
  sub_1001BE87C(&qword_100271478);
}

void sub_1001BE87C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10009061C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 4 * v16;
    v18 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
    v19 = 8 * v16;
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_DWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1001BEA18(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v2 = v1;
  sub_10009061C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v14)
      goto LABEL_26;
    v26 = *(_QWORD *)(v7 + 8 * v25);
    ++v10;
    if (!v26)
    {
      v10 = v25 + 1;
      if (v25 + 1 >= v14)
        goto LABEL_26;
      v26 = *(_QWORD *)(v7 + 8 * v10);
      if (!v26)
        break;
    }
LABEL_25:
    v13 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_12:
    v17 = 4 * v16;
    v18 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
    v19 = 16 * v16;
    v20 = *(_QWORD *)(v3 + 56) + v19;
    v21 = *(void **)v20;
    v22 = *(void **)(v20 + 8);
    *(_DWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
    *v23 = v21;
    v23[1] = v22;
    v24 = v21;
    result = v22;
  }
  v27 = v25 + 2;
  if (v27 >= v14)
    goto LABEL_26;
  v26 = *(_QWORD *)(v7 + 8 * v27);
  if (v26)
  {
    v10 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v26 = *(_QWORD *)(v7 + 8 * v10);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001BEBC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10009061C(&qword_100271558);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10009B27C(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001BED84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10009061C(&qword_1002715E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_1000BC8F4(v19, *((uint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1001BEF30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = type metadata accessor for DockKitIDSInfo(0);
  v37 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C(&qword_1002714F8);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release(v3);
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release(v42);
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1001BF210()
{
  sub_1001BF21C((uint64_t *)&unk_100271460);
}

void sub_1001BF21C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10009061C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1001BF3C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10009061C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1001BF570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C(&qword_100271600);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_1001C09D8(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000E6210(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001BF654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C((uint64_t *)&unk_10026E6C0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001C0B6C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000E6210(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001BF738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C((uint64_t *)&unk_100271480);
  v4 = *(_QWORD *)(type metadata accessor for BTDiscoveredDevice(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1001C0D68(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_1000E6210(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001BF850(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C((uint64_t *)&unk_10026E6C0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001C0FF0((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000E6210(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001BF934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C(&qword_1002712A8);
  v4 = *(_QWORD *)(sub_10009061C((uint64_t *)&unk_10026E6B0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009061C((uint64_t *)&unk_10026E6B0) - 8) + 80);
      sub_1001C11EC(&v15, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v12;
      v14 = v15;
      swift_bridgeObjectRetain(a1);
      sub_1000E6210(v14);
      if (v13 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001BFA6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_10009061C(&qword_10026BF40);
    v9 = (_QWORD *)swift_allocObject(v8, v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * v10 - 64;
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = v9 + 4;
  if (a2 + a3 >= (unint64_t)v9 + v5 + 32 || (unint64_t)v11 >= a2 + a3 + v5)
  {
    memcpy(v11, (const void *)(a2 + a3), v5);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t **sub_1001BFBC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_10009061C(&qword_10026C340);
    v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1001C14E0(&v9, v4 + 4, v2, v1);
  result = (uint64_t **)sub_1000E6210(v9);
  if (v7 == (uint64_t *)v2)
    return v4;
  __break(1u);
  return result;
}

char *sub_1001BFCBC(char *a1, int64_t a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  if (!a2)
    return (char *)_swiftEmptyArrayStorage;
  if (a2 <= 0)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_12;
  }
  v4 = sub_10009061C(&qword_10026BF40);
  v5 = (char *)swift_allocObject(v4, a2 + 32, 7);
  v6 = j__malloc_size(v5);
  *((_QWORD *)v5 + 2) = a2;
  *((_QWORD *)v5 + 3) = 2 * v6 - 64;
  v7 = v5 + 32;
  if (&v5[a2 + 32] <= a1 || v7 >= &a1[a2])
  {
    memcpy(v7, a1, a2);
    return v5;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *sub_1001BFDDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001BFE18(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for DKPersonTrackerState);
}

_QWORD *sub_1001BFDE8(uint64_t a1)
{
  return sub_1001BFFC8(a1, (void (*)(_QWORD))&type metadata accessor for DKPersonTrackerState, &qword_1002714F0, &qword_1002714E8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019D774);
}

_QWORD *sub_1001BFE0C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001BFE18(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for TrackedSubjectInternal);
}

_QWORD *sub_1001BFE18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v6)
    return _swiftEmptyArrayStorage;
  v10 = 8 * v6;
  if (v6 <= 0)
  {
    v12 = _swiftEmptyArrayStorage;
    if (v5 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v11 = sub_10009061C(&qword_10026C340);
  v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
  v13 = j__malloc_size(v12);
  v14 = v13 - 32;
  if (v13 < 32)
    v14 = v13 - 25;
  v12[2] = v6;
  v12[3] = (2 * (v14 >> 3)) | 1;
  if (v5 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v6 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v15 = a2 + 8 * a3;
  if (v15 >= (unint64_t)&v12[(unint64_t)v10 / 8 + 4] || (unint64_t)(v12 + 4) >= v15 + v10)
  {
    a5(0);
    swift_arrayInitWithCopy(v12 + 4);
    return v12;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001BFFA4(uint64_t a1)
{
  return sub_1001BFFC8(a1, (void (*)(_QWORD))&type metadata accessor for TrackedSubjectInternal, &qword_1002714E0, &qword_1002714D8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019D7CC);
}

_QWORD *sub_1001BFFC8(uint64_t a1, void (*a2)(_QWORD), unint64_t *a3, uint64_t *a4, uint64_t (*a5)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v10 <= 0)
    {
      v12 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = sub_10009061C(&qword_10026C340);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = (2 * (v14 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1);
    v15 = sub_1001C04C8((unint64_t)(v12 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v16;
    swift_bridgeObjectRelease(v15);
    if (a5 == (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))v10)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
    if (!v10)
      return _swiftEmptyArrayStorage;
  }
  return v12;
}

_QWORD *sub_1001C00EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10009061C(&qword_10026C340);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_1001C17E0(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000E6210(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

unint64_t sub_1001C01D4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_1001C02B0(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_1001C02B0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1001C034C(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1001C03B8(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1001C034C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1001B31E4(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1001C03B8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter(a2, a3);
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_1001C04C8(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_1001C5820(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_10009061C(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          swift_retain(*v24);
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001C06D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_1001C0730(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (v4 && v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v5 - 120) = v1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1001C09A8);
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = BYTE6(v7);
  return 0;
}

_QWORD *sub_1001C09D8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001C0B6C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001C0D68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for BTDiscoveredDevice(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1000D537C(*(_QWORD *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_10019FB98((uint64_t)v12, (uint64_t)v15);
    result = sub_10019FB98((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001C0FF0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1001C11EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v42 = a4;
  v16 = *(_QWORD *)(a4 + 64);
  v15 = a4 + 64;
  v14 = v16;
  v38 = v15;
  v17 = -1 << *(_BYTE *)(v15 - 32);
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
LABEL_38:
    v32 = v38;
    *a1 = v42;
    a1[1] = v32;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
    goto LABEL_40;
  v35 = -1 << *(_BYTE *)(v15 - 32);
  v36 = a1;
  v20 = 0;
  v21 = 0;
  v37 = (unint64_t)(63 - v17) >> 6;
  v34 = v37 - 1;
  v39 = a3;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v23 = v22 | (v20 << 6);
  while (1)
  {
    ++v21;
    v27 = *(_QWORD *)(v42 + 56);
    v28 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v23);
    v29 = *v28;
    v30 = v28[1];
    v31 = type metadata accessor for BTDiscoveredDevice(0);
    sub_1000D537C(v27 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v23, (uint64_t)v11 + *(int *)(v41 + 48));
    *v11 = v29;
    v11[1] = v30;
    sub_1001231CC((uint64_t)v11, (uint64_t)v13);
    sub_1001231CC((uint64_t)v13, a2);
    if (v21 == v39)
    {
      swift_bridgeObjectRetain(v30);
LABEL_37:
      v17 = v35;
      a1 = v36;
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v40 + 72);
    swift_bridgeObjectRetain(v30);
    if (v19)
      goto LABEL_8;
LABEL_9:
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v24 >= v37)
      goto LABEL_33;
    v25 = *(_QWORD *)(v38 + 8 * v24);
    if (!v25)
    {
      v20 += 2;
      if (v24 + 1 >= v37)
      {
        v19 = 0;
        v20 = v24;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v38 + 8 * v20);
      if (v25)
        goto LABEL_14;
      v26 = v24 + 2;
      if (v24 + 2 >= v37)
        goto LABEL_33;
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        v20 = v24 + 3;
        if (v24 + 3 >= v37)
        {
          v19 = 0;
          v20 = v24 + 2;
          goto LABEL_37;
        }
        v25 = *(_QWORD *)(v38 + 8 * v20);
        if (v25)
        {
LABEL_14:
          v24 = v20;
          goto LABEL_18;
        }
        v26 = v24 + 4;
        if (v24 + 4 >= v37)
        {
LABEL_33:
          v19 = 0;
          goto LABEL_37;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v24 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_41;
            if (v24 >= v37)
            {
              v19 = 0;
              v20 = v34;
              goto LABEL_37;
            }
            v25 = *(_QWORD *)(v38 + 8 * v24);
            ++v26;
            if (v25)
              goto LABEL_18;
          }
        }
      }
      v24 = v26;
    }
LABEL_18:
    v19 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v20 = v24;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t *sub_1001C14E0(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD v38[5];

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.makeIterator()(v8);
    type metadata accessor for IOHIDDevice(0);
    v11 = v10;
    v12 = sub_100090E1C(&qword_10026BF38, (uint64_t (*)(uint64_t))type metadata accessor for IOHIDDevice, (uint64_t)&unk_1001DDA30);
    result = Set.Iterator.init(_cocoa:)(v38, v9, v11, v12);
    v4 = v38[0];
    v13 = v38[1];
    v14 = v38[2];
    v15 = v38[3];
    v16 = v38[4];
    v34 = v7;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v17 = 0;
LABEL_49:
    *v34 = v4;
    v34[1] = v13;
    v34[2] = v14;
    v34[3] = v15;
    v34[4] = v16;
    return (uint64_t *)v17;
  }
  v15 = 0;
  v30 = -1 << *(_BYTE *)(a4 + 32);
  v13 = a4 + 56;
  v14 = ~v30;
  v31 = -v30;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v16 = v32 & *(_QWORD *)(a4 + 56);
  v34 = result;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v17 = 0;
    goto LABEL_49;
  }
  if (a3 < 0)
    goto LABEL_51;
  v17 = 0;
  v35 = (unint64_t)(v14 + 64) >> 6;
  v33 = v14;
  while (1)
  {
    if (v4 < 0)
    {
      v24 = v13;
      v25 = __CocoaSet.Iterator.next()(result);
      if (!v25)
        goto LABEL_48;
      v26 = v25;
      v36 = v25;
      type metadata accessor for IOHIDDevice(0);
      v28 = v27;
      swift_unknownObjectRetain(v26);
      swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
      v20 = v37;
      result = (uint64_t *)swift_unknownObjectRelease(v26);
      v13 = v24;
      if (!v20)
        goto LABEL_48;
      goto LABEL_11;
    }
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_10;
    }
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v21 >= v35)
    {
      v16 = 0;
      goto LABEL_48;
    }
    v22 = *(_QWORD *)(v13 + 8 * v21);
    if (v22)
      goto LABEL_26;
    v23 = v15 + 2;
    if (v15 + 2 >= v35)
    {
      v16 = 0;
      ++v15;
      goto LABEL_48;
    }
    v22 = *(_QWORD *)(v13 + 8 * v23);
    if (!v22)
    {
      if (v15 + 3 >= v35)
        goto LABEL_45;
      v22 = *(_QWORD *)(v13 + 8 * (v15 + 3));
      if (v22)
      {
        v21 = v15 + 3;
        goto LABEL_26;
      }
      v23 = v15 + 4;
      if (v15 + 4 >= v35)
      {
        v16 = 0;
        v15 += 3;
        goto LABEL_48;
      }
      v22 = *(_QWORD *)(v13 + 8 * v23);
      if (!v22)
      {
        v21 = v15 + 5;
        if (v15 + 5 >= v35)
        {
LABEL_45:
          v16 = 0;
          v15 = v23;
          goto LABEL_48;
        }
        v22 = *(_QWORD *)(v13 + 8 * v21);
        if (!v22)
        {
          v29 = v15 + 6;
          while (v35 != v29)
          {
            v22 = *(_QWORD *)(v13 + 8 * v29++);
            if (v22)
            {
              v21 = v29 - 1;
              goto LABEL_26;
            }
          }
          v16 = 0;
          v15 = v35 - 1;
          goto LABEL_48;
        }
        goto LABEL_26;
      }
    }
    v21 = v23;
LABEL_26:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v21 << 6);
    v15 = v21;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v19);
    v20 = result;
    if (!result)
      goto LABEL_48;
LABEL_11:
    ++v17;
    *v6++ = v20;
    if (v17 == a3)
    {
      v17 = a3;
LABEL_48:
      v14 = v33;
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

_QWORD *sub_1001C17E0(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1001C19D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  void *v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  id v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10009061C(&qword_100271450);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  result = sub_1001452C8(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v16 = v5;
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_DWORD *)v8 - 2);
    v13 = (void *)*v8;
    v14 = v5;
    result = sub_1001452C8(v4);
    v8 = v12;
    v5 = v13;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001C1AD0(uint64_t a1)
{
  return sub_1001C1DF8(a1, &qword_100271478);
}

unint64_t sub_1001C1ADC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009061C(&qword_100271550);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_DWORD *)i - 2);
      v6 = *i;
      result = sub_1001452C8(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1001C1BB0(uint64_t a1)
{
  return sub_1001C1DF8(a1, &qword_100271578);
}

unint64_t sub_1001C1BBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10009061C(&qword_100271570);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_DWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_1001452C8(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_DWORD *)v9 - 4);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v5);
    result = sub_1001452C8(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001C1CC8(uint64_t a1)
{
  return sub_1001C1CE0(a1, &qword_100271590);
}

unint64_t sub_1001C1CD4(uint64_t a1)
{
  return sub_1001C1CE0(a1, &qword_100271588);
}

unint64_t sub_1001C1CE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  id v21;
  id v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10009061C(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v5 = *(_DWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  result = sub_1001452C8(v5);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v21 = v7;
    v22 = v6;
    return (unint64_t)v4;
  }
  v10 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v4[6] + 4 * result) = v5;
    v11 = (_QWORD *)(v4[7] + 16 * result);
    *v11 = v7;
    v11[1] = v6;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v4[2] = v14;
    if (!--v2)
      goto LABEL_8;
    v15 = v10 + 3;
    v5 = *((_DWORD *)v10 - 4);
    v16 = (void *)*(v10 - 1);
    v17 = (void *)*v10;
    v18 = v7;
    v19 = v6;
    result = sub_1001452C8(v5);
    v10 = v15;
    v6 = v17;
    v7 = v16;
    if ((v20 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001C1DEC(uint64_t a1)
{
  return sub_1001C1DF8(a1, &qword_100271538);
}

unint64_t sub_1001C1DF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10009061C(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  result = sub_1001452C8(v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v4;
  }
  v9 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v4[6] + 4 * result) = v5;
    *(_QWORD *)(v4[7] + 8 * result) = v6;
    v10 = v4[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v4[2] = v12;
    if (!--v2)
      goto LABEL_8;
    v13 = v9 + 2;
    v5 = *((_DWORD *)v9 - 2);
    v14 = *v9;
    swift_bridgeObjectRetain(v6);
    result = sub_1001452C8(v5);
    v9 = v13;
    v6 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001C1EF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10009061C(&qword_1002715E8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  result = sub_1001452C8(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  v9 = (uint64_t *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    sub_1000BC8F4(v5, v6);
    if (!--v1)
      return (unint64_t)v3;
    v4 = *((_DWORD *)v9 - 4);
    v5 = *(v9 - 1);
    v6 = *v9;
    result = sub_1001452C8(v4);
    v9 += 3;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C1FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  swift_bridgeObjectRetain(a3);
  v6 = sub_100145264(a2, a3);
  if ((v7 & 1) == 0)
  {
    v18 = a3;
LABEL_13:
    swift_bridgeObjectRelease(v18);
    return 0;
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain(v9);
  result = swift_bridgeObjectRelease(a3);
  v12 = HIBYTE(v9) & 0xF;
  v13 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v9) & 0xF;
  else
    v14 = v10 & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    v18 = v9;
    goto LABEL_13;
  }
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
    {
      if ((v10 & 0x1000000000000000) != 0)
        v15 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v15 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v9);
      v16 = (uint64_t)sub_1001B3354(v15, v13, 10);
      LOBYTE(v10) = v17 & 1;
      goto LABEL_49;
    }
    v32[0] = v10;
    v32[1] = v9 & 0xFFFFFFFFFFFFFFLL;
    if (v10 == 43)
    {
      if (!v12)
        goto LABEL_62;
      if (v12 == 1 || (BYTE1(v10) - 48) > 9u)
        goto LABEL_36;
      v16 = (BYTE1(v10) - 48);
      if (v12 != 2)
      {
        if ((BYTE2(v10) - 48) > 9u)
          goto LABEL_36;
        v16 = 10 * (BYTE1(v10) - 48) + (BYTE2(v10) - 48);
        v19 = v12 - 3;
        if (v19)
        {
          v20 = (unsigned __int8 *)v32 + 3;
          while (1)
          {
            v21 = *v20 - 48;
            if (v21 > 9)
              goto LABEL_36;
            v22 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
              goto LABEL_36;
            v16 = v22 + v21;
            if (__OFADD__(v22, v21))
              goto LABEL_36;
            LOBYTE(v10) = 0;
            ++v20;
            if (!--v19)
              goto LABEL_49;
          }
        }
      }
    }
    else
    {
      if (v10 == 45)
      {
        if (v12)
        {
          if (v12 != 1 && (BYTE1(v10) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              LOBYTE(v10) = 0;
              v16 = -(uint64_t)(BYTE1(v10) - 48);
              goto LABEL_49;
            }
            if ((BYTE2(v10) - 48) <= 9u)
            {
              v16 = -10 * (BYTE1(v10) - 48) - (BYTE2(v10) - 48);
              v27 = v12 - 3;
              if (!v27)
                goto LABEL_48;
              v28 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                v29 = *v28 - 48;
                if (v29 > 9)
                  break;
                v30 = 10 * v16;
                if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
                  break;
                v16 = v30 - v29;
                if (__OFSUB__(v30, v29))
                  break;
                LOBYTE(v10) = 0;
                ++v28;
                if (!--v27)
                  goto LABEL_49;
              }
            }
          }
LABEL_36:
          v16 = 0;
          LOBYTE(v10) = 1;
          goto LABEL_49;
        }
        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }
      if (!v12 || (v10 - 48) > 9u)
        goto LABEL_36;
      v16 = (v10 - 48);
      if (v12 != 1)
      {
        if ((BYTE1(v10) - 48) > 9u)
          goto LABEL_36;
        v16 = 10 * (v10 - 48) + (BYTE1(v10) - 48);
        v23 = v12 - 2;
        if (v23)
        {
          v24 = (unsigned __int8 *)v32 + 2;
          while (1)
          {
            v25 = *v24 - 48;
            if (v25 > 9)
              goto LABEL_36;
            v26 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
              goto LABEL_36;
            v16 = v26 + v25;
            if (__OFADD__(v26, v25))
              goto LABEL_36;
            LOBYTE(v10) = 0;
            ++v24;
            if (!--v23)
              goto LABEL_49;
          }
        }
      }
    }
LABEL_48:
    LOBYTE(v10) = 0;
    goto LABEL_49;
  }
  v16 = (uint64_t)sub_1001B3270(v10, v9, 10);
  LOBYTE(v10) = v31;
LABEL_49:
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0)
    return 0;
  else
    return v16;
}

uint64_t sub_1001C2314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v15;
  _QWORD v16[4];
  _QWORD v17[3];
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  swift_bridgeObjectRetain(a3);
  v6 = sub_100145264(a2, a3);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain(v9);
  v11 = swift_bridgeObjectRelease(a3);
  v18 = 0;
  __chkstk_darwin(v11);
  v16[2] = &v18;
  if ((v9 & 0x1000000000000000) != 0 || !(v9 & 0x2000000000000000 | v10 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(v17, sub_1001C575C, v16, v10, v9, &type metadata for Bool);
    swift_bridgeObjectRelease(v9);
    v13 = LOBYTE(v17[0]);
  }
  else if ((v9 & 0x2000000000000000) != 0)
  {
    v17[0] = v10;
    v17[1] = v9 & 0xFFFFFFFFFFFFFFLL;
    v13 = (v10 > 0x20u || ((0x100003E01uLL >> v10) & 1) == 0)
       && (v15 = (_BYTE *)_swift_stdlib_strtod_clocale(v17, &v18)) != 0
       && *v15 == 0;
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    if ((v10 & 0x1000000000000000) != 0)
      v12 = (_BYTE *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (_BYTE *)_StringObject.sharedUTF8.getter(v10, v9);
    sub_1001C575C(v12, (BOOL *)v17);
    v13 = LOBYTE(v17[0]);
    swift_bridgeObjectRelease(v9);
  }
  if (v13)
    return v18;
  else
    return 0;
}

unint64_t sub_1001C24C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[4];
  uint64_t v41;
  int64_t v42;
  uint64_t i;
  _QWORD v44[3];
  BOOL v45;
  uint64_t v46;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 64);
    v41 = a1 + 64;
    v2 = 1 << *(_BYTE *)(a1 + 32);
    v3 = -1;
    if (v2 < 64)
      v3 = ~(-1 << v2);
    v4 = v3 & v1;
    v42 = (unint64_t)(v2 + 63) >> 6;
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    v7 = &_swiftEmptyDictionarySingleton;
    for (i = v5; ; v5 = i)
    {
      if (v4)
      {
        v9 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        v10 = v9 | (v6 << 6);
      }
      else
      {
        v11 = __OFADD__(v6++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_57;
        }
        if (v6 >= v42)
          goto LABEL_54;
        v12 = *(_QWORD *)(v41 + 8 * v6);
        if (!v12)
        {
          v13 = v6 + 1;
          if (v6 + 1 >= v42)
            goto LABEL_54;
          v12 = *(_QWORD *)(v41 + 8 * v13);
          if (!v12)
          {
            v13 = v6 + 2;
            if (v6 + 2 >= v42)
              goto LABEL_54;
            v12 = *(_QWORD *)(v41 + 8 * v13);
            if (!v12)
            {
              v13 = v6 + 3;
              if (v6 + 3 >= v42)
              {
LABEL_54:
                swift_release(v5);
                return (unint64_t)v7;
              }
              v12 = *(_QWORD *)(v41 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v6 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    break;
                  if (v6 >= v42)
                    goto LABEL_54;
                  v12 = *(_QWORD *)(v41 + 8 * v6);
                  ++v13;
                  if (v12)
                    goto LABEL_20;
                }
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                __break(1u);
                JUMPOUT(0x1001C2968);
              }
            }
          }
          v6 = v13;
        }
LABEL_20:
        v4 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v6 << 6);
      }
      v14 = 16 * v10;
      v15 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v14);
      v17 = *v15;
      v16 = v15[1];
      v18 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v14);
      v20 = *v18;
      v19 = v18[1];
      v46 = 0;
      __chkstk_darwin(v5);
      v40[2] = &v46;
      if ((v19 & 0x1000000000000000) != 0)
        goto LABEL_51;
      if ((v19 & 0x2000000000000000) == 0)
        break;
      v44[0] = v20;
      v44[1] = v19 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v20)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
LABEL_28:
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v19);
          goto LABEL_29;
        default:
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v19);
          v21 = (_BYTE *)_swift_stdlib_strtod_clocale(v44, &v46);
          if (v21)
LABEL_38:
            v45 = *v21 == 0;
          else
LABEL_29:
            v45 = 0;
          break;
      }
LABEL_30:
      swift_bridgeObjectRelease(v19);
      if (v45)
      {
        v25 = v46;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        v44[0] = v7;
        v28 = sub_100145264(v17, v16);
        v29 = v7[2];
        v30 = (v27 & 1) == 0;
        v31 = v29 + v30;
        if (__OFADD__(v29, v30))
          goto LABEL_58;
        v32 = v27;
        if (v7[3] < v31)
        {
          sub_1001B5FD0(v31, isUniquelyReferenced_nonNull_native);
          v33 = sub_100145264(v17, v16);
          if ((v32 & 1) != (v34 & 1))
            goto LABEL_60;
          v28 = v33;
          v7 = (_QWORD *)v44[0];
          if ((v32 & 1) == 0)
            goto LABEL_49;
LABEL_5:
          *(_QWORD *)(v7[7] + 8 * v28) = v25;
LABEL_6:
          swift_bridgeObjectRelease(v16);
          v8 = 0x8000000000000000;
          goto LABEL_7;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v7 = (_QWORD *)v44[0];
          if ((v27 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_1001BD69C();
          v7 = (_QWORD *)v44[0];
          if ((v32 & 1) != 0)
            goto LABEL_5;
        }
LABEL_49:
        v7[(v28 >> 6) + 8] |= 1 << v28;
        v36 = (uint64_t *)(v7[6] + 16 * v28);
        *v36 = v17;
        v36[1] = v16;
        *(_QWORD *)(v7[7] + 8 * v28) = v25;
        v37 = v7[2];
        v11 = __OFADD__(v37, 1);
        v38 = v37 + 1;
        if (v11)
          goto LABEL_59;
        v7[2] = v38;
        swift_bridgeObjectRetain(v16);
        goto LABEL_6;
      }
      swift_bridgeObjectRetain(v7);
      v22 = sub_100145264(v17, v16);
      v24 = v23;
      swift_bridgeObjectRelease(v7);
      if ((v24 & 1) != 0)
      {
        v35 = swift_isUniquelyReferenced_nonNull_native(v7);
        v44[0] = v7;
        if ((v35 & 1) == 0)
        {
          sub_1001BD69C();
          v7 = (_QWORD *)v44[0];
        }
        swift_bridgeObjectRelease(*(_QWORD *)(v7[6] + 16 * v22 + 8));
        sub_1001B9C98(v22, (uint64_t)v7);
        goto LABEL_6;
      }
      v8 = v16;
LABEL_7:
      swift_bridgeObjectRelease(v8);
    }
    if ((v20 & 0x1000000000000000) != 0)
    {
      switch(*(_BYTE *)(v19 + 32))
      {
        case 0:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x20:
          goto LABEL_28;
        default:
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v19);
          v21 = (_BYTE *)_swift_stdlib_strtod_clocale(v19 + 32, &v46);
          if (!v21)
            goto LABEL_29;
          goto LABEL_38;
      }
    }
LABEL_51:
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    _StringGuts._slowWithCString<A>(_:)(&v45, sub_1001C575C, v40, v20, v19, &type metadata for Bool);
    goto LABEL_30;
  }
  return sub_1001B0DAC((uint64_t)_swiftEmptyArrayStorage);
}

_QWORD *sub_1001C2A70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  _BYTE *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  Swift::String v39;
  char v41;
  unint64_t v42;
  uint64_t v43;
  Swift::String v44;
  char v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  BOOL v54;
  Swift::String v55;
  char v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  Swift::String v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[16];
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;

  result = _swiftEmptyArrayStorage;
  v75 = (unint64_t)_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    v4 = 0;
    v67 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8 * v4 + 32);
      if (*(_QWORD *)(v6 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8 * v4 + 32));
        v7 = sub_100145264(0x6C65646F6DLL, 0xE500000000000000);
        if ((v8 & 1) != 0 && *(_QWORD *)(v6 + 16))
        {
          v9 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v7);
          v11 = *v9;
          v10 = v9[1];
          swift_bridgeObjectRetain(v10);
          v12 = sub_100145264(0x6172656D6163, 0xE600000000000000);
          if ((v13 & 1) != 0)
          {
            v14 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v12);
            v15 = v14[1];
            v70 = *v14;
            v16 = *(_QWORD *)(v6 + 16);
            swift_bridgeObjectRetain(v15);
            v68 = v11;
            v69 = v10;
            if (!v16)
            {
              v24 = 0;
              v25 = 1;
              goto LABEL_42;
            }
            v17 = sub_100145264(0x7265776F6CLL, 0xE500000000000000);
            if ((v18 & 1) == 0)
              goto LABEL_31;
            v19 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v17);
            v21 = *v19;
            v20 = v19[1];
            v74 = 0;
            __chkstk_darwin(v17);
            v66 = &v74;
            if ((v20 & 0x1000000000000000) != 0 || !(v20 & 0x2000000000000000 | v21 & 0x1000000000000000))
            {
              swift_bridgeObjectRetain(v20);
              v63 = v67;
              _StringGuts._slowWithCString<A>(_:)(&v73, sub_1001C575C, v65, v21, v20, &type metadata for Bool);
              v67 = v63;
              goto LABEL_21;
            }
            if ((v20 & 0x2000000000000000) != 0)
            {
              v71 = v21;
              v72 = v20 & 0xFFFFFFFFFFFFFFLL;
              switch((char)v21)
              {
                case 0:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 32:
                  swift_bridgeObjectRetain(v20);
                  goto LABEL_26;
                default:
                  swift_bridgeObjectRetain(v20);
                  v60 = (_BYTE *)_swift_stdlib_strtod_clocale(&v71, &v74);
                  if (v60)
                    v26 = *v60 == 0;
                  else
LABEL_26:
                    v26 = 0;
                  v73 = v26;
                  swift_bridgeObjectRelease(v20);
                  break;
              }
            }
            else
            {
              v22 = (_BYTE *)((v21 & 0x1000000000000000) != 0
                            ? (v20 & 0xFFFFFFFFFFFFFFFLL) + 32
                            : _StringObject.sharedUTF8.getter(v21, v20));
              switch(*v22)
              {
                case 0:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0x20:
                  swift_bridgeObjectRetain(v20);
                  goto LABEL_19;
                default:
                  swift_bridgeObjectRetain(v20);
                  v59 = (_BYTE *)_swift_stdlib_strtod_clocale(v22, &v74);
                  if (v59)
                    v23 = *v59 == 0;
                  else
LABEL_19:
                    v23 = 0;
                  v73 = v23;
                  break;
              }
LABEL_21:
              swift_bridgeObjectRelease(v20);
            }
            if (v73)
            {
              v25 = 0;
              v24 = v74 ^ 0x8000000000000000;
              if (!*(_QWORD *)(v6 + 16))
              {
LABEL_42:
                swift_bridgeObjectRelease(v6);
                goto LABEL_43;
              }
            }
            else
            {
LABEL_31:
              v24 = 0;
              v25 = 1;
              if (!*(_QWORD *)(v6 + 16))
                goto LABEL_42;
            }
            v27 = sub_100145264(0x7265707075, 0xE500000000000000);
            if ((v28 & 1) == 0)
              goto LABEL_42;
            v29 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v27);
            v31 = *v29;
            v30 = v29[1];
            swift_bridgeObjectRetain(v30);
            v32 = swift_bridgeObjectRelease(v6);
            v74 = 0;
            __chkstk_darwin(v32);
            v66 = &v74;
            if ((v30 & 0x1000000000000000) != 0 || !(v30 & 0x2000000000000000 | v31 & 0x1000000000000000))
            {
              v64 = v67;
              _StringGuts._slowWithCString<A>(_:)(&v73, sub_1001C575C, v65, v31, v30, &type metadata for Bool);
              v67 = v64;
              goto LABEL_76;
            }
            if ((v30 & 0x2000000000000000) != 0)
            {
              v71 = v31;
              v72 = v30 & 0xFFFFFFFFFFFFFFLL;
              v54 = (v31 > 0x20u || ((0x100003E01uLL >> v31) & 1) == 0)
                 && (v53 = (_BYTE *)_swift_stdlib_strtod_clocale(&v71, &v74)) != 0
                 && *v53 == 0;
              v73 = v54;
              swift_bridgeObjectRelease(v30);
            }
            else
            {
              if ((v31 & 0x1000000000000000) != 0)
                v33 = (unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
              else
                v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v31, v30);
              v34 = *v33;
              v36 = (v34 >= 0x21 || ((0x100003E01uLL >> v34) & 1) == 0)
                 && (v35 = (_BYTE *)_swift_stdlib_strtod_clocale(v33, &v74)) != 0
                 && *v35 == 0;
              v73 = v36;
LABEL_76:
              swift_bridgeObjectRelease(v30);
            }
            if (v73)
            {
              v38 = 0;
              v37 = v74 ^ 0x8000000000000000;
            }
            else
            {
LABEL_43:
              v37 = 0;
              v38 = 1;
            }
            v39 = String.lowercased()();
            if (v39._countAndFlagsBits == 0x746E6F7266 && v39._object == (void *)0xE500000000000000)
            {
              swift_bridgeObjectRelease(v15);
              v42 = 0xE500000000000000;
LABEL_51:
              swift_bridgeObjectRelease(v42);
              v43 = 0;
            }
            else
            {
              v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v39._countAndFlagsBits, v39._object, 0x746E6F7266, 0xE500000000000000, 0);
              swift_bridgeObjectRelease(v39._object);
              if ((v41 & 1) != 0)
              {
                v42 = v15;
                goto LABEL_51;
              }
              v44 = String.lowercased()();
              if (v44._countAndFlagsBits == 0x656469776B636162 && v44._object == (void *)0xE800000000000000)
              {
                swift_bridgeObjectRelease(v15);
                v47 = 0xE800000000000000;
LABEL_59:
                swift_bridgeObjectRelease(v47);
                goto LABEL_60;
              }
              v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v44._countAndFlagsBits, v44._object, 0x656469776B636162, 0xE800000000000000, 0);
              swift_bridgeObjectRelease(v44._object);
              if ((v46 & 1) != 0)
              {
                v47 = v15;
                goto LABEL_59;
              }
              v55 = String.lowercased()();
              if (v55._countAndFlagsBits == 0x657075736B636162 && v55._object == (void *)0xED00006564697772)
              {
                swift_bridgeObjectRelease(v15);
                v58 = 0xED00006564697772;
LABEL_82:
                swift_bridgeObjectRelease(v58);
                v43 = 2;
              }
              else
              {
                v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v55._countAndFlagsBits, v55._object, 0x657075736B636162, 0xED00006564697772, 0);
                swift_bridgeObjectRelease(v55._object);
                if ((v57 & 1) != 0)
                {
                  v58 = v15;
                  goto LABEL_82;
                }
                v61 = String.lowercased()();
                swift_bridgeObjectRelease(v15);
                if (v61._countAndFlagsBits == 0x656C65746B636162 && v61._object == (void *)0xED00006F746F6870)
                {
                  swift_bridgeObjectRelease(0xED00006F746F6870);
                  goto LABEL_91;
                }
                v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v61._countAndFlagsBits, v61._object, 0x656C65746B636162, 0xED00006F746F6870, 0);
                swift_bridgeObjectRelease(v61._object);
                if ((v62 & 1) != 0)
                {
LABEL_91:
                  v43 = 3;
                  goto LABEL_61;
                }
LABEL_60:
                v43 = 1;
              }
            }
LABEL_61:
            v48 = objc_allocWithZone((Class)type metadata accessor for CameraLimit(0));
            v49 = CameraLimit.init(model:camera:minPosition:maxPosition:)(v68, v69, v43, v37, v38, v24, v25);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
            v51 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v50 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v51 >= v50 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
            v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
            specialized Array._endMutation()(v52);
            goto LABEL_5;
          }
          swift_bridgeObjectRelease(v6);
          v5 = v10;
        }
        else
        {
          v5 = v6;
        }
        swift_bridgeObjectRelease(v5);
      }
LABEL_5:
      if (v3 == ++v4)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v75;
      }
    }
  }
  return result;
}

uint64_t sub_1001C31C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];

  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error))
    return result;
  v6 = result;
  v7 = (_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes, v20, 0, 0);
  v8 = *v7;
  if (!*(_QWORD *)(*v7 + 16))
  {
LABEL_10:
    v14 = sub_10009061C(&qword_10026D890);
    v15 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v15 + 32) = a3;
    swift_beginAccess(v7, v19, 33, 0);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v18 = *v7;
    *v7 = 0x8000000000000000;
    sub_1001BAF24(v15, v6, a2, isUniquelyReferenced_nonNull_native, &qword_100271428);
    v17 = *v7;
    *v7 = v18;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v17);
    return swift_endAccess(v19);
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v8);
  v9 = sub_100145264(v6, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
    goto LABEL_10;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    v11 = sub_1000EA36C(0, v11[2] + 1, 1, v11);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = sub_1000EA36C((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  v11[v13 + 4] = a3;
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_1001C33B8(uint64_t a1)
{
  char v1;
  Swift::String v2;
  void *object;
  void *v7;
  void *v9;
  char v10;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  sub_100145264(1701869940, 0xE400000000000000);
  if ((v1 & 1) == 0)
    return 0;
  v2 = String.lowercased()();
  if (v2._countAndFlagsBits == 0x6574756C6F766572 && v2._object == (void *)0xE800000000000000)
  {
    object = (void *)0xE800000000000000;
    goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x6574756C6F766572, 0xE800000000000000, 0) & 1) != 0)
  {
    object = v2._object;
LABEL_11:
    swift_bridgeObjectRelease(object);
    return 0;
  }
  if (v2._countAndFlagsBits == 0x756F6E69746E6F63 && v2._object == (void *)0xE900000000000073)
  {
    v7 = (void *)0xE900000000000073;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x756F6E69746E6F63, 0xE900000000000073, 0) & 1) != 0)goto LABEL_17;
  if (v2._countAndFlagsBits == 0x6F756E69746E6F63 && v2._object == (void *)0xEA00000000007375)
  {
    v7 = (void *)0xEA00000000007375;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x6F756E69746E6F63, 0xEA00000000007375, 0) & 1) != 0)
  {
LABEL_17:
    v7 = v2._object;
LABEL_19:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (v2._countAndFlagsBits == 0x6974616D73697270 && v2._object == (void *)0xE900000000000063)
  {
    v9 = (void *)0xE900000000000063;
LABEL_31:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x6974616D73697270, 0xE900000000000063, 0) & 1) != 0)
  {
    v9 = v2._object;
    goto LABEL_31;
  }
  if (v2._countAndFlagsBits == 0x676E6974616F6C66 && v2._object == (void *)0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x676E6974616F6C66, 0xE800000000000000, 0);
    swift_bridgeObjectRelease(v2._object);
    if ((v10 & 1) != 0)
      return 3;
    else
      return 0;
  }
}

uint64_t sub_1001C3628(uint64_t a1)
{
  char v1;
  Swift::String v2;
  void *object;
  void *v7;
  char v9;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  sub_100145264(0x6C65646F6DLL, 0xE500000000000000);
  if ((v1 & 1) == 0)
    return 0;
  v2 = String.lowercased()();
  if (v2._countAndFlagsBits == 7499897 && v2._object == (void *)0xE300000000000000)
  {
    object = (void *)0xE300000000000000;
    goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 7499897, 0xE300000000000000, 0) & 1) != 0)
  {
    object = v2._object;
LABEL_11:
    swift_bridgeObjectRelease(object);
    return 0;
  }
  if (v2._countAndFlagsBits == 0x6E65726566666964 && v2._object == (void *)0xEC0000006C616974)
  {
    v7 = (void *)0xEC0000006C616974;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x6E65726566666964, 0xEC0000006C616974, 0) & 1) != 0)
  {
    v7 = v2._object;
LABEL_19:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (v2._countAndFlagsBits == 0x6D6F74737563 && v2._object == (void *)0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2._countAndFlagsBits, v2._object, 0x6D6F74737563, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(v2._object);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 0;
  }
}

void sub_1001C37C8(void *a1, objc_class *a2, uint64_t *object)
{
  unint64_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t *v9;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  char v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  Swift::String_optional v41;
  uint64_t countAndFlagsBits;
  Swift::String v43;
  Swift::String_optional v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  id v88;
  __n128 v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t **v93;
  char v94;
  uint64_t v95;
  unint64_t *v96;
  void (*v97)(_QWORD, _QWORD, _QWORD);
  uint64_t v98;
  id v99;
  void *v100;
  unint64_t v101;
  id v102;
  uint64_t v103;
  _QWORD *v104;
  id v105;
  void *v106;
  _QWORD *v107;
  id v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  char v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  id v134;
  void *v135;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  id v149;
  void *v150;
  char v151;
  uint64_t *v152;
  unint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  id v160;
  __n128 v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  uint64_t **v165;
  objc_class *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  id v170;
  __n128 v171;
  char v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  char v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  char v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  const char *v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t *v204;
  unint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  double v224;
  uint64_t v225;
  char v226;
  double v227;
  uint64_t v228;
  char v229;
  double v230;
  char v231;
  char v232;
  char v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  double v241;
  uint64_t v242;
  char v243;
  double v244;
  uint64_t v245;
  char v246;
  char v247;
  double v248;
  double v249;
  double v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  id v256;
  uint64_t v257;
  void *v258;
  id v259;
  char v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  double v274;
  double v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  void *v279;
  uint64_t v280;
  char v281;
  double v282;
  unint64_t *v283;
  uint64_t *v284;
  objc_class *v285;
  uint64_t v286;
  uint64_t v287;
  id v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  _BYTE v296[24];
  char v297[32];

  v9 = v3;
  v13 = (unint64_t *)type metadata accessor for UUID(0);
  v14 = *(v13 - 1);
  __chkstk_darwin(v13);
  v16 = (char *)&v282 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v282 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(unint64_t *)((char *)v9 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error))
  {
    v286 = (uint64_t)v16;
    v287 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error;
    v288 = a1;
    v21 = (uint64_t **)((char *)v9 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
    swift_beginAccess((char *)v9 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes, &v297, 0, 0);
    v22 = *v21;
    if ((*v21)[2])
    {
      swift_bridgeObjectRetain(object);
      swift_bridgeObjectRetain(v22);
      v23 = sub_100145264((uint64_t)a2, (uint64_t)object);
      if ((v24 & 1) != 0)
      {
        v285 = a2;
        v25 = *(double **)(v22[7] + 8 * v23);
        swift_bridgeObjectRetain(v25);
        v284 = object;
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v22);
        if (*((_QWORD *)v25 + 2))
        {
          v283 = v9;
          v282 = v25[4];
          swift_bridgeObjectRetain(*(_QWORD *)&v282);
          swift_bridgeObjectRelease(v25);
          a2 = v285;
          v26 = (uint64_t)v284;
          if (v285 == (objc_class *)0x735F6172656D6163 && v284 == (uint64_t *)0xEC000000646E6174
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, 0x735F6172656D6163, 0xEC000000646E6174, 0) & 1) != 0)
          {
            v9 = v283;
            v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, (uint64_t)v283 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_logger, v17);
            v28 = Logger.logObject.getter(v27);
            v29 = static os_log_type_t.default.getter(v28);
            if (os_log_type_enabled(v28, v29))
            {
              v30 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v30 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "camera_stand", v30, 2u);
              v31 = v30;
              v9 = v283;
              swift_slowDealloc(v31, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
            v32 = *(_QWORD *)&v282;
            if (*(_QWORD *)(*(_QWORD *)&v282 + 16))
            {
              v33 = sub_100145264(0x74636166756E616DLL, 0xEC00000072657275);
              if ((v34 & 1) != 0)
              {
                v35 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v33);
                v37 = *v35;
                v36 = v35[1];
                swift_bridgeObjectRetain(v36);
                swift_bridgeObjectRelease(v32);
                v38 = v9;
                v9 = (unint64_t *)((char *)v9
                                        + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
                swift_beginAccess(v9, v296, 1, 0);
                if (*(_QWORD *)(*v9 + 16))
                {
                  v39 = 0xE000000000000000;
                  v294 = 0;
                  v295 = 0xE000000000000000;
                  v40 = HIBYTE(v36) & 0xF;
                  if ((v36 & 0x2000000000000000) == 0)
                    v40 = v37 & 0xFFFFFFFFFFFFLL;
                  v289 = v37;
                  v290 = v36;
                  v291 = 0;
                  v292 = v40;
                  v22 = &v289;
                  v41 = String.Iterator.next()();
                  if (v41.value._object)
                  {
                    countAndFlagsBits = v41.value._countAndFlagsBits;
                    object = (uint64_t *)v41.value._object;
                    while (1)
                    {
                      if ((Character.isLetter.getter(countAndFlagsBits, object) & 1) != 0
                        || (Character.isNumber.getter(countAndFlagsBits, object) & 1) != 0)
                      {
                        if ((countAndFlagsBits != 2573 || object != (uint64_t *)0xE200000000000000)
                          && (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 2573, 0xE200000000000000, 0) & 1) == 0)
                        {
                          if ((Character._isSingleScalar.getter(countAndFlagsBits, object) & 1) == 0)
                            goto LABEL_18;
                          v45 = sub_1001C01D4(countAndFlagsBits, (unint64_t)object);
                          if ((v45 & 0x100000000) != 0)
                            goto LABEL_186;
                          if ((v45 & 0xFFFFFF80) != 0)
                            goto LABEL_18;
                          v47 = sub_1001C01D4(countAndFlagsBits, (unint64_t)object);
                          if ((v47 & 0x100000000) != 0)
                            goto LABEL_187;
                          if ((v47 & 0xFFFFFF00) != 0)
                          {
                            __break(1u);
                            goto LABEL_30;
                          }
                        }
                        v43._countAndFlagsBits = countAndFlagsBits;
                        v43._object = object;
                        String.append(_:)(v43);
                      }
LABEL_18:
                      swift_bridgeObjectRelease(object);
                      v22 = &v289;
                      v44 = String.Iterator.next()();
                      countAndFlagsBits = v44.value._countAndFlagsBits;
                      object = (uint64_t *)v44.value._object;
                      if (!v44.value._object)
                      {
                        v80 = v294;
                        v39 = v295;
                        goto LABEL_61;
                      }
                    }
                  }
                  v80 = 0;
LABEL_61:
                  swift_bridgeObjectRelease(v290);
                  v96 = v283;
                  v97 = *(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16);
                  v98 = v286;
                  v97(v286, (char *)v283 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_identifier, v13);
                  v99 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo(0));
                  v100 = (void *)DockCoreInfo.init(type:name:identifier:)(1, v80, v39, v98);
                  v101 = *v9;
                  v102 = v100;
                  swift_bridgeObjectRetain(v101);
                  v104 = sub_1001C00EC(v103);
                  swift_bridgeObjectRelease(v101);
                  v105 = objc_allocWithZone((Class)type metadata accessor for TrackingStand(0));
                  v106 = (void *)TrackingStand.init(info:systems:)(v102, v104);
                  v107 = (unint64_t *)((char *)v96
                                            + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories);
                  swift_beginAccess((char *)v96 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories, &v289, 33, 0);
                  v108 = v106;
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v108);
                  v110 = *(_QWORD *)((*v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  v109 = *(_QWORD *)((*v107 & 0xFFFFFFFFFFFFFF8) + 0x18);
                  if (v110 >= v109 >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
                  v111 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110, v108);
                  specialized Array._endMutation()(v111);
                  swift_endAccess(&v289);
                  v112 = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, &qword_100271440);
                  v113 = *v9;
                  *v9 = v112;

                  goto LABEL_64;
                }
                swift_bridgeObjectRelease(v36);
                v81 = type metadata accessor for Errors(0);
                v82 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                v83 = swift_allocError(v81, v82, 0, 0);
                *v84 = 0xD00000000000001CLL;
                v84[1] = 0x8000000100203120;
                (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v84, enum case for Errors.ParseFailure(_:), v81);
                v58 = *(unint64_t *)((char *)v38 + v287);
                *(unint64_t *)((char *)v38 + v287) = v83;
                goto LABEL_35;
              }
            }
            swift_bridgeObjectRelease(v32);
            v59 = type metadata accessor for Errors(0);
            v60 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
            v51 = swift_allocError(v59, v60, 0, 0);
            *v61 = 0xD00000000000004FLL;
            v61[1] = 0x80000001002030D0;
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v61, enum case for Errors.ParseFailure(_:), v59);
            goto LABEL_34;
          }
          v62 = v283;
          if (a2 == (objc_class *)0xD000000000000011 && v26 == 0x8000000100202E10
            || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v26, 0xD000000000000011, 0x8000000100202E10, 0) & 1) != 0)
          {
            countAndFlagsBits = *(_QWORD *)&v282;
            v63 = sub_1001C3628(*(uint64_t *)&v282);
            if ((v64 & 1) != 0
              || !*(_QWORD *)(countAndFlagsBits + 16)
              || (v17 = v63, v65 = sub_100145264(1701667182, 0xE400000000000000), (v66 & 1) == 0))
            {
              swift_bridgeObjectRelease(countAndFlagsBits);
              v73 = type metadata accessor for Errors(0);
              v74 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
              v76 = swift_allocError(v73, v74, 0, 0);
              v77 = v75;
              v78 = 0xD000000000000041;
              v79 = "Invalid or missing attribute. Required attributes = [model, name]";
LABEL_93:
              *v75 = v78;
              v75[1] = (unint64_t)(v79 - 32) | 0x8000000000000000;
              (*(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v73 - 8) + 104))(v77, enum case for Errors.ParseFailure(_:), v73);
              v58 = *(unint64_t *)((char *)v62 + v287);
              *(unint64_t *)((char *)v62 + v287) = v76;
              goto LABEL_35;
            }
            v67 = (uint64_t *)(*(_QWORD *)(countAndFlagsBits + 56) + 16 * v65);
            v68 = *v67;
            v69 = v67[1];
            v70 = (unint64_t *)((char *)v62
                                     + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators);
            swift_beginAccess((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators, &v289, 1, 0);
            if (!*(_QWORD *)(*v70 + 16))
            {
              swift_bridgeObjectRelease(countAndFlagsBits);
              v73 = type metadata accessor for Errors(0);
              v123 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
              v76 = swift_allocError(v73, v123, 0, 0);
              v77 = v75;
              v78 = 0xD00000000000001ELL;
              v79 = "Invalid XML. Missing actuators";
              goto LABEL_93;
            }
            v21 = (uint64_t **)((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
            swift_beginAccess((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems, v296, 0, 0);
            v71 = *v21;
            if (!(*v21)[2])
            {
              swift_bridgeObjectRetain(v69);
              goto LABEL_87;
            }
            swift_bridgeObjectRetain(v26);
            swift_bridgeObjectRetain(v69);
            swift_bridgeObjectRetain(v71);
            sub_100145264((uint64_t)v285, v26);
            if ((v72 & 1) == 0)
            {
              swift_bridgeObjectRelease(v26);
              swift_bridgeObjectRelease(v71);
LABEL_87:
              v124 = sub_1001C1FF4(countAndFlagsBits, 25705, 0xE200000000000000);
              v126 = v125;
              swift_bridgeObjectRelease(countAndFlagsBits);
              if ((v126 & 1) == 0)
              {
                *(unint64_t *)((char *)v62
                                    + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v124;
LABEL_91:
                v130 = *(unint64_t *)((char *)v62
                                           + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
                v131 = *v70;
                swift_bridgeObjectRetain(v69);
                swift_bridgeObjectRetain(v131);
                v133 = sub_1001C00EC(v132);
                swift_bridgeObjectRelease(v131);
                v134 = objc_allocWithZone((Class)type metadata accessor for ActuationController(0));
                v135 = (void *)ActuationController.init(accessory:id:motionModel:name:actuators:)(0, v130, v17, v68, v69, v133);
                swift_beginAccess(v21, &v294, 33, 0);
                v108 = v135;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
                v293 = *v21;
                *v21 = (uint64_t *)0x8000000000000000;
                sub_1001BC11C((uint64_t)v108, v68, v69, isUniquelyReferenced_nonNull_native, &qword_100271440);
                v137 = *v21;
                *v21 = v293;
                swift_bridgeObjectRelease(v69);
                swift_bridgeObjectRelease(v137);
                swift_endAccess(&v294);
                v138 = &qword_100271430;
LABEL_100:
                v153 = sub_1001B2448((uint64_t)_swiftEmptyArrayStorage, v138);
                v113 = *v70;
                *v70 = v153;
LABEL_64:

                swift_bridgeObjectRelease(v113);
                return;
              }
              v127 = *(unint64_t *)((char *)v62
                                         + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId);
              v128 = __OFADD__(v127, 1);
              v129 = v127 + 1;
              if (!v128)
              {
                *(unint64_t *)((char *)v62
                                    + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v129;
                goto LABEL_91;
              }
              __break(1u);
              goto LABEL_181;
            }
LABEL_59:
            swift_bridgeObjectRelease(countAndFlagsBits);
            swift_bridgeObjectRelease(v69);
            swift_bridgeObjectRelease(v26);
            swift_bridgeObjectRelease(v71);
            v73 = type metadata accessor for Errors(0);
            v95 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
            v76 = swift_allocError(v73, v95, 0, 0);
            v77 = v75;
            v78 = 0xD00000000000002CLL;
            v79 = "Invalid XML. Multiple systems with same name";
            goto LABEL_93;
          }
          countAndFlagsBits = *(_QWORD *)&v282;
          if (a2 == (objc_class *)0xD000000000000011 && v26 == 0x8000000100202E30
            || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v26, 0xD000000000000011, 0x8000000100202E30, 0) & 1) != 0)
          {
            if (*(_QWORD *)(countAndFlagsBits + 16))
            {
              v85 = sub_100145264(1701667182, 0xE400000000000000);
              if ((v86 & 1) != 0)
              {
                v87 = *(_QWORD *)(countAndFlagsBits + 56) + 16 * v85;
                v21 = *(uint64_t ***)v87;
                v69 = *(_QWORD *)(v87 + 8);
                v70 = (unint64_t *)((char *)v62
                                         + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
                swift_beginAccess((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors, &v289, 1, 0);
                if (!*(_QWORD *)(*v70 + 16))
                {
                  swift_bridgeObjectRelease(countAndFlagsBits);
                  v73 = type metadata accessor for Errors(0);
                  v139 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                  v76 = swift_allocError(v73, v139, 0, 0);
                  v77 = v75;
                  v78 = 0xD00000000000001CLL;
                  v79 = "Invalid XML. Missing sensors";
                  goto LABEL_93;
                }
                v88 = objc_allocWithZone((Class)type metadata accessor for SensorTracker(0));
                v89 = swift_bridgeObjectRetain(v69);
                v90 = SensorTracker.init(id:name:state:)(0, 0x5372656B63617274, 0xED0000726F736E65, 0, v89);
                swift_beginAccess(v70, v296, 33, 0);
                v91 = swift_isUniquelyReferenced_nonNull_native(*v70);
                v294 = *v70;
                *v70 = 0x8000000000000000;
                sub_1001BC11C(v90, 0x5372656B63617274, 0xED0000726F736E65, v91, &qword_100271438);
                v92 = *v70;
                *v70 = v294;
                swift_bridgeObjectRelease(v92);
                swift_endAccess(v296);
                v93 = (uint64_t **)((char *)v62
                                 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
                swift_beginAccess((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems, v296, 0, 0);
                v71 = *v93;
                if ((*v93)[2])
                {
                  v26 = (uint64_t)v284;
                  swift_bridgeObjectRetain(v284);
                  swift_bridgeObjectRetain(v71);
                  sub_100145264((uint64_t)v285, v26);
                  if ((v94 & 1) != 0)
                    goto LABEL_59;
                  swift_bridgeObjectRelease(v26);
                  swift_bridgeObjectRelease(v71);
                }
                v140 = sub_1001C1FF4(countAndFlagsBits, 25705, 0xE200000000000000);
                v142 = v141;
                swift_bridgeObjectRelease(countAndFlagsBits);
                if ((v142 & 1) == 0)
                {
                  *(unint64_t *)((char *)v62
                                      + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v140;
LABEL_99:
                  v145 = *(unint64_t *)((char *)v62
                                             + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId);
                  v146 = *v70;
                  swift_bridgeObjectRetain(v69);
                  swift_bridgeObjectRetain(v146);
                  v148 = sub_1001C00EC(v147);
                  swift_bridgeObjectRelease(v146);
                  v149 = objc_allocWithZone((Class)type metadata accessor for SensorController(0));
                  v150 = (void *)SensorController.init(accessory:id:name:sensors:)(0, v145, v21, v69, v148);
                  swift_beginAccess(v93, &v294, 33, 0);
                  v108 = v150;
                  v151 = swift_isUniquelyReferenced_nonNull_native(*v93);
                  v293 = *v93;
                  *v93 = (uint64_t *)0x8000000000000000;
                  sub_1001BC11C((uint64_t)v108, (uint64_t)v21, v69, v151, &qword_100271440);
                  v152 = *v93;
                  *v93 = v293;
                  swift_bridgeObjectRelease(v69);
                  swift_bridgeObjectRelease(v152);
                  swift_endAccess(&v294);
                  v138 = &qword_100271438;
                  goto LABEL_100;
                }
                v143 = *(unint64_t *)((char *)v62
                                           + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId);
                v128 = __OFADD__(v143, 1);
                v144 = v143 + 1;
                if (!v128)
                {
                  *(unint64_t *)((char *)v62
                                      + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v144;
                  goto LABEL_99;
                }
                __break(1u);
LABEL_184:
                swift_bridgeObjectRelease(v17);
                swift_bridgeObjectRelease(countAndFlagsBits);
                swift_bridgeObjectRelease(v21);
                return;
              }
            }
LABEL_84:
            swift_bridgeObjectRelease(countAndFlagsBits);
            v73 = type metadata accessor for Errors(0);
            v122 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
            v76 = swift_allocError(v73, v122, 0, 0);
            v77 = v75;
            v78 = 0xD00000000000003ALL;
            v79 = "Invalid or missing attribute. Required attributes = [name]";
            goto LABEL_93;
          }
          v114 = a2 == (objc_class *)6579564 && v26 == 0xE300000000000000;
          v115 = v114;
          if (v114
            || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v26, 6579564, 0xE300000000000000, 0) & 1) != 0
            || a2 == (objc_class *)0x6E6F74747562 && v26 == 0xE600000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v26, 0x6E6F74747562, 0xE600000000000000, 0) & 1) != 0
            || a2 == (objc_class *)0x79726574746162 && v26 == 0xE700000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v26, 0x79726574746162, 0xE700000000000000, 0) & 1) != 0)
          {
            if (!*(_QWORD *)(countAndFlagsBits + 16))
              goto LABEL_84;
            v116 = sub_100145264(1701667182, 0xE400000000000000);
            if ((v117 & 1) == 0)
              goto LABEL_84;
            v118 = *(_QWORD *)(countAndFlagsBits + 56) + 16 * v116;
            v21 = *(uint64_t ***)v118;
            a2 = *(objc_class **)(v118 + 8);
            v13 = (unint64_t *)((char *)v62
                                     + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
            swift_beginAccess((char *)v62 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors, &v289, 0, 0);
            v119 = *v13;
            if (*(_QWORD *)(*v13 + 16))
            {
              swift_bridgeObjectRetain(v26);
              swift_bridgeObjectRetain(a2);
              swift_bridgeObjectRetain(v119);
              sub_100145264((uint64_t)v285, v26);
              if ((v120 & 1) != 0)
              {
                swift_bridgeObjectRelease(countAndFlagsBits);
                swift_bridgeObjectRelease(a2);
                swift_bridgeObjectRelease(v26);
                swift_bridgeObjectRelease(v119);
                v73 = type metadata accessor for Errors(0);
                v121 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                v76 = swift_allocError(v73, v121, 0, 0);
                v77 = v75;
                v78 = 0xD00000000000002CLL;
                v79 = "Invalid XML. Multiple sensors with same name";
                goto LABEL_93;
              }
              swift_bridgeObjectRelease(v26);
              swift_bridgeObjectRelease(v119);
            }
            else
            {
              swift_bridgeObjectRetain(a2);
            }
            v22 = (uint64_t *)sub_1001C1FF4(countAndFlagsBits, 25705, 0xE200000000000000);
            v155 = v154;
            swift_bridgeObjectRelease(countAndFlagsBits);
            if ((v155 & 1) == 0)
            {
              v156 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId;
              goto LABEL_106;
            }
            v156 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId;
            v157 = *(unint64_t *)((char *)v62
                                       + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId);
            v22 = (uint64_t *)(v157 + 1);
            if (!__OFADD__(v157, 1))
            {
LABEL_106:
              *(unint64_t *)((char *)v62 + v156) = (unint64_t)v22;
              if (v285 == (objc_class *)0x6E6F74747562 && v284 == (uint64_t *)0xE600000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, 0x6E6F74747562, 0xE600000000000000, 0) & 1) != 0)
              {
                objc_allocWithZone((Class)type metadata accessor for SensorButton(0));
                v158 = swift_bridgeObjectRetain(a2);
                v159 = SensorButton.init(id:name:state:)(v22, v21, a2, 0, v158);
              }
              else if ((v115 & 1) != 0
                     || (_stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, 6579564, 0xE300000000000000, 0) & 1) != 0)
              {
                v160 = objc_allocWithZone((Class)type metadata accessor for SensorLED(0));
                v161 = swift_bridgeObjectRetain(a2);
                v159 = SensorLED.init(id:name:state:)(v22, v21, a2, 0, v161);
              }
              else
              {
                if ((v285 != (objc_class *)0x79726574746162 || v284 != (uint64_t *)0xE700000000000000)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, 0x79726574746162, 0xE700000000000000, 0) & 1) == 0)
                {
                  swift_bridgeObjectRelease(a2);
                  return;
                }
                v170 = objc_allocWithZone((Class)type metadata accessor for SensorBattery(0));
                v171 = swift_bridgeObjectRetain(a2);
                v159 = SensorBattery.init(id:name:state:)(v22, v21, a2, 0, v171);
              }
              v162 = v159;
              swift_beginAccess(v13, v296, 33, 0);
              v163 = swift_isUniquelyReferenced_nonNull_native(*v13);
              v294 = *v13;
              *v13 = 0x8000000000000000;
              sub_1001BC11C(v162, (uint64_t)v21, (uint64_t)a2, v163, &qword_100271438);
              v164 = *v13;
              *v13 = v294;
              swift_bridgeObjectRelease(a2);
              swift_bridgeObjectRelease(v164);
              swift_endAccess(v296);
              return;
            }
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
          v165 = v21;
          v166 = a2;
          a2 = (objc_class *)type metadata accessor for Actuator(0);
          v168 = static Actuator.Yaw.getter();
          v169 = v167;
          if ((objc_class *)v168 == v166 && v167 == v284)
            goto LABEL_116;
          v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, v168, v167, 0);
          v173 = swift_bridgeObjectRelease(v169);
          if ((v172 & 1) == 0)
          {
            v175 = static Actuator.Pitch.getter(v173);
            v176 = v174;
            if ((objc_class *)v175 == v285 && v174 == v284)
              goto LABEL_116;
            v177 = _stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, v175, v174, 0);
            v178 = swift_bridgeObjectRelease(v176);
            if ((v177 & 1) != 0)
              goto LABEL_128;
            v180 = static Actuator.Roll.getter(v178);
            v181 = v179;
            if ((objc_class *)v180 == v285 && v179 == v284)
            {
LABEL_116:
              swift_bridgeObjectRelease(v284);
              goto LABEL_128;
            }
            v182 = _stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, v180, v179, 0);
            swift_bridgeObjectRelease(v181);
            if ((v182 & 1) == 0)
            {
              swift_bridgeObjectRelease(*(_QWORD *)&v282);
              return;
            }
          }
LABEL_128:
          v183 = (uint64_t)*v21;
          if ((*v21)[2])
          {
            swift_bridgeObjectRetain(*v21);
            v184 = sub_100145264(0x7374696D696CLL, 0xE600000000000000);
            if ((v185 & 1) != 0)
            {
              v186 = *(_QWORD *)(*(_QWORD *)(v183 + 56) + 8 * v184);
              swift_bridgeObjectRetain(v186);
              swift_bridgeObjectRelease(v183);
              if (*(_QWORD *)(v186 + 16))
              {
                v17 = *(_QWORD *)(v186 + 32);
                swift_bridgeObjectRetain(v17);
                swift_bridgeObjectRelease(v186);
                v187 = *v21;
                if ((*v21)[2])
                {
                  swift_bridgeObjectRetain(*v21);
                  v188 = sub_100145264(0x6C6F72746E6F63, 0xE700000000000000);
                  if ((v189 & 1) != 0)
                  {
                    v190 = *(_QWORD *)(v187[7] + 8 * v188);
                    swift_bridgeObjectRetain(v190);
                    swift_bridgeObjectRelease(v187);
                    if (*(_QWORD *)(v190 + 16))
                    {
                      v21 = *(uint64_t ***)(v190 + 32);
                      swift_bridgeObjectRetain(v21);
                      swift_bridgeObjectRelease(v190);
LABEL_145:
                      v13 = (unint64_t *)((char *)v283
                                               + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators);
                      swift_beginAccess((char *)v283 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators, &v289, 0, 0);
                      v200 = *v13;
                      if (*(_QWORD *)(*v13 + 16))
                      {
                        v201 = (uint64_t)v284;
                        swift_bridgeObjectRetain(v284);
                        swift_bridgeObjectRetain(v200);
                        sub_100145264((uint64_t)v285, v201);
                        if ((v202 & 1) != 0)
                        {
                          swift_bridgeObjectRelease(*(_QWORD *)&v282);
                          swift_bridgeObjectRelease(v17);
                          swift_bridgeObjectRelease(v284);
                          swift_bridgeObjectRelease(v200);
                          swift_bridgeObjectRelease(v21);
                          v192 = type metadata accessor for Errors(0);
                          v203 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                          v195 = swift_allocError(v192, v203, 0, 0);
                          v196 = v194;
                          v197 = 0xD00000000000002DLL;
                          v198 = "Invalid XML. Multiple actuators for same axis";
                          goto LABEL_140;
                        }
                        swift_bridgeObjectRelease(v284);
                        swift_bridgeObjectRelease(v200);
                      }
                      v204 = *v165;
                      if ((*v165)[2])
                      {
                        swift_bridgeObjectRetain(*v165);
                        v205 = sub_100145264(0x6C5F6172656D6163, 0xEC00000074696D69);
                        if ((v206 & 1) != 0)
                        {
                          countAndFlagsBits = *(_QWORD *)(v204[7] + 8 * v205);
                          swift_bridgeObjectRetain(countAndFlagsBits);
                        }
                        else
                        {
                          countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
                        }
                        swift_bridgeObjectRelease(v204);
                      }
                      else
                      {
                        countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
                      }
                      swift_beginAccess(v165, v296, 33, 0);
                      v207 = sub_1001B4A8C(0x7374696D696CLL, 0xE600000000000000);
                      swift_endAccess(v296);
                      swift_bridgeObjectRelease(v207);
                      swift_beginAccess(v165, v296, 33, 0);
                      v208 = sub_1001B4A8C(0x6C6F72746E6F63, 0xE700000000000000);
                      swift_endAccess(v296);
                      swift_bridgeObjectRelease(v208);
                      swift_beginAccess(v165, v296, 33, 0);
                      v209 = sub_1001B4A8C(0x6C5F6172656D6163, 0xEC00000074696D69);
                      swift_endAccess(v296);
                      swift_bridgeObjectRelease(v209);
                      v210 = sub_1001C33B8(*(uint64_t *)&v282);
                      if ((v211 & 1) != 0)
                      {
                        swift_bridgeObjectRelease(*(_QWORD *)&v282);
                        swift_bridgeObjectRelease(v17);
                        swift_bridgeObjectRelease(countAndFlagsBits);
                        swift_bridgeObjectRelease(v21);
                        v192 = type metadata accessor for Errors(0);
                        v217 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                        v195 = swift_allocError(v192, v217, 0, 0);
                        v196 = v194;
                        v197 = 0xD00000000000003DLL;
                        v198 = "Invalid or missing attribute. Required attributes = [type,id]";
                      }
                      else
                      {
                        v212 = v210;
                        v213 = *(_QWORD *)&v282;
                        v214 = sub_1001C1FF4(*(uint64_t *)&v282, 25705, 0xE200000000000000);
                        v216 = v215;
                        swift_bridgeObjectRelease(v213);
                        if ((v216 & 1) != 0)
                        {
                          v218 = *(unint64_t *)((char *)v283
                                                     + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
                          v128 = __OFADD__(v218, 1);
                          v219 = v218 + 1;
                          if (v128)
                          {
                            __break(1u);
                            return;
                          }
                          *(unint64_t *)((char *)v283
                                              + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = v219;
                        }
                        else
                        {
                          *(unint64_t *)((char *)v283
                                              + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = v214;
                        }
                        v220 = ActuatorType.rawValue.getter(v212);
                        if (v220 != ActuatorType.rawValue.getter(0))
                        {
                          v221 = ActuatorType.rawValue.getter(v212);
                          if (v221 != ActuatorType.rawValue.getter(2))
                          {
                            v237 = ActuatorType.rawValue.getter(v212);
                            if (v237 != ActuatorType.rawValue.getter(1))
                            {
                              v238 = ActuatorType.rawValue.getter(v212);
                              if (v238 != ActuatorType.rawValue.getter(3))
                                goto LABEL_184;
                            }
                            v239 = sub_1001C2314(v17, 0x797469636F6C6576, 0xE800000000000000);
                            if ((v240 & 1) != 0
                              || (v241 = *(double *)&v239,
                                  v242 = sub_1001C2314(v17, 0x6172656C65636361, 0xEC0000006E6F6974),
                                  (v243 & 1) != 0))
                            {
LABEL_181:
                              swift_bridgeObjectRelease(v17);
                              goto LABEL_182;
                            }
                            v244 = *(double *)&v242;
                            *(double *)&v245 = COERCE_DOUBLE(sub_1001C2314(v17, 1701670760, 0xE400000000000000));
                            v247 = v246;
                            swift_bridgeObjectRelease(v17);
                            if ((v247 & 1) != 0)
                            {
LABEL_182:
                              swift_bridgeObjectRelease(countAndFlagsBits);
                              swift_bridgeObjectRelease(v21);
                              v192 = type metadata accessor for Errors(0);
                              v263 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                              v195 = swift_allocError(v192, v263, 0, 0);
                              v196 = v194;
                              v197 = 0xD000000000000050;
                              v198 = "Invalid or missing attribute. Required attributes = [velocity,acceleration,home]";
                              goto LABEL_140;
                            }
                            v248 = v241;
                            v249 = v244;
                            v250 = *(double *)&v245;
                            v251 = *(unint64_t *)((char *)v283
                                                       + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
                            v252 = *(unint64_t *)((char *)v283
                                                       + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorType);
                            v253 = (uint64_t)v284;
                            swift_bridgeObjectRetain(v284);
                            v254 = sub_1001C24C4((uint64_t)v21);
                            swift_bridgeObjectRelease(v21);
                            v255 = sub_1001C2A70(countAndFlagsBits);
                            swift_bridgeObjectRelease(countAndFlagsBits);
                            v256 = objc_allocWithZone(a2);
                            v257 = (uint64_t)v285;
                            v258 = (void *)Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)(v251, v252, v285, v253, v254, v255, -1.79769313e308, 1.79769313e308, v248, v249, v250);
                            swift_beginAccess(v13, v296, 33, 0);
                            swift_bridgeObjectRetain(v253);
                            v259 = v258;
                            v260 = swift_isUniquelyReferenced_nonNull_native(*v13);
                            v294 = *v13;
                            *v13 = 0x8000000000000000;
                            sub_1001BC11C((uint64_t)v259, v257, v253, v260, &qword_100271430);
                            v261 = *v13;
                            *v13 = v294;
                            v262 = v253;
LABEL_192:
                            swift_bridgeObjectRelease(v262);
                            swift_bridgeObjectRelease(v261);
                            swift_endAccess(v296);

                            return;
                          }
                        }
                        *(double *)&v222 = COERCE_DOUBLE(sub_1001C2314(v17, 0x7265776F6CLL, 0xE500000000000000));
                        if ((v223 & 1) != 0
                          || (v224 = *(double *)&v222,
                              *(double *)&v225 = COERCE_DOUBLE(sub_1001C2314(v17, 0x7265707075, 0xE500000000000000)),
                              (v226 & 1) != 0)
                          || (v227 = *(double *)&v225,
                              v228 = sub_1001C2314(v17, 0x797469636F6C6576, 0xE800000000000000),
                              (v229 & 1) != 0)
                          || (v230 = *(double *)&v228,
                              *(double *)&v286 = COERCE_DOUBLE(sub_1001C2314(v17, 0x6172656C65636361, 0xEC0000006E6F6974)),
                              (v231 & 1) != 0))
                        {
                          swift_bridgeObjectRelease(v17);
                        }
                        else
                        {
                          v282 = COERCE_DOUBLE(sub_1001C2314(v17, 1701670760, 0xE400000000000000));
                          v233 = v232;
                          v234 = swift_bridgeObjectRelease(v17);
                          if ((v233 & 1) == 0)
                          {
                            v6 = v224;
                            v7 = v227;
                            v4 = v230;
                            v5 = *(double *)&v286;
                            v8 = v282;
                            v46 = static Actuator.Pitch.getter(v234);
                            v22 = v235;
                            if ((objc_class *)v46 == v285 && v235 == v284)
                            {
                              swift_bridgeObjectRelease(v284);
                              goto LABEL_189;
                            }
LABEL_188:
                            v264 = _stringCompareWithSmolCheck(_:_:expecting:)(v285, v284, v46, v22, 0);
                            swift_bridgeObjectRelease(v22);
                            if ((v264 & 1) == 0)
                            {
                              v276 = *(unint64_t *)((char *)v283
                                                         + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
                              v277 = *(unint64_t *)((char *)v283
                                                         + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorType);
                              v278 = v284;
                              swift_bridgeObjectRetain(v284);
                              v268 = sub_1001C24C4((uint64_t)v21);
                              swift_bridgeObjectRelease(v21);
                              v269 = sub_1001C2A70(countAndFlagsBits);
                              swift_bridgeObjectRelease(countAndFlagsBits);
                              objc_allocWithZone(a2);
                              v270 = v276;
                              v271 = v277;
                              v272 = (uint64_t)v285;
                              v273 = v278;
                              v274 = v6;
                              v275 = v7;
                              goto LABEL_191;
                            }
LABEL_189:
                            v265 = *(unint64_t *)((char *)v283
                                                       + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
                            v266 = *(unint64_t *)((char *)v283
                                                       + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorType);
                            v8 = -v8;
                            v267 = v284;
                            swift_bridgeObjectRetain(v284);
                            v268 = sub_1001C24C4((uint64_t)v21);
                            swift_bridgeObjectRelease(v21);
                            v269 = sub_1001C2A70(countAndFlagsBits);
                            swift_bridgeObjectRelease(countAndFlagsBits);
                            objc_allocWithZone(a2);
                            v270 = v265;
                            v271 = v266;
                            v272 = (uint64_t)v285;
                            v273 = v267;
                            v274 = -v7;
                            v275 = -v6;
LABEL_191:
                            v279 = (void *)Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)(v270, v271, v272, v273, v268, v269, v274, v275, v4, v5, v8);
                            swift_beginAccess(v13, v296, 33, 0);
                            v280 = (uint64_t)v284;
                            swift_bridgeObjectRetain(v284);
                            v259 = v279;
                            v281 = swift_isUniquelyReferenced_nonNull_native(*v13);
                            v294 = *v13;
                            *v13 = 0x8000000000000000;
                            sub_1001BC11C((uint64_t)v259, (uint64_t)v285, v280, v281, &qword_100271430);
                            v261 = *v13;
                            *v13 = v294;
                            v262 = v280;
                            goto LABEL_192;
                          }
                        }
                        swift_bridgeObjectRelease(countAndFlagsBits);
                        swift_bridgeObjectRelease(v21);
                        v192 = type metadata accessor for Errors(0);
                        v236 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
                        v195 = swift_allocError(v192, v236, 0, 0);
                        v196 = v194;
                        v197 = 0xD00000000000005CLL;
                        v198 = "Invalid or missing attribute. Required attributes = [lower,upper,velocity,acceleration,home]";
                      }
LABEL_140:
                      *v194 = v197;
                      v194[1] = (unint64_t)(v198 - 32) | 0x8000000000000000;
                      (*(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v192 - 8) + 104))(v196, enum case for Errors.ParseFailure(_:), v192);
                      v58 = *(unint64_t *)((char *)v283 + v287);
                      *(unint64_t *)((char *)v283 + v287) = v195;
                      goto LABEL_35;
                    }
                    v199 = (uint64_t *)v190;
                  }
                  else
                  {
                    v199 = v187;
                  }
                  swift_bridgeObjectRelease(v199);
                }
                v21 = 0;
                goto LABEL_145;
              }
              swift_bridgeObjectRelease(*(_QWORD *)&v282);
              v191 = v186;
            }
            else
            {
              swift_bridgeObjectRelease(*(_QWORD *)&v282);
              v191 = v183;
            }
          }
          else
          {
            v191 = *(_QWORD *)&v282;
          }
          swift_bridgeObjectRelease(v191);
          v192 = type metadata accessor for Errors(0);
          v193 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
          v195 = swift_allocError(v192, v193, 0, 0);
          v196 = v194;
          v197 = 0xD000000000000019;
          v198 = "Missing limits attributes";
          goto LABEL_140;
        }
        v22 = (uint64_t *)v25;
        object = v284;
        a2 = v285;
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRelease(object);
      }
      swift_bridgeObjectRelease(v22);
    }
    v48 = type metadata accessor for Errors(0);
    v49 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v50 = object;
    v51 = swift_allocError(v48, v49, 0, 0);
    v52 = (uint64_t)a2;
    v54 = v53;
    v289 = 0;
    v290 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v55._countAndFlagsBits = 0xD000000000000037;
    v55._object = (void *)0x8000000100202DD0;
    String.append(_:)(v55);
    v56._countAndFlagsBits = v52;
    v56._object = v50;
    String.append(_:)(v56);
    v57 = v290;
    *v54 = v289;
    v54[1] = v57;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v54, enum case for Errors.ParseFailure(_:), v48);
LABEL_34:
    v58 = *(unint64_t *)((char *)v9 + v287);
    *(unint64_t *)((char *)v9 + v287) = v51;
LABEL_35:
    swift_errorRelease(v58);
    objc_msgSend(v288, "abortParsing");
  }
}

_BYTE *sub_1001C575C@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001C5770(a1, a2);
}

_BYTE *sub_1001C5770@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1001C57DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BTDiscoveredDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C5820(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100090F6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001C5860(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_10026E880;
  if (!qword_10026E880)
  {
    v3 = objc_opt_self(NSUUID, a2);
    result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_10026E880);
  }
  return result;
}

id objc_msgSend_HAPInstanceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "HAPInstanceID");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_UUIDWithNSUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithNSUUID:");
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithString:");
}

id objc_msgSend___addFragmentationPacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__addFragmentationPacket:");
}

id objc_msgSend___filteredPacketsWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__filteredPacketsWithTransactionIdentifier:");
}

id objc_msgSend___isTransactionCompleteWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__isTransactionCompleteWithTransactionIdentifier:");
}

id objc_msgSend___removeAllPendingPacketsWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__removeAllPendingPacketsWithTransactionIdentifier:");
}

id objc_msgSend___transactionDataWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__transactionDataWithTransactionIdentifier:");
}

id objc_msgSend__broadcastInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_broadcastInfo");
}

id objc_msgSend__buildWriteRequestWithError_shouldForceClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildWriteRequestWithError:shouldForceClose:");
}

id objc_msgSend__cacheServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheServices:");
}

id objc_msgSend__cancelAllPendingWritesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelAllPendingWritesWithError:");
}

id objc_msgSend__cancelAllQueuedOperationsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelAllQueuedOperationsWithError:");
}

id objc_msgSend__cancelConnectionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelConnectionWithError:");
}

id objc_msgSend__cancelDiscoveryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelDiscoveryWithError:");
}

id objc_msgSend__cancelStreamTransportWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelStreamTransportWithError:");
}

id objc_msgSend__characteristicForCBCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characteristicForCBCharacteristic:");
}

id objc_msgSend__checkForAuthPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForAuthPrompt:");
}

id objc_msgSend__clearPendingBulkSendListeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearPendingBulkSendListeners");
}

id objc_msgSend__closeAllSessionsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeAllSessionsWithError:");
}

id objc_msgSend__closeConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeConnection");
}

id objc_msgSend__closeSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeSession");
}

id objc_msgSend__closeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeWithError:");
}

id objc_msgSend__configureBroadcastKeyGeneration_service_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureBroadcastKeyGeneration:service:withCompletion:");
}

id objc_msgSend__configureCharacteristics_queue_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureCharacteristics:queue:withCompletionHandler:");
}

id objc_msgSend__createBulkStreamProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createBulkStreamProtocol");
}

id objc_msgSend__createPrimaryAccessoryFromAdvertisementData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPrimaryAccessoryFromAdvertisementData");
}

id objc_msgSend__createSessionCandidateWithRequestHeader_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSessionCandidateWithRequestHeader:metadata:");
}

id objc_msgSend__createSessionFromCandidate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSessionFromCandidate:queue:");
}

id objc_msgSend__createSessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSessionIdentifier");
}

id objc_msgSend__createStreamSocketWithStreamProtocol_applicationProtocolName_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createStreamSocketWithStreamProtocol:applicationProtocolName:completion:");
}

id objc_msgSend__decodeOPACKFrame_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decodeOPACKFrame:receivedHeader:receivedPayload:error:");
}

id objc_msgSend__decryptData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decryptData:error:");
}

id objc_msgSend__delegateRespondsToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delegateRespondsToSelector:");
}

id objc_msgSend__deregisterForMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterForMessages");
}

id objc_msgSend__deserializeHeaderBodyLengthWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deserializeHeaderBodyLengthWithData:error:");
}

id objc_msgSend__deserializeHeaderWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deserializeHeaderWithData:error:");
}

id objc_msgSend__discoverCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoverCharacteristic:");
}

id objc_msgSend__discoverCharacteristicsForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoverCharacteristicsForService:");
}

id objc_msgSend__discoverServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoverServices");
}

id objc_msgSend__discoverWithType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoverWithType:completionHandler:");
}

id objc_msgSend__doNextWriteOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doNextWriteOperation");
}

id objc_msgSend__enableBroadcastEvent_interval_forCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableBroadcastEvent:interval:forCharacteristic:completionHandler:");
}

id objc_msgSend__enableEvent_forCharacteristic_withCompletionHandler_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableEvent:forCharacteristic:withCompletionHandler:queue:");
}

id objc_msgSend__enableEvent_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableEvent:toCharacteristic:completionHandler:");
}

id objc_msgSend__encodeOPACKHeader_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encodeOPACKHeader:payload:error:");
}

id objc_msgSend__encryptDataAndGenerateAuthTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptDataAndGenerateAuthTag:error:");
}

id objc_msgSend__enqueueRequest_shouldPrioritize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueRequest:shouldPrioritize:");
}

id objc_msgSend__establishSecureSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_establishSecureSession");
}

id objc_msgSend__failPendingMessagesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failPendingMessagesWithError:");
}

id objc_msgSend__failPendingSocketRequestsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failPendingSocketRequestsWithError:");
}

id objc_msgSend__generateBroadcastKey_queue_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateBroadcastKey:queue:withCompletionHandler:");
}

id objc_msgSend__generateValidConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateValidConstraints:");
}

id objc_msgSend__generateValidMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateValidMetadata:");
}

id objc_msgSend__getActiveProtocolWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getActiveProtocolWithName:");
}

id objc_msgSend__getBulkSendSessionForSessionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getBulkSendSessionForSessionIdentifier:");
}

id objc_msgSend__getCBCharacteristic_instanceId_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCBCharacteristic:instanceId:service:");
}

id objc_msgSend__getCBService_instanceOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCBService:instanceOrder:");
}

id objc_msgSend__getCachedService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCachedService:");
}

id objc_msgSend__getCharacteristicInstanceID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCharacteristicInstanceID:error:");
}

id objc_msgSend__getCurrentFrameSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCurrentFrameSize");
}

id objc_msgSend__getPairSetupType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPairSetupType");
}

id objc_msgSend__getPairingFeaturesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPairingFeaturesWithCompletionHandler:");
}

id objc_msgSend__getPendingWritesUpToLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPendingWritesUpToLength:");
}

id objc_msgSend__getProtocolInfoService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getProtocolInfoService");
}

id objc_msgSend__getServiceInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getServiceInstanceID:");
}

id objc_msgSend__getStreamProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getStreamProtocol");
}

id objc_msgSend__handleAccessoryConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccessoryConnected");
}

id objc_msgSend__handleCloseMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCloseMessage:");
}

id objc_msgSend__handleCompletedDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletedDiscovery");
}

id objc_msgSend__handleCompletionWithResponseTuples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionWithResponseTuples:");
}

id objc_msgSend__handleConnectionIdleTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionIdleTimeout");
}

id objc_msgSend__handleDataMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDataMessage:");
}

id objc_msgSend__handleDiscoveredDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDiscoveredDescriptors:");
}

id objc_msgSend__handleEventIndicationForCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEventIndicationForCharacteristic:");
}

id objc_msgSend__handleHAPNotificationStateUpdateForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHAPNotificationStateUpdateForCharacteristic:error:");
}

id objc_msgSend__handleInterruptCharacteristicValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInterruptCharacteristicValue:");
}

id objc_msgSend__handleLocalPairingIdentityRequestWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLocalPairingIdentityRequestWithStatus:");
}

id objc_msgSend__handleOpenWithRequestHeader_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOpenWithRequestHeader:payload:");
}

id objc_msgSend__handlePairSetupSessionExchangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePairSetupSessionExchangeData:");
}

id objc_msgSend__handlePairingSetupCodeRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePairingSetupCodeRequestWithCompletionHandler:");
}

id objc_msgSend__handlePeerPairingIdentityRequestWithIdentifier_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePeerPairingIdentityRequestWithIdentifier:status:");
}

id objc_msgSend__handlePendingEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePendingEvents");
}

id objc_msgSend__handlePendingRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePendingRequests");
}

id objc_msgSend__handleRawResponseData_fromCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRawResponseData:fromCharacteristic:error:");
}

id objc_msgSend__handleReadCharacteristicSignature_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadCharacteristicSignature:error:");
}

id objc_msgSend__handleReadCharacteristicValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadCharacteristicValue:error:");
}

id objc_msgSend__handleReadServiceInstanceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadServiceInstanceId:");
}

id objc_msgSend__handleReadServiceSignature_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadServiceSignature:error:");
}

id objc_msgSend__handleReceivedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReceivedData:");
}

id objc_msgSend__handleResponseData_fromCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleResponseData:fromCharacteristic:error:");
}

id objc_msgSend__handleSecuritySessionSetupExchangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSecuritySessionSetupExchangeData:");
}

id objc_msgSend__handleSetupExchangeComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSetupExchangeComplete");
}

id objc_msgSend__handleTokenResponse_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTokenResponse:withHeader:");
}

id objc_msgSend__handleTokenUpdateResponse_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTokenUpdateResponse:withHeader:");
}

id objc_msgSend__handleWriteCompletionForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWriteCompletionForCharacteristic:error:");
}

id objc_msgSend__hapServicesFromCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hapServicesFromCache");
}

id objc_msgSend__initWithCharacteristic_requestType_bodyData_shouldEncrypt_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithCharacteristic:requestType:bodyData:shouldEncrypt:timeoutInterval:");
}

id objc_msgSend__initializeSetupSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeSetupSession:");
}

id objc_msgSend__initiateStreamSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateStreamSetup");
}

id objc_msgSend__inputInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inputInfo");
}

id objc_msgSend__internalBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalBody");
}

id objc_msgSend__isDataStreamCapable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDataStreamCapable");
}

id objc_msgSend__isDataStreamConfigurationValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDataStreamConfigurationValid");
}

id objc_msgSend__isRunning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRunning");
}

id objc_msgSend__kickConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_kickConnectionIdleTimer");
}

id objc_msgSend__maximumControlWriteLengthForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maximumControlWriteLengthForRequest:");
}

id objc_msgSend__maybeSubmitMetricForDroppedOpenRequestOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maybeSubmitMetricForDroppedOpenRequestOfType:");
}

id objc_msgSend__nextPacketWithMaximumLength_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextPacketWithMaximumLength:error:");
}

id objc_msgSend__notifyActiveStatusChangedFromPreviousValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyActiveStatusChangedFromPreviousValue:");
}

id objc_msgSend__notifyDelegateDidClose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegateDidClose");
}

id objc_msgSend__notifyDelegateDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegateDidFailWithError:");
}

id objc_msgSend__notifyDelegateDidOpen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegateDidOpen");
}

id objc_msgSend__notifyDelegateDidReceiveFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegateDidReceiveFrame:");
}

id objc_msgSend__notifyDelegatesPairingStopped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegatesPairingStopped:");
}

id objc_msgSend__notifyOpened(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOpened");
}

id objc_msgSend__notifyOpening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOpening");
}

id objc_msgSend__notifyWriteOperation_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyWriteOperation:didCompleteWithError:");
}

id objc_msgSend__outputInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputInfo");
}

id objc_msgSend__outstandingRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outstandingRequests");
}

id objc_msgSend__pairingCompletedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pairingCompletedWithError:");
}

id objc_msgSend__parseArray_result_objectCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseArray:result:objectCreator:");
}

id objc_msgSend__parseCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseCharacteristic:error:");
}

id objc_msgSend__parseEmptyResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseEmptyResponse:expectedTID:withHeader:");
}

id objc_msgSend__parseFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseFields:");
}

id objc_msgSend__parseFromData_length_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseFromData:length:status:");
}

id objc_msgSend__parseFromTLVData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseFromTLVData");
}

id objc_msgSend__parsePairingFeaturesCharacteristic_authMethod_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parsePairingFeaturesCharacteristic:authMethod:error:");
}

id objc_msgSend__parseService_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseService:error:");
}

id objc_msgSend__pendingRequestForCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pendingRequestForCharacteristic:");
}

id objc_msgSend__pendingResponseForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pendingResponseForRequest:");
}

id objc_msgSend__performEnableEvent_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performEnableEvent:toCharacteristic:completionHandler:");
}

id objc_msgSend__performTimedWriteExecuteForCharacteristic_value_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTimedWriteExecuteForCharacteristic:value:options:completionHandler:");
}

id objc_msgSend__performTimedWritePrepareWithValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTimedWritePrepareWithValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__performTimedWriteValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTimedWriteValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__performWriteValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performWriteValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__populateBagWithPairingIdentitiesForAccessory_fromStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateBagWithPairingIdentitiesForAccessory:fromStore:");
}

id objc_msgSend__processPendingSocketRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processPendingSocketRequests");
}

id objc_msgSend__processSetupExchangeData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSetupExchangeData:error:");
}

id objc_msgSend__pumpMessage_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pumpMessage:session:");
}

id objc_msgSend__pumpReadDataIfPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pumpReadDataIfPossible");
}

id objc_msgSend__pumpReceiveFailure_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pumpReceiveFailure:session:");
}

id objc_msgSend__readCharacteristicSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readCharacteristicSignature:");
}

id objc_msgSend__readCharacteristicSignatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readCharacteristicSignatures");
}

id objc_msgSend__readCharacteristicValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readCharacteristicValue:");
}

id objc_msgSend__readCharacteristicValues_queue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readCharacteristicValues:queue:completionHandler:");
}

id objc_msgSend__readDescriptorValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readDescriptorValue:");
}

id objc_msgSend__readFrameHeaderIfPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readFrameHeaderIfPossible");
}

id objc_msgSend__readPendingDiscoveredCharacteritiscTypesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readPendingDiscoveredCharacteritiscTypesWithCompletion:");
}

id objc_msgSend__readRequiredTransportCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readRequiredTransportCharacteristics");
}

id objc_msgSend__readRequiredTransportCharacteristicsIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readRequiredTransportCharacteristicsIfNeededWithCompletion:");
}

id objc_msgSend__readServiceSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readServiceSignature:");
}

id objc_msgSend__readValueForCharacteristic_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readValueForCharacteristic:options:completionHandler:");
}

id objc_msgSend__reallySendRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySendRequest:completionHandler:");
}

id objc_msgSend__reevaluateTrafficClassForDataStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reevaluateTrafficClassForDataStream");
}

id objc_msgSend__registerForMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForMessages");
}

id objc_msgSend__remainingBodyLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_remainingBodyLength");
}

id objc_msgSend__removeAndMarkCompleteAllCompletedWrites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAndMarkCompleteAllCompletedWrites");
}

id objc_msgSend__removeBulkSendSessionForSessionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBulkSendSessionForSessionIdentifier:");
}

id objc_msgSend__removePairingOfAccessoryServerCancelledMidPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePairingOfAccessoryServerCancelledMidPairing");
}

id objc_msgSend__reportAuthFailure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportAuthFailure");
}

id objc_msgSend__requestResponseForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestResponseForRequest:");
}

id objc_msgSend__resetDefaultDataStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetDefaultDataStream");
}

id objc_msgSend__resetSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetSession");
}

id objc_msgSend__resetTransportInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetTransportInfo");
}

id objc_msgSend__resetWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetWithError:");
}

id objc_msgSend__restartConnectionIdleTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restartConnectionIdleTimer:");
}

id objc_msgSend__resumeAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resumeAllOperations");
}

id objc_msgSend__resumeConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resumeConnectionIdleTimer");
}

id objc_msgSend__retryDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryDiscovery");
}

id objc_msgSend__sendAckMessageWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAckMessageWithIdentifier:completion:");
}

id objc_msgSend__sendCloseMessageWithIdentifier_reason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCloseMessageWithIdentifier:reason:completion:");
}

id objc_msgSend__sendControlPacket_forRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendControlPacket:forRequest:completionHandler:");
}

id objc_msgSend__sendData_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendData:toCharacteristic:completionHandler:");
}

id objc_msgSend__sendHelloMessageOnDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendHelloMessageOnDataStream:");
}

id objc_msgSend__sendMessageWithHeader_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessageWithHeader:payload:completion:");
}

id objc_msgSend__sendNextPayloadFragmentWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendNextPayloadFragmentWithCompletionHandler:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_bulkSendStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:bulkSendStatus:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_payload_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:payload:status:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:status:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_streamIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:streamIdentifier:");
}

id objc_msgSend__sendPairingRequestData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPairingRequestData:completionHandler:");
}

id objc_msgSend__sendProtocolInfoServiceExchangeData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendProtocolInfoServiceExchangeData:completion:");
}

id objc_msgSend__sendRequest_shouldPrioritize_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRequest:shouldPrioritize:responseHandler:");
}

id objc_msgSend__sendTokenRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTokenRequest");
}

id objc_msgSend__sendVersionRequestOnDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendVersionRequestOnDataStream:");
}

id objc_msgSend__serialize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serialize");
}

id objc_msgSend__serializeHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializeHeader");
}

id objc_msgSend__serviceCacheFromHAPService_serviceOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceCacheFromHAPService:serviceOrder:");
}

id objc_msgSend__serviceForCBService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceForCBService:");
}

id objc_msgSend__setInternalBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInternalBody:");
}

id objc_msgSend__shouldIgnoreRetryDiscoveryError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreRetryDiscoveryError:");
}

id objc_msgSend__shouldResumeConnectionIdletimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldResumeConnectionIdletimer");
}

id objc_msgSend__stopIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopIdleTimer");
}

id objc_msgSend__stopTransportForWriteFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopTransportForWriteFailureError:");
}

id objc_msgSend__stopWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopWithError:");
}

id objc_msgSend__suspendAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suspendAllOperations");
}

id objc_msgSend__suspendConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suspendConnectionIdleTimer");
}

id objc_msgSend__teardownSessionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_teardownSessionWithError:");
}

id objc_msgSend__updateAndValidateServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAndValidateServices");
}

id objc_msgSend__updateCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCharacteristic:");
}

id objc_msgSend__updateConnectionIdleTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateConnectionIdleTime:");
}

id objc_msgSend__updateMetadata_withProvidedMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMetadata:withProvidedMetadata:");
}

id objc_msgSend__updatePropertiesFromCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePropertiesFromCharacteristic:");
}

id objc_msgSend__updateService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateService:");
}

id objc_msgSend__validateCharacteristicValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateCharacteristicValues");
}

id objc_msgSend__validateGeneratedBroadcastKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateGeneratedBroadcastKey:");
}

id objc_msgSend__validateMandatoryCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateMandatoryCharacteristics");
}

id objc_msgSend__validateProtocolInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateProtocolInfo:");
}

id objc_msgSend__validateServiceCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateServiceCharacteristics");
}

id objc_msgSend__wakeWithTuple_dnsName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wakeWithTuple:dnsName:");
}

id objc_msgSend__writeCharacteristicRequests_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeCharacteristicRequests:completion:");
}

id objc_msgSend__writeData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeData:completion:");
}

id objc_msgSend__writeValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend_abnormalReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abnormalReasons");
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessories");
}

id objc_msgSend_accessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessory");
}

id objc_msgSend_accessory_didReceiveBulkSessionCandidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessory:didReceiveBulkSessionCandidate:");
}

id objc_msgSend_accessory_didUpdateConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessory:didUpdateConnectionState:");
}

id objc_msgSend_accessory_didUpdateReachabilityState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessory:didUpdateReachabilityState:");
}

id objc_msgSend_accessoryCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryCache");
}

id objc_msgSend_accessoryDidCloseDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryDidCloseDataStream:");
}

id objc_msgSend_accessoryDidStartListening_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryDidStartListening:");
}

id objc_msgSend_accessoryIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryIdentifier");
}

id objc_msgSend_accessoryKeySalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryKeySalt");
}

id objc_msgSend_accessoryMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryMetadata");
}

id objc_msgSend_accessoryName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryName");
}

id objc_msgSend_accessoryRequestToSend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryRequestToSend");
}

id objc_msgSend_accessoryServer_authenticateUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:authenticateUUID:token:");
}

id objc_msgSend_accessoryServer_confirmUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:confirmUUID:token:");
}

id objc_msgSend_accessoryServer_didDiscoverAccessories_transaction_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didDiscoverAccessories:transaction:error:");
}

id objc_msgSend_accessoryServer_didFinishAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didFinishAuth:");
}

id objc_msgSend_accessoryServer_didReceiveBadPasswordThrottleAttemptsWithDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didReceiveBadPasswordThrottleAttemptsWithDelay:");
}

id objc_msgSend_accessoryServer_didStopPairingWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didStopPairingWithError:");
}

id objc_msgSend_accessoryServer_didUpdateValuesForCharacteristic_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didUpdateValuesForCharacteristic:value:");
}

id objc_msgSend_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:");
}

id objc_msgSend_accessoryServer_promptUserForPasswordWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:promptUserForPasswordWithType:");
}

id objc_msgSend_accessoryServer_requestUserPermission_accessoryInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:requestUserPermission:accessoryInfo:error:");
}

id objc_msgSend_accessoryServer_validateCert_model_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:validateCert:model:");
}

id objc_msgSend_accessoryServer_validateUUID_token_model_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServer:validateUUID:token:model:");
}

id objc_msgSend_accessoryServerBTLE_didReceiveEncryptedAndAuthenticatedPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServerBTLE:didReceiveEncryptedAndAuthenticatedPayload:forCharacteristic:");
}

id objc_msgSend_accessoryServerBTLE_didReceivePlaintextPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServerBTLE:didReceivePlaintextPayload:forCharacteristic:");
}

id objc_msgSend_accessoryServerBTLE_willSendEncryptedAndAuthenticatedPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServerBTLE:willSendEncryptedAndAuthenticatedPayload:forCharacteristic:");
}

id objc_msgSend_accessoryServerBTLE_willSendPlaintextPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryServerBTLE:willSendPlaintextPayload:forCharacteristic:");
}

id objc_msgSend_activeBulkSendSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeBulkSendSessions");
}

id objc_msgSend_activeReadHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeReadHandler");
}

id objc_msgSend_activeTransitionContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeTransitionContexts");
}

id objc_msgSend_addBulkSendListener_fileType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulkSendListener:fileType:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addListener_fileType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListener:fileType:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addProtocol_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProtocol:name:");
}

id objc_msgSend_addTLV_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTLV:data:");
}

id objc_msgSend_advertisedProtocolVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisedProtocolVersion");
}

id objc_msgSend_allAccessoryPairingKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAccessoryPairingKeys");
}

id objc_msgSend_allNumbersIntervalString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allNumbersIntervalString");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowAssociatedService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowAssociatedService");
}

id objc_msgSend_allowsKeyedCoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsKeyedCoding");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:error:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationProtocolName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationProtocolName");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assembledFragment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assembledFragment");
}

id objc_msgSend_associateAccessoryWithControllerKey_usingAccessoryPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateAccessoryWithControllerKey:usingAccessoryPublicKey:");
}

id objc_msgSend_associateAccessoryWithControllerKeyUsingAccessoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateAccessoryWithControllerKeyUsingAccessoryIdentifier:");
}

id objc_msgSend_associateAccessoryWithControllerKeyUsingAccessoryPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateAccessoryWithControllerKeyUsingAccessoryPublicKey:");
}

id objc_msgSend_asyncBulkSendSessionCandidate_didAcceptOnQueue_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncBulkSendSessionCandidate:didAcceptOnQueue:callback:");
}

id objc_msgSend_asyncBulkSendSessionCandidate_didRejectWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncBulkSendSessionCandidate:didRejectWithStatus:");
}

id objc_msgSend_asyncBulkSendSessionDidCancelSessionWithIdentifier_reason_hadReceivedEof_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncBulkSendSessionDidCancelSessionWithIdentifier:reason:hadReceivedEof:completion:");
}

id objc_msgSend_asyncHandleIncomingPackets_isEof_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncHandleIncomingPackets:isEof:");
}

id objc_msgSend_asyncHandleRemoteCloseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncHandleRemoteCloseWithError:");
}

id objc_msgSend_atvState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "atvState");
}

id objc_msgSend_atvState2String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "atvState2String:");
}

id objc_msgSend_audioDiagnostics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioDiagnostics");
}

id objc_msgSend_authMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authMethod");
}

id objc_msgSend_authSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession");
}

id objc_msgSend_authSession_authComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession:authComplete:");
}

id objc_msgSend_authSession_authenticateUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession:authenticateUUID:token:");
}

id objc_msgSend_authSession_confirmUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession:confirmUUID:token:");
}

id objc_msgSend_authSession_sendAuthExchangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession:sendAuthExchangeData:");
}

id objc_msgSend_authSession_validateUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSession:validateUUID:token:");
}

id objc_msgSend_authenticateAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateAccessory");
}

id objc_msgSend_authenticated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticated");
}

id objc_msgSend_authenticatedProtocolInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticatedProtocolInfo");
}

id objc_msgSend_authorizationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationData");
}

id objc_msgSend_availableKeysToTry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableKeysToTry");
}

id objc_msgSend_bandwidthFromATVState_MinBandwidth_MaxBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bandwidthFromATVState:MinBandwidth:MaxBandwidth:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_bitPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bitPosition");
}

id objc_msgSend_blePeripheral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blePeripheral");
}

id objc_msgSend_body(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "body");
}

id objc_msgSend_bodyLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyLength");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_broadcastEnable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcastEnable");
}

id objc_msgSend_broadcastInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcastInterval");
}

id objc_msgSend_broadcastKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcastKey");
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browser");
}

id objc_msgSend_btleToServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btleToServiceType:");
}

id objc_msgSend_btleuuidStr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btleuuidStr");
}

id objc_msgSend_buildUnencryptedOPACKHeader_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildUnencryptedOPACKHeader:payload:error:");
}

id objc_msgSend_bulkSendProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bulkSendProtocol");
}

id objc_msgSend_bulkSendSessionContextFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bulkSendSessionContextFactory");
}

id objc_msgSend_byteReader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "byteReader");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_bytesNeededForCurrentFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytesNeededForCurrentFrame");
}

id objc_msgSend_bytesWritten(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytesWritten");
}

id objc_msgSend_cachedAccessoryForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAccessoryForIdentifier:");
}

id objc_msgSend_cachedCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedCharacteristics");
}

id objc_msgSend_cachedServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedServices");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callback");
}

id objc_msgSend_canAcceptBulkSendListeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAcceptBulkSendListeners");
}

id objc_msgSend_cancelAllOperationsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperationsWithError:");
}

id objc_msgSend_cancelSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelSetup");
}

id objc_msgSend_cancelWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithError:");
}

id objc_msgSend_cancelWithReason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithReason:completion:");
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "category");
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryIdentifier");
}

id objc_msgSend_cbCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cbCharacteristic");
}

id objc_msgSend_cbPeripheral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cbPeripheral");
}

id objc_msgSend_cbService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cbService");
}

id objc_msgSend_certificationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificationStatus");
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charValue");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristic");
}

id objc_msgSend_characteristicEnableEventCompletionHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicEnableEventCompletionHandlers");
}

id objc_msgSend_characteristicInstanceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicInstanceId");
}

id objc_msgSend_characteristicMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicMetadata");
}

id objc_msgSend_characteristicOfType_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicOfType:serviceType:");
}

id objc_msgSend_characteristicProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicProperties");
}

id objc_msgSend_characteristicSignatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicSignatures");
}

id objc_msgSend_characteristicType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicType");
}

id objc_msgSend_characteristicTypeFromUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicTypeFromUTI:");
}

id objc_msgSend_characteristicUTIFromType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicUTIFromType:");
}

id objc_msgSend_characteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicUUID");
}

id objc_msgSend_characteristicWriteCompletionHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicWriteCompletionHandlers");
}

id objc_msgSend_characteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristics");
}

id objc_msgSend_characteristicsOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicsOfType:");
}

id objc_msgSend_chipFabricIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chipFabricIndex");
}

id objc_msgSend_chrDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chrDescription");
}

id objc_msgSend_clientQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientQueue");
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "close");
}

id objc_msgSend_closeInitiated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeInitiated");
}

id objc_msgSend_closeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithError:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "command");
}

id objc_msgSend_communicationProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationProtocol");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_comparisonBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comparisonBlock");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completion");
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionHandler");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configNumber");
}

id objc_msgSend_configurationRequestForCharacteristic_isBroadcasted_interval_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationRequestForCharacteristic:isBroadcasted:interval:error:");
}

id objc_msgSend_configurationRequestForService_configRequestType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationRequestForService:configRequestType:error:");
}

id objc_msgSend_configurations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurations");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connect");
}

id objc_msgSend_connectReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectReason");
}

id objc_msgSend_connectToBTLEAccessoryServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToBTLEAccessoryServer:");
}

id objc_msgSend_connectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectWithCompletionHandler:");
}

id objc_msgSend_connectionCompletionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionCompletionHandler");
}

id objc_msgSend_connectionIdleTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionIdleTime");
}

id objc_msgSend_connectionIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionIdleTimer");
}

id objc_msgSend_connectionStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionStartTime");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionState");
}

id objc_msgSend_connectionTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTimer");
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraints");
}

id objc_msgSend_constructInfoRequest_outTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructInfoRequest:outTID:");
}

id objc_msgSend_constructRequestHeaderFor_instanceID_outTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructRequestHeaderFor:instanceID:outTID:");
}

id objc_msgSend_constructTokenRequest_outTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructTokenRequest:outTID:");
}

id objc_msgSend_constructTokenUpdateRequest_token_outTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructTokenUpdateRequest:token:outTID:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contextData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextData");
}

id objc_msgSend_continueAuthAfterValidation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueAuthAfterValidation:");
}

id objc_msgSend_continuePairingAfterAuthPrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuePairingAfterAuthPrompt");
}

id objc_msgSend_continueStreamSetupWithResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueStreamSetupWithResponse:");
}

id objc_msgSend_controlOutputStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlOutputStream");
}

id objc_msgSend_controlOutputStream_didCloseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlOutputStream:didCloseWithError:");
}

id objc_msgSend_controlOutputStream_didReceiveRequestToSendControlPacket_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlOutputStream:didReceiveRequestToSendControlPacket:completionHandler:");
}

id objc_msgSend_controlOutputStreamDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlOutputStreamDidComplete:");
}

id objc_msgSend_controlOutputStreamDidOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlOutputStreamDidOpen:");
}

id objc_msgSend_controlPayloadWrittenLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlPayloadWrittenLength");
}

id objc_msgSend_controlProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlProtocol");
}

id objc_msgSend_controllerContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerContext");
}

id objc_msgSend_controllerKeyIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerKeyIdentifier");
}

id objc_msgSend_controllerKeySalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerKeySalt");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAddPairingRequestForPairingIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAddPairingRequestForPairingIdentity:error:");
}

id objc_msgSend_createListPairingsRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createListPairingsRequest:");
}

id objc_msgSend_createRemovePairingRequestForPairingIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRemovePairingRequestForPairingIdentity:error:");
}

id objc_msgSend_createRequestIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestIdentifier");
}

id objc_msgSend_creationBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationBlock");
}

id objc_msgSend_currentChunkSequenceNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentChunkSequenceNumber");
}

id objc_msgSend_currentDiscoveryVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDiscoveryVersion");
}

id objc_msgSend_currentIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentIdentity");
}

id objc_msgSend_currentIndexInBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentIndexInBag");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentPacketTransactionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPacketTransactionIdentifier");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentTID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTID");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStream");
}

id objc_msgSend_dataStream_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStream:didFailWithError:");
}

id objc_msgSend_dataStream_didReceiveEvent_header_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStream:didReceiveEvent:header:payload:");
}

id objc_msgSend_dataStream_didReceiveRequest_header_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStream:didReceiveRequest:header:payload:");
}

id objc_msgSend_dataStream_didReceiveResponse_header_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStream:didReceiveResponse:header:payload:");
}

id objc_msgSend_dataStreamDidClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamDidClose:");
}

id objc_msgSend_dataStreamDidOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamDidOpen:");
}

id objc_msgSend_dataStreamDidReceiveRawFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamDidReceiveRawFrame:");
}

id objc_msgSend_dataStreamDidUpdateActiveStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamDidUpdateActiveStatus:");
}

id objc_msgSend_dataStreamFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamFactory");
}

id objc_msgSend_dataStreamInitializationSetupOperation_didCompleteSupportReadWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamInitializationSetupOperation:didCompleteSupportReadWithStatus:");
}

id objc_msgSend_dataStreamInitiatedClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamInitiatedClose:");
}

id objc_msgSend_dataStreamSetupOperation_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamSetupOperation:didFailWithError:");
}

id objc_msgSend_dataStreamSetupOperation_didSucceedWithTransport_sessionEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamSetupOperation:didSucceedWithTransport:sessionEncryption:");
}

id objc_msgSend_dataStreamTransportInterruptSequenceNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStreamTransportInterruptSequenceNumber");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataUsingEncoding_allowLossyConversion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:allowLossyConversion:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_deRegisterAccessoryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deRegisterAccessoryWithIdentifier:");
}

id objc_msgSend_decodeArrayOfObjectsOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeArrayOfObjectsOfClass:forKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrypt_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrypt:additionalAuthenticatedData:error:");
}

id objc_msgSend_decrypt_length_additionalAuthData_additionalAuthDataLength_authTagData_authTagDataLength_counterData_counterDataLength_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrypt:length:additionalAuthData:additionalAuthDataLength:authTagData:authTagDataLength:counterData:counterDataLength:error:");
}

id objc_msgSend_decryptData_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptData:additionalAuthenticatedData:error:");
}

id objc_msgSend_decryptEncryptedOPACKFrame_sessionEncryption_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptEncryptedOPACKFrame:sessionEncryption:receivedHeader:receivedPayload:error:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultDataStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDataStream");
}

id objc_msgSend_defaultDataValueTransformer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDataValueTransformer");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegateQueue");
}

id objc_msgSend_delegatesMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegatesMap");
}

id objc_msgSend_deletePeripheralIdentifierForAccessoryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePeripheralIdentifierForAccessoryIdentifier:error:");
}

id objc_msgSend_denylisted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "denylisted");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_description_indent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description:indent:");
}

id objc_msgSend_descriptionWithIndent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithIndent:");
}

id objc_msgSend_descriptors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptors");
}

id objc_msgSend_deviceIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIDString");
}

id objc_msgSend_deviceIdentifer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentifer");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier:");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectFromBTLEAccessoryServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectFromBTLEAccessoryServer:");
}

id objc_msgSend_disconnectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectWithCompletionHandler:");
}

id objc_msgSend_disconnectWithCompletionHandler_disconnectionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectWithCompletionHandler:disconnectionError:");
}

id objc_msgSend_discoverCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverCharacteristics:forService:");
}

id objc_msgSend_discoverDescriptorsForCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverDescriptorsForCharacteristic:");
}

id objc_msgSend_discoverServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverServices:");
}

id objc_msgSend_discoveredAccessoryCharacteriticsPendingRead(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveredAccessoryCharacteriticsPendingRead");
}

id objc_msgSend_discoveringCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveringCharacteristics");
}

id objc_msgSend_discoveringDescriptors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveringDescriptors");
}

id objc_msgSend_discoveringServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveringServices");
}

id objc_msgSend_discoveryContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryContext");
}

id objc_msgSend_discoveryRetries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryRetries");
}

id objc_msgSend_discoveryType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryType");
}

id objc_msgSend_discoveryVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryVersion");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_dkErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dkErrorWithCode:");
}

id objc_msgSend_dnsName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dnsName");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_durationInMS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationInMS");
}

id objc_msgSend_enableEvents_forCharacteristics_withCompletionHandler_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableEvents:forCharacteristics:withCompletionHandler:queue:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encrypt_additionalAuthenticatedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encrypt:additionalAuthenticatedData:");
}

id objc_msgSend_encryptData_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptData:additionalAuthenticatedData:error:");
}

id objc_msgSend_encryptEncryptedOPACKHeader_payload_sessionEncryption_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptEncryptedOPACKHeader:payload:sessionEncryption:error:");
}

id objc_msgSend_encryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryption");
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "end");
}

id objc_msgSend_endBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endBehavior");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDate");
}

id objc_msgSend_enhancedEncryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enhancedEncryption");
}

id objc_msgSend_enterTrackingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enterTrackingMode");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithOSStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithOSStatus:");
}

id objc_msgSend_establishRelationshipBetweenAccessoryAndControllerKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "establishRelationshipBetweenAccessoryAndControllerKey:error:");
}

id objc_msgSend_evaluateOptionsForSocket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateOptionsForSocket:");
}

id objc_msgSend_eventHeaderForProtocol_topic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventHeaderForProtocol:topic:");
}

id objc_msgSend_eventNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventNotificationsEnabled");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeWriteRequestForCharacteristic_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWriteRequestForCharacteristic:options:error:");
}

id objc_msgSend_expectedClassForFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedClassForFormat:");
}

id objc_msgSend_expectedTransformedClassForFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedTransformedClassForFormat:");
}

id objc_msgSend_extractNotificationContextFromBodyData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractNotificationContextFromBodyData:error:");
}

id objc_msgSend_extractSerializedRequestValueFromBodyData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractSerializedRequestValueFromBodyData:error:");
}

id objc_msgSend_featureFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureFlags");
}

id objc_msgSend_fileType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileType");
}

id objc_msgSend_filteredOrderedSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredOrderedSetUsingPredicate:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finish");
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareVersion");
}

id objc_msgSend_firstMessageReceived(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstMessageReceived");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceClose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceClose");
}

id objc_msgSend_format(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "format");
}

id objc_msgSend_fragmentSequenceNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fragmentSequenceNumber");
}

id objc_msgSend_fragmentationStream_didCloseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fragmentationStream:didCloseWithError:");
}

id objc_msgSend_fragmentationStream_didReceiveData_transactionIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fragmentationStream:didReceiveData:transactionIdentifier:error:");
}

id objc_msgSend_fulfillPendingRequestWithResponseHeader_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fulfillPendingRequestWithResponseHeader:payload:");
}

id objc_msgSend_generateDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDictionary");
}

id objc_msgSend_generateDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDictionary:");
}

id objc_msgSend_generateDictionary_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDictionary:metadata:");
}

id objc_msgSend_generateHAPMetadataTuplesDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateHAPMetadataTuplesDictionary:");
}

id objc_msgSend_generateSessionKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSessionKeys");
}

id objc_msgSend_getAccessoryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAccessoryInfo:");
}

id objc_msgSend_getAssociatedControllerKeyForAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAssociatedControllerKeyForAccessory:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCertificate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificate");
}

id objc_msgSend_getControllerPublicKey_secretKey_username_allowCreation_forAccessory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getControllerPublicKey:secretKey:username:allowCreation:forAccessory:error:");
}

id objc_msgSend_getCurrentIndexInBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentIndexInBag");
}

id objc_msgSend_getDefaultCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDefaultCharacteristicMetadata:");
}

id objc_msgSend_getDefaultCharacteristicProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDefaultCharacteristicProperties:");
}

id objc_msgSend_getDefaultServiceProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDefaultServiceProperties:");
}

id objc_msgSend_getLocalPairingIdentityWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalPairingIdentityWithError:");
}

id objc_msgSend_getSharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSharedInstance");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_handleAuthExchangeData_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAuthExchangeData:withHeader:");
}

id objc_msgSend_handleFirstMessageReceivedOnDataStream_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFirstMessageReceivedOnDataStream:payload:");
}

id objc_msgSend_handleIncomingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIncomingData:");
}

id objc_msgSend_handleOpenRequestResponseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOpenRequestResponseTimer");
}

id objc_msgSend_hapBLEProtocolVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapBLEProtocolVersion");
}

id objc_msgSend_hapBaseUUIDSuffix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapBaseUUIDSuffix");
}

id objc_msgSend_hapCharacteristicFromType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapCharacteristicFromType:");
}

id objc_msgSend_hapCharacteristicMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapCharacteristicMap");
}

id objc_msgSend_hapCharacteristicNameTypeMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapCharacteristicNameTypeMap");
}

id objc_msgSend_hapCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapCharacteristics");
}

id objc_msgSend_hapErrorWithcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapErrorWithcode:");
}

id objc_msgSend_hapErrorWithcode_description_reason_suggestion_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapErrorWithcode:description:reason:suggestion:underlyingError:");
}

id objc_msgSend_hapInstanceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapInstanceId");
}

id objc_msgSend_hapProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapProperties");
}

id objc_msgSend_hapPropertyMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapPropertyMap");
}

id objc_msgSend_hapServiceFromType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapServiceFromType:");
}

id objc_msgSend_hapServiceMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapServiceMap");
}

id objc_msgSend_hapServiceNameTypeMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapServiceNameTypeMap");
}

id objc_msgSend_hapServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapServices");
}

id objc_msgSend_hapSetupOperationWithAccessory_queue_logIdentifier_transferManagementService_maxControllerTransportMTU_setupOperationReadRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapSetupOperationWithAccessory:queue:logIdentifier:transferManagementService:maxControllerTransportMTU:setupOperationReadRequired:");
}

id objc_msgSend_hapSupportsAuthDataSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapSupportsAuthDataSet");
}

id objc_msgSend_hapUUIDFromBTLEUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapUUIDFromBTLEUUID:");
}

id objc_msgSend_hapUnitFromName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapUnitFromName:");
}

id objc_msgSend_hapUnitMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapUnitMap");
}

id objc_msgSend_hapValueUnits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapValueUnits");
}

id objc_msgSend_hap_cacheInstanceForMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hap_cacheInstanceForMetadata:");
}

id objc_msgSend_hasCompleteFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCompleteFrame");
}

id objc_msgSend_hasFailed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasFailed");
}

id objc_msgSend_hasPairings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPairings");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasValidCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValidCache");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_helloMessageResponseReceived(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "helloMessageResponseReceived");
}

id objc_msgSend_helloMessageResponseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "helloMessageResponseTimer");
}

id objc_msgSend_hmfErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmfErrorWithCode:");
}

id objc_msgSend_hmfErrorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmfErrorWithCode:userInfo:");
}

id objc_msgSend_hmf_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_arrayForKey:");
}

id objc_msgSend_hmf_BOOLForKey_isPresent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_BOOLForKey:isPresent:");
}

id objc_msgSend_hmf_cachedInstanceForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_cachedInstanceForString:");
}

id objc_msgSend_hmf_dataForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_dataForKey:");
}

id objc_msgSend_hmf_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_dictionaryForKey:");
}

id objc_msgSend_hmf_enqueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_enqueue:");
}

id objc_msgSend_hmf_enqueueMultiple_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_enqueueMultiple:");
}

id objc_msgSend_hmf_firstObjectWithValue_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_firstObjectWithValue:forKeyPath:");
}

id objc_msgSend_hmf_hexadecimalStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_hexadecimalStringWithOptions:");
}

id objc_msgSend_hmf_isEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_isEmpty");
}

id objc_msgSend_hmf_localTimeDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_localTimeDescription");
}

id objc_msgSend_hmf_maybeDequeue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_maybeDequeue");
}

id objc_msgSend_hmf_numberForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_numberForKey:");
}

id objc_msgSend_hmf_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hmf_stringForKey:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifyCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifyCharacteristic");
}

id objc_msgSend_idleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idleTimer");
}

id objc_msgSend_includeResponseValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeResponseValue");
}

id objc_msgSend_incrementHAPBTLEMetricsConnectionCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementHAPBTLEMetricsConnectionCount");
}

id objc_msgSend_incrementHAPBTLEMetricsDiscoveryCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementHAPBTLEMetricsDiscoveryCount");
}

id objc_msgSend_indentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indentation");
}

id objc_msgSend_indentationByLevels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indentationByLevels:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "index");
}

id objc_msgSend_indicateNotificationFromServer_notifyType_withDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indicateNotificationFromServer:notifyType:withDictionary:");
}

id objc_msgSend_infoData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoData");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromStart:toEnd:");
}

id objc_msgSend_initWithAccessory_forLinkType_durationInMS_reason_pvError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessory:forLinkType:durationInMS:reason:pvError:");
}

id objc_msgSend_initWithAccessory_queue_logIdentifier_transferManagementService_maxControllerTransportMTU_setupOperationReadRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessory:queue:logIdentifier:transferManagementService:maxControllerTransportMTU:setupOperationReadRequired:");
}

id objc_msgSend_initWithAccessory_sessionIdentifier_maxControllerTransportMTU_workQueue_logIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessory:sessionIdentifier:maxControllerTransportMTU:workQueue:logIdentifier:");
}

id objc_msgSend_initWithAccessoryIdentifier_keyStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessoryIdentifier:keyStore:");
}

id objc_msgSend_initWithAccessoryIdentifier_keyStore_controllerKeyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessoryIdentifier:keyStore:controllerKeyList:");
}

id objc_msgSend_initWithActiveTransitionContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActiveTransitionContexts:");
}

id objc_msgSend_initWithApplicationProtocolName_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationProtocolName:completion:");
}

id objc_msgSend_initWithBins_intervalCreationBlock_valueComparisonBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBins:intervalCreationBlock:valueComparisonBlock:");
}

id objc_msgSend_initWithBufferSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBufferSize:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacteristic:");
}

id objc_msgSend_initWithCharacteristic_requestType_bodyData_shouldEncrypt_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacteristic:requestType:bodyData:shouldEncrypt:timeoutInterval:");
}

id objc_msgSend_initWithCharacteristicType_serviceInstanceID_serviceType_characteristicProperties_characteristicMetadata_authenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacteristicType:serviceInstanceID:serviceType:characteristicProperties:characteristicMetadata:authenticated:");
}

id objc_msgSend_initWithCharacteristicType_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacteristicType:serviceType:");
}

id objc_msgSend_initWithCharacteristicUUID_instanceId_characteristicProperties_characteristicMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacteristicUUID:instanceId:characteristicProperties:characteristicMetadata:");
}

id objc_msgSend_initWithCommand_transportType_controllerKeySalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:transportType:controllerKeySalt:");
}

id objc_msgSend_initWithConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurations:");
}

id objc_msgSend_initWithConstraints_description_format_units_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConstraints:description:format:units:");
}

id objc_msgSend_initWithControlType_transactionIdentifier_continuationPacket_packetPayload_maximumLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithControlType:transactionIdentifier:continuationPacket:packetPayload:maximumLength:");
}

id objc_msgSend_initWithControlType_transactionIdentifier_controlPayload_mtuLength_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithControlType:transactionIdentifier:controlPayload:mtuLength:timeoutInterval:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:completion:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_sequenceNumber_fragmentSequenceNumber_type_isLast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:sequenceNumber:fragmentSequenceNumber:type:isLast:");
}

id objc_msgSend_initWithData_sequenceNumber_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:sequenceNumber:type:");
}

id objc_msgSend_initWithData_transactionIdentifier_length_offset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:transactionIdentifier:length:offset:");
}

id objc_msgSend_initWithDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStream:");
}

id objc_msgSend_initWithDeviceIDData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIDData:");
}

id objc_msgSend_initWithDeviceIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIDString:");
}

id objc_msgSend_initWithDiscoveryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDiscoveryType:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithFormat_type_audioDiagnostics_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:type:audioDiagnostics:options:");
}

id objc_msgSend_initWithHAPInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHAPInstanceID:");
}

id objc_msgSend_initWithHAPInstanceID_controllerContext_endBehavior_linearTransition_linearDerivedTransition_valueUpdateTimeInterval_notifyValueChangeThreshold_notifyTimeIntervalThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHAPInstanceID:controllerContext:endBehavior:linearTransition:linearDerivedTransition:valueUpdateTimeInterval:notifyValueChangeThreshold:notifyTimeIntervalThreshold:");
}

id objc_msgSend_initWithHAPInstanceID_controllerContext_timeElapsedSinceStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHAPInstanceID:controllerContext:timeElapsedSinceStart:");
}

id objc_msgSend_initWithHAPInstanceID_transitionTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHAPInstanceID:transitionTypes:");
}

id objc_msgSend_initWithIdentifier_controllerKeyIdentifier_publicKey_privateKey_permissions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:controllerKeyIdentifier:publicKey:privateKey:permissions:");
}

id objc_msgSend_initWithIdentifier_currentStateNumber_currentConfigNumber_modelName_protocolVersion_authMethods_statusFlags_categoryIdentifier_setupHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:currentStateNumber:currentConfigNumber:modelName:protocolVersion:authMethods:statusFlags:categoryIdentifier:setupHash:");
}

id objc_msgSend_initWithIdentifier_protocol_topic_payload_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:protocol:topic:payload:callback:");
}

id objc_msgSend_initWithIdentifier_publicKey_privateKey_permissions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:publicKey:privateKey:permissions:");
}

id objc_msgSend_initWithIdentifier_startTime_transitionChecksum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:startTime:transitionChecksum:");
}

id objc_msgSend_initWithInputKey_outputKey_enhancedEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInputKey:outputKey:enhancedEncryption:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithListener_fileType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListener:fileType:");
}

id objc_msgSend_initWithLogIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLogIdentifier:");
}

id objc_msgSend_initWithLowerBound_upperBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLowerBound:upperBound:");
}

id objc_msgSend_initWithMajorVersion_minorVersion_updateVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMajorVersion:minorVersion:updateVersion:");
}

id objc_msgSend_initWithMinLength_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMinLength:maxLength:");
}

id objc_msgSend_initWithMinValue_maxValue_stepValue_validValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMinValue:maxValue:stepValue:validValues:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:description:");
}

id objc_msgSend_initWithName_manufacturer_modelName_category_certificationStatus_denylisted_ppid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:manufacturer:modelName:category:certificationStatus:denylisted:ppid:");
}

id objc_msgSend_initWithName_uuid_description_format_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:uuid:description:format:properties:");
}

id objc_msgSend_initWithName_uuid_description_mandatoryChrTypes_properties_linkedServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:uuid:description:mandatoryChrTypes:properties:linkedServices:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithPairingIdentifier_saveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPairingIdentifier:saveBlock:");
}

id objc_msgSend_initWithPairingKeyData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPairingKeyData:");
}

id objc_msgSend_initWithPayload_forceClose_accessoryRequestToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:forceClose:accessoryRequestToSend:");
}

id objc_msgSend_initWithPayload_sessionIdentifier_forceClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:sessionIdentifier:forceClose:");
}

id objc_msgSend_initWithPeripheralInfo_advertisedProtocolVersion_previousProtocolVersion_resumeSessionId_lastSeen_statusFlags_stateNumber_configNumber_categoryIdentifier_accessoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPeripheralInfo:advertisedProtocolVersion:previousProtocolVersion:resumeSessionId:lastSeen:statusFlags:stateNumber:configNumber:categoryIdentifier:accessoryName:");
}

id objc_msgSend_initWithProtocol_requestHeader_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtocol:requestHeader:metadata:");
}

id objc_msgSend_initWithProtocol_sessionIdentifier_queue_logIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtocol:sessionIdentifier:queue:logIdentifier:");
}

id objc_msgSend_initWithProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtocol:topic:payload:completion:");
}

id objc_msgSend_initWithQueue_accessory_logIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:accessory:logIdentifier:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithRequestToSendIdentifiers_dataStreamTransportInterruptSequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestToSendIdentifiers:dataStreamTransportInterruptSequenceNumber:");
}

id objc_msgSend_initWithRole_instanceId_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRole:instanceId:delegate:");
}

id objc_msgSend_initWithRole_resumeSessionID_enhancedEncryption_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRole:resumeSessionID:enhancedEncryption:delegate:");
}

id objc_msgSend_initWithScale_offset_targetCompletionDuration_startDelayDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScale:offset:targetCompletionDuration:startDelayDuration:");
}

id objc_msgSend_initWithServer_instanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServer:instanceID:");
}

id objc_msgSend_initWithServiceType_serviceInstanceID_serviceProperties_linkedServices_authenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceType:serviceInstanceID:serviceProperties:linkedServices:authenticated:");
}

id objc_msgSend_initWithServiceUUID_instanceId_instanceOrder_serviceProperties_linkedServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceUUID:instanceId:instanceOrder:serviceProperties:linkedServices:");
}

id objc_msgSend_initWithSession_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:payload:");
}

id objc_msgSend_initWithSessionStartCallback_handleOpenRequestResponseTimer_sendCloseEventTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionStartCallback:handleOpenRequestResponseTimer:sendCloseEventTimer:");
}

id objc_msgSend_initWithStagingNotReadyReasons_updateNotReadyReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStagingNotReadyReasons:updateNotReadyReasons:");
}

id objc_msgSend_initWithState_abnormalReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:abnormalReasons:");
}

id objc_msgSend_initWithState_updateDuration_stagedFirmwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:updateDuration:stagedFirmwareVersion:");
}

id objc_msgSend_initWithStatus_parameters_accessoryKeySalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatus:parameters:accessoryKeySalt:");
}

id objc_msgSend_initWithStreamProtocol_applicationProtocolName_workQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStreamProtocol:applicationProtocolName:workQueue:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithTargetValue_targetCompletionDuration_startDelayDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetValue:targetCompletionDuration:startDelayDuration:");
}

id objc_msgSend_initWithTcpListeningPort_sessionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTcpListeningPort:sessionIdentifier:");
}

id objc_msgSend_initWithTimeInterval_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:options:");
}

id objc_msgSend_initWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeout:");
}

id objc_msgSend_initWithTlvId_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTlvId:name:");
}

id objc_msgSend_initWithTransitionFetch_transitionStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransitionFetch:transitionStart:");
}

id objc_msgSend_initWithTransitionPoints_sourceHAPInstanceID_sourceValueRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransitionPoints:sourceHAPInstanceID:sourceValueRange:");
}

id objc_msgSend_initWithTransitionPoints_startBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransitionPoints:startBehavior:");
}

id objc_msgSend_initWithTransitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransitions:");
}

id objc_msgSend_initWithTransport_maximumControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransport:maximumControllerTransportMTU:");
}

id objc_msgSend_initWithTransport_sessionEncryption_workQueue_logIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransport:sessionEncryption:workQueue:logIdentifier:");
}

id objc_msgSend_initWithTransport_sessionEncryption_workQueue_logIdentifier_connectionTimer_helloMessageResponseTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransport:sessionEncryption:workQueue:logIdentifier:connectionTimer:helloMessageResponseTimer:");
}

id objc_msgSend_initWithType_bitPosition_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:bitPosition:description:");
}

id objc_msgSend_initWithType_instanceID_parsedCharacteristics_serviceProperties_linkedServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:instanceID:parsedCharacteristics:serviceProperties:linkedServices:");
}

id objc_msgSend_initWithType_instanceID_value_stateNumber_properties_eventNotificationsEnabled_implicitWriteWithResponse_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:instanceID:value:stateNumber:properties:eventNotificationsEnabled:implicitWriteWithResponse:metadata:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnsignedCharValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedCharValue:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithUpdateDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUpdateDuration:");
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:");
}

id objc_msgSend_initWithValueTransition_transitionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValueTransition:transitionState:");
}

id objc_msgSend_initWithVersionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVersionString:");
}

id objc_msgSend_initializeKeyBagIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeKeyBagIfNecessary");
}

id objc_msgSend_inputKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputKey");
}

id objc_msgSend_inputNonce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputNonce");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceID");
}

id objc_msgSend_instanceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceId");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_internalDelegateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalDelegateQueue");
}

id objc_msgSend_internalDelegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalDelegates");
}

id objc_msgSend_interruptCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interruptCharacteristic");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intervalIndexForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalIndexForValue:");
}

id objc_msgSend_intervals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervals");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isAccessoryAssociatedWithControllerKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccessoryAssociatedWithControllerKey:");
}

id objc_msgSend_isAccessoryAssociatedWithControllerKey_controllerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccessoryAssociatedWithControllerKey:controllerID:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthenticated");
}

id objc_msgSend_isBadSetupCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBadSetupCode");
}

id objc_msgSend_isBodyComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBodyComplete");
}

id objc_msgSend_isCached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCached");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isClosed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClosed");
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isComplete");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isContinuationPacket(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContinuationPacket");
}

id objc_msgSend_isDiscovering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDiscovering");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEncrypted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEncrypted");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCharacteristic:");
}

id objc_msgSend_isEqualToCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCharacteristicMetadata:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDeviceID:");
}

id objc_msgSend_isEqualToMetadataConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToMetadataConstraints:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpectedHelloControlMessage_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpectedHelloControlMessage:header:");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isHAPCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHAPCharacteristic:");
}

id objc_msgSend_isHAPDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHAPDescriptor:");
}

id objc_msgSend_isHAPError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHAPError");
}

id objc_msgSend_isHAPService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHAPService:");
}

id objc_msgSend_isHeaderComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHeaderComplete");
}

id objc_msgSend_isIncompatibleUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIncompatibleUpdate");
}

id objc_msgSend_isLast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLast");
}

id objc_msgSend_isOpen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOpen");
}

id objc_msgSend_isOpening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOpening");
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaired");
}

id objc_msgSend_isPaired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaired:");
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPairing");
}

id objc_msgSend_isPerformingGeneralScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPerformingGeneralScan");
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrimary");
}

id objc_msgSend_isSecureSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSecureSession");
}

id objc_msgSend_isSecuritySessionOpen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSecuritySessionOpen");
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubsetOfSet:");
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSuspended");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidFormat:");
}

id objc_msgSend_isValidIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidIndex:");
}

id objc_msgSend_isVerified(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVerified");
}

id objc_msgSend_isWriteInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWriteInProgress");
}

id objc_msgSend_isWriteWithResponseImplicitlySupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWriteWithResponseImplicitlySupported");
}

id objc_msgSend_isoCountryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isoCountryCode");
}

id objc_msgSend_keyBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyBag");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyStore");
}

id objc_msgSend_keyUpdatedStateNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyUpdatedStateNumber");
}

id objc_msgSend_keyUpdatedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyUpdatedTime");
}

id objc_msgSend_kick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kick");
}

id objc_msgSend_lastAccessoryRequestToSendFlag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAccessoryRequestToSendFlag");
}

id objc_msgSend_lastKeyBagIdentityIndexFailingPV(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKeyBagIdentityIndexFailingPV");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastSeen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSeen");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_linearDerivedTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linearDerivedTransition");
}

id objc_msgSend_linearTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linearTransition");
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkType");
}

id objc_msgSend_linkedServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedServices");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listener");
}

id objc_msgSend_listeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeners");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_logCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logCategory");
}

id objc_msgSend_logDispatcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDispatcher");
}

id objc_msgSend_logIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logIdentifier");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_lowerBound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowerBound");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_majorVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "majorVersion");
}

id objc_msgSend_makeTupleWithATVState_MaxHAPConnections_MinBandwidth_MaxBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeTupleWithATVState:MaxHAPConnections:MinBandwidth:MaxBandwidth:");
}

id objc_msgSend_mandatoryCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mandatoryCharacteristics");
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manufacturer");
}

id objc_msgSend_manufacturerDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manufacturerDescription");
}

id objc_msgSend_markNotifyingCharacteristicUpdatedForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markNotifyingCharacteristicUpdatedForIdentifier:");
}

id objc_msgSend_markNotifyingCharacteristicUpdatedforCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markNotifyingCharacteristicUpdatedforCharacteristic:");
}

id objc_msgSend_markWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markWithReason:");
}

id objc_msgSend_matchesResponseHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesResponseHeader:");
}

id objc_msgSend_matchesSetupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesSetupID:");
}

id objc_msgSend_maxControllerTransportMTU(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxControllerTransportMTU");
}

id objc_msgSend_maxLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxLength");
}

id objc_msgSend_maxValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxValue");
}

id objc_msgSend_maximumControllerTransportMTU(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumControllerTransportMTU");
}

id objc_msgSend_maximumValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumValue");
}

id objc_msgSend_maximumWriteValueLengthForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumWriteValueLengthForType:");
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_mergeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeObject:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_metadataVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataVersion");
}

id objc_msgSend_metric_pairVerifyDurationInMS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metric_pairVerifyDurationInMS");
}

id objc_msgSend_metric_pairVerifyReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metric_pairVerifyReason");
}

id objc_msgSend_minLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minLength");
}

id objc_msgSend_minValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minValue");
}

id objc_msgSend_minimumValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumValue");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelName");
}

id objc_msgSend_movePendingBulkSendListenersToBulkSendProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movePendingBulkSendListenersToBulkSendProtocol:");
}

id objc_msgSend_mtuLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mtuLength");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_negativeInfinityIntervalString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "negativeInfinityIntervalString");
}

id objc_msgSend_nextIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextIdentity");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextRequestIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextRequestIdentifier");
}

id objc_msgSend_nextSessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSessionIdentifier");
}

id objc_msgSend_notificationContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationContext");
}

id objc_msgSend_notifyTimeIntervalThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyTimeIntervalThreshold");
}

id objc_msgSend_notifyValueChangeThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyValueChangeThreshold");
}

id objc_msgSend_notifyingCharacteristicUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyingCharacteristicUpdated");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberValue");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objCType");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectCreator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectCreator");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offset");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "open");
}

id objc_msgSend_openClosedIntervalFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openClosedIntervalFromStart:toEnd:");
}

id objc_msgSend_openOpenIntervalFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOpenIntervalFromStart:toEnd:");
}

id objc_msgSend_openSessionForFileType_reason_metadata_queue_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSessionForFileType:reason:metadata:queue:callback:");
}

id objc_msgSend_operation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operations");
}

id objc_msgSend_optionalCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionalCharacteristics");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_outputKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputKey");
}

id objc_msgSend_outputNonce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputNonce");
}

id objc_msgSend_ownershipToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownershipToken");
}

id objc_msgSend_packetWithSerializedData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packetWithSerializedData:error:");
}

id objc_msgSend_pairSetupBackoffTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupBackoffTimeInterval");
}

id objc_msgSend_pairSetupCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupCharacteristic");
}

id objc_msgSend_pairSetupSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupSession");
}

id objc_msgSend_pairSetupSession_pairSetupType_enhancedEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupSession:pairSetupType:enhancedEncryption:");
}

id objc_msgSend_pairVerifyCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairVerifyCharacteristic");
}

id objc_msgSend_pairVerifyOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairVerifyOperationQueue");
}

id objc_msgSend_pairingActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingActivity");
}

id objc_msgSend_pairingDisconnectionError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingDisconnectionError");
}

id objc_msgSend_pairingFeaturesCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingFeaturesCharacteristic");
}

id objc_msgSend_pairingIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingIdentifier");
}

id objc_msgSend_pairingIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingIdentity");
}

id objc_msgSend_pairingRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingRequest");
}

id objc_msgSend_pairingSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingSession");
}

id objc_msgSend_pairingsCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingsCharacteristic");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parameters");
}

id objc_msgSend_parseAddPairingResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseAddPairingResponse:error:");
}

id objc_msgSend_parseCharacteristicConfigurationResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseCharacteristicConfigurationResponse:error:");
}

id objc_msgSend_parseCharacteristicServiceTuples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseCharacteristicServiceTuples:");
}

id objc_msgSend_parseCharacteristicValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseCharacteristicValue:");
}

id objc_msgSend_parseCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseCharacteristics:");
}

id objc_msgSend_parseFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseFromData:error:");
}

id objc_msgSend_parseInfoResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseInfoResponse:expectedTID:withHeader:");
}

id objc_msgSend_parseListPairingsResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseListPairingsResponse:error:");
}

id objc_msgSend_parseMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseMetadata:");
}

id objc_msgSend_parseProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseProperties:");
}

id objc_msgSend_parseProtocolConfigurationResponse_key_stateNumber_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseProtocolConfigurationResponse:key:stateNumber:error:");
}

id objc_msgSend_parseReadResponse_value_notificationContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseReadResponse:value:notificationContext:error:");
}

id objc_msgSend_parseRemovePairingResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseRemovePairingResponse:error:");
}

id objc_msgSend_parseResponseForArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForArray:");
}

id objc_msgSend_parseResponseForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForData:");
}

id objc_msgSend_parseResponseForNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForNumber:");
}

id objc_msgSend_parseResponseForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForString:");
}

id objc_msgSend_parseResponseForUInt16_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForUInt16:");
}

id objc_msgSend_parseResponseForUInt8_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForUInt8:");
}

id objc_msgSend_parseResponseForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseResponseForUUID:");
}

id objc_msgSend_parseServiceCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseServiceCharacteristics:");
}

id objc_msgSend_parseServiceSignatureResponse_serviceInstanceID_serviceType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseServiceSignatureResponse:serviceInstanceID:serviceType:error:");
}

id objc_msgSend_parseServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseServices:");
}

id objc_msgSend_parseSignatureResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseSignatureResponse:error:");
}

id objc_msgSend_parseTokenResponse_expectedTID_withHeader_outToken_outUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseTokenResponse:expectedTID:withHeader:outToken:outUUID:");
}

id objc_msgSend_parseTokenUpdateResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseTokenUpdateResponse:expectedTID:withHeader:");
}

id objc_msgSend_parseUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseUnits:");
}

id objc_msgSend_parseVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseVersion:");
}

id objc_msgSend_parseWriteResponse_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseWriteResponse:value:error:");
}

id objc_msgSend_parsedFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parsedFromData:error:");
}

id objc_msgSend_parsedUUIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parsedUUIDs");
}

id objc_msgSend_parserWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserWithData:");
}

id objc_msgSend_pauseScans(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseScans");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payload");
}

id objc_msgSend_pendingBulkSendListeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingBulkSendListeners");
}

id objc_msgSend_pendingBulkSendSessionContextBySessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingBulkSendSessionContextBySessionIdentifier");
}

id objc_msgSend_pendingError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingError");
}

id objc_msgSend_pendingEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingEvents");
}

id objc_msgSend_pendingHelloMessageIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingHelloMessageIdentifier");
}

id objc_msgSend_pendingPackets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingPackets");
}

id objc_msgSend_pendingReads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingReads");
}

id objc_msgSend_pendingRemovePairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingRemovePairing");
}

id objc_msgSend_pendingRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingRequests");
}

id objc_msgSend_pendingResponses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingResponses");
}

id objc_msgSend_pendingSocketRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingSocketRequests");
}

id objc_msgSend_pendingWrites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingWrites");
}

id objc_msgSend_peripheral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheral");
}

id objc_msgSend_peripheralInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheralInfo");
}

id objc_msgSend_peripheralUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheralUUID");
}

id objc_msgSend_peripheralUUIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheralUUIDs");
}

id objc_msgSend_permissions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permissions");
}

id objc_msgSend_popNextFrameUpToMaxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popNextFrameUpToMaxLength:");
}

id objc_msgSend_popRawFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popRawFrame");
}

id objc_msgSend_positiveInfinityEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "positiveInfinityEnd");
}

id objc_msgSend_positiveInfinityIntervalString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "positiveInfinityIntervalString");
}

id objc_msgSend_postDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDidFailWithError:");
}

id objc_msgSend_postDidSucceedWithTransport_sessionEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDidSucceedWithTransport:sessionEncryption:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_ppid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ppid");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_preferenceForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferenceForKey:");
}

id objc_msgSend_prepareWriteRequestForCharacteristic_value_authorizationData_contextData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWriteRequestForCharacteristic:value:authorizationData:contextData:options:error:");
}

id objc_msgSend_previousProtocolVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousProtocolVersion");
}

id objc_msgSend_primaryAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryAccessory");
}

id objc_msgSend_privateKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateKey");
}

id objc_msgSend_processTransportSetupResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTransportSetupResponse:");
}

id objc_msgSend_productData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productData");
}

id objc_msgSend_productDataStringFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productDataStringFromData:");
}

id objc_msgSend_productInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productInfo");
}

id objc_msgSend_productVariant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productVariant");
}

id objc_msgSend_prohibitCaching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prohibitCaching");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "properties");
}

id objc_msgSend_propertiesDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesDescription");
}

id objc_msgSend_propertyDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyDescription");
}

id objc_msgSend_propertyType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyType");
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocol");
}

id objc_msgSend_protocolDelegateHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolDelegateHandle");
}

id objc_msgSend_protocolDidUpdateActiveStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolDidUpdateActiveStatus:");
}

id objc_msgSend_protocolInfoServiceSignatureCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolInfoServiceSignatureCharacteristics");
}

id objc_msgSend_protocolName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolName");
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolVersion");
}

id objc_msgSend_protocolWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolWithName:");
}

id objc_msgSend_protocols(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocols");
}

id objc_msgSend_provisionUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provisionUUID");
}

id objc_msgSend_psk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "psk");
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicKey");
}

id objc_msgSend_pushFrameData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushFrameData:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_randomTransactionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomTransactionIdentifier");
}

id objc_msgSend_readCharacteristicValues_timeout_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readCharacteristicValues:timeout:completionQueue:completionHandler:");
}

id objc_msgSend_readControllerPairingKeyForAccessory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readControllerPairingKeyForAccessory:error:");
}

id objc_msgSend_readHeaderFromPartialData_frameType_payloadLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readHeaderFromPartialData:frameType:payloadLength:");
}

id objc_msgSend_readPeripheralIdentifierForAccessoryIdentifier_protocolVersion_resumeSessionID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readPeripheralIdentifierForAccessoryIdentifier:protocolVersion:resumeSessionID:error:");
}

id objc_msgSend_readPublicKeyForAccessoryName_registeredWithHomeKit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readPublicKeyForAccessoryName:registeredWithHomeKit:error:");
}

id objc_msgSend_readRequestForCharacteristic_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readRequestForCharacteristic:options:error:");
}

id objc_msgSend_readValueForCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readValueForCharacteristic:");
}

id objc_msgSend_readValueForDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readValueForDescriptor:");
}

id objc_msgSend_readingCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingCharacteristics");
}

id objc_msgSend_readingDescriptors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingDescriptors");
}

id objc_msgSend_readingSignatureCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingSignatureCharacteristics");
}

id objc_msgSend_readingSignatureServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingSignatureServices");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_receivedFailure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFailure");
}

id objc_msgSend_receivedSetupExchangeData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedSetupExchangeData:error:");
}

id objc_msgSend_refreshKeyBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshKeyBag");
}

id objc_msgSend_refreshKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshKeys");
}

id objc_msgSend_registerSocket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSocket:");
}

id objc_msgSend_remainingControlPayloadLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remainingControlPayloadLength");
}

id objc_msgSend_removeAccessoryKeyForName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAccessoryKeyForName:error:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeBulkSendListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBulkSendListener:");
}

id objc_msgSend_removeCachedAccessoryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCachedAccessoryWithIdentifier:");
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removePairing_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePairing:completionQueue:completionHandler:");
}

id objc_msgSend_removePairingForCurrentControllerOnQueue_completion_serverPairingCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePairingForCurrentControllerOnQueue:completion:serverPairingCompletion:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "request");
}

id objc_msgSend_requestHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestHeader");
}

id objc_msgSend_requestHeaderForProtocol_topic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestHeaderForProtocol:topic:identifier:");
}

id objc_msgSend_requestMetadataForAuthToken_withUUID_requestedLocale_requestInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMetadataForAuthToken:withUUID:requestedLocale:requestInfo:completionHandler:");
}

id objc_msgSend_requestOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestOperationQueue");
}

id objc_msgSend_requestToSendIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestToSendIdentifiers");
}

id objc_msgSend_requiresUserConsent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresUserConsent");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetBroadcastKeyConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetBroadcastKeyConfig");
}

id objc_msgSend_resetSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSession");
}

id objc_msgSend_responseHeaderForRequestHeader_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseHeaderForRequestHeader:status:");
}

id objc_msgSend_responseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseTimer");
}

id objc_msgSend_responseTupleForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseTupleForCharacteristic:error:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeSessionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeSessionID");
}

id objc_msgSend_resumeSessionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeSessionId");
}

id objc_msgSend_reverseTransformedValue_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseTransformedValue:format:error:");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "role");
}

id objc_msgSend_saltData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saltData");
}

id objc_msgSend_save(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save");
}

id objc_msgSend_saveBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBlock");
}

id objc_msgSend_saveBroadcastKey_keyUpdatedStateNumber_updatedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBroadcastKey:keyUpdatedStateNumber:updatedTime:");
}

id objc_msgSend_saveCacheToDisk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCacheToDisk:");
}

id objc_msgSend_savePublicKey_forAccessoryName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savePublicKey:forAccessoryName:error:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_schemaVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "schemaVersion");
}

id objc_msgSend_securitySession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySession");
}

id objc_msgSend_securitySession_didCloseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySession:didCloseWithError:");
}

id objc_msgSend_securitySession_didReceiveLocalPairingIdentityRequestWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySession:didReceiveLocalPairingIdentityRequestWithError:");
}

id objc_msgSend_securitySession_didReceiveRequestForPeerPairingIdentityWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySession:didReceiveRequestForPeerPairingIdentityWithIdentifier:error:");
}

id objc_msgSend_securitySession_didReceiveSetupExchangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySession:didReceiveSetupExchangeData:");
}

id objc_msgSend_securitySessionDidOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySessionDidOpen:");
}

id objc_msgSend_securitySessionDidRequestAdditionalDerivedKeyTuples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySessionDidRequestAdditionalDerivedKeyTuples:");
}

id objc_msgSend_securitySessionIsOpening_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securitySessionIsOpening:");
}

id objc_msgSend_sendCloseEventTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloseEventTimer");
}

id objc_msgSend_sendData_socket_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:socket:completion:");
}

id objc_msgSend_sendEventForProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventForProtocol:topic:payload:completion:");
}

id objc_msgSend_sendRawFrame_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRawFrame:completion:");
}

id objc_msgSend_sendRequestForProtocol_topic_identifier_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestForProtocol:topic:identifier:payload:completion:");
}

id objc_msgSend_sendRequestForProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestForProtocol:topic:payload:completion:");
}

id objc_msgSend_sendResponseForRequestHeader_payload_status_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResponseForRequestHeader:payload:status:completion:");
}

id objc_msgSend_sendTargetControlWhoAmIWithIdentifier_dataStreamProtocolDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTargetControlWhoAmIWithIdentifier:dataStreamProtocolDelegate:");
}

id objc_msgSend_sendTokenUpdateRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTokenUpdateRequest:");
}

id objc_msgSend_sequenceNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequenceNumber");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumber");
}

id objc_msgSend_serialize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialize");
}

id objc_msgSend_serializeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeWithError:");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "server");
}

id objc_msgSend_serverIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverIdentifier");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service");
}

id objc_msgSend_serviceInstanceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceInstanceID");
}

id objc_msgSend_serviceInstanceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceInstanceId");
}

id objc_msgSend_serviceInstanceOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceInstanceOrder");
}

id objc_msgSend_serviceProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceProperties");
}

id objc_msgSend_serviceSignatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceSignatures");
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceType");
}

id objc_msgSend_serviceTypeFromUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceTypeFromUTI:");
}

id objc_msgSend_serviceUTIFromType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceUTIFromType:");
}

id objc_msgSend_serviceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceUUID");
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "services");
}

id objc_msgSend_servicesOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "servicesOfType:");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_sessionEncryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionEncryption");
}

id objc_msgSend_sessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionIdentifier");
}

id objc_msgSend_sessionStartCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStartCallback");
}

id objc_msgSend_sessionStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStartTime");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAbnormalReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAbnormalReasons:");
}

id objc_msgSend_setAccessories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessories:");
}

id objc_msgSend_setAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessory:");
}

id objc_msgSend_setAccessoryKeySalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryKeySalt:");
}

id objc_msgSend_setAccessoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryName:");
}

id objc_msgSend_setAccessoryRequestToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryRequestToSend:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActiveReadHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveReadHandler:");
}

id objc_msgSend_setActiveTransitionContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveTransitionContexts:");
}

id objc_msgSend_setAdditionalDerivedKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalDerivedKeys:");
}

id objc_msgSend_setAllowAssociatedService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowAssociatedService:");
}

id objc_msgSend_setAssembledFragment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssembledFragment:");
}

id objc_msgSend_setAtvState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAtvState:");
}

id objc_msgSend_setAudioDiagnostics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioDiagnostics:");
}

id objc_msgSend_setAuthMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthMethod:");
}

id objc_msgSend_setAuthSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthSession:");
}

id objc_msgSend_setAuthenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticated:");
}

id objc_msgSend_setAuthenticatedProtocolInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticatedProtocolInfo:");
}

id objc_msgSend_setAuthorizationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationData:");
}

id objc_msgSend_setBadPairSetupCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadPairSetupCode:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBroadcastEnable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBroadcastEnable:");
}

id objc_msgSend_setBroadcastInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBroadcastInterval:");
}

id objc_msgSend_setBroadcastKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBroadcastKey:");
}

id objc_msgSend_setBtleuuidStr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtleuuidStr:");
}

id objc_msgSend_setBytesWritten_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBytesWritten:");
}

id objc_msgSend_setCBCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCBCharacteristic:");
}

id objc_msgSend_setCBService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCBService:");
}

id objc_msgSend_setCachedCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedCharacteristics:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setCbPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCbPeripheral:");
}

id objc_msgSend_setCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristic:");
}

id objc_msgSend_setCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristicMetadata:");
}

id objc_msgSend_setCharacteristicProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristicProperties:");
}

id objc_msgSend_setCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristics:");
}

id objc_msgSend_setChipFabricIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChipFabricIndex:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComplete:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setCompletionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionQueue:");
}

id objc_msgSend_setConfigNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigNumber:");
}

id objc_msgSend_setConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurations:");
}

id objc_msgSend_setConnectionCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionCompletionHandler:");
}

id objc_msgSend_setConnectionIdleTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionIdleTime:");
}

id objc_msgSend_setConnectionIdleTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionIdleTimer:");
}

id objc_msgSend_setConnectionLatency_forPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionLatency:forPeripheral:");
}

id objc_msgSend_setConnectionStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStartTime:");
}

id objc_msgSend_setConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionState:");
}

id objc_msgSend_setConnectionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionTimer:");
}

id objc_msgSend_setConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstraints:");
}

id objc_msgSend_setContextData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextData:");
}

id objc_msgSend_setControlOutputStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlOutputStream:");
}

id objc_msgSend_setControlPayloadWrittenLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlPayloadWrittenLength:");
}

id objc_msgSend_setControllerContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControllerContext:");
}

id objc_msgSend_setControllerKeySalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControllerKeySalt:");
}

id objc_msgSend_setCurrentChunkSequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentChunkSequenceNumber:");
}

id objc_msgSend_setCurrentIndexInBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentIndexInBag:");
}

id objc_msgSend_setCurrentPacketTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPacketTransactionIdentifier:");
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentState:");
}

id objc_msgSend_setCurrentTID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentTID:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataStream:");
}

id objc_msgSend_setDataStreamTransportInterruptSequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataStreamTransportInterruptSequenceNumber:");
}

id objc_msgSend_setDefaultDataStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultDataStream:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDiscovering_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscovering:");
}

id objc_msgSend_setDiscoveryContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryContext:");
}

id objc_msgSend_setDiscoveryRetries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryRetries:");
}

id objc_msgSend_setDiscoveryVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryVersion:");
}

id objc_msgSend_setEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryption:");
}

id objc_msgSend_setEndBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndBehavior:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setEventNotificationsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventNotificationsEnabled:");
}

id objc_msgSend_setFeatureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureFlags:");
}

id objc_msgSend_setField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setField:");
}

id objc_msgSend_setFirmwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirmwareVersion:");
}

id objc_msgSend_setFirstMessageReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstMessageReceived:");
}

id objc_msgSend_setForceClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceClose:");
}

id objc_msgSend_setFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormat:");
}

id objc_msgSend_setHAPInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHAPInstanceID:");
}

id objc_msgSend_setHandleOpenRequestResponseTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandleOpenRequestResponseTimer:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHapBaseUUIDSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapBaseUUIDSuffix:");
}

id objc_msgSend_setHapCharacteristicMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapCharacteristicMap:");
}

id objc_msgSend_setHapCharacteristicNameTypeMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapCharacteristicNameTypeMap:");
}

id objc_msgSend_setHapPropertyMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapPropertyMap:");
}

id objc_msgSend_setHapServiceMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapServiceMap:");
}

id objc_msgSend_setHapServiceNameTypeMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapServiceNameTypeMap:");
}

id objc_msgSend_setHapSupportsAuthDataSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapSupportsAuthDataSet:");
}

id objc_msgSend_setHapUnitMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapUnitMap:");
}

id objc_msgSend_setHasBeenDiscovered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBeenDiscovered:");
}

id objc_msgSend_setHasPairings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPairings:");
}

id objc_msgSend_setHasValidCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasValidCache:");
}

id objc_msgSend_setHeaderComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeaderComplete:");
}

id objc_msgSend_setHelloMessageResponseReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHelloMessageResponseReceived:");
}

id objc_msgSend_setHelloMessageResponseTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHelloMessageResponseTimer:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdleTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleTimer:");
}

id objc_msgSend_setIncludeResponseValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeResponseValue:");
}

id objc_msgSend_setIncompatibleUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncompatibleUpdate:");
}

id objc_msgSend_setInterruptCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptCharacteristic:");
}

id objc_msgSend_setIsCached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCached:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsWriteInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWriteInProgress:");
}

id objc_msgSend_setIsoCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsoCountryCode:");
}

id objc_msgSend_setKeyUpdatedStateNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyUpdatedStateNumber:");
}

id objc_msgSend_setKeyUpdatedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyUpdatedTime:");
}

id objc_msgSend_setLastAccessoryRequestToSendFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAccessoryRequestToSendFlag:");
}

id objc_msgSend_setLastKeyBagIdentityIndexFailingPV_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastKeyBagIdentityIndexFailingPV:");
}

id objc_msgSend_setLastSeen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSeen:");
}

id objc_msgSend_setLinearDerivedTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinearDerivedTransition:");
}

id objc_msgSend_setLinearTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinearTransition:");
}

id objc_msgSend_setLinkedServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkedServices:");
}

id objc_msgSend_setLowerBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowerBound:");
}

id objc_msgSend_setManufacturer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManufacturer:");
}

id objc_msgSend_setManufacturerDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManufacturerDescription:");
}

id objc_msgSend_setMaxBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxBandwidth:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxControllerTransportMTU:");
}

id objc_msgSend_setMaxHAPConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxHAPConnections:");
}

id objc_msgSend_setMaxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLength:");
}

id objc_msgSend_setMaximumControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumControllerTransportMTU:");
}

id objc_msgSend_setMaximumValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumValue:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setMetric_pairVerifyDurationInMS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetric_pairVerifyDurationInMS:");
}

id objc_msgSend_setMetric_pairVerifyReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetric_pairVerifyReason:");
}

id objc_msgSend_setMinBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinBandwidth:");
}

id objc_msgSend_setMinLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinLength:");
}

id objc_msgSend_setMinimumValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumValue:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNextRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextRequestIdentifier:");
}

id objc_msgSend_setNextSessionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextSessionIdentifier:");
}

id objc_msgSend_setNotificationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationContext:");
}

id objc_msgSend_setNotifyTimeIntervalThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyTimeIntervalThreshold:");
}

id objc_msgSend_setNotifyValue_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyValue:forCharacteristic:");
}

id objc_msgSend_setNotifyValueChangeThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyValueChangeThreshold:");
}

id objc_msgSend_setNotifyingCharacteristicUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyingCharacteristicUpdated:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObjectCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectCreator:");
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:");
}

id objc_msgSend_setOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpen:");
}

id objc_msgSend_setOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperation:");
}

id objc_msgSend_setOptionalCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptionalCharacteristics:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOwnershipToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnershipToken:");
}

id objc_msgSend_setPairSetupBackoffTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairSetupBackoffTimeInterval:");
}

id objc_msgSend_setPairSetupSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairSetupSession:");
}

id objc_msgSend_setPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairing:");
}

id objc_msgSend_setPairingActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingActivity:");
}

id objc_msgSend_setPairingDisconnectionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingDisconnectionError:");
}

id objc_msgSend_setPairingIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingIdentity:");
}

id objc_msgSend_setPairingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingRequest:");
}

id objc_msgSend_setParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParameters:");
}

id objc_msgSend_setParsedUUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParsedUUIDs:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPendingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingError:");
}

id objc_msgSend_setPendingHelloMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingHelloMessageIdentifier:");
}

id objc_msgSend_setPendingRemovePairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingRemovePairing:");
}

id objc_msgSend_setPeripheralInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeripheralInfo:");
}

id objc_msgSend_setPreviousProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousProtocolVersion:");
}

id objc_msgSend_setPrimaryAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryAccessory:");
}

id objc_msgSend_setProductData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductData:");
}

id objc_msgSend_setProhibitCaching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProhibitCaching:");
}

id objc_msgSend_setProvisionUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvisionUUID:");
}

id objc_msgSend_setPsk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPsk:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachable:");
}

id objc_msgSend_setRequestToSendIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestToSendIdentifiers:");
}

id objc_msgSend_setRequiresUserConsent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresUserConsent:");
}

id objc_msgSend_setResponseTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseTimer:");
}

id objc_msgSend_setResumeSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResumeSessionID:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setSchemaVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchemaVersion:");
}

id objc_msgSend_setSecuritySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecuritySession:");
}

id objc_msgSend_setSendCloseEventTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendCloseEventTimer:");
}

id objc_msgSend_setSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialNumber:");
}

id objc_msgSend_setServerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerIdentifier:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceInstanceOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceInstanceOrder:");
}

id objc_msgSend_setServiceProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceProperties:");
}

id objc_msgSend_setServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServices:");
}

id objc_msgSend_setSessionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionIdentifier:");
}

id objc_msgSend_setSetupCodeCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSetupCodeCompletionHandler:");
}

id objc_msgSend_setSetupHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSetupHash:");
}

id objc_msgSend_setSetupInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSetupInProgress:");
}

id objc_msgSend_setShouldValidateValueAfterReading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldValidateValueAfterReading:");
}

id objc_msgSend_setSourceHAPInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceHAPInstanceID:");
}

id objc_msgSend_setSourceValueRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceValueRange:");
}

id objc_msgSend_setSsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSsid:");
}

id objc_msgSend_setStagedFirmwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagedFirmwareVersion:");
}

id objc_msgSend_setStagingNotReadyReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagingNotReadyReasons:");
}

id objc_msgSend_setStartBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartBehavior:");
}

id objc_msgSend_setStartDelayDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDelayDuration:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateNumber:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStepValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepValue:");
}

id objc_msgSend_setSubmitted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubmitted:");
}

id objc_msgSend_setSupportsDataStreamOverHAP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsDataStreamOverHAP:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setTargetCompletionDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetCompletionDuration:");
}

id objc_msgSend_setTargetValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetValue:");
}

id objc_msgSend_setTcpListeningPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTcpListeningPort:");
}

id objc_msgSend_setTimeElapsedSinceStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeElapsedSinceStart:");
}

id objc_msgSend_setTimedWrite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimedWrite:");
}

id objc_msgSend_setToken1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken1:");
}

id objc_msgSend_setToken2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken2:");
}

id objc_msgSend_setTrafficClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrafficClass:");
}

id objc_msgSend_setTransitionChecksum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionChecksum:");
}

id objc_msgSend_setTransitionFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionFetch:");
}

id objc_msgSend_setTransitionPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionPoints:");
}

id objc_msgSend_setTransitionStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionStart:");
}

id objc_msgSend_setTransitionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionState:");
}

id objc_msgSend_setTransitionTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionTypes:");
}

id objc_msgSend_setTransitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitions:");
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransport:");
}

id objc_msgSend_setTransportCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportCharacteristic:");
}

id objc_msgSend_setTransportType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportType:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnits:");
}

id objc_msgSend_setUpdateDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateDuration:");
}

id objc_msgSend_setUpdateNotReadyReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateNotReadyReasons:");
}

id objc_msgSend_setUpperBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpperBound:");
}

id objc_msgSend_setValidValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidValues:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValueMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValueMetadata:");
}

id objc_msgSend_setValueTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValueTransition:");
}

id objc_msgSend_setValueUpdateTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValueUpdateTimeInterval:");
}

id objc_msgSend_setValueUpdatedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValueUpdatedTime:");
}

id objc_msgSend_setVerified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerified:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setWaitingForAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitingForAuth:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWriteType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWriteType:");
}

id objc_msgSend_setupCodeCompletionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCodeCompletionHandler");
}

id objc_msgSend_setupHash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupHash");
}

id objc_msgSend_setupInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupInProgress");
}

id objc_msgSend_setupRequiresCharactertisticReads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupRequiresCharactertisticReads");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedPreferences");
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescription");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortValue");
}

id objc_msgSend_shortenHAPType_baseUUIDSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortenHAPType:baseUUIDSuffix:");
}

id objc_msgSend_shouldCloseSessionWithTimeoutReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCloseSessionWithTimeoutReason");
}

id objc_msgSend_shouldMergeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldMergeObject:");
}

id objc_msgSend_shouldRetryPVDueToAuthenticationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetryPVDueToAuthenticationError:");
}

id objc_msgSend_shouldValidateValueAfterReading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldValidateValueAfterReading");
}

id objc_msgSend_shouldVerifyHAPCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldVerifyHAPCharacteristic:");
}

id objc_msgSend_shouldVerifyHAPService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldVerifyHAPService:");
}

id objc_msgSend_signatureRequestForCharacteristic_requiresAuthentication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureRequestForCharacteristic:requiresAuthentication:error:");
}

id objc_msgSend_signatureRequestForService_characteristic_requiresAuthentication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureRequestForService:characteristic:requiresAuthentication:error:");
}

id objc_msgSend_socket_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "socket:didFailWithError:");
}

id objc_msgSend_socketDidClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "socketDidClose:");
}

id objc_msgSend_socketDidReceiveData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "socketDidReceiveData:");
}

id objc_msgSend_sockets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sockets");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sourceHAPInstanceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceHAPInstanceID");
}

id objc_msgSend_sourceValueRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceValueRange");
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ssid");
}

id objc_msgSend_stagedFirmwareVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagedFirmwareVersion");
}

id objc_msgSend_stagingNotReadyReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagingNotReadyReasons");
}

id objc_msgSend_standardIntervalString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardIntervalString");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBehavior");
}

id objc_msgSend_startConnectionTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConnectionTimer");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startDelayDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDelayDuration");
}

id objc_msgSend_startHelloMessageResponseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startHelloMessageResponseTimer");
}

id objc_msgSend_startSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSetup");
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTime");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_state2String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state2String:");
}

id objc_msgSend_stateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateChanged");
}

id objc_msgSend_stateNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateNumber");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusFlags");
}

id objc_msgSend_stepValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepValue");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopDiscoveringAccessoryServers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDiscoveringAccessoryServers");
}

id objc_msgSend_stopWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopWithError:");
}

id objc_msgSend_streamProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamProtocol");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithValidatedFormat:validFormatSpecifiers:error:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToWeakObjectsMapTable");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submitLogEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitLogEvent:");
}

id objc_msgSend_submitPairVerifyMetricWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitPairVerifyMetricWithError:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supportsAdditionalAuthorizationData_forService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAdditionalAuthorizationData:forService:");
}

id objc_msgSend_supportsDataStreamOverHAP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDataStreamOverHAP");
}

id objc_msgSend_supportsEventNotificationContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsEventNotificationContext");
}

id objc_msgSend_supportsTimedWrite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsTimedWrite");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspend");
}

id objc_msgSend_svcDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "svcDescription");
}

id objc_msgSend_systemPowerChanged_notificationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPowerChanged:notificationID:");
}

id objc_msgSend_systemPowerMgr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPowerMgr");
}

id objc_msgSend_systemPowerPort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPowerPort");
}

id objc_msgSend_targetCompletionDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetCompletionDuration");
}

id objc_msgSend_targetValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetValue");
}

id objc_msgSend_tcpListeningPort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpListeningPort");
}

id objc_msgSend_tearDownSessionOnAuthCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownSessionOnAuthCompletion");
}

id objc_msgSend_timeElapsedSinceStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeElapsedSinceStart");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timedWrite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timedWrite");
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeout");
}

id objc_msgSend_timeoutInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeoutInterval");
}

id objc_msgSend_tlvDatablob(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tlvDatablob");
}

id objc_msgSend_tlvid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tlvid");
}

id objc_msgSend_token1(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "token1");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topic");
}

id objc_msgSend_totalIdentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalIdentities");
}

id objc_msgSend_trafficClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trafficClass");
}

id objc_msgSend_transactionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionIdentifier");
}

id objc_msgSend_transferManagementService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferManagementService");
}

id objc_msgSend_transformedValue_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformedValue:format:error:");
}

id objc_msgSend_transitionChecksum(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionChecksum");
}

id objc_msgSend_transitionFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionFetch");
}

id objc_msgSend_transitionPoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionPoints");
}

id objc_msgSend_transitionStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionStart");
}

id objc_msgSend_transitionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionState");
}

id objc_msgSend_transitionTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionTypes");
}

id objc_msgSend_transitions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitions");
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport");
}

id objc_msgSend_transport_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didFailWithError:");
}

id objc_msgSend_transport_didReceiveRawFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didReceiveRawFrame:");
}

id objc_msgSend_transportCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportCharacteristic");
}

id objc_msgSend_transportDidClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportDidClose:");
}

id objc_msgSend_transportDidOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportDidOpen:");
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportType");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_typeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeToString:");
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingErrors");
}

id objc_msgSend_uniqueBTIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueBTIdentifier");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_unitDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unitDescription");
}

id objc_msgSend_units(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "units");
}

id objc_msgSend_unpackUnencryptedOPACKFrame_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpackUnencryptedOPACKFrame:receivedHeader:receivedPayload:error:");
}

id objc_msgSend_unregisterSocket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterSocket:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateAccessoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAccessoryName:");
}

id objc_msgSend_updateAndValidateCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAndValidateCharacteristics");
}

id objc_msgSend_updateBroadcastKeyForIdentifer_key_keyUpdatedStateNumber_keyUpdatedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBroadcastKeyForIdentifer:key:keyUpdatedStateNumber:keyUpdatedTime:");
}

id objc_msgSend_updateCachedStateForIdentifier_stateNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCachedStateForIdentifier:stateNumber:");
}

id objc_msgSend_updateDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDuration");
}

id objc_msgSend_updateForAccessoryInformationService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForAccessoryInformationService");
}

id objc_msgSend_updateNotReadyReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNotReadyReasons");
}

id objc_msgSend_updatePeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePeripheral:");
}

id objc_msgSend_updatePeripheralIdentifier_forAccessoryIdentifier_protocolVersion_previousVersion_resumeSessionID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePeripheralIdentifier:forAccessoryIdentifier:protocolVersion:previousVersion:resumeSessionID:error:");
}

id objc_msgSend_updatePeripheralIdentifier_isPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePeripheralIdentifier:isPairing:");
}

id objc_msgSend_updateRawPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRawPlist");
}

id objc_msgSend_updateResumeSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateResumeSessionID:");
}

id objc_msgSend_updateWithCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCharacteristic:");
}

id objc_msgSend_updateWithPeripheralInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithPeripheralInfo:");
}

id objc_msgSend_updateWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithService:");
}

id objc_msgSend_upperBound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upperBound");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_useHH2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useHH2");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_uuidForBTLEPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuidForBTLEPeripheral:");
}

id objc_msgSend_uuidStr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuidStr");
}

id objc_msgSend_validValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validValues");
}

id objc_msgSend_validateMandatoryCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateMandatoryCharacteristics:forService:");
}

id objc_msgSend_validateValue_outValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateValue:outValue:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueMetadata");
}

id objc_msgSend_valueTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueTransition");
}

id objc_msgSend_valueUpdateTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueUpdateTimeInterval");
}

id objc_msgSend_valueUpdatedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueUpdatedTime");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_waitingForAuth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitingForAuth");
}

id objc_msgSend_wakeAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeAddress");
}

id objc_msgSend_wakePattern(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakePattern");
}

id objc_msgSend_wakePort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakePort");
}

id objc_msgSend_wakeTuples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeTuples");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakToStrongObjectsMapTable");
}

id objc_msgSend_weakToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakToWeakObjectsMapTable");
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workQueue");
}

id objc_msgSend_writeCharacteristicValues_timeout_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeCharacteristicValues:timeout:completionQueue:completionHandler:");
}

id objc_msgSend_writeRequestForCharacteristic_value_authorizationData_contextData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeRequestForCharacteristic:value:authorizationData:contextData:options:error:");
}

id objc_msgSend_writeRequestTupleForCharacteristic_value_authorizationData_timedWrite_responseValue_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:");
}

id objc_msgSend_writeRequestTupleForCharacteristic_value_authorizationData_timedWrite_responseValue_type_contextData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:contextData:");
}

id objc_msgSend_writeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeType");
}

id objc_msgSend_writeValue_forCharacteristic_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeValue:forCharacteristic:type:");
}
