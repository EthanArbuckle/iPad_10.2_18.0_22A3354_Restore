uint64_t sub_100109328(void *a1, void *a2, void (**a3)(const void *, _QWORD, void *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char isUniquelyReferenced_nonNull_native;
  id v49;
  uint64_t v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  _QWORD *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  id v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  id v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  void (**v127)(const void *, _QWORD, void *);
  uint64_t v128;
  uint64_t v129;
  uint64_t aBlock[5];
  _QWORD *v131;
  _QWORD *v132;
  _QWORD v133[2];

  v122 = a1;
  v123 = a2;
  v126 = type metadata accessor for Errors(0);
  v128 = *(_QWORD *)(v126 - 8);
  v4 = __chkstk_darwin(v126);
  v125 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v124 = (uint64_t *)((char *)&v109 - v6);
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  __chkstk_darwin(v7);
  v119 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v117 = *(_QWORD *)(v9 - 8);
  v118 = v9;
  __chkstk_darwin(v9);
  v116 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for DispatchTime(0);
  v113 = *(_QWORD *)(v115 - 8);
  v11 = __chkstk_darwin(v115);
  v112 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v114 = (char *)&v109 - v13;
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v109 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v109 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v109 - v29;
  v129 = swift_allocObject(&unk_10023B758, 24, 7);
  *(_QWORD *)(v129 + 16) = a3;
  v127 = a3;
  _Block_copy(a3);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v70 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v30, v70, v18);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Client doesn't have camera TCC, rejecting XPC message", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v18);
    v75 = v124;
    *v124 = 0xD000000000000012;
    v75[1] = 0x80000001001FF590;
    v76 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  v32 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v31), "currentConnection");
  if (!v32)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v77 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v28, v77, v18);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed fetching current NSXPCConnection, cannot construct client", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    v75 = v124;
    *v124 = 0xD000000000000017;
    v75[1] = 0x80000001001FDAB0;
    v76 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    v82 = v128;
    v83 = v126;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v128 + 104))(v75, *v76, v126);
    v84 = v125;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v125, v75, v83);
    v85 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v86 = swift_allocError(v83, v85, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v87, v84, v83);
    v88 = (void *)_convertErrorToNSError(_:)(v86);
    v127[2](v127, 0, v88);
LABEL_19:

LABEL_20:
    (*(void (**)(_QWORD *, uint64_t))(v82 + 8))(v75, v83);
    swift_errorRelease(v86);
    v69 = v129;
    return swift_release(v69);
  }
  v33 = v32;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v34 = qword_100275638;
  v35 = sub_10016D5D0(v33);
  if (!v36)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v90 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v25, v90, v18);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed fetching App ID from connection", v94, 2u);
      swift_slowDealloc(v94, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    v75 = v124;
    *v124 = 0xD000000000000026;
    v75[1] = 0x80000001001FDAD0;
    v82 = v128;
    v83 = v126;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v128 + 104))(v75, enum case for Errors.NotFound(_:), v126);
    v95 = v125;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v125, v75, v83);
    v96 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v86 = swift_allocError(v83, v96, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v97, v95, v83);
    v98 = (void *)_convertErrorToNSError(_:)(v86);
    v127[2](v127, 0, v98);

    goto LABEL_20;
  }
  v37 = v36;
  v110 = v14;
  v111 = v33;
  v133[0] = 0;
  v38 = (void *)v35;
  swift_bridgeObjectRetain(v36);
  v39 = v122;
  v40 = v123;
  v123 = v38;
  sub_1001758B0((uint64_t)v38, v37, v34, (uint64_t)v38, v37, (uint64_t)v39, v40, v133);
  swift_bridgeObjectRelease(v37);

  if (!v133[0])
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v99 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v99, v18);
    swift_bridgeObjectRetain(v37);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v101, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(12, -1);
      v104 = swift_slowAlloc(32, -1);
      aBlock[0] = v104;
      *(_DWORD *)v103 = 136315138;
      swift_bridgeObjectRetain(v37);
      v132 = (_QWORD *)sub_1000906BC((uint64_t)v123, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v103 + 4, v103 + 12);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "No clients registered for config changes on %s", v103, 0xCu);
      swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v103, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v105 = v111;
    v75 = v124;
    *v124 = 0xD000000000000014;
    v75[1] = 0x80000001001FF810;
    v82 = v128;
    v83 = v126;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v128 + 104))(v75, enum case for Errors.UnexpectedError(_:), v126);
    v106 = v125;
    (*(void (**)(char *, _QWORD *, uint64_t))(v82 + 16))(v125, v75, v83);
    v107 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v86 = swift_allocError(v83, v107, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v108, v106, v83);
    v88 = (void *)_convertErrorToNSError(_:)(v86);
    v127[2](v127, 0, v88);

    goto LABEL_19;
  }
  v41 = qword_100275638;
  v42 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v43 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  v44 = v37;
  swift_retain(v43);
  os_unfair_lock_lock(v43 + 4);
  swift_release(v43);
  v45 = swift_allocObject(&unk_10023B780, 32, 7);
  v46 = v129;
  *(_QWORD *)(v45 + 16) = sub_100114AD8;
  *(_QWORD *)(v45 + 24) = v46;
  v47 = (_QWORD *)(v41 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess(v41 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions, aBlock, 33, 0);
  swift_bridgeObjectRetain(v44);
  swift_retain(v46);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v47);
  v132 = (_QWORD *)*v47;
  *v47 = 0x8000000000000000;
  v49 = v123;
  sub_1001BB098((uint64_t)sub_100114B44, v45, (uint64_t)v123, v44, isUniquelyReferenced_nonNull_native);
  v50 = *v47;
  *v47 = v132;
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v50);
  swift_endAccess(aBlock);
  v51 = *(os_unfair_lock_s **)(v41 + v42);
  swift_retain(v51);
  os_unfair_lock_unlock(v51 + 4);
  swift_release(v51);
  sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v52 = v110;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v110);
  v53 = (void *)static OS_dispatch_queue.global(qos:)(v17);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v52);
  v55 = v112;
  static DispatchTime.now()(v54);
  v56 = v114;
  + infix(_:_:)(v55, 1.0);
  v128 = *(_QWORD *)(v113 + 8);
  v57 = v115;
  ((void (*)(char *, uint64_t))v128)(v55, v115);
  v58 = (_QWORD *)swift_allocObject(&unk_10023B7A8, 48, 7);
  v58[2] = v49;
  v58[3] = v44;
  v59 = v129;
  v58[4] = sub_100114AD8;
  v58[5] = v59;
  aBlock[4] = (uint64_t)sub_100114AB4;
  v131 = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10012357C;
  aBlock[3] = (uint64_t)&unk_10023B7C0;
  v60 = _Block_copy(aBlock);
  v61 = swift_retain(v59);
  v62 = v116;
  static DispatchQoS.unspecified.getter(v61);
  v132 = _swiftEmptyArrayStorage;
  v63 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v64 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v65 = sub_100090F20();
  v66 = v119;
  v67 = v121;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v132, v64, v65, v121, v63);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v56, v62, v66, v60);

  _Block_release(v60);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v62, v118);
  ((void (*)(char *, uint64_t))v128)(v56, v57);
  v68 = v131;
  swift_release(v59);
  v69 = (uint64_t)v68;
  return swift_release(v69);
}

uint64_t sub_10010A04C(uint64_t a1, void (**a2)(const void *, _QWORD, void *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  void (*v83)(_QWORD, _QWORD);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  void (**v127)(const void *, _QWORD, void *);
  uint64_t v128;
  void (*v129)(_QWORD, _QWORD);
  uint64_t v130;
  uint64_t aBlock[5];
  _QWORD *v132;
  _QWORD *v133;
  _QWORD v134[2];

  v124 = a1;
  v3 = type metadata accessor for Errors(0);
  v128 = *(_QWORD *)(v3 - 8);
  v129 = (void (*)(_QWORD, _QWORD))v3;
  v4 = __chkstk_darwin(v3);
  v126 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v125 = (uint64_t *)((char *)&v110 - v6);
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v122 = *(_QWORD *)(v7 - 8);
  v123 = v7;
  __chkstk_darwin(v7);
  v121 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v119 = *(_QWORD *)(v9 - 8);
  v120 = v9;
  __chkstk_darwin(v9);
  v118 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DispatchTime(0);
  v115 = *(_QWORD *)(v117 - 8);
  v11 = __chkstk_darwin(v117);
  v114 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v116 = (char *)&v110 - v13;
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v110 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v110 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v110 - v29;
  v130 = swift_allocObject(&unk_10023B6B8, 24, 7);
  *(_QWORD *)(v130 + 16) = a2;
  v127 = a2;
  _Block_copy(a2);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v71 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v30, v71, v18);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Client doesn't have camera TCC, rejecting XPC message", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v18);
    v76 = v125;
    *v125 = 0xD000000000000012;
    v76[1] = 0x80000001001FF590;
    v77 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  v32 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v31), "currentConnection");
  if (!v32)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v78 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v79 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v28, v78, v18);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed fetching current NSXPCConnection, cannot construct client", v82, 2u);
      swift_slowDealloc(v82, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    v76 = v125;
    *v125 = 0xD000000000000017;
    v76[1] = 0x80000001001FDAB0;
    v77 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    v84 = v128;
    v83 = v129;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v128 + 104))(v76, *v77, v129);
    v85 = v126;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v84 + 16))(v126, v76, v83);
    v86 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v87 = swift_allocError(v83, v86, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v84 + 32))(v88, v85, v83);
    v89 = (void *)_convertErrorToNSError(_:)(v87);
    v127[2](v127, 0, v89);
LABEL_19:

LABEL_20:
    (*(void (**)(_QWORD *, _QWORD))(v84 + 8))(v76, v83);
    swift_errorRelease(v87);
    v70 = v130;
    return swift_release(v70);
  }
  v33 = v32;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v34 = qword_100275638;
  v35 = sub_10016D5D0(v33);
  if (!v36)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v91 = v33;
    v92 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v25, v92, v18);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed fetching App ID from connection", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    v76 = v125;
    *v125 = 0xD000000000000026;
    v76[1] = 0x80000001001FDAD0;
    v84 = v128;
    v83 = v129;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v128 + 104))(v76, enum case for Errors.NotFound(_:), v129);
    v97 = v126;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v84 + 16))(v126, v76, v83);
    v98 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v87 = swift_allocError(v83, v98, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v84 + 32))(v99, v97, v83);
    v100 = (void *)_convertErrorToNSError(_:)(v87);
    v127[2](v127, 0, v100);

    goto LABEL_20;
  }
  v111 = v14;
  v134[0] = 0;
  v37 = v36;
  v38 = v35;
  swift_bridgeObjectRetain(v36);
  v39 = v124;
  swift_bridgeObjectRetain(v124);
  v40 = v38;
  v112 = v38;
  v41 = v38;
  v42 = v37;
  sub_100175AD8(v40, v37, v34, v41, v37, v39, (uint64_t)v134);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v39);
  v113 = v33;
  if (!v134[0])
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v101 = sub_10008EA50(v18, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v101, v18);
    swift_bridgeObjectRetain(v37);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      aBlock[0] = v106;
      *(_DWORD *)v105 = 136315138;
      swift_bridgeObjectRetain(v37);
      v133 = (_QWORD *)sub_1000906BC(v112, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v105 + 4, v105 + 12);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "No clients registered for config changes on %s", v105, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v76 = v125;
    *v125 = 0xD000000000000014;
    v76[1] = 0x80000001001FF810;
    v84 = v128;
    v83 = v129;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v128 + 104))(v76, enum case for Errors.UnexpectedError(_:), v129);
    v107 = v126;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v84 + 16))(v126, v76, v83);
    v108 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v87 = swift_allocError(v83, v108, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v84 + 32))(v109, v107, v83);
    v89 = (void *)_convertErrorToNSError(_:)(v87);
    v127[2](v127, 0, v89);

    goto LABEL_19;
  }
  v43 = qword_100275638;
  v44 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v45 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v45);
  os_unfair_lock_lock(v45 + 4);
  swift_release(v45);
  v46 = swift_allocObject(&unk_10023B6E0, 32, 7);
  v47 = v130;
  *(_QWORD *)(v46 + 16) = sub_100114AD8;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = (_QWORD *)(v43 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess(v43 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions, aBlock, 33, 0);
  swift_bridgeObjectRetain(v37);
  swift_retain(v47);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
  v133 = (_QWORD *)*v48;
  *v48 = 0x8000000000000000;
  v50 = v112;
  sub_1001BB098((uint64_t)sub_100114B44, v46, v112, v37, isUniquelyReferenced_nonNull_native);
  v51 = *v48;
  *v48 = v133;
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v51);
  swift_endAccess(aBlock);
  v52 = *(os_unfair_lock_s **)(v43 + v44);
  swift_retain(v52);
  os_unfair_lock_unlock(v52 + 4);
  swift_release(v52);
  sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v53 = v111;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v111);
  v54 = (void *)static OS_dispatch_queue.global(qos:)(v17);
  v55 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v53);
  v56 = v114;
  static DispatchTime.now()(v55);
  v57 = v116;
  + infix(_:_:)(v56, 1.0);
  v129 = *(void (**)(_QWORD, _QWORD))(v115 + 8);
  v58 = v117;
  v129(v56, v117);
  v59 = (_QWORD *)swift_allocObject(&unk_10023B708, 48, 7);
  v59[2] = v50;
  v59[3] = v42;
  v60 = v130;
  v59[4] = sub_100114AD8;
  v59[5] = v60;
  aBlock[4] = (uint64_t)sub_100114524;
  v132 = v59;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10012357C;
  aBlock[3] = (uint64_t)&unk_10023B720;
  v61 = _Block_copy(aBlock);
  v62 = swift_retain(v60);
  v63 = v118;
  static DispatchQoS.unspecified.getter(v62);
  v133 = _swiftEmptyArrayStorage;
  v64 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v65 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v66 = sub_100090F20();
  v67 = v121;
  v68 = v123;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v133, v65, v66, v123, v64);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v57, v63, v67, v61);

  _Block_release(v61);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v67, v68);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v63, v120);
  v129(v57, v58);
  v69 = v132;
  swift_release(v60);
  v70 = (uint64_t)v69;
  return swift_release(v70);
}

uint64_t sub_10010AD60(void (**a1)(const void *, _QWORD, void *), double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  os_unfair_lock_s *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  _QWORD *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  void (*v84)(_QWORD, _QWORD);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  void (**v124)(const void *, _QWORD, void *);
  uint64_t v125;
  void (*v126)(_QWORD, _QWORD);
  uint64_t v127;
  uint64_t aBlock[5];
  _QWORD *v129;
  _QWORD *v130;
  _QWORD v131[2];

  v10 = type metadata accessor for Errors(0);
  v125 = *(_QWORD *)(v10 - 8);
  v126 = (void (*)(_QWORD, _QWORD))v10;
  v11 = __chkstk_darwin(v10);
  v123 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v122 = (id *)((char *)&v111 - v13);
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v120 = *(_QWORD *)(v14 - 8);
  v121 = v14;
  __chkstk_darwin(v14);
  v119 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for DispatchQoS(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for DispatchTime(0);
  v113 = *(_QWORD *)(v115 - 8);
  v17 = __chkstk_darwin(v115);
  v112 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v114 = (char *)&v111 - v19;
  v20 = type metadata accessor for DispatchQoS.QoSClass(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Logger(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v111 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v111 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v111 - v35;
  v127 = swift_allocObject(&unk_10023B618, 24, 7);
  *(_QWORD *)(v127 + 16) = a1;
  v124 = a1;
  _Block_copy(a1);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v72 = sub_10008EA50(v24, (uint64_t)qword_10026DE40);
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))(v36, v72, v24);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Client doesn't have camera TCC, rejecting XPC message", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v36, v24);
    v77 = v122;
    *v122 = 0xD000000000000012;
    v77[1] = 0x80000001001FF590;
    v78 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  v38 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v37), "currentConnection");
  if (!v38)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v79 = sub_10008EA50(v24, (uint64_t)qword_10026DE40);
    v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))(v34, v79, v24);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Failed fetching current NSXPCConnection, cannot construct client", v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
    v77 = v122;
    *v122 = 0xD000000000000017;
    v77[1] = 0x80000001001FDAB0;
    v78 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    v85 = v125;
    v84 = v126;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v125 + 104))(v77, *v78, v126);
    v86 = v123;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v85 + 16))(v123, v77, v84);
    v87 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v88 = swift_allocError(v84, v87, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v85 + 32))(v89, v86, v84);
    v90 = (void *)_convertErrorToNSError(_:)(v88);
    v124[2](v124, 0, v90);
LABEL_19:

LABEL_20:
    (*(void (**)(_QWORD *, _QWORD))(v85 + 8))(v77, v84);
    swift_errorRelease(v88);
    v71 = v127;
    return swift_release(v71);
  }
  v39 = v38;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v40 = qword_100275638;
  v41 = sub_10016D5D0(v39);
  if (!v42)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v92 = v39;
    v93 = sub_10008EA50(v24, (uint64_t)qword_10026DE40);
    v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))(v31, v93, v24);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Failed fetching App ID from connection", v97, 2u);
      swift_slowDealloc(v97, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
    v77 = v122;
    *v122 = 0xD000000000000026;
    v77[1] = 0x80000001001FDAD0;
    v85 = v125;
    v84 = v126;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v125 + 104))(v77, enum case for Errors.NotFound(_:), v126);
    v98 = v123;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v85 + 16))(v123, v77, v84);
    v99 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v88 = swift_allocError(v84, v99, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v85 + 32))(v100, v98, v84);
    v101 = (void *)_convertErrorToNSError(_:)(v88);
    v124[2](v124, 0, v101);

    goto LABEL_20;
  }
  v43 = v42;
  v131[0] = 0;
  v44 = v41;
  swift_bridgeObjectRetain(v42);
  sub_100175D0C(v44, v43, v40, v44, v43, v131, a2, a3, a4, a5);
  swift_bridgeObjectRelease(v43);
  v111 = v39;
  if (!v131[0])
  {
    v121 = v44;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v102 = sub_10008EA50(v24, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v102, v24);
    swift_bridgeObjectRetain(v43);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = swift_slowAlloc(32, -1);
      aBlock[0] = v107;
      *(_DWORD *)v106 = 136315138;
      swift_bridgeObjectRetain(v43);
      v130 = (_QWORD *)sub_1000906BC(v121, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131, v106 + 4, v106 + 12);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "No clients registered for config changes on %s", v106, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v43, 2);
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    v77 = v122;
    *v122 = 0xD000000000000021;
    v77[1] = 0x80000001001FF7C0;
    v85 = v125;
    v84 = v126;
    (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v125 + 104))(v77, enum case for Errors.InvalidParameter(_:), v126);
    v108 = v123;
    (*(void (**)(char *, _QWORD *, void (*)(_QWORD, _QWORD)))(v85 + 16))(v123, v77, v84);
    v109 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v88 = swift_allocError(v84, v109, 0, 0);
    (*(void (**)(uint64_t, char *, void (*)(_QWORD, _QWORD)))(v85 + 32))(v110, v108, v84);
    v90 = (void *)_convertErrorToNSError(_:)(v88);
    v124[2](v124, 0, v90);

    goto LABEL_19;
  }
  v45 = v44;
  v46 = qword_100275638;
  v47 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v48 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v48);
  os_unfair_lock_lock(v48 + 4);
  swift_release(v48);
  v49 = swift_allocObject(&unk_10023B640, 32, 7);
  v50 = v127;
  *(_QWORD *)(v49 + 16) = sub_100114474;
  *(_QWORD *)(v49 + 24) = v50;
  v51 = (_QWORD *)(v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
  swift_beginAccess(v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions, aBlock, 33, 0);
  swift_bridgeObjectRetain(v43);
  swift_retain(v50);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v51);
  v130 = (_QWORD *)*v51;
  *v51 = 0x8000000000000000;
  sub_1001BB098((uint64_t)sub_1001144B0, v49, v45, v43, isUniquelyReferenced_nonNull_native);
  v53 = *v51;
  *v51 = v130;
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v53);
  swift_endAccess(aBlock);
  v54 = *(os_unfair_lock_s **)(v46 + v47);
  swift_retain(v54);
  os_unfair_lock_unlock(v54 + 4);
  swift_release(v54);
  sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchQoS.QoSClass.default(_:), v20);
  v55 = (void *)static OS_dispatch_queue.global(qos:)(v23);
  v56 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v57 = v112;
  static DispatchTime.now()(v56);
  v58 = v114;
  + infix(_:_:)(v57, 1.0);
  v126 = *(void (**)(_QWORD, _QWORD))(v113 + 8);
  v59 = v115;
  v126(v57, v115);
  v60 = (_QWORD *)swift_allocObject(&unk_10023B668, 48, 7);
  v60[2] = v45;
  v60[3] = v43;
  v61 = v127;
  v60[4] = sub_100114474;
  v60[5] = v61;
  aBlock[4] = (uint64_t)sub_1001144DC;
  v129 = v60;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10012357C;
  aBlock[3] = (uint64_t)&unk_10023B680;
  v62 = _Block_copy(aBlock);
  v63 = swift_retain(v61);
  v64 = v116;
  static DispatchQoS.unspecified.getter(v63);
  v130 = _swiftEmptyArrayStorage;
  v65 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v66 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v67 = sub_100090F20();
  v68 = v119;
  v69 = v121;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v130, v66, v67, v121, v65);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v58, v64, v68, v62);

  _Block_release(v62);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v69);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v64, v118);
  v126(v58, v59);
  v70 = v129;
  swift_release(v61);
  v71 = (uint64_t)v70;
  return swift_release(v71);
}

uint64_t sub_10010BA88(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint8_t *v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  BOOL v76;
  _QWORD *v77;
  uint8_t *v78;
  uint8_t *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  void (*v98)(_QWORD);
  char *v99;
  id v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  BOOL v104;
  uint64_t v105;
  char *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  id v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  NSObject *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  _QWORD *v123;
  NSObject *v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  id v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  _QWORD *v154;
  void *v155;
  uint64_t v156;
  char *v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  void (*v165)(_QWORD);
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174[5];
  char v175[24];
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v154 - v9;
  v166 = type metadata accessor for ComponentType(0);
  v165 = *(void (**)(_QWORD))(v166 - 8);
  __chkstk_darwin(v166);
  v163 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for Errors(0);
  v12 = *(_QWORD *)(v171 - 8);
  v13 = __chkstk_darwin(v171);
  v169 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (_QWORD **)((char *)&v154 - v15);
  v168 = type metadata accessor for Logger(0);
  v170 = *(_QWORD *)(v168 - 8);
  v17 = __chkstk_darwin(v168);
  v167 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v161 = (char *)&v154 - v20;
  v21 = __chkstk_darwin(v19);
  v162 = (char *)&v154 - v22;
  v23 = __chkstk_darwin(v21);
  v164 = (char *)&v154 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v154 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v154 - v28;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v47 = a2;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v48 = v168;
    v49 = sub_10008EA50(v168, (uint64_t)qword_10026DE40);
    v50 = v170;
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 16))(v29, v49, v48);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = v171;
    if (v54)
    {
      v56 = v16;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client doesn't have camera TCC, rejecting XPC message", v57, 2u);
      v58 = v57;
      v16 = v56;
      swift_slowDealloc(v58, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v48);
    *v16 = 0xD000000000000012;
    v16[1] = 0x80000001001FF590;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.CameraTCCMissing(_:), v55);
    v59 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v169, v16, v55);
    v60 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v55, v60, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v62, v59, v55);
    v63 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v63);
    goto LABEL_17;
  }
  if (!a1)
  {
    *v16 = 0xD000000000000014;
    v16[1] = 0x80000001001FF700;
    v64 = v171;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.NilParams(_:), v171);
    v65 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v169, v16, v64);
    v66 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v64, v66, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v67, v65, v64);
    v68 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v68);

    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v16, v64);
    return swift_errorRelease(v61);
  }
  v31 = (void *)objc_opt_self(NSXPCConnection, v30);
  v155 = a1;
  v172 = a1;
  v32 = objc_msgSend(v31, "currentConnection");
  if (!v32)
  {
    v69 = a2;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v70 = v168;
    v71 = sub_10008EA50(v168, (uint64_t)qword_10026DE40);
    v72 = v170;
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 16))(v27, v71, v70);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    v76 = os_log_type_enabled(v74, v75);
    v55 = v171;
    if (v76)
    {
      v77 = v16;
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed fetching current NSXPCConnection, cannot construct client", v78, 2u);
      v79 = v78;
      v16 = v77;
      swift_slowDealloc(v79, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v70);
    *v16 = 0xD000000000000017;
    v16[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.XPCNil(_:), v55);
    v80 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v169, v16, v55);
    v81 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v55, v81, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v82, v80, v55);
    v63 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v69 + 16))(v69, v63);

LABEL_17:
    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v16, v55);
    return swift_errorRelease(v61);
  }
  v158 = v32;
  v154 = v16;
  v160 = v12;
  v33 = a2;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v34 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v156 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v36 = v34;
  v37 = v35;
  OS_dispatch_semaphore.wait()();

  v157 = v36;
  v38 = &v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v175, 0, 0);
  v39 = *(_QWORD *)v38;
  v40 = *(_QWORD *)(v39 + 16);
  v41 = v171;
  v159 = v33;
  if (v40)
  {
    v42 = v39 + 32;
    swift_bridgeObjectRetain(v39);
    while (1)
    {
      sub_10009AFF4(v42, (uint64_t)v174);
      v43 = *(id *)(*sub_10009B038(v174, v174[3]) + 24);
      DockCoreInfo.identifier.getter(v43);

      DockCoreInfo.identifier.getter(v44);
      LOBYTE(v43) = static UUID.== infix(_:_:)(v10, v8);
      v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v8, v4);
      v45(v10, v4);
      if ((v43 & 1) != 0)
        break;
      sub_100090E88(v174);
      v42 += 40;
      if (!--v40)
      {
        swift_bridgeObjectRelease(v39);
        v41 = v171;
        v33 = v159;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v39);
    v83 = *(id *)&v34[v156];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v174, (uint64_t)&v176);
    sub_100090E88(v174);

    v41 = v171;
    v33 = v159;
  }
  else
  {
LABEL_11:
    v46 = *(id *)&v34[v156];
    OS_dispatch_semaphore.signal()();

    v178 = 0;
    v176 = 0u;
    v177 = 0u;

  }
  v84 = v160;
  v85 = v168;
  if (!*((_QWORD *)&v177 + 1))
  {
    sub_10009B2C0((uint64_t)&v176, (uint64_t *)&unk_10026DF40);
    goto LABEL_35;
  }
  v86 = sub_10009061C(&qword_10026C2E0);
  v87 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v174, &v176, v86, v87, 6) & 1) == 0)
  {
LABEL_35:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v118 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v167, v118, v85);
    v119 = v172;
    v120 = Logger.logObject.getter(v119);
    v121 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = (uint8_t *)swift_slowAlloc(12, -1);
      v123 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v122 = 138412290;
      *(_QWORD *)&v176 = v119;
      v124 = v119;
      v85 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 8, v122 + 4, v122 + 12);
      *v123 = v155;

      v84 = v160;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "No matching record, can't lookup %@", v122, 0xCu);
      v125 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v123, 1, v125);
      swift_slowDealloc(v123, -1, -1);
      swift_slowDealloc(v122, -1, -1);
    }
    else
    {

      v120 = v119;
    }

    (*(void (**)(char *, uint64_t))(v170 + 8))(v167, v85);
    v126 = v154;
    *v154 = 0xD000000000000015;
    v126[1] = 0x80000001001FF740;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v126, enum case for Errors.AccessoryNotReachable(_:), v41);
    v127 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v84 + 16))(v169, v126, v41);
    v128 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v128, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v129, v127, v41);
    v130 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v159 + 16))(v159, v130);

    goto LABEL_48;
  }
  v88 = v174[0];
  v89 = (uint64_t)v163;
  (*((void (**)(char *, _QWORD, uint64_t))v165 + 13))(v163, enum case for ComponentType.Battery(_:), v166);
  v90 = (_QWORD *)(v88 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  v91 = swift_beginAccess(v88 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, &v176, 0, 0);
  v92 = *v90;
  if (!*(_QWORD *)(*v90 + 16))
  {
LABEL_42:
    (*((void (**)(uint64_t, uint64_t, __n128))v165 + 1))(v89, v166, v91);
LABEL_43:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v131 = v33;
    v132 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
    v133 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 16))(v164, v132, v85);
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v134, v135))
    {
      v136 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v136 = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "Accessory doesn't have a battery service", v136, 2u);
      swift_slowDealloc(v136, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v170 + 8))(v164, v85);
    v126 = v154;
    *v154 = 0xD000000000000012;
    v126[1] = 0x80000001001FF780;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v126, enum case for Errors.NotFound(_:), v41);
    v137 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v84 + 16))(v169, v126, v41);
    v138 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v138, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v139, v137, v41);
    v130 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v131 + 16))(v131, v130);

    swift_release(v88);
LABEL_48:

    (*(void (**)(_QWORD *, uint64_t))(v84 + 8))(v126, v41);
    return swift_errorRelease(v61);
  }
  swift_bridgeObjectRetain(*v90);
  v93 = sub_100145580(v89);
  if ((v94 & 1) == 0)
  {
    swift_bridgeObjectRelease(v92);
    goto LABEL_42;
  }
  v95 = *(_QWORD *)(*(_QWORD *)(v92 + 56) + 8 * v93);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v92);
  (*((void (**)(uint64_t, uint64_t))v165 + 1))(v89, v166);
  if (!*(_QWORD *)(v95 + 16))
  {
    swift_bridgeObjectRelease(v95);
    goto LABEL_43;
  }
  v96 = objc_msgSend(v158, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v97 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
  v98 = *(void (**)(_QWORD))(v170 + 16);
  v99 = v162;
  v164 = (char *)v97;
  v165 = v98;
  v98(v162);
  v100 = v172;
  swift_bridgeObjectRetain(v95);
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.default.getter(v102);
  v104 = os_log_type_enabled(v102, v103);
  v167 = (char *)v88;
  LODWORD(v166) = v96;
  if (v104)
  {
    v105 = swift_slowAlloc(28, -1);
    v106 = (char *)swift_slowAlloc(8, -1);
    v163 = v106;
    v172 = (id)swift_slowAlloc(32, -1);
    v174[0] = (uint64_t)v172;
    *(_DWORD *)v105 = 67109634;
    LODWORD(v173) = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, (char *)&v173 + 4, v105 + 4, v105 + 8);
    *(_WORD *)(v105 + 8) = 2112;
    v173 = (uint64_t)v100;
    v107 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v105 + 10, v105 + 18);
    *(_QWORD *)v106 = v155;

    *(_WORD *)(v105 + 18) = 2080;
    swift_bridgeObjectRetain(v95);
    v109 = Array.description.getter(v108, &type metadata for SensorInfo);
    v111 = v110;
    swift_bridgeObjectRelease(v95);
    v112 = v109;
    v33 = v159;
    v85 = v168;
    v173 = sub_1000906BC(v112, v111, v174);
    v88 = (uint64_t)v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v105 + 20, v105 + 28);
    swift_bridgeObjectRelease_n(v95, 2);
    swift_bridgeObjectRelease(v111);
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "Client %d registering for battery events for %@, serviceUUID %s", (uint8_t *)v105, 0x1Cu);
    v113 = sub_10009061C(&qword_10026BC40);
    v114 = v163;
    swift_arrayDestroy(v163, 1, v113);
    swift_slowDealloc(v114, -1, -1);
    v115 = v172;
    swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    v116 = v105;
    v41 = v171;
    swift_slowDealloc(v116, -1, -1);

    v117 = *(void (**)(char *, uint64_t))(v170 + 8);
    v117(v162, v85);
  }
  else
  {

    swift_bridgeObjectRelease_n(v95, 2);
    v117 = *(void (**)(char *, uint64_t))(v170 + 8);
    v117(v99, v85);
  }
  v141 = v160;
  v142 = v158;
  v143 = v158;
  LOBYTE(v142) = sub_100163568(v166, v142, v100);

  if ((v142 & 1) == 0)
  {
    v144 = v33;
    v145 = ((uint64_t (*)(char *, char *, uint64_t))v165)(v161, v164, v85);
    v146 = Logger.logObject.getter(v145);
    v147 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v146, v147))
    {
      v148 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v148 = 0;
      _os_log_impl((void *)&_mh_execute_header, v146, v147, "Failed adding client to client list", v148, 2u);
      swift_slowDealloc(v148, -1, -1);
    }

    v117(v161, v85);
    v149 = v154;
    *v154 = 0xD00000000000001CLL;
    v149[1] = 0x80000001001FF720;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v141 + 104))(v149, enum case for Errors.UnexpectedError(_:), v41);
    v150 = v169;
    (*(void (**)(char *, _QWORD *, uint64_t))(v141 + 16))(v169, v149, v41);
    v151 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v151, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v141 + 32))(v152, v150, v41);
    v153 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v144 + 16))(v144, v153);

    swift_release(v167);
    (*(void (**)(_QWORD *, uint64_t))(v141 + 8))(v149, v41);
    return swift_errorRelease(v61);
  }
  (*(void (**)(uint64_t, _QWORD))(v33 + 16))(v33, 0);

  return swift_release(v88);
}

uint64_t sub_10010CD1C(void *a1, void *a2, void (**a3)(const void *, Class, void *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unsigned int v37;
  uint8_t *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _QWORD *v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  NSArray v77;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  void *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  id v97;
  char *v98;
  void *v99;
  char *v100;
  void (**v101)(const void *, Class, void *);
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[5];
  char v108[24];
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v99 = a2;
  v5 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v95 - v9;
  v11 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v11);
  v98 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Errors(0);
  v103 = *(_QWORD *)(v13 - 8);
  v104 = v13;
  v14 = __chkstk_darwin(v13);
  v100 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v102 = (uint64_t *)((char *)&v95 - v16);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v95 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v95 - v25;
  v105 = swift_allocObject(&unk_10023B5A0, 24, 7);
  *(_QWORD *)(v105 + 16) = a3;
  v101 = a3;
  _Block_copy(a3);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v63 = sub_10008EA50(v17, (uint64_t)qword_10026DE40);
    v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v26, v63, v17);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Client doesn't have camera TCC, rejecting XPC message", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    v68 = v102;
    *v102 = 0xD000000000000012;
    v68[1] = 0x80000001001FF590;
    v69 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  if (!a1)
  {
    v68 = v102;
    *v102 = 0xD000000000000016;
    v68[1] = 0x80000001001FF5B0;
    v69 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_24:
    v71 = v103;
    v70 = v104;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v103 + 104))(v68, *v69, v104);
    v72 = v100;
    (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 16))(v100, v68, v70);
    v73 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v74 = swift_allocError(v70, v73, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v75, v72, v70);
    v76 = (void *)_convertErrorToNSError(_:)(v74);
    type metadata accessor for AccessoryBatteryState(0);
    v77.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v101[2](v101, v77.super.isa, v76);

LABEL_25:
    (*(void (**)(_QWORD *, uint64_t))(v71 + 8))(v68, v70);
    swift_errorRelease(v74);
    v62 = v105;
    return swift_release(v62);
  }
  v28 = (void *)objc_opt_self(NSXPCConnection, v27);
  v29 = a1;
  v30 = objc_msgSend(v28, "currentConnection");
  if (!v30)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v79 = v29;
    v80 = sub_10008EA50(v17, (uint64_t)qword_10026DE40);
    v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v80, v17);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed fetching current NSXPCConnection, cannot construct client", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v68 = v102;
    v71 = v103;
    *v102 = 0xD000000000000017;
    v68[1] = 0x80000001001FDAB0;
    v70 = v104;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v71 + 104))(v68, enum case for Errors.XPCNil(_:), v104);
    v85 = v100;
    (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 16))(v100, v68, v70);
    v86 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v74 = swift_allocError(v70, v86, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v87, v85, v70);
    v88 = (void *)_convertErrorToNSError(_:)(v74);
    type metadata accessor for AccessoryBatteryState(0);
    v77.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v101[2](v101, v77.super.isa, v88);

    goto LABEL_25;
  }
  v97 = v30;
  v31 = objc_msgSend(v30, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v32 = sub_10008EA50(v17, (uint64_t)qword_10026DE40);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v32, v17);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(8, -1);
    v37 = v31;
    v38 = v36;
    *(_DWORD *)v36 = 67109120;
    LODWORD(v109) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 4, v36 + 4, v36 + 8);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Client %d requesting current battery data", v38, 8u);
    swift_slowDealloc(v38, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v39 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v40 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v41 = *(void **)&v39[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v42 = v39;
  v43 = v41;
  OS_dispatch_semaphore.wait()();

  v44 = &v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v108, 0, 0);
  v45 = *(_QWORD *)v44;
  v46 = *(_QWORD *)(*(_QWORD *)v44 + 16);
  if (v46)
  {
    v95 = v40;
    v96 = v42;
    v47 = v45 + 32;
    swift_bridgeObjectRetain(v45);
    while (1)
    {
      sub_10009AFF4(v47, (uint64_t)v107);
      v48 = *(id *)(*sub_10009B038(v107, v107[3]) + 24);
      DockCoreInfo.identifier.getter(v48);

      DockCoreInfo.identifier.getter(v49);
      LOBYTE(v48) = static UUID.== infix(_:_:)(v10, v8);
      v50 = *(void (**)(char *, uint64_t))(v106 + 8);
      v50(v8, v5);
      v50(v10, v5);
      if ((v48 & 1) != 0)
        break;
      sub_100090E88(v107);
      v47 += 40;
      if (!--v46)
      {
        swift_bridgeObjectRelease(v45);
        v42 = v96;
        v40 = v95;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(v45);
    v89 = *(id *)&v39[v95];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v107, (uint64_t)&v109);
    sub_100090E88(v107);

    if (!*((_QWORD *)&v110 + 1))
      goto LABEL_33;
  }
  else
  {
LABEL_15:
    v51 = *(id *)&v39[v40];
    OS_dispatch_semaphore.signal()();

    v111 = 0;
    v109 = 0u;
    v110 = 0u;

    if (!*((_QWORD *)&v110 + 1))
    {
LABEL_33:
      v90 = v29;
      sub_10009B2C0((uint64_t)&v109, (uint64_t *)&unk_10026DF40);
LABEL_35:
      v68 = v102;
      v71 = v103;
      *v102 = 0xD000000000000011;
      v68[1] = 0x80000001001FF760;
      v70 = v104;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v71 + 104))(v68, enum case for Errors.NotFound(_:), v104);
      v91 = v100;
      (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 16))(v100, v68, v70);
      v92 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v74 = swift_allocError(v70, v92, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v93, v91, v70);
      v94 = (void *)_convertErrorToNSError(_:)(v74);
      type metadata accessor for AccessoryBatteryState(0);
      v77.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v101[2](v101, v77.super.isa, v94);

      goto LABEL_25;
    }
  }
  v52 = sub_10009061C(&qword_10026C2E0);
  v53 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v107, &v109, v52, v53, 6) & 1) == 0)
  {
    v90 = v29;
    goto LABEL_35;
  }
  v54 = v107[0];
  v55 = type metadata accessor for TaskPriority(0);
  v56 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v98, 1, 1, v55);
  v57 = (_QWORD *)swift_allocObject(&unk_10023B5C8, 64, 7);
  v57[2] = 0;
  v57[3] = 0;
  v58 = v99;
  v57[4] = v99;
  v57[5] = v54;
  v59 = v105;
  v57[6] = sub_10011437C;
  v57[7] = v59;
  v60 = v58;
  swift_retain(v59);
  v61 = sub_10018A990(v56, (uint64_t)&unk_10026E058, (uint64_t)v57);
  swift_release(v59);

  v62 = v61;
  return swift_release(v62);
}

uint64_t sub_10010D7B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[8] = a1;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ComponentType(0);
  v1[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[13] = v5;
  v1[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010D838, 0, 0);
}

uint64_t sub_10010D838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = swift_allocObject(&unk_10023B5F0, 24, 7);
  *(_QWORD *)(v5 + 16) = sub_1001B1FA8((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v2, enum case for ComponentType.Battery(_:), v3);
  v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  v7 = swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, v0 + 16, 0, 0);
  v8 = *v6;
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRetain(v8);
    v10 = sub_100145580(v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v0 + 104);
      v13 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 96);
      v15 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v8);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v17 = (void **)(v15 + 48);
        do
        {
          v19 = *(v17 - 2);
          v18 = (uint64_t)*(v17 - 1);
          v20 = *v17;
          v21 = qword_10026BBE0;
          swift_bridgeObjectRetain_n(v18, 2);
          v22 = v20;
          if (v21 != -1)
            swift_once(&qword_10026BBE0, sub_10012E948);
          v23 = *(_QWORD *)(v0 + 64);
          v24 = (uint8_t *)qword_1002755C0;
          swift_bridgeObjectRetain(v18);
          swift_retain(v5);
          sub_100184214(v24, v22, v23, v5, v19, v18);
          swift_bridgeObjectRelease_n(v18, 3);
          swift_release(v5);

          v17 += 3;
          --v16;
        }
        while (v16);
      }
      v41 = *(_QWORD *)(v0 + 112);
      v42 = *(_QWORD *)(v0 + 88);
      swift_bridgeObjectRelease(v15);
      swift_beginAccess(v5 + 16, v0 + 40, 0, 0);
      v43 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain(v43);
      swift_release(v5);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v43);
    }
    swift_bridgeObjectRelease(v8);
  }
  (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96), v7);
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v26 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 88);
  v27 = *(_QWORD *)(v0 + 72);
  v28 = sub_10008EA50(v27, (uint64_t)qword_10026DE40);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v28, v27);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Accessory does not have a battery service, cannot read", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }
  v33 = *(_QWORD *)(v0 + 112);
  v35 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  v37 = sub_1000ABB30();
  v38 = swift_allocError(&type metadata for DockdError, v37, 0, 0);
  *v39 = 1;
  swift_willThrow(v38);
  swift_release(v5);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010DBCC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint8_t *v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  BOOL v76;
  _QWORD *v77;
  uint8_t *v78;
  uint8_t *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  id v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  NSObject *v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  _QWORD *v125;
  NSObject *v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  id v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  char *v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177[5];
  char v178[24];
  __int128 v179;
  __int128 v180;
  uint64_t v181;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v157 - v9;
  v169 = type metadata accessor for ComponentType(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v166 = (char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for Errors(0);
  v12 = *(_QWORD *)(v174 - 8);
  v13 = __chkstk_darwin(v174);
  v172 = (char *)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (_QWORD **)((char *)&v157 - v15);
  v171 = type metadata accessor for Logger(0);
  v173 = *(_QWORD *)(v171 - 8);
  v17 = __chkstk_darwin(v171);
  v170 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v164 = (char *)&v157 - v20;
  v21 = __chkstk_darwin(v19);
  v165 = (char *)&v157 - v22;
  v23 = __chkstk_darwin(v21);
  v167 = (char *)&v157 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v157 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v157 - v28;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v47 = a2;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v48 = v171;
    v49 = sub_10008EA50(v171, (uint64_t)qword_10026DE40);
    v50 = v173;
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v173 + 16))(v29, v49, v48);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = v174;
    if (v54)
    {
      v56 = v16;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client doesn't have camera TCC, rejecting XPC message", v57, 2u);
      v58 = v57;
      v16 = v56;
      swift_slowDealloc(v58, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v48);
    *v16 = 0xD000000000000012;
    v16[1] = 0x80000001001FF590;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.CameraTCCMissing(_:), v55);
    v59 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v172, v16, v55);
    v60 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v55, v60, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v62, v59, v55);
    v63 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v63);
    goto LABEL_17;
  }
  if (!a1)
  {
    *v16 = 0xD000000000000016;
    v16[1] = 0x80000001001FF5B0;
    v64 = v174;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.NilParams(_:), v174);
    v65 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v172, v16, v64);
    v66 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v64, v66, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v67, v65, v64);
    v68 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v68);

    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v16, v64);
    return swift_errorRelease(v61);
  }
  v31 = (void *)objc_opt_self(NSXPCConnection, v30);
  v158 = a1;
  v175 = a1;
  v32 = objc_msgSend(v31, "currentConnection");
  if (!v32)
  {
    v69 = a2;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v70 = v171;
    v71 = sub_10008EA50(v171, (uint64_t)qword_10026DE40);
    v72 = v173;
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v173 + 16))(v27, v71, v70);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    v76 = os_log_type_enabled(v74, v75);
    v55 = v174;
    if (v76)
    {
      v77 = v16;
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed fetching current NSXPCConnection, cannot construct client", v78, 2u);
      v79 = v78;
      v16 = v77;
      swift_slowDealloc(v79, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v70);
    *v16 = 0xD000000000000017;
    v16[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for Errors.XPCNil(_:), v55);
    v80 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v172, v16, v55);
    v81 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v55, v81, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v82, v80, v55);
    v63 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v69 + 16))(v69, v63);

LABEL_17:
    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v16, v55);
    return swift_errorRelease(v61);
  }
  v161 = v32;
  v157 = v16;
  v163 = v12;
  v33 = a2;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v34 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v159 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v36 = v34;
  v37 = v35;
  OS_dispatch_semaphore.wait()();

  v160 = v36;
  v38 = &v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v178, 0, 0);
  v39 = *(_QWORD *)v38;
  v40 = *(_QWORD *)(v39 + 16);
  v41 = v174;
  v162 = v33;
  if (v40)
  {
    v42 = v39 + 32;
    swift_bridgeObjectRetain(v39);
    while (1)
    {
      sub_10009AFF4(v42, (uint64_t)v177);
      v43 = *(id *)(*sub_10009B038(v177, v177[3]) + 24);
      DockCoreInfo.identifier.getter(v43);

      DockCoreInfo.identifier.getter(v44);
      LOBYTE(v43) = static UUID.== infix(_:_:)(v10, v8);
      v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v8, v4);
      v45(v10, v4);
      if ((v43 & 1) != 0)
        break;
      sub_100090E88(v177);
      v42 += 40;
      if (!--v40)
      {
        swift_bridgeObjectRelease(v39);
        v41 = v174;
        v33 = v162;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v39);
    v83 = *(id *)&v34[v159];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v177, (uint64_t)&v179);
    sub_100090E88(v177);

    v41 = v174;
    v33 = v162;
  }
  else
  {
LABEL_11:
    v46 = *(id *)&v34[v159];
    OS_dispatch_semaphore.signal()();

    v181 = 0;
    v179 = 0u;
    v180 = 0u;

  }
  v84 = v163;
  v85 = v171;
  if (!*((_QWORD *)&v180 + 1))
  {
    sub_10009B2C0((uint64_t)&v179, (uint64_t *)&unk_10026DF40);
    goto LABEL_35;
  }
  v86 = sub_10009061C(&qword_10026C2E0);
  v87 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v177, &v179, v86, v87, 6) & 1) == 0)
  {
LABEL_35:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v120 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v173 + 16))(v170, v120, v85);
    v121 = v175;
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v124 = 138412290;
      *(_QWORD *)&v179 = v121;
      v126 = v121;
      v85 = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, (char *)&v179 + 8, v124 + 4, v124 + 12);
      *v125 = v158;

      v84 = v163;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "No matching record, can't lookup %@", v124, 0xCu);
      v127 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v125, 1, v127);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);
    }
    else
    {

      v122 = v121;
    }

    (*(void (**)(char *, uint64_t))(v173 + 8))(v170, v85);
    v128 = v157;
    *v157 = 0xD000000000000015;
    v128[1] = 0x80000001001FF740;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v128, enum case for Errors.AccessoryNotReachable(_:), v41);
    v129 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v84 + 16))(v172, v128, v41);
    v130 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v130, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v131, v129, v41);
    v132 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v162 + 16))(v162, v132);

    goto LABEL_48;
  }
  v88 = v177[0];
  v89 = (uint64_t)v166;
  (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v166, enum case for ComponentType.Battery(_:), v169);
  v90 = (_QWORD *)(v88 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  v91 = swift_beginAccess(v88 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, &v179, 0, 0);
  v92 = *v90;
  if (!*(_QWORD *)(*v90 + 16))
  {
LABEL_42:
    (*(void (**)(uint64_t, uint64_t, __n128))(v168 + 8))(v89, v169, v91);
LABEL_43:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v133 = v33;
    v134 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
    v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v173 + 16))(v167, v134, v85);
    v136 = Logger.logObject.getter(v135);
    v137 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v138 = 0;
      _os_log_impl((void *)&_mh_execute_header, v136, v137, "Accessory doesn't have a battery service", v138, 2u);
      swift_slowDealloc(v138, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v173 + 8))(v167, v85);
    v128 = v157;
    *v157 = 0xD000000000000012;
    v128[1] = 0x80000001001FF780;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v128, enum case for Errors.NotFound(_:), v41);
    v139 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v84 + 16))(v172, v128, v41);
    v140 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v140, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v141, v139, v41);
    v132 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v133 + 16))(v133, v132);

    swift_release(v88);
LABEL_48:

    (*(void (**)(_QWORD *, uint64_t))(v84 + 8))(v128, v41);
    return swift_errorRelease(v61);
  }
  swift_bridgeObjectRetain(*v90);
  v93 = sub_100145580(v89);
  if ((v94 & 1) == 0)
  {
    swift_bridgeObjectRelease(v92);
    goto LABEL_42;
  }
  v95 = *(_QWORD *)(*(_QWORD *)(v92 + 56) + 8 * v93);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v92);
  (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v89, v169);
  if (!*(_QWORD *)(v95 + 16))
  {
    swift_bridgeObjectRelease(v95);
    goto LABEL_43;
  }
  v96 = objc_msgSend(v161, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v97 = sub_10008EA50(v85, (uint64_t)qword_10026DE40);
  v98 = *(char **)(v173 + 16);
  v99 = v165;
  v169 = v97;
  v170 = v98;
  ((void (*)(char *))v98)(v165);
  v100 = v175;
  swift_bridgeObjectRetain(v95);
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.default.getter(v102);
  v104 = v103;
  v105 = os_log_type_enabled(v102, v103);
  v175 = v100;
  if (v105)
  {
    v106 = swift_slowAlloc(28, -1);
    v107 = swift_slowAlloc(8, -1);
    LODWORD(v166) = v104;
    v108 = (_QWORD *)v107;
    v167 = (char *)swift_slowAlloc(32, -1);
    v177[0] = (uint64_t)v167;
    *(_DWORD *)v106 = 67109634;
    LODWORD(v176) = v96;
    LODWORD(v160) = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 4, v106 + 4, v106 + 8);
    *(_WORD *)(v106 + 8) = 2112;
    v109 = v33;
    v176 = (uint64_t)v100;
    v168 = v88;
    v110 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v106 + 10, v106 + 18);
    *v108 = v158;

    *(_WORD *)(v106 + 18) = 2080;
    swift_bridgeObjectRetain(v95);
    v112 = Array.description.getter(v111, &type metadata for SensorInfo);
    v114 = v113;
    swift_bridgeObjectRelease(v95);
    v115 = v112;
    v33 = v109;
    v85 = v171;
    v176 = sub_1000906BC(v115, v114, v177);
    v88 = v168;
    v96 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v106 + 20, v106 + 28);
    swift_bridgeObjectRelease_n(v95, 2);
    swift_bridgeObjectRelease(v114);
    _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v166, "Client %d de-registering for battery data for %@, UUID %s", (uint8_t *)v106, 0x1Cu);
    v116 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v108, 1, v116);
    swift_slowDealloc(v108, -1, -1);
    v117 = v167;
    swift_arrayDestroy(v167, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v117, -1, -1);
    v118 = v106;
    v41 = v174;
    swift_slowDealloc(v118, -1, -1);

    v119 = *(void (**)(char *, uint64_t))(v173 + 8);
    v119(v165, v85);
  }
  else
  {

    swift_bridgeObjectRelease_n(v95, 2);
    v119 = *(void (**)(char *, uint64_t))(v173 + 8);
    v119(v99, v85);
  }
  v143 = v163;
  v144 = v161;
  v145 = sub_100175F5C(v96);

  if ((v145 & 1) == 0)
  {
    v146 = v88;
    v147 = v33;
    v148 = ((uint64_t (*)(char *, uint64_t, uint64_t))v170)(v164, v169, v85);
    v149 = Logger.logObject.getter(v148);
    v150 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v149, v150))
    {
      v151 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v151 = 0;
      _os_log_impl((void *)&_mh_execute_header, v149, v150, "Failed removing client from client list", v151, 2u);
      swift_slowDealloc(v151, -1, -1);
    }

    v119(v164, v85);
    v152 = v157;
    *v157 = 0xD000000000000020;
    v152[1] = 0x80000001001FF5D0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v143 + 104))(v152, enum case for Errors.UnexpectedError(_:), v41);
    v153 = v172;
    (*(void (**)(char *, _QWORD *, uint64_t))(v143 + 16))(v172, v152, v41);
    v154 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v61 = swift_allocError(v41, v154, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v143 + 32))(v155, v153, v41);
    v156 = (void *)_convertErrorToNSError(_:)(v61);
    (*(void (**)(uint64_t, void *))(v147 + 16))(v147, v156);

    swift_release(v146);
    (*(void (**)(_QWORD *, uint64_t))(v143 + 8))(v152, v41);
    return swift_errorRelease(v61);
  }
  (*(void (**)(uint64_t, _QWORD))(v33 + 16))(v33, 0);

  return swift_release(v88);
}

void sub_10010EE68(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  void *v32;
  char *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  NSObject *v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  _QWORD *v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void (*v98)(char *, uint64_t);
  id v99;
  id v100;
  char v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  _QWORD *v114;
  id v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  NSObject *v124;
  _QWORD v125[5];
  char v126[24];
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v109 - v9;
  v11 = type metadata accessor for Errors(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v123 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v122 = (uint64_t *)((char *)&v109 - v15);
  v16 = type metadata accessor for Logger(0);
  v120 = *(_QWORD *)(v16 - 8);
  v121 = v16;
  v17 = __chkstk_darwin(v16);
  v119 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v117 = (char *)&v109 - v20;
  v21 = __chkstk_darwin(v19);
  v118 = (char *)&v109 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v109 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v109 - v26;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v43 = v121;
    v44 = sub_10008EA50(v121, (uint64_t)qword_10026DE40);
    v45 = v120;
    v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v27, v44, v43);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Client doesn't have camera TCC, rejecting XPC message", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v43);
    v50 = v122;
    *v122 = 0xD000000000000012;
    v50[1] = 0x80000001001FF590;
    v51 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  if (!a1)
  {
    v50 = v122;
    *v122 = 0xD000000000000014;
    v50[1] = 0x80000001001FF700;
    v51 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_18:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v50, *v51, v11);
    v52 = v123;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v123, v50, v11);
    v53 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v53, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v55, v52, v11);
    v56 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v56);
LABEL_19:

    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v50, v11);
LABEL_20:
    swift_errorRelease(v54);
    return;
  }
  v116 = a2;
  v29 = (void *)objc_opt_self(NSXPCConnection, v28);
  v124 = a1;
  v30 = objc_msgSend(v29, "currentConnection");
  if (!v30)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v57 = v121;
    v58 = sub_10008EA50(v121, (uint64_t)qword_10026DE40);
    v59 = v120;
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v25, v58, v57);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed fetching current NSXPCConnection, cannot construct client", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v57);
    v50 = v122;
    *v122 = 0xD000000000000017;
    v50[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v50, enum case for Errors.XPCNil(_:), v11);
    v64 = v123;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v123, v50, v11);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v65, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v66, v64, v11);
    v56 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v116 + 16))(v116, v56);

    goto LABEL_19;
  }
  v112 = a1;
  v115 = v30;
  v113 = v12;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v31 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v114 = (_QWORD *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v32 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v33 = v31;
  v34 = v32;
  OS_dispatch_semaphore.wait()();

  v35 = &v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v126, 0, 0);
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(*(_QWORD *)v35 + 16);
  if (v37)
  {
    v110 = v31;
    v111 = v11;
    v38 = v36 + 32;
    swift_bridgeObjectRetain(v36);
    while (1)
    {
      sub_10009AFF4(v38, (uint64_t)v125);
      v39 = *(id *)(*sub_10009B038(v125, v125[3]) + 24);
      DockCoreInfo.identifier.getter(v39);

      DockCoreInfo.identifier.getter(v40);
      LOBYTE(v39) = static UUID.== infix(_:_:)(v10, v8);
      v41 = *(void (**)(char *, uint64_t))(v5 + 8);
      v41(v8, v4);
      v41(v10, v4);
      if ((v39 & 1) != 0)
        break;
      sub_100090E88(v125);
      v38 += 40;
      if (!--v37)
      {
        swift_bridgeObjectRelease(v36);
        v11 = v111;
        v31 = v110;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v36);
    v67 = *(id *)((char *)v114 + (_QWORD)v110);
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v125, (uint64_t)&v127);
    sub_100090E88(v125);

    v11 = v111;
  }
  else
  {
LABEL_11:
    v42 = *(id *)((char *)v114 + (_QWORD)v31);
    OS_dispatch_semaphore.signal()();

    v129 = 0;
    v127 = 0u;
    v128 = 0u;

  }
  v68 = v120;
  v69 = v121;
  if (!*((_QWORD *)&v128 + 1))
  {
    sub_10009B2C0((uint64_t)&v127, (uint64_t *)&unk_10026DF40);
    goto LABEL_34;
  }
  v70 = sub_10009061C(&qword_10026C2E0);
  v71 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v125, &v127, v70, v71, 6) & 1) == 0)
  {
LABEL_34:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v83 = sub_10008EA50(v69, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v119, v83, v69);
    v84 = v124;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v87 = 138412290;
      *(_QWORD *)&v127 = v84;
      v89 = v84;
      v68 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8, v87 + 4, v87 + 12);
      *v88 = v112;

      v69 = v121;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "No matching record, can't lookup %@", v87, 0xCu);
      v90 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v88, 1, v90);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {

      v85 = v84;
    }
    v91 = v116;

    (*(void (**)(char *, uint64_t))(v68 + 8))(v119, v69);
    v92 = v122;
    *v122 = 0xD000000000000015;
    v92[1] = 0x80000001001FF740;
    v93 = v113;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v113 + 104))(v92, enum case for Errors.AccessoryNotReachable(_:), v11);
    v94 = v123;
    (*(void (**)(char *, _QWORD *, uint64_t))(v93 + 16))(v123, v92, v11);
    v95 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v95, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v96, v94, v11);
    v97 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v91 + 16))(v91, v97);

    goto LABEL_40;
  }
  swift_release(v125[0]);
  LODWORD(v119) = objc_msgSend(v115, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v72 = sub_10008EA50(v69, (uint64_t)qword_10026DE40);
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  v73(v118, v72, v69);
  v74 = v124;
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.default.getter(v75);
  v77 = v76;
  if (os_log_type_enabled(v75, v76))
  {
    v78 = swift_slowAlloc(18, -1);
    v79 = swift_slowAlloc(8, -1);
    v124 = v74;
    v114 = (_QWORD *)v79;
    *(_DWORD *)v78 = 67109378;
    LODWORD(v127) = (_DWORD)v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 4, v78 + 4, v78 + 8);
    *(_WORD *)(v78 + 8) = 2112;
    LODWORD(v111) = v77;
    *(_QWORD *)&v127 = v124;
    v80 = v124;
    v69 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8, v78 + 10, v78 + 18);
    v81 = v114;
    *v114 = v112;

    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v111, "Client %d registering for tracking states for %@", (uint8_t *)v78, 0x12u);
    v82 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v81, 1, v82);
    v74 = v124;
    v68 = v120;
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v78, -1, -1);
  }
  else
  {

    v75 = v74;
  }

  v98 = *(void (**)(char *, uint64_t))(v68 + 8);
  v98(v118, v69);
  v99 = v115;
  v100 = v115;
  v101 = sub_1001640A8(v119, v99, v74);

  if ((v101 & 1) == 0)
  {
    v102 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v117, v72, v69);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Failed adding client to client list", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    v98(v117, v69);
    v92 = v122;
    *v122 = 0xD00000000000001CLL;
    v92[1] = 0x80000001001FF720;
    v93 = v113;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v113 + 104))(v92, enum case for Errors.UnexpectedError(_:), v11);
    v106 = v123;
    (*(void (**)(char *, _QWORD *, uint64_t))(v93 + 16))(v123, v92, v11);
    v107 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v107, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v108, v106, v11);
    v97 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v116 + 16))(v116, v97);

LABEL_40:
    (*(void (**)(_QWORD *, uint64_t))(v93 + 8))(v92, v11);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, _QWORD))(v116 + 16))(v116, 0);

}

uint64_t sub_10010FC28(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unsigned int v33;
  uint8_t *v34;
  _QWORD *v35;
  char *v36;
  void *v37;
  char *v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  id v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  _QWORD v100[5];
  char v101[24];
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v98 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v90 - v8;
  v10 = type metadata accessor for Errors(0);
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  v11 = __chkstk_darwin(v10);
  v94 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v95 = (uint64_t *)((char *)&v90 - v13);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v90 - v22;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v60 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v60, v14);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Client doesn't have camera TCC, rejecting XPC message", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    v65 = v95;
    *v95 = 0xD000000000000012;
    v65[1] = 0x80000001001FF590;
    v66 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a1)
  {
    v65 = v95;
    *v95 = 0xD000000000000016;
    v65[1] = 0x80000001001FF5B0;
    v66 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    v68 = v96;
    v67 = v97;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v96 + 104))(v65, *v66, v97);
    v69 = v94;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 16))(v94, v65, v67);
    v70 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v71 = swift_allocError(v67, v70, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v72, v69, v67);
    v73 = (void *)_convertErrorToNSError(_:)(v71);
    (*(void (**)(uint64_t, _QWORD, void *))(v98 + 16))(v98, 0, v73);

LABEL_36:
    (*(void (**)(_QWORD *, uint64_t))(v68 + 8))(v65, v67);
    return swift_errorRelease(v71);
  }
  v25 = (void *)objc_opt_self(NSXPCConnection, v24);
  v99 = a1;
  v26 = objc_msgSend(v25, "currentConnection");
  if (!v26)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v74 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
    v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v74, v14);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed fetching current NSXPCConnection, cannot construct client", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v65 = v95;
    v68 = v96;
    *v95 = 0xD000000000000017;
    v65[1] = 0x80000001001FDAB0;
    v67 = v97;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v65, enum case for Errors.XPCNil(_:), v97);
    v79 = v94;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 16))(v94, v65, v67);
    v80 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v71 = swift_allocError(v67, v80, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v81, v79, v67);
    v82 = (void *)_convertErrorToNSError(_:)(v71);
    (*(void (**)(uint64_t, _QWORD, void *))(v98 + 16))(v98, 0, v82);

    v83 = v99;
    goto LABEL_35;
  }
  v93 = v26;
  v27 = objc_msgSend(v26, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v28 = sub_10008EA50(v14, (uint64_t)qword_10026DE40);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v28, v14);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(8, -1);
    v33 = v27;
    v34 = v32;
    *(_DWORD *)v32 = 67109120;
    LODWORD(v102) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 4, v32 + 4, v32 + 8);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Client %d requesting current tracking state data", v34, 8u);
    swift_slowDealloc(v34, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v35 = &unk_100275000;
  v36 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v92 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v37 = *(void **)&v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v38 = v36;
  v39 = v37;
  OS_dispatch_semaphore.wait()();

  v40 = &v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v101, 0, 0);
  v41 = *(_QWORD *)v40;
  v42 = *(_QWORD *)(v41 + 16);
  if (v42)
  {
    v91 = v38;
    v43 = v41 + 32;
    swift_bridgeObjectRetain(v41);
    while (1)
    {
      sub_10009AFF4(v43, (uint64_t)v100);
      v44 = *(id *)(*sub_10009B038(v100, v100[3]) + 24);
      DockCoreInfo.identifier.getter(v44);

      DockCoreInfo.identifier.getter(v45);
      LOBYTE(v44) = static UUID.== infix(_:_:)(v9, v7);
      v46 = *(void (**)(char *, uint64_t))(v4 + 8);
      v46(v7, v3);
      v46(v9, v3);
      if ((v44 & 1) != 0)
        break;
      sub_100090E88(v100);
      v43 += 40;
      if (!--v42)
      {
        swift_bridgeObjectRelease(v41);
        v35 = &unk_100275000;
        v38 = v91;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(v41);
    v84 = *(id *)&v36[v92];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v100, (uint64_t)&v102);
    sub_100090E88(v100);

    v35 = (_QWORD *)&unk_100275000;
    if (!*((_QWORD *)&v103 + 1))
      goto LABEL_33;
  }
  else
  {
LABEL_15:
    v47 = *(id *)&v36[v92];
    OS_dispatch_semaphore.signal()();

    v104 = 0;
    v102 = 0u;
    v103 = 0u;

    if (!*((_QWORD *)&v103 + 1))
    {
LABEL_33:
      sub_10009B2C0((uint64_t)&v102, (uint64_t *)&unk_10026DF40);
      goto LABEL_34;
    }
  }
  v48 = sub_10009061C(&qword_10026C2E0);
  v49 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v100, &v102, v48, v49, 6) & 1) == 0)
  {
LABEL_34:
    v65 = v95;
    v68 = v96;
    *v95 = 0xD000000000000011;
    v65[1] = 0x80000001001FF760;
    v67 = v97;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v65, enum case for Errors.NotFound(_:), v97);
    v85 = v94;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 16))(v94, v65, v67);
    v86 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v71 = swift_allocError(v67, v86, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v87, v85, v67);
    v88 = (void *)_convertErrorToNSError(_:)(v71);
    (*(void (**)(uint64_t, _QWORD, void *))(v98 + 16))(v98, 0, v88);

    v83 = v93;
LABEL_35:

    goto LABEL_36;
  }
  swift_release(v100[0]);
  v50 = v35[199];
  v51 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v52 = *(os_unfair_lock_s **)(v50 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v52);
  os_unfair_lock_lock(v52 + 4);
  swift_release(v52);
  v53 = *(_QWORD *)(v50 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary);
  v54 = *(os_unfair_lock_s **)(v50 + v51);
  swift_retain(v53);
  swift_retain(v54);
  os_unfair_lock_unlock(v54 + 4);
  swift_release(v54);
  if (v53
    && (v55 = swift_retain(v53),
        v56 = dispatch thunk of TrackingSummaryInternal.encode()(v55),
        v58 = v57,
        swift_release(v53),
        v58 >> 60 != 15))
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    isa = 0;
    v56 = 0;
    v58 = 0xF000000000000000;
  }
  (*(void (**)(uint64_t, Class, _QWORD))(v98 + 16))(v98, isa, 0);

  swift_release(v53);
  return sub_10009E3A0(v56, v58);
}

void sub_10011061C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  void *v32;
  char *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  NSObject *v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  _QWORD *v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void (*v98)(char *, uint64_t);
  id v99;
  char v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  id v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  NSObject *v123;
  _QWORD v124[5];
  char v125[24];
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v108 - v9;
  v11 = type metadata accessor for Errors(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v122 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v121 = (uint64_t *)((char *)&v108 - v15);
  v16 = type metadata accessor for Logger(0);
  v119 = *(_QWORD *)(v16 - 8);
  v120 = v16;
  v17 = __chkstk_darwin(v16);
  v118 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v116 = (char *)&v108 - v20;
  v21 = __chkstk_darwin(v19);
  v117 = (char *)&v108 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v108 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v108 - v26;
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v43 = v120;
    v44 = sub_10008EA50(v120, (uint64_t)qword_10026DE40);
    v45 = v119;
    v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v27, v44, v43);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Client doesn't have camera TCC, rejecting XPC message", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v43);
    v50 = v121;
    *v121 = 0xD000000000000012;
    v50[1] = 0x80000001001FF590;
    v51 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  if (!a1)
  {
    v50 = v121;
    *v121 = 0xD000000000000016;
    v50[1] = 0x80000001001FF5B0;
    v51 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_18:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v50, *v51, v11);
    v52 = v122;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v122, v50, v11);
    v53 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v53, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v55, v52, v11);
    v56 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v56);
LABEL_19:

    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v50, v11);
LABEL_20:
    swift_errorRelease(v54);
    return;
  }
  v115 = a2;
  v29 = (void *)objc_opt_self(NSXPCConnection, v28);
  v123 = a1;
  v30 = objc_msgSend(v29, "currentConnection");
  if (!v30)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v57 = v120;
    v58 = sub_10008EA50(v120, (uint64_t)qword_10026DE40);
    v59 = v119;
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v25, v58, v57);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed fetching current NSXPCConnection, cannot construct client", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v57);
    v50 = v121;
    *v121 = 0xD000000000000017;
    v50[1] = 0x80000001001FDAB0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v50, enum case for Errors.XPCNil(_:), v11);
    v64 = v122;
    (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v122, v50, v11);
    v65 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v65, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v66, v64, v11);
    v56 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v115 + 16))(v115, v56);

    goto LABEL_19;
  }
  v111 = a1;
  v114 = v30;
  v112 = v12;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v31 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v113 = (_QWORD *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v32 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v33 = v31;
  v34 = v32;
  OS_dispatch_semaphore.wait()();

  v35 = &v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v125, 0, 0);
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(*(_QWORD *)v35 + 16);
  if (v37)
  {
    v109 = v31;
    v110 = v11;
    v38 = v36 + 32;
    swift_bridgeObjectRetain(v36);
    while (1)
    {
      sub_10009AFF4(v38, (uint64_t)v124);
      v39 = *(id *)(*sub_10009B038(v124, v124[3]) + 24);
      DockCoreInfo.identifier.getter(v39);

      DockCoreInfo.identifier.getter(v40);
      LOBYTE(v39) = static UUID.== infix(_:_:)(v10, v8);
      v41 = *(void (**)(char *, uint64_t))(v5 + 8);
      v41(v8, v4);
      v41(v10, v4);
      if ((v39 & 1) != 0)
        break;
      sub_100090E88(v124);
      v38 += 40;
      if (!--v37)
      {
        swift_bridgeObjectRelease(v36);
        v11 = v110;
        v31 = v109;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease(v36);
    v67 = *(id *)((char *)v113 + (_QWORD)v109);
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v124, (uint64_t)&v126);
    sub_100090E88(v124);

    v11 = v110;
  }
  else
  {
LABEL_11:
    v42 = *(id *)((char *)v113 + (_QWORD)v31);
    OS_dispatch_semaphore.signal()();

    v128 = 0;
    v126 = 0u;
    v127 = 0u;

  }
  v68 = v119;
  v69 = v120;
  if (!*((_QWORD *)&v127 + 1))
  {
    sub_10009B2C0((uint64_t)&v126, (uint64_t *)&unk_10026DF40);
    goto LABEL_34;
  }
  v70 = sub_10009061C(&qword_10026C2E0);
  v71 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v124, &v126, v70, v71, 6) & 1) == 0)
  {
LABEL_34:
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v83 = sub_10008EA50(v69, (uint64_t)qword_10026DE40);
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v118, v83, v69);
    v84 = v123;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v87 = 138412290;
      *(_QWORD *)&v126 = v84;
      v89 = v84;
      v68 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v87 + 4, v87 + 12);
      *v88 = v111;

      v69 = v120;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "No matching record, can't lookup %@", v87, 0xCu);
      v90 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v88, 1, v90);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {

      v85 = v84;
    }
    v91 = v115;

    (*(void (**)(char *, uint64_t))(v68 + 8))(v118, v69);
    v92 = v121;
    *v121 = 0xD000000000000015;
    v92[1] = 0x80000001001FF740;
    v93 = v112;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v112 + 104))(v92, enum case for Errors.AccessoryNotReachable(_:), v11);
    v94 = v122;
    (*(void (**)(char *, _QWORD *, uint64_t))(v93 + 16))(v122, v92, v11);
    v95 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v95, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v96, v94, v11);
    v97 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v91 + 16))(v91, v97);

    goto LABEL_40;
  }
  swift_release(v124[0]);
  LODWORD(v118) = objc_msgSend(v114, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v72 = sub_10008EA50(v69, (uint64_t)qword_10026DE40);
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  v73(v117, v72, v69);
  v74 = v123;
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.default.getter(v75);
  v77 = v76;
  if (os_log_type_enabled(v75, v76))
  {
    v78 = swift_slowAlloc(18, -1);
    v79 = swift_slowAlloc(8, -1);
    v123 = v74;
    v113 = (_QWORD *)v79;
    *(_DWORD *)v78 = 67109378;
    LODWORD(v126) = (_DWORD)v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v78 + 4, v78 + 8);
    *(_WORD *)(v78 + 8) = 2112;
    LODWORD(v110) = v77;
    *(_QWORD *)&v126 = v123;
    v80 = v123;
    v69 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v78 + 10, v78 + 18);
    v81 = v113;
    *v113 = v111;

    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v110, "Client %d de-registering for tracking state data for %@", (uint8_t *)v78, 0x12u);
    v82 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v81, 1, v82);
    v74 = v123;
    v68 = v119;
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v78, -1, -1);
  }
  else
  {

    v75 = v74;
  }

  v98 = *(void (**)(char *, uint64_t))(v68 + 8);
  v98(v117, v69);
  v99 = v114;
  v100 = sub_10017618C(v118);

  if ((v100 & 1) == 0)
  {
    v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v116, v72, v69);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v104 = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed removing client from client list", v104, 2u);
      swift_slowDealloc(v104, -1, -1);
    }

    v98(v116, v69);
    v92 = v121;
    *v121 = 0xD000000000000020;
    v92[1] = 0x80000001001FF5D0;
    v93 = v112;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v112 + 104))(v92, enum case for Errors.UnexpectedError(_:), v11);
    v105 = v122;
    (*(void (**)(char *, _QWORD *, uint64_t))(v93 + 16))(v122, v92, v11);
    v106 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v54 = swift_allocError(v11, v106, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v107, v105, v11);
    v97 = (void *)_convertErrorToNSError(_:)(v54);
    (*(void (**)(uint64_t, void *))(v115 + 16))(v115, v97);

LABEL_40:
    (*(void (**)(_QWORD *, uint64_t))(v93 + 8))(v92, v11);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, _QWORD))(v115 + 16))(v115, 0);

}

void sub_1001113D4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  id v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  unsigned int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;

  v84 = a2;
  v3 = type metadata accessor for Errors(0);
  v83 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v71 - v7);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v71 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v71 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v71 - v20;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v40 = v6;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v41 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v21, v41, v9);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Client doesn't have camera TCC, rejecting XPC message", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    *v8 = 0xD000000000000012;
    v8[1] = 0x80000001001FF590;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v3);
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v40, v8, v3);
    v47 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v47, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v49, v40, v3);
    goto LABEL_14;
  }
  if (!a1)
  {
    *v8 = 0xD000000000000014;
    v8[1] = 0x80000001001FF700;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.NilParams(_:), v3);
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v6, v8, v3);
    v50 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v50, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v51, v6, v3);
LABEL_14:
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);
LABEL_15:

    (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v8, v3);
    swift_errorRelease(v48);
    return;
  }
  v82 = v6;
  v23 = (void *)objc_opt_self(NSXPCConnection, v22);
  v24 = a1;
  v25 = objc_msgSend(v23, "currentConnection");
  if (!v25)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v53 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v53, v9);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed fetching current NSXPCConnection, cannot construct client", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    *v8 = 0xD000000000000017;
    v8[1] = 0x80000001001FDAB0;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.XPCNil(_:), v3);
    v58 = v82;
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v82, v8, v3);
    v59 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v59, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v60, v58, v3);
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);

    goto LABEL_15;
  }
  v26 = v25;
  v81 = objc_msgSend(v25, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v27 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v79 = v27;
  v80 = v28;
  ((void (*)(char *))v28)(v19);
  v29 = v24;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v78 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(18, -1);
    v75 = v26;
    v33 = v32;
    v77 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v33 = 67109378;
    HIDWORD(v86) = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v86 + 4, &v87, v33 + 4, v33 + 8);
    *(_WORD *)(v33 + 8) = 2112;
    v72 = v33 + 18;
    v73 = v33 + 10;
    v85 = v29;
    v74 = v30;
    v34 = v29;
    v76 = v29;
    v35 = v34;
    v36 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v73, v72);
    *v77 = a1;

    v29 = v76;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v78, "Client %d registering for system events for %@", (uint8_t *)v33, 0x12u);
    v37 = sub_10009061C(&qword_10026BC40);
    v38 = v77;
    swift_arrayDestroy(v77, 1, v37);
    swift_slowDealloc(v38, -1, -1);
    v39 = v33;
    v26 = v75;
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {

    v36 = v29;
  }

  v61 = *(void (**)(char *, uint64_t))(v10 + 8);
  v61(v19, v9);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v62 = v26;
  v63 = sub_100163554(v81, v26);

  if ((v63 & 1) == 0)
  {
    v64 = v80(v13, v79, v9);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed adding client to client list", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    v61(v13, v9);
    *v8 = 0xD00000000000001CLL;
    v8[1] = 0x80000001001FF720;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.UnexpectedError(_:), v3);
    v68 = v82;
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v82, v8, v3);
    v69 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v69, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v70, v68, v3);
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);

    goto LABEL_15;
  }
  (*(void (**)(uint64_t, _QWORD))(v84 + 16))(v84, 0);

}

uint64_t sub_100111C98(void *a1, void *a2, void (**a3)(const void *, _QWORD, void *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  unsigned int v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  void *v91;
  void *v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  id v106;
  char *v107;
  void *v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void (**v113)(const void *, _QWORD, void *);
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[5];
  char v117[24];
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v108 = a2;
  v5 = type metadata accessor for UUID(0);
  v115 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v104 - v9;
  v11 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v11);
  v107 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for Errors(0);
  v112 = *(_QWORD *)(v114 - 8);
  v13 = __chkstk_darwin(v114);
  v109 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (uint64_t *)((char *)&v104 - v15);
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v104 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v104 - v24;
  v110 = swift_allocObject(&unk_10023B500, 24, 7);
  *(_QWORD *)(v110 + 16) = a3;
  v113 = a3;
  _Block_copy(a3);
  if ((sub_1000F94CC() & 1) == 0)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v51 = sub_10008EA50(v16, (uint64_t)qword_10026DE40);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v25, v51, v16);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Client doesn't have camera TCC, rejecting XPC message", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
    v56 = v111;
    *v111 = 0xD000000000000012;
    v56[1] = 0x80000001001FF590;
    v57 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_22;
  }
  if (!a1)
  {
    v56 = v111;
    *v111 = 0xD000000000000016;
    v56[1] = 0x80000001001FF5B0;
    v57 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_22:
    v58 = v112;
    v59 = v114;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v112 + 104))(v56, *v57, v114);
    v60 = v109;
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 16))(v109, v56, v59);
    v61 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v62 = swift_allocError(v59, v61, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v63, v60, v59);
    v64 = (void *)_convertErrorToNSError(_:)(v62);
    v113[2](v113, 0, v64);

LABEL_23:
    (*(void (**)(_QWORD *, uint64_t))(v58 + 8))(v56, v59);
    swift_errorRelease(v62);
    v65 = v110;
    return swift_release(v65);
  }
  v27 = (void *)objc_opt_self(NSXPCConnection, v26);
  v28 = a1;
  v29 = objc_msgSend(v27, "currentConnection");
  if (!v29)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v67 = v28;
    v68 = sub_10008EA50(v16, (uint64_t)qword_10026DE40);
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v68, v16);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Failed fetching current NSXPCConnection, cannot construct client", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v56 = v111;
    v58 = v112;
    *v111 = 0xD000000000000017;
    v56[1] = 0x80000001001FDAB0;
    v59 = v114;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v58 + 104))(v56, enum case for Errors.XPCNil(_:), v114);
    v73 = v109;
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 16))(v109, v56, v59);
    v74 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v62 = swift_allocError(v59, v74, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v75, v73, v59);
    v76 = (void *)_convertErrorToNSError(_:)(v62);
    v113[2](v113, 0, v76);

    goto LABEL_23;
  }
  v106 = v29;
  v30 = objc_msgSend(v29, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v31 = sub_10008EA50(v16, (uint64_t)qword_10026DE40);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v23, v31, v16);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(8, -1);
    v36 = v30;
    v37 = v35;
    *(_DWORD *)v35 = 67109120;
    LODWORD(v118) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 4, v35 + 4, v35 + 8);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Client %d requesting current system event data", v37, 8u);
    swift_slowDealloc(v37, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v38 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v39 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v40 = *(void **)&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v41 = v38;
  v42 = v40;
  OS_dispatch_semaphore.wait()();

  v43 = &v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v117, 0, 0);
  v44 = *(_QWORD *)v43;
  v45 = *(_QWORD *)(*(_QWORD *)v43 + 16);
  if (v45)
  {
    v104 = v39;
    v105 = v41;
    v46 = v44 + 32;
    swift_bridgeObjectRetain(v44);
    while (1)
    {
      sub_10009AFF4(v46, (uint64_t)v116);
      v47 = *(id *)(*sub_10009B038(v116, v116[3]) + 24);
      DockCoreInfo.identifier.getter(v47);

      DockCoreInfo.identifier.getter(v48);
      LOBYTE(v47) = static UUID.== infix(_:_:)(v10, v8);
      v49 = *(void (**)(char *, uint64_t))(v115 + 8);
      v49(v8, v5);
      v49(v10, v5);
      if ((v47 & 1) != 0)
        break;
      sub_100090E88(v116);
      v46 += 40;
      if (!--v45)
      {
        swift_bridgeObjectRelease(v44);
        v41 = v105;
        v39 = v104;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(v44);
    v77 = *(id *)&v38[v104];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v116, (uint64_t)&v118);
    sub_100090E88(v116);

  }
  else
  {
LABEL_15:
    v50 = *(id *)&v38[v39];
    OS_dispatch_semaphore.signal()();

    v120 = 0;
    v118 = 0u;
    v119 = 0u;

  }
  v78 = v110;
  if (*((_QWORD *)&v119 + 1))
  {
    v79 = sub_10009061C(&qword_10026C2E0);
    v80 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v116, &v118, v79, v80, 6) & 1) != 0)
    {
      v81 = v28;
      v82 = v116[0];
      v83 = type metadata accessor for TaskPriority(0);
      v84 = (uint64_t)v107;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v107, 1, 1, v83);
      v85 = (_QWORD *)swift_allocObject(&unk_10023B528, 64, 7);
      v85[2] = 0;
      v85[3] = 0;
      v86 = v108;
      v85[4] = v108;
      v85[5] = v82;
      v28 = v81;
      v85[6] = sub_10009B688;
      v85[7] = v78;
      v87 = v86;
      swift_retain(v78);
      v88 = sub_10018AB1C(v84, (uint64_t)&unk_10026E030, (uint64_t)v85);
      swift_release(v88);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v118, (uint64_t *)&unk_10026DF40);
  }
  *(_QWORD *)&v118 = 0;
  *((_QWORD *)&v118 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(*((_QWORD *)&v118 + 1));
  *(_QWORD *)&v118 = 0xD000000000000020;
  *((_QWORD *)&v118 + 1) = 0x80000001001FF620;
  v89 = objc_msgSend(v28, "description");
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  v92 = v91;

  v93._countAndFlagsBits = v90;
  v93._object = v92;
  String.append(_:)(v93);
  swift_bridgeObjectRelease(v92);
  v94 = *((_QWORD *)&v118 + 1);
  v96 = v111;
  v95 = v112;
  *v111 = v118;
  v96[1] = v94;
  v97 = v28;
  v98 = v114;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v95 + 104))(v96, enum case for Errors.NotFound(_:), v114);
  v99 = v109;
  (*(void (**)(char *, _QWORD *, uint64_t))(v95 + 16))(v109, v96, v98);
  v100 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
  v101 = swift_allocError(v98, v100, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v102, v99, v98);
  v103 = (void *)_convertErrorToNSError(_:)(v101);
  v113[2](v113, 0, v103);

  (*(void (**)(_QWORD *, uint64_t))(v95 + 8))(v96, v98);
  swift_errorRelease(v101);
  v65 = v78;
  return swift_release(v65);
}

uint64_t sub_100112740(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = a1;
  v2 = type metadata accessor for Logger(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001127A0, 0, 0);
}

uint64_t sub_1001127A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  NSObject *v43;
  NSObject *v44;

  v3 = *(void **)(*(_QWORD *)(v2 + 32) + 32);
  *(_QWORD *)(v2 + 64) = v3;
  if (v3)
  {
    v4 = objc_opt_self(HAPAccessoryServerBTLE, a2);
    v5 = swift_dynamicCastObjCClass(v3, v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v3;
      v8 = objc_msgSend(v6, "primaryAccessory");
      if (v8)
      {
        v10 = v8;
        v44 = v7;
        v11 = (void *)objc_opt_self(CBUUID, v9);
        v12 = sub_10009061C((uint64_t *)&unk_10026E5E0);
        v13 = swift_allocObject(v12, 72, 7);
        *(_OWORD *)(v13 + 16) = xmmword_1001DE690;
        *(_QWORD *)(v13 + 56) = &type metadata for UInt32;
        *(_QWORD *)(v13 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v13 + 32) = 266;
        String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v13);
        v15 = v14;
        v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v15);
        v17 = objc_msgSend(v11, "UUIDWithString:", v16);

        v18 = objc_msgSend(v17, "UUIDString");
        if (!v18)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v20 = v19;
          v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v20);
        }
        v21 = swift_allocObject(v12, 72, 7);
        *(_OWORD *)(v21 + 16) = xmmword_1001DE690;
        *(_QWORD *)(v21 + 56) = &type metadata for UInt32;
        *(_QWORD *)(v21 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v21 + 32) = 256;
        String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v21);
        v23 = v22;
        v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v23);
        v25 = objc_msgSend(v11, "UUIDWithString:", v24);

        v26 = objc_msgSend(v25, "UUIDString");
        if (!v26)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v28 = v27;
          v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
        }
        v29 = objc_msgSend(v10, "characteristicOfType:serviceType:", v18, v26, 1, 2);
        *(_QWORD *)(v2 + 72) = v29;

        v7 = v44;
        if (v29)
        {
          v30 = *(_QWORD *)(v2 + 32);
          v31 = (_QWORD *)swift_task_alloc(48);
          *(_QWORD *)(v2 + 80) = v31;
          v31[2] = v6;
          v31[3] = v29;
          v31[4] = v30;
          v32 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
          *(_QWORD *)(v2 + 88) = v32;
          v33 = sub_10009061C(&qword_10026E040);
          *v32 = v2;
          v32[1] = sub_100112BD8;
          return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 16, 0, 0, 0xD000000000000017, 0x80000001001FF670, sub_1001142BC, v31, v33);
        }
      }
      if (qword_10026BB60 != -1)
        swift_once(&qword_10026BB60, sub_1000EF32C);
      v35 = *(_QWORD *)(v2 + 48);
      v36 = *(_QWORD *)(v2 + 56);
      v37 = *(_QWORD *)(v2 + 40);
      v38 = sub_10008EA50(v37, (uint64_t)qword_10026DE40);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v38, v37);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Accessory does not contain a System Events characteristic!", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
        v43 = v40;
      }
      else
      {
        v43 = v7;
        v7 = v40;
      }

      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 48) + 8))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 40));
    }
  }
  swift_task_dealloc(*(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(_QWORD, unint64_t))(v2 + 8))(0, 0xF000000000000000);
}

uint64_t sub_100112BD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100112C90;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    v4 = sub_100112C44;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100112C44()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 64);

  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
}

uint64_t sub_100112C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(void **)(v0 + 64);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100112CE4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  id v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  unsigned int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;

  v84 = a2;
  v3 = type metadata accessor for Errors(0);
  v83 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v71 - v7);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v71 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v71 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v71 - v20;
  if ((sub_1000F94CC() & 1) == 0)
  {
    v40 = v6;
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v41 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v21, v41, v9);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Client doesn't have camera TCC, rejecting XPC message", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    *v8 = 0xD000000000000012;
    v8[1] = 0x80000001001FF590;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v3);
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v40, v8, v3);
    v47 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v47, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v49, v40, v3);
    goto LABEL_14;
  }
  if (!a1)
  {
    *v8 = 0xD000000000000016;
    v8[1] = 0x80000001001FF5B0;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.NilParams(_:), v3);
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v6, v8, v3);
    v50 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v50, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v51, v6, v3);
LABEL_14:
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);
LABEL_15:

    (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v8, v3);
    swift_errorRelease(v48);
    return;
  }
  v82 = v6;
  v23 = (void *)objc_opt_self(NSXPCConnection, v22);
  v24 = a1;
  v25 = objc_msgSend(v23, "currentConnection");
  if (!v25)
  {
    if (qword_10026BB60 != -1)
      swift_once(&qword_10026BB60, sub_1000EF32C);
    v53 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v53, v9);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed fetching current NSXPCConnection, cannot construct client", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    *v8 = 0xD000000000000017;
    v8[1] = 0x80000001001FDAB0;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.XPCNil(_:), v3);
    v58 = v82;
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v82, v8, v3);
    v59 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v59, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v60, v58, v3);
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);

    goto LABEL_15;
  }
  v26 = v25;
  v81 = objc_msgSend(v25, "processIdentifier");
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v27 = sub_10008EA50(v9, (uint64_t)qword_10026DE40);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v79 = v27;
  v80 = v28;
  ((void (*)(char *))v28)(v19);
  v29 = v24;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v78 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(18, -1);
    v75 = v26;
    v33 = v32;
    v77 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v33 = 67109378;
    HIDWORD(v86) = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v86 + 4, &v87, v33 + 4, v33 + 8);
    *(_WORD *)(v33 + 8) = 2112;
    v72 = v33 + 18;
    v73 = v33 + 10;
    v85 = v29;
    v74 = v30;
    v34 = v29;
    v76 = v29;
    v35 = v34;
    v36 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v73, v72);
    *v77 = a1;

    v29 = v76;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v78, "Client %d de-registering for event data for %@", (uint8_t *)v33, 0x12u);
    v37 = sub_10009061C(&qword_10026BC40);
    v38 = v77;
    swift_arrayDestroy(v77, 1, v37);
    swift_slowDealloc(v38, -1, -1);
    v39 = v33;
    v26 = v75;
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {

    v36 = v29;
  }

  v61 = *(void (**)(char *, uint64_t))(v10 + 8);
  v61(v19, v9);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v62 = v26;
  v63 = sub_100166A00(v81, v26);

  if ((v63 & 1) == 0)
  {
    v64 = v80(v13, v79, v9);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed removing client from client list", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    v61(v13, v9);
    *v8 = 0xD000000000000020;
    v8[1] = 0x80000001001FF5D0;
    v46 = v83;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v8, enum case for Errors.UnexpectedError(_:), v3);
    v68 = v82;
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 16))(v82, v8, v3);
    v69 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v48 = swift_allocError(v3, v69, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v70, v68, v3);
    v52 = (void *)_convertErrorToNSError(_:)(v48);
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v52);

    goto LABEL_15;
  }
  (*(void (**)(uint64_t, _QWORD))(v84 + 16))(v84, 0);

}

uint64_t sub_1001135A8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t result;
  uint64_t v67;
  Class isa;
  id v69;
  Class v70;
  Class v71;
  Class v72;
  id v73;
  uint64_t v74;
  _BYTE *v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 aBlock;
  __int128 v86;
  void (*v87)();
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _BYTE v91[40];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = objc_msgSend(a1, "processIdentifier");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "valueForEntitlement:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(&aBlock);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    aBlock = 0u;
    v86 = 0u;
  }
  sub_10009AEEC((uint64_t)&aBlock, (uint64_t)v91);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v10 = qword_100275638;
  v83 = sub_10016D5D0(a1);
  v12 = v11;
  v81 = v7;
  if (v11)
  {
    v13 = v5;
    v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v15 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    v16 = v4;
    v17 = v2;
    swift_retain(v15);
    swift_bridgeObjectRetain(v12);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    v18 = (uint64_t *)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps);
    swift_beginAccess(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps, &aBlock, 33, 0);
    v19 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v89 = *v18;
    *v18 = 0x8000000000000000;
    sub_1001BC110((uint64_t)v19, v83, v12, isUniquelyReferenced_nonNull_native);
    v21 = *v18;
    *v18 = v89;
    v2 = v17;
    v4 = v16;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v21);
    swift_endAccess(&aBlock);
    v22 = *(os_unfair_lock_s **)(v10 + v14);
    v5 = v13;
    v7 = v81;
    swift_retain(v22);
    os_unfair_lock_unlock(v22 + 4);
    swift_release(v22);
  }
  if (qword_10026BB60 != -1)
    swift_once(&qword_10026BB60, sub_1000EF32C);
  v80 = a1;
  v23 = sub_10008EA50(v4, (uint64_t)qword_10026DE40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v23, v4);
  sub_1000ACE4C((uint64_t)v91, (uint64_t)&aBlock, &qword_10026E5F0);
  v24 = swift_bridgeObjectRetain_n(v12, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v79 = v2;
  if (v27)
  {
    v28 = swift_slowAlloc(28, -1);
    v29 = swift_slowAlloc(64, -1);
    v84 = v29;
    *(_DWORD *)v28 = 67109634;
    LODWORD(v89) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, (char *)&v89 + 4, v28 + 4, v28 + 8);
    *(_WORD *)(v28 + 8) = 2080;
    sub_1000ACE4C((uint64_t)&aBlock, (uint64_t)&v89, &qword_10026E5F0);
    v30 = sub_10009061C(&qword_10026E5F0);
    v31 = String.init<A>(describing:)(&v89, v30);
    v32 = v5;
    v34 = v33;
    v89 = sub_1000906BC(v31, v33, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v28 + 10, v28 + 18);
    swift_bridgeObjectRelease(v34);
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
    *(_WORD *)(v28 + 18) = 2080;
    v89 = v83;
    v90[0] = v12;
    swift_bridgeObjectRetain(v12);
    v35 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v36 = String.init<A>(describing:)(&v89, v35);
    v38 = v37;
    v89 = sub_1000906BC(v36, v37, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v28 + 20, v28 + 28);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v28, 0x1Cu);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v81, v4);
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);

    swift_bridgeObjectRelease_n(v12, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v81 = (char *)objc_opt_self(NSXPCInterface, v39);
  v78 = objc_msgSend(v81, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore18DockDaemonProtocol_);
  v40 = swift_allocObject(&unk_10023B398, 24, 7);
  v41 = v80;
  swift_unknownObjectWeakInit(v40 + 16, v80);
  sub_1000ACE4C((uint64_t)v91, (uint64_t)&v89, &qword_10026E5F0);
  v42 = swift_allocObject(&unk_10023B3C0, 80, 7);
  v43 = v82;
  *(_DWORD *)(v42 + 16) = v82;
  sub_10009AEEC((uint64_t)&v89, v42 + 24);
  v44 = v83;
  *(_QWORD *)(v42 + 56) = v40;
  *(_QWORD *)(v42 + 64) = v44;
  *(_QWORD *)(v42 + 72) = v12;
  v87 = sub_1001140BC;
  v88 = v42;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v86 = sub_10012357C;
  *((_QWORD *)&v86 + 1) = &unk_10023B3D8;
  v45 = _Block_copy(&aBlock);
  v46 = v88;
  swift_bridgeObjectRetain(v12);
  swift_retain(v40);
  swift_release(v46);
  objc_msgSend(v41, "setInvalidationHandler:", v45);
  _Block_release(v45);
  sub_1000ACE4C((uint64_t)v91, (uint64_t)&v89, &qword_10026E5F0);
  v47 = swift_allocObject(&unk_10023B410, 80, 7);
  *(_DWORD *)(v47 + 16) = v43;
  sub_10009AEEC((uint64_t)&v89, v47 + 24);
  *(_QWORD *)(v47 + 56) = v40;
  *(_QWORD *)(v47 + 64) = v44;
  *(_QWORD *)(v47 + 72) = v12;
  v87 = sub_100114128;
  v88 = v47;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v86 = sub_10012357C;
  *((_QWORD *)&v86 + 1) = &unk_10023B428;
  v48 = _Block_copy(&aBlock);
  v49 = v88;
  swift_retain(v40);
  swift_release(v49);
  objc_msgSend(v41, "setInterruptionHandler:", v48);
  _Block_release(v48);
  sub_100090EE8(0, (unint64_t *)&unk_10026DF60, NSSet_ptr);
  v50 = sub_10009061C(&qword_10026D7F8);
  v51 = swift_allocObject(v50, 448, 7);
  *(_OWORD *)(v51 + 16) = xmmword_1001DF9B0;
  v52 = type metadata accessor for SensorButtonState(0);
  *(_QWORD *)(v51 + 56) = sub_10009061C(&qword_10026DF70);
  *(_QWORD *)(v51 + 32) = v52;
  v53 = type metadata accessor for SensorLEDState(0);
  *(_QWORD *)(v51 + 88) = sub_10009061C(&qword_10026DF78);
  *(_QWORD *)(v51 + 64) = v53;
  v54 = type metadata accessor for DockCoreInfo(0);
  *(_QWORD *)(v51 + 120) = sub_10009061C(&qword_10026DF80);
  *(_QWORD *)(v51 + 96) = v54;
  v55 = sub_100090EE8(0, &qword_10026DF88, NSArray_ptr);
  *(_QWORD *)(v51 + 152) = sub_10009061C((uint64_t *)&unk_10026DF90);
  *(_QWORD *)(v51 + 128) = v55;
  v56 = sub_100090EE8(0, &qword_10026C380, NSNumber_ptr);
  *(_QWORD *)(v51 + 184) = sub_10009061C(&qword_10026DFA0);
  *(_QWORD *)(v51 + 160) = v56;
  v57 = sub_100090EE8(0, &qword_10026DFA8, NSString_ptr);
  *(_QWORD *)(v51 + 216) = sub_10009061C(&qword_10026DFB0);
  *(_QWORD *)(v51 + 192) = v57;
  v58 = sub_100090EE8(0, (unint64_t *)&qword_10026DFB8, NSData_ptr);
  *(_QWORD *)(v51 + 248) = sub_10009061C(&qword_10026DFC0);
  *(_QWORD *)(v51 + 224) = v58;
  v59 = sub_100090EE8(0, &qword_10026DFC8, NSDate_ptr);
  *(_QWORD *)(v51 + 280) = sub_10009061C(&qword_10026DFD0);
  *(_QWORD *)(v51 + 256) = v59;
  v60 = sub_100090EE8(0, &qword_10026DFD8, NSDictionary_ptr);
  *(_QWORD *)(v51 + 312) = sub_10009061C(&qword_10026DFE0);
  *(_QWORD *)(v51 + 288) = v60;
  v61 = sub_100090EE8(0, &qword_10026DFE8, NSURL_ptr);
  *(_QWORD *)(v51 + 344) = sub_10009061C((uint64_t *)&unk_10026DFF0);
  *(_QWORD *)(v51 + 320) = v61;
  v62 = sub_100090EE8(0, (unint64_t *)&qword_10026D7C8, NSError_ptr);
  *(_QWORD *)(v51 + 376) = sub_10009061C(&qword_10026E000);
  *(_QWORD *)(v51 + 352) = v62;
  v63 = type metadata accessor for SensorTrackerState(0);
  *(_QWORD *)(v51 + 408) = sub_10009061C(&qword_10026E008);
  *(_QWORD *)(v51 + 384) = v63;
  v64 = type metadata accessor for CameraSessionInformation(0);
  *(_QWORD *)(v51 + 440) = sub_10009061C(&qword_10026E010);
  *(_QWORD *)(v51 + 416) = v64;
  v65 = (void *)NSSet.init(objects:)(v51);
  *(_QWORD *)&aBlock = 0;
  result = static Set._forceBridgeFromObjectiveC(_:result:)(v65, &aBlock, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  v67 = aBlock;
  if ((_QWORD)aBlock)
  {

    isa = Set._bridgeToObjectiveC()().super.isa;
    v69 = v78;
    objc_msgSend(v78, "setClasses:forSelector:argumentIndex:ofReply:", isa, "setSensorStatesWithInfo:system:sensors:states:completion:", 0, 0);

    v70 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v69, "setClasses:forSelector:argumentIndex:ofReply:", v70, "setSensorStatesWithInfo:system:sensors:states:completion:", 1, 0);

    v71 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v69, "setClasses:forSelector:argumentIndex:ofReply:", v71, "setSensorStatesWithInfo:system:sensors:states:completion:", 2, 0);

    v72 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v67);
    objc_msgSend(v69, "setClasses:forSelector:argumentIndex:ofReply:", v72, "setSensorStatesWithInfo:system:sensors:states:completion:", 3, 0);

    v73 = objc_msgSend(v41, "setExportedInterface:", v69);
    v75 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for dockaccessoryd((uint64_t)v73, v74)), "init");
    v75[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_debugAllowed] = *(_BYTE *)(v79
                                                                                  + OBJC_IVAR____TtC14dockaccessoryd15ServiceDelegate_debugAllowed);
    objc_msgSend(v41, "setExportedObject:", v75);
    v76 = objc_msgSend(v81, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore18DockClientProtocol_);
    objc_msgSend(v41, "setRemoteObjectInterface:", v76);
    objc_msgSend(v41, "resume");

    sub_10009B2C0((uint64_t)v91, &qword_10026E5F0);
    swift_release(v40);
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100114094()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001140BC()
{
  sub_10011413C("dockaccessoryd: Connection to PID %d (%s) has been invalidated", (uint64_t (*)(void))sub_100114B2C);
}

uint64_t sub_1001140D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001140E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001140EC()
{
  _QWORD *v0;

  if (v0[6])
    sub_100090E88(v0 + 3);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100114128()
{
  sub_10011413C("dockaccessoryd: Connection to PID %d (%s) has been interrupted", (uint64_t (*)(void))sub_100114168);
}

void sub_10011413C(const char *a1, uint64_t (*a2)(void))
{
  uint64_t v2;

  sub_1000F70E4(*(_DWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), a1, a2);
}

void sub_100114168()
{
  uint64_t v0;

  sub_10017FD90(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t sub_100114184()
{
  uint64_t v0;

  return swift_deallocObject(v0, 20, 7);
}

unint64_t sub_100114194()
{
  uint64_t v0;

  return sub_1000F2F38(*(_DWORD *)(v0 + 16), 0);
}

uint64_t sub_1001141B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_10026E01C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10009B7AC;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_100270224);
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_1000F2CD8;
  return sub_100179530();
}

uint64_t sub_100114230(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10026E02C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10009B0EC;
  return sub_1000F60D0(a1, v4, v5, v6, v7, v9, v8);
}

void sub_1001142BC(uint64_t a1)
{
  uint64_t v1;

  sub_1000F63A0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001142C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009061C(&qword_10026E048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10011432C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009061C(&qword_10026E048) - 8) + 80);
  return sub_1000F669C(a1, a2, v2 + ((v5 + 16) & ~v5));
}

void sub_10011437C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F5FB0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100114388()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001143C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10026E054);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10009B7AC;
  return sub_1000F58D4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100114450()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100114474(char a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), a1 & 1, a2);
}

uint64_t sub_10011448C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001144B0(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1001144DC()
{
  uint64_t v0;

  return sub_1000F512C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, void *))(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t (*)(uint64_t, uint64_t))sub_100166F54, "ROI not completed after 1 sec, expiring", 0xD000000000000015, 0x80000001001FF7F0);
}

uint64_t sub_100114524()
{
  uint64_t v0;

  return sub_1000F512C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, void *))(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t (*)(uint64_t, uint64_t))sub_100166E10, "subject selection not completed after 1 sec, expiring", 0xD00000000000001BLL, 0x80000001001FF830);
}

uint64_t sub_10011456C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011459C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10026E084);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10009B7AC;
  return sub_1000F36FC(a1, v4, v5, v6);
}

uint64_t sub_100114608()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100114644(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000F38D4(a1, a2, a3, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32), *(void **)(v3 + 40), *(_DWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

uint64_t sub_100114674()
{
  uint64_t v0;

  return sub_10017FC98(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100114698()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001146C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_10026E094);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10009B7AC;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_100270224);
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_1000F35C4;
  return sub_100179530();
}

uint64_t sub_10011473C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100114760(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000EF028(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100114768()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001147A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10026E0B4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10009B7AC;
  return sub_1000F1384(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100114830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for TrajectoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_1001148F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(type metadata accessor for TrajectoryCommand(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v4;
  v11 = (_QWORD *)((char *)v1 + v5);
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *v11;
  v14 = v11[1];
  v15 = (_QWORD *)swift_task_alloc(dword_10026E0D4);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_10009B0EC;
  return sub_1000F03F8(a1, v7, v8, v9, v10, v13, v14, v12);
}

uint64_t sub_1001149E0(uint64_t a1)
{
  uint64_t v1;

  return sub_10017EC80(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001149EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100114A18(void *a1)
{
  uint64_t v1;

  return sub_1000F0A4C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100114A24()
{
  uint64_t *v0;

  return sub_10017FF58(v0[2], v0[3], v0[4]);
}

uint64_t sub_100114A40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 20, 7);
}

unint64_t sub_100114A50()
{
  uint64_t v0;

  return sub_1000F2F38(*(_DWORD *)(v0 + 16), 1);
}

uint64_t sub_100114A70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100114AA4(uint64_t a1)
{
  uint64_t v1;

  sub_1000EF624(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(const char **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_100114B2C()
{
  sub_100114168();
}

uint64_t sub_100114B48()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026E100);
  sub_10008EA50(v0, (uint64_t)qword_10026E100);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6573616261746164, 0xEC0000006C71732ELL);
}

uint64_t sub_100114BC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DBTable(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd7DBTable, a2);
}

uint64_t sub_100114C08(__n128 a1)
{
  uint64_t v1;
  uint64_t Strong;
  sqlite3_stmt *(*v3)();
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  Strong = swift_weakLoadStrong(v1 + 24, a1);
  v3 = (sqlite3_stmt *(*)())Strong;
  if (!Strong)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v4 = *(id *)(Strong + 16);
  swift_release(v3);
  v5 = swift_allocObject(&unk_10023BA08, 32, 7);
  v3 = sub_1001169C0;
  *(_QWORD *)(v5 + 16) = sub_1001169C0;
  *(_QWORD *)(v5 + 24) = v1;
  v10[4] = sub_1001169E0;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1001AA038;
  v10[3] = &unk_10023BA20;
  v6 = _Block_copy(v10);
  v7 = v11;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v5, "", 92, 80, 30, 1);
  result = swift_release(v5);
  if ((v4 & 1) == 0)
  {
    v9 = v1;
LABEL_5:
    swift_weakDestroy(v1 + 24);
    sub_1000B1410((uint64_t)v3, v9);
    return swift_deallocClassInstance(v1, 32, 7);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DBStatement(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd11DBStatement, a2);
}

unint64_t sub_100114D88(int a1, __n128 a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v7;

  Strong = swift_weakLoadStrong(v2 + 24, a2);
  if (!Strong)
    return 0x200000000;
  v5 = Strong;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(Strong);
    return 0x200000001;
  }
  if (*(_BYTE *)(Strong + 24) != 1)
  {
    swift_release(Strong);
    return 0x200000000;
  }
  OS_dispatch_queue.sync<A>(execute:)(&v7, sub_100116990, v2, &type metadata for Int32);
  swift_release(v5);
  if ((_DWORD)v7 == a1)
    return *(_QWORD *)(v2 + 16);
  else
    return v7 | (unint64_t)&_mh_execute_header;
}

uint64_t sub_100114E5C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v3 = v2;
  v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  *(_QWORD *)(v2 + 56) = _swiftEmptyArrayStorage;
  v25 = sub_1000ABAF4(0, v15);
  v27 = 0;
  v28 = 0xE000000000000000;
  swift_bridgeObjectRetain(a2);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v28);
  v27 = (_QWORD *)0xD000000000000019;
  v28 = 0x80000001002002D0;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a2);
  v17._countAndFlagsBits = 0x65756575712ELL;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18 = v27;
  v19 = v28;
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_1000BC860();
  v22 = sub_10009061C(&qword_10026D000);
  v23 = sub_1000BC8A8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v9, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  *(_QWORD *)(v3 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v18, v19, v14, v11, v8, 0);
  return v3;
}

uint64_t sub_100115064()
{
  uint64_t v0;

  sub_100116140();

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for Database(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd8Database, a2);
}

uint64_t sub_1001150BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for Database(a1, a2);
  swift_allocObject(v2, 64, 7);
  result = sub_100114E5C(0x726F737365636361, (void *)0xEB00000000736569);
  qword_1002754E0 = result;
  return result;
}

uint64_t sub_100115110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(186);
  v6._object = (void *)0x80000001002001B0;
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x7265687069726550;
  v7._object = (void *)0xEB00000000736C61;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD00000000000009DLL;
  v8._object = (void *)0x80000001002001D0;
  String.append(_:)(v8);
  v9 = v26;
  sub_10011671C(v25, v26, 0);
  result = swift_bridgeObjectRelease(v9);
  if (!v1)
  {
    v12 = type metadata accessor for DBTable(result, v11);
    v13 = swift_allocObject(v12, 32, 7);
    *(_QWORD *)(v13 + 16) = 0x7265687069726550;
    *(_QWORD *)(v13 + 24) = 0xEB00000000736C61;
    swift_beginAccess(v0 + 56, &v25, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v16 = *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v15 = *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v15 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
    specialized Array._endMutation()(v17);
    swift_endAccess(&v25);
    if (qword_10026BB68 != -1)
      swift_once(&qword_10026BB68, sub_100114B48);
    v18 = sub_10008EA50(v2, (uint64_t)qword_10026E100);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v24 = v3;
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v25 = v23;
      *(_DWORD *)v22 = 136315138;
      v27 = sub_1000906BC(0x7265687069726550, 0xEB00000000736C61, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Successfully created table: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  return result;
}

uint64_t sub_100115438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t Strong;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  const unsigned __int8 *(*v18)();
  void *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  void **aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  uint64_t (*v37)();
  uint64_t v38;
  char v39[32];
  _UNKNOWN **v40;

  v4 = v3;
  v5 = v2;
  v40 = &off_100238268;
  v6 = type metadata accessor for DBStatement(a1, a2);
  inited = swift_initStackObject(v6, v39);
  *(_QWORD *)(inited + 16) = 0;
  v8 = swift_weakInit(inited + 24, 0);
  swift_weakAssign(v8, v2);
  swift_retain(v2);
  v9 = sub_1001163A4(0xD000000000000050, 0x8000000100200270);
  swift_release(v5);
  *(_QWORD *)(inited + 16) = v9;
  Strong = swift_weakLoadStrong(inited + 24, v10);
  if (!Strong)
    goto LABEL_12;
  v12 = Strong;
  if (!*(_QWORD *)(inited + 16))
  {
    v18 = 0;
    v16 = 0;
LABEL_14:
    swift_release(v12);
    v29 = 0x200000001;
    goto LABEL_19;
  }
  if (*(_BYTE *)(Strong + 24) != 1)
  {
    v18 = 0;
    v16 = 0;
LABEL_16:
    swift_release(v12);
    v29 = 0x200000000;
    goto LABEL_19;
  }
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100116ED4, inited, &type metadata for Int32);
  swift_release(v12);
  v13 = aBlock;
  if ((_DWORD)aBlock != 100)
  {
    v18 = 0;
    v16 = 0;
LABEL_18:
    v29 = v13 | (unint64_t)&_mh_execute_header;
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(inited + 16);
  v15 = *(NSObject **)(v5 + 16);
  v16 = (_QWORD *)swift_allocObject(&unk_10023BAA8, 40, 7);
  v16[2] = v14;
  v16[3] = v5;
  v16[4] = &v40;
  swift_retain(v5);
  sub_1000B1410(0, 0);
  v17 = swift_allocObject(&unk_10023BAD0, 32, 7);
  v18 = sub_100116A3C;
  *(_QWORD *)(v17 + 16) = sub_100116A3C;
  *(_QWORD *)(v17 + 24) = v16;
  v37 = sub_100116EB4;
  v38 = v17;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_1001AA038;
  v36 = &unk_10023BAE8;
  v19 = _Block_copy(&aBlock);
  v20 = v38;
  swift_retain(v17);
  swift_release(v20);
  dispatch_sync(v15, v19);
  _Block_release(v19);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v17, "", 92, 161, 28, 1);
  swift_release(v17);
  if ((v15 & 1) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    v18 = 0;
    v16 = 0;
    v29 = 0x200000000;
    goto LABEL_19;
  }
  while (1)
  {
    v22 = swift_weakLoadStrong(inited + 24, v21);
    if (!v22)
      break;
    v12 = v22;
    if (!*(_QWORD *)(inited + 16))
      goto LABEL_14;
    if ((*(_BYTE *)(v22 + 24) & 1) == 0)
      goto LABEL_16;
    OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100116ED4, inited, &type metadata for Int32);
    swift_release(v12);
    v13 = aBlock;
    if ((_DWORD)aBlock != 100)
      goto LABEL_18;
    v23 = *(_QWORD *)(inited + 16);
    v24 = *(NSObject **)(v5 + 16);
    v25 = (_QWORD *)swift_allocObject(&unk_10023BAA8, 40, 7);
    v25[2] = v23;
    v25[3] = v5;
    v25[4] = &v40;
    swift_retain(v5);
    sub_1000B1410((uint64_t)sub_100116A3C, (uint64_t)v16);
    v26 = swift_allocObject(&unk_10023BAD0, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_100116A3C;
    *(_QWORD *)(v26 + 24) = v25;
    v37 = sub_100116EB4;
    v38 = v26;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1001AA038;
    v36 = &unk_10023BAE8;
    v27 = _Block_copy(&aBlock);
    v28 = v38;
    swift_retain(v26);
    swift_release(v28);
    dispatch_sync(v24, v27);
    _Block_release(v27);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v26, "", 92, 161, 28, 1);
    swift_release(v26);
    v16 = v25;
    if ((v24 & 1) != 0)
      goto LABEL_11;
  }
  v29 = 0x200000000;
LABEL_19:
  LODWORD(aBlock) = v29;
  BYTE4(aBlock) = BYTE4(v29);
  v30 = sub_1001168EC();
  swift_willThrowTypedImpl(&aBlock, &type metadata for DBError, v30);
  if (v40[2] && (sub_100115110(), v4))
  {
    v31.n128_f64[0] = swift_setDeallocating(inited);
    sub_100114C08(v31);
  }
  else
  {
    swift_release(inited);
  }
  swift_bridgeObjectRelease(v40);
  return sub_1000B1410((uint64_t)v18, (uint64_t)v16);
}

const unsigned __int8 *sub_10011587C(sqlite3_stmt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const unsigned __int8 *result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sqlite3_column_text(a1, 0);
  if (result)
  {
    v11 = String.init(cString:)();
    v13 = v12;
    if (qword_10026BB68 != -1)
      swift_once(&qword_10026BB68, sub_100114B48);
    v14 = sub_10008EA50(v6, (uint64_t)qword_10026E100);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
    v15 = swift_bridgeObjectRetain_n(v13, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v33 = a2;
      v18 = swift_slowAlloc(12, -1);
      v35 = v11;
      v19 = (uint8_t *)v18;
      v20 = swift_slowAlloc(32, -1);
      v38[0] = v20;
      v34 = a3;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(v13);
      v36 = sub_1000906BC(v35, v13, v38);
      a2 = v33;
      a3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v13, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Found existing table: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      v21 = v19;
      v11 = v35;
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
    }
    v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v24 = type metadata accessor for DBTable(v22, v23);
    v25 = swift_allocObject(v24, 32, 7);
    *(_QWORD *)(v25 + 16) = v11;
    *(_QWORD *)(v25 + 24) = v13;
    swift_beginAccess(a2 + 56, v38, 33, 0);
    swift_bridgeObjectRetain(v13);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v27 = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)(v27 + 0x10);
    v28 = *(_QWORD *)(v27 + 24);
    if (v29 >= v28 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
    v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v25);
    specialized Array._endMutation()(v30);
    swift_endAccess(v38);
    swift_bridgeObjectRetain(v13);
    v31 = sub_100116A58(a3, v11, v13);
    result = (const unsigned __int8 *)swift_bridgeObjectRelease(v13);
    v32 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    if (v32 < v31)
    {
      __break(1u);
    }
    else
    {
      sub_100176390(v31, v32);
      return (const unsigned __int8 *)swift_bridgeObjectRelease(v13);
    }
  }
  return result;
}

uint64_t sub_100115B78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char isEscapingClosureAtFileLocation;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void **aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v45 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D5B8((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100090FFC((uint64_t)v10);
    v15 = sub_1000ABB30();
    v16 = swift_allocError(&type metadata for DockdError, v15, 0, 0);
    *v17 = 1;
    return swift_willThrow(v16);
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v42 = v11;
  v19(v14, v10, v11);
  v20 = v0[6];
  aBlock = (void **)v0[5];
  v47 = v20;
  swift_bridgeObjectRetain(v20);
  v21._countAndFlagsBits = 6448174;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  v22 = sub_1000D4CF4();
  URL.append<A>(component:directoryHint:)(&aBlock, v7, &type metadata for String, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v23 = swift_bridgeObjectRelease(v47);
  v24 = v0[2];
  __chkstk_darwin(v23);
  *(&v42 - 2) = (uint64_t)v14;
  *(&v42 - 1) = (uint64_t)v1;
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100116C08, &v42 - 4, &type metadata for Int32);
  v25 = (int)aBlock;
  if ((_DWORD)aBlock)
  {
    v26 = sub_1001168EC();
    v27 = swift_allocError(&type metadata for DBError, v26, 0, 0);
    *(_DWORD *)v28 = v25;
    *(_BYTE *)(v28 + 4) = 0;
    swift_willThrow(v27);
    v29 = swift_allocObject(&unk_10023BB20, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_100116C20;
    *(_QWORD *)(v29 + 24) = v1;
    v50 = sub_100116EB4;
    v51 = v29;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_1001AA038;
    v49 = &unk_10023BB38;
    v30 = _Block_copy(&aBlock);
    v31 = v51;
    swift_retain(v1);
    swift_retain(v29);
    swift_release(v31);
    dispatch_sync(v24, v30);
    _Block_release(v30);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v29, "", 92, 192, 33, 1);
    swift_release(v1);
    swift_release(v29);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v42);
    __break(1u);
    goto LABEL_13;
  }
  *((_BYTE *)v1 + 24) = 1;
  if (qword_10026BB68 != -1)
LABEL_13:
    swift_once(&qword_10026BB68, sub_100114B48);
  v33 = v44;
  v34 = sub_10008EA50(v44, (uint64_t)qword_10026E100);
  v35 = v43;
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v34, v33);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = v42;
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Database successfully opened.", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v45, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v40);
}

uint64_t sub_100116024@<X0>(uint64_t a1@<X0>, sqlite3 **a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v14[24];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = URL.path(percentEncoded:)(1);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v11 = String.utf8CString.getter(v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease(v10._object);
  a2 += 4;
  swift_beginAccess(a2, v14, 33, 0);
  LODWORD(a2) = sqlite3_open_v2((const char *)(v11 + 32), a2, 6, 0);
  swift_endAccess(v14);
  result = swift_release(v11);
  *a3 = (_DWORD)a2;
  return result;
}

uint64_t sub_100116140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD aBlock[5];
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(NSObject **)(v1 + 16);
  v7 = swift_allocObject(&unk_10023BA58, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_100116A00;
  *(_QWORD *)(v7 + 24) = v1;
  aBlock[4] = sub_100116EB4;
  v17 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA038;
  aBlock[3] = &unk_10023BA70;
  v8 = _Block_copy(aBlock);
  v9 = v17;
  swift_retain(v1);
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v6, v8);
  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v7, "", 92, 209, 20, 1);
  swift_release(v7);
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v1 + 24) = 0;
    if (qword_10026BB68 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_10026BB68, sub_100114B48);
LABEL_3:
  v10 = sub_10008EA50(v2, (uint64_t)qword_10026E100);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Database closed.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_release(v1);
}

sqlite3 *sub_100116358(uint64_t a1)
{
  _QWORD *v2;
  sqlite3 *result;
  _BYTE v4[24];

  v2 = (_QWORD *)(a1 + 32);
  swift_beginAccess(a1 + 32, v4, 1, 0);
  result = *(sqlite3 **)(a1 + 32);
  if (result)
  {
    result = (sqlite3 *)sqlite3_close_v2(result);
    *v2 = 0;
  }
  return result;
}

uint64_t sub_1001163A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 0;
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    v26 = 0;
    if (qword_10026BB68 != -1)
      swift_once(&qword_10026BB68, sub_100114B48);
    v11 = sub_10008EA50(v6, (uint64_t)qword_10026E100);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
    v12 = swift_bridgeObjectRetain_n(a2, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(12, -1);
      v22 = a1;
      v16 = (uint8_t *)v15;
      v17 = swift_slowAlloc(32, -1);
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v21 = v16 + 4;
      swift_bridgeObjectRetain(a2);
      v23 = sub_1000906BC(v22, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v21, v16 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      v18 = v16;
      a1 = v22;
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    __chkstk_darwin(v19);
    *(&v20 - 4) = v3;
    *(&v20 - 3) = a1;
    *(&v20 - 2) = a2;
    *(&v20 - 1) = (uint64_t)&v26;
    OS_dispatch_queue.sync<A>(execute:)(&v25, sub_100116930, &v20 - 6, &type metadata for Int32);
    if ((_DWORD)v25)
      return 0;
    else
      return v26;
  }
  return result;
}

uint64_t sub_100116650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sqlite3_stmt **a4@<X3>, _DWORD *a5@<X8>)
{
  sqlite3 *v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  swift_beginAccess(a1 + 32, v13, 0, 0);
  v10 = *(sqlite3 **)(a1 + 32);
  v11 = String.utf8CString.getter(a2, a3);
  LODWORD(a4) = sqlite3_prepare(v10, (const char *)(v11 + 32), -1, a4, 0);
  result = swift_release(v11);
  *a5 = (_DWORD)a4;
  return result;
}

uint64_t sub_1001166EC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sqlite3_step(*(sqlite3_stmt **)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_10011671C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  int v28;
  char v29;

  v5 = v3;
  v7 = result;
  v8 = *(_BYTE *)(v3 + 24);
  if ((v8 & 1) == 0)
  {
    if ((a3 & 1) == 0)
    {
      v16 = sub_1001168EC();
      v17 = swift_allocError(&type metadata for DBError, v16, 0, 0);
      *(_DWORD *)v18 = 0;
      *(_BYTE *)(v18 + 4) = 2;
      return swift_willThrow(v17);
    }
    result = sub_100115B78();
    if (v4)
      return result;
  }
  v9 = type metadata accessor for DBStatement(result, a2);
  inited = swift_initStackObject(v9, &v27);
  *(_QWORD *)(inited + 16) = 0;
  v11 = swift_weakInit(inited + 24, 0);
  swift_weakAssign(v11, v3);
  swift_bridgeObjectRetain(a2);
  swift_retain(v3);
  v12 = sub_1001163A4(v7, a2);
  swift_bridgeObjectRelease(a2);
  swift_release(v5);
  *(_QWORD *)(inited + 16) = v12;
  if (!v12)
  {
    v19 = sub_1001168EC();
    v20 = swift_allocError(&type metadata for DBError, v19, 0, 0);
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = 2;
    swift_willThrow(v20);
LABEL_13:
    v26.n128_f64[0] = swift_setDeallocating(inited);
    return sub_100114C08(v26);
  }
  v14 = sub_100114D88(101, v13);
  if ((v15 & 1) != 0)
  {
    v22 = v14;
    v23 = HIDWORD(v14);
    v28 = v14;
    v29 = BYTE4(v14);
    v24 = sub_1001168EC();
    swift_willThrowTypedImpl(&v28, &type metadata for DBError, v24);
    swift_allocError(&type metadata for DBError, v24, 0, 0);
    *(_DWORD *)v25 = v22;
    *(_BYTE *)(v25 + 4) = v23;
    goto LABEL_13;
  }
  if ((v8 & 1) == 0)
    sub_100116140();
  return swift_release(inited);
}

unint64_t sub_1001168EC()
{
  unint64_t result;

  result = qword_10026F330;
  if (!qword_10026F330)
  {
    result = swift_getWitnessTable(&unk_1001DFB00, &type metadata for DBError);
    atomic_store(result, (unint64_t *)&qword_10026F330);
  }
  return result;
}

uint64_t sub_100116930@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100116650(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(sqlite3_stmt ***)(v1 + 40), a1);
}

sqlite3 *sub_10011694C(uint64_t a1)
{
  sqlite3 *result;
  _BYTE v3[24];

  swift_beginAccess(a1 + 32, v3, 0, 0);
  result = *(sqlite3 **)(a1 + 32);
  if (result)
    return (sqlite3 *)sqlite3_close_v2(result);
  return result;
}

uint64_t sub_100116990@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sqlite3_step(*(sqlite3_stmt **)(v1 + 16));
  *a1 = result;
  return result;
}

sqlite3_stmt *sub_1001169C0()
{
  uint64_t v0;
  sqlite3_stmt *result;

  result = *(sqlite3_stmt **)(v0 + 16);
  if (result)
    return (sqlite3_stmt *)sqlite3_finalize(result);
  return result;
}

uint64_t sub_1001169D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001169E0()
{
  uint64_t v0;

  return sub_1001AA018(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1001169E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001169F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

sqlite3 *sub_100116A00()
{
  uint64_t v0;

  return sub_100116358(v0);
}

uint64_t sub_100116A08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100116A18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

const unsigned __int8 *sub_100116A3C()
{
  uint64_t v0;

  return sub_10011587C(*(sqlite3_stmt **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100116A48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100116A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v12;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    result = v3[v7 + 4];
    v10 = v3[v7 + 5];
    if (result == a2 && v10 == a3)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, a2, a3, 0);
    if ((result & 1) != 0)
      break;
    ++v8;
    v7 += 2;
    if (v4 == v8)
      return v4;
  }
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 == v4)
      return v8;
    while (1)
    {
      v14 = v3[2];
      if (v12 >= v14)
        break;
      v15 = &v3[v7];
      result = v3[v7 + 6];
      v16 = v3[v7 + 7];
      if (result != a2 || v16 != a3)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v16, a2, a3, 0);
        if ((result & 1) == 0)
        {
          if (v12 != v8)
          {
            if (v8 >= v14)
              goto LABEL_31;
            v18 = &v3[2 * v8 + 4];
            v19 = v18[1];
            v26 = *v18;
            v20 = v15[6];
            v21 = v15[7];
            swift_bridgeObjectRetain(v19);
            swift_bridgeObjectRetain(v21);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
              v3 = sub_1001714CC(v3);
            v22 = &v3[2 * v8];
            v23 = v22[5];
            v22[4] = v20;
            v22[5] = v21;
            result = swift_bridgeObjectRelease(v23);
            if (v12 >= v3[2])
              goto LABEL_32;
            v24 = &v3[v7];
            v25 = v3[v7 + 7];
            v24[6] = v26;
            v24[7] = v19;
            result = swift_bridgeObjectRelease(v25);
            *(_QWORD *)a1 = v3;
          }
          if (__OFADD__(v8++, 1))
            goto LABEL_30;
        }
      }
      ++v12;
      v7 += 2;
      if (v12 == v3[2])
        return v8;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100116C08@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100116024(*(_QWORD *)(v1 + 16), *(sqlite3 ***)(v1 + 24), a1);
}

sqlite3 *sub_100116C20()
{
  uint64_t v0;

  return sub_10011694C(v0);
}

uint64_t sub_100116C28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100116C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100116C40(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 1;
  swift_release(*a1);
  return swift_weakDestroy(v1);
}

_QWORD *sub_100116C70(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit(a1 + 1, a2 + 1);
  return a1;
}

uint64_t type metadata accessor for DBReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100116E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DBReader);
}

uint64_t initializeBufferWithCopyOfBuffer for DBError(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DBError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_100116D54(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100116D6C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DBError()
{
  return &type metadata for DBError;
}

uint64_t *sub_100116D94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = a2 + 1;
  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  swift_weakCopyInit(a1 + 1, v4);
  return a1;
}

uint64_t *sub_100116DDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = a2 + 1;
  v3 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v5);
  swift_weakCopyAssign(a1 + 1, v4);
  return a1;
}

uint64_t *sub_100116E30(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = a2 + 1;
  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  swift_weakTakeAssign(a1 + 1, v3);
  return a1;
}

uint64_t type metadata accessor for DBWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100116E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DBWriter);
}

uint64_t sub_100116E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100116ED4@<X0>(_DWORD *a1@<X8>)
{
  return sub_100116990(a1);
}

void sub_100116EEC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  BOOL v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - v6;
  v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons;
  v9 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
  v54 = v10;
  if (v9)
    v11 = objc_msgSend(v9, "value");
  else
    v11 = 0;
  v12 = objc_msgSend(a1, "stagingNotReadyReasons");
  if (!v12)
  {
    if (!v9)
      goto LABEL_18;
    goto LABEL_12;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "value");

  if (v9)
    v15 = v11 == v14;
  else
    v15 = 0;
  if (!v15)
  {
LABEL_12:
    v16 = objc_msgSend(a1, "stagingNotReadyReasons");
    v17 = *(void **)(v2 + v8);
    *(_QWORD *)(v2 + v8) = v16;

    v18 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger, v4);
    v19 = a1;
    v20 = Logger.logObject.getter(v19);
    v21 = v4;
    v22 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v22))
    {
      v53 = v21;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v57 = v52;
      *(_DWORD *)v23 = 136315138;
      v24 = objc_msgSend(v19, "stagingNotReadyReasons");
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend(v24, "description");

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

      }
      else
      {
        v27 = 7104878;
        v29 = 0xE300000000000000;
      }
      v56 = sub_1000906BC(v27, v29, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 4, v23 + 12);

      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Firmware update readiness updated stagingNotReadyReasons: %s", v23, 0xCu);
      v30 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v4 = v53;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v53);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v21);
      v4 = v21;
    }
  }
LABEL_18:
  v31 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons;
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons);
  if (v32)
    v33 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons), "value");
  else
    v33 = 0;
  v34 = v55;
  v35 = objc_msgSend(a1, "updateNotReadyReasons");
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend(v35, "value");

    if (v32 && v33 == v37)
      return;
  }
  else if (!v32)
  {
    return;
  }
  v38 = objc_msgSend(a1, "updateNotReadyReasons");
  v39 = *(void **)(v2 + v31);
  *(_QWORD *)(v2 + v31) = v38;

  v40 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v54, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger, v4);
  v41 = a1;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v57 = v45;
    *(_DWORD *)v44 = 136315138;
    v46 = objc_msgSend(v41, "updateNotReadyReasons");
    if (v46)
    {
      v47 = v46;
      v48 = objc_msgSend(v46, "description");

      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

    }
    else
    {
      v49 = 7104878;
      v51 = 0xE300000000000000;
    }
    v56 = sub_1000906BC(v49, v51, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v44 + 4, v44 + 12);

    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Firmware update readiness updated updateNotReadyReasons: %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v54, v4);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v40, v4);
  }
}

void sub_10011741C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  NSObject *v20;
  _QWORD *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint8_t *v29;
  void (*v30)(char *, uint64_t);
  id v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  id v38;
  void (*v39)(char *, uint64_t);
  NSObject *v40;
  uint8_t *v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  _QWORD *v60;
  uint8_t *v61;
  uint8_t *v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v69 = (char *)&v58 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - v10;
  v12 = objc_msgSend(a1, "state");
  if (v12)
  {
    v13 = v12;
    v64 = v1;
    v62 = (uint8_t *)v4;
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v67 = v70 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger;
    v68 = v14;
    ((void (*)(char *))v14)(v11);
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v65 = v7;
    v66 = v3;
    if (v18)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (_QWORD *)swift_slowAlloc(8, -1);
      v61 = v19;
      *(_DWORD *)v19 = 138412290;
      v59 = v19 + 4;
      v73 = v15;
      v20 = v15;
      v7 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v59, v19 + 12);
      v21 = v60;
      *v60 = v13;

      v3 = v66;
      v22 = v17;
      v23 = v61;
      _os_log_impl((void *)&_mh_execute_header, v16, v22, "Firmware update status updated state: %@", v61, 0xCu);
      v24 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v21, 1, v24);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {

      v16 = v15;
    }
    v29 = v62;

    v30 = (void (*)(char *, uint64_t))*((_QWORD *)v29 + 1);
    v30(v11, v3);
    v31 = objc_msgSend(a1, "updateDuration");
    v63 = v15;
    if (v31)
    {
      v32 = v31;
      v68(v69, v67, v3);
      v33 = v32;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v36 = 134217984;
        v62 = v36 + 4;
        v37 = a1;
        v38 = -[NSObject value](v33, "value");
        v39 = v30;
        v40 = objc_msgSend(v38, "unsignedLongLongValue");

        a1 = v37;
        v73 = v40;
        v30 = v39;
        v15 = v63;
        v3 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v62, v36 + 12);

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Firmware update status updated duration: %llu", v36, 0xCu);
        v41 = v36;
        v7 = v65;
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {

        v34 = v33;
      }

      v30(v69, v3);
      v42 = -[NSObject value](v33, "value");
      v43 = objc_msgSend(v42, "unsignedLongLongValue");

      v44 = v70 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateDuration;
      *(_QWORD *)v44 = v43;
      *(_BYTE *)(v44 + 8) = 0;
    }
    v45 = objc_msgSend(a1, "stagedFirmwareVersion");
    if (v45)
    {
      v46 = v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      v68(v7, v67, v3);
      v50 = swift_bridgeObjectRetain_n(v49, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v69 = (char *)v30;
        v55 = v54;
        v73 = v54;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(v49);
        v71 = sub_1000906BC(v47, v49, (uint64_t *)&v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease_n(v49, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Firmware update status updated version: %s", v53, 0xCu);
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        ((void (*)(char *, uint64_t))v69)(v65, v66);
      }
      else
      {

        swift_bridgeObjectRelease_n(v49, 2);
        v30(v7, v3);
      }
      v56 = (uint64_t *)(v70 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagedFirmwareVersion);
      v57 = *(_QWORD *)(v70 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagedFirmwareVersion + 8);
      *v56 = v47;
      v56[1] = v49;

      swift_bridgeObjectRelease(v57);
    }
    else
    {

    }
  }
  else
  {
    v25 = type metadata accessor for Errors(0);
    v26 = sub_10009F444();
    swift_allocError(v25, v26, 0, 0);
    *v27 = 0xD000000000000028;
    v27[1] = 0x80000001002003B0;
    v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for Errors.NotFound(_:), v25);
    swift_willThrow(v28);
  }
}

id sub_100117A28()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  objc_super v5;

  v1 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateDuration];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  v2 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateState];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagedFirmwareVersion];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons] = 0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000015, 0x80000001002003E0);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateProfile(0);
  return objc_msgSendSuper2(&v5, "init");
}

id sub_100117B14()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateProfile(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100117BBC()
{
  return type metadata accessor for AccessoryFirmwareUpdateProfile(0);
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateProfile(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E558;
  if (!qword_10026E558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryFirmwareUpdateProfile);
  return result;
}

uint64_t sub_100117C00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\t";
  v4[1] = "\t";
  v4[2] = &unk_1001DFB78;
  v4[3] = &unk_1001DFB90;
  v4[4] = &unk_1001DFB90;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100117C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x100117DECLL);
}

void sub_100117E20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100117E74()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;
  size_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v13 = v1;
  v14 = v0;
  v15 = BYTE2(v0);
  v16 = BYTE3(v0);
  v17 = BYTE4(v0);
  v18 = BYTE5(v0);
  v2 = sub_100118638((size_t)&v13, (unint64_t)&v13 + BYTE6(v0));
  v3 = v2;
  v21 = 0;
  v22 = 0xE000000000000000;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = sub_1001186E8();
    swift_bridgeObjectRetain(v3);
    v6 = 0;
    do
    {
      LOBYTE(v19) = *(_BYTE *)(v3 + v6 + 32);
      v8 = String.init<A>(_:radix:uppercase:)(&v19, 16, 0, &type metadata for UInt8, v5);
      v10 = v9;
      if (String.count.getter(v8, v9) == 1)
      {
        v19 = 48;
        v20 = 0xE100000000000000;
        v11._countAndFlagsBits = v8;
        v11._object = v10;
        String.append(_:)(v11);
        swift_bridgeObjectRelease(v10);
        v8 = v19;
        v10 = (void *)v20;
      }
      ++v6;
      v7._countAndFlagsBits = v8;
      v7._object = v10;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(v10);
    }
    while (v4 != v6);
    swift_release_n(v3, 2);
    return v21;
  }
  else
  {
    swift_release(v2);
    return 0;
  }
}

uint64_t sub_100118398(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10009061C(&qword_10026BF40);
  v3 = swift_allocObject(v2, 36, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001DFBB0;
  *(_BYTE *)(v3 + 32) = HIBYTE(a1);
  *(_BYTE *)(v3 + 33) = BYTE2(a1);
  *(_BYTE *)(v3 + 34) = BYTE1(a1);
  *(_BYTE *)(v3 + 35) = a1;
  v4 = sub_1000EAC28(v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_10011841C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  int v26;
  _QWORD v28[2];
  char v29;
  _BYTE v30[7];
  __int128 v31;

  if ((String.count.getter(a1, a2) & 1) == 0)
  {
    v31 = xmmword_1001DE7B0;
    v4 = String.count.getter(a1, a2);
    if (v4 < 1)
      return 0;
    v5 = v4;
    v6 = 0;
    while (1)
    {
      v7 = __OFADD__(v6, 2) ? 0x7FFFFFFFFFFFFFFFLL : v6 + 2;
      swift_bridgeObjectRetain(a2);
      v8 = sub_10011872C(v6, a1, a2);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      swift_bridgeObjectRelease(a2);
      v15 = Substring.index(_:offsetBy:limitedBy:)(v8, 2, v10, v8, v10, v12, v14);
      v17 = (v16 & 1) != 0 ? v10 : v15;
      if (v17 >> 14 < v8 >> 14)
        break;
      v18 = Substring.subscript.getter(v8);
      v20 = v19;
      v22 = v21;
      v8 = v23;
      swift_bridgeObjectRelease(v14);
      if (!((v18 ^ v20) >> 14))
        goto LABEL_25;
      if ((v8 & 0x1000000000000000) != 0)
      {
        LOWORD(v22) = sub_1001530B8(v18, v20, v22, v8, 16);
        swift_bridgeObjectRelease(v8);
        if ((v22 & 0x100) != 0)
          goto LABEL_26;
      }
      else
      {
        if ((v8 & 0x2000000000000000) != 0)
        {
          v28[0] = v22;
          v28[1] = v8 & 0xFFFFFFFFFFFFFFLL;
          v24 = v28;
        }
        else if ((v22 & 0x1000000000000000) != 0)
        {
          v24 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v24 = (_QWORD *)_StringObject.sharedUTF8.getter(v22, v8);
        }
        v25 = sub_1001187C8((uint64_t)v24, v18, v20, v22, v8, 16);
        LOBYTE(v22) = v25;
        v30[6] = BYTE1(v25) & 1;
        v26 = (v25 >> 8) & 1;
        swift_bridgeObjectRelease(v8);
        if ((v26 & 1) != 0)
          goto LABEL_26;
      }
      v29 = v22;
      Data._Representation.append(contentsOf:)(&v29, v30);
      v6 = v7;
      if (v7 >= v5)
        return v31;
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRelease(v8);
LABEL_26:
    sub_10009B2FC(v31, *((unint64_t *)&v31 + 1));
  }
  return 0;
}

size_t sub_100118638(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!result)
    return (size_t)_swiftEmptyArrayStorage;
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return (size_t)_swiftEmptyArrayStorage;
  if (v4 < 1)
  {
    v5 = _swiftEmptyArrayStorage;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v6 = sub_10009061C(&qword_10026BF40);
    v5 = (_QWORD *)swift_allocObject(v6, v4 + 32, 7);
    result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_1001186E8()
{
  unint64_t result;

  result = qword_10026E568;
  if (!qword_10026E568)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_10026E568);
  }
  return result;
}

unint64_t sub_10011872C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001187C8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned int v42;
  char v43;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1001B31E4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1001B31E4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1001B31E4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 87;
        if (a6 > 10)
        {
          v32 = a6 + 55;
        }
        else
        {
          v31 = 97;
          v32 = 65;
        }
        if (a6 <= 10)
          v33 = a6 + 48;
        else
          v33 = 58;
        if (v19)
        {
          LOBYTE(v24) = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                v30 = 1;
                if (v36 < 0x61 || v36 >= v31)
                  return v29 | (v30 << 8);
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
              goto LABEL_96;
            v24 = (v24 * a6) + (v36 + v37);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_96;
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          v30 = 0;
          v29 = v24;
          return v29 | (v30 << 8);
        }
        goto LABEL_95;
      }
LABEL_96:
      v29 = 0;
      v30 = 1;
      return v29 | (v30 << 8);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v38 = a6 + 87;
      if (a6 > 10)
      {
        v39 = a6 + 55;
      }
      else
      {
        v38 = 97;
        v39 = 65;
      }
      if (a6 <= 10)
        v40 = a6 + 48;
      else
        v40 = 58;
      if (v19)
      {
        LOBYTE(v41) = 0;
        do
        {
          v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              v29 = 0;
              v30 = 1;
              if (v42 < 0x61 || v42 >= v38)
                return v29 | (v30 << 8);
              v43 = -87;
            }
            else
            {
              v43 = -55;
            }
          }
          else
          {
            v43 = -48;
          }
          if (((v41 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v41 = (v41 * a6) + (v42 + v43);
          if (((v41 >> 8) & 1) != 0)
            goto LABEL_96;
          ++v19;
          --result;
        }
        while (result);
        v30 = 0;
        v29 = v41;
        return v29 | (v30 << 8);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        LOBYTE(v24) = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | (v30 << 8);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v24 = (v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFFFF00) != 0)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_72;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | (v30 << 8);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for DockdError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100118C68 + 4 * byte_1001DFBC5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100118C9C + 4 * byte_1001DFBC0[v4]))();
}

uint64_t sub_100118C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100118CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100118CACLL);
  return result;
}

uint64_t sub_100118CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100118CC0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100118CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100118CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DockdError()
{
  return &type metadata for DockdError;
}

unint64_t sub_100118CEC()
{
  unint64_t result;

  result = qword_10026E570;
  if (!qword_10026E570)
  {
    result = swift_getWitnessTable(&unk_1001DFC18, &type metadata for DockdError);
    atomic_store(result, (unint64_t *)&qword_10026E570);
  }
  return result;
}

BOOL sub_100118D30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0[1];
  v35 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 >= 0)
      v11 = v1 & 0xFFFFFFFFFFFFFF8;
    else
      v11 = v1;
    swift_bridgeObjectRetain(v1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    sub_10011CA9C(&v35);
    if (v12)
      return 0;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v2 = v0[2];
  v34 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v17 = v2 & 0xFFFFFFFFFFFFFF8;
    else
      v17 = v2;
    swift_bridgeObjectRetain(v2);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    sub_10011CA9C(&v34);
    if (v18)
      return 0;
  }
  else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v3 = v0[3];
  v33 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v19 = v3 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = v3;
    swift_bridgeObjectRetain(v3);
    v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_10011CA9C(&v33);
    if (v20)
      return 0;
  }
  else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v4 = v0[4];
  v32 = v4;
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0)
      v21 = v4 & 0xFFFFFFFFFFFFFF8;
    else
      v21 = v4;
    swift_bridgeObjectRetain(v4);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    sub_10011CA9C(&v32);
    if (v22)
      return 0;
  }
  else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v5 = v0[5];
  v31 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    else
      v23 = v5;
    swift_bridgeObjectRetain(v5);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    sub_10011CA9C(&v31);
    if (v24)
      return 0;
  }
  else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v6 = v0[6];
  v30 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v25 = v6 & 0xFFFFFFFFFFFFFF8;
    else
      v25 = v6;
    swift_bridgeObjectRetain(v6);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_10011CA9C(&v30);
    if (v26)
      return 0;
  }
  else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v7 = v0[7];
  v29 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v27 = v7 & 0xFFFFFFFFFFFFFF8;
    else
      v27 = v7;
    swift_bridgeObjectRetain(v7);
    v28 = _CocoaArrayWrapper.endIndex.getter(v27);
    sub_10011CA9C(&v29);
    if (!v28)
      goto LABEL_15;
    return 0;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_15:
  v8 = v0[8];
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v9 = v0[8];
    else
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
    v10 = __CocoaDictionary.count.getter(v9);
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 16);
  }
  if (v10)
    return 0;
  v14 = v0[9];
  if ((v14 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = v0[9];
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    v16 = __CocoaDictionary.count.getter(v15);
  }
  else
  {
    v16 = *(_QWORD *)(v14 + 16);
  }
  return v16 == 0;
}

void sub_100118FA4()
{
  NSString v0;
  uint64_t v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(CBUUID, v1), "UUIDWithString:", v0);

  qword_10026E580 = (uint64_t)v2;
}

uint64_t sub_100119010()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = objc_msgSend(v0, "data");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  LOBYTE(v1) = Data.subscript.getter(3, v2, v4);
  sub_10009B2FC(v2, v4);
  v5 = objc_msgSend(v0, "data");
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  LOBYTE(v5) = Data.subscript.getter(2, v6, v8);
  sub_10009B2FC(v6, v8);
  v9 = objc_msgSend(v0, "data");
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  LOBYTE(v9) = Data.subscript.getter(1, v10, v12);
  sub_10009B2FC(v10, v12);
  v13 = objc_msgSend(v0, "data");
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  LODWORD(v13) = Data.subscript.getter(0, v14, v16);
  sub_10009B2FC(v14, v16);
  return v1 | (unsigned __int16)(v5 << 8) | (v9 << 16) | ((_DWORD)v13 << 24);
}

uint64_t (*sub_100119174(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_1001191BC()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSString v73;
  id v74;
  unint64_t result;
  _BYTE v76[376];

  v0 = sub_10009061C(&qword_10026E5D8);
  inited = swift_initStackObject(v0, v76);
  *(_OWORD *)(inited + 16) = xmmword_1001DFC80;
  v3 = (void *)objc_opt_self(CBUUID, v2);
  v4 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v5 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v5 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v5 + 32) = 62;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v5);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v9 = objc_msgSend(v3, "UUIDWithString:", v8);

  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = 0xD000000000000015;
  *(_QWORD *)(inited + 48) = 0x8000000100200810;
  v10 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v10 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v10 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v10 + 32) = 67;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v10);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v3, "UUIDWithString:", v13);

  *(_QWORD *)(inited + 56) = v14;
  strcpy((char *)(inited + 64), "LED Component");
  *(_WORD *)(inited + 78) = -4864;
  v15 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v15 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v15 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v15 + 32) = 73;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v15);
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = objc_msgSend(v3, "UUIDWithString:", v18);

  *(_QWORD *)(inited + 80) = v19;
  *(_QWORD *)(inited + 88) = 0xD000000000000010;
  *(_QWORD *)(inited + 96) = 0x8000000100200830;
  v20 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v20 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v20 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v20 + 32) = 16;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend(v3, "UUIDWithString:", v23);

  *(_QWORD *)(inited + 104) = v24;
  *(_QWORD *)(inited + 112) = 0x676E6972696150;
  *(_QWORD *)(inited + 120) = 0xE700000000000000;
  v25 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v25 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v25 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v25 + 32) = 150;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v25);
  v27 = v26;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v29 = objc_msgSend(v3, "UUIDWithString:", v28);

  *(_QWORD *)(inited + 128) = v29;
  *(_QWORD *)(inited + 136) = 0x79726574746142;
  *(_QWORD *)(inited + 144) = 0xE700000000000000;
  v30 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v30 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v30 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v30 + 32) = 162;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v30);
  v32 = v31;
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v34 = objc_msgSend(v3, "UUIDWithString:", v33);

  *(_QWORD *)(inited + 152) = v34;
  *(_QWORD *)(inited + 160) = 0xD000000000000014;
  *(_QWORD *)(inited + 168) = 0x8000000100200850;
  v35 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v35 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v35 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v35 + 32) = 256;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v35);
  v37 = v36;
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v39 = objc_msgSend(v3, "UUIDWithString:", v38);

  *(_QWORD *)(inited + 176) = v39;
  strcpy((char *)(inited + 184), "Corsair System");
  *(_BYTE *)(inited + 199) = -18;
  v40 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v40 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v40 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v40 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v40 + 32) = 512;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v40);
  v42 = v41;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  v44 = objc_msgSend(v3, "UUIDWithString:", v43);

  *(_QWORD *)(inited + 200) = v44;
  *(_QWORD *)(inited + 208) = 0xD000000000000016;
  *(_QWORD *)(inited + 216) = 0x8000000100200870;
  v45 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v45 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v45 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v45 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v45 + 32) = 768;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v45);
  v47 = v46;
  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v47);
  v49 = objc_msgSend(v3, "UUIDWithString:", v48);

  *(_QWORD *)(inited + 224) = v49;
  strcpy((char *)(inited + 232), "Corsair Sensor");
  *(_BYTE *)(inited + 247) = -18;
  v50 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v50 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v50 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v50 + 32) = 297;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v50);
  v52 = v51;
  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  v54 = objc_msgSend(v3, "UUIDWithString:", v53);

  *(_QWORD *)(inited + 248) = v54;
  *(_QWORD *)(inited + 256) = 0xD000000000000020;
  *(_QWORD *)(inited + 264) = 0x8000000100200890;
  v55 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v55 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v55 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v55 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v55 + 32) = 566;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v55);
  v57 = v56;
  v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57);
  v59 = objc_msgSend(v3, "UUIDWithString:", v58);

  *(_QWORD *)(inited + 272) = v59;
  *(_QWORD *)(inited + 280) = 0x657261776D726946;
  *(_QWORD *)(inited + 288) = 0xEF65746164705520;
  v60 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v60 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v60 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v60 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v60 + 32) = 567;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v60);
  v62 = v61;
  v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v62);
  v64 = objc_msgSend(v3, "UUIDWithString:", v63);

  *(_QWORD *)(inited + 296) = v64;
  *(_QWORD *)(inited + 304) = 0x74736F6E67616944;
  *(_QWORD *)(inited + 312) = 0xEB00000000736369;
  v65 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v65 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v65 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v65 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v65 + 32) = 569;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v65);
  v67 = v66;
  v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v67);
  v69 = objc_msgSend(v3, "UUIDWithString:", v68);

  *(_QWORD *)(inited + 320) = v69;
  *(_QWORD *)(inited + 328) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 336) = 0x80000001002008C0;
  v70 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v70 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v70 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v70 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v70 + 32) = 624;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v70);
  v72 = v71;
  v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v72);
  v74 = objc_msgSend(v3, "UUIDWithString:", v73);

  *(_QWORD *)(inited + 344) = v74;
  *(_QWORD *)(inited + 352) = 0x7363697274654DLL;
  *(_QWORD *)(inited + 360) = 0xE700000000000000;
  result = sub_1001B18E8(inited);
  qword_1002754F0 = result;
  return result;
}

unint64_t sub_100119A34()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSString v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSString v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSString v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSString v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSString v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSString v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSString v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSString v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSString v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSString v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSString v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSString v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSString v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSString v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSString v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSString v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSString v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSString v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  NSString v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSString v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSString v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  NSString v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  NSString v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  NSString v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  NSString v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  NSString v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  NSString v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSString v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  NSString v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  NSString v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  NSString v227;
  id v228;
  unint64_t result;

  v0 = sub_10009061C(&qword_10026E5D8);
  v1 = swift_allocObject(v0, 1136, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1001DFC90;
  v2 = String._bridgeToObjectiveC()();
  v4 = (void *)objc_opt_self(CBUUID, v3);
  v5 = objc_msgSend(v4, "UUIDWithString:", v2);

  *(_QWORD *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 40) = 0xD000000000000013;
  *(_QWORD *)(v1 + 48) = 0x80000001002004C0;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "UUIDWithString:", v6);

  *(_QWORD *)(v1 + 56) = v7;
  *(_QWORD *)(v1 + 64) = 0x73726556204B4441;
  *(_QWORD *)(v1 + 72) = 0xEB000000006E6F69;
  v8 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v9 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 32;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v4, "UUIDWithString:", v12);

  *(_QWORD *)(v1 + 80) = v13;
  strcpy((char *)(v1 + 88), "Manufacturer");
  *(_BYTE *)(v1 + 101) = 0;
  *(_WORD *)(v1 + 102) = -5120;
  v14 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v14 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v14 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v14 + 32) = 33;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v14);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend(v4, "UUIDWithString:", v17);

  *(_QWORD *)(v1 + 104) = v18;
  *(_QWORD *)(v1 + 112) = 0x6C65646F4DLL;
  *(_QWORD *)(v1 + 120) = 0xE500000000000000;
  v19 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v19 + 32) = 35;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v19);
  v21 = v20;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v23 = objc_msgSend(v4, "UUIDWithString:", v22);

  *(_QWORD *)(v1 + 128) = v23;
  *(_QWORD *)(v1 + 136) = 1701667150;
  *(_QWORD *)(v1 + 144) = 0xE400000000000000;
  v24 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v24 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v24 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v24 + 32) = 37;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v24);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v28 = objc_msgSend(v4, "UUIDWithString:", v27);

  *(_QWORD *)(v1 + 152) = v28;
  *(_QWORD *)(v1 + 160) = 28239;
  *(_QWORD *)(v1 + 168) = 0xE200000000000000;
  v29 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v29 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v29 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v29 + 32) = 48;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v29);
  v31 = v30;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  v33 = objc_msgSend(v4, "UUIDWithString:", v32);

  *(_QWORD *)(v1 + 176) = v33;
  strcpy((char *)(v1 + 184), "Serial Number");
  *(_WORD *)(v1 + 198) = -4864;
  v34 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v34 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v34 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v34 + 32) = 55;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v34);
  v36 = v35;
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  v38 = objc_msgSend(v4, "UUIDWithString:", v37);

  *(_QWORD *)(v1 + 200) = v38;
  *(_QWORD *)(v1 + 208) = 0x6E6F6973726556;
  *(_QWORD *)(v1 + 216) = 0xE700000000000000;
  v39 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v39 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v39 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v39 + 32) = 17;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v39);
  v41 = v40;
  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  v43 = objc_msgSend(v4, "UUIDWithString:", v42);

  *(_QWORD *)(v1 + 224) = v43;
  *(_QWORD *)(v1 + 232) = 0x7465532072696150;
  *(_QWORD *)(v1 + 240) = 0xEA00000000007075;
  v44 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v44 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v44 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v44 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v44 + 32) = 18;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v44);
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  v48 = objc_msgSend(v4, "UUIDWithString:", v47);

  *(_QWORD *)(v1 + 248) = v48;
  *(_QWORD *)(v1 + 256) = 0x7265562072696150;
  *(_QWORD *)(v1 + 264) = 0xEB00000000796669;
  v49 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v49 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v49 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v49 + 32) = 19;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v49);
  v51 = v50;
  v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  v53 = objc_msgSend(v4, "UUIDWithString:", v52);

  *(_QWORD *)(v1 + 272) = v53;
  *(_QWORD *)(v1 + 280) = 0xD000000000000010;
  *(_QWORD *)(v1 + 288) = 0x8000000100200510;
  v54 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v54 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v54 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v54 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v54 + 32) = 20;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v54);
  v56 = v55;
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v56);
  v58 = objc_msgSend(v4, "UUIDWithString:", v57);

  *(_QWORD *)(v1 + 296) = v58;
  *(_QWORD *)(v1 + 304) = 0xD000000000000010;
  *(_QWORD *)(v1 + 312) = 0x8000000100200530;
  v59 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v59 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v59 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v59 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v59 + 32) = 21;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v59);
  v61 = v60;
  v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  v63 = objc_msgSend(v4, "UUIDWithString:", v62);

  *(_QWORD *)(v1 + 320) = v63;
  *(_QWORD *)(v1 + 328) = 0xD000000000000014;
  *(_QWORD *)(v1 + 336) = 0x8000000100200550;
  v64 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v64 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v64 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v64 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v64 + 32) = 82;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v64);
  v66 = v65;
  v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  v68 = objc_msgSend(v4, "UUIDWithString:", v67);

  *(_QWORD *)(v1 + 344) = v68;
  *(_QWORD *)(v1 + 352) = 0xD000000000000011;
  *(_QWORD *)(v1 + 360) = 0x8000000100200570;
  v69 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v69 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v69 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v69 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v69 + 32) = 83;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v69);
  v71 = v70;
  v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v71);
  v73 = objc_msgSend(v4, "UUIDWithString:", v72);

  *(_QWORD *)(v1 + 368) = v73;
  *(_QWORD *)(v1 + 376) = 0xD000000000000011;
  *(_QWORD *)(v1 + 384) = 0x8000000100200590;
  v74 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v74 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v74 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v74 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v74 + 32) = 104;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v74);
  v76 = v75;
  v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
  v78 = objc_msgSend(v4, "UUIDWithString:", v77);

  *(_QWORD *)(v1 + 392) = v78;
  strcpy((char *)(v1 + 400), "Battery Level");
  *(_WORD *)(v1 + 414) = -4864;
  v79 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v79 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v79 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v79 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v79 + 32) = 121;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v79);
  v81 = v80;
  v82 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v81);
  v83 = objc_msgSend(v4, "UUIDWithString:", v82);

  *(_QWORD *)(v1 + 416) = v83;
  *(_QWORD *)(v1 + 424) = 0xD000000000000012;
  *(_QWORD *)(v1 + 432) = 0x80000001002005B0;
  v84 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v84 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v84 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v84 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v84 + 32) = 143;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v84);
  v86 = v85;
  v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v86);
  v88 = objc_msgSend(v4, "UUIDWithString:", v87);

  *(_QWORD *)(v1 + 440) = v88;
  strcpy((char *)(v1 + 448), "Charging State");
  *(_BYTE *)(v1 + 463) = -18;
  v89 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v89 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v89 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v89 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v89 + 32) = 165;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v89);
  v91 = v90;
  v92 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v91);
  v93 = objc_msgSend(v4, "UUIDWithString:", v92);

  *(_QWORD *)(v1 + 464) = v93;
  *(_QWORD *)(v1 + 472) = 0xD000000000000011;
  *(_QWORD *)(v1 + 480) = 0x80000001002005D0;
  v94 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v94 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v94 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v94 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v94 + 32) = 304;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v94);
  v96 = v95;
  v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v96);
  v98 = objc_msgSend(v4, "UUIDWithString:", v97);

  *(_QWORD *)(v1 + 488) = v98;
  *(_QWORD *)(v1 + 496) = 0xD00000000000002DLL;
  *(_QWORD *)(v1 + 504) = 0x80000001002005F0;
  v99 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v99 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v99 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v99 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v99 + 32) = 305;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v99);
  v101 = v100;
  v102 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v101);
  v103 = objc_msgSend(v4, "UUIDWithString:", v102);

  *(_QWORD *)(v1 + 512) = v103;
  *(_QWORD *)(v1 + 520) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 528) = 0x8000000100200620;
  v104 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v104 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v104 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v104 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v104 + 32) = 625;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v104);
  v106 = v105;
  v107 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v106);
  v108 = objc_msgSend(v4, "UUIDWithString:", v107);

  *(_QWORD *)(v1 + 536) = v108;
  *(_QWORD *)(v1 + 544) = 0xD000000000000011;
  *(_QWORD *)(v1 + 552) = 0x8000000100200640;
  v109 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v109 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v109 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v109 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v109 + 32) = 626;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v109);
  v111 = v110;
  v112 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v111);
  v113 = objc_msgSend(v4, "UUIDWithString:", v112);

  *(_QWORD *)(v1 + 560) = v113;
  *(_QWORD *)(v1 + 568) = 0xD000000000000019;
  *(_QWORD *)(v1 + 576) = 0x8000000100200660;
  v114 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v114 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v114 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v114 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v114 + 32) = 312;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v114);
  v116 = v115;
  v117 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v116);
  v118 = objc_msgSend(v4, "UUIDWithString:", v117);

  *(_QWORD *)(v1 + 584) = v118;
  *(_QWORD *)(v1 + 592) = 0xD000000000000019;
  *(_QWORD *)(v1 + 600) = 0x8000000100200680;
  v119 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v119 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v119 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v119 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v119 + 32) = 313;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v119);
  v121 = v120;
  v122 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v121);
  v123 = objc_msgSend(v4, "UUIDWithString:", v122);

  *(_QWORD *)(v1 + 608) = v123;
  *(_QWORD *)(v1 + 616) = 0xD000000000000023;
  *(_QWORD *)(v1 + 624) = 0x80000001002006A0;
  v124 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v124 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v124 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v124 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v124 + 32) = 544;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v124);
  v126 = v125;
  v127 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v126);
  v128 = objc_msgSend(v4, "UUIDWithString:", v127);

  *(_QWORD *)(v1 + 632) = v128;
  strcpy((char *)(v1 + 640), "Product Data");
  *(_BYTE *)(v1 + 653) = 0;
  *(_WORD *)(v1 + 654) = -5120;
  v129 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v129 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v129 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v129 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v129 + 32) = 564;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v129);
  v131 = v130;
  v132 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v131);
  v133 = objc_msgSend(v4, "UUIDWithString:", v132);

  *(_QWORD *)(v1 + 656) = v133;
  *(_QWORD *)(v1 + 664) = 0xD000000000000019;
  *(_QWORD *)(v1 + 672) = 0x80000001002006D0;
  v134 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v134 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v134 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v134 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v134 + 32) = 565;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v134);
  v136 = v135;
  v137 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v136);
  v138 = objc_msgSend(v4, "UUIDWithString:", v137);

  *(_QWORD *)(v1 + 680) = v138;
  *(_QWORD *)(v1 + 688) = 0xD000000000000016;
  *(_QWORD *)(v1 + 696) = 0x80000001002006F0;
  v139 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v139 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v139 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v139 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v139 + 32) = 572;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v139);
  v141 = v140;
  v142 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v141);
  v143 = objc_msgSend(v4, "UUIDWithString:", v142);

  *(_QWORD *)(v1 + 704) = v143;
  *(_QWORD *)(v1 + 712) = 0xD000000000000022;
  *(_QWORD *)(v1 + 720) = 0x8000000100200710;
  v144 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v144 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v144 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v144 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v144 + 32) = 586;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v144);
  v146 = v145;
  v147 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v146);
  v148 = objc_msgSend(v4, "UUIDWithString:", v147);

  *(_QWORD *)(v1 + 728) = v148;
  *(_QWORD *)(v1 + 736) = 0xD000000000000028;
  *(_QWORD *)(v1 + 744) = 0x8000000100200740;
  v149 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v149 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v149 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v149 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v149 + 32) = 568;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v149);
  v151 = v150;
  v152 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v151);
  v153 = objc_msgSend(v4, "UUIDWithString:", v152);

  *(_QWORD *)(v1 + 752) = v153;
  *(_QWORD *)(v1 + 760) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 768) = 0x8000000100200770;
  v154 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v154 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v154 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v154 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v154 + 32) = 588;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v154);
  v156 = v155;
  v157 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v156);
  v158 = objc_msgSend(v4, "UUIDWithString:", v157);

  *(_QWORD *)(v1 + 776) = v158;
  *(_QWORD *)(v1 + 784) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 792) = 0x8000000100200790;
  v159 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v159 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v159 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v159 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v159 + 32) = 589;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v159);
  v161 = v160;
  v162 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v161);
  v163 = objc_msgSend(v4, "UUIDWithString:", v162);

  *(_QWORD *)(v1 + 800) = v163;
  *(_QWORD *)(v1 + 808) = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 816) = 0x80000001002007B0;
  v164 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v164 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v164 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v164 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v164 + 32) = 257;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v164);
  v166 = v165;
  v167 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v166);
  v168 = objc_msgSend(v4, "UUIDWithString:", v167);

  *(_QWORD *)(v1 + 824) = v168;
  *(_QWORD *)(v1 + 832) = 0x746F6F626552;
  *(_QWORD *)(v1 + 840) = 0xE600000000000000;
  v169 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v169 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v169 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v169 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v169 + 32) = 258;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v169);
  v171 = v170;
  v172 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v171);
  v173 = objc_msgSend(v4, "UUIDWithString:", v172);

  *(_QWORD *)(v1 + 848) = v173;
  *(_QWORD *)(v1 + 856) = 1953259848;
  *(_QWORD *)(v1 + 864) = 0xE400000000000000;
  v174 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v174 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v174 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v174 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v174 + 32) = 259;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v174);
  v176 = v175;
  v177 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v176);
  v178 = objc_msgSend(v4, "UUIDWithString:", v177);

  *(_QWORD *)(v1 + 872) = v178;
  strcpy((char *)(v1 + 880), "Return to Home");
  *(_BYTE *)(v1 + 895) = -18;
  v179 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v179 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v179 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v179 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v179 + 32) = 260;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v179);
  v181 = v180;
  v182 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v181);
  v183 = objc_msgSend(v4, "UUIDWithString:", v182);

  *(_QWORD *)(v1 + 896) = v183;
  *(_QWORD *)(v1 + 904) = 0x797469636F6C6556;
  *(_QWORD *)(v1 + 912) = 0xE800000000000000;
  v184 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v184 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v184 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v184 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v184 + 32) = 261;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v184);
  v186 = v185;
  v187 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v186);
  v188 = objc_msgSend(v4, "UUIDWithString:", v187);

  *(_QWORD *)(v1 + 920) = v188;
  *(_QWORD *)(v1 + 928) = 0x6E6F697469736F50;
  *(_QWORD *)(v1 + 936) = 0xE800000000000000;
  v189 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v189 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v189 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v189 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v189 + 32) = 262;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v189);
  v191 = v190;
  v192 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v191);
  v193 = objc_msgSend(v4, "UUIDWithString:", v192);

  *(_QWORD *)(v1 + 944) = v193;
  *(_QWORD *)(v1 + 952) = 0xD000000000000015;
  *(_QWORD *)(v1 + 960) = 0x80000001002007D0;
  v194 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v194 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v194 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v194 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v194 + 32) = 263;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v194);
  v196 = v195;
  v197 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v196);
  v198 = objc_msgSend(v4, "UUIDWithString:", v197);

  *(_QWORD *)(v1 + 968) = v198;
  *(_QWORD *)(v1 + 976) = 0x7373657250;
  *(_QWORD *)(v1 + 984) = 0xE500000000000000;
  v199 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v199 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v199 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v199 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v199 + 32) = 801;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v199);
  v201 = v200;
  v202 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v201);
  v203 = objc_msgSend(v4, "UUIDWithString:", v202);

  *(_QWORD *)(v1 + 992) = v203;
  *(_QWORD *)(v1 + 1000) = 0x5420726F736E6553;
  *(_QWORD *)(v1 + 1008) = 0xEB00000000657079;
  v204 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v204 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v204 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v204 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v204 + 32) = 802;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v204);
  v206 = v205;
  v207 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v206);
  v208 = objc_msgSend(v4, "UUIDWithString:", v207);

  *(_QWORD *)(v1 + 1016) = v208;
  *(_QWORD *)(v1 + 1024) = 0x4420726F736E6553;
  *(_QWORD *)(v1 + 1032) = 0xEB00000000617461;
  v209 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v209 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v209 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v209 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v209 + 32) = 264;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v209);
  v211 = v210;
  v212 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v211);
  v213 = objc_msgSend(v4, "UUIDWithString:", v212);

  *(_QWORD *)(v1 + 1040) = v213;
  strcpy((char *)(v1 + 1048), "Motion Status");
  *(_WORD *)(v1 + 1062) = -4864;
  v214 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v214 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v214 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v214 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v214 + 32) = 265;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v214);
  v216 = v215;
  v217 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v216);
  v218 = objc_msgSend(v4, "UUIDWithString:", v217);

  *(_QWORD *)(v1 + 1064) = v218;
  *(_QWORD *)(v1 + 1072) = 0xD00000000000001CLL;
  *(_QWORD *)(v1 + 1080) = 0x80000001002007F0;
  v219 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v219 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v219 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v219 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v219 + 32) = 272;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v219);
  v221 = v220;
  v222 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v221);
  v223 = objc_msgSend(v4, "UUIDWithString:", v222);

  *(_QWORD *)(v1 + 1088) = v223;
  *(_QWORD *)(v1 + 1096) = 0x46206E6F69746F4DLL;
  *(_QWORD *)(v1 + 1104) = 0xEF6B636162646565;
  v224 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v224 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v224 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v224 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v224 + 32) = 266;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v224);
  v226 = v225;
  v227 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v226);
  v228 = objc_msgSend(v4, "UUIDWithString:", v227);

  *(_QWORD *)(v1 + 1112) = v228;
  strcpy((char *)(v1 + 1120), "System Event");
  *(_BYTE *)(v1 + 1133) = 0;
  *(_WORD *)(v1 + 1134) = -5120;
  result = sub_1001B18E8(v1);
  qword_1002754F8 = result;
  return result;
}

void sub_10011B410(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *oslog;
  _BYTE v18[24];

  if (*(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    if (a1)
    {
      v5 = swift_allocObject(&unk_10023BF28, 32, 7);
      *(_QWORD *)(v5 + 16) = a1;
      *(_QWORD *)(v5 + 24) = a2;
      v6 = &v2[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions];
      swift_beginAccess(&v2[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions], v18, 33, 0);
      v7 = *(_QWORD **)v6;
      swift_retain(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      *(_QWORD *)v6 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v7 = sub_1000E97A4(0, v7[2] + 1, 1, v7);
        *(_QWORD *)v6 = v7;
      }
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
      {
        v7 = sub_1000E97A4((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
        *(_QWORD *)v6 = v7;
      }
      v7[2] = v10 + 1;
      v11 = &v7[2 * v10];
      v11[4] = &unk_10026E610;
      v11[5] = v5;
      swift_endAccess(v18);
    }
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    v12 = (void *)qword_1002757B0;
    v13 = swift_allocObject(&unk_10023BF00, 32, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v2;
    v12;
    v14 = v2;
    sub_1001A3584((uint64_t)sub_1000D5784, v13);
    swift_release(v13);
  }
  else
  {
    oslog = Logger.logObject.getter(a1);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "CB peripheral is nil", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

uint64_t sub_10011B62C(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5 = *a2;
  v6 = *a3;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_10009B7AC;
  return v9(v5, v6);
}

uint64_t sub_10011B698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  void *v8;
  id v9;
  unint64_t v10;
  _BYTE v12[24];
  _BYTE v13[56];
  _QWORD v14[4];
  __int128 v15;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  v5 = v4;
  v6 = sub_10009061C(&qword_10026E600);
  inited = swift_initStackObject(v6, v13);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  if (qword_10026BB78 != -1)
    swift_once(&qword_10026BB78, sub_100118FA4);
  v8 = (void *)qword_10026E580;
  *(_QWORD *)(inited + 32) = qword_10026E580;
  v15 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(inited + 40) = v15;
  v9 = v8;
  sub_10011C998((uint64_t)&v15);
  v10 = sub_1001B1B90(inited);
  v14[3] = sub_10009061C(&qword_10026E5F8);
  v14[0] = v10;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData, v12, 33, 0);
  sub_1001A9128((uint64_t)v14, v3, v5);
  return swift_endAccess(v12);
}

uint64_t sub_10011B7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18[24];
  __int128 v19;
  __int128 v20;

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  v3 = v2;
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData);
  swift_beginAccess(v4, v18, 0, 0);
  v5 = *v4;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain(v5);
    v6 = sub_100145264(v1, v3);
    if ((v7 & 1) != 0)
    {
      sub_100090EA8(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v19);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
    }
    swift_bridgeObjectRelease(v3);
    v8 = v5;
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
    v8 = v3;
  }
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v20 + 1))
  {
    sub_1000BF88C((uint64_t)&v19);
    return 0;
  }
  v9 = sub_10009061C(&qword_10026E5F8);
  if ((swift_dynamicCast(&v17, &v19, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 0;
  v10 = v17;
  if (qword_10026BB78 == -1)
  {
    if (!*(_QWORD *)(v17 + 16))
    {
LABEL_15:
      swift_bridgeObjectRelease(v10);
      return 0;
    }
  }
  else
  {
    swift_once(&qword_10026BB78, sub_100118FA4);
    if (!*(_QWORD *)(v10 + 16))
      goto LABEL_15;
  }
  v11 = (id)qword_10026E580;
  v12 = sub_100145534((uint64_t)v11);
  if ((v13 & 1) == 0)
  {

    goto LABEL_15;
  }
  v14 = *(_QWORD *)(v10 + 56) + 16 * v12;
  v15 = *(_QWORD *)v14;
  sub_10009B27C(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));

  swift_bridgeObjectRelease(v10);
  return v15;
}

uint64_t sub_10011B948()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17[24];
  __int128 v18;
  __int128 v19;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
  if (v1 && (v2 = objc_msgSend(v1, "name")) != 0)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName + 8);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v4 & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataLocalNameKey);
      v9 = v8;
      v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData);
      swift_beginAccess(v10, v17, 0, 0);
      v11 = *v10;
      if (*(_QWORD *)(v11 + 16))
      {
        swift_bridgeObjectRetain(v11);
        v12 = sub_100145264(v7, v9);
        if ((v13 & 1) != 0)
        {
          sub_100090EA8(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v18);
        }
        else
        {
          v18 = 0u;
          v19 = 0u;
        }
        swift_bridgeObjectRelease(v9);
        v14 = v11;
      }
      else
      {
        v18 = 0u;
        v19 = 0u;
        v14 = v9;
      }
      swift_bridgeObjectRelease(v14);
      if (*((_QWORD *)&v19 + 1))
      {
        if (swift_dynamicCast(&v16, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6))return v16;
      }
      else
      {
        sub_1000BF88C((uint64_t)&v18);
      }
      return 0x6E776F6E6B6E55;
    }
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName + 8));
  }
  return v4;
}

id sub_10011BB00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BTDevice(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10011BC48()
{
  return type metadata accessor for BTDevice(0);
}

uint64_t type metadata accessor for BTDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E5B8;
  if (!qword_10026E5B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTDevice);
  return result;
}

uint64_t sub_10011BC8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "Q";
    v5[2] = &unk_1001DFCE0;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4] = &unk_1001DFCF8;
    v5[5] = &unk_1001DFD10;
    v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[8] = &unk_1001DFD10;
    v5[9] = &unk_1001DFD10;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      return swift_updateClassMetadata2(a1, 256, 11, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BTDeviceDiscoveryMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10011BDA4 + 4 * byte_1001DFCA5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10011BDD8 + 4 * byte_1001DFCA0[v4]))();
}

uint64_t sub_10011BDD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BDE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011BDE8);
  return result;
}

uint64_t sub_10011BDF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011BDFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10011BE00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BE08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTDeviceDiscoveryMode()
{
  return &type metadata for BTDeviceDiscoveryMode;
}

uint64_t destroy for BTDeviceDiscovery(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for BTDeviceDiscovery(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BTDeviceDiscovery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BTDeviceDiscovery()
{
  return &type metadata for BTDeviceDiscovery;
}

unint64_t sub_10011C1D0()
{
  unint64_t result;

  result = qword_10026E5C8;
  if (!qword_10026E5C8)
  {
    result = swift_getWitnessTable(&unk_1001DFDA4, &type metadata for BTDeviceDiscoveryMode);
    atomic_store(result, (unint64_t *)&qword_10026E5C8);
  }
  return result;
}

uint64_t sub_10011C214()
{
  return sub_10011C958(&qword_10026E5D0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10011C238@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id sub_10011C280(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v4;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  objc_super v18;

  v9 = v4;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x63697665642E7462, 0xE900000000000065);
  v10 = &v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  v10[80] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions] = _swiftEmptyArrayStorage;
  v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode] = 0;
  v11 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral] = 0;
  v12 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData;
  *(_QWORD *)&v9[v12] = sub_1001B0FB8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral] = 0;
  UUID.init()();
  v13 = &v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName];
  *v13 = a1;
  v13[1] = a2;
  v14 = *(void **)&v9[v11];
  *(_QWORD *)&v9[v11] = a3;
  v15 = a3;

  *(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_rssi] = a4;
  v16 = a4;

  v18.receiver = v9;
  v18.super_class = (Class)type metadata accessor for BTDevice(0);
  return objc_msgSendSuper2(&v18, "init");
}

id sub_10011C3E8()
{
  void *v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  id result;
  char **v41;
  uint64_t v42[4];
  uint64_t v43;
  _BYTE v44[16];

  v1 = v0;
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = (_QWORD *)&unk_100275000;
  if (os_log_type_enabled(v2, v3))
  {
    v5 = 0x6E776F6E6B6E55;
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v42[0] = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = type metadata accessor for UUID(0);
    v9 = sub_10011C958(&qword_10026E860, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    v12 = v11;
    v43 = sub_1000906BC(v10, v11, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v6 + 12) = 2080;
    v13 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v13 && (v14 = objc_msgSend(v13, "name")) != 0)
    {
      v15 = v14;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

    }
    else
    {
      v17 = 0xE700000000000000;
    }
    v43 = sub_1000906BC(v5, v17, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v6 + 14, v6 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s connected to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v4 = &unk_100275000;
  }
  else
  {

  }
  v18 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate;
  v19 = *(id *)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate];
  if (v19)
    v19 = objc_msgSend(v19, "didConnect");
  v20 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode;
  if (!v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode])
  {
    result = *(id *)&v1[v18];
    if (!result)
      return result;
    v41 = &selRef_didFinishDiscovery_;
    return objc_msgSend(result, *v41, 0);
  }
  v21 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Discovering services!", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = v1[v20];
  v25 = sub_1001B20CC((uint64_t)_swiftEmptyArrayStorage);
  v26 = sub_1001B20E0((uint64_t)_swiftEmptyArrayStorage);
  v27 = &v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext];
  swift_beginAccess(&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext], &v43, 1, 0);
  v28 = *(_QWORD *)v27;
  v29 = *((_QWORD *)v27 + 1);
  v30 = *((_QWORD *)v27 + 2);
  v31 = *((_QWORD *)v27 + 3);
  v32 = *((_QWORD *)v27 + 4);
  v33 = *((_QWORD *)v27 + 5);
  v34 = *((_QWORD *)v27 + 6);
  v35 = *((_QWORD *)v27 + 7);
  v36 = *((_QWORD *)v27 + 8);
  v37 = *((_QWORD *)v27 + 9);
  *(_QWORD *)v27 = v24;
  *((_QWORD *)v27 + 1) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 2) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 3) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 4) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 5) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 6) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 7) = _swiftEmptyArrayStorage;
  *((_QWORD *)v27 + 8) = v25;
  *((_QWORD *)v27 + 9) = v26;
  v27[80] = 0;
  sub_1000E1AC8(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v39 = sub_100119174((uint64_t)v42);
  if (*(_QWORD *)(v38 + 8))
    *(_BYTE *)(v38 + 80) = 1;
  ((void (*)(uint64_t *, _QWORD))v39)(v42, 0);
  result = *(id *)&v1[v4[164]];
  if (result)
  {
    v41 = &selRef_discoverServices_;
    return objc_msgSend(result, *v41, 0);
  }
  return result;
}

id sub_10011C7A8()
{
  void *v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id result;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    *(_DWORD *)v4 = 136315138;
    v13 = v5;
    v6 = type metadata accessor for UUID(0);
    v7 = sub_10011C958(&qword_10026E860, (uint64_t)&protocol conformance descriptor for UUID);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
    v10 = v9;
    v12 = sub_1000906BC(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v4 + 4, v4 + 12);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s disconnected", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {

  }
  result = *(id *)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate];
  if (result)
    return objc_msgSend(result, "didDisconnect");
  return result;
}

uint64_t sub_10011C958(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011C998(uint64_t a1)
{
  sub_10009B27C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10011C9C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011C9F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011CA14(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_10026E60C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10009B0EC;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *, int *))((char *)&dword_10026E608 + dword_10026E608))(a1, a2, a3, v8);
}

_QWORD *sub_10011CA9C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_10011CAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10011CB4C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt8_optional v4;
  Swift::UInt8 value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  Swift::UInt8_optional v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;

  sub_10009B27C(v2, v0);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v2, v0, (int)v2);
  v4 = Data.Iterator.next()();
  if ((*(_WORD *)&v4 & 0x100) == 0)
  {
    value = v4.value;
    *(_OWORD *)(v3 - 128) = xmmword_1001DE690;
    do
    {
      v6 = *(_QWORD *)(v3 - 96);
      v7 = *(_QWORD *)(v3 - 88);
      swift_bridgeObjectRetain(v7);
      v8 = String.count.getter(v6, v7);
      swift_bridgeObjectRelease(v7);
      if (v8 <= 0)
        v9 = 0;
      else
        v9 = 58;
      if (v8 <= 0)
        v10 = 0xE000000000000000;
      else
        v10 = 0xE100000000000000;
      v11 = sub_10009061C((uint64_t *)&unk_10026E5E0);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(v3 - 128);
      *(_QWORD *)(v12 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v12 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v12 + 32) = value;
      v13 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(2016555045, 0xE400000000000000, v12);
      v15 = v14;
      *(_QWORD *)(v3 - 112) = v9;
      *(_QWORD *)(v3 - 104) = v10;
      swift_bridgeObjectRetain(v10);
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v15);
      v17._countAndFlagsBits = *(_QWORD *)(v3 - 112);
      v18 = *(void **)(v3 - 104);
      v17._object = v18;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v18);
      v19 = Data.Iterator.next()();
      value = v19.value;
    }
    while ((*(_WORD *)&v19 & 0x100) == 0);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 144) + 8))(v1, *(_QWORD *)(v3 - 136));
  v20 = *(_QWORD *)(v3 - 88);
  countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease(v20);
  return countAndFlagsBits;
}

void sub_10011CCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  v4 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_10011CD90()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10009B27C(v2, v1);
  sub_10009B27C(v2, v1);
  sub_10009B27C(v2, v1);
  *(_QWORD *)(v5 - 144) = v0;
  v6 = 0xD000000000000018;
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v2, v1, (int)v2);
  *(_QWORD *)(v5 - 160) = v2;
  *(_QWORD *)(v5 - 152) = v1;
  sub_10009B2FC(v2, v1);
  v7 = sub_10011CF84();
  ((void (*)(uint64_t, unint64_t))dispatch thunk of IteratorProtocol.next())(v3, v7);
  v8 = 0x80000001001FEE10;
  if ((*(_BYTE *)(v5 - 81) & 1) == 0)
  {
    *(_OWORD *)(v5 - 128) = xmmword_1001DE690;
    do
    {
      v9 = *(_BYTE *)(v5 - 82);
      v10 = sub_10009061C((uint64_t *)&unk_10026E5E0);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v5 - 128);
      *(_QWORD *)(v11 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v11 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v11 + 32) = v9;
      v12 = String.init(format:_:)(2016555045, 0xE400000000000000, v11);
      v14 = v13;
      *(_QWORD *)(v5 - 104) = v6;
      *(_QWORD *)(v5 - 96) = v8;
      swift_bridgeObjectRetain(v8);
      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v14);
      v6 = *(_QWORD *)(v5 - 104);
      v8 = *(_QWORD *)(v5 - 96);
      ((void (*)(uint64_t, unint64_t))dispatch thunk of IteratorProtocol.next())(v3, v7);
    }
    while (*(_BYTE *)(v5 - 81) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 168) + 8))(v4, v3);
  sub_10009B2FC(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  v16 = *(_QWORD *)(v5 - 144);
  UUID.init(uuidString:)(v6, v8);
  swift_bridgeObjectRelease(v8);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v18 + 32))(*(_QWORD *)(v5 - 136), v16, v17);
  ((void (*)(void))UUID.init())();
  return sub_10011CFCC(v16);
}

unint64_t sub_10011CF84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C560;
  if (!qword_10026C560)
  {
    v1 = type metadata accessor for Data.Iterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Data.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_10026C560);
  }
  return result;
}

uint64_t sub_10011CFCC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C(&qword_10026EA20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10011D00C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_10009061C(&qword_10026BF40);
  v3 = swift_allocObject(v2, 38, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001DEEC0;
  v4 = ((uint64_t (*)(void))UUID.uuid.getter)();
  *(_BYTE *)(v3 + 32) = v5;
  v6 = UUID.uuid.getter(v4);
  *(_BYTE *)(v3 + 33) = v7;
  v8 = UUID.uuid.getter(v6);
  *(_BYTE *)(v3 + 34) = v9;
  v10 = UUID.uuid.getter(v8);
  *(_BYTE *)(v3 + 35) = v11;
  v12 = UUID.uuid.getter(v10);
  *(_BYTE *)(v3 + 36) = v13;
  UUID.uuid.getter(v12);
  *(_BYTE *)(v3 + 37) = v14;
  v15 = sub_1000EAC28(v3);
  swift_bridgeObjectRelease(v3);
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
  return v15;
}

uint64_t sub_10011D0DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  __int16 v13;
  _BYTE v15[16];
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v19 = xmmword_1001DE7B0;
  v17 = 58;
  v18 = 0xE100000000000000;
  v16 = &v17;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100152AB0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10011D3E8, (uint64_t)v15, a1, a2);
  swift_bridgeObjectRelease(a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (unint64_t *)(v4 + 56);
    while (1)
    {
      v8 = *(v6 - 3);
      v7 = *(v6 - 2);
      v10 = *(v6 - 1);
      v9 = *v6;
      swift_bridgeObjectRetain(*v6);
      if (Substring.distance(from:to:)(v8, v7, v8, v7, v10, v9) == 2 && (v7 ^ v8) >> 14)
      {
        if ((v9 & 0x1000000000000000) != 0)
        {
          v13 = sub_1001530B8(v8, v7, v10, v9, 16);
          swift_bridgeObjectRelease(v9);
          if ((v13 & 0x100) == 0)
            goto LABEL_13;
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            v17 = v10;
            v18 = v9 & 0xFFFFFFFFFFFFFFLL;
            v11 = &v17;
          }
          else if ((v10 & 0x1000000000000000) != 0)
          {
            v11 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v11 = (uint64_t *)_StringObject.sharedUTF8.getter(v10, v9);
          }
          v12 = (sub_1001187C8((uint64_t)v11, v8, v7, v10, v9, 16) >> 8) & 1;
          swift_bridgeObjectRelease(v9);
          if ((v12 & 1) == 0)
LABEL_13:
            __asm { BR              X11 }
        }
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }
      v6 += 4;
      if (!--v5)
      {
        swift_bridgeObjectRelease(v4);
        __asm { BR              X11 }
      }
    }
  }
  swift_bridgeObjectRelease(v4);
  return 0;
}

uint64_t sub_10011D3E8(uint64_t *a1)
{
  uint64_t v1;

  return sub_100153C18(a1, *(_QWORD **)(v1 + 16)) & 1;
}

unint64_t sub_10011D404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026E628;
  if (!qword_10026E628)
  {
    v1 = sub_100090F6C(&qword_10026E620);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> CollectionOfOne<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10026E628);
  }
  return result;
}

void sub_10011D450(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10011D474(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 6)
  {
    sub_10009B2FC(result, a2);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MACAddress()
{
  return &type metadata for MACAddress;
}

void sub_10011D4E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t *);
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t *v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _QWORD v32[3];

  v1 = v0;
  v2 = sub_1001233D8();
  v3 = swift_allocError(&_s12PowerOnErrorON, v2, 0, 0);
  *v4 = 0;
  v5 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager))
    goto LABEL_8;
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions, v31, 1, 0);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 16);
  if (!v8)
  {
LABEL_7:
    *v6 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v7);
LABEL_8:
    v14 = swift_errorRelease(v3);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Bluetooth powered off, attempting to clear state.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn);
    swift_retain(v18);
    sub_1000ED080();
    swift_release(v18);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
    v19 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
    v20 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
    swift_retain(v20);
    os_unfair_lock_lock(v20 + 4);
    swift_release(v20);
    v21 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
    swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices, v32, 1, 0);
    v22 = *v21;
    *v21 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v22);
    v23 = *(os_unfair_lock_s **)(v1 + v19);
    swift_retain(v23);
    os_unfair_lock_unlock(v23 + 4);
    swift_release(v23);
    v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    if (v24)
    {
      v25 = *(void **)(v24 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
      if (v25)
      {
        v26 = swift_allocError(&_s12PowerOnErrorON, v2, 0, 0);
        *v27 = 0;
        v28 = v25;
        sub_10011D7C0(v28, v26);
        swift_errorRelease(v26);

      }
    }
    *(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn) = 1;
    return;
  }
  v29 = v2;
  swift_bridgeObjectRetain(v7);
  v9 = (uint64_t *)(v7 + 40);
  while (1)
  {
    v10 = *(void **)(v1 + v5);
    if (!v10)
      break;
    v12 = (void (*)(_QWORD *, uint64_t *))*(v9 - 1);
    v11 = *v9;
    v32[0] = *(_QWORD *)(v1 + v5);
    v30 = v3;
    swift_retain(v11);
    v13 = v10;
    v12(v32, &v30);
    swift_release(v11);

    v9 += 2;
    if (!--v8)
    {
      swift_bridgeObjectRelease(v7);
      v7 = *v6;
      v2 = v29;
      goto LABEL_7;
    }
  }
  __break(1u);
}

BOOL sub_10011D7C0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  char v39[8];
  _QWORD *v40;
  __int128 aBlock;
  uint64_t (*v42)(uint64_t);
  void *v43;
  void (*v44)();
  _QWORD *v45;
  __int128 v46[2];
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v35 = v5;
    swift_errorRetain(a2);
    v10 = swift_errorRetain(a2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v33 = a1;
      v15 = v14;
      *(_QWORD *)&aBlock = v14;
      v34 = v4;
      *(_DWORD *)v13 = 136315138;
      swift_getErrorValue(a2, v39, v38);
      v16 = Error.localizedDescription.getter(v38[1], v38[2]);
      v18 = v17;
      v47 = sub_1000906BC(v16, v17, (uint64_t *)&aBlock);
      v4 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Reporting accessory disconnect due to error: %s", v13, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      v19 = v15;
      a1 = v33;
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    v5 = v35;
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v20 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  sub_1000C00A8(a1, (uint64_t)&aBlock);
  v21 = v43;
  if (v43)
  {
    sub_10009B340(&aBlock, (uint64_t)&v47);
    v22 = *(void **)&v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    sub_10009AFF4((uint64_t)&v47, (uint64_t)v46);
    v23 = (_QWORD *)swift_allocObject(&unk_10023C078, 80, 7);
    v23[2] = v20;
    sub_10009B340(v46, (uint64_t)(v23 + 3));
    v23[8] = a1;
    v23[9] = a2;
    v44 = sub_1001230F0;
    v45 = v23;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v42 = sub_10012357C;
    v43 = &unk_10023C090;
    v24 = a1;
    v25 = _Block_copy(&aBlock);
    swift_errorRetain(a2);
    v26 = v20;
    v27 = v22;
    static DispatchQoS.unspecified.getter(v24);
    v40 = _swiftEmptyArrayStorage;
    v28 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v30 = sub_100090F20();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v29, v30, v4, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v7, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
    sub_100090E88(&v47);
    swift_release(v45);
  }
  else
  {

    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
  }
  return v21 != 0;
}

void sub_10011DC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t *);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[3];

  v1 = v0;
  v2 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager))
  {
LABEL_8:
    v11 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn) & 1) != 0)
    {
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v12 = qword_100275638;
      v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v14 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain(v14);
      os_unfair_lock_lock(v14 + 4);
      swift_release(v14);
      v15 = (uint64_t *)(v12 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
      swift_beginAccess(v12 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v23, 0, 0);
      v16 = *v15;
      v17 = *(os_unfair_lock_s **)(v12 + v13);
      swift_bridgeObjectRetain(v16);
      swift_retain(v17);
      os_unfair_lock_unlock(v17 + 4);
      swift_release(v17);
      if ((unint64_t)v16 >> 62)
      {
        if (v16 < 0)
          v20 = v16;
        else
          v20 = v16 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v16);
        v18 = _CocoaArrayWrapper.endIndex.getter(v20);
        swift_bridgeObjectRelease(v16);
      }
      else
      {
        v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v16);
      if (v18)
      {
        v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
        if (v19)
        {
          swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
          sub_1000DAD94(1);
          swift_release(v19);
        }
        *(_BYTE *)(v1 + v11) = 0;
      }
    }
    return;
  }
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions, v22, 1, 0);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 16);
  if (!v5)
  {
LABEL_7:
    *v3 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v4);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(*v3);
  v6 = (uint64_t *)(v4 + 40);
  while (1)
  {
    v7 = *(void **)(v1 + v2);
    if (!v7)
      break;
    v9 = (void (*)(_QWORD *, uint64_t *))*(v6 - 1);
    v8 = *v6;
    v23[0] = *(_QWORD *)(v1 + v2);
    v21 = 0;
    swift_retain(v8);
    v10 = v7;
    v9(v23, &v21);
    swift_release(v8);

    v6 += 2;
    if (!--v5)
    {
      swift_bridgeObjectRelease(v4);
      v4 = *v3;
      goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t sub_10011DE38(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t *, id *);
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  _BYTE v37[24];
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[5];

  v2 = v1;
  v4 = objc_msgSend(a1, "state");
  switch((unint64_t)v4)
  {
    case 0uLL:
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter(v5);
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_19;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Central state unknown, treat as power-off";
      break;
    case 1uLL:
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter(v5);
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_19;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Central resetting! Treat as power-off";
      break;
    case 2uLL:
      v18 = sub_1001233D8();
      v19 = swift_allocError(&_s12PowerOnErrorON, v18, 0, 0);
      *v20 = 1;
      v21 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
      if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager))
      {
        v22 = (_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
        swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions, v37, 1, 0);
        v23 = *v22;
        v24 = *(_QWORD *)(*v22 + 16);
        if (v24)
        {
          v36 = v22;
          swift_bridgeObjectRetain(v23);
          v25 = (uint64_t *)(v23 + 40);
          do
          {
            v26 = *(void **)(v2 + v21);
            if (!v26)
            {
              __break(1u);
              JUMPOUT(0x10011E34CLL);
            }
            v28 = (void (*)(uint64_t *, id *))*(v25 - 1);
            v27 = *v25;
            v42[0] = *(_QWORD *)(v2 + v21);
            v38 = (id)v19;
            swift_retain(v27);
            v29 = v26;
            v28(v42, &v38);
            swift_release(v27);

            v25 += 2;
            --v24;
          }
          while (v24);
          swift_bridgeObjectRelease(v23);
          v22 = v36;
          v23 = *v36;
        }
        *v22 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v23);
      }
      swift_errorRelease(v19);
      goto LABEL_26;
    case 3uLL:
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter(v5);
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_19;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Central state unauthorized, treat as power-off";
      break;
    case 4uLL:
      goto LABEL_20;
    case 5uLL:
      v30 = Logger.logObject.getter(objc_msgSend(a1, "setDelegate:", v1));
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Central powered on", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }

      sub_10011DC08();
      goto LABEL_26;
    default:
      v9 = a1;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v42[0] = v13;
        *(_DWORD *)v12 = 136315138;
        v38 = objc_msgSend(v9, "state");
        type metadata accessor for CBManagerState(0);
        v15 = String.init<A>(describing:)(&v38, v14);
        v17 = v16;
        v38 = (id)sub_1000906BC(v15, v16, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v12 + 4, v12 + 12);

        swift_bridgeObjectRelease(v17);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not handling central manager state: %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {

      }
      goto LABEL_26;
  }
  _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
  swift_slowDealloc(v7, -1, -1);
LABEL_19:

LABEL_20:
  sub_10011D4E0();
LABEL_26:
  sub_1000ACE4C(v2 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)v42, (uint64_t *)&unk_10026E690);
  if (!v42[3])
    return sub_10009B2C0((uint64_t)v42, (uint64_t *)&unk_10026E690);
  sub_10009AFF4((uint64_t)v42, (uint64_t)&v38);
  sub_10009B2C0((uint64_t)v42, (uint64_t *)&unk_10026E690);
  v33 = v40;
  v34 = v41;
  sub_10009B038(&v38, v40);
  (*(void (**)(id, uint64_t, uint64_t))(v34 + 8))(objc_msgSend(a1, "state"), v33, v34);
  return sub_100090E88(&v38);
}

void sub_10011E45C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  _QWORD *v73;
  __int128 v74[2];
  __int128 aBlock;
  uint64_t (*v76)(uint64_t);
  void *v77;
  id (*v78)();
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = v2;
  v69 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v72 = ((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchQoS(0);
  v71 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v70 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) == 2)
  {
    v66 = v6;
    v67 = v8;
    v68 = v5;
    v16 = a2;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v63;
      v65 = v16;
      *(_DWORD *)v19 = 136315138;
      v62 = v19 + 4;
      v20 = objc_msgSend(v65, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v22 = UUID.uuidString.getter(v21);
      v64 = v3;
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v80 = sub_1000906BC(v22, v24, (uint64_t *)&aBlock);
      v16 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v62, v19 + 12);

      v25 = v24;
      v3 = v64;
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Peripheral %s connected", v19, 0xCu);
      v26 = v63;
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {

    }
    v29 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn);
    swift_retain(v29);
    sub_1000ED080();
    swift_release(v29);
    *(_BYTE *)(v3 + v15) = 3;
    v30 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
    if (v30)
    {
      swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
      sub_1000DAD94(2);
      swift_release(v30);
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v31 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000C00A8(v16, (uint64_t)&aBlock);
    if (v77)
    {
      sub_10009B340(&aBlock, (uint64_t)&v80);
      v32 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      sub_10009AFF4((uint64_t)&v80, (uint64_t)v74);
      v33 = swift_allocObject(&unk_10023C258, 72, 7);
      *(_QWORD *)(v33 + 16) = v31;
      sub_10009B340(v74, v33 + 24);
      *(_QWORD *)(v33 + 64) = v16;
      v78 = sub_10012331C;
      v79 = v33;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v76 = sub_10012357C;
      v77 = &unk_10023C270;
      v34 = _Block_copy(&aBlock);
      v35 = v16;
      v36 = v31;
      v37 = v32;
      v38 = v70;
      static DispatchQoS.unspecified.getter(v37);
      v73 = _swiftEmptyArrayStorage;
      v39 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v40 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v41 = sub_100090F20();
      v42 = v72;
      v43 = v68;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v40, v41, v68, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v34);
      _Block_release(v34);

      (*(void (**)(NSObject *, uint64_t))(v66 + 8))(v42, v43);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v67);
      sub_100090E88(&v80);
      swift_release(v79);
    }
    else
    {
      sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
      sub_1000D5CB0();
      v44 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
      if (v44)
      {
        sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
        v45 = v44;
        v46 = (void *)static OS_dispatch_queue.main.getter(v45);
        v47 = swift_allocObject(&unk_10023C208, 32, 7);
        v48 = v69;
        *(_QWORD *)(v47 + 16) = v45;
        *(_QWORD *)(v47 + 24) = v48;
        v78 = sub_1001232C8;
        v79 = v47;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v76 = sub_10012357C;
        v77 = &unk_10023C220;
        v49 = _Block_copy(&aBlock);
        v50 = v79;
        v65 = v45;
        v51 = v48;
        v52 = swift_release(v50);
        v53 = v70;
        static DispatchQoS.unspecified.getter(v52);
        *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
        v54 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v55 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v56 = sub_100090F20();
        v57 = v72;
        v58 = v68;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v55, v56, v68, v54);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v57, v49);
        _Block_release(v49);

        (*(void (**)(NSObject *, uint64_t))(v66 + 8))(v57, v58);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v53, v67);
      }
    }
    sub_1000ACE4C(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
    if (v77)
    {
      sub_10009AFF4((uint64_t)&aBlock, (uint64_t)&v80);
      sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
      v59 = v82;
      v60 = v83;
      sub_10009B038(&v80, v82);
      (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v60 + 24))(v16, 0, v59, v60);

      sub_100090E88(&v80);
    }
    else
    {

      sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
    }
  }
  else
  {
    v72 = Logger.logObject.getter(v12);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v27, "connection callback while in non-connecting state", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

uint64_t sub_10011ECA4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t *v7;

  if (a4)
  {
    v6 = (char *)result;
    v7 = sub_10009B038(a2, a2[3]);
    return sub_1001205C8(*v7, a3, a4, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10011ED70(char *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v15[6];

  v7 = sub_10009B038(a2, a2[3]);
  sub_100121ED4(*v7, (uint64_t)a4, a1);
  v9 = *(void **)(*sub_10009B038(a2, a2[3]) + 32);
  if (v9)
  {
    v10 = objc_opt_self(_HAPAccessoryServerBTLE200, v8);
    v11 = swift_dynamicCastObjCClass(v9, v10);
    if (v11)
    {
      v12 = (void *)v11;
      v13 = v9;
      if (a4)
        a4 = (void *)_convertErrorToNSError(_:)(a4);
      v15[4] = MotionFeedback.init(positions:velocities:);
      v15[5] = 0;
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 1107296256;
      v15[2] = sub_10011EE80;
      v15[3] = &unk_10023C0B8;
      v14 = _Block_copy(v15);
      objc_msgSend(v12, "handleDisconnectionWithError:completionHandler:", a4, v14);
      _Block_release(v14);

    }
  }
}

uint64_t sub_10011EE80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10011EEBC(void *a1, void *a2, id a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  id v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t aBlock[3];
  void *v66;
  id (*v67)();
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = v3;
  v58 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v62 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  __chkstk_darwin(v9);
  v59 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v64 = v7;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    aBlock[0] = v56;
    v57 = a3;
    v55 = v19;
    *(_DWORD *)v19 = 136315138;
    v20 = v19 + 12;
    v54 = v19 + 4;
    v21 = objc_msgSend(v15, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v69 = sub_1000906BC(v23, v25, aBlock);
    v26 = v20;
    a3 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v54, v26);

    swift_bridgeObjectRelease(v25);
    v27 = v17;
    v28 = v55;
    _os_log_impl((void *)&_mh_execute_header, v16, v27, "Peripheral %s disconnected", v55, 0xCu);
    v29 = v56;
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {

  }
  v30 = *(_QWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn];
  swift_retain(v30);
  sub_1000ED080();
  swift_release(v30);
  v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode] = 0;
  v31 = *(_QWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan];
  if (v31)
  {
    swift_retain(*(_QWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan]);
    sub_1000DAD94(3);
    swift_release(v31);
  }
  v32 = sub_1001A3E38();
  v33 = v15;
  v34 = sub_100122EE4(v32, v33);
  swift_bridgeObjectRelease(v32);

  v35 = v4;
  sub_100120EC4(v34, (uint64_t)v35);
  swift_release(v34);

  if (!sub_10011D7C0(v33, (uint64_t)a3))
  {
    v36 = *(void **)&v35[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device];
    if (v36)
    {
      *(_QWORD *)&v35[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device] = 0;
      v37 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
      v38 = (void *)static OS_dispatch_queue.main.getter(v37);
      v39 = (_QWORD *)swift_allocObject(&unk_10023C028, 40, 7);
      v40 = v58;
      v39[2] = v36;
      v39[3] = v40;
      v39[4] = a3;
      v67 = sub_1001230B4;
      v68 = v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10012357C;
      v66 = &unk_10023C040;
      v41 = _Block_copy(aBlock);
      v42 = v68;
      v57 = v36;
      v43 = v40;
      swift_errorRetain(a3);
      v44 = swift_release(v42);
      v45 = v59;
      static DispatchQoS.unspecified.getter(v44);
      aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
      v46 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v47 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v48 = sub_100090F20();
      v49 = v62;
      v50 = v64;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v47, v48, v64, v46);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v41);
      _Block_release(v41);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v50);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v61);
    }
  }
  sub_1000ACE4C((uint64_t)&v35[OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate], (uint64_t)aBlock, (uint64_t *)&unk_10026E690);
  if (!v66)
    return sub_10009B2C0((uint64_t)aBlock, (uint64_t *)&unk_10026E690);
  sub_10009AFF4((uint64_t)aBlock, (uint64_t)&v69);
  sub_10009B2C0((uint64_t)aBlock, (uint64_t *)&unk_10026E690);
  v51 = v71;
  v52 = v72;
  sub_10009B038(&v69, v71);
  (*(void (**)(id, id, uint64_t, uint64_t))(v52 + 32))(v33, a3, v51, v52);
  return sub_100090E88(&v69);
}

uint64_t sub_10011F42C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v31 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (uint64_t *)((char *)&v31 - v12);
  v14 = __chkstk_darwin(v11);
  v16 = (uint64_t *)((char *)&v31 - v15);
  v36 = a2;
  v17 = *(int *)(v14 + 48);
  v18 = a1[1];
  *v16 = *a1;
  v16[1] = v18;
  sub_1000D537C((uint64_t)a1 + v17, (uint64_t)&v31 + v17 - v15);
  sub_1000ACE4C((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_10026E6B0);
  v35 = v10;
  sub_1001231CC((uint64_t)v16, (uint64_t)v10);
  swift_bridgeObjectRetain(v18);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v39 = v34;
    *(_DWORD *)v22 = 136315138;
    v23 = v22 + 12;
    v32 = v22 + 4;
    v33 = v22;
    v24 = *(int *)(v4 + 48);
    v25 = (uint64_t)v7 + v24;
    v26 = *v13;
    v27 = v13[1];
    *v7 = *v13;
    v7[1] = v27;
    sub_1000D537C((uint64_t)v13 + v24, (uint64_t)v7 + v24);
    swift_bridgeObjectRetain(v27);
    sub_1000D53C0(v25);
    v37 = sub_1000906BC(v26, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v32, v23);
    swift_bridgeObjectRelease(v27);
    sub_10009B2C0((uint64_t)v35, (uint64_t *)&unk_10026E6B0);
    sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E6B0);
    v28 = v33;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Removing discovered device after disconnect: %s", v33, 0xCu);
    v29 = v34;
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    sub_10009B2C0((uint64_t)v35, (uint64_t *)&unk_10026E6B0);
    sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E6B0);
  }
  return sub_1001A3D28(*a1, a1[1]);
}

id sub_10011F754(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  BOOL v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v45;
  Class isa;
  void (*v47)(char *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  id result;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSString v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSString v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSString v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Class v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  id v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  id v125;
  char *v126;
  id v127;
  id v128;
  id v129;
  char *v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  BOOL v136;
  uint8_t *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  void (*v149)(char *, _QWORD);
  void (*v150)(unint64_t, uint64_t);
  id v151;
  uint64_t v152;
  uint64_t (*v153)(char *, uint64_t, uint64_t);
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  id v160;
  uint64_t v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167[5];
  _QWORD v168[3];
  uint64_t v169;
  _UNKNOWN **v170;

  *(_QWORD *)&v163 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v162 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v149 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v149 - v15;
  v17 = type metadata accessor for DaemonAccessory(0);
  v169 = v17;
  v170 = &off_10023D728;
  v168[0] = a1;
  v19 = *(void **)(*sub_10009B038(v168, v17) + 32);
  if (!v19)
  {
    swift_retain(a1);
    return (id)sub_100090E88(v168);
  }
  v160 = a2;
  v20 = objc_opt_self(_HAPAccessoryServerBTLE200, v18);
  v21 = (id)swift_dynamicCastObjCClass(v19, v20);
  swift_retain(a1);
  if (!v21)
    return (id)sub_100090E88(v168);
  v155 = v11;
  v159 = v19;
  v22 = objc_msgSend(v21, "identifier");
  v154 = v14;
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

  }
  else
  {
    v24 = 0;
    v26 = 0;
  }
  v27 = sub_1000CDEC4(v24, v26);
  swift_bridgeObjectRelease(v26);
  v156 = a3;
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v152 = a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  v153 = v28;
  v29 = ((uint64_t (*)(char *))v28)(v16);
  v30 = Logger.logObject.getter(v29);
  v31 = v7;
  v32 = v8;
  v33 = static os_log_type_t.default.getter(v30);
  v34 = os_log_type_enabled(v30, v33);
  v157 = v32;
  LODWORD(v158) = v27;
  if (v34)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v151 = v21;
    *(_DWORD *)v35 = 136315138;
    v167[0] = v36;
    if (v27)
      v37 = 0x646572696150;
    else
      v37 = 0x6465726961706E55;
    if (v27)
      v38 = 0xE600000000000000;
    else
      v38 = 0xE800000000000000;
    v165 = (_QWORD *)sub_1000906BC(v37, v38, v167);
    v21 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v30, v33, "Connected to %s accessory.", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v32 = v157;
  }
  else
  {

  }
  v39 = *(void (**)(char *, uint64_t))(v32 + 8);
  v39(v16, v7);
  v40 = v161;
  v41 = v159;
  v42 = *(_QWORD *)(*sub_10009B038(v168, v169) + 16);
  if (v42)
  {
    v43 = *(void **)(v42 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral);
    if (v43)
      objc_msgSend(v43, "connectedToCBPeripheral:error:", v160, 0);
  }
  v44 = v41;
  v45 = v162;
  static Date.now.getter(v44);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v47 = *(void (**)(char *, _QWORD))(v40 + 8);
  v47(v45, v163);
  objc_msgSend(v21, "setConnectionStartTime:", isa);

  objc_msgSend(v21, "handleConnectionWithPeripheral:withError:", v160, 0);
  if ((v158 & 1) != 0 && objc_msgSend(v21, "connectReason") != 7)
  {
    v160 = v44;
    v161 = v31;
    v72 = sub_10009061C((uint64_t *)&unk_10026E6C0);
    v73 = swift_allocObject(v72, 96, 7);
    *(_OWORD *)(v73 + 16) = xmmword_1001DFBB0;
    v75 = (void *)objc_opt_self(CBUUID, v74);
    v76 = sub_10009061C((uint64_t *)&unk_10026E5E0);
    v77 = swift_allocObject(v76, 72, 7);
    v163 = xmmword_1001DE690;
    *(_OWORD *)(v77 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v77 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v77 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v77 + 32) = 304;
    String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v77);
    v79 = v78;
    v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v79);
    v151 = v21;
    v81 = objc_msgSend(v75, "UUIDWithString:", v80);

    v82 = objc_msgSend(v81, "UUIDString");
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v85 = v84;

    *(_QWORD *)(v73 + 32) = v83;
    *(_QWORD *)(v73 + 40) = v85;
    v86 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v86 + 16) = v163;
    *(_QWORD *)(v86 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v86 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v86 + 32) = 82;
    String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v86);
    v88 = v87;
    v89 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v88);
    v90 = objc_msgSend(v75, "UUIDWithString:", v89);

    v91 = objc_msgSend(v90, "UUIDString");
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v94 = v93;

    *(_QWORD *)(v73 + 48) = v92;
    *(_QWORD *)(v73 + 56) = v94;
    v95 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v95 + 16) = v163;
    *(_QWORD *)(v95 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v95 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v95 + 32) = 544;
    String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v95);
    v97 = v96;
    v98 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v97);
    v99 = objc_msgSend(v75, "UUIDWithString:", v98);

    v100 = objc_msgSend(v99, "UUIDString");
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    *(_QWORD *)(v73 + 64) = v101;
    *(_QWORD *)(v73 + 72) = v103;
    v104 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v104 + 16) = v163;
    *(_QWORD *)(v104 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v104 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v104 + 32) = 264;
    String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v104);
    v106 = v105;
    v107 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v106);
    v108 = objc_msgSend(v75, "UUIDWithString:", v107);

    v109 = objc_msgSend(v108, "UUIDString");
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    v112 = v111;

    *(_QWORD *)(v73 + 80) = v110;
    *(_QWORD *)(v73 + 88) = v112;
    v113 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v73);
    objc_msgSend(v151, "discoverAccessoriesAndReadCharacteristicTypes:", v113);

    v53 = v156;
    v114 = v155;
LABEL_64:
    v143 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics;
    if (*(_QWORD *)(v53 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics))
    {
      v144 = v153(v114, v152, v161);
      v145 = Logger.logObject.getter(v144);
      v146 = static os_log_type_t.default.getter(v145);
      if (os_log_type_enabled(v145, v146))
      {
        v147 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v147 = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "done with haptics", v147, 2u);
        swift_slowDealloc(v147, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v157 + 8))(v114, v161);
      v148 = *(_QWORD *)(v53 + v143);
      *(_QWORD *)(v53 + v143) = 0;

      swift_release(v148);
    }
    else
    {

    }
    return (id)sub_100090E88(v168);
  }
  sub_10009AFF4((uint64_t)v168, (uint64_t)v167);
  v48 = sub_10009061C(&qword_10026C2E0);
  if (!swift_dynamicCast(&v165, v167, v48, v17, 6))
  {

    return (id)sub_100090E88(v168);
  }
  v149 = v47;
  v150 = (void (*)(unint64_t, uint64_t))v39;
  v161 = v31;
  v151 = v165;
  v49 = v165[2];
  if (v49)
  {
    v50 = (uint64_t *)(v49 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions);
    swift_beginAccess(v49 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions, v167, 1, 0);
    v51 = *v50;
    *v50 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v51);
  }
  v160 = v44;
  result = objc_msgSend(v21, "identifier", v149);
  v53 = v156;
  v54 = (unint64_t)v154;
  if (result)
  {
    v55 = result;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v58 = v57;

    v59 = (uint64_t *)(v53 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess(v53 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens, &v165, 0, 0);
    v60 = *v59;
    v164 = v60;
    if ((unint64_t)v60 >> 62)
      goto LABEL_47;
    v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v60);
    for (; v61; v61 = _CocoaArrayWrapper.endIndex.getter(v115))
    {
      v54 = v60 & 0xC000000000000001;
      v159 = (id)(v60 & 0xFFFFFFFFFFFFFF8);
      v158 = v60 + 32;
      while (!__OFSUB__(v61--, 1))
      {
        if (v54)
        {
          v63 = specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v60);
        }
        else
        {
          if ((v61 & 0x8000000000000000) != 0)
            goto LABEL_45;
          if (v61 >= *((_QWORD *)v159 + 2))
            goto LABEL_46;
          v63 = *(_QWORD *)(v158 + 8 * v61);
          swift_retain(v63);
        }
        v65 = *(_QWORD *)(v63 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
        v64 = *(_QWORD *)(v63 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
        sub_10009B27C(v65, v64);
        sub_10011CAC4(v65, v64);
        v67 = v66;
        v69 = v68;
        sub_10009B2FC(v65, v64);
        if (v67 == v56 && v69 == v58)
        {
          swift_release(v63);
          swift_bridgeObjectRelease(v58);
          v71 = 0;
          v53 = v156;
          v54 = (unint64_t)v154;
          goto LABEL_52;
        }
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v69, v56, v58, 0);
        swift_release(v63);
        swift_bridgeObjectRelease(v69);
        if ((v53 & 1) != 0 || !v61)
        {
          v54 = (unint64_t)v154;
          v71 = v53 ^ 1;
          v53 = v156;
          goto LABEL_52;
        }
      }
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      if (v60 < 0)
        v115 = v60;
      else
        v115 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v60);
    }
    v71 = 1;
LABEL_52:
    v116 = swift_bridgeObjectRelease(v58);
    __chkstk_darwin(v116);
    *(&v149 - 2) = (void (*)(char *, _QWORD))&v164;
    v117 = sub_10013ADC0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))sub_10012335C, (uint64_t)(&v149 - 4), v61, v71 & 1);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v60);
    swift_release(v117);
    if (v117)
    {
      v119 = v151;
      v120 = (void *)*((_QWORD *)v151 + 4);
      v114 = v155;
      if (v120)
      {
        v121 = *(void **)(v53 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
        v122 = objc_opt_self(_HAPAccessoryServerBTLE200, v118);
        v123 = swift_dynamicCastObjCClass(v120, v122);
        if (v123)
        {
          v124 = (void *)v123;
          v125 = objc_allocWithZone((Class)HAPAccessoryPairingRequest);
          v126 = v121;
          v127 = v120;
          v128 = objc_msgSend(v125, "init");
          objc_msgSend(v128, "setRequiresUserConsent:", 1);
          v129 = objc_msgSend(v128, "setPairingIdentity:", 0);
          v130 = v162;
          v131 = static Date.now.getter(v129);
          v132 = Date.timeIntervalSince1970.getter(v131);
          v149(v130, v163);
          *(double *)&v126[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval] = v132;
          objc_msgSend(v124, "startPairingWithRequest:", v128);

          v114 = v155;
        }
      }
    }
    else
    {
      v133 = v153((char *)v54, v152, v161);
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.error.getter();
      v136 = os_log_type_enabled(v134, v135);
      v114 = v155;
      if (v136)
      {
        v137 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v137 = 0;
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Ignoring connection for pair request without valid token", v137, 2u);
        swift_slowDealloc(v137, -1, -1);
      }

      v150(v54, v161);
      v119 = v151;
      *((_BYTE *)v151 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 1;
      if (qword_10026BC20 != -1)
        swift_once(&qword_10026BC20, sub_1001A3078);
      v138 = (void *)qword_1002757B0;
      v139 = *(void **)(*sub_10009B038(v168, v169) + 16);
      v140 = swift_allocObject(&unk_10023C2A8, 32, 7);
      *(_QWORD *)(v140 + 16) = v138;
      *(_QWORD *)(v140 + 24) = v139;
      v141 = v139;
      v142 = v138;
      sub_1001A3584((uint64_t)sub_1000D2D94, v140);

      swift_release(v140);
    }
    if (qword_10026BC20 != -1)
      swift_once(&qword_10026BC20, sub_1001A3078);
    sub_1000D5CB0();
    swift_release(v119);
    goto LABEL_64;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001205C8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  void *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t (*v62)(char *, uint64_t);
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _BOOL4 v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char v106[8];
  uint64_t v107;
  uint64_t v108;
  char v109[8];
  _QWORD *v110;
  uint64_t aBlock[5];
  uint64_t v112;
  __int128 v113;
  _QWORD v114[3];
  char v115[8];
  uint64_t v116;
  uint64_t v117;
  _UNKNOWN **v118;

  v104 = a4;
  v105 = a3;
  v97 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v93 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DKBTConnectMetric(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v101 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10009061C(&qword_10026E6A0);
  __chkstk_darwin(v12);
  v98 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v103 - 8);
  v14 = __chkstk_darwin(v103);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v100 = (char *)&v86 - v17;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DaemonAccessory(0);
  v118 = &off_10023D728;
  v116 = a1;
  v23 = *(void **)(*sub_10009B038(&v116, v117) + 32);
  if (!v23)
  {
    swift_retain(a1);
    return sub_100090E88(&v116);
  }
  v24 = objc_opt_self(_HAPAccessoryServerBTLE200, v22);
  v25 = swift_dynamicCastObjCClass(v23, v24);
  v26 = a1;
  v27 = (void *)v25;
  swift_retain(v26);
  if (!v27)
    return sub_100090E88(&v116);
  v89 = v8;
  v92 = v23;
  v102 = v27;
  v28 = objc_msgSend(v27, "identifier");
  v88 = v9;
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = v30;
  v34 = v104;
  v91 = sub_1000CDEC4(v33, v32);
  swift_bridgeObjectRelease(v32);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, &v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v18);
  v35 = v105;
  swift_errorRetain(v105);
  v36 = swift_errorRetain(v35);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v37, v38);
  v90 = v6;
  if (v39)
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    aBlock[0] = v41;
    v87 = v5;
    *(_DWORD *)v40 = 136315138;
    v86 = v40 + 4;
    swift_getErrorValue(v105, v109, v106);
    v42 = Error.localizedDescription.getter(v107, v108);
    v44 = v43;
    *(_QWORD *)&v113 = sub_1000906BC(v42, v43, aBlock);
    v5 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 8, v86, v40 + 12);
    swift_bridgeObjectRelease(v44);
    swift_errorRelease(v105);
    swift_errorRelease(v105);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to connect to peripheral: %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    v45 = v41;
    v35 = v105;
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_errorRelease(v35);
    swift_errorRelease(v35);
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v46 = v103;
  v47 = v100;
  v48 = (void *)_convertErrorToNSError(_:)(v35);
  objc_msgSend(v102, "handleConnectionWithPeripheral:withError:", v97, v48);

  v49 = *(void **)(*sub_10009B038(&v116, v117) + 16);
  v50 = v101;
  v51 = v104;
  v52 = v99;
  v53 = v98;
  if (v49)
  {
    v54 = v49;
    sub_1000DFFA0(v35);

  }
  v55 = objc_msgSend(v102, "connectionStartTime");
  if (v55)
  {
    v56 = v55;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v57 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v57(v53, v16, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v46);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v53, 1, v46);
    if ((_DWORD)result != 1)
    {
      v59 = ((uint64_t (*)(char *, char *, uint64_t))v57)(v47, v53, v46);
      v60 = static Date.now.getter(v59);
      v61 = Date.timeIntervalSince1970.getter(v60);
      v62 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
      v63 = v62(v16, v46);
      v64 = Date.timeIntervalSince1970.getter(v63);
      swift_getErrorValue(v35, v115, v114);
      v65 = Error.localizedDescription.getter(v114[1], v114[2]);
      v67 = v66;
      v68 = objc_msgSend(v102, "connectReason");
      if (v68 == 8)
        v69 = 0x676E696B63617254;
      else
        v69 = 0x676E6972696150;
      if (v68 == 8)
        v70 = 0xE800000000000000;
      else
        v70 = 0xE700000000000000;
      DKBTConnectMetric.init(duration:error:reason:)(v65, v67, v69, v70, v61 - v64);
      DKBTConnectMetric.send()();
      v71 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
      v72 = *(os_unfair_lock_s **)&v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
      swift_retain(v72);
      os_unfair_lock_lock(v72 + 4);
      swift_release(v72);
      v73 = *(_QWORD *)&v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing];
      *(_QWORD *)&v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
      swift_release(v73);
      v74 = *(os_unfair_lock_s **)&v51[v71];
      swift_retain(v74);
      os_unfair_lock_unlock(v74 + 4);
      swift_release(v74);
      if (v91)
      {
        v75 = *(void **)&v51[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        sub_10009AFF4((uint64_t)&v116, (uint64_t)&v113);
        v76 = swift_allocObject(&unk_10023C1B8, 64, 7);
        *(_QWORD *)(v76 + 16) = v51;
        sub_10009B340(&v113, v76 + 24);
        aBlock[4] = (uint64_t)sub_100123290;
        v112 = v76;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10012357C;
        aBlock[3] = (uint64_t)&unk_10023C1D0;
        v77 = _Block_copy(aBlock);
        v78 = v75;
        v79 = v51;
        v80 = v47;
        v81 = v93;
        static DispatchQoS.unspecified.getter(v79);
        v110 = _swiftEmptyArrayStorage;
        v82 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v83 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v84 = sub_100090F20();
        v85 = v89;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v110, v83, v84, v5, v82);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v81, v85, v77);
        _Block_release(v77);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v5);
        (*(void (**)(char *, uint64_t))(v94 + 8))(v81, v88);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v50, v96);
        v62(v80, v103);
        swift_release(v112);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v95 + 8))(v50, v96);
        v62(v47, v46);
      }
      return sub_100090E88(&v116);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, 1, 1, v46);
  }
  __break(1u);
  return result;
}

void sub_100120EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v26 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v4 = __chkstk_darwin(v26);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v24 - v7);
  v9 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v25 = (unint64_t)(v10 + 63) >> 6;
  v28 = a1;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    v16 = *(_QWORD *)(v28 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = type metadata accessor for BTDiscoveredDevice(0);
    sub_1000D537C(v16 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, (uint64_t)v8 + *(int *)(v26 + 48));
    *v8 = v18;
    v8[1] = v19;
    sub_1001231CC((uint64_t)v8, (uint64_t)v6);
    swift_bridgeObjectRetain(v19);
    sub_10011F42C(v6, v27);
    sub_10009B2C0((uint64_t)v6, (uint64_t *)&unk_10026E6B0);
    if (v2)
      goto LABEL_24;
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v13);
  if (v22)
  {
LABEL_19:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v13 << 6);
    goto LABEL_5;
  }
  v23 = v13 + 1;
  if (v13 + 1 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 2;
  if (v13 + 2 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 3;
  if (v13 + 3 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 4;
  if (v13 + 4 >= v25)
  {
LABEL_24:
    swift_release(v28);
    return;
  }
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v13 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v25)
      goto LABEL_24;
    v22 = *(_QWORD *)(v24 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100121128(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataLocalNameKey);
  v6 = v5;
  if (!*(_QWORD *)(a2 + 16) || (v7 = sub_100145264(v4, v5), (v8 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_7;
  }
  sub_100090EA8(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v14);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_7:
    sub_10009B2C0((uint64_t)&v14, &qword_10026E5F0);
    goto LABEL_8;
  }
  if (swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v13;
LABEL_8:
  v10 = objc_msgSend(a1, "name");
  if (!v10)
    return 0;
  v11 = v10;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v9;
}

uint64_t sub_100121234(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t (**v30)(char *, uint64_t, uint64_t (*)());
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  const void *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t, uint64_t (*)());
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  void *v61;
  char *v62;
  const void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 aBlock;
  __int128 v81;
  uint64_t (*v82)();
  _QWORD *v83;
  char v84[24];
  char v85[24];
  _QWORD v86[3];
  uint64_t v87;
  uint64_t v88;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v79 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v78 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100121128(a1, a2);
  v16 = v15;
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) != 1)
  {
    swift_bridgeObjectRelease(v15);
    goto LABEL_15;
  }
  v17 = v14;
  v75 = v11;
  v18 = objc_allocWithZone((Class)type metadata accessor for BTDevice(0));
  v19 = a3;
  v20 = a1;
  v21 = a1;
  v22 = v20;
  v76 = v21;
  v23 = (char *)sub_10011C280(v17, v16, v21, v19);

  v24 = (uint64_t *)&v23[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData];
  swift_beginAccess(&v23[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData], v85, 1, 0);
  v25 = *v24;
  *v24 = a2;
  v77 = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v25);
  v26 = v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter;
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter, v84, 0, 0);
  sub_1000ACE4C(v26, (uint64_t)&aBlock, (uint64_t *)&unk_10026E6D0);
  v27 = *((_QWORD *)&v81 + 1);
  sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E6D0);
  if (v27)
  {
    result = sub_1000ACE4C(v26, (uint64_t)&aBlock, (uint64_t *)&unk_10026E6D0);
    v29 = *((_QWORD *)&v81 + 1);
    if (!*((_QWORD *)&v81 + 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    v30 = (uint64_t (**)(char *, uint64_t, uint64_t (*)()))v82;
    sub_10009B038(&aBlock, *((uint64_t *)&v81 + 1));
    LOBYTE(v30) = v30[2](v23, v29, (uint64_t (*)())v30);
    sub_100090E88(&aBlock);
    if ((v30 & 1) != 0)
    {
      v31 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
      v32 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
      if (v32)
      {
        v33 = v31[1];
        sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
        v34 = swift_retain(v33);
        v73 = static OS_dispatch_queue.main.getter(v34);
        v35 = (_QWORD *)swift_allocObject(&unk_10023C320, 40, 7);
        v35[2] = v32;
        v35[3] = v33;
        v36 = v33;
        v72 = v33;
        v35[4] = v23;
        v82 = sub_10012337C;
        v83 = v35;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v81 = sub_10012357C;
        *((_QWORD *)&v81 + 1) = &unk_10023C338;
        v37 = _Block_copy(&aBlock);
        v74 = v31;
        v38 = v23;
        v39 = v37;
        v40 = v83;
        sub_1000BC8F4(v32, v36);
        v41 = v38;
        v42 = swift_release(v40);
        static DispatchQoS.unspecified.getter(v42);
        *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
        v43 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v44 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v45 = sub_100090F20();
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v44, v45, v8, v43);
        v46 = (void *)v73;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v39);
        v47 = v39;
        v23 = v38;
        v31 = v74;
        _Block_release(v47);

        sub_1000B1410(v32, v72);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v8);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v75);
      }
      result = sub_1000ACE4C(v26, (uint64_t)&aBlock, (uint64_t *)&unk_10026E6D0);
      v48 = *((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v49 = (uint64_t (**)(uint64_t, uint64_t (*)()))v82;
        v50 = sub_10009B038(&aBlock, *((uint64_t *)&v81 + 1));
        v51 = *(_QWORD *)(v48 - 8);
        __chkstk_darwin(v50);
        v53 = (char *)&v72 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v51 + 16))(v53);
        LOBYTE(v49) = v49[1](v48, (uint64_t (*)())v49);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v48);
        sub_100090E88(&aBlock);
        if ((v49 & 1) == 0)
        {
          v54 = *v31;
          v55 = v31[1];
          *v31 = 0;
          v31[1] = 0;
          sub_1000B1410(v54, v55);
          v82 = 0;
          aBlock = 0u;
          v81 = 0u;
          swift_beginAccess(v26, v86, 33, 0);
          sub_1000D6010((uint64_t)&aBlock, v26);
          swift_endAccess(v86);
        }
        goto LABEL_13;
      }
LABEL_20:
      __break(1u);
      return result;
    }
  }
  v56 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  if (!v56)
  {
LABEL_13:

    goto LABEL_14;
  }
  v57 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match + 8);
  sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v58 = swift_retain(v57);
  v59 = (void *)static OS_dispatch_queue.main.getter(v58);
  v60 = (_QWORD *)swift_allocObject(&unk_10023C2D0, 40, 7);
  v60[2] = v56;
  v60[3] = v57;
  v60[4] = v23;
  v82 = sub_10012337C;
  v83 = v60;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v81 = sub_10012357C;
  *((_QWORD *)&v81 + 1) = &unk_10023C2E8;
  v61 = _Block_copy(&aBlock);
  v62 = v23;
  v63 = v61;
  v64 = v83;
  v74 = v62;
  sub_1000BC8F4(v56, v57);
  v65 = swift_release(v64);
  static DispatchQoS.unspecified.getter(v65);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v66 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v67 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v68 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v67, v68, v8, v66);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v63);
  _Block_release(v63);

  sub_1000B1410(v56, v57);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v75);
LABEL_14:
  a1 = v76;
  a2 = v77;
LABEL_15:
  sub_1000ACE4C(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
  if (!*((_QWORD *)&v81 + 1))
    return sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
  sub_10009AFF4((uint64_t)&aBlock, (uint64_t)v86);
  sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
  v69 = a1;
  v70 = v87;
  v71 = v88;
  sub_10009B038(v86, v87);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v71 + 16))(v69, a2, v70, v71);
  return sub_100090E88(v86);
}

uint64_t sub_100121948(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 aBlock;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)();
  _QWORD *v56;
  __int128 v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v3 = v2;
  v50 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v42;
    v43 = v5;
    *(_DWORD *)v15 = 136315138;
    v41 = v15 + 4;
    v16 = objc_msgSend(v12, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = UUID.uuidString.getter(v17);
    v44 = v3;
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v58 = sub_1000906BC(v18, v20, (uint64_t *)&aBlock);
    v5 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v41, v15 + 12);

    v21 = v20;
    v3 = v44;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Peripheral %s failed to connect", v15, 0xCu);
    v22 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

  }
  v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn);
  swift_retain(v23);
  sub_1000ED080();
  swift_release(v23);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v24 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  sub_1000C00A8(v12, (uint64_t)&aBlock);
  if (v54)
  {
    sub_10009B340(&aBlock, (uint64_t)&v58);
    if (v50)
    {
      v25 = *(void **)&v24[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      sub_10009AFF4((uint64_t)&v58, (uint64_t)v57);
      v26 = (_QWORD *)swift_allocObject(&unk_10023C168, 80, 7);
      v26[2] = v24;
      sub_10009B340(v57, (uint64_t)(v26 + 3));
      v27 = v50;
      v26[8] = v12;
      v26[9] = v27;
      v55 = sub_100123254;
      v56 = v26;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v53 = sub_10012357C;
      v54 = &unk_10023C180;
      v28 = _Block_copy(&aBlock);
      v29 = v12;
      v30 = v24;
      v31 = v25;
      v32 = swift_errorRetain(v27);
      v33 = v45;
      static DispatchQoS.unspecified.getter(v32);
      v51 = _swiftEmptyArrayStorage;
      v34 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v35 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v36 = sub_100090F20();
      v37 = v48;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v35, v36, v5, v34);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v28);
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v5);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v47);
      sub_100090E88(&v58);
      swift_release(v56);
    }
    else
    {
      sub_100090E88(&v58);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
  }
  sub_1000ACE4C(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
  if (v54)
  {
    sub_10009AFF4((uint64_t)&aBlock, (uint64_t)&v58);
    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
    v38 = v60;
    v39 = v61;
    sub_10009B038(&v58, v60);
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v39 + 24))(v12, v50, v38, v39);

    return sub_100090E88(&v58);
  }
  else
  {

    return sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026E690);
  }
}

id sub_100121ED4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  id v28;
  id result;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t (*v65)(char *, uint64_t);
  uint64_t v66;
  double v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  id v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  id v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  char *v88;
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD v106[3];
  char v107[8];
  _QWORD aBlock[5];
  uint64_t v109;
  _QWORD *v110;
  _QWORD v111[5];

  v94 = a2;
  v101 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v7 = (char *)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for DKBTConnectMetric(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10009061C(&qword_10026E6A0);
  __chkstk_darwin(v13);
  v100 = (char *)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Date(0);
  v105 = *(_QWORD **)(v102 - 8);
  v15 = __chkstk_darwin(v102);
  v98 = (char *)v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v99 = (char *)v87 - v17;
  v18 = type metadata accessor for Logger(0);
  v104 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v103 = (char *)v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v20);
  v22 = (char *)v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DaemonAccessory(0);
  v111[3] = v23;
  v111[4] = &off_10023D728;
  v111[0] = a1;
  sub_10009AFF4((uint64_t)v111, (uint64_t)aBlock);
  swift_retain(a1);
  v24 = sub_10009061C(&qword_10026C2E0);
  if (!swift_dynamicCast(&v110, aBlock, v24, v23, 6))
    return (id)sub_100090E88(v111);
  v91 = v11;
  v92 = v9;
  v93 = v8;
  v25 = (unint64_t)v110;
  if (*((_BYTE *)v110 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
    || (v26 = (void *)v110[4]) == 0)
  {
LABEL_6:
    v39 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    v40 = *(os_unfair_lock_s **)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
    swift_retain(v40);
    os_unfair_lock_lock(v40 + 4);
    swift_release(v40);
    v41 = *(_QWORD *)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing];
    *(_QWORD *)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
    swift_release(v41);
    v42 = *(os_unfair_lock_s **)&a3[v39];
    swift_retain(v42);
    os_unfair_lock_unlock(v42 + 4);
    swift_release(v42);
    v43 = *(void **)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup];
    *(_QWORD *)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup] = 0;

    v44 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
    objc_msgSend(*(id *)(v25 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController), "deRegisterFromNotifications");
    objc_msgSend(*(id *)(v25 + v44), "invalidate");
    v45 = *(void **)(v25 + v44);
    *(_QWORD *)(v25 + v44) = 0;

    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v22, 1, 1, v46);
    v47 = (_QWORD *)swift_allocObject(&unk_10023C0F0, 40, 7);
    v47[2] = 0;
    v47[3] = 0;
    v47[4] = v25;
    swift_retain(v25);
    v48 = sub_10018A990((uint64_t)v22, (uint64_t)&unk_10026E6A8, (uint64_t)v47);
    swift_release(v48);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v90 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                        + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                            + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
    sub_100126838(v25, 0, 0, 0, 0.0);
    v50 = v105;
    v51 = *(void **)(v25 + 32);
    v52 = v102;
    if (!v51)
      goto LABEL_24;
    v53 = objc_opt_self(_HAPAccessoryServerBTLE200, v49);
    v54 = swift_dynamicCastObjCClass(v51, v53);
    if (!v54)
      goto LABEL_24;
    v55 = (void *)v54;
    v105 = v51;
    v56 = objc_msgSend(v55, "connectionStartTime");
    if (v56)
    {
      v57 = v56;
      v58 = v98;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v59 = (void (*)(char *, char *, uint64_t))v50[4];
      v60 = v50;
      v61 = (uint64_t)v100;
      v59(v100, v58, v52);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v60[7])(v61, 0, 1, v52);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v60[6])(v61, 1, v52) != 1)
      {
        v88 = v7;
        v89 = v5;
        v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v99, v61, v52);
        v63 = static Date.now.getter(v62);
        v64 = Date.timeIntervalSince1970.getter(v63);
        v65 = (uint64_t (*)(char *, uint64_t))v60[1];
        v66 = v65(v58, v52);
        v67 = Date.timeIntervalSince1970.getter(v66);
        if (v94)
        {
          swift_getErrorValue(v94, v107, v106);
          v68 = Error.localizedDescription.getter(v106[1], v106[2]);
          v70 = v69;
        }
        else
        {
          v68 = 0x726F7272456F4ELL;
          v70 = 0xE700000000000000;
        }
        v72 = v105;
        v73 = objc_msgSend(v55, "connectReason", v87[0]);
        if (v73 == 8)
          v74 = 0x676E696B63617254;
        else
          v74 = 0x676E6972696150;
        if (v73 == 8)
          v75 = 0xE800000000000000;
        else
          v75 = 0xE700000000000000;
        v76 = v95;
        DKBTConnectMetric.init(duration:error:reason:)(v68, v70, v74, v75, v64 - v67);
        DKBTConnectMetric.send()();

        (*(void (**)(char *, uint64_t))(v96 + 8))(v76, v97);
        v65(v99, v102);
        v5 = v89;
        v7 = v88;
        goto LABEL_24;
      }
    }
    else
    {
      v71 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v50[7];
      v61 = (uint64_t)v100;
      v71(v100, 1, 1, v52);
    }

    sub_10009B2C0(v61, &qword_10026E6A0);
LABEL_24:
    v77 = *(void **)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    v78 = swift_allocObject(&unk_10023C118, 32, 7);
    *(_QWORD *)(v78 + 16) = a3;
    *(_QWORD *)(v78 + 24) = v25;
    aBlock[4] = sub_1001231C4;
    v109 = v78;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10012357C;
    aBlock[3] = &unk_10023C130;
    v79 = _Block_copy(aBlock);
    swift_retain(v25);
    v80 = v77;
    v81 = a3;
    v82 = v91;
    static DispatchQoS.unspecified.getter(v81);
    v110 = _swiftEmptyArrayStorage;
    v83 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v84 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v85 = sub_100090F20();
    v86 = v101;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v110, v84, v85, v101, v83);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v82, v7, v79);
    _Block_release(v79);
    swift_release(v25);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v86);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v82, v93);
    swift_release(v109);
    return (id)sub_100090E88(v111);
  }
  v88 = v7;
  v89 = v5;
  v27 = *(id *)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  v28 = v26;
  result = objc_msgSend(v28, "identifier");
  if (result)
  {
    v30 = result;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v33 = v32;

    v34 = type metadata accessor for Errors(0);
    v35 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v36 = swift_allocError(v34, v35, 0, 0);
    *v37 = 0xD000000000000016;
    v37[1] = 0x8000000100200940;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v37, enum case for Errors.PairingError(_:), v34);
    v38 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    sub_1001319A0(v31, v33, 5, v38, v36);
    swift_bridgeObjectRelease(v38);

    swift_errorRelease(v36);
    swift_bridgeObjectRelease(v33);
    a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    v5 = v89;
    v7 = v88;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100122A54(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  _QWORD *v73;

  v57 = a2;
  v62 = a4;
  v58 = a1;
  v5 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v6 = __chkstk_darwin(v5);
  v60 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v69 = (uint64_t *)((char *)&v56 - v9);
  v10 = __chkstk_darwin(v8);
  v68 = (uint64_t *)((char *)&v56 - v11);
  __chkstk_darwin(v10);
  v73 = (uint64_t *)((char *)&v56 - v12);
  v13 = type metadata accessor for BTDiscoveredDevice(0);
  v67 = *(_QWORD *)(v13 - 8);
  result = __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a3 + 64);
  v63 = a3 + 64;
  v19 = 1 << *(_BYTE *)(a3 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v64 = (unint64_t)(v19 + 63) >> 6;
  v70 = v5;
  v61 = a3;
  v66 = v16;
  while (1)
  {
    if (v21)
    {
      v71 = (v21 - 1) & v21;
      v72 = v17;
      v22 = __clz(__rbit64(v21)) | (v17 << 6);
      goto LABEL_19;
    }
    v23 = __OFADD__(v17, 1);
    v24 = v17 + 1;
    if (v23)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v24 >= v64)
      return sub_10019B320(v58, v57, v59, (_QWORD *)a3);
    v25 = *(_QWORD *)(v63 + 8 * v24);
    if (!v25)
      break;
LABEL_18:
    v71 = (v25 - 1) & v25;
    v72 = v24;
    v22 = __clz(__rbit64(v25)) + (v24 << 6);
LABEL_19:
    v27 = *(_QWORD *)(a3 + 56);
    v28 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v22);
    v30 = *v28;
    v29 = v28[1];
    v31 = *(_QWORD *)(v67 + 72);
    v65 = v22;
    sub_1000D537C(v27 + v31 * v22, (uint64_t)v16);
    v32 = *(int *)(v5 + 48);
    v33 = v73;
    v34 = (uint64_t)v73 + v32;
    *v73 = v30;
    v33[1] = v29;
    sub_1000D537C((uint64_t)v16, (uint64_t)v33 + v32);
    v35 = *(int *)(v5 + 48);
    v36 = v68;
    v37 = (uint64_t)v68 + v35;
    *v68 = v30;
    v36[1] = v29;
    sub_1000D537C(v34, (uint64_t)v36 + v35);
    v38 = *(void **)(v37 + 8);
    v39 = v38;
    swift_bridgeObjectRetain_n(v29, 3);
    sub_1000D53C0(v37);
    if (v38)
    {
      sub_100090EE8(0, (unint64_t *)&qword_10026EA50, CBPeripheral_ptr);
      v40 = v39;
      v41 = v62;
      v42 = static NSObject.== infix(_:_:)(v40, v41);

      v5 = v70;
    }
    else
    {
      v42 = 0;
    }
    v43 = *(int *)(v5 + 48);
    v44 = (uint64_t)v69;
    v45 = (uint64_t)v69 + v43;
    *v69 = v30;
    *(_QWORD *)(v44 + 8) = v29;
    sub_1000D537C(v34, v44 + v43);
    swift_bridgeObjectRetain(v29);
    sub_10009B2C0((uint64_t)v73, (uint64_t *)&unk_10026E6B0);
    if ((v42 & 1) == 0)
    {
      sub_10009B2C0(v44, (uint64_t *)&unk_10026E6B0);
      swift_bridgeObjectRelease(v29);
      goto LABEL_5;
    }
    v46 = *(int *)(v5 + 48);
    v47 = v60;
    v48 = (_QWORD *)((char *)v60 + v46);
    *v60 = v30;
    v47[1] = v29;
    sub_1000D537C(v45, (uint64_t)v47 + v46);
    sub_10009B2C0(v44, (uint64_t *)&unk_10026E6B0);
    swift_bridgeObjectRelease(v47[1]);
    v49 = v48[2];
    v50 = v48[3];
    v52 = v48[4];
    v51 = v48[5];
    v53 = v48[6];
    v54 = v48[7];
    sub_1000D53FC(v49, v50, v52, v51, v53, v54);
    v55 = (uint64_t)v48;
    a3 = v61;
    sub_1000D53C0(v55);
    if (v50)
    {
      sub_1000D4AE8(v49, v50, v52, v51, v53, v54);
      v16 = v66;
      sub_1000D53C0((uint64_t)v66);
      result = swift_bridgeObjectRelease(v29);
      v5 = v70;
      v21 = v71;
      v17 = v72;
      if ((v51 & 0x10000) != 0)
      {
        *(unint64_t *)((char *)v58 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
        v23 = __OFADD__(v59++, 1);
        if (v23)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_5:
      v16 = v66;
      sub_1000D53C0((uint64_t)v66);
      result = swift_bridgeObjectRelease(v29);
      v5 = v70;
      v21 = v71;
      v17 = v72;
    }
  }
  v26 = v24 + 1;
  if (v24 + 1 >= v64)
    return sub_10019B320(v58, v57, v59, (_QWORD *)a3);
  v25 = *(_QWORD *)(v63 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v24 + 2;
  if (v24 + 2 >= v64)
    return sub_10019B320(v58, v57, v59, (_QWORD *)a3);
  v25 = *(_QWORD *)(v63 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v24 + 3;
  if (v24 + 3 >= v64)
    return sub_10019B320(v58, v57, v59, (_QWORD *)a3);
  v25 = *(_QWORD *)(v63 + 8 * v26);
  if (v25)
  {
LABEL_17:
    v24 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v64)
      return sub_10019B320(v58, v57, v59, (_QWORD *)a3);
    v25 = *(_QWORD *)(v63 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100122EE4(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (char *)&v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    v10 = v8;
    v11 = sub_100122A54((unint64_t *)v9, v6, a1, v10);

    if (v2)
      swift_willThrow(v12);

  }
  else
  {
    v13 = (void *)swift_slowAlloc(8 * v6, -1);
    bzero(v13, 8 * v6);
    v14 = v8;
    v11 = sub_100122A54((unint64_t *)v13, v6, a1, v14);

    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

uint64_t sub_100123080()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_1001230B4()
{
  return sub_10011C7A8();
}

uint64_t sub_1001230D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001230E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001230F0()
{
  uint64_t v0;

  sub_10011ED70(*(char **)(v0 + 16), (_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72));
}

uint64_t sub_100123100()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012312C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10026CF04);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10009B0EC;
  return sub_1000CAAE4(a1, v4, v5, v6);
}

uint64_t sub_100123198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001231C4()
{
  uint64_t v0;

  sub_1000CABDC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001231CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100123218()
{
  uint64_t v0;

  sub_100090E88((_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100123254()
{
  uint64_t *v0;

  return sub_10011ECA4(v0[2], v0 + 3, v0[8], v0[9]);
}

uint64_t sub_100123264()
{
  uint64_t v0;

  sub_100090E88((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100123290()
{
  uint64_t v0;

  sub_1000CAA94(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

uint64_t sub_10012329C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001232C8()
{
  return sub_10011C3E8();
}

uint64_t sub_1001232E8()
{
  uint64_t v0;

  sub_100090E88((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

id sub_10012331C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;

  v1 = v0[2];
  v2 = (void *)v0[8];
  v3 = sub_10009B038(v0 + 3, v0[6]);
  return sub_10011F754(*v3, v2, v1);
}

unint64_t sub_10012335C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10013AFC8(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_100123384()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001233B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

unint64_t sub_1001233D8()
{
  unint64_t result;

  result = qword_10026E6E0;
  if (!qword_10026E6E0)
  {
    result = swift_getWitnessTable(&unk_1001DFE98, &_s12PowerOnErrorON);
    atomic_store(result, (unint64_t *)&qword_10026E6E0);
  }
  return result;
}

uint64_t _s12PowerOnErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100123468 + 4 * byte_1001DFE1D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012349C + 4 * asc_1001DFE18[v4]))();
}

uint64_t sub_10012349C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001234A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001234ACLL);
  return result;
}

uint64_t sub_1001234B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001234C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001234C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001234CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s12PowerOnErrorOMa()
{
  return &_s12PowerOnErrorON;
}

unint64_t sub_1001234EC()
{
  unint64_t result;

  result = qword_10026E6E8;
  if (!qword_10026E6E8)
  {
    result = swift_getWitnessTable(&unk_1001DFE70, &_s12PowerOnErrorON);
    atomic_store(result, (unint64_t *)&qword_10026E6E8);
  }
  return result;
}

uint64_t sub_10012357C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

BOOL static MotionType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MotionType.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int MotionType.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

id MotionValidator.__allocating_init(type:interval:)(char a1, double a2)
{
  objc_class *v2;
  char v4;
  id v5;

  v4 = a1 & 1;
  v5 = objc_allocWithZone(v2);
  return MotionValidator.init(type:interval:)(v4, a2);
}

id MotionValidator.init(type:interval:)(char a1, double a2)
{
  void *v2;
  char v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  objc_super v12;

  v4 = a1 & 1;
  v5 = v2;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x61566E6F69746F4DLL, 0xEF726F746164696CLL);
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleStampedBufferImu] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer] = 0;
  v6 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants];
  v7 = sub_10009061C(&qword_10026BC48);
  v8 = (_OWORD *)swift_allocObject(v7, 64, 7);
  v8[1] = xmmword_1001DD7E0;
  v8[2] = xmmword_1001DD7F0;
  v8[3] = xmmword_1001DD800;
  *(_OWORD *)v6 = xmmword_1001DD810;
  *((_QWORD *)v6 + 2) = 0x3FC3333333333333;
  *((_QWORD *)v6 + 3) = 5;
  *((_QWORD *)v6 + 4) = 0x3FC3333333333333;
  *((_QWORD *)v6 + 5) = v8;
  *((_OWORD *)v6 + 3) = xmmword_1001DD820;
  v9 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__expiry] = 0x3FF0000000000000;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupTimeout] = 0x402E000000000000;
  v10 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  *v10 = 0;
  v10[1] = 0;
  v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type] = v4;
  *(double *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__interval] = a2;

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for MotionValidator(0);
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t type metadata accessor for MotionValidator(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E790;
  if (!qword_10026E790)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MotionValidator);
  return result;
}

void MotionValidator.start(timedOutCallback:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23[24];

  v3 = v2;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v6 = objc_msgSend(v2, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  sub_10015B790(v7, v9, 0, 0);
  swift_bridgeObjectRelease(v9);
  v10 = &v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer];
  swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer], v23, 1, 0);
  v11 = *(_QWORD *)v10;
  *(_QWORD *)v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v11);
  v12 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer];
  swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer], &v22, 1, 0);
  v13 = *(_QWORD *)v12;
  *(_QWORD *)v12 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v13);
  v14 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  v15 = *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  v16 = *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback + 8];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  swift_retain(a2);
  sub_1000B1410(v15, v16);
  v17 = *(double *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__interval];
  v18 = swift_allocObject(&unk_10023C468, 24, 7);
  *(_QWORD *)(v18 + 16) = v3;
  objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
  v19 = v3;
  v20 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, 0, sub_10012571C, v18, v17);
  v21 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer];
  *(_QWORD *)&v19[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer] = v20;

  sub_100124A98();
}

void sub_100123A28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  simd_quatd *v9;
  float64x2_t v10;
  float64x2_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  long double v23;
  long double v24;
  long double v25;
  _QWORD *v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  long double *v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  double v35;
  double v36;
  _QWORD *v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  void *v43;
  id v44;
  double v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  float64x2_t v49;
  float64x2_t __y;
  _QWORD v51[4];
  CMQuaternion v52;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v2 = qword_100275638;
  v3 = sub_10009061C(&qword_10026E758);
  OS_dispatch_queue.sync<A>(execute:)(v51, sub_100125B04, v2, v3);
  v4 = (void *)v51[0];
  if (v51[0])
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
    objc_msgSend(v5, "timeIntervalSince1970");
    v7 = v6;

    v8 = objc_msgSend(v4, "attitude");
    objc_msgSend(v8, "quaternion");
    simd_quatd.init(_:)(v9, v52);
    v49 = v10;
    __y = v11;

    v12 = (int8x16_t)vnegq_f64(v49);
    v13 = vmulq_f64(__y, (float64x2_t)xmmword_1001DFEE0);
    v14 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)vnegq_f64(v13), 8uLL);
    v15 = vmlaq_f64(vmulq_f64(v49, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v12, (int8x16_t)v49, 8uLL));
    v16 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v49, v12, 8uLL), vmlaq_f64(vmulq_f64(v13, (float64x2_t)0), (float64x2_t)0, v14));
    v17 = vaddq_f64(v14, v15);
    v18 = vnegq_f64(v16);
    v19 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)vnegq_f64(v17), 8uLL);
    v20 = vmlaq_n_f64(vmulq_laneq_f64(v18, v49, 1), (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 8uLL), v49.f64[0]);
    v21 = vmlaq_n_f64(vmulq_laneq_f64(v16, __y, 1), (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v16, 8uLL), __y.f64[0]);
    *(_QWORD *)&__y.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v17, __y, 1), v19, __y.f64[0]), v20);
    v22 = vaddq_f64(v21, vmlaq_n_f64(vmulq_laneq_f64(v17, v49, 1), v19, v49.f64[0]));
    v23 = sqrt(vmuld_n_f64(v22.f64[0], v22.f64[0]) + vmuld_lane_f64(v22.f64[1], v22, 1));
    v24 = atan2(v22.f64[1], v22.f64[0]);
    v25 = atan2(__y.f64[0], v23);
    v26 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleStampedBufferImu);
    swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleStampedBufferImu, v51, 33, 0);
    v27 = (_QWORD *)*v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    *v26 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = sub_1000EA030(0, v27[2] + 1, 1, v27);
      *v26 = v27;
    }
    v30 = v27[2];
    v29 = v27[3];
    if (v30 >= v29 >> 1)
    {
      v27 = sub_1000EA030((_QWORD *)(v29 > 1), v30 + 1, 1, v27);
      *v26 = v27;
    }
    v27[2] = v30 + 1;
    v31 = (long double *)&v27[3 * v30];
    v31[4] = v24;
    v31[5] = v25;
    *((_QWORD *)v31 + 6) = v7;
    v32 = *v26;
    swift_endAccess(v51);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33 >= 2)
    {
      v34 = (double *)(v32 + 24 * v33);
      v35 = *(v34 - 1) - v34[2];
      v36 = *v34 - v34[3];
      v37 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer);
      swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer, v51, 33, 0);
      v38 = (_QWORD *)*v37;
      v39 = swift_isUniquelyReferenced_nonNull_native(*v37);
      *v37 = v38;
      if ((v39 & 1) == 0)
      {
        v38 = sub_1000E9D04(0, v38[2] + 1, 1, v38);
        *v37 = v38;
      }
      v41 = v38[2];
      v40 = v38[3];
      v42 = v35 / v36;
      if (v41 >= v40 >> 1)
      {
        v38 = sub_1000E9D04((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
        *v37 = v38;
      }
      v38[2] = v41 + 1;
      *(double *)&v38[v41 + 4] = v42;
      swift_endAccess(v51);
    }

  }
  v43 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer);
  if (v43)
  {
    v44 = v43;
    v45 = dispatch thunk of RepeatingTimer.timeSinceInit()();

    if (v45 > 15.0)
    {
      v46 = a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback;
      v47 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback);
      if (v47)
      {
        v48 = *(_QWORD *)(v46 + 8);
        swift_retain(v48);
        v47(1);
        sub_1000B1410((uint64_t)v47, v48);
      }
    }
  }
}

void MotionValidator.startCalibrationMonitor(callback:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  id v15;
  uint64_t v16;
  void *v17;
  char v18[24];

  v3 = v2;
  v4 = &v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  v6 = *((_QWORD *)v4 + 1);
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  swift_retain(a2);
  sub_1000B1410(v5, v6);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v7 = objc_msgSend(v3, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  sub_10015B790(v8, v10, 0, 0);
  swift_bridgeObjectRelease(v10);
  v11 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer];
  swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer], v18, 1, 0);
  v12 = *(_QWORD *)v11;
  *(_QWORD *)v11 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v12);
  v13 = swift_allocObject(&unk_10023C490, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v3);
  v14 = *(double *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__interval];
  v15 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
  swift_retain(v13);
  v16 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, 0, sub_100125748, v13, v14);
  v17 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer];
  *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer] = v16;
  swift_release(v13);

}

void sub_100123F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  simd_quatd *v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  long double v22;
  long double v23;
  long double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  long double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double *v40;
  uint64_t v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  void (*v47)(uint64_t, double);
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  float64x2_t v53;
  float64x2_t __y;
  id v55[4];
  char v56[24];
  CMQuaternion v57;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v56, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v4 = qword_100275638;
    v5 = sub_10009061C(&qword_10026E758);
    OS_dispatch_queue.sync<A>(execute:)(v55, sub_100125B04, v4, v5);
    v6 = (char *)v55[0];
    if (v55[0])
    {
      v7 = objc_msgSend(v55[0], "attitude");
      objc_msgSend(v7, "quaternion");
      simd_quatd.init(_:)(v8, v57);
      v53 = v9;
      __y = v10;

      v11 = (int8x16_t)vnegq_f64(v53);
      v12 = vmulq_f64(__y, (float64x2_t)xmmword_1001DFEE0);
      v13 = (float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)vnegq_f64(v12), 8uLL);
      v14 = vmlaq_f64(vmulq_f64(v53, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v11, (int8x16_t)v53, 8uLL));
      v15 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v53, v11, 8uLL), vmlaq_f64(vmulq_f64(v12, (float64x2_t)0), (float64x2_t)0, v13));
      v16 = vaddq_f64(v13, v14);
      v17 = vnegq_f64(v15);
      v18 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)vnegq_f64(v16), 8uLL);
      v19 = vmlaq_n_f64(vmulq_laneq_f64(v17, v53, 1), (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL), v53.f64[0]);
      v20 = vmlaq_n_f64(vmulq_laneq_f64(v15, __y, 1), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v15, 8uLL), __y.f64[0]);
      *(_QWORD *)&__y.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v16, __y, 1), v18, __y.f64[0]), v19);
      v21 = vaddq_f64(v20, vmlaq_n_f64(vmulq_laneq_f64(v16, v53, 1), v18, v53.f64[0]));
      v22 = sqrt(vmuld_n_f64(v21.f64[0], v21.f64[0]) + vmuld_lane_f64(v21.f64[1], v21, 1));
      v23 = atan2(v21.f64[1], v21.f64[0]);
      v24 = atan2(__y.f64[0], v22);
      v25 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
      objc_msgSend(v25, "timeIntervalSince1970");
      v27 = v26;

      v28 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer];
      swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer], v55, 33, 0);
      v29 = *(_QWORD **)v28;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v28);
      *(_QWORD *)v28 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = sub_1000EA030(0, v29[2] + 1, 1, v29);
        *(_QWORD *)v28 = v29;
      }
      v32 = v29[2];
      v31 = v29[3];
      if (v32 >= v31 >> 1)
      {
        v29 = sub_1000EA030((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
        *(_QWORD *)v28 = v29;
      }
      v29[2] = v32 + 1;
      v33 = (long double *)&v29[3 * v32];
      v33[4] = v23;
      v33[5] = v24;
      *((_QWORD *)v33 + 6) = v27;
      v34 = *(_QWORD *)v28;
      swift_endAccess(v55);
      v35 = *(_QWORD *)(v34 + 16);
      if (v35)
      {
        v36 = v34 + 24 * v35;
        if (*(double *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 48] < *(double *)(v36 + 24) - *(double *)(v34 + 48))
        {
          v37 = *(double *)(v34 + 40);
          v38 = v35 - 1;
          if (v38)
          {
            v40 = (double *)(v34 + 64);
            v41 = v38;
            v39 = *(double *)(v34 + 40);
            do
            {
              v42 = *v40;
              v40 += 3;
              v43 = v42;
              if (v42 < v39)
                v39 = v43;
              --v41;
            }
            while (v41);
            v44 = (double *)(v34 + 64);
            do
            {
              v45 = *v44;
              v44 += 3;
              v46 = v45;
              if (v45 < v37)
                v37 = v46;
              --v38;
            }
            while (v38);
          }
          else
          {
            v39 = *(double *)(v34 + 40);
          }
          if (v39 - v37 < *(double *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 56])
          {
            v47 = *(void (**)(uint64_t, double))&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
            if (v47)
            {
              v48 = *(double *)(v36 + 16);
              v49 = *(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback + 8];
              v50 = swift_retain(v49);
              v47(v50, v48);
              v51 = *(_QWORD *)v28;
              *(_QWORD *)v28 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRelease(v51);
              sub_1000B1410((uint64_t)v47, v49);
            }
          }
          if (*(_QWORD *)(*(_QWORD *)v28 + 16))
          {
            swift_beginAccess(v28, v55, 33, 0);
            if (!*(_QWORD *)(*(_QWORD *)v28 + 16))
            {
              __break(1u);
              return;
            }
            v52 = v6;
            sub_100176664(0, 1);
            swift_endAccess(v55);
            v6 = v3;
            v3 = v52;
          }
        }
      }

    }
  }
}

Swift::Void __swiftcall MotionValidator.stopCalibrationMonitor()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer, v4, 1, 0);
  v2 = *v1;
  *v1 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer) = 0;

}

Swift::Void __swiftcall MotionValidator.stop()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  _QWORD *v35;
  char v36[24];
  char v37[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v0[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer];
  swift_beginAccess(v8, v37, 1, 0);
  v9 = *(_QWORD *)v8;
  *(_QWORD *)v8 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v9);
  v10 = &v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer];
  swift_beginAccess(&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer], v36, 1, 0);
  v11 = *(_QWORD *)v10;
  *(_QWORD *)v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v11);
  v12 = OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer;
  v13 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer];
  if (v13)
  {
    v14 = v13;
    dispatch thunk of RepeatingTimer.cancel()();

    v13 = *(void **)&v1[v12];
  }
  *(_QWORD *)&v1[v12] = 0;

  sub_100125750();
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v15 = qword_100275638;
  v16 = objc_msgSend(v1, "description");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = (_QWORD *)swift_allocObject(&unk_10023C4B8, 40, 7);
  v20[2] = v15;
  v20[3] = v17;
  v20[4] = v19;
  aBlock[4] = sub_100125AE0;
  v35 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023C4D0;
  v21 = _Block_copy(aBlock);
  swift_retain(v15);
  swift_bridgeObjectRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  v33 = _swiftEmptyArrayStorage;
  v23 = sub_1000D5FC8();
  v24 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v25 = sub_100090F20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v24, v25, v2, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v31);
  v26 = v35;
  swift_bridgeObjectRelease(v19);
  swift_release(v26);
  v27 = &v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  v28 = *(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  v29 = *(_QWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback + 8];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  sub_1000B1410(v28, v29);
}

Swift::Bool __swiftcall MotionValidator.startupInProgress()()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer) != 0;
}

uint64_t MotionValidator.registerMotion(completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v5 = objc_msgSend(v2, "description");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  sub_10015B790(v6, v8, a1, a2);
  return swift_bridgeObjectRelease(v8);
}

Swift::Void __swiftcall MotionValidator.unregisterMotion(dispatch:)(Swift::Bool dispatch)
{
  void *v1;
  id v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v3 = objc_msgSend(v1, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  sub_10015C4B8(v4, v6, dispatch);
  swift_bridgeObjectRelease(v6);
}

Swift::Bool __swiftcall MotionValidator.isPositionValid(deviceMotion:)(CMDeviceMotion_optional deviceMotion)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  Swift::Bool v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  id v9;
  simd_quatd *v10;
  float64x2_t v11;
  float64x2_t v12;
  int8x16_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double *v28;
  double v29;
  double v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  uint64_t v38;
  CMQuaternion v39;

  v2 = v1;
  isa = deviceMotion.value.super.super.isa;
  type metadata accessor for DockCoreManager(0, deviceMotion.value.super._internalLogItem, deviceMotion.value._internal, *(_QWORD *)&deviceMotion.is_nil);
  if ((static DockCoreManager.ignoreStartupValidation.getter() & 1) == 0)
  {
    v5 = isa;
    if (isa)
      goto LABEL_7;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v6 = qword_100275638;
    v7 = sub_10009061C(&qword_10026E758);
    OS_dispatch_queue.sync<A>(execute:)(&v37, sub_100125B04, v6, v7);
    v5 = *(NSObject **)&v37;
    if (v37 != 0.0)
    {
LABEL_7:
      v8 = isa;
      v9 = -[NSObject attitude](v5, "attitude");
      objc_msgSend(v9, "quaternion");
      simd_quatd.init(_:)(v10, v39);
      v35 = v11;
      v36 = v12;

      v13 = (int8x16_t)vnegq_f64(v35);
      v14 = vmulq_f64(v36, (float64x2_t)xmmword_1001DFEE0);
      v15 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)vnegq_f64(v14), 8uLL);
      v16 = vmlaq_f64(vmulq_f64(v35, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v13, (int8x16_t)v35, 8uLL));
      v17 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v35, v13, 8uLL), vmlaq_f64(vmulq_f64(v14, (float64x2_t)0), (float64x2_t)0, v15));
      v18 = vaddq_f64(v15, v16);
      v19 = vnegq_f64(v17);
      v20 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)vnegq_f64(v18), 8uLL);
      v21 = vmlaq_n_f64(vmulq_laneq_f64(v17, v36, 1), (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v17, 8uLL), v36.f64[0]);
      *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v18, v36, 1), v20, v36.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v19, v35, 1), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 8uLL), v35.f64[0]));
      v22 = vaddq_f64(v21, vmlaq_n_f64(vmulq_laneq_f64(v18, v35, 1), v20, v35.f64[0]));
      v24 = atan2(v17.f64[0], sqrt(vmuld_n_f64(v22.f64[0], v22.f64[0]) + vmuld_lane_f64(v22.f64[1], v22, 1)));
      v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 40);
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        v27 = v24;
        if (vabdd_f64(v24, *(double *)(v25 + 32)) < *(double *)(v25 + 40))
        {
LABEL_12:
          v31 = Logger.logObject.getter(v23);
          v32 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v31, v32))
          {
            v33 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_DWORD *)v33 = 134217984;
            v37 = v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v33 + 4, v33 + 12);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Startup position is invalid, pitch -> %f", v33, 0xCu);
            swift_slowDealloc(v33, -1, -1);
          }

          v4 = 0;
          goto LABEL_16;
        }
        v28 = (double *)(v25 + 56);
        while (--v26)
        {
          v30 = *(v28 - 1);
          v29 = *v28;
          v28 += 2;
          if (vabdd_f64(v27, v30) < v29)
            goto LABEL_12;
        }
      }
      v4 = 1;
      v31 = v5;
LABEL_16:

      return v4;
    }
  }
  return 1;
}

Swift::Bool __swiftcall MotionValidator.isMotionValid()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer)
    && (*(_BYTE *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type) & 1) == 0)
  {
    return sub_100124F2C();
  }
  else
  {
    return 1;
  }
}

void sub_100124A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  void *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  os_unfair_lock_s *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  _QWORD v50[5];
  char v51[24];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v43 - v5;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v7 = qword_100275638;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v11 = *(os_unfair_lock_s **)(v7 + v8);
  v49 = v10;
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  swift_release(v11);
  if (v10)
  {
    type metadata accessor for Actuator(0);
    v12 = static Actuator.Yaw.getter();
    v14 = v13;
    v48 = (id)dispatch thunk of DockCoreAccessory.getActuator(name:)(v12);
    swift_bridgeObjectRelease(v14);
    if (!v48)
    {

      return;
    }
    v15 = static Actuator.Pitch.getter();
    v17 = v16;
    v18 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)(v15);
    swift_bridgeObjectRelease(v17);
    if (!v18)
    {

      return;
    }
    v19 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v20 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v19);
    v46 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v21 = *(id *)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v22 = &v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v51, 0, 0);
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    if (v24)
    {
      v44 = v19;
      v45 = v18;
      v25 = v23 + 32;
      swift_bridgeObjectRetain(v23);
      while (1)
      {
        sub_10009AFF4(v25, (uint64_t)v50);
        v26 = *(id *)(*sub_10009B038(v50, v50[3]) + 24);
        DockCoreInfo.identifier.getter(v26);

        DockCoreInfo.identifier.getter(v27);
        LOBYTE(v26) = static UUID.== infix(_:_:)(v6, v4);
        v28 = *(void (**)(char *, uint64_t))(v1 + 8);
        v28(v4, v0);
        v28(v6, v0);
        if ((v26 & 1) != 0)
          break;
        sub_100090E88(v50);
        v25 += 40;
        if (!--v24)
        {
          swift_bridgeObjectRelease(v23);
          v19 = v44;
          v18 = v45;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease(v23);
      v41 = v44;
      v42 = *(id *)&v44[v46];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v50, (uint64_t)&v52);
      sub_100090E88(v50);

      v18 = v45;
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_17;
    }
    else
    {
LABEL_11:
      v29 = *(id *)&v19[v46];
      OS_dispatch_semaphore.signal()();

      v54 = 0;
      v52 = 0u;
      v53 = 0u;

      if (!*((_QWORD *)&v53 + 1))
      {
LABEL_17:

        sub_100125EFC((uint64_t)&v52);
        return;
      }
    }
    v30 = sub_10009061C(&qword_10026C2E0);
    v31 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v50, &v52, v30, v31, 6) & 1) != 0)
    {
      v32 = v50[0];
      v33 = (_QWORD *)swift_allocObject(&unk_10023C7B0, 40, 7);
      v33[2] = v47;
      v34 = v48;
      v33[3] = v48;
      v33[4] = v18;
      v35 = *(os_unfair_lock_s **)(v32 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
      __chkstk_darwin(v34);
      *(&v43 - 4) = v32;
      *(&v43 - 3) = (uint64_t)sub_100125F88;
      *(&v43 - 2) = (uint64_t)v33;
      v37 = v36;
      v38 = v48;
      v39 = v18;
      swift_retain(v35);
      os_unfair_lock_lock(v35 + 4);
      sub_100180780(v40, sub_100125F94);
      os_unfair_lock_unlock(v35 + 4);

      swift_release(v32);
      swift_release(v33);
      swift_release(v35);
    }
    else
    {

    }
  }
}

uint64_t sub_100124F2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  double v8;
  unint64_t v9;
  double *v10;
  int64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  double v30;
  uint64_t v31;

  v1 = sub_100125278();
  v2 = (uint64_t)v1;
  v3 = v1[2];
  v4 = v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 24) >= v3)
  {
    v16 = swift_bridgeObjectRelease(v1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "minimum angle readings not met, force setting valid to true", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return 1;
  }
  v5 = Logger.logObject.getter(v1);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "using precise startup validation", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v3)
  {
    v30 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_1001A5048(0, v3, 0);
    v8 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    v9 = _swiftEmptyArrayStorage[2];
    v10 = (double *)(v2 + 56);
    v11 = v3;
    do
    {
      v12 = *(v10 - 2);
      v13 = *v10;
      v30 = v8;
      v14 = *(_QWORD *)(*(_QWORD *)&v8 + 24);
      v15 = v9 + 1;
      if (v9 >= v14 >> 1)
      {
        sub_1001A5048(v14 > 1, v9 + 1, 1);
        v8 = v30;
      }
      *(_QWORD *)(*(_QWORD *)&v8 + 16) = v15;
      *(double *)(*(_QWORD *)&v8 + 8 * v9 + 32) = vabdd_f64(v12, v13);
      v10 += 4;
      ++v9;
      --v11;
    }
    while (v11);
  }
  else
  {
    v8 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    v15 = _swiftEmptyArrayStorage[2];
    if (!v15)
    {
      v21 = 0.0;
      goto LABEL_22;
    }
  }
  if (v15 >= 2)
  {
    v22 = 0;
    v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v21 = 0.0;
    do
    {
      v21 = v21 + *(double *)(*(_QWORD *)&v8 + 8 * v22 + 32) + *(double *)(*(_QWORD *)&v8 + 8 * v22 + 40);
      v22 += 2;
    }
    while (v20 != v22);
    goto LABEL_21;
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    v23 = *(double *)(*(_QWORD *)&v8 + 8 * v20++ + 32);
    v21 = v21 + v23;
LABEL_21:
    ;
  }
  while (v15 != v20);
LABEL_22:
  v24 = swift_bridgeObjectRelease(*(_QWORD *)&v8);
  v25 = v21 / (double)v3;
  v26 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v28 = 134217984;
    v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v28 + 4, v28 + 12);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "pitchError is %f", v28, 0xCu);
    swift_slowDealloc(v28, -1, -1);
  }

  if (v25 < *(double *)(v4 + 16))
  {
    swift_bridgeObjectRelease(v2);
    return 1;
  }
  sub_100125430(v2);
  swift_bridgeObjectRelease(v2);
  return 0;
}

_QWORD *sub_100125278()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  char v18[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer, v18, 0, 0);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(double *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  v7 = *(double *)(v2 + 56);
  swift_bridgeObjectRetain(*v1);
  v8 = _swiftEmptyArrayStorage;
  v9 = 0.0;
  v10 = 1;
  v11 = v5;
LABEL_4:
  if (vabdd_f64(v11, v5) > 0.1)
  {
    v9 = v7 - v11;
    goto LABEL_8;
  }
  v12 = 1;
  while (v10 != v3)
  {
    v13 = v2 + 32 + 32 * v10;
    v4 = *(_QWORD *)v13;
    v11 = *(double *)(v13 + 8);
    v6 = *(_QWORD *)(v13 + 16);
    v7 = *(double *)(v13 + 24);
    ++v10;
    if (v12)
      goto LABEL_4;
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_1000E99CC(0, v8[2] + 1, 1, v8);
    v15 = v8[2];
    v14 = v8[3];
    if (v15 >= v14 >> 1)
      v8 = sub_1000E99CC((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
    v12 = 0;
    v8[2] = v15 + 1;
    v16 = (double *)&v8[4 * v15];
    *((_QWORD *)v16 + 4) = v4;
    v16[5] = v11;
    *((_QWORD *)v16 + 6) = v6;
    v16[7] = v7 - v9;
  }
  swift_bridgeObjectRelease(v2);
  if (v8[2] < *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 24))
  {
    swift_bridgeObjectRelease(v8);
    v8 = (_QWORD *)*v1;
    swift_bridgeObjectRetain(*v1);
  }
  return v8;
}

uint64_t sub_100125430(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = swift_bridgeObjectRetain(result);
    v4 = (uint64_t *)(v3 + 56);
    do
    {
      v5 = *(v4 - 2);
      v6 = *v4;
      v7 = Logger.logObject.getter(v3);
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = swift_slowAlloc(22, -1);
        *(_DWORD *)v9 = 134218240;
        *(_QWORD *)(v9 + 4) = v5;
        *(_WORD *)(v9 + 12) = 2048;
        *(_QWORD *)(v9 + 14) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "imu pitch %f acc pitch %f", (uint8_t *)v9, 0x16u);
        swift_slowDealloc(v9, -1, -1);
      }

      v4 += 4;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease(v2);
  }
  return result;
}

id MotionValidator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void MotionValidator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("dockaccessoryd.MotionValidator", 30, "init()", 6, 0);
  __break(1u);
}

id MotionValidator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MotionValidator(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001256F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10012571C()
{
  uint64_t v0;

  sub_100123A28(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100125724()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100125748()
{
  uint64_t v0;

  sub_100123F58(v0);
}

void sub_100125750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void *v10;
  os_unfair_lock_s *v11;
  id v12;
  char *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(char *, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  char *v28;
  id v29;
  char *v30;
  id v31;
  uint64_t v32;
  _QWORD v33[5];
  char v34[24];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v30 - v5;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v7 = qword_100275638;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v11 = *(os_unfair_lock_s **)(v7 + v8);
  v12 = v10;
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  swift_release(v11);
  if (v10)
  {
    v13 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v13);
    v32 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v15 = *(id *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v16 = &v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v34, 0, 0);
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    if (v18)
    {
      v30 = v13;
      v31 = v12;
      v19 = v17 + 32;
      swift_bridgeObjectRetain(v17);
      while (1)
      {
        sub_10009AFF4(v19, (uint64_t)v33);
        v20 = *(id *)(*sub_10009B038(v33, v33[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v20) = static UUID.== infix(_:_:)(v6, v4);
        v21 = *(void (**)(char *, uint64_t))(v1 + 8);
        v21(v4, v0);
        v21(v6, v0);
        if ((v20 & 1) != 0)
          break;
        sub_100090E88(v33);
        v19 += 40;
        if (!--v18)
        {
          swift_bridgeObjectRelease(v17);
          v13 = v30;
          v12 = v31;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease(v17);
      v28 = v30;
      v29 = *(id *)&v30[v32];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v33, (uint64_t)&v35);
      sub_100090E88(v33);

      v12 = v31;
      if (!*((_QWORD *)&v36 + 1))
        goto LABEL_13;
    }
    else
    {
LABEL_9:
      v22 = *(id *)&v13[v32];
      OS_dispatch_semaphore.signal()();

      v37 = 0;
      v35 = 0u;
      v36 = 0u;

      if (!*((_QWORD *)&v36 + 1))
      {
LABEL_13:

        sub_100125EFC((uint64_t)&v35);
        return;
      }
    }
    v23 = sub_10009061C(&qword_10026C2E0);
    v24 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v33, &v35, v23, v24, 6) & 1) != 0)
    {
      v25 = v33[0];
      v26 = *(os_unfair_lock_s **)(v33[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
      swift_retain(v26);
      os_unfair_lock_lock(v26 + 4);
      sub_100180780(v27, sub_100125F3C);
      os_unfair_lock_unlock(v26 + 4);

      swift_release(v25);
      swift_release(v26);
    }
    else
    {

    }
  }
}

uint64_t sub_100125AB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100125AE0()
{
  uint64_t *v0;

  sub_10015C6E4(v0[2], v0[3], v0[4]);
}

uint64_t sub_100125AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100125AFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100125B04@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10015CDA8(v1, a1);
}

unint64_t sub_100125B20()
{
  unint64_t result;

  result = qword_10026E760;
  if (!qword_10026E760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MotionType, &type metadata for MotionType);
    atomic_store(result, (unint64_t *)&qword_10026E760);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MotionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100125BB0 + 4 * byte_1001DFEF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100125BE4 + 4 * byte_1001DFEF0[v4]))();
}

uint64_t sub_100125BE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100125BEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100125BF4);
  return result;
}

uint64_t sub_100125C00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100125C08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100125C0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100125C14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MotionType()
{
  return &type metadata for MotionType;
}

uint64_t sub_100125C30()
{
  return type metadata accessor for MotionValidator(0);
}

uint64_t sub_100125C38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = &unk_1001DFF98;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1001DFFB0;
    v4[7] = &unk_1001DFFB0;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_1001DFFC8;
    v4[10] = &unk_1001DFFE0;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[13] = &unk_1001DFFE0;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

uint64_t destroy for StartupParameters(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for StartupParameters(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for StartupParameters(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 initializeWithTake for StartupParameters(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for StartupParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartupParameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StartupParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StartupParameters()
{
  return &type metadata for StartupParameters;
}

ValueMetadata *type metadata accessor for Angle2DStamped()
{
  return &type metadata for Angle2DStamped;
}

ValueMetadata *type metadata accessor for Angle2D()
{
  return &type metadata for Angle2D;
}

ValueMetadata *type metadata accessor for InvalalidAngle()
{
  return &type metadata for InvalalidAngle;
}

uint64_t sub_100125EFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009061C((uint64_t *)&unk_10026DF40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100125F3C()
{
  uint64_t v0;

  return sub_10017FC60(v0);
}

uint64_t sub_100125F54()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100125F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100125FB0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100125F94()
{
  uint64_t *v0;

  return sub_10017FC0C(v0[2], v0[3], v0[4]);
}

void sub_100125FB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  simd_quatd *v10;
  float64x2_t v11;
  float64x2_t v12;
  int8x16_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  long double v24;
  long double v25;
  long double v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  __n128 v33;
  _QWORD *v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  long double *v39;
  float64x2_t v40;
  float64x2_t __ya;
  unint64_t __y;
  id v43[4];
  CMQuaternion v44;

  if (qword_10026BC00 != -1)
    goto LABEL_26;
  while (1)
  {
    v6 = qword_100275638;
    v7 = sub_10009061C(&qword_10026E758);
    OS_dispatch_queue.sync<A>(execute:)(v43, sub_100125B04, v6, v7);
    v8 = v43[0];
    if (!v43[0])
      break;
    v9 = objc_msgSend(v43[0], "attitude");
    objc_msgSend(v9, "quaternion");
    simd_quatd.init(_:)(v10, v44);
    v40 = v11;
    __ya = v12;

    v13 = (int8x16_t)vnegq_f64(v40);
    v14 = vmulq_f64(__ya, (float64x2_t)xmmword_1001DFEE0);
    v15 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)vnegq_f64(v14), 8uLL);
    v16 = vmlaq_f64(vmulq_f64(v40, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v13, (int8x16_t)v40, 8uLL));
    v17 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v40, v13, 8uLL), vmlaq_f64(vmulq_f64(v14, (float64x2_t)0), (float64x2_t)0, v15));
    v18 = vaddq_f64(v15, v16);
    v19 = vnegq_f64(v17);
    v20 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)vnegq_f64(v18), 8uLL);
    v21 = vmlaq_n_f64(vmulq_laneq_f64(v19, v40, 1), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 8uLL), v40.f64[0]);
    v22 = vmlaq_n_f64(vmulq_laneq_f64(v17, __ya, 1), (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v17, 8uLL), __ya.f64[0]);
    *(_QWORD *)&__ya.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v18, __ya, 1), v20, __ya.f64[0]), v21);
    v23 = vaddq_f64(v22, vmlaq_n_f64(vmulq_laneq_f64(v18, v40, 1), v20, v40.f64[0]));
    v24 = sqrt(vmuld_n_f64(v23.f64[0], v23.f64[0]) + vmuld_lane_f64(v23.f64[1], v23, 1));
    v25 = atan2(v23.f64[1], v23.f64[0]);
    v26 = atan2(__ya.f64[0], v24);
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27)
    {
      v31 = 0.0;
      v32 = 0;
LABEL_17:
      v34 = (_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer);
      swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer, v43, 33, 0);
      v35 = (_QWORD *)*v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
      *v34 = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = sub_1000E99CC(0, v35[2] + 1, 1, v35);
        *v34 = v35;
      }
      v38 = v35[2];
      v37 = v35[3];
      if (v38 >= v37 >> 1)
      {
        v35 = sub_1000E99CC((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
        *v34 = v35;
      }
      v35[2] = v38 + 1;
      v39 = (long double *)&v35[4 * v38];
      v39[4] = v25;
      v39[5] = v26;
      *((_QWORD *)v39 + 6) = v32;
      v39[7] = v31;
      swift_endAccess(v43);

      return;
    }
    __y = a3;
    v28 = a2 + 32;
    v29 = swift_bridgeObjectRetain(a1);
    v30 = 0;
    v31 = 0.0;
    v32 = 0;
    while (1)
    {
      a3 = *(_QWORD *)(a1 + 8 * v30 + 32);
      if (a3 != dispatch thunk of Component.id.getter(v29))
        goto LABEL_11;
      if ((a3 & 0x8000000000000000) != 0)
        break;
      if (a3 >= *(_QWORD *)(a2 + 16))
        goto LABEL_24;
      v32 = *(_QWORD *)(v28 + 8 * a3);
LABEL_11:
      if (a3 == dispatch thunk of Component.id.getter(v33))
      {
        if ((a3 & 0x8000000000000000) != 0)
          goto LABEL_25;
        if (a3 >= *(_QWORD *)(a2 + 16))
        {
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(a1);
          a3 = __y;
          goto LABEL_17;
        }
        v29.n128_u64[0] = *(_QWORD *)(v28 + 8 * a3);
        v31 = -v29.n128_f64[0];
      }
      if (v27 == ++v30)
        goto LABEL_15;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_once(&qword_10026BC00, sub_100158DF8);
  }
}

uint64_t sub_1001262C0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 9u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for FirmwareUpdateErrors(uint64_t a1)
{
  return sub_1001262E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1001262E8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 9u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s14dockaccessoryd20FirmwareUpdateErrorsOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001262C0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FirmwareUpdateErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001262C0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001262E8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for FirmwareUpdateErrors(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FirmwareUpdateErrors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001262E8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FirmwareUpdateErrors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 247;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100126480(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100126488(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateErrors()
{
  return &type metadata for FirmwareUpdateErrors;
}

char *sub_1001264A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *updated;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  id v29;
  NSString v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000015, 0x8000000100200C80);
  v6 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)UARPController), "init");
  v7 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories;
  *(_QWORD *)&v5[v7] = sub_1001B20F4((uint64_t)_swiftEmptyArrayStorage);
  v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions;
  *(_QWORD *)&v5[v8] = sub_1001B21FC((uint64_t)_swiftEmptyArrayStorage);
  v9 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v10 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v11 = swift_allocObject(v10, 20, 7);
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)&v5[v9] = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_FWUPDATE_IDLE_TIMEOUT] = 0x404E000000000000;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = 0;

  updated = (objc_class *)type metadata accessor for AccessoryFirmwareUpdateManager(0);
  v38.receiver = v5;
  v38.super_class = updated;
  v13 = (char *)objc_msgSendSuper2(&v38, "init");
  v14 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController;
  v15 = *(void **)&v13[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController];
  v16 = v13;
  objc_msgSend(v15, "setDelegate:", v16);
  v17 = sub_10012BEEC(0x706163702ELL, (void *)0xE500000000000000);
  if (v18)
  {
    v19 = v18;
    v20 = v17;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v16[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v1);
    v21 = swift_bridgeObjectRetain_n(v19, 2);
    v35 = v4;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v34 = v14;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v33 = v2;
      v27 = v26;
      v37 = v26;
      v32 = v1;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(v19);
      v36 = sub_1000906BC(v20, v19, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Starting packet capture to %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v28 = v25;
      v14 = v34;
      swift_slowDealloc(v28, -1, -1);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v35, v1);
    }
    v29 = *(id *)&v13[v14];
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v29, "startPacketCapture:", v30);

  }
  return v16;
}

void sub_100126838(unint64_t a1, char a2, uint64_t a3, NSObject *a4, double a5)
{
  char *v5;
  uint64_t v6;
  void *v11;
  void *v13;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;

  if (a5 == 0.0)
  {
    sub_10012A2B0(a1, a2 & 1, a3, a4);
    if (v6)
      return;
    v11 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer];
    *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = 0;
  }
  else
  {
    v13 = *(void **)(a1 + 40);
    v14 = swift_allocObject(&unk_10023C8C8, 56, 7);
    *(_QWORD *)(v14 + 16) = v5;
    *(_QWORD *)(v14 + 24) = a1;
    *(_BYTE *)(v14 + 32) = a2 & 1;
    *(_QWORD *)(v14 + 40) = a3;
    *(_QWORD *)(v14 + 48) = a4;
    objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
    swift_bridgeObjectRetain(a4);
    v15 = v13;
    v16 = v5;
    swift_retain(a1);
    v17 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v13, sub_10012D180, v14, a5);
    v11 = *(void **)&v16[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer];
    *(_QWORD *)&v16[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = v17;
  }

}

void sub_100126954(uint64_t a1, unint64_t a2, char a3, uint64_t a4, NSObject *a5)
{
  uint64_t v10;
  void *v11;

  v10 = type metadata accessor for Logger(0);
  __chkstk_darwin(v10);
  sub_10012A2B0(a2, a3, a4, a5);
  v11 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer) = 0;

}

_QWORD *sub_100126C4C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v12;
  NSString v13;
  id v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  v12 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(a4);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v14 = objc_msgSend(v12, "initWithString:", v13);

  v15 = objc_msgSend(v14, "UTF8String");
  v16 = v14;
  v17 = sandbox_extension_consume(v15);
  if (v17 == -1)
  {
    v20 = type metadata accessor for Errors(0);
    v21 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v20, v21, 0, 0);
    v15 = v22;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(0xE000000000000000);
    v23._countAndFlagsBits = a3;
    v23._object = a4;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0x20726F6620;
    v24._object = (void *)0xE500000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = a1;
    v25._object = a2;
    String.append(_:)(v25);
    *v15 = 0xD00000000000001CLL;
    v15[1] = 0x8000000100200C60;
    v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v15, enum case for Errors.FailedToConsumeExtensionForLocalAsset(_:), v20);
    goto LABEL_5;
  }
  v18 = v17;
  v19 = sub_10012B694(a1, (uint64_t)a2, a5, a6);
  if (v6)
  {
LABEL_5:
    swift_willThrow(v19);
    return v15;
  }
  v15 = v19;
  sandbox_extension_release(v18);
  return v15;
}

void sub_100126E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint8_t *v34;
  NSObject *v35;
  NSObject *v36;
  _QWORD *v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint8_t *v52;
  uint64_t v53;
  _BYTE v54[24];
  unint64_t v55;
  unint64_t v56[4];
  char v57[24];
  uint64_t v58;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v51 - v10;
  v12 = sub_10012AD64(a2);
  if (v12)
  {
    v13 = v12;
    v53 = v6;
    v58 = v5;
    v14 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(v15);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    v16 = objc_msgSend(v13, "uuid");
    v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v57, 0, 0);
    v18 = *v17;
    swift_bridgeObjectRetain(*v17);
    v19 = (char *)sub_100177CC8(v16, v18);

    swift_bridgeObjectRelease(v18);
    v20 = *(os_unfair_lock_s **)(v2 + v14);
    swift_retain(v20);
    os_unfair_lock_unlock(v20 + 4);
    swift_release(v20);
    if (v19)
    {
      sub_10009AFF4(a1, (uint64_t)&v55);
      v21 = (uint64_t)&v19[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
      swift_beginAccess(&v19[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback], v54, 33, 0);
      sub_10012D104((uint64_t)&v55, v21);
      swift_endAccess(v54);

    }
    else
    {
      v29 = v53;
      v30 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v58);
      v31 = v13;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, (os_log_type_t)v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = (_QWORD *)swift_slowAlloc(8, -1);
        v52 = v34;
        *(_DWORD *)v34 = 138412290;
        v55 = (unint64_t)v31;
        v35 = v31;
        v36 = v31;
        v29 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v34 + 4, v34 + 12);
        v37 = v51;
        *v51 = v13;

        v31 = v35;
        v30 = v58;
        v38 = v52;
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v33, "Failed fetching UARP session for %@", v52, 0xCu);
        v39 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {

        v32 = v31;
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
      v55 = 0;
      v56[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(v56[0]);
      v55 = 0xD000000000000014;
      v56[0] = 0x8000000100200C40;
      v40 = -[NSObject description](v31, "description");
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v44._countAndFlagsBits = v41;
      v44._object = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v43);
      v45 = v55;
      v46 = v56[0];
      v47 = sub_10009B608();
      v48 = v31;
      v49 = swift_allocError(&type metadata for FirmwareUpdateErrors, v47, 0, 0);
      *(_QWORD *)v50 = v45;
      *(_QWORD *)(v50 + 8) = v46;
      *(_BYTE *)(v50 + 16) = 2;
      swift_willThrow(v49);

    }
  }
  else
  {
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed fetching UARP accessory", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v26 = sub_10009B608();
    v27 = swift_allocError(&type metadata for FirmwareUpdateErrors, v26, 0, 0);
    *(_QWORD *)v28 = 0xD000000000000011;
    *(_QWORD *)(v28 + 8) = 0x8000000100200C20;
    *(_BYTE *)(v28 + 16) = 1;
    swift_willThrow(v27);
  }
}

void sub_100127304(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint8_t *v33;
  NSObject *v34;
  NSObject *v35;
  _QWORD *v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54[24];
  uint64_t v55;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v49 - v10;
  v12 = sub_10012AD64(a1);
  if (v12)
  {
    v13 = v12;
    v51 = v6;
    v55 = v5;
    v14 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(v15);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    v16 = objc_msgSend(v13, "uuid");
    v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v54, 0, 0);
    v18 = *v17;
    swift_bridgeObjectRetain(*v17);
    v19 = sub_100177CC8(v16, v18);

    swift_bridgeObjectRelease(v18);
    v20 = *(os_unfair_lock_s **)(v2 + v14);
    swift_retain(v20);
    os_unfair_lock_unlock(v20 + 4);
    swift_release(v20);
    if (v19)
    {
      sub_1000B1AB4(a2);

    }
    else
    {
      v28 = v51;
      v29 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v55);
      v30 = v13;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, (os_log_type_t)v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = (_QWORD *)swift_slowAlloc(8, -1);
        v50 = v33;
        *(_DWORD *)v33 = 138412290;
        v52 = (unint64_t)v30;
        v34 = v30;
        v35 = v30;
        v28 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 4, v33 + 12);
        v36 = v49;
        *v49 = v13;

        v30 = v34;
        v29 = v55;
        v37 = v50;
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "Failed fetching UARP session for %@", v50, 0xCu);
        v38 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v36, 1, v38);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {

        v31 = v30;
      }

      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
      v52 = 0;
      v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(v53);
      v52 = 0xD000000000000014;
      v53 = 0x8000000100200C40;
      v39 = -[NSObject description](v30, "description");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v43._countAndFlagsBits = v40;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v42);
      v44 = v52;
      v45 = v53;
      v46 = sub_10009B608();
      v47 = swift_allocError(&type metadata for FirmwareUpdateErrors, v46, 0, 0);
      *(_QWORD *)v48 = v44;
      *(_QWORD *)(v48 + 8) = v45;
      *(_BYTE *)(v48 + 16) = 2;
      swift_willThrow(v47);

    }
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed fetching UARP accessory", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v25 = sub_10009B608();
    v26 = swift_allocError(&type metadata for FirmwareUpdateErrors, v25, 0, 0);
    *(_QWORD *)v27 = 0xD000000000000011;
    *(_QWORD *)(v27 + 8) = 0x8000000100200C20;
    *(_BYTE *)(v27 + 16) = 1;
    swift_willThrow(v26);
  }
}

void sub_100127794(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  os_unfair_lock_s *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _DWORD *v34;
  NSObject *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _QWORD *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  char v54[24];
  uint64_t v55;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v49 - v11;
  v13 = sub_10012AD64(a1);
  if (v13)
  {
    v14 = v13;
    v51 = a2;
    v55 = v3;
    v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v16 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(v16);
    os_unfair_lock_lock(v16 + 4);
    swift_release(v16);
    v17 = objc_msgSend(v14, "uuid");
    v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v54, 0, 0);
    v19 = *v18;
    swift_bridgeObjectRetain(*v18);
    v20 = (char *)sub_100177CC8(v17, v19);

    swift_bridgeObjectRelease(v19);
    v21 = *(os_unfair_lock_s **)(v2 + v15);
    swift_retain(v21);
    os_unfair_lock_unlock(v21 + 4);
    swift_release(v21);
    if (v20)
    {
      v22 = *(id *)&v20[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile];
      sub_10011741C(v51);

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
      v30 = v14;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter();
      v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        LODWORD(v55) = v33;
        v34 = (_DWORD *)swift_slowAlloc(12, -1);
        v50 = (_QWORD *)swift_slowAlloc(8, -1);
        v51 = v34;
        v52 = (unint64_t)v30;
        *v34 = 138412290;
        v49 = v34 + 1;
        v35 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v49, v34 + 3);
        v36 = v50;
        *v50 = v14;

        v37 = v51;
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v55, "Failed fetching UARP session for %@", (uint8_t *)v51, 0xCu);
        v38 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v36, 1, v38);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {

        v31 = v30;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      v52 = 0;
      v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(v53);
      v52 = 0xD000000000000014;
      v53 = 0x8000000100200C40;
      v39 = -[NSObject description](v30, "description");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v43._countAndFlagsBits = v40;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v42);
      v44 = v52;
      v45 = v53;
      v46 = sub_10009B608();
      v47 = swift_allocError(&type metadata for FirmwareUpdateErrors, v46, 0, 0);
      *(_QWORD *)v48 = v44;
      *(_QWORD *)(v48 + 8) = v45;
      *(_BYTE *)(v48 + 16) = 2;
      swift_willThrow(v47);

    }
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed fetching UARP accessory", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v27 = sub_10009B608();
    v28 = swift_allocError(&type metadata for FirmwareUpdateErrors, v27, 0, 0);
    *(_QWORD *)v29 = 0xD000000000000011;
    *(_QWORD *)(v29 + 8) = 0x8000000100200C20;
    *(_BYTE *)(v29 + 16) = 1;
    swift_willThrow(v28);
  }
}

uint64_t sub_100127C2C(id a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  unsigned int v40;
  void (*v41)(char *, uint64_t, uint64_t);
  id v42;
  id v43;
  NSObject *v44;
  id v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSString v55;
  NSObject *v56;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  _BOOL4 v71;
  uint64_t v72;
  uint8_t *v73;
  _QWORD *v74;
  NSObject *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  os_unfair_lock_s *v79;
  char *v80;
  id v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  os_unfair_lock_s *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint8_t *v91;
  int v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  NSObject *v95;
  _BYTE *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  _BYTE v102[16];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v89 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v89 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v89 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v89 - v20;
  if (objc_msgSend(a2, "downloadStatus") == (id)2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    v22 = a2;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(8, -1);
      v100 = v6;
      *(_DWORD *)v25 = 138412290;
      v101 = v22;
      v26 = v7;
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v25 + 4, v25 + 12);
      v28 = v99;
      *(_QWORD *)v99 = v22;

      v7 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Download failed for %@", v25, 0xCu);
      v29 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v28, 1, v29);
      v6 = v100;
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  sub_10012B2B0(a1);
  if (!v30)
    goto LABEL_16;
  v98 = a1;
  v99 = v7;
  v31 = v30;
  sub_1000E2288();
  if (!v32)
  {
    swift_release(v31);
    a1 = v98;
    v7 = v99;
LABEL_16:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    v58 = a1;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(8, -1);
      v100 = v6;
      *(_DWORD *)v61 = 138412290;
      v101 = v58;
      v62 = v7;
      v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v61 + 4, v61 + 12);
      v64 = v99;
      *(_QWORD *)v99 = v58;

      v7 = v62;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "error retreiving dockaccessory for uarp accessory %@", v61, 0xCu);
      v65 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v64, 1, v65);
      v6 = v100;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {

      v59 = v58;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  v33 = v32;
  v97 = v31;
  v100 = v6;
  v34 = objc_msgSend(a2, "assetVersion");
  v35 = v34;
  v96 = v10;
  if (v34)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    v38 = objc_allocWithZone((Class)HMFSoftwareVersion);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    v35 = objc_msgSend(v38, "initWithVersionString:", v39);

  }
  v40 = objc_msgSend(v33, "isAtLeastVersion:", v35);

  v41 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  if (v40)
  {
    v41(v21, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v100);
    v42 = v33;
    v43 = a2;
    v44 = v42;
    v45 = v43;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      LODWORD(v98) = v47;
      v48 = swift_slowAlloc(22, -1);
      v49 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v48 = 138412546;
      v101 = v44;
      v44 = v44;
      v96 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v48 + 4, v48 + 12);
      *v49 = v33;

      *(_WORD *)(v48 + 12) = 2112;
      v50 = objc_msgSend(v45, "assetVersion");
      if (!v50)
        goto LABEL_27;
      v51 = v50;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v54 = objc_allocWithZone((Class)HMFSoftwareVersion);
      v55 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
      v56 = objc_msgSend(v54, "initWithVersionString:", v55);

      if (v56)
      {
        v101 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v48 + 14, v48 + 22);
      }
      else
      {
LABEL_27:
        v101 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v96, v48 + 14, v48 + 22);
        v56 = 0;
      }
      v86 = v98;
      v49[1] = v56;

      _os_log_impl((void *)&_mh_execute_header, v46, v86, "Current FW version %@ if greater than or equal to new version %@", (uint8_t *)v48, 0x16u);
      v87 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v49, 2, v87);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {

      v46 = v44;
    }
    v88 = v100;

    swift_release(v97);
    return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v21, v88);
  }
  else
  {
    v93 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
    v94 = v41;
    v66 = v100;
    ((void (*)(char *))v41)(v19);
    v67 = v33;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    v70 = v69;
    v71 = os_log_type_enabled(v68, v69);
    v95 = v67;
    if (v71)
    {
      v72 = swift_slowAlloc(12, -1);
      v92 = v70;
      v73 = (uint8_t *)v72;
      v74 = (_QWORD *)swift_slowAlloc(8, -1);
      v91 = v73;
      *(_DWORD *)v73 = 138412290;
      v90 = v73 + 4;
      v101 = v67;
      v75 = v67;
      v66 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v90, v73 + 12);
      *v74 = v33;

      v76 = v91;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v92, "asset version is %@", v91, 0xCu);
      v77 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v74, 1, v77);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {

      v68 = v67;
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v19, v66);
    v78 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v79 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(v79);
    os_unfair_lock_lock(v79 + 4);
    swift_release(v79);
    v80 = (char *)v98;
    v81 = objc_msgSend(v98, "uuid");
    v82 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, &v101, 0, 0);
    v83 = *v82;
    swift_bridgeObjectRetain(*v82);
    v84 = sub_100177CC8(v81, v83);

    swift_bridgeObjectRelease(v83);
    v85 = *(os_unfair_lock_s **)(v3 + v78);
    swift_retain(v85);
    os_unfair_lock_unlock(v85 + 4);
    swift_release(v85);
    if (!v84)
      v84 = sub_10012A9F8(v80);
    objc_msgSend(v84, "assetAvailablityUpdateForAccessoryID:assetID:", v80, a2);

    return swift_release(v97);
  }
}

void sub_100128798(void *a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  os_unfair_lock_s *v17;
  Class isa;
  unsigned int v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject **v26;
  NSObject *v27;
  NSObject **v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  NSObject **v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint8_t *v48;
  NSObject *v49;
  _BYTE v50[24];

  v46 = a2;
  v47 = a3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v48 = (uint8_t *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - v9;
  v11 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v12 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain(v12);
  os_unfair_lock_lock(v12 + 4);
  swift_release(v12);
  v13 = objc_msgSend(a1, "uuid");
  v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v50, 0, 0);
  v15 = *v14;
  swift_bridgeObjectRetain(*v14);
  v16 = sub_100177CC8(v13, v15);

  swift_bridgeObjectRelease(v15);
  v17 = *(os_unfair_lock_s **)(v3 + v11);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  swift_release(v17);
  if (v16)
  {
    v44 = v6;
    v45 = v5;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v49 = 0;
    v19 = objc_msgSend(v16, "sendMessageToAccessory:uarpMsg:error:", a1, isa, &v49);

    v20 = v49;
    if (v19)
    {
      v21 = v49;

    }
    else
    {
      v31 = v49;
      v32 = _convertNSErrorToError(_:)(v20);

      swift_willThrow(v33);
      v35 = v44;
      v34 = v45;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v44 + 16))(v48, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v45);
      swift_errorRetain(v32);
      v36 = swift_errorRetain(v32);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v39 = 138412290;
        swift_errorRetain(v32);
        v41 = _swift_stdlib_bridgeErrorToNSError(v32);
        v49 = v41;
        v35 = v44;
        v34 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v39 + 4, v39 + 12);
        *v40 = v41;
        swift_errorRelease(v32);
        swift_errorRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "sendMessageToAccessory: failed with error %@", v39, 0xCu);
        v42 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v40, 1, v42);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        swift_errorRelease(v32);
      }
      else
      {

        swift_errorRelease(v32);
        swift_errorRelease(v32);
        swift_errorRelease(v32);

      }
      (*(void (**)(uint8_t *, uint64_t))(v35 + 8))(v48, v34);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    v22 = a1;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v45 = v5;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (NSObject **)swift_slowAlloc(8, -1);
      v48 = v25;
      *(_DWORD *)v25 = 138412290;
      v47 = v25 + 4;
      v49 = v22;
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v47, v25 + 12);
      *v26 = v22;
      v28 = v26;

      v5 = v45;
      v29 = v48;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "UARP session not found for %@", v48, 0xCu);
      v30 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
}

void sub_100128D3C(void *a1, uint64_t a2, NSObject **a3, char *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  os_unfair_lock_s *v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject **v23;
  uint64_t v24;
  NSObject **v25;
  char *v26;
  NSObject *v27;
  _BYTE v28[24];

  v25 = a3;
  v26 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v12 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain(v12);
  os_unfair_lock_lock(v12 + 4);
  swift_release(v12);
  v13 = objc_msgSend(a1, "uuid");
  v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v28, 0, 0);
  v15 = *v14;
  swift_bridgeObjectRetain(*v14);
  v16 = sub_100177CC8(v13, v15);

  swift_bridgeObjectRelease(v15);
  v17 = *(os_unfair_lock_s **)(v4 + v11);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  swift_release(v17);
  if (v16)
  {
    objc_msgSend(v16, "firmwareStagingProgress:assetID:bytesSent:bytesTotal:", a1, a2, v25, v26);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v7);
    v18 = a1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v26 = v10;
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v27 = v18;
      v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v21 + 4, v21 + 12);
      v23 = v25;
      *v25 = v18;

      v10 = v26;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "UARP session not found for %@", v21, 0xCu);
      v24 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

      v19 = v18;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void sub_100129060(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  os_unfair_lock_s *v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject **v21;
  NSObject *v22;
  NSObject **v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  NSObject *v28;
  _BYTE v29[24];

  v27 = a3;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v11 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain(v11);
  os_unfair_lock_lock(v11 + 4);
  swift_release(v11);
  v12 = objc_msgSend(a1, "uuid");
  v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v29, 0, 0);
  v14 = *v13;
  swift_bridgeObjectRetain(*v13);
  v15 = sub_100177CC8(v12, v14);

  swift_bridgeObjectRelease(v14);
  v16 = *(os_unfair_lock_s **)(v3 + v10);
  swift_retain(v16);
  os_unfair_lock_unlock(v16 + 4);
  swift_release(v16);
  if (v15)
  {
    objc_msgSend(v15, "firmwareStagingComplete:assetID:withStatus:", a1, a2, v27);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    v17 = a1;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v27 = v6;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (NSObject **)swift_slowAlloc(8, -1);
      v26 = v20;
      *(_DWORD *)v20 = 138412290;
      v28 = v17;
      v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v20 + 4, v20 + 12);
      v23 = v21;
      *v21 = v17;

      v24 = v26;
      v6 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "UARP session not found for %@", v26, 0xCu);
      v25 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

void sub_100129380(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  os_unfair_lock_s *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject **v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject **v26;
  uint8_t *v27;
  NSObject *v28;
  _BYTE v29[24];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v11 = objc_msgSend(a1, "uuid");
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v29, 0, 0);
  v13 = *v12;
  swift_bridgeObjectRetain(*v12);
  v14 = sub_100177CC8(v11, v13);

  swift_bridgeObjectRelease(v13);
  v15 = *(os_unfair_lock_s **)(v2 + v9);
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  if (v14)
  {
    objc_msgSend(v14, "stagedFirmwareApplicationComplete:withStatus:", a1, a2);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    v16 = a1;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (NSObject **)swift_slowAlloc(8, -1);
      v27 = v19;
      v28 = v16;
      *(_DWORD *)v19 = 138412290;
      v20 = v19 + 12;
      v21 = v19 + 4;
      v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v21, v20);
      v23 = v26;
      *v26 = v16;

      v24 = v27;
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "UARP session not found for %@", v27, 0xCu);
      v25 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {

      v17 = v16;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_100129670(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  id v6;
  void *v7;
  os_unfair_lock_s *v8;
  _BYTE v10[24];

  v2 = v1;
  v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = objc_msgSend(a1, "uuid");
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v10, 33, 0);
  v7 = (void *)sub_1001B3CDC((unint64_t)v6);
  swift_endAccess(v10);

  v8 = *(os_unfair_lock_s **)(v2 + v4);
  swift_retain(v8);
  os_unfair_lock_unlock(v8 + 4);
  return swift_release(v8);
}

uint64_t sub_100129748(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  char *v30;
  uint8_t *v31;
  NSObject **v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSURL *v54;
  void *v55;
  void *v56;
  NSObject *v57;
  uint64_t v58;
  char *v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  os_log_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  NSObject *v80;
  NSObject *v81;
  os_log_type_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  os_log_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  id v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  _BYTE v110[32];

  v4 = v3;
  v104 = a2;
  v105 = a3;
  v6 = sub_10009061C(&qword_10026BF70);
  v7 = __chkstk_darwin(v6);
  v103 = (void (*)(char *, uint64_t, uint64_t))((char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v10 = (char *)&v94 - v9;
  v107 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v107 - 8);
  v12 = __chkstk_darwin(v107);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v94 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v94 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v94 - v21;
  v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories, v110, 0, 0);
  v24 = *v23;
  swift_retain(a1);
  swift_bridgeObjectRetain(v24);
  v25 = sub_100177BE4(a1, v24);
  v106 = a1;
  swift_release(a1);
  swift_bridgeObjectRelease(v24);
  if (v25)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v22, v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v107);
    v26 = swift_retain_n(v106, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    v29 = v11;
    v30 = v22;
    if (os_log_type_enabled(v27, v28))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 138412290;
      v33 = v106;
      v104 = v11;
      v34 = *(NSObject **)(v106 + 24);
      v109 = v34;
      v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 4, v31 + 12);
      *v32 = v34;
      v29 = v104;
      swift_release_n(v33, 2);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Accessory %@ is already registered", v31, 0xCu);
      v36 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v32, 1, v36);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_release_n(v106, 2);
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v107);
    return 1;
  }
  else
  {
    v37 = v14;
    v38 = (uint64_t)v103;
    v39 = v104;
    v40 = (unint64_t)v105;
    v98 = v17;
    v99 = v20;
    v101 = v10;
    v41 = sub_10012AD64(v106);
    v102 = v4;
    v100 = v41;
    if (v41)
    {
      v42 = v40;
      if (v40)
      {
        v43 = swift_bridgeObjectRetain(v40);
        v44 = (uint64_t)v101;
        URL.init(string:)(v39, v40, v43);
        swift_bridgeObjectRelease(v40);
        v45 = type metadata accessor for URL(0);
        v46 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45) == 1;
      }
      else
      {
        v45 = type metadata accessor for URL(0);
        v46 = 1;
        v44 = (uint64_t)v101;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v101, 1, 1, v45);
      }
      v52 = v11;
      sub_1000ACE4C(v44, v38, &qword_10026BF70);
      type metadata accessor for URL(0);
      v53 = *(_QWORD *)(v45 - 8);
      v55 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v38, 1, v45) != 1)
      {
        URL._bridgeToObjectiveC()(v54);
        v55 = v56;
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v38, v45);
      }
      v57 = objc_msgSend(objc_allocWithZone((Class)UARPAssetID), "initWithLocationType:remoteURL:", v46, v55);

      v58 = v102 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
      v59 = v99;
      v103 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
      v103(v99, v102 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v107);
      swift_bridgeObjectRetain_n(v42, 2);
      v60 = v100;
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.default.getter();
      v63 = v62;
      if (os_log_type_enabled(v61, v62))
      {
        v64 = swift_slowAlloc(22, -1);
        v95 = v63;
        v65 = v64;
        v66 = (_QWORD *)swift_slowAlloc(8, -1);
        v96 = swift_slowAlloc(32, -1);
        v108 = (uint64_t)v60;
        v109 = v96;
        *(_DWORD *)v65 = 138412546;
        v94 = v61;
        v104 = v52;
        v67 = v60;
        v97 = v58;
        v68 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v65 + 4, v65 + 12);
        *v66 = v100;

        *(_WORD *)(v65 + 12) = 2080;
        if (v42)
          v69 = v39;
        else
          v69 = 7104878;
        if (v42)
          v70 = v42;
        else
          v70 = 0xE300000000000000;
        swift_bridgeObjectRetain(v42);
        v108 = sub_1000906BC(v69, v70, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v65 + 14, v65 + 22);
        v71 = v42;
        v72 = v60;
        swift_bridgeObjectRelease_n(v71, 2);
        v73 = v70;
        v58 = v97;
        swift_bridgeObjectRelease(v73);
        v74 = v94;
        _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "registering accessory %@, filepath is %s", (uint8_t *)v65, 0x16u);
        v75 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v66, 1, v75);
        swift_slowDealloc(v66, -1, -1);
        v76 = v96;
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v65, -1, -1);

        v77 = *(void (**)(char *, uint64_t))(v104 + 8);
        v77(v99, v107);
      }
      else
      {

        swift_bridgeObjectRelease_n(v42, 2);
        v72 = v60;

        v77 = *(void (**)(char *, uint64_t))(v52 + 8);
        v77(v59, v107);
      }
      v78 = (uint64_t)v101;
      v79 = v98;
      if ((objc_msgSend(*(id *)(v102+ OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController), "addAccessory:assetID:", v72, v57) & 1) != 0)
      {

        sub_10009B2C0(v78, &qword_10026BF70);
        return 1;
      }
      v103(v79, v58, v107);
      swift_retain_n(v106, 2);
      v80 = v72;
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter();
      v83 = v82;
      if (os_log_type_enabled(v81, v82))
      {
        v84 = swift_slowAlloc(22, -1);
        LODWORD(v104) = v83;
        v85 = v84;
        v86 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v85 = 138412546;
        v105 = v57;
        v109 = v80;
        v80 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v85 + 4, v85 + 12);
        *v86 = v100;

        *(_WORD *)(v85 + 12) = 2112;
        v87 = v106;
        v88 = v77;
        v89 = *(NSObject **)(v106 + 24);
        v109 = v89;
        v90 = v89;
        v78 = (uint64_t)v101;
        v91 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v85 + 14, v85 + 22);
        v86[1] = v89;
        v77 = v88;
        v92 = v87;
        v79 = v98;
        swift_release_n(v92, 2);
        _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v104, "Failed to register uarp accessory %@ for dock accessory %@", (uint8_t *)v85, 0x16u);
        v93 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v86, 2, v93);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);
      }
      else
      {

        swift_release_n(v106, 2);
        v91 = v80;
        v81 = v80;
      }

      v77(v79, v107);
      sub_10009B2C0(v78, &qword_10026BF70);
    }
    else
    {
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v37, v102 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v107);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Error retreiving uarp accessory", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v107);
    }
    return 0;
  }
}

void sub_10012A06C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  void *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  os_unfair_lock_s *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v22[24];
  _BYTE v23[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10012AD64(a1);
  if (v8)
  {
    v9 = v8;
    v10 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v11 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock));
    os_unfair_lock_lock(v11 + 4);
    swift_release(v11);
    v12 = objc_msgSend(v9, "uuid");
    v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v23, 0, 0);
    v14 = *v13;
    swift_bridgeObjectRetain(*v13);
    v15 = sub_100177CC8(v12, v14);

    swift_bridgeObjectRelease(v14);
    v16 = *(os_unfair_lock_s **)(v2 + v10);
    swift_retain(v16);
    os_unfair_lock_unlock(v16 + 4);
    swift_release(v16);
    if (v15)
    {
      sub_1000B167C();

    }
    sub_100129670(v9);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories, v22, 33, 0);
    v17 = (void *)sub_1001B3B7C(a1);
    swift_endAccess(v22);

    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController), "removeAccessory:", v9);
  }
  else
  {
    v18 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error retreiving uarp accessory", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_10012A2B0(unint64_t a1, char a2, uint64_t a3, NSObject *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  os_unfair_lock_s *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint8_t *v37;
  char *v38;
  uint8_t *v39;
  void *v40;
  id v41;
  uint8_t *v42;
  _QWORD *v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  char *v55;
  void *v56;
  id v57;
  uint8_t *v58;
  uint8_t *v59;
  _QWORD *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76[24];
  char v77[24];
  void *v78;
  uint64_t v79;

  v5 = v4;
  v10 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v74 - 8);
  v14 = __chkstk_darwin(v74);
  v73 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v68 - v16;
  if ((a2 & 1) != 0)
  {
    sub_10012A06C(a1);
    if ((sub_100129748(a1, a3, a4) & 1) == 0)
    {
      v46 = sub_10009B608();
      v47 = swift_allocError(&type metadata for FirmwareUpdateErrors, v46, 0, 0);
      *(_QWORD *)v48 = 0xD00000000000002BLL;
      *(_QWORD *)(v48 + 8) = 0x8000000100200BF0;
      *(_BYTE *)(v48 + 16) = 0;
      swift_willThrow(v47);
      return;
    }
  }
  v72 = v13;
  v18 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories, v77, 0, 0);
  v19 = *v18;
  swift_retain(a1);
  swift_bridgeObjectRetain(v19);
  v20 = (char *)sub_100177BE4(a1, v19);
  swift_release(a1);
  swift_bridgeObjectRelease(v19);
  if (v20)
  {
    v71 = v12;
    v21 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    v22 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain(v22);
    os_unfair_lock_lock(v22 + 4);
    swift_release(v22);
    v23 = objc_msgSend(v20, "uuid");
    v24 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions, v76, 0, 0);
    v25 = *v24;
    swift_bridgeObjectRetain(v25);
    v26 = (char *)sub_100177CC8(v23, v25);

    swift_bridgeObjectRelease(v25);
    v27 = *(os_unfair_lock_s **)(v5 + v21);
    swift_retain(v27);
    os_unfair_lock_unlock(v27 + 4);
    swift_release(v27);
    if (v26)
    {
      v28 = v20;
    }
    else
    {
      v49 = v75;
      v50 = sub_10012A9F8(v20);
      v28 = v20;
      if (v49)
      {
        swift_willThrow(v50);

        return;
      }
      v26 = v50;
      v75 = 0;
    }
    v29 = v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
    v30 = v72;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    if ((a2 & 1) != 0)
    {
      v31(v17, v29, v74);
      v32 = swift_retain_n(a1, 2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = (_QWORD *)swift_slowAlloc(8, -1);
        v36 = v35;
        v70 = v35;
        *(_DWORD *)v35 = 138412290;
        v37 = v35 + 12;
        v38 = v28;
        v39 = v36 + 4;
        v73 = v26;
        v40 = *(void **)(a1 + 24);
        v78 = v40;
        v41 = v40;
        v42 = v39;
        v28 = v38;
        v30 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v42, v37);
        v43 = v69;
        *v69 = v40;
        v26 = v73;
        swift_release_n(a1, 2);
        v44 = v70;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Marking accessory reachable: %@", v70, 0xCu);
        v45 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v43, 1, v45);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v44, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      v64 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v74);
      v65 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
      v66 = (_QWORD *)swift_allocObject(&unk_10023C8A0, 40, 7);
      v66[2] = 0;
      v66[3] = 0;
      v66[4] = v26;
      v67 = sub_10018A990(v64, (uint64_t)&unk_10026E898, (uint64_t)v66);

      swift_release(v67);
    }
    else
    {
      v31(v73, v29, v74);
      v51 = swift_retain_n(a1, 2);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = (_QWORD *)swift_slowAlloc(8, -1);
        v70 = v54;
        v71 = v28;
        *(_DWORD *)v54 = 138412290;
        v55 = v26;
        v56 = *(void **)(a1 + 24);
        v78 = v56;
        v57 = v56;
        v58 = v54 + 4;
        v59 = v54 + 12;
        v28 = v71;
        v30 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v58, v59);
        v60 = v69;
        *v69 = v56;
        v26 = v55;
        swift_release_n(a1, 2);
        v61 = v53;
        v62 = v70;
        _os_log_impl((void *)&_mh_execute_header, v52, v61, "Marking accessory un-reachable: %@", v70, 0xCu);
        v63 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v60, 1, v63);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v73, v74);
      sub_10012A06C(a1);

    }
  }
}

uint64_t sub_10012A8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  return swift_task_switch(sub_10012A8B8, 0, 0);
}

uint64_t sub_10012A8B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[15] + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess(v1, v0 + 12, 0, 0);
  sub_1000ACE4C(v1, (uint64_t)(v0 + 2), (uint64_t *)&unk_10026C7D0);
  if (v0[5])
  {
    sub_10009AFF4((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    sub_10009B2C0((uint64_t)(v0 + 2), (uint64_t *)&unk_10026C7D0);
    v2 = v0[10];
    v3 = v0[11];
    sub_10009B038(v0 + 7, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, v2, v3);
    sub_100090E88(v0 + 7);
  }
  else
  {
    sub_10009B2C0((uint64_t)(v0 + 2), (uint64_t *)&unk_10026C7D0);
  }
  v4 = (_QWORD *)swift_task_alloc(dword_10026C73C);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_10012A9B0;
  return sub_1000B211C();
}

uint64_t sub_10012A9B0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *sub_10012A9F8(char *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;
  char *v19;
  char *v20;
  os_unfair_lock_s *v21;
  id v22;
  os_unfair_lock_s *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  void *v31;
  Swift::String v32;
  _QWORD v33[3];
  char v34[24];

  v2 = v1;
  v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  v5 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock];
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = objc_msgSend(a1, "uuid");
  v7 = (uint64_t *)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions];
  swift_beginAccess(&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions], v34, 0, 0);
  v8 = *v7;
  swift_bridgeObjectRetain(*v7);
  v9 = sub_100177CC8(v6, v8);

  swift_bridgeObjectRelease(v8);
  v10 = *(os_unfair_lock_s **)&v2[v4];
  swift_retain(v10);
  os_unfair_lock_unlock(v10 + 4);
  swift_release(v10);
  if (v9)
  {

    v11 = type metadata accessor for Errors(0);
    v12 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v11, v12, 0, 0);
    *v13 = 0xD00000000000001BLL;
    v13[1] = 0x8000000100200BD0;
    v14 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v13, enum case for Errors.AlreadyDone(_:), v11);
  }
  else
  {
    sub_10012B2B0(a1);
    if (v15)
    {
      v16 = v15;
      v17 = objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateSession(0));
      v18 = a1;
      v19 = v2;
      v20 = sub_1000B8994(v16, v18, v19);

      v21 = *(os_unfair_lock_s **)&v2[v4];
      swift_retain(v21);
      os_unfair_lock_lock(v21 + 4);
      swift_release(v21);
      v22 = objc_msgSend(v18, "uuid");
      swift_beginAccess(v7, v33, 33, 0);
      a1 = v20;
      sub_10012CB30((uint64_t)a1, (uint64_t)v22, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001BAC80, sub_10012CE40);
      swift_endAccess(v33);

      v23 = *(os_unfair_lock_s **)&v2[v4];
      swift_retain(v23);
      os_unfair_lock_unlock(v23 + 4);
      swift_release(v16);
      swift_release(v23);
      return a1;
    }
    v25 = type metadata accessor for Errors(0);
    v26 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v25, v26, 0, 0);
    v28 = v27;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v33[0] = 0xD00000000000002FLL;
    v33[1] = 0x8000000100200BA0;
    v29 = objc_msgSend(a1, "description");
    a1 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v31 = v30;

    v32._countAndFlagsBits = (uint64_t)a1;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    *v28 = 0xD00000000000002FLL;
    v28[1] = 0x8000000100200BA0;
    v14 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v28, enum case for Errors.NotFound(_:), v25);
  }
  swift_willThrow(v14);
  return a1;
}

id sub_10012AD64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char *v23;
  id v24;
  NSString v25;
  NSString v26;
  Class isa;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  _BYTE v61[16];
  char v62[24];

  v58 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v58 - 8);
  v3 = __chkstk_darwin(v58);
  v57 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v52 - v5;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v1;
  v11 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories, v62, 0, 0);
  v12 = *v11;
  swift_retain(a1);
  swift_bridgeObjectRetain(v12);
  v13 = sub_100177BE4(a1, v12);
  v14 = a1;
  swift_release(a1);
  swift_bridgeObjectRelease(v12);
  if (!v13)
  {
    v15 = v10;
    v54 = v11;
    v55 = v7;
    v53 = v6;
    v16 = v57;
    v17 = v58;
    v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber + 8);
      if (v19)
      {
        v20 = v8;
        v21 = *(void **)(v14 + 24);
        swift_bridgeObjectRetain(*(_QWORD *)(v14 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8));
        swift_bridgeObjectRetain(v19);
        v22 = v21;
        v23 = v15;
        DockCoreInfo.identifier.getter(v22);

        v24 = objc_allocWithZone((Class)UARPAccessory);
        v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v18);
        v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v19);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v28 = objc_msgSend(v24, "initWithProductGroup:productNumber:uuid:", v25, v26, isa);

        (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v55);
        swift_beginAccess(v54, &v60, 33, 0);
        swift_retain(v14);
        v13 = v28;
        sub_10012CB30((uint64_t)v13, v14, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001BAB30, sub_10012CBE0);
        swift_endAccess(&v60);
        swift_release(v14);
        return v13;
      }
      v39 = v56;
      v40 = v53;
      v41 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v53, (uint64_t)v59 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v58);
      v42 = swift_retain_n(v14, 2);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v45 = 138412290;
        v47 = *(void **)(v14 + 24);
        v60 = v47;
        v48 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v45 + 4, v45 + 12);
        *v46 = v47;
        v41 = v17;
        swift_release_n(v14, 2);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Error reading product number for accessory %@, PN is nil", v45, 0xCu);
        v49 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v46, 1, v49);
        v39 = v56;
        swift_slowDealloc(v46, -1, -1);
        v50 = v45;
        v40 = v53;
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

        swift_release_n(v14, 2);
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    }
    else
    {
      v29 = v56;
      v30 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v57, (uint64_t)v59 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v58);
      v31 = swift_retain_n(v14, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v34 = 138412290;
        v35 = *(void **)(v14 + 24);
        v60 = v35;
        v36 = v35;
        v29 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v34 + 4, v34 + 12);
        v37 = v59;
        *v59 = v35;
        v30 = v17;
        swift_release_n(v14, 2);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error reading product group for accessory %@, PG is nil", v34, 0xCu);
        v38 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v37, 1, v38);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

        swift_release_n(v14, 2);
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
    }
    return 0;
  }
  return v13;
}

void sub_10012B2B0(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  id v35;
  char v36;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42[24];

  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories, v42, 0, 0);
  v3 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v2;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    v39 = 0;
    v5 = 0;
    v6 = 0;
    v7 = __CocoaDictionary.makeIterator()(v4) | 0x8000000000000000;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v5 = ~v8;
    v39 = v3 + 64;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(v3 + 64);
    v7 = *v2;
  }
  v12 = swift_bridgeObjectRetain(v3);
  v13 = 0;
  v38 = (unint64_t)(v5 + 64) >> 6;
  while (1)
  {
    v14 = v13;
    if ((v7 & 0x8000000000000000) == 0)
      break;
    v17 = __CocoaDictionary.Iterator.nextKey()(v11, v12);
    if (!v17)
      goto LABEL_49;
    v18 = v17;
    v40 = v17;
    v19 = type metadata accessor for DaemonAccessory(0);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v41;
    swift_unknownObjectRelease(v18);
    if (!v20)
      goto LABEL_49;
LABEL_38:
    v24 = *v2;
    if ((*v2 & 0xC000000000000001) != 0)
    {
      if (v24 < 0)
        v25 = *v2;
      else
        v25 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v2);
      v26 = swift_retain(v20);
      v27 = __CocoaDictionary.lookup(_:)(v26, v25);
      if (!v27)
      {
LABEL_11:
        swift_release(v20);
        swift_bridgeObjectRelease(v24);
        goto LABEL_12;
      }
      v28 = v27;
      v40 = v27;
      v29 = sub_100090EE8(0, (unint64_t *)&qword_10026C7E0, UARPAccessory_ptr);
      swift_unknownObjectRetain(v28);
      swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v29, 7);
      v30 = v41;
      swift_unknownObjectRelease(v28);
    }
    else
    {
      if (!*(_QWORD *)(v24 + 16))
        goto LABEL_12;
      swift_bridgeObjectRetain(*v2);
      v31 = swift_retain(v20);
      v32 = sub_100145484(v31);
      if ((v33 & 1) == 0)
        goto LABEL_11;
      v30 = *(id *)(*(_QWORD *)(v24 + 56) + 8 * v32);
    }
    swift_release(v20);
    swift_bridgeObjectRelease(v24);
    if (v30)
    {
      sub_100090EE8(0, (unint64_t *)&qword_10026C7E0, UARPAccessory_ptr);
      v34 = a1;
      v35 = v30;
      v36 = static NSObject.== infix(_:_:)(v35, v34);

      if ((v36 & 1) != 0)
        goto LABEL_49;
    }
LABEL_12:
    v11 = swift_release(v20);
  }
  if (v6)
  {
    v15 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v16 = v15 | (v13 << 6);
LABEL_37:
    v20 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v16);
    swift_retain(v20);
    if (!v20)
      goto LABEL_49;
    goto LABEL_38;
  }
  v21 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v21 >= v38)
      goto LABEL_49;
    v22 = *(_QWORD *)(v39 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v14 + 2;
      if (v14 + 2 >= v38)
        goto LABEL_49;
      v22 = *(_QWORD *)(v39 + 8 * v13);
      if (!v22)
      {
        v13 = v14 + 3;
        if (v14 + 3 >= v38)
          goto LABEL_49;
        v22 = *(_QWORD *)(v39 + 8 * v13);
        if (!v22)
        {
          v13 = v14 + 4;
          if (v14 + 4 >= v38)
            goto LABEL_49;
          v22 = *(_QWORD *)(v39 + 8 * v13);
          if (!v22)
          {
            v13 = v14 + 5;
            if (v14 + 5 >= v38)
              goto LABEL_49;
            v22 = *(_QWORD *)(v39 + 8 * v13);
            if (!v22)
            {
              v13 = v14 + 6;
              if (v14 + 6 >= v38)
                goto LABEL_49;
              v22 = *(_QWORD *)(v39 + 8 * v13);
              if (!v22)
              {
                v23 = v14 + 7;
                while (v38 != v23)
                {
                  v22 = *(_QWORD *)(v39 + 8 * v23++);
                  if (v22)
                  {
                    v13 = v23 - 1;
                    goto LABEL_36;
                  }
                }
LABEL_49:
                sub_1000E6210(v7);
                return;
              }
            }
          }
        }
      }
    }
LABEL_36:
    v6 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v13 << 6);
    goto LABEL_37;
  }
  __break(1u);
}

void *sub_10012B694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  void *object;
  NSString v27;
  uint64_t v28;
  uint64_t inited;
  NSString *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  void *countAndFlagsBits;
  uint8_t *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  NSURL *v45;
  void *v46;
  void *v47;
  _OWORD *v48;
  Class isa;
  id v50;
  Swift::String v51;
  void *v52;
  void *v53;
  NSString v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  NSString v58;
  unsigned int v59;
  id v60;
  id v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  NSString v75;
  void *v76;
  Class v77;
  id v78;
  uint64_t v79;
  uint8_t *v81;
  id v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, _QWORD, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  id v98[2];
  char v99;
  char v100[24];
  id v101;
  uint64_t v102;
  uint64_t v103[3];
  char v104[16];

  v96 = a4;
  v92 = a2;
  v91 = a1;
  v5 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v5);
  v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Logger(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v94 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL.DirectoryHint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v89 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v81 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v81 - v19;
  v22 = objc_msgSend((id)objc_opt_self(NSFileManager, v21), "defaultManager");
  static URL.temporaryDirectory.getter();
  v103[0] = a3;
  v103[1] = v96;
  v86 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v86(v11, enum case for URL.DirectoryHint.isDirectory(_:), v8);
  v23 = sub_1000D4CF4();
  URL.appending<A>(component:directoryHint:)(v103, v11, &type metadata for String, v23);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v87 = v11;
  v88 = v8;
  v24(v11, v8);
  v95 = v13;
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v96 = v12;
  v25(v20, v18, v12);
  v99 = 0;
  object = URL.path(percentEncoded:)(1)._object;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v22, "fileExistsAtPath:isDirectory:", v27, &v99);

  if ((object & 1) == 0)
  {
    v82 = v22;
    v28 = sub_10009061C((uint64_t *)&unk_10026CFF0);
    inited = swift_initStackObject(v28, v104);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
    *(_QWORD *)(inited + 40) = 457;
    v30 = NSFilePosixPermissions;
    v31 = sub_1001B0EBC(inited);
    v32 = v84;
    v33 = v85;
    v34 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v84 + 16))(v94, v83 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v85);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    countAndFlagsBits = &type metadata for Any;
    if (os_log_type_enabled(v35, v36))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v103[0] = v39;
      v83 = v31;
      *(_DWORD *)v38 = 136315138;
      v81 = v38 + 4;
      v40 = swift_beginAccess(v20, v100, 0, 0);
      v41 = URL.path.getter(v40);
      v43 = v42;
      v101 = (id)sub_1000906BC(v41, v42, v103);
      v31 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v81, v38 + 12);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "creating firmware directory ar %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v44 = v38;
      countAndFlagsBits = &type metadata for Any;
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v94, v33);
    swift_beginAccess(v20, v103, 0, 0);
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    v48 = sub_1001A95C4(v31);
    swift_bridgeObjectRelease(v31);
    type metadata accessor for FileAttributeKey(0);
    sub_100090E1C((unint64_t *)&qword_10026C130, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE4CC);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    v101 = 0;
    v22 = v82;
    LODWORD(v48) = objc_msgSend(v82, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v47, 1, isa, &v101);

    v50 = v101;
    if (!(_DWORD)v48)
    {
      v71 = v50;
      _convertNSErrorToError(_:)(v50);

      swift_willThrow(v72);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v20, v96);
      return countAndFlagsBits;
    }
  }
  swift_beginAccess(v20, &v101, 0, 0);
  v51 = URL.path(percentEncoded:)(1);
  v98[0] = (id)0xD000000000000010;
  v98[1] = (id)0x8000000100200B80;
  v97 = v51;
  swift_bridgeObjectRetain(v51._object);
  v97._countAndFlagsBits = String.init<A>(_:)(&v97, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v97._object = v52;
  String.append<A>(contentsOf:)(v98, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v51._object);
  countAndFlagsBits = (void *)v97._countAndFlagsBits;
  v53 = v97._object;
  v54 = String._bridgeToObjectiveC()();
  v55 = objc_msgSend(v22, "fileExistsAtPath:", v54);

  v56 = v22;
  v57 = v95;
  if (!v55)
    goto LABEL_8;
  v58 = String._bridgeToObjectiveC()();
  v98[0] = 0;
  v59 = objc_msgSend(v56, "removeItemAtPath:error:", v58, v98);

  v60 = v98[0];
  if (v59)
  {
    v61 = v98[0];
LABEL_8:
    v62 = v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v90, 1, 1, v96);
    v63 = v87;
    v86(v87, enum case for URL.DirectoryHint.inferFromPath(_:), v88);
    v64 = v92;
    v65 = swift_bridgeObjectRetain(v92);
    v66 = v89;
    URL.init(filePath:directoryHint:relativeTo:)(v91, v64, v63, v62, v65);
    v67 = v93;
    v68 = Data.init(contentsOf:options:)(v66, 0);
    if (v67)
    {
      v70 = *(void (**)(char *, uint64_t))(v57 + 8);
      v70(v66, v96);
      swift_bridgeObjectRelease(v53);

      v70(v20, v96);
    }
    else
    {
      v73 = v68;
      v74 = v69;
      v95 = *(_QWORD *)(v57 + 8);
      ((void (*)(char *, uint64_t))v95)(v66, v96);
      v75 = String._bridgeToObjectiveC()();
      v76 = v56;
      v77 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v76, "createFileAtPath:contents:attributes:", v75, v77, 0);

      sub_10009B2FC(v73, v74);
      ((void (*)(char *, uint64_t))v95)(v20, v96);
    }
    return countAndFlagsBits;
  }
  v78 = v98[0];
  swift_bridgeObjectRelease(v53);
  _convertNSErrorToError(_:)(v60);

  swift_willThrow(v79);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v96);
  return countAndFlagsBits;
}

uint64_t sub_10012BEEC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  void *object;
  NSString v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  NSString *v30;
  unint64_t v31;
  NSURL *v32;
  void *v33;
  void *v34;
  _OWORD *v35;
  Class isa;
  id v37;
  Swift::String v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  void *v52;
  unint64_t v53;
  void *v54;
  uint64_t countAndFlagsBits;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  Swift::String v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  Swift::String v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD v98[3];
  char v99[8];
  uint64_t v100;
  _BYTE v101[15];
  char v102;
  Swift::String v103;
  uint64_t v104;
  unint64_t v105;
  char v106[32];

  v92._object = a2;
  v92._countAndFlagsBits = a1;
  v96 = type metadata accessor for Logger(0);
  v95 = *(_QWORD *)(v96 - 8);
  v2 = __chkstk_darwin(v96);
  v85 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v93 = (char *)&v83 - v4;
  v91 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL.DirectoryHint(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v11);
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v97 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 1;
  v19 = (char *)objc_msgSend((id)objc_opt_self(NSFileManager, v17), "defaultManager");
  v20 = objc_msgSend(v19, "URLsForDirectory:inDomains:", 13, 1);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v14);

  if (*(_QWORD *)(v21 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v13, v21 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v14);
    v18 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v18, 1, v14);
  swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {

    sub_10009B2C0((uint64_t)v13, &qword_10026BF70);
    return 0;
  }
  v84 = v15;
  v22 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v23 = v97;
  v83 = v14;
  v22(v97, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.isDirectory(_:), v7);
  v24 = sub_1000D4CF4();
  URL.append<A>(components:directoryHint:)(&off_100238520, v10, &type metadata for String, v24);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v102 = 0;
  object = URL.path(percentEncoded:)(1)._object;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v27 = v19;
  LOBYTE(object) = objc_msgSend(v19, "fileExistsAtPath:isDirectory:", v26, &v102);

  if ((object & 1) == 0)
  {
    v28 = sub_10009061C((uint64_t *)&unk_10026CFF0);
    inited = swift_initStackObject(v28, v106);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
    *(_QWORD *)(inited + 40) = 448;
    v30 = NSFilePosixPermissions;
    v31 = sub_1001B0EBC(inited);
    URL._bridgeToObjectiveC()(v32);
    v34 = v33;
    v35 = sub_1001A95C4(v31);
    swift_bridgeObjectRelease(v31);
    type metadata accessor for FileAttributeKey(0);
    sub_100090E1C((unint64_t *)&qword_10026C130, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE4CC);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v35);
    v104 = 0;
    LODWORD(v35) = objc_msgSend(v19, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v34, 1, isa, &v104);

    v37 = (id)v104;
    if (!(_DWORD)v35)
    {
      v65 = v37;
      v66 = _convertNSErrorToError(_:)(v37);

      swift_willThrow(v67);
      v68 = v95;
      v69 = v85;
      v70 = v96;
      (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v85, &v94[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v96);
      swift_errorRetain(v66);
      v71 = swift_errorRetain(v66);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = swift_slowAlloc(22, -1);
        v75 = swift_slowAlloc(64, -1);
        v94 = v19;
        v76 = v75;
        v103._countAndFlagsBits = v75;
        *(_DWORD *)v74 = 136315394;
        v77 = v97;
        swift_beginAccess(v97, &v104, 0, 0);
        v78 = URL.path(percentEncoded:)(1);
        v100 = sub_1000906BC(v78._countAndFlagsBits, (unint64_t)v78._object, &v103._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v74 + 4, v74 + 12);
        swift_bridgeObjectRelease(v78._object);
        *(_WORD *)(v74 + 12) = 2080;
        swift_getErrorValue(v66, v99, v98);
        v79 = Error.localizedDescription.getter(v98[1], v98[2]);
        v81 = v80;
        v100 = sub_1000906BC(v79, v80, &v103._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v74 + 14, v74 + 22);
        swift_bridgeObjectRelease(v81);
        swift_errorRelease(v66);
        swift_errorRelease(v66);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to create file storage directory %s: %s", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        swift_errorRelease(v66);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v69, v96);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v77, v83);
      }
      else
      {

        swift_errorRelease(v66);
        swift_errorRelease(v66);
        swift_errorRelease(v66);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v97, v83);
      }
      return 0;
    }
  }
  v38 = URL.path(percentEncoded:)(1);
  v104 = 0;
  v105 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v39 = swift_bridgeObjectRelease(v105);
  v104 = 0x6574616470557766;
  v105 = 0xE90000000000005FLL;
  v40 = v86;
  v41 = Date.init()(v39);
  v42 = Date.description.getter(v41);
  v43 = v23;
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v40, v88);
  v46._countAndFlagsBits = v42;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  v47._countAndFlagsBits = 95;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48 = v89;
  UUID.init()();
  v49 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v50 = v91;
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v91, v49);
  v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v48, v50);
  String.append(_:)(v92);
  v53 = v105;
  v103 = v38;
  swift_bridgeObjectRetain(v38._object);
  v103._countAndFlagsBits = String.init<A>(_:)(&v103, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v103._object = v54;
  String.append<A>(contentsOf:)(&v104, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v38._object);
  swift_bridgeObjectRelease(v53);
  countAndFlagsBits = v103._countAndFlagsBits;
  v56 = v103._object;
  v57 = v95;
  v58 = v93;
  v59 = v96;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v93, &v94[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v96);
  v60 = swift_bridgeObjectRetain_n(v56, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v104 = v64;
    *(_DWORD *)v63 = 136315138;
    swift_bridgeObjectRetain(v56);
    v103._countAndFlagsBits = sub_1000906BC(countAndFlagsBits, (unint64_t)v56, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v103._object, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease_n(v56, 3);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "packet capture file at %s", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v96);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v97, v83);
  }
  else
  {

    swift_bridgeObjectRelease_n(v56, 2);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v43, v83);
  }
  return countAndFlagsBits;
}

id sub_10012C978()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10012CA3C()
{
  return type metadata accessor for AccessoryFirmwareUpdateManager(0);
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E850;
  if (!qword_10026E850)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryFirmwareUpdateManager);
  return result;
}

uint64_t sub_10012CA80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10012CB30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v6 = v4;
  v9 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v9 < 0)
    v11 = *v4;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v11);
  if (!__OFADD__(result, 1))
  {
    *v6 = a4(v11, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v6;
    *v6 = 0x8000000000000000;
    a3(a1, a2, isUniquelyReferenced_nonNull_native);
    v14 = *v6;
    *v6 = v15;
    return swift_bridgeObjectRelease(v14);
  }
  __break(1u);
  return result;
}

Swift::Int sub_10012CBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    sub_10009061C((uint64_t *)&unk_10026E868);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v31 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = type metadata accessor for DaemonAccessory(0);
      do
      {
        v28[0] = v8;
        swift_dynamicCast(&v30, v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v28[0] = v9;
        v22 = sub_100090EE8(0, (unint64_t *)&qword_10026C7E0, UARPAccessory_ptr);
        swift_dynamicCast(&v29, v28, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
        v4 = v31;
        v23 = *(_QWORD *)(v31 + 16);
        if (*(_QWORD *)(v31 + 24) <= v23)
        {
          sub_1001B5180(v23 + 1, 1);
          v4 = v31;
        }
        v12 = v29;
        v11 = v30;
        Hasher.init(_seed:)(v28);
        v13 = *(id *)(v11 + 24);
        NSObject.hash(into:)(v28);

        result = Hasher._finalize()();
        v15 = v4 + 64;
        v16 = -1 << *(_BYTE *)(v4 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v4 + 64 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v4 + 64 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v24 = 0;
          v25 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v26 = v18 == v25;
            if (v18 == v25)
              v18 = 0;
            v24 |= v26;
            v27 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v27 == -1);
          v19 = __clz(__rbit64(~v27)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        v20 = 8 * v19;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v20) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v21;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_10012CE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t updated;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10009061C(&qword_10026E878);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100090EE8(0, (unint64_t *)&qword_10026E880, NSUUID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        updated = type metadata accessor for AccessoryFirmwareUpdateSession(0);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, updated, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1001B5488(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_10012D078()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012D0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10026E894);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10009B0EC;
  v3[15] = v2;
  return swift_task_switch(sub_10012A8B8, 0, 0);
}

uint64_t sub_10012D104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026C7D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012D14C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10012D180()
{
  uint64_t v0;

  sub_100126954(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSObject **)(v0 + 48));
}

id sub_10012D190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  id result;

  v0 = type metadata accessor for FileSystem(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x74737973656C6966, 0xEA00000000006D65);
  v2 = v1 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath;
  v3 = type metadata accessor for URL(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v1 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath, 1, 1, v3);
  result = objc_msgSend((id)objc_opt_self(NSFileManager, v5), "defaultManager");
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system) = result;
  qword_100275568 = v1;
  return result;
}

id sub_10012D28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  void *object;
  NSString v22;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 1;
  v25 = *(id *)(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  v12 = objc_msgSend(v25, "URLsForDirectory:inDomains:", 5, 1);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v7);

  if (*(_QWORD *)(v13 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, v13 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    v11 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v11, 1, v7);
  swift_bridgeObjectRelease(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v14 = sub_100090FFC((uint64_t)v6);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to locate Library directory!", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    strcpy((char *)v27, "dockaccessoryd");
    HIBYTE(v27[1]) = -18;
    v19 = v26;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.isDirectory(_:), v26);
    v20 = sub_1000D4CF4();
    URL.append<A>(component:directoryHint:)(v27, v3, &type metadata for String, v20);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v19);
    swift_bridgeObjectRelease(v27[1]);
    LOBYTE(v27[0]) = 0;
    object = URL.path(percentEncoded:)(1)._object;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v18 = objc_msgSend(v25, "fileExistsAtPath:isDirectory:", v22, v27);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v18;
}

uint64_t sub_10012D5B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10012D668(&OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath, 5, "Unable to locate Library directory!", a1);
}

uint64_t sub_10012D610@<X0>(uint64_t a1@<X8>)
{
  return sub_10012D668(&OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath, 13, "Unable to locate Caches directory!", a1);
}

uint64_t sub_10012D668@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint8_t *v35;
  uint8_t *v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *object;
  NSString v43;
  uint64_t v44;
  uint64_t inited;
  NSString *v46;
  unint64_t v47;
  NSURL *v48;
  void *v49;
  void *v50;
  _OWORD *v51;
  Class isa;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD v78[3];
  char v79[8];
  uint64_t v80;
  _BYTE v81[15];
  char v82;
  id v83[3];
  uint64_t v84;
  char v85[48];
  char v86[24];

  v71 = a3;
  v7 = v4;
  v75 = type metadata accessor for URL.DirectoryHint(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v76 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10009061C(&qword_10026BF70);
  v15 = __chkstk_darwin(v14);
  v73 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v72 = (char *)&v70 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v70 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v70 - v22;
  v24 = v7 + *a1;
  swift_beginAccess(v24, v86, 0, 0);
  sub_1000D57C4(v24, (uint64_t)v23);
  v77 = v12;
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v12) = v25(v23, 1, v11);
  sub_100090FFC((uint64_t)v23);
  if ((_DWORD)v12 != 1)
    return sub_1000D57C4(v24, a4);
  v70 = a4;
  v26 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  v27 = objc_msgSend(v26, "URLsForDirectory:inDomains:", a2, 1);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v11);

  if (*(_QWORD *)(v28 + 16))
  {
    v29 = v77;
    (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v21, v28 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80)), v11);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v30(v21, 0, 1, v11);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56);
    v30(v21, 1, 1, v11);
  }
  swift_bridgeObjectRelease(v28);
  if (v25(v21, 1, v11) == 1)
  {
    v31 = sub_100090FFC((uint64_t)v21);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = v30;
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v71, v35, 2u);
      v36 = v35;
      v30 = v34;
      swift_slowDealloc(v36, -1, -1);
    }

    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v70, 1, 1, v11);
  }
  v71 = (const char *)v30;
  v38 = v76;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v21, v11);
  strcpy((char *)v83, "dockaccessoryd");
  HIBYTE(v83[1]) = -18;
  v39 = v74;
  v40 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v10, enum case for URL.DirectoryHint.isDirectory(_:), v75);
  v41 = sub_1000D4CF4();
  URL.append<A>(component:directoryHint:)(v83, v10, &type metadata for String, v41);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  swift_bridgeObjectRelease(v83[1]);
  v82 = 0;
  object = URL.path(percentEncoded:)(1)._object;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v26, "fileExistsAtPath:isDirectory:", v43, &v82);

  if ((object & 1) != 0)
    goto LABEL_11;
  v44 = sub_10009061C((uint64_t *)&unk_10026CFF0);
  inited = swift_initStackObject(v44, v85);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
  *(_QWORD *)(inited + 40) = 448;
  v46 = NSFilePosixPermissions;
  v47 = sub_1001B0EBC(inited);
  URL._bridgeToObjectiveC()(v48);
  v50 = v49;
  v51 = sub_1001A95C4(v47);
  swift_bridgeObjectRelease(v47);
  type metadata accessor for FileAttributeKey(0);
  sub_10012DFA4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v51);
  v83[0] = 0;
  LODWORD(v51) = objc_msgSend(v26, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v50, 1, isa, v83);

  v53 = v83[0];
  if ((_DWORD)v51)
  {
LABEL_11:
    v54 = v77;
    v55 = v72;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v72, v38, v11);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v71)(v55, 0, 1, v11);
    v56 = (uint64_t)v55;
    v57 = v73;
    sub_10012DFEC(v56, v73);
    swift_beginAccess(v24, v83, 33, 0);
    sub_10012E034(v57, v24);
    swift_endAccess(v83);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v11);
    a4 = v70;
    return sub_1000D57C4(v24, a4);
  }
  v58 = v53;
  v59 = _convertNSErrorToError(_:)(v53);

  swift_willThrow(v60);
  swift_errorRetain(v59);
  v61 = swift_errorRetain(v59);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc(22, -1);
    v65 = swift_slowAlloc(64, -1);
    v84 = v65;
    *(_DWORD *)v64 = 136315394;
    swift_beginAccess(v38, v83, 0, 0);
    v66 = URL.path(percentEncoded:)(1);
    v80 = sub_1000906BC(v66._countAndFlagsBits, (unint64_t)v66._object, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease(v66._object);
    *(_WORD *)(v64 + 12) = 2080;
    swift_getErrorValue(v59, v79, v78);
    v67 = Error.localizedDescription.getter(v78[1], v78[2]);
    v69 = v68;
    v80 = sub_1000906BC(v67, v68, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease(v69);
    swift_errorRelease(v59);
    swift_errorRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to create file storage directory %s: %s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);
    swift_errorRelease(v59);

  }
  else
  {
    swift_errorRelease(v59);

    swift_errorRelease(v59);
    swift_errorRelease(v59);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v71)(v70, 1, 1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v38, v11);
}

uint64_t sub_10012DE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100090FFC(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath);
  sub_100090FFC(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10012DEC8()
{
  return type metadata accessor for FileSystem(0);
}

uint64_t type metadata accessor for FileSystem(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E8E0;
  if (!qword_10026E8E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FileSystem);
  return result;
}

void sub_10012DF0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_1000D06A0(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 4, &v6, a1 + 80);
    }
  }
}

unint64_t sub_10012DFA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C130;
  if (!qword_10026C130)
  {
    type metadata accessor for FileAttributeKey(255);
    result = swift_getWitnessTable(&unk_1001DE4CC, v1);
    atomic_store(result, (unint64_t *)&qword_10026C130);
  }
  return result;
}

uint64_t sub_10012DFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012E034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026BF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10012E07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x10012E1C4);
}

void sub_10012E1F8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 260;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_100275578 = (uint64_t)v8;
}

void sub_10012E2C8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 261;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_100275580 = (uint64_t)v8;
}

void sub_10012E398(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 264;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_100275588 = (uint64_t)v8;
}

void sub_10012E468(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 265;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_100275590 = (uint64_t)v8;
}

void sub_10012E538(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 272;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_100275598 = (uint64_t)v8;
}

void sub_10012E608(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 266;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755A0 = (uint64_t)v8;
}

void sub_10012E6D8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 564;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755A8 = (uint64_t)v8;
}

void sub_10012E7A8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 565;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755B0 = (uint64_t)v8;
}

void sub_10012E878(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 801;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755B8 = (uint64_t)v8;
}

void sub_10012E948(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 802;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755C0 = (uint64_t)v8;
}

void sub_10012EA18(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v2 = (void *)objc_opt_self(CBUUID, a2);
  v3 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v4 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v4 + 32) = 35;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v2, "UUIDWithString:", v7);

  qword_1002755C8 = (uint64_t)v8;
}

id sub_10012EAE8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t (*v19)(char *, uint64_t);
  id result;
  void *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  char *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  Class isa;
  unsigned int v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  uint64_t (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  _QWORD v85[5];
  char v86[24];
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v84 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v81 = (char *)&v76 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v76 - v12;
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v82 = v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v83 = v14;
  v15 = ((uint64_t (*)(char *))v14)((char *)&v76 - v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Accessory requested setup password.", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  result = (id)v19(v13, v6);
  if (a2 != 1)
    return result;
  v21 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v21)
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    v41 = v84;
    goto LABEL_28;
  }
  if (!a1)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v80 = v19;
  v22 = v21;
  result = objc_msgSend(a1, "identifier");
  if (!result)
  {
LABEL_44:
    __break(1u);
    return result;
  }
  v23 = result;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v26 = v25;

  v78 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v27 = *(id *)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v79 = v22;
  v28 = &v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v86, 0, 0);
  v29 = *(_QWORD *)v28;
  v30 = *(_QWORD *)(*(_QWORD *)v28 + 16);
  if (!v30)
  {
LABEL_21:
    v42 = v79;
    v43 = *(id *)&v79[v78];
    OS_dispatch_semaphore.signal()();

    v89 = 0;
    v87 = 0u;
    v88 = 0u;

    swift_bridgeObjectRelease(v26);
    goto LABEL_24;
  }
  v77 = a1;
  v31 = v29 + 32;
  swift_bridgeObjectRetain(v29);
  while (1)
  {
    sub_10009AFF4(v31, (uint64_t)v85);
    v32 = *(void **)(*sub_10009B038(v85, v85[3]) + 32);
    if (!v32)
      goto LABEL_10;
    v33 = v32;
    v34 = objc_msgSend(v33, "identifier");
    if (v34)
      break;
LABEL_9:

LABEL_10:
    sub_100090E88(v85);
    v31 += 40;
    if (!--v30)
    {
      swift_bridgeObjectRelease(v29);
      a1 = v77;
      goto LABEL_21;
    }
  }
  v35 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v38 = v37;

  if (v36 != v24 || v38 != v26)
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v24, v26, 0);
    swift_bridgeObjectRelease(v38);
    if ((v40 & 1) != 0)
      goto LABEL_23;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease(v29);
  v29 = v26;
LABEL_23:
  swift_bridgeObjectRelease(v29);
  v44 = v79;
  v45 = *(id *)&v79[v78];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v85, (uint64_t)&v87);
  sub_100090E88(v85);

  swift_bridgeObjectRelease(v26);
  a1 = v77;
LABEL_24:
  v19 = v80;
  v41 = v84;
  if (!*((_QWORD *)&v88 + 1))
  {
LABEL_28:
    sub_10009B2C0((uint64_t)&v87, (uint64_t *)&unk_10026DF40);
LABEL_29:
    v51 = v83(v41, v82, v6);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "No setup code available for pairing!", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    result = (id)v19(v41, v6);
    if (a1)
    {
      *(_QWORD *)&v87 = 0;
      if (objc_msgSend(a1, "stopPairingWithError:", &v87))
        return (id)v87;
      v84 = (char *)v87;
      v55 = (id)v87;
      v56 = _convertNSErrorToError(_:)(v84);

      swift_willThrow(v57);
      return (id)swift_errorRelease(v56);
    }
    __break(1u);
    goto LABEL_43;
  }
  v46 = sub_10009061C(&qword_10026C2E0);
  v47 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v85, &v87, v46, v47, 6) & 1) == 0)
    goto LABEL_29;
  v48 = v85[0];
  v49 = (uint64_t *)(v85[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  v50 = *(_QWORD *)(v85[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
  if (v50 == 2)
  {
    swift_release(v85[0]);
    goto LABEL_29;
  }
  v59 = v49[1];
  v58 = v49[2];
  v61 = v49[5];
  v60 = v49[6];
  v62 = v49[4];
  v63 = *v49;
  sub_100141DBC(*v49, v59, v58, *(_QWORD *)(v85[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24), v62, v61, v60, (void (*)(uint64_t, uint64_t))sub_10009B27C);
  sub_10009B27C(v59, v58);
  sub_100141DBC(v63, v59, v58, v50, v62, v61, v60, (void (*)(uint64_t, uint64_t))sub_10009B2FC);
  v64 = v81;
  v65 = v83(v81, v82, v6);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Using setup code from setup payload.", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
  }

  v80(v64, v6);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v87 = 0;
  v70 = objc_msgSend(a1, "tryPairingPassword:error:", isa, &v87);

  v71 = v87;
  if (v70)
  {
    v72 = (id)v87;
    sub_10009B2FC(v59, v58);
  }
  else
  {
    v73 = (id)v87;
    v74 = _convertNSErrorToError(_:)(v71);

    swift_willThrow(v75);
    sub_10009B2FC(v59, v58);
    swift_errorRelease(v74);
  }
  return (id)swift_release(v48);
}

uint64_t sub_10012F324(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t *v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54[8];
  char v55[24];

  v3 = v2;
  v48 = a2;
  v49 = a1;
  v4 = type metadata accessor for DKPairingMetric(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v52 = v3;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Sending pairing metrics...", v19, 2u);
    v20 = v19;
    v3 = v52;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v22 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval;
  v23 = 0.0;
  if (*(double *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval) > 0.0)
  {
    v24 = static Date.now.getter(v21);
    v25 = Date.timeIntervalSince1970.getter(v24);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v23 = v25 - *(double *)(v3 + v22);
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v26 = qword_100275638;
  v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v28 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v28);
  os_unfair_lock_lock(v28 + 4);
  swift_release(v28);
  v29 = (uint64_t *)(v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v55, 0, 0);
  v30 = *v29;
  v31 = *(os_unfair_lock_s **)(v26 + v27);
  swift_bridgeObjectRetain(v30);
  swift_retain(v31);
  os_unfair_lock_unlock(v31 + 4);
  swift_release(v31);
  if (!((unint64_t)v30 >> 62))
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease(v30);
    v33 = v49;
    goto LABEL_9;
  }
  if (v30 < 0)
    v47 = v30;
  else
    v47 = v30 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v30);
  v32 = _CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease_n(v30, 2);
  v33 = v49;
  if ((v32 & 0x8000000000000000) == 0)
  {
LABEL_9:
    if (v48)
    {
      swift_getErrorValue(v48, v54, v53);
      v34 = Error.localizedDescription.getter(v53[1], v53[2]);
      v36 = v35;
      if (v33)
      {
LABEL_11:
        v37 = objc_msgSend(v33, "firmwareVersion");
        if (v37)
        {
          v38 = v37;
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v41 = v40;

        }
        else
        {
          v39 = 0;
          v41 = 0xE000000000000000;
        }
        v43 = objc_msgSend(v33, "serialNumber");
        if (v43)
        {
          v44 = v43;
          v33 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v42 = v45;

        }
        else
        {
          v33 = 0;
          v42 = 0xE000000000000000;
        }
        goto LABEL_19;
      }
    }
    else
    {
      v34 = 0;
      v36 = 0xE000000000000000;
      if (v33)
        goto LABEL_11;
    }
    v39 = 0;
    v42 = 0xE000000000000000;
    v41 = 0xE000000000000000;
LABEL_19:
    DKPairingMetric.init(activePairings:duration:error:firmwareVersion:hardwareVersion:)(v32, v34, v36, v39, v41, v33, v42, v23);
    DKPairingMetric.send()();
    result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v6, v51);
    *(_QWORD *)(v52 + v22) = 0xBFF0000000000000;
    return result;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_10012F750(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  void (*v30)(char *, _QWORD *);
  uint64_t v31;
  void *v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  _BYTE *v56;
  _QWORD *v57;
  _QWORD *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  _QWORD *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  unsigned int v72;
  id v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  id v99;
  uint64_t v100;
  _BYTE *v101;
  id v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  char *v111;
  void *v112;
  char *v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v132;
  unint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  id v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  NSString v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSString v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  NSString v182;
  id v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  NSString v191;
  id v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  NSString v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSString v209;
  id v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  NSString v218;
  id v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  Class isa;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  _QWORD *v232;
  _QWORD *v233;
  __int128 v234;
  char v235[8];
  uint64_t v236;
  uint64_t v237;
  char v238[16];
  _QWORD v239[5];
  char v240[24];
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  id v244[3];
  uint64_t v245;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v226 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for Logger(0);
  v10 = *(v9 - 1);
  v11 = __chkstk_darwin(v9);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v18 = (char *)&v226 - v14;
  if (a2)
  {
    v231 = (char *)v17;
    v19 = *(char **)(v10 + 16);
    v229 = v2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
    v230 = v19;
    ((void (*)(char *))v19)((char *)&v226 - v14);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v233 = v9;
      *(_QWORD *)&v234 = v2;
      v232 = a1;
      v24 = (uint8_t *)v23;
      v25 = (void *)swift_slowAlloc(32, -1);
      v244[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_getErrorValue(a2, v238, v235);
      v26 = Error.localizedDescription.getter(v236, v237);
      v28 = v27;
      *(_QWORD *)&v241 = sub_1000906BC(v26, v27, (uint64_t *)v244);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error during pair setup: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      v29 = v24;
      a1 = v232;
      v3 = v234;
      v9 = v233;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v30 = *(void (**)(char *, _QWORD *))(v10 + 8);
    v30(v18, v9);
    if (!a1)
      return;
    v51 = objc_opt_self(_HAPAccessoryServerBTLE200, v31);
    v52 = swift_dynamicCastObjCClass(a1, v51);
    if (!v52)
      return;
    v53 = (void *)v52;
    v54 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (!v54)
    {
      v66 = a1;
      goto LABEL_32;
    }
    *(_QWORD *)&v234 = v3;
    v55 = v9;
    v56 = v54;
    v57 = a1;
    v58 = a1;
    v59 = objc_msgSend(v53, "identifier");
    if (v59)
    {
      v60 = v59;
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v63 = v62;

      v64 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
      if (*(_QWORD *)&v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
      {
        v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
        v65 = *(id *)&v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
        sub_1001319A0(v61, v63, 5, v64, a2);

        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v64);

      }
      else
      {

        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v64);
      }
      v9 = v55;
      a1 = v57;
LABEL_32:
      sub_10012F324(0, a2);
      if (objc_msgSend(v53, "pendingRemovePairing") == (id)1 || objc_msgSend(v53, "connectReason") == 7)
      {

      }
      else
      {
        if (qword_10026BC00 != -1)
          swift_once(&qword_10026BC00, sub_100158DF8);
        v70 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
        v71 = objc_msgSend(a1, "identifier");
        v244[0] = 0;
        v72 = objc_msgSend(v70, "removeAccessoryKeyForName:error:", v71, v244);

        v73 = v244[0];
        if (v72)
        {
          v74 = v244[0];

        }
        else
        {
          v134 = v244[0];
          v135 = _convertNSErrorToError(_:)(v73);

          swift_willThrow(v136);
          v137 = v231;
          ((void (*)(char *, uint64_t, _QWORD *))v230)(v231, v229, v9);
          v3 = a1;
          v138 = Logger.logObject.getter(v3);
          v139 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v138, v139))
          {
            v233 = v9;
            v140 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_QWORD *)&v234 = swift_slowAlloc(32, -1);
            v244[0] = (id)v234;
            *(_DWORD *)v140 = 136315138;
            v141 = objc_msgSend((id)v3, "identifier");
            if (!v141)
              goto LABEL_110;
            v142 = v141;
            v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
            v145 = v144;

            *(_QWORD *)&v241 = sub_1000906BC(v143, v145, (uint64_t *)v244);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v140 + 4, v140 + 12);

            swift_bridgeObjectRelease(v145);
            _os_log_impl((void *)&_mh_execute_header, v138, v139, "Failed to remove keychain entry for accessory: %s", v140, 0xCu);
            v146 = v234;
            swift_arrayDestroy(v234, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v146, -1, -1);
            swift_slowDealloc(v140, -1, -1);
            swift_errorRelease(v135);

            v30(v231, v233);
          }
          else
          {

            swift_errorRelease(v135);
            v30(v137, v9);
          }
        }
      }
      return;
    }
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v32 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v32)
  {
    v243 = 0;
    v241 = 0u;
    v242 = 0u;
    goto LABEL_45;
  }
  v231 = (char *)v16;
  *(_QWORD *)&v234 = v2;
  if (!a1)
  {
    __break(1u);
    goto LABEL_106;
  }
  v227 = v8;
  v230 = (char *)OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  v228 = v15;
  v233 = v9;
  v33 = v32;
  v232 = a1;
  v34 = objc_msgSend(a1, "identifier");
  if (!v34)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v35 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v38 = v37;

  v229 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v39 = *(id *)&v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v40 = &v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v33[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v240, 0, 0);
  v41 = *(_QWORD *)v40;
  v42 = *(_QWORD *)(*(_QWORD *)v40 + 16);
  if (!v42)
  {
LABEL_29:
    v67 = *(id *)&v33[v229];
    OS_dispatch_semaphore.signal()();

    v243 = 0;
    v241 = 0u;
    v242 = 0u;

    swift_bridgeObjectRelease(v38);
    v68 = v233;
    v69 = v232;
    goto LABEL_41;
  }
  v226 = v10;
  v43 = v41 + 32;
  swift_bridgeObjectRetain(v41);
  while (1)
  {
    sub_10009AFF4(v43, (uint64_t)v239);
    v44 = *(void **)(*sub_10009B038(v239, v239[3]) + 32);
    if (!v44)
      goto LABEL_10;
    v45 = v44;
    v46 = objc_msgSend(v45, "identifier");
    if (v46)
      break;
LABEL_9:

LABEL_10:
    sub_100090E88(v239);
    v43 += 40;
    if (!--v42)
    {
      swift_bridgeObjectRelease(v41);
      v10 = v226;
      goto LABEL_29;
    }
  }
  v47 = v46;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  if (v3 != v36 || v49 != v38)
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v49, v36, v38, 0);
    swift_bridgeObjectRelease(v49);
    if ((v3 & 1) != 0)
      goto LABEL_40;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease(v41);
  v41 = v38;
LABEL_40:
  swift_bridgeObjectRelease(v41);
  v75 = *(id *)&v33[v229];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)v239, (uint64_t)&v241);
  sub_100090E88(v239);

  swift_bridgeObjectRelease(v38);
  v68 = v233;
  v69 = v232;
  v10 = v226;
LABEL_41:
  v76 = v230;
  v77 = v234;
  if (!*((_QWORD *)&v242 + 1))
  {
LABEL_45:
    sub_10009B2C0((uint64_t)&v241, (uint64_t *)&unk_10026DF40);
    return;
  }
  sub_10009B340(&v241, (uint64_t)v244);
  sub_10009AFF4((uint64_t)v244, (uint64_t)&v241);
  v78 = sub_10009061C(&qword_10026C2E0);
  v79 = type metadata accessor for DaemonAccessory(0);
  if (!swift_dynamicCast(v239, &v241, v78, v79, 6))
  {
    v82 = *(id *)(*sub_10009B038(v244, v245) + 24);
    v83 = DockCoreInfo.type.getter(v82);

    v84 = objc_msgSend(v69, "primaryAccessory");
    if (v84 && (v85 = v84, v86 = objc_msgSend(v84, "name"), v85, v86))
    {
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v89 = v88;

      sub_10009AFF4((uint64_t)v244, (uint64_t)&v241);
      if (v89)
      {
LABEL_52:
        sub_100090E88(&v241);
        v92 = *(id *)(*sub_10009B038(v244, v245) + 24);
        v93 = v227;
        DockCoreInfo.identifier.getter(v92);

        v94 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo(0));
        v95 = (void *)DockCoreInfo.init(type:name:identifier:)(v83, v87, v89, v93);
        if (qword_10026BC00 != -1)
          swift_once(&qword_10026BC00, sub_100158DF8);
        v3 = qword_100275638;
        v96 = objc_allocWithZone((Class)type metadata accessor for DockCoreAccessory(0));
        v97 = v95;
        v98 = (void *)DockCoreAccessory.init(info:systems:)();
        v99 = sub_100161B48(v98, 0);

        v77 = v234;
        v81 = *(void **)&v76[v234];
        if (v81)
          goto LABEL_55;
LABEL_60:
        v107 = *(char **)(v10 + 16);
        v229 = v77 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
        v230 = v107;
        v108 = ((uint64_t (*)(char *))v107)(v231);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v3 = swift_slowAlloc(2, -1);
          *(_WORD *)v3 = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Pair key exchange completed.", (uint8_t *)v3, 2u);
          swift_slowDealloc(v3, -1, -1);
        }

        v111 = (void (*)(_QWORD, _QWORD))v231;
        v231 = *(char **)(v10 + 8);
        ((void (*)(char *, id))v231)((char *)v111, v68);
        v112 = *(void **)&v76[v77];
        if (v112)
        {
          v113 = v112;
          v114 = objc_msgSend(v69, "identifier");
          if (!v114)
            goto LABEL_109;
          v115 = v114;
          v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
          v118 = v117;

          v119 = (uint64_t *)&v113[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
          swift_beginAccess(&v113[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens], &v241, 0, 0);
          v120 = *v119;
          v121 = (unint64_t)*v119 >> 62;
          v227 = v113;
          if (v121)
            goto LABEL_100;
          v122 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v118);
          swift_bridgeObjectRetain(v120);
          for (; v122; v122 = _CocoaArrayWrapper.endIndex.getter(v225))
          {
            *(_QWORD *)&v234 = v120 & 0xFFFFFFFFFFFFFF8;
            v232 = (_QWORD *)(v120 + 32);
            while (!__OFSUB__(v122--, 1))
            {
              if ((v120 & 0xC000000000000001) != 0)
              {
                v124 = specialized _ArrayBuffer._getElementSlowPath(_:)(v122, v120);
              }
              else
              {
                if ((v122 & 0x8000000000000000) != 0)
                  goto LABEL_98;
                if (v122 >= *(_QWORD *)(v234 + 16))
                  goto LABEL_99;
                v124 = v232[v122];
                swift_retain(v124);
              }
              v126 = *(_QWORD *)(v124 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
              v125 = *(_QWORD *)(v124 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
              sub_10009B27C(v126, v125);
              sub_10011CAC4(v126, v125);
              v128 = v127;
              v130 = v129;
              sub_10009B2FC(v126, v125);
              if (v128 == v116 && v130 == v118)
              {
                swift_release(v124);
                swift_bridgeObjectRelease(v118);
LABEL_84:
                swift_bridgeObjectRelease(v118);
                v133 = sub_10013AD68(v122, v120);
                goto LABEL_85;
              }
              v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v130, v116, v118, 0);
              swift_release(v124);
              swift_bridgeObjectRelease(v130);
              if ((v132 & 1) != 0)
                goto LABEL_84;
              if (!v122)
                goto LABEL_79;
            }
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            if (v120 < 0)
              v225 = v120;
            else
              v225 = v120 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v118);
            swift_bridgeObjectRetain(v120);
          }
LABEL_79:
          swift_bridgeObjectRelease(v118);
          v133 = 0;
LABEL_85:

          swift_bridgeObjectRelease(v118);
          swift_bridgeObjectRelease(v120);
          v68 = v233;
          if (v133)
          {
            if (qword_10026BC00 != -1)
              swift_once(&qword_10026BC00, sub_100158DF8);
            v147 = v133 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
            v148 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
            sub_100168984(v147, 3, v148, 0);
            swift_release(v133);
            swift_bridgeObjectRelease(v148);
          }
        }
        v150 = *(void **)(*sub_10009B038(v244, v245) + 32);
        if (v150)
        {
          v151 = objc_opt_self(HAPAccessoryServerBTLE, v149);
          v152 = (_QWORD *)swift_dynamicCastObjCClass(v150, v151);
          if (v152)
          {
            v233 = v152;
            ((void (*)(uint64_t, uint64_t, id))v230)(v228, v229, v68);
            v232 = v150;
            v153 = Logger.logObject.getter(v232);
            v154 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v153, v154))
            {
              v155 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v155 = 0;
              _os_log_impl((void *)&_mh_execute_header, v153, v154, "Initiating characteristic discovery for newly paired accessory...", v155, 2u);
              swift_slowDealloc(v155, -1, -1);
            }

            ((void (*)(uint64_t, id))v231)(v228, v68);
            v156 = sub_10009061C((uint64_t *)&unk_10026E6C0);
            v157 = swift_allocObject(v156, 144, 7);
            *(_OWORD *)(v157 + 16) = xmmword_1001E0120;
            v159 = (void *)objc_opt_self(CBUUID, v158);
            v160 = sub_10009061C((uint64_t *)&unk_10026E5E0);
            v161 = swift_allocObject(v160, 72, 7);
            v234 = xmmword_1001DE690;
            *(_OWORD *)(v161 + 16) = xmmword_1001DE690;
            *(_QWORD *)(v161 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v161 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v161 + 32) = 35;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v161);
            v163 = v162;
            v164 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v163);
            v165 = objc_msgSend(v159, "UUIDWithString:", v164);

            v166 = objc_msgSend(v165, "UUIDString");
            v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
            v169 = v168;

            *(_QWORD *)(v157 + 32) = v167;
            *(_QWORD *)(v157 + 40) = v169;
            v170 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v170 + 16) = v234;
            *(_QWORD *)(v170 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v170 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v170 + 32) = 33;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v170);
            v172 = v171;
            v173 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v172);
            v174 = objc_msgSend(v159, "UUIDWithString:", v173);

            v175 = objc_msgSend(v174, "UUIDString");
            v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
            v178 = v177;

            *(_QWORD *)(v157 + 48) = v176;
            *(_QWORD *)(v157 + 56) = v178;
            v179 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v179 + 16) = v234;
            *(_QWORD *)(v179 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v179 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v179 + 32) = 32;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v179);
            v181 = v180;
            v182 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v181);
            v183 = objc_msgSend(v159, "UUIDWithString:", v182);

            v184 = objc_msgSend(v183, "UUIDString");
            v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
            v187 = v186;

            *(_QWORD *)(v157 + 64) = v185;
            *(_QWORD *)(v157 + 72) = v187;
            v188 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v188 + 16) = v234;
            *(_QWORD *)(v188 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v188 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v188 + 32) = 48;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v188);
            v190 = v189;
            v191 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v190);
            v192 = objc_msgSend(v159, "UUIDWithString:", v191);

            v193 = objc_msgSend(v192, "UUIDString");
            v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
            v196 = v195;

            *(_QWORD *)(v157 + 80) = v194;
            *(_QWORD *)(v157 + 88) = v196;
            v197 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v197 + 16) = v234;
            *(_QWORD *)(v197 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v197 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v197 + 32) = 82;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v197);
            v199 = v198;
            v200 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v199);
            v201 = objc_msgSend(v159, "UUIDWithString:", v200);

            v202 = objc_msgSend(v201, "UUIDString");
            v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
            v205 = v204;

            *(_QWORD *)(v157 + 96) = v203;
            *(_QWORD *)(v157 + 104) = v205;
            v206 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v206 + 16) = v234;
            *(_QWORD *)(v206 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v206 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v206 + 32) = 544;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v206);
            v208 = v207;
            v209 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v208);
            v210 = objc_msgSend(v159, "UUIDWithString:", v209);

            v211 = objc_msgSend(v210, "UUIDString");
            v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
            v214 = v213;

            *(_QWORD *)(v157 + 112) = v212;
            *(_QWORD *)(v157 + 120) = v214;
            v215 = swift_allocObject(v160, 72, 7);
            *(_OWORD *)(v215 + 16) = v234;
            *(_QWORD *)(v215 + 56) = &type metadata for UInt32;
            *(_QWORD *)(v215 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v215 + 32) = 304;
            String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v215);
            v217 = v216;
            v218 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v217);
            v219 = objc_msgSend(v159, "UUIDWithString:", v218);

            v220 = objc_msgSend(v219, "UUIDString");
            v221 = static String._unconditionallyBridgeFromObjectiveC(_:)(v220);
            v223 = v222;

            *(_QWORD *)(v157 + 128) = v221;
            *(_QWORD *)(v157 + 136) = v223;
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v157);
            objc_msgSend(v233, "discoverAccessoriesAndReadCharacteristicTypes:", isa);

          }
        }
        sub_100090E88(v244);
        return;
      }
    }
    else
    {
      sub_10009AFF4((uint64_t)v244, (uint64_t)&v241);
    }
    v90 = *(id *)(*sub_10009B038(&v241, *((uint64_t *)&v242 + 1)) + 24);
    v87 = DockCoreInfo.name.getter(v90);
    v89 = v91;

    goto LABEL_52;
  }
  v80 = v239[0];
  *(_BYTE *)(v239[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 1;
  swift_release(v80);
  v81 = *(void **)&v76[v77];
  if (!v81)
    goto LABEL_60;
LABEL_55:
  v100 = v10;
  v101 = v81;
  v102 = objc_msgSend(v69, "identifier");
  if (v102)
  {
    v3 = (uint64_t)v102;
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
    v105 = v104;

    v106 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    if (*(_QWORD *)&v101[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
    {
      v101[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 6;
      v3 = (uint64_t)*(id *)&v101[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
      sub_1001319A0(v103, v105, 3, v106, 0);

      swift_bridgeObjectRelease(v105);
      swift_bridgeObjectRelease(v106);

    }
    else
    {

      swift_bridgeObjectRelease(v105);
      swift_bridgeObjectRelease(v106);
    }
    v10 = v100;
    goto LABEL_60;
  }
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:

  __break(1u);
}

void sub_100130E64(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  Class isa;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  id v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject *v59;
  __int128 v60;
  id v61;
  NSObject *v62;
  char *v63;
  void *v64;
  _QWORD aBlock[5];
  uint64_t v66;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11 = (char *)&v60 - v10;
  if (a1)
  {
    v12 = objc_opt_self(HAPAccessoryServerBTLE, v9);
    v13 = swift_dynamicCastObjCClass(a1, v12);
    if (v13)
    {
      v14 = (void *)v13;
      v15 = a1;
      v64 = v14;
      v16 = objc_msgSend(v14, "primaryAccessory");
      if (!v16)
        goto LABEL_12;
      v61 = v16;
      v62 = v15;
      v63 = v2;
      v18 = (void *)objc_opt_self(CBUUID, v17);
      v19 = sub_10009061C((uint64_t *)&unk_10026E5E0);
      v20 = swift_allocObject(v19, 72, 7);
      v60 = xmmword_1001DE690;
      *(_OWORD *)(v20 + 16) = xmmword_1001DE690;
      *(_QWORD *)(v20 + 56) = &type metadata for UInt32;
      *(_QWORD *)(v20 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v20 + 32) = 21;
      String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v20);
      v22 = v21;
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      v24 = objc_msgSend(v18, "UUIDWithString:", v23);

      v25 = objc_msgSend(v24, "UUIDString");
      if (!v25)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v27 = v26;
        v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v27);
      }
      v28 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v28 + 16) = v60;
      *(_QWORD *)(v28 + 56) = &type metadata for UInt32;
      *(_QWORD *)(v28 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v28 + 32) = 16;
      String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v28);
      v30 = v29;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      v32 = objc_msgSend(v18, "UUIDWithString:", v31);

      v33 = objc_msgSend(v32, "UUIDString");
      if (!v33)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v35 = v34;
        v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v35);
      }
      v36 = v61;
      v37 = objc_msgSend(v61, "characteristicOfType:serviceType:", v25, v33);

      v15 = v62;
      v2 = v63;
      if (v37)
      {
        v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v11, &v63[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v4);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Reading Pairing State Number...", v41, 2u);
          swift_slowDealloc(v41, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
        v42 = sub_10009061C(&qword_10026C340);
        v43 = swift_allocObject(v42, 40, 7);
        *(_OWORD *)(v43 + 16) = xmmword_1001DE6A0;
        *(_QWORD *)(v43 + 32) = v37;
        aBlock[0] = v43;
        specialized Array._endMutation()(v43);
        v44 = aBlock[0];
        sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
        v45 = v37;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v44);
        v47 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
        v48 = swift_allocObject(&unk_10023C9E0, 32, 7);
        v49 = v64;
        *(_QWORD *)(v48 + 16) = v2;
        *(_QWORD *)(v48 + 24) = v49;
        aBlock[4] = sub_100141DB4;
        v66 = v48;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100177F4C;
        aBlock[3] = &unk_10023C9F8;
        v50 = _Block_copy(aBlock);
        v51 = v66;
        v52 = v15;
        v53 = v47;
        v54 = v2;
        swift_release(v51);
        objc_msgSend(v49, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v53, v50, 10.0);

        _Block_release(v50);
      }
      else
      {
LABEL_12:
        v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v4);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory does not contain a Pairing State Number characteristic!", v58, 2u);
          swift_slowDealloc(v58, -1, -1);
          v59 = v15;
        }
        else
        {
          v59 = v56;
          v56 = v15;
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
    }
  }
}

void sub_1001313CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  id v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  const void *v42;
  const void *v43;
  BOOL v44;
  void (*v45)(char *, _QWORD *);
  char *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[3];
  char v62[14];
  unsigned __int16 v63;
  _OWORD v64[2];
  uint64_t v65[5];

  v8 = (_QWORD *)type metadata accessor for Logger(0);
  v9 = *(v8 - 1);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v53 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v53 - v16;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, _QWORD *))(v9 + 16))((char *)&v53 - v16, a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
    swift_errorRetain(a2);
    v18 = swift_errorRetain(a2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v65[0] = v22;
      v59 = v8;
      *(_DWORD *)v21 = 136315138;
      swift_getErrorValue(a2, v62, v61);
      v23 = Error.localizedDescription.getter(v61[1], v61[2]);
      v25 = v24;
      *(_QWORD *)&v64[0] = sub_1000906BC(v23, v24, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, (char *)v64 + 8, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error reading Pairing State Number characteristic: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, _QWORD *))(v9 + 8))(v17, v59);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v45 = *(void (**)(char *, _QWORD *))(v9 + 8);
    v46 = v17;
    goto LABEL_29;
  }
  if (!a1)
  {
    v47 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v9 + 16))(v15, a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Error reading Pairing State Number characteristic: no results returned!", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    v45 = *(void (**)(char *, _QWORD *))(v9 + 8);
    v46 = v15;
LABEL_29:
    v45(v46, v8);
    return;
  }
  v26 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a1 >> 62)
    goto LABEL_34;
  v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v28 = swift_bridgeObjectRetain(a1);
  if (!v27)
  {
LABEL_38:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_7:
  v59 = v8;
  v60 = v9;
  v54 = a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v55 = (id)a4;
  v58 = a1 & 0xC000000000000001;
  a4 = 4;
  v56 = (char *)&type metadata for Any + 8;
  v28.n128_u64[0] = 33554688;
  v53 = v28;
  v57 = a1;
  while (1)
  {
    a3 = a4 - 4;
    if (v58)
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, a1);
    else
      v29 = *(id *)(a1 + 8 * a4);
    v30 = v29;
    v31 = v59;
    a1 = a4 - 3;
    if (__OFADD__(a3, 1))
    {
      __break(1u);
LABEL_34:
      if (a1 >= 0)
        v52 = v26;
      else
        v52 = a1;
      swift_bridgeObjectRetain(a1);
      v27 = _CocoaArrayWrapper.endIndex.getter(v52);
      if (!v27)
        goto LABEL_38;
      goto LABEL_7;
    }
    v32 = objc_msgSend(v29, "value");
    if (v32)
    {
      v33 = v32;
      _bridgeAnyObjectToAny(_:)(v64);
      swift_unknownObjectRelease(v33);
    }
    else
    {
      memset(v64, 0, sizeof(v64));
    }
    sub_1000D55A0((uint64_t)v64, (uint64_t)v65, &qword_10026E5F0);
    if (!v65[3])
    {

      sub_10009B2C0((uint64_t)v65, &qword_10026E5F0);
      v51 = v57;
      goto LABEL_32;
    }
    if ((swift_dynamicCast(&v63, v65, v56, &type metadata for UInt16, 6) & 1) == 0)
    {
      swift_bridgeObjectRelease(v57);

      return;
    }
    v9 = v27;
    v34 = v63;
    v35 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v60 + 16))(v12, v54, v31);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(6, -1);
      *(_DWORD *)v38 = v53.n128_u32[0];
      *(_WORD *)(v38 + 4) = v34;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Updating Pairing State Number to %hu", (uint8_t *)v38, 6u);
      v31 = v59;
      swift_slowDealloc(v38, -1, -1);
    }

    (*(void (**)(char *, _QWORD *))(v60 + 8))(v12, v31);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v39 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
    v40 = objc_msgSend(v55, "identifier");
    if (!v40)
      break;
    v41 = v40;
    v8 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    sub_100149E90(v34, v8, v43);
    swift_bridgeObjectRelease(v43);
    ++a4;
    v27 = v9;
    v44 = a1 == v9;
    a1 = v57;
    if (v44)
    {
      v51 = v57;
LABEL_32:
      swift_bridgeObjectRelease(v51);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1001319A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  void *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t);
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];
  char v109[8];
  uint64_t v110;
  uint64_t v111;
  id v112;
  _BYTE v113[16];
  uint64_t v114[3];

  v6 = v5;
  v96 = a4;
  v106 = a3;
  v101 = 0;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v100 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v94 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v94 - v18;
  v20 = v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v107 = a1;
  v105 = v6;
  v97 = a5;
  v102 = v17;
  v99 = v21;
  if (a5)
  {
    v21((char *)&v94 - v18, v20, v10);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a5);
    swift_bridgeObjectRetain(a2);
    v22 = swift_errorRetain(a5);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(32, -1);
      v104 = swift_slowAlloc(64, -1);
      v114[0] = v104;
      *(_DWORD *)v25 = 136315650;
      swift_bridgeObjectRetain(a2);
      v112 = (id)sub_1000906BC(a1, a2, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v25 + 12) = 2048;
      v112 = (id)PairingRequestState.rawValue.getter(v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v25 + 14, v25 + 22);
      *(_WORD *)(v25 + 22) = 2080;
      swift_getErrorValue(a5, v109, v108);
      v26 = Error.localizedDescription.getter(v108[1], v108[2]);
      v28 = v27;
      v112 = (id)sub_1000906BC(v26, v27, v114);
      v6 = v105;
      a1 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v25 + 24, v25 + 32);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a5);
      swift_errorRelease(a5);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempting to update prox card for %s with status %ld due to error: %s", (uint8_t *)v25, 0x20u);
      v29 = v104;
      swift_arrayDestroy(v104, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      v30 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
      v31 = v19;
      v32 = v102;
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(a5);
      swift_errorRelease(a5);

      v30 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
      v31 = v19;
      v32 = v10;
    }
  }
  else
  {
    v21(v16, v20, v10);
    v33 = swift_bridgeObjectRetain_n(a2, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = v10;
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v114[0] = v38;
      *(_DWORD *)v37 = 136315394;
      swift_bridgeObjectRetain(a2);
      v112 = (id)sub_1000906BC(a1, a2, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v37 + 12) = 2048;
      v112 = (id)PairingRequestState.rawValue.getter(v106);
      a1 = v107;
      v6 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v37 + 14, v37 + 22);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Attempting to update prox card for %s with status %ld", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v30 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v31 = v16;
    v32 = v35;
  }
  v98 = v30;
  v30(v31, v32);
  v39 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  v40 = *(char **)(v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v40)
    goto LABEL_47;
  v41 = (uint64_t *)&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess(&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens], v114, 0, 0);
  v42 = *v41;
  v43 = (unint64_t)*v41 >> 62;
  v95 = v39;
  v94 = v40;
  if (!v43)
  {
    v44 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v42);
    v45 = v40;
    if (v44)
      goto LABEL_12;
LABEL_25:
    swift_bridgeObjectRelease(a2);
    v56 = 0;
    goto LABEL_33;
  }
LABEL_58:
  if (v42 < 0)
    v91 = v42;
  else
    v91 = v42 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v42);
  v92 = v40;
  v44 = _CocoaArrayWrapper.endIndex.getter(v91);
  if (!v44)
    goto LABEL_25;
LABEL_12:
  v40 = (char *)(v42 & 0xC000000000000001);
  v103 = v42 + 32;
  v104 = v42 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (__OFSUB__(v44--, 1))
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v40)
    {
      v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v42);
    }
    else
    {
      if ((v44 & 0x8000000000000000) != 0)
        goto LABEL_56;
      if (v44 >= *(_QWORD *)(v104 + 16))
        goto LABEL_57;
      v47 = *(_QWORD *)(v103 + 8 * v44);
      swift_retain(v47);
    }
    v48 = *(_QWORD *)(v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v49 = *(_QWORD *)(v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_10009B27C(v48, v49);
    sub_10011CAC4(v48, v49);
    v51 = v50;
    v53 = v52;
    sub_10009B2FC(v48, v49);
    a1 = v107;
    if (v51 == v107 && v53 == a2)
      break;
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v107, a2, 0);
    swift_release(v47);
    swift_bridgeObjectRelease(v53);
    if ((v55 & 1) != 0)
      goto LABEL_27;
    if (!v44)
      goto LABEL_25;
  }
  swift_release(v47);
  swift_bridgeObjectRelease(a2);
LABEL_27:
  swift_bridgeObjectRelease(a2);
  v57 = v101;
  v58 = sub_10013AD68(v44, v42);
  v59 = 1;
  if (v57)
    v56 = 1;
  else
    v56 = v58;
  if (!v57)
    v59 = 0;
  v101 = v59;
LABEL_33:

  swift_bridgeObjectRelease(v42);
  v6 = v105;
  v60 = v95;
  if (!v56)
  {
LABEL_47:
    v79 = v100;
    v80 = v102;
    v99(v100, v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v102);
    v81 = swift_bridgeObjectRetain_n(a2, 2);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(12, -1);
      v85 = (void *)swift_slowAlloc(32, -1);
      v112 = v85;
      *(_DWORD *)v84 = 136315138;
      swift_bridgeObjectRetain(a2);
      v110 = sub_1000906BC(a1, a2, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v84 + 4, v84 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Cannot find token for accessory %s", v84, 0xCu);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v84, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return v98(v79, v80);
  }
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v61 = v106;
  sub_100168984(v56 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v106, v96, v97);
  v62 = PairingRequestState.rawValue.getter(v61);
  if (v62 != PairingRequestState.rawValue.getter(4))
  {
    v63 = PairingRequestState.rawValue.getter(v106);
    if (v63 != PairingRequestState.rawValue.getter(5))
      goto LABEL_42;
  }
  v64 = *(char **)(v6 + v60);
  if (!v64)
    goto LABEL_42;
  v65 = v6;
  v66 = (uint64_t *)&v64[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess(&v64[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens], &v112, 33, 0);
  swift_bridgeObjectRetain(a2);
  v67 = v64;
  v68 = sub_10013B4E0(v66, a1, a2);
  swift_bridgeObjectRelease(a2);
  v69 = *v66;
  if ((unint64_t)*v66 >> 62)
  {
    if (v69 < 0)
      v93 = *v66;
    else
      v93 = v69 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v66);
    v70 = _CocoaArrayWrapper.endIndex.getter(v93);
    swift_bridgeObjectRelease(v69);
    if (v70 >= v68)
      goto LABEL_41;
LABEL_67:
    __break(1u);
  }
  v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v70 < v68)
    goto LABEL_67;
LABEL_41:
  v6 = v65;
  sub_100172588(v68, v70);
  swift_endAccess(&v112);

LABEL_42:
  v71 = PairingRequestState.rawValue.getter(v106);
  if (v71 != PairingRequestState.rawValue.getter(5)
    || (v72 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth,
        !*(_QWORD *)(v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth)))
  {
    v86 = v56;
    return swift_release(v86);
  }
  result = sub_10012F324(0, v97);
  v74 = *(_QWORD *)(v6 + v72);
  if (v74)
  {
    v75 = *(void **)(v74 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
    v112 = 0;
    v76 = objc_msgSend(v75, "stopPairingWithError:", &v112);
    v77 = v112;
    if (v76)
    {
      v78 = v112;
    }
    else
    {
      v87 = v112;
      v88 = _convertNSErrorToError(_:)(v77);

      swift_willThrow(v89);
      swift_errorRelease(v88);
    }
    v90 = *(_QWORD *)(v6 + v72);
    *(_QWORD *)(v6 + v72) = 0;
    swift_release(v56);
    v86 = v90;
    return swift_release(v86);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001323D4(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  uint8_t *v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  id v22;
  NSObject *v23;
  int v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v69 = a1;
  v4 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v4);
  v67 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v64 - v11;
  v68 = v2;
  v13 = &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger];
  v14 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
  v15 = v14((char *)&v64 - v11, &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v6);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = v10;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Finished discovery of accessory.  Device successfully paired!", v19, 2u);
    v20 = v19;
    v10 = v18;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v12, v6);
  v14(v10, v13, v6);
  v22 = a2;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v25 = (uint64_t (*)(char *, uint64_t))v21;
    v26 = swift_slowAlloc(52, -1);
    v64 = swift_slowAlloc(160, -1);
    v71 = v64;
    *(_DWORD *)v26 = 136316162;
    v27 = objc_msgSend(v22, "name");
    v66 = v10;
    v65 = v24;
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

    }
    else
    {
      v31 = 0xE300000000000000;
      v29 = 4144959;
    }
    v70 = sub_1000906BC(v29, v31, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v26 + 4, v26 + 12);

    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v26 + 12) = 2080;
    v34 = objc_msgSend(v22, "manufacturer");
    if (v34)
    {
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

    }
    else
    {
      v38 = 0xE300000000000000;
      v36 = 4144959;
    }
    v70 = sub_1000906BC(v36, v38, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v26 + 14, v26 + 22);

    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v26 + 22) = 2080;
    v39 = objc_msgSend(v22, "model");
    if (v39)
    {
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v43 = v42;

    }
    else
    {
      v43 = 0xE300000000000000;
      v41 = 4144959;
    }
    v70 = sub_1000906BC(v41, v43, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v26 + 24, v26 + 32);

    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v26 + 32) = 2080;
    v44 = objc_msgSend(v22, "serialNumber");
    if (v44)
    {
      v45 = v44;
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

    }
    else
    {
      v48 = 0xE300000000000000;
      v46 = 4144959;
    }
    v70 = sub_1000906BC(v46, v48, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v26 + 34, v26 + 42);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v26 + 42) = 2080;
    v49 = objc_msgSend(v22, "firmwareVersion");
    if (v49)
    {
      v50 = v49;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

      v33 = v69;
      v54 = v64;
    }
    else
    {
      v53 = 0xE300000000000000;
      v33 = v69;
      v54 = v64;
      v51 = 4144959;
    }
    v70 = sub_1000906BC(v51, v53, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v26 + 44, v26 + 52);

    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v65, "Accessory [name: %s, manufacturer: %s, model: %s, serial number: %s, firmware version: %s]", (uint8_t *)v26, 0x34u);
    swift_arrayDestroy(v54, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    result = v25(v66, v6);
  }
  else
  {

    result = ((uint64_t (*)(char *, uint64_t))v21)(v10, v6);
    v33 = v69;
  }
  *(_BYTE *)(v33 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 2;
  v55 = *(void **)(v33 + 32);
  if (v55)
  {
    v56 = v55;
    v57 = v68;
    sub_100130E64(v55);

    v58 = type metadata accessor for TaskPriority(0);
    v59 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v67, 1, 1, v58);
    v60 = (_QWORD *)swift_allocObject(&unk_10023C990, 56, 7);
    v60[2] = 0;
    v60[3] = 0;
    v60[4] = v33;
    v60[5] = v57;
    v60[6] = v22;
    v61 = v22;
    swift_retain(v33);
    v62 = v57;
    v63 = sub_10018A990(v59, (uint64_t)&unk_10026EA48, (uint64_t)v60);
    return swift_release(v63);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001329F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v9);
  v6[13] = swift_task_alloc(v9);
  v6[14] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10026D66C);
  v6[15] = v10;
  *v10 = v6;
  v10[1] = sub_100132A88;
  return sub_1000E27D8();
}

uint64_t sub_100132A88()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_100132ADC, 0, 0);
}

uint64_t sub_100132ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController), "deRegisterFromNotifications");
  objc_msgSend(*(id *)(v1 + v2), "invalidate");
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = 0;

  sub_10009E60C();
  v4 = (_QWORD *)swift_task_alloc(dword_10026D664);
  *(_QWORD *)(v0 + 128) = v4;
  *v4 = v0;
  v4[1] = sub_100132B64;
  return sub_1000E23C4();
}

uint64_t sub_100132B64()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_100132BB8, 0, 0);
}

uint64_t sub_100132BB8()
{
  uint64_t *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;

  v1 = (void *)v0[9];
  sub_10017B930(1);
  v2 = objc_msgSend(v1, "name");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v0[17] = v6;
  v7 = (uint64_t **)swift_task_alloc(dword_10026EA14);
  v0[18] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = (uint64_t *)sub_100132C68;
  return sub_100134FD8(v0[7], v4, v6, 1);
}

uint64_t sub_100132C68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100133704;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 136));
    v4 = sub_100132CD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100132CD4()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _BYTE *v52;
  _BYTE *v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  char *v69;
  void *v70;
  id v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  unint64_t v84;
  void (*v85)(_QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  char *v109;
  uint64_t v110;
  os_unfair_lock_s *v111;
  char *v112;
  void *v113;
  uint64_t v114;
  char *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t result;
  uint64_t v120;
  _QWORD *v121;
  uint64_t type;
  os_log_type_t typea;
  void *v124;
  uint64_t v125;
  os_log_type_t v126[8];
  os_log_type_t v127[8];
  uint64_t v128;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  id v135;
  void (*v136)(_QWORD, _QWORD);
  uint64_t v137;

  v1 = *(NSObject **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 56);
  sub_1000E1B64(0);
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8);
  *v3 = v5;
  v3[1] = v6;
  swift_bridgeObjectRelease(v4);
  sub_1000E1B70(0);
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8);
  *v7 = v9;
  v7[1] = v10;
  swift_bridgeObjectRelease(v8);
  sub_1000E1E58(0);
  v11 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber + 8);
  *v11 = v13;
  v11[1] = v14;
  swift_bridgeObjectRelease(v12);
  sub_1000E2058(0);
  v15 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8);
  *v15 = v17;
  v15[1] = v18;
  swift_bridgeObjectRelease(v16);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v19 = *(void **)(v0 + 72);
  v128 = *(_QWORD *)(v0 + 56);
  v20 = *(id *)(v128 + 24);
  v21 = objc_msgSend(v19, "firmwareVersion");
  if (v21)
  {
    v22 = v21;
    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

  }
  else
  {
    v132 = 0;
    v24 = 0;
  }
  v25 = objc_msgSend(*(id *)(v0 + 72), "serialNumber");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v30 = objc_msgSend(*(id *)(v0 + 72), "model");
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0;
  }
  v35 = (uint64_t *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  v36 = v35[3];
  log = v1;
  v134 = v34;
  v137 = v29;
  if (v36 == 2)
  {
    LODWORD(v37) = 0;
  }
  else
  {
    v125 = v27;
    *(_QWORD *)v126 = v20;
    v38 = v35[5];
    type = v35[6];
    v39 = v35[4];
    v40 = v24;
    v42 = v35[1];
    v41 = v35[2];
    v43 = *v35;
    sub_10009B27C(v42, v41);
    sub_10009B27C(v39, v38);
    v44 = v42;
    v24 = v40;
    v45 = v38;
    v27 = v125;
    v20 = *(id *)v126;
    sub_100141DBC(v43, v44, v41, v36, v39, v45, type, (void (*)(uint64_t, uint64_t))sub_10009B2FC);
    v37 = (v36 >> 8) & 1;
  }
  v46 = *(_QWORD *)(v0 + 64);
  v47 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  v48 = *(_QWORD *)(v46 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v48)
  {
    v48 = *(_QWORD *)(v48 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
    if (v48)
      LOBYTE(v48) = *(_BYTE *)(v48 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth);
  }
  v49 = *(void **)(v0 + 72);
  sub_1001627E0(v20, v132, v24, v27, v137, v32, v134, v37, v48);

  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v137);
  swift_bridgeObjectRelease(v24);
  sub_10012F324(v49, 0);
  v50 = *(void **)(v46 + v47);
  if (!v50)
    goto LABEL_24;
  v51 = *(void **)(*(_QWORD *)(v0 + 56) + 32);
  v52 = v50;
  if (!v51)
  {
    v54 = (id)swift_errorRelease(0);
    __break(1u);
    goto LABEL_46;
  }
  v53 = v52;
  v54 = objc_msgSend(v51, "identifier");
  if (!v54)
  {
LABEL_46:
    result = swift_errorRelease(v54);
    __break(1u);
    return result;
  }
  v55 = v54;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v58 = v57;

  v59 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
  if (*(_QWORD *)&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
    v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    v60 = *(id *)&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
    sub_1001319A0(v56, v58, 4, v59, 0);

  }
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v58);

LABEL_24:
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  v61 = *(_QWORD *)(v0 + 56);
  v62 = *(void **)(v0 + 64);
  v63 = &unk_100275000;
  v64 = sub_1001A3E38();
  swift_retain(v61);
  v65 = log;
  v66 = sub_10013BFD0(v64, v61);
  swift_release(v61);
  swift_bridgeObjectRelease(v64);
  v67 = v62;
  sub_10013B0C0(v66, (uint64_t)v67);

  swift_release(v66);
  v68 = *(void **)(*(_QWORD *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  v69 = *(char **)(v61 + 16);
  if (v69 && (v70 = *(void **)&v69[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
  {
    v71 = v68;
    v72 = v69;
    if (objc_msgSend(v70, "state") == (id)2)
    {
      v133 = v72;
      v73 = *(_QWORD *)(v0 + 56);
      v74 = *(NSObject **)(*(_QWORD *)(v0 + 88) + 16);
      *(_QWORD *)v127 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
      ((void (*)(_QWORD))v74)(*(_QWORD *)(v0 + 112));
      swift_retain_n(v73, 2);
      v135 = v71;
      v75 = Logger.logObject.getter(v135);
      v76 = static os_log_type_t.default.getter(v75);
      loga = v74;
      if (os_log_type_enabled(v75, v76))
      {
        v120 = *(_QWORD *)(v0 + 56);
        v124 = v68;
        v77 = swift_slowAlloc(22, -1);
        v78 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v77 = 138412546;
        typea = v76;
        v79 = *(void **)(v128 + 24);
        *(_QWORD *)(v0 + 32) = v79;
        v80 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v77 + 4, v77 + 12);
        *v78 = v79;
        swift_release_n(v120, 2);
        *(_WORD *)(v77 + 12) = 2048;
        *(_QWORD *)(v0 + 40) = 0x404E000000000000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v77 + 14, v77 + 22);

        _os_log_impl((void *)&_mh_execute_header, v75, typea, "Setting accessory reachable %@ after %f secs", (uint8_t *)v77, 0x16u);
        v81 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v78, 1, v81);
        swift_slowDealloc(v78, -1, -1);
        v82 = v77;
        v68 = v124;
        swift_slowDealloc(v82, -1, -1);
      }
      else
      {
        swift_release_n(*(_QWORD *)(v0 + 56), 2);

      }
      v84 = *(_QWORD *)(v0 + 56);
      v85 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8);
      v85(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
      type metadata accessor for DockCoreManager(0, v86, v87, v88);
      v89 = static DockCoreManager.localFirmwarePath.getter();
      v91 = v90;
      sub_100126838(v84, 1, v89, v90, 60.0);
      v63 = &unk_100275000;
      if (v65)
      {
        v136 = v85;
        v92 = *(_QWORD *)(v0 + 96);
        v93 = *(_QWORD *)(v0 + 80);
        v94 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRelease(v91);
        ((void (*)(uint64_t, _QWORD, uint64_t))loga)(v92, *(_QWORD *)v127, v93);
        swift_retain(v94);
        swift_errorRetain(v65);
        swift_retain(v94);
        v95 = swift_errorRetain(v65);
        v96 = Logger.logObject.getter(v95);
        v97 = static os_log_type_t.error.getter();
        v98 = os_log_type_enabled(v96, v97);
        v99 = *(_QWORD *)(v0 + 56);
        if (v98)
        {
          logb = v96;
          v100 = swift_slowAlloc(22, -1);
          v121 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v100 = 138412546;
          v101 = v68;
          v102 = *(void **)(v128 + 24);
          *(_QWORD *)(v0 + 16) = v102;
          v103 = v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v100 + 4, v100 + 12);
          *v121 = v102;
          v68 = v101;
          v63 = (_QWORD *)&unk_100275000;
          swift_release_n(v99, 2);
          *(_WORD *)(v100 + 12) = 2112;
          swift_errorRetain(v65);
          v104 = _swift_stdlib_bridgeErrorToNSError(v65);
          *(_QWORD *)(v0 + 24) = v104;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v100 + 14, v100 + 22);
          v121[1] = v104;
          swift_errorRelease(v65);
          swift_errorRelease(v65);
          _os_log_impl((void *)&_mh_execute_header, logb, v97, "error setting accessory %@ reachable: %@", (uint8_t *)v100, 0x16u);
          v105 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v121, 2, v105);
          swift_slowDealloc(v121, -1, -1);
          swift_slowDealloc(v100, -1, -1);

          swift_errorRelease(v65);
        }
        else
        {

          swift_errorRelease(v65);
          swift_release_n(v99, 2);
          swift_errorRelease(v65);
          swift_errorRelease(v65);

        }
        v136(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
      }
      else
      {
        swift_bridgeObjectRelease(v91);

      }
    }
    else
    {

    }
  }
  else
  {
    v83 = v68;
  }
  v106 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v107 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  v108 = *(os_unfair_lock_s **)&v106[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
  v109 = v106;
  swift_retain(v108);
  os_unfair_lock_lock(v108 + 4);
  swift_release(v108);
  v110 = *(_QWORD *)&v109[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing];
  *(_QWORD *)&v109[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  swift_release(v110);
  v111 = *(os_unfair_lock_s **)&v106[v107];
  swift_retain(v111);
  os_unfair_lock_unlock(v111 + 4);
  swift_release(v111);

  v112 = *(char **)(v61 + 16);
  if (v112 && *(_QWORD *)&v112[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v113 = (void *)v63[246];
    v114 = swift_allocObject(&unk_10023C9B8, 32, 7);
    *(_QWORD *)(v114 + 16) = v113;
    *(_QWORD *)(v114 + 24) = v112;
    v115 = v112;
    v116 = v113;
    sub_1001A3584((uint64_t)sub_1000D2D94, v114);
    swift_release(v114);
    swift_errorRelease(0);

  }
  else
  {
    swift_errorRelease(0);
  }

  v117 = *(_QWORD *)(v0 + 104);
  v118 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100133704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  _BYTE *v66;
  _BYTE *v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _QWORD *v81;
  void *v82;
  char *v83;
  void *v84;
  id v85;
  char *v86;
  uint64_t v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  NSObject *v105;
  char *v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  char *v109;
  uint64_t v110;
  os_unfair_lock_s *v111;
  char *v112;
  void *v113;
  uint64_t v114;
  char *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t result;
  _QWORD *v120;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v123;
  id v124;
  os_log_t log;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v3);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 152);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 48) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accessory Description transfer request failed with %@", v10, 0xCu);
    v13 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 152);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  v129 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  v15 = *(_QWORD *)(v0 + 56);
  sub_1000E1B64(0);
  v16 = (_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  v17 = *(_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8);
  *v16 = v18;
  v16[1] = v19;
  swift_bridgeObjectRelease(v17);
  sub_1000E1B70(0);
  v20 = (_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  v21 = *(_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8);
  *v20 = v22;
  v20[1] = v23;
  swift_bridgeObjectRelease(v21);
  sub_1000E1E58(0);
  v24 = (_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  v25 = *(_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber + 8);
  *v24 = v26;
  v24[1] = v27;
  swift_bridgeObjectRelease(v25);
  sub_1000E2058(0);
  v28 = (_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  v29 = *(_QWORD *)(v15 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8);
  *v28 = v30;
  v28[1] = v31;
  swift_bridgeObjectRelease(v29);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v32 = *(void **)(v0 + 72);
  v123 = *(_QWORD *)(v0 + 56);
  v124 = *(id *)(v123 + 24);
  v33 = objc_msgSend(v32, "firmwareVersion");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v38 = objc_msgSend(*(id *)(v0 + 72), "serialNumber");
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0;
  }
  v43 = objc_msgSend(*(id *)(v0 + 72), "model");
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  v48 = (uint64_t *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  v49 = v48[3];
  v126 = v42;
  v128 = v37;
  log = v47;
  if (v49 == 2)
  {
    LODWORD(v50) = 0;
  }
  else
  {
    type = v48[6];
    v51 = v35;
    v52 = v48[4];
    v53 = v48[5];
    v55 = v48[1];
    v54 = v48[2];
    v56 = v40;
    v57 = *v48;
    sub_10009B27C(v55, v54);
    sub_10009B27C(v52, v53);
    v58 = v57;
    v40 = v56;
    v59 = v53;
    v35 = v51;
    sub_100141DBC(v58, v55, v54, v49, v52, v59, type, (void (*)(uint64_t, uint64_t))sub_10009B2FC);
    v50 = (v49 >> 8) & 1;
  }
  v60 = *(_QWORD *)(v0 + 64);
  v61 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  v62 = *(_QWORD *)(v60 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v62)
  {
    v62 = *(_QWORD *)(v62 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
    if (v62)
      LOBYTE(v62) = *(_BYTE *)(v62 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth);
  }
  v63 = *(void **)(v0 + 72);
  sub_1001627E0(v124, v35, v128, v40, v126, v45, (uint64_t)log, v50, v62);

  swift_bridgeObjectRelease(log);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v128);
  sub_10012F324(v63, v129);
  v64 = *(void **)(v60 + v61);
  if (!v64)
    goto LABEL_30;
  v65 = *(void **)(*(_QWORD *)(v0 + 56) + 32);
  v66 = v64;
  if (!v65)
  {
    swift_errorRelease(v129);
    __break(1u);
    goto LABEL_47;
  }
  v67 = v66;
  v68 = objc_msgSend(v65, "identifier");
  if (!v68)
  {
LABEL_47:
    result = swift_errorRelease(v129);
    __break(1u);
    return result;
  }
  v69 = v68;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v72 = v71;

  v73 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
  if (*(_QWORD *)&v67[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
    v67[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    if (v129)
      v74 = 5;
    else
      v74 = 4;
    v75 = *(id *)&v67[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
    sub_1001319A0(v70, v72, v74, v73, v129);

  }
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v72);

LABEL_30:
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  v76 = *(_QWORD *)(v0 + 56);
  v77 = *(void **)(v0 + 64);
  v78 = sub_1001A3E38();
  swift_retain(v76);
  v79 = sub_10013BFD0(v78, v76);
  swift_release(v76);
  swift_bridgeObjectRelease(v78);
  v80 = v77;
  sub_10013B0C0(v79, (uint64_t)v80);

  swift_release(v79);
  v81 = &unk_100275000;
  v82 = *(void **)(*(_QWORD *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  v83 = *(char **)(v76 + 16);
  if (v83 && (v84 = *(void **)&v83[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
  {
    v85 = v82;
    v86 = v83;
    if (objc_msgSend(v84, "state") == (id)2)
    {
      v127 = v86;
      v87 = *(_QWORD *)(v0 + 56);
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 112));
      swift_retain_n(v87, 2);
      v88 = v85;
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.default.getter(v89);
      v91 = os_log_type_enabled(v89, v90);
      v92 = *(_QWORD *)(v0 + 56);
      if (v91)
      {
        v93 = swift_slowAlloc(22, -1);
        v120 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v93 = 138412546;
        typea = v90;
        v94 = *(void **)(v123 + 24);
        *(_QWORD *)(v0 + 32) = v94;
        v95 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v93 + 4, v93 + 12);
        *v120 = v94;
        swift_release_n(v92, 2);
        *(_WORD *)(v93 + 12) = 2048;
        *(_QWORD *)(v0 + 40) = 0x404E000000000000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v93 + 14, v93 + 22);

        _os_log_impl((void *)&_mh_execute_header, v89, typea, "Setting accessory reachable %@ after %f secs", (uint8_t *)v93, 0x16u);
        v96 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v120, 1, v96);
        swift_slowDealloc(v120, -1, -1);
        v97 = v93;
        v81 = (_QWORD *)&unk_100275000;
        swift_slowDealloc(v97, -1, -1);
      }
      else
      {
        swift_release_n(v92, 2);

      }
      v99 = *(_QWORD *)(v0 + 56);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
      type metadata accessor for DockCoreManager(0, v100, v101, v102);
      v103 = static DockCoreManager.localFirmwarePath.getter();
      v105 = v104;
      sub_100126838(v99, 1, v103, v104, 60.0);
      swift_bridgeObjectRelease(v105);

    }
    else
    {

    }
  }
  else
  {
    v98 = v82;
  }
  v106 = *(char **)(v81[199] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  v107 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  v108 = *(os_unfair_lock_s **)&v106[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
  v109 = v106;
  swift_retain(v108);
  os_unfair_lock_lock(v108 + 4);
  swift_release(v108);
  v110 = *(_QWORD *)&v109[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing];
  *(_QWORD *)&v109[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  swift_release(v110);
  v111 = *(os_unfair_lock_s **)&v106[v107];
  swift_retain(v111);
  os_unfair_lock_unlock(v111 + 4);
  swift_release(v111);

  v112 = *(char **)(v76 + 16);
  if (v112 && *(_QWORD *)&v112[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    v113 = (void *)qword_1002757B0;
    v114 = swift_allocObject(&unk_10023C9B8, 32, 7);
    *(_QWORD *)(v114 + 16) = v113;
    *(_QWORD *)(v114 + 24) = v112;
    v115 = v112;
    v116 = v113;
    sub_1001A3584((uint64_t)sub_1000D2D94, v114);
    swift_release(v114);
    swift_errorRelease(v129);

  }
  else
  {
    swift_errorRelease(v129);
  }

  v117 = *(_QWORD *)(v0 + 104);
  v118 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001342D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v37 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (uint64_t *)((char *)&v37 - v12);
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v37 - v14);
  v16 = type metadata accessor for Logger(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v20;
  v44 = v19;
  (*(void (**)(char *, uint64_t))(v20 + 16))(v18, a2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger);
  v21 = *(int *)(v4 + 48);
  v22 = a1[1];
  *v15 = *a1;
  v15[1] = v22;
  sub_1000D537C((uint64_t)a1 + v21, (uint64_t)v15 + v21);
  sub_1000ACE4C((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_10026E6B0);
  v42 = v10;
  sub_1000D55A0((uint64_t)v15, (uint64_t)v10, (uint64_t *)&unk_10026E6B0);
  swift_bridgeObjectRetain(v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v47 = v40;
    v41 = a1;
    *(_DWORD *)v26 = 136315138;
    v27 = v26 + 12;
    v38 = v26 + 4;
    v39 = v26;
    v28 = *(int *)(v4 + 48);
    v29 = (uint64_t)v7 + v28;
    v30 = *v13;
    v31 = v13[1];
    *v7 = *v13;
    v7[1] = v31;
    sub_1000D537C((uint64_t)v13 + v28, (uint64_t)v7 + v28);
    swift_bridgeObjectRetain(v31);
    sub_1000D53C0(v29);
    v45 = sub_1000906BC(v30, v31, &v47);
    v32 = v27;
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v38, v32);
    swift_bridgeObjectRelease(v31);
    sub_10009B2C0((uint64_t)v42, (uint64_t *)&unk_10026E6B0);
    sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E6B0);
    v33 = v25;
    v34 = v39;
    _os_log_impl((void *)&_mh_execute_header, v24, v33, "Removing discovered device after successful pairing: %s", v39, 0xCu);
    v35 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_10009B2C0((uint64_t)v42, (uint64_t *)&unk_10026E6B0);
    sub_10009B2C0((uint64_t)v13, (uint64_t *)&unk_10026E6B0);
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v44);
  if (qword_10026BC20 != -1)
    swift_once(&qword_10026BC20, sub_1001A3078);
  return sub_1001A3D28(*a1, a1[1]);
}

uint64_t sub_10013460C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for String.Encoding(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001346A4, 0, 0);
}

uint64_t sub_1001346A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  *(_QWORD *)(v2 + 96) = v3;
  if (v3)
  {
    v4 = type metadata accessor for AccessoryDiagnosticsOptions(0, a2);
    v5 = swift_allocObject(v4, 58, 7);
    *(_QWORD *)(v2 + 104) = v5;
    *(_QWORD *)(v5 + 16) = 0;
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 32) = 0;
    *(_BYTE *)(v5 + 40) = 1;
    *(_QWORD *)(v5 + 48) = 2;
    *(_WORD *)(v5 + 56) = 256;
    v6 = dword_10026CC04;
    swift_retain(v3);
    v7 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v2 + 112) = v7;
    *v7 = v2;
    v7[1] = sub_100134814;
    return sub_1000BD554(v5);
  }
  else
  {
    v9 = type metadata accessor for Errors(0);
    v10 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v9, v10, 0, 0);
    *v11 = 0xD00000000000001ALL;
    v11[1] = 0x80000001001FD190;
    v12 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for Errors.NotFound(_:), v9);
    swift_willThrow(v12);
    v14 = *(_QWORD *)(v2 + 56);
    v13 = *(_QWORD *)(v2 + 64);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_100134814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 112);
  *(_QWORD *)(*v3 + 120) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100134F78;
  }
  else
  {
    *(_QWORD *)(v6 + 128) = a2;
    *(_QWORD *)(v6 + 136) = a1;
    v8 = sub_10013488C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10013488C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 72);
  static String.Encoding.utf8.getter(a1);
  String.data(using:allowLossyConversion:)(v4, 0, v3, v2);
  v8 = v7;
  swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v8 >> 60 != 15)
  {
    v10 = *(_QWORD *)(v1 + 56);
    v11 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 32);
    Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x726F737365636361, 0xED000073676F4C79);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v13 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "dumping accessory logs", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v19 = *(_QWORD *)(v1 + 48);
    v18 = *(_QWORD *)(v1 + 56);
    v20 = *(_QWORD *)(v1 + 40);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    __asm { BR              X8 }
  }
  v9 = *(_QWORD *)(v1 + 96);
  swift_release(*(_QWORD *)(v1 + 104));
  swift_release(v9);
  v21 = *(_QWORD *)(v1 + 56);
  v22 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100134F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100134FD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v5 + 356) = a4;
  *(_QWORD *)(v5 + 160) = a3;
  *(_QWORD *)(v5 + 168) = v4;
  *(_QWORD *)(v5 + 144) = a1;
  *(_QWORD *)(v5 + 152) = a2;
  v6 = type metadata accessor for CharacterSet(0);
  *(_QWORD *)(v5 + 176) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 184) = v7;
  *(_QWORD *)(v5 + 192) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 208) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 216) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v11);
  *(_QWORD *)(v5 + 232) = swift_task_alloc(v11);
  return swift_task_switch(sub_1001350C4, 0, 0);
}

uint64_t sub_1001350C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager);
  *(_QWORD *)(v0 + 240) = v1;
  if (v1)
  {
    v2 = dword_10026D044;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 248) = v3;
    *v3 = v0;
    v3[1] = sub_100135248;
    return sub_1000D6058();
  }
  else
  {
    v5 = type metadata accessor for Errors(0);
    v6 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v5, v6, 0, 0);
    *v7 = 0xD000000000000024;
    v7[1] = 0x8000000100200DC0;
    v8 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, enum case for Errors.NotFound(_:), v5);
    swift_willThrow(v8);
    v9 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100135248(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 248);
  *(_QWORD *)(v6 + 256) = a2;
  *(_QWORD *)(v6 + 264) = a3;
  *(_QWORD *)(v6 + 272) = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100135DF4;
  }
  else
  {
    *(_BYTE *)(v6 + 357) = a1 & 1;
    v8 = sub_100135308;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100135308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  _QWORD *v28;

  if (*(_BYTE *)(v0 + 357) != 1 || (*(_BYTE *)(v0 + 356) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(void **)(v18 + 24);
    if (v17)
    {
      v20 = *(_QWORD *)(v0 + 200);
      v21 = *(_QWORD *)(v0 + 152);
      v22 = v19;
      swift_bridgeObjectRetain(v17);
      v24 = DockCoreInfo.type.getter(v23);
      v25 = *(id *)(v18 + 24);
      DockCoreInfo.identifier.getter(v25);

      v26 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo(0));
      v27 = (id)DockCoreInfo.init(type:name:identifier:)(v24, v21, v17, v20);

    }
    else
    {
      v27 = v19;
    }
    *(_QWORD *)(v0 + 280) = v27;
    v28 = (_QWORD *)swift_task_alloc(dword_10026D054);
    *(_QWORD *)(v0 + 288) = v28;
    *v28 = v0;
    v28[1] = sub_100135550;
    return sub_1000D6DC0();
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 232);
    v2 = *(_QWORD *)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accessory description hash matched, no need to read description", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 216);

    swift_release(v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v13 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100135550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 288);
  v4[37] = a1;
  v4[38] = a2;
  v4[39] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_bridgeObjectRelease(v4[33]);
    v6 = sub_100135E88;
  }
  else
  {
    v6 = sub_100135614;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_100135614(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;

  v2 = v1[38];
  v3 = v1[25];
  v4 = v1[21];
  DockCoreInfo.identifier.getter(a1);
  v5 = objc_allocWithZone((Class)type metadata accessor for AccessoryDescriptionParser(0));
  v6 = sub_1001B2814(v3);
  v7 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser) = v6;

  __asm { BR              X10 }
}

uint64_t sub_1001356D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v3 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 342) = v3;
  *(_WORD *)(v0 + 350) = v2;
  *(_BYTE *)(v0 + 352) = BYTE2(v2);
  *(_BYTE *)(v0 + 353) = BYTE3(v2);
  *(_BYTE *)(v0 + 354) = BYTE4(v2);
  *(_BYTE *)(v0 + 355) = BYTE5(v2);
  v4 = static String._fromUTF8Repairing(_:)(v0 + 342, BYTE6(v2));
  v6 = v5;
  sub_10009B2FC(v3, v2);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 120) = v6;
  v11 = sub_100090E1C((unint64_t *)&unk_10026EA30, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of SetAlgebra.init())(v10, v11);
  *(_DWORD *)(v0 + 320) = 0;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of SetAlgebra.insert(_:))(v61, v62, v10, v11);
  v12 = sub_1000D4CF4();
  v13 = ((uint64_t (*)(uint64_t, void *, unint64_t))StringProtocol.trimmingCharacters(in:))(v8, &type metadata for String, v12);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  v16 = *(void **)(v1 + v63);
  if (!v16)
  {
    __break(1u);
    JUMPOUT(0x100135DE4);
  }
  v17 = v16;
  sub_1001B29F4(v13, v15);
  if (!v7)
  {
    v27 = v18;
    swift_bridgeObjectRelease(v15);

    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0)
        v59 = v27;
      else
        v59 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v27);
      v28 = (void *)_CocoaArrayWrapper.endIndex.getter(v59);
      swift_bridgeObjectRelease(v27);
      if (!v28)
        goto LABEL_10;
    }
    else
    {
      v28 = *(void **)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v28)
        goto LABEL_10;
    }
    if ((v27 & 0xC000000000000001) != 0)
    {
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    }
    else
    {
      if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
        __break(1u);
      v29 = *(id *)(v27 + 32);
    }
    v28 = v29;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    v30 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 16))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 168) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(_QWORD *)(v0 + 208));
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Accessory Description parsed, adding accessory to DataBase", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }
    v35 = *(_QWORD *)(v0 + 216);
    v34 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    if (qword_10026BC00 == -1)
    {
      if (v28)
        goto LABEL_14;
    }
    else
    {
      swift_once(&qword_10026BC00, sub_100158DF8);
      if (v28)
      {
LABEL_14:
        v37 = *(_QWORD *)(v0 + 144);
        v38 = v28;
        v39 = sub_100161B48(v38, 1);

        v40 = *(void **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
        v41 = *(void **)(v37 + 32);
        v60 = v1;
        if (v41)
        {
          v42 = v40;
          v43 = objc_msgSend(v41, "identifier");
          if (v43)
          {
            v44 = v43;
            v45 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v47 = v46;

LABEL_19:
            v50 = *(_QWORD *)(v0 + 296);
            v49 = *(_QWORD *)(v0 + 304);
            v51 = *(void **)(v0 + 280);
            v52 = *(_QWORD *)(v0 + 264);
            v53 = *(_QWORD *)(v0 + 240);
            sub_10014A2DC(*(_QWORD *)(v0 + 256), v52, v45, v47);

            swift_bridgeObjectRelease(v52);
            swift_bridgeObjectRelease(v47);
            v54 = *(void **)(v60 + v63);
            *(_QWORD *)(v60 + v63) = 0;

            sub_10009B2FC(v50, v49);
            swift_release(v53);
            v55 = *(_QWORD *)(v0 + 224);
            v57 = *(_QWORD *)(v0 + 192);
            v56 = *(_QWORD *)(v0 + 200);
            swift_task_dealloc(*(_QWORD *)(v0 + 232));
            swift_task_dealloc(v55);
            swift_task_dealloc(v56);
            swift_task_dealloc(v57);
            v26 = *(uint64_t (**)(void))(v0 + 8);
            return v26();
          }
        }
        else
        {
          v48 = v40;
        }
        v45 = 0;
        v47 = (const void *)0xE000000000000000;
        goto LABEL_19;
      }
    }
    __break(1u);
    JUMPOUT(0x100135DC4);
  }
  v20 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 264);
  v22 = *(_QWORD *)(v0 + 240);

  sub_10009B2FC(v20, v19);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v15);
  swift_release(v22);
  v23 = *(_QWORD *)(v0 + 224);
  v25 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_100135DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 240));
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100135E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 240);

  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100135F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v4);
    swift_errorRetain(a1);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v13;
      *(_DWORD *)v12 = 136315138;
      v18 = v12 + 4;
      swift_getErrorValue(a1, v21, v20);
      v14 = Error.localizedDescription.getter(v20[1], v20[2]);
      v16 = v15;
      v19 = sub_1000906BC(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v18, v12 + 12);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to remove pairing: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_10013611C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[13] = swift_task_alloc(v9);
  v6[14] = swift_task_alloc(v9);
  v6[15] = swift_task_alloc(v9);
  v6[16] = swift_task_alloc(v9);
  v6[17] = swift_task_alloc(v9);
  v6[18] = swift_task_alloc(v9);
  v6[19] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10026D66C);
  v6[20] = v10;
  *v10 = v6;
  v10[1] = sub_1001361E0;
  return sub_1000E27D8();
}

uint64_t sub_1001361E0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_100136234, 0, 0);
}

uint64_t sub_100136234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController), "deRegisterFromNotifications");
  objc_msgSend(*(id *)(v1 + v2), "invalidate");
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = 0;

  sub_10009E60C();
  v4 = (_QWORD *)swift_task_alloc(dword_10026D664);
  *(_QWORD *)(v0 + 168) = v4;
  *v4 = v0;
  v4[1] = sub_1001362BC;
  return sub_1000E23C4();
}

uint64_t sub_1001362BC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100136310, 0, 0);
}

uint64_t sub_100136310()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  char v4;
  char v5;
  char v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v1 = *(id *)(*(_QWORD *)(v0 + 64) + 24);
  sub_10015DAB8(v1);
  v3 = v2;

  if (v3)
  {
    v4 = dispatch thunk of DockCoreAccessory.isMagSafe.getter();
    v5 = dispatch thunk of DockCoreAccessory.certified.getter();
    v6 = dispatch thunk of DockCoreAccessory.needsMigration.getter();

  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
  }
  *(_BYTE *)(v0 + 257) = v4 & 1;
  *(_BYTE *)(v0 + 256) = v5 & 1;
  v7 = *(void **)(*(_QWORD *)(v0 + 64) + 32);
  if (v7 && (v8 = objc_msgSend(v7, "name")) != 0)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  *(_QWORD *)(v0 + 176) = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_10026EA14);
  *(_QWORD *)(v0 + 184) = v13;
  *v13 = v0;
  v13[1] = sub_100136450;
  return sub_100134FD8(*(_QWORD *)(v0 + 64), v10, v12, v6 & 1);
}

uint64_t sub_100136450()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001374B0;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 176));
    v4 = sub_1001364BC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001364BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  char *v50;
  void *v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  void (*v76)(uint64_t, _QWORD, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *log;
  NSObject *loga;
  os_log_type_t type[8];
  uint64_t v102;
  NSObject *v103;
  void (*v104)(uint64_t, uint64_t);
  char *v105;

  v5 = *(_QWORD *)(v4 + 192);
  v6 = *(_QWORD *)(v4 + 96);
  v7 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 200) = type metadata accessor for DockCoreManager(0, a2, a3, a4);
  v8 = static DockCoreManager.diagnosticsCollectionEnabled.getter();
  v9 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  *(_QWORD *)(v4 + 208) = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v10 = v7 + v9;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v4 + 216) = v11;
  v12 = *(_QWORD *)(v4 + 88);
  if ((v8 & 1) != 0)
  {
    v13 = v11(*(_QWORD *)(v4 + 152), v10, v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Diagnostics collection is enabled, initiating.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(_QWORD *)(v4 + 152);
    v18 = *(_QWORD *)(v4 + 88);
    v19 = *(_QWORD *)(v4 + 96);

    v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    *(_QWORD *)(v4 + 224) = v20;
    v20(v17, v18);
    v21 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
    *(_QWORD *)(v4 + 232) = v21;
    *v21 = v4;
    v21[1] = sub_100136CB0;
    return sub_1000DFA04();
  }
  else
  {
    v102 = v5;
    v23 = v11(*(_QWORD *)(v4 + 136), v10, v12);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Diagnostics collection is not enabled, ignoring.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v4 + 136);
    v28 = *(_QWORD *)(v4 + 88);
    v29 = *(_QWORD *)(v4 + 96);

    v104 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v104(v27, v28);
    v30 = *(void **)(v4 + 80);
    v31 = *(id *)(*(_QWORD *)(v4 + 64) + 24);
    v32 = objc_msgSend(v30, "firmwareVersion");
    if (v32)
    {
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v37 = objc_msgSend(*(id *)(v4 + 80), "serialNumber");
    if (v37)
    {
      v38 = v37;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v41 = v40;

    }
    else
    {
      v39 = 0;
      v41 = 0;
    }
    v42 = objc_msgSend(*(id *)(v4 + 80), "model");
    if (v42)
    {
      v43 = v42;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

    }
    else
    {
      v44 = 0;
      v46 = 0;
    }
    v47 = *(_QWORD *)(v4 + 64);
    sub_1001627E0(v31, v34, v36, v39, v41, v44, v46, *(unsigned __int8 *)(v4 + 257), *(_BYTE *)(v4 + 256));

    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v36);
    v48 = *(void **)(v47 + 16);
    if (v48)
    {
      v49 = v48;
      sub_1000DFFA0(0);

      v50 = *(char **)(v47 + 16);
      if (v50)
      {
        v51 = *(void **)&v50[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v51)
        {
          v52 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                  + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
          v53 = v50;
          if (objc_msgSend(v51, "state") == (id)2)
          {
            v54 = *(_QWORD *)(v4 + 64);
            v55 = *(_QWORD *)(v4 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
            (*(void (**)(_QWORD, uint64_t, _QWORD))(v4 + 216))(*(_QWORD *)(v4 + 128), v55, *(_QWORD *)(v4 + 88));
            v56 = v52;
            swift_retain_n(v54, 2);
            v57 = v56;
            v58 = Logger.logObject.getter(v57);
            v59 = static os_log_type_t.default.getter(v58);
            v60 = os_log_type_enabled(v58, v59);
            v61 = *(_QWORD *)(v4 + 64);
            *(_QWORD *)type = v55;
            if (v60)
            {
              v105 = v53;
              v62 = swift_slowAlloc(22, -1);
              log = v58;
              v63 = swift_slowAlloc(8, -1);
              *(_DWORD *)v62 = 138412546;
              v64 = v57;
              v65 = *(void **)(v61 + 24);
              *(_QWORD *)(v4 + 32) = v65;
              v66 = v65;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 32, v4 + 40, v62 + 4, v62 + 12);
              v67 = (_QWORD *)v63;
              v58 = log;
              *v67 = v65;
              v57 = v64;
              swift_release_n(v61, 2);
              *(_WORD *)(v62 + 12) = 2048;
              *(_QWORD *)(v4 + 40) = 0x404E000000000000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 40, v4 + 48, v62 + 14, v62 + 22);

              _os_log_impl((void *)&_mh_execute_header, log, v59, "Setting accessory reachable %@ after %f secs", (uint8_t *)v62, 0x16u);
              v68 = sub_10009061C(&qword_10026BC40);
              swift_arrayDestroy(v67, 1, v68);
              swift_slowDealloc(v67, -1, -1);
              v69 = v62;
              v53 = v105;
              swift_slowDealloc(v69, -1, -1);
            }
            else
            {
              swift_release_n(v61, 2);

            }
            v70 = v102;

            v71 = *(_QWORD *)(v4 + 64);
            v72 = ((uint64_t (*)(_QWORD, _QWORD))v104)(*(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 88));
            v73 = static DockCoreManager.localFirmwarePath.getter(v72);
            v75 = v74;
            sub_100126838(v71, 1, v73, v74, 60.0);
            if (v102)
            {
              v103 = v57;
              v76 = *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 216);
              v77 = *(_QWORD *)(v4 + 104);
              v78 = *(_QWORD *)(v4 + 88);
              v79 = *(_QWORD *)(v4 + 64);
              swift_bridgeObjectRelease(v75);
              v76(v77, *(_QWORD *)type, v78);
              swift_retain(v79);
              swift_errorRetain(v70);
              swift_retain(v79);
              v80 = swift_errorRetain(v70);
              v81 = Logger.logObject.getter(v80);
              v82 = static os_log_type_t.error.getter();
              v83 = os_log_type_enabled(v81, v82);
              v84 = *(_QWORD *)(v4 + 64);
              if (v83)
              {
                v85 = swift_slowAlloc(22, -1);
                v86 = (_QWORD *)swift_slowAlloc(16, -1);
                *(_DWORD *)v85 = 138412546;
                loga = v81;
                v87 = *(void **)(v84 + 24);
                *(_QWORD *)(v4 + 16) = v87;
                v88 = v87;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 16, v4 + 24, v85 + 4, v85 + 12);
                *v86 = v87;
                swift_release_n(v84, 2);
                *(_WORD *)(v85 + 12) = 2112;
                swift_errorRetain(v70);
                v89 = _swift_stdlib_bridgeErrorToNSError(v70);
                *(_QWORD *)(v4 + 24) = v89;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 24, v4 + 32, v85 + 14, v85 + 22);
                v86[1] = v89;
                swift_errorRelease(v70);
                swift_errorRelease(v70);
                _os_log_impl((void *)&_mh_execute_header, loga, v82, "error setting accessory %@ reachable: %@", (uint8_t *)v85, 0x16u);
                v90 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v86, 2, v90);
                swift_slowDealloc(v86, -1, -1);
                swift_slowDealloc(v85, -1, -1);

                v81 = v103;
              }
              else
              {

                swift_errorRelease(v70);
                swift_release_n(v84, 2);
                swift_errorRelease(v70);
              }
              v91 = *(_QWORD *)(v4 + 104);
              v92 = *(_QWORD *)(v4 + 88);
              swift_errorRelease(v70);

              v104(v91, v92);
            }
            else
            {

              swift_bridgeObjectRelease(v75);
            }
          }
          else
          {

          }
        }
      }
    }
    v93 = *(_QWORD *)(v4 + 144);
    v95 = *(_QWORD *)(v4 + 128);
    v94 = *(_QWORD *)(v4 + 136);
    v97 = *(_QWORD *)(v4 + 112);
    v96 = *(_QWORD *)(v4 + 120);
    v98 = *(_QWORD *)(v4 + 104);
    swift_task_dealloc(*(_QWORD *)(v4 + 152));
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_100136CB0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_100136D04, 0, 0);
}

uint64_t sub_100136D04()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 88));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "collecting diagnostics and dumping to sys logs", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 88);

  v5(v6, v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10026EA0C);
  *(_QWORD *)(v0 + 240) = v8;
  *v8 = v0;
  v8[1] = sub_100136DF8;
  return sub_10013460C(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100136DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100137E24;
  else
    v3 = sub_100136E5C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100136E5C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  char *v21;
  void *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  void (*v47)(uint64_t, _QWORD, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *log;
  NSObject *loga;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  os_log_type_t type[8];

  v74 = *(_QWORD *)(v0 + 248);
  v76 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 224);
  v1 = *(void **)(v0 + 80);
  v2 = *(id *)(*(_QWORD *)(v0 + 64) + 24);
  v3 = objc_msgSend(v1, "firmwareVersion");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(*(id *)(v0 + 80), "serialNumber");
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = objc_msgSend(*(id *)(v0 + 80), "model");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = *(_QWORD *)(v0 + 64);
  sub_1001627E0(v2, v5, v7, v10, v12, v15, v17, *(unsigned __int8 *)(v0 + 257), *(_BYTE *)(v0 + 256));

  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v7);
  v19 = *(void **)(v18 + 16);
  if (v19)
  {
    v20 = v19;
    sub_1000DFFA0(0);

    v21 = *(char **)(v18 + 16);
    if (v21)
    {
      v22 = *(void **)&v21[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (v22)
      {
        v23 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
        v24 = v21;
        if (objc_msgSend(v22, "state") == (id)2)
        {
          v25 = *(_QWORD *)(v0 + 64);
          v26 = *(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
          (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 128), v26, *(_QWORD *)(v0 + 88));
          v27 = v23;
          swift_retain_n(v25, 2);
          v28 = v27;
          v29 = Logger.logObject.getter(v28);
          v30 = static os_log_type_t.default.getter(v29);
          v31 = os_log_type_enabled(v29, v30);
          v32 = *(_QWORD *)(v0 + 64);
          *(_QWORD *)type = v26;
          if (v31)
          {
            v73 = v24;
            v33 = swift_slowAlloc(22, -1);
            log = v29;
            v34 = swift_slowAlloc(8, -1);
            *(_DWORD *)v33 = 138412546;
            v35 = v28;
            v36 = *(void **)(v32 + 24);
            *(_QWORD *)(v0 + 32) = v36;
            v37 = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v33 + 4, v33 + 12);
            v38 = (_QWORD *)v34;
            v29 = log;
            *v38 = v36;
            v28 = v35;
            swift_release_n(v32, 2);
            *(_WORD *)(v33 + 12) = 2048;
            *(_QWORD *)(v0 + 40) = 0x404E000000000000;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v33 + 14, v33 + 22);

            _os_log_impl((void *)&_mh_execute_header, log, v30, "Setting accessory reachable %@ after %f secs", (uint8_t *)v33, 0x16u);
            v39 = sub_10009061C(&qword_10026BC40);
            swift_arrayDestroy(v38, 1, v39);
            swift_slowDealloc(v38, -1, -1);
            v40 = v33;
            v24 = v73;
            swift_slowDealloc(v40, -1, -1);
          }
          else
          {
            swift_release_n(v32, 2);

          }
          v41 = v74;

          v42 = *(_QWORD *)(v0 + 64);
          v43 = v76(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
          v44 = static DockCoreManager.localFirmwarePath.getter(v43);
          v46 = v45;
          sub_100126838(v42, 1, v44, v45, 60.0);
          if (v74)
          {
            v75 = v28;
            v47 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 216);
            v48 = *(_QWORD *)(v0 + 104);
            v49 = *(_QWORD *)(v0 + 88);
            v50 = *(_QWORD *)(v0 + 64);
            swift_bridgeObjectRelease(v46);
            v47(v48, *(_QWORD *)type, v49);
            swift_retain(v50);
            swift_errorRetain(v41);
            swift_retain(v50);
            v51 = swift_errorRetain(v41);
            v52 = Logger.logObject.getter(v51);
            v53 = static os_log_type_t.error.getter();
            v54 = os_log_type_enabled(v52, v53);
            v55 = *(_QWORD *)(v0 + 64);
            if (v54)
            {
              v56 = swift_slowAlloc(22, -1);
              v57 = (_QWORD *)swift_slowAlloc(16, -1);
              *(_DWORD *)v56 = 138412546;
              loga = v52;
              v58 = *(void **)(v55 + 24);
              *(_QWORD *)(v0 + 16) = v58;
              v59 = v58;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v56 + 4, v56 + 12);
              *v57 = v58;
              swift_release_n(v55, 2);
              *(_WORD *)(v56 + 12) = 2112;
              swift_errorRetain(v41);
              v60 = _swift_stdlib_bridgeErrorToNSError(v41);
              *(_QWORD *)(v0 + 24) = v60;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v56 + 14, v56 + 22);
              v57[1] = v60;
              swift_errorRelease(v41);
              swift_errorRelease(v41);
              _os_log_impl((void *)&_mh_execute_header, loga, v53, "error setting accessory %@ reachable: %@", (uint8_t *)v56, 0x16u);
              v61 = sub_10009061C(&qword_10026BC40);
              swift_arrayDestroy(v57, 2, v61);
              swift_slowDealloc(v57, -1, -1);
              swift_slowDealloc(v56, -1, -1);

              v52 = v75;
            }
            else
            {

              swift_errorRelease(v41);
              swift_release_n(v55, 2);
              swift_errorRelease(v41);
            }
            v62 = *(_QWORD *)(v0 + 104);
            v63 = *(_QWORD *)(v0 + 88);
            swift_errorRelease(v41);

            v76(v62, v63);
          }
          else
          {

            swift_bridgeObjectRelease(v46);
          }
        }
        else
        {

        }
      }
    }
  }
  v64 = *(_QWORD *)(v0 + 144);
  v66 = *(_QWORD *)(v0 + 128);
  v65 = *(_QWORD *)(v0 + 136);
  v68 = *(_QWORD *)(v0 + 112);
  v67 = *(_QWORD *)(v0 + 120);
  v69 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001374B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  _QWORD *v33;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  char *v62;
  void *v63;
  id v64;
  char *v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_t log;
  os_log_type_t type;
  void (*v91)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v3);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 192);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 56) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accessory description read failed with error: %@", v10, 0xCu);
    v13 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 192);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 200) = type metadata accessor for DockCoreManager(0, v17, v18, v19);
  v20 = static DockCoreManager.diagnosticsCollectionEnabled.getter();
  v21 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v22 = v16 + v21;
  v23 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v15 + 16);
  *(_QWORD *)(v0 + 216) = v23;
  v24 = *(_QWORD *)(v0 + 88);
  if ((v20 & 1) != 0)
  {
    v25 = v23(*(_QWORD *)(v0 + 152), v22, v24);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Diagnostics collection is enabled, initiating.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 96);

    v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    *(_QWORD *)(v0 + 224) = v32;
    v32(v29, v30);
    v33 = (_QWORD *)swift_task_alloc(dword_10026D5BC);
    *(_QWORD *)(v0 + 232) = v33;
    *v33 = v0;
    v33[1] = sub_100136CB0;
    return sub_1000DFA04();
  }
  else
  {
    v35 = v23(*(_QWORD *)(v0 + 136), v22, v24);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Diagnostics collection is not enabled, ignoring.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    v39 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 88);
    v41 = *(_QWORD *)(v0 + 96);

    v91 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v91(v39, v40);
    v42 = *(void **)(v0 + 80);
    v43 = *(id *)(*(_QWORD *)(v0 + 64) + 24);
    v44 = objc_msgSend(v42, "firmwareVersion");
    if (v44)
    {
      v45 = v44;
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

    }
    else
    {
      v46 = 0;
      v48 = 0;
    }
    v49 = objc_msgSend(*(id *)(v0 + 80), "serialNumber");
    if (v49)
    {
      v50 = v49;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

    }
    else
    {
      v51 = 0;
      v53 = 0;
    }
    v54 = objc_msgSend(*(id *)(v0 + 80), "model");
    if (v54)
    {
      v55 = v54;
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v58 = v57;

    }
    else
    {
      v56 = 0;
      v58 = 0;
    }
    v59 = *(_QWORD *)(v0 + 64);
    sub_1001627E0(v43, v46, v48, v51, v53, v56, v58, *(unsigned __int8 *)(v0 + 257), *(_BYTE *)(v0 + 256));

    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v48);
    v60 = *(void **)(v59 + 16);
    if (v60)
    {
      v61 = v60;
      sub_1000DFFA0(0);

      v62 = *(char **)(v59 + 16);
      if (v62)
      {
        v63 = *(void **)&v62[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v63)
        {
          v64 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                  + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
          v65 = v62;
          if (objc_msgSend(v63, "state") == (id)2)
          {
            v66 = *(_QWORD *)(v0 + 64);
            (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(_QWORD *)(v0 + 88));
            v67 = v64;
            swift_retain_n(v66, 2);
            v68 = v67;
            v69 = Logger.logObject.getter(v68);
            v70 = static os_log_type_t.default.getter(v69);
            v71 = os_log_type_enabled(v69, v70);
            v72 = *(_QWORD *)(v0 + 64);
            if (v71)
            {
              type = v70;
              v73 = swift_slowAlloc(22, -1);
              log = (os_log_t)swift_slowAlloc(8, -1);
              *(_DWORD *)v73 = 138412546;
              v74 = v68;
              v75 = *(void **)(v72 + 24);
              *(_QWORD *)(v0 + 32) = v75;
              v76 = v75;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v73 + 4, v73 + 12);
              log->isa = (Class)v75;
              v68 = v74;
              swift_release_n(v72, 2);
              *(_WORD *)(v73 + 12) = 2048;
              *(_QWORD *)(v0 + 40) = 0x404E000000000000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v73 + 14, v73 + 22);

              _os_log_impl((void *)&_mh_execute_header, v69, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v73, 0x16u);
              v77 = sub_10009061C(&qword_10026BC40);
              swift_arrayDestroy(log, 1, v77);
              swift_slowDealloc(log, -1, -1);
              swift_slowDealloc(v73, -1, -1);
            }
            else
            {

              swift_release_n(v72, 2);
            }

            v78 = *(_QWORD *)(v0 + 64);
            v79 = ((uint64_t (*)(_QWORD, _QWORD))v91)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
            v80 = static DockCoreManager.localFirmwarePath.getter(v79);
            v82 = v81;
            sub_100126838(v78, 1, v80, v81, 60.0);

            swift_bridgeObjectRelease(v82);
          }
          else
          {

          }
        }
      }
    }
    v83 = *(_QWORD *)(v0 + 144);
    v85 = *(_QWORD *)(v0 + 128);
    v84 = *(_QWORD *)(v0 + 136);
    v87 = *(_QWORD *)(v0 + 112);
    v86 = *(_QWORD *)(v0 + 120);
    v88 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100137E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_t log;
  os_log_type_t type;
  uint64_t (*v61)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 248);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 248);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Diagnostics transfer request failed with %@", v6, 0xCu);
    v9 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 248);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88));
  v11 = *(void **)(v0 + 80);
  v61 = *(uint64_t (**)(_QWORD, _QWORD))(v0 + 224);
  v12 = *(id *)(*(_QWORD *)(v0 + 64) + 24);
  v13 = objc_msgSend(v11, "firmwareVersion");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(*(id *)(v0 + 80), "serialNumber");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(*(id *)(v0 + 80), "model");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = *(_QWORD *)(v0 + 64);
  sub_1001627E0(v12, v15, v17, v20, v22, v25, v27, *(unsigned __int8 *)(v0 + 257), *(_BYTE *)(v0 + 256));

  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v17);
  v29 = *(void **)(v28 + 16);
  if (v29)
  {
    v30 = v29;
    sub_1000DFFA0(0);

    v31 = *(char **)(v28 + 16);
    if (v31)
    {
      v32 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (v32)
      {
        v33 = objc_retain(*(id *)(*(_QWORD *)(qword_100275638
                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
        v34 = v31;
        if (objc_msgSend(v32, "state") == (id)2)
        {
          v35 = *(_QWORD *)(v0 + 64);
          (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(_QWORD *)(v0 + 88));
          v36 = v33;
          swift_retain_n(v35, 2);
          v37 = v36;
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.default.getter(v38);
          v40 = os_log_type_enabled(v38, v39);
          v41 = *(_QWORD *)(v0 + 64);
          if (v40)
          {
            type = v39;
            v42 = swift_slowAlloc(22, -1);
            log = (os_log_t)swift_slowAlloc(8, -1);
            *(_DWORD *)v42 = 138412546;
            v43 = v37;
            v44 = *(void **)(v41 + 24);
            *(_QWORD *)(v0 + 32) = v44;
            v45 = v44;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v42 + 4, v42 + 12);
            log->isa = (Class)v44;
            v37 = v43;
            swift_release_n(v41, 2);
            *(_WORD *)(v42 + 12) = 2048;
            *(_QWORD *)(v0 + 40) = 0x404E000000000000;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v42 + 14, v42 + 22);

            _os_log_impl((void *)&_mh_execute_header, v38, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v42, 0x16u);
            v46 = sub_10009061C(&qword_10026BC40);
            swift_arrayDestroy(log, 1, v46);
            swift_slowDealloc(log, -1, -1);
            swift_slowDealloc(v42, -1, -1);
          }
          else
          {
            swift_release_n(v41, 2);

          }
          v47 = *(_QWORD *)(v0 + 64);
          v48 = v61(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
          v49 = static DockCoreManager.localFirmwarePath.getter(v48);
          v51 = v50;
          sub_100126838(v47, 1, v49, v50, 60.0);

          swift_bridgeObjectRelease(v51);
        }
        else
        {

        }
      }
    }
  }
  v52 = *(_QWORD *)(v0 + 144);
  v54 = *(_QWORD *)(v0 + 128);
  v53 = *(_QWORD *)(v0 + 136);
  v56 = *(_QWORD *)(v0 + 112);
  v55 = *(_QWORD *)(v0 + 120);
  v57 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10013872C(void *a1, void *a2, id a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  id v36;
  id v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char v44;
  id v45;
  char v46;
  id v47;
  char v48;
  void *v49;
  objc_class *v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  char *v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  os_unfair_lock_s *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  os_unfair_lock_s *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  unint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92[4];
  char v93[24];
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return;
  v13 = objc_msgSend(a2, "cbCharacteristic");
  if (!v13)
    return;
  if (!a1)
  {

    return;
  }
  v90 = v13;
  v14 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  v85 = v10;
  v86 = v9;
  v83 = v4;
  v84 = v12;
  if (!v14)
  {
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v36 = a1;
    goto LABEL_28;
  }
  v87 = a3;
  v88 = a4;
  v15 = v14;
  v89 = a1;
  v16 = objc_msgSend(a1, "identifier");
  if (!v16)
  {
    __break(1u);
    return;
  }
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  v21 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v22 = *(id *)&v15[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v23 = &v15[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v15[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v93, 0, 0);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
  if (!v25)
  {
LABEL_21:
    v37 = *(id *)&v15[v21];
    OS_dispatch_semaphore.signal()();

    v96 = 0;
    v94 = 0u;
    v95 = 0u;

    goto LABEL_24;
  }
  v81 = v21;
  v82 = v15;
  v26 = v24 + 32;
  swift_bridgeObjectRetain(v24);
  while (1)
  {
    sub_10009AFF4(v26, (uint64_t)&v91);
    v27 = *(void **)(*sub_10009B038(&v91, v92[2]) + 32);
    if (!v27)
      goto LABEL_9;
    v28 = v27;
    v29 = objc_msgSend(v28, "identifier");
    if (v29)
      break;
LABEL_8:

LABEL_9:
    sub_100090E88(&v91);
    v26 += 40;
    if (!--v25)
    {
      swift_bridgeObjectRelease(v24);
      v15 = v82;
      v21 = v81;
      goto LABEL_21;
    }
  }
  v30 = v29;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v33 = v32;

  if (v31 != v18 || v33 != v20)
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v18, v20, 0);
    swift_bridgeObjectRelease(v33);
    if ((v35 & 1) != 0)
      goto LABEL_23;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v24);
  v24 = v20;
LABEL_23:
  swift_bridgeObjectRelease(v24);
  v38 = v82;
  v39 = *(id *)&v82[v81];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)&v91, (uint64_t)&v94);
  sub_100090E88(&v91);

LABEL_24:
  swift_bridgeObjectRelease(v20);
  a4 = v88;
  a1 = v89;
  a3 = v87;
  if (!*((_QWORD *)&v95 + 1))
  {
LABEL_28:
    sub_10009B2C0((uint64_t)&v94, (uint64_t *)&unk_10026DF40);
    v42 = 0;
    goto LABEL_29;
  }
  v40 = sub_10009061C(&qword_10026C2E0);
  v41 = type metadata accessor for DaemonAccessory(0);
  if (swift_dynamicCast(&v91, &v94, v40, v41, 6))
    v42 = v91;
  else
    v42 = 0;
LABEL_29:
  sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  v43 = objc_msgSend(v90, "UUID");
  if (qword_10026BB98 != -1)
    swift_once(&qword_10026BB98, sub_10012E1F8);
  v44 = static NSObject.== infix(_:_:)(v43, qword_100275578);

  if ((v44 & 1) != 0)
    goto LABEL_42;
  v45 = objc_msgSend(v90, "UUID");
  if (qword_10026BBA0 != -1)
    swift_once(&qword_10026BBA0, sub_10012E2C8);
  v46 = static NSObject.== infix(_:_:)(v45, qword_100275580);

  if ((v46 & 1) != 0)
    goto LABEL_42;
  v47 = objc_msgSend(v90, "UUID");
  if (qword_10026BBC0 != -1)
    swift_once(&qword_10026BBC0, sub_10012E608);
  v48 = static NSObject.== infix(_:_:)(v47, qword_1002755A0);

  if ((v48 & 1) == 0)
  {
LABEL_42:
    if (v42)
    {
      swift_retain(v42);
      v68 = objc_msgSend(v90, "UUID");
      sub_100178F98((uint64_t)v68, (uint64_t)a3, a4, 0);

      swift_release_n(v42, 2);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (!v42)
  {
LABEL_44:

    goto LABEL_45;
  }
  v49 = *(void **)(v42 + 24);
  v50 = (objc_class *)type metadata accessor for AccessorySystemEvent(0);
  v51 = objc_allocWithZone(v50);
  v52 = v49;
  sub_10009B27C((uint64_t)a3, a4);
  v53 = AccessorySystemEvent.init(data:name:)(a3, a4, 1414743380, 0xE400000000000000);
  if (!v53)
    goto LABEL_59;
  v54 = (void *)v53;
  v87 = v52;
  v88 = (unint64_t)v50;
  v55 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v83 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v86);
  sub_10009B27C((uint64_t)a3, a4);
  v56 = v54;
  sub_10009B27C((uint64_t)a3, a4);
  v57 = v56;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = swift_slowAlloc(15, -1);
    v89 = a1;
    v61 = a4;
    v62 = v60;
    v83 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v94 = v83;
    *(_DWORD *)v62 = 136315394;
    sub_100117E20((uint64_t)a3, v61);
    v64 = v63;
    v91 = sub_1000906BC(v65, v63, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v64);
    sub_10009B2FC((uint64_t)a3, v61);
    v66 = sub_10009B2FC((uint64_t)a3, v61);
    *(_WORD *)(v62 + 12) = 256;
    LOBYTE(v64) = AccessorySystemEvent.header.getter(v66);

    LOBYTE(v91) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, (char *)&v91 + 1, v62 + 14, v62 + 15);

    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Got accessory event: %s -> %hhu", (uint8_t *)v62, 0xFu);
    v67 = v83;
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    a1 = v89;
    swift_slowDealloc(v62, -1, -1);

  }
  else
  {

    sub_10009B2FC((uint64_t)a3, a4);
    sub_10009B2FC((uint64_t)a3, a4);

  }
  v69 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v55, v86);
  v70 = AccessorySystemEvent.header.getter(v69);
  v71 = static AccessorySystemEvent.kHeaderCameraShutter.getter();
  if (v70 != v71)
    goto LABEL_53;
  v72 = AccessorySystemEvent.payload.getter();
  v71 = static AccessorySystemEvent.kHeaderEventRelease.getter();
  if (v72 != v71)
    goto LABEL_53;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v71 = sub_10015D4FC();
  if ((v71 & 1) == 0)
  {
    sub_10015CDF4();

    swift_release(v42);
  }
  else
  {
LABEL_53:
    v73 = AccessorySystemEvent.header.getter(v71);
    if (v73 == static AccessorySystemEvent.kHeaderCameraFlip.getter())
    {
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v74 = qword_100275638;
      if ((sub_10015D4FC() & 1) != 0)
      {
        v75 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        v76 = *(os_unfair_lock_s **)(v74 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain(v76);
        os_unfair_lock_lock(v76 + 4);
        swift_release(v76);
        v77 = sub_1001B2320((uint64_t)_swiftEmptyArrayStorage);
        v78 = (unint64_t *)(v74 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
        swift_beginAccess(v74 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions, &v94, 1, 0);
        v79 = *v78;
        *v78 = v77;
        swift_bridgeObjectRelease(v79);
        v80 = *(os_unfair_lock_s **)(v74 + v75);
        swift_retain(v80);
        os_unfair_lock_unlock(v80 + 4);
        swift_release(v80);
      }
    }
    v52 = v87;
    sub_100140E98((uint64_t)v87, (uint64_t)v57);

LABEL_59:
    swift_release(v42);
LABEL_45:

  }
}

void sub_100139200(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  Class isa;
  uint64_t v65;
  os_log_t v66;
  uint64_t v67;
  os_log_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  void *v72;
  _BYTE *v73;
  id v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  uint8_t *v84;
  uint64_t v85;
  os_log_t v86;
  void (*v87)(char *, uint64_t);
  void (*v88)(char *, NSObject *, uint64_t);
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[5];

  v95 = a3;
  v90 = a5;
  v91 = a6;
  v93 = a1;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v92 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v84 - v20;
  __chkstk_darwin(v19);
  v23 = ((char *)&v84 - v22);
  v24 = a2;
  v26 = v25;
  sub_1000ACE4C(v24, (uint64_t)v14, &qword_10026EA20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v26) == 1)
  {
    sub_10009B2C0((uint64_t)v14, &qword_10026EA20);
    return;
  }
  (*(void (**)(NSObject *, char *, uint64_t))(v16 + 32))(v23, v14, v26);
  if (a4 >> 60 == 15)
  {
    (*(void (**)(NSObject *, uint64_t))(v16 + 8))(v23, v26);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v94 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
  v88 = *(void (**)(char *, NSObject *, uint64_t))(v16 + 16);
  v88(v21, v23, v26);
  v89 = a4;
  v27 = sub_10009B27C(v95, a4);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v86 = v28;
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = swift_slowAlloc(32, -1);
    v97[0] = v85;
    v31 = v26;
    v32 = v23;
    v84 = v30;
    *(_DWORD *)v30 = 136315138;
    v33 = v30 + 12;
    v87 = (void (*)(char *, uint64_t))(v30 + 4);
    v34 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v31, v34);
    v37 = v36;
    v96 = sub_1000906BC(v35, v36, v97);
    v38 = v33;
    v23 = v32;
    v26 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v87, v38);
    swift_bridgeObjectRelease(v37);
    v87 = *(void (**)(char *, uint64_t))(v16 + 8);
    v87(v21, v31);
    v28 = v86;
    v39 = v84;
    _os_log_impl((void *)&_mh_execute_header, v86, v29, "Request to validate SW token: %s", v84, 0xCu);
    v40 = v85;
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    v87 = *(void (**)(char *, uint64_t))(v16 + 8);
    v87(v21, v26);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v41 = v93;
  if (!v93)
  {
    __break(1u);
    goto LABEL_24;
  }
  v42 = (uint64_t)v92;
  v86 = v23;
  v88(v92, v23, v26);
  v43 = type metadata accessor for AccessoryServer(0);
  v97[3] = v43;
  v97[4] = (uint64_t)&off_10023C908;
  v44 = (void *)v94;
  v97[0] = v94;
  v45 = type metadata accessor for DockAccessorySWAuth(0);
  v46 = swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v47 = sub_1000D4D38((uint64_t)v97, v43);
  __chkstk_darwin(v47);
  v49 = (uint64_t *)((char *)&v84 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v50 + 16))(v49);
  v51 = *v49;
  v52 = v95;
  v53 = v89;
  sub_10009E38C(v95, v89);
  v54 = v44;
  v55 = v41;
  v56 = sub_100141428(v51, v55, v42, v52, v53, v46);
  sub_10009E3A0(v52, v53);

  sub_100090E88(v97);
  v57 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth;
  v58 = *(_QWORD *)&v54[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth];
  *(_QWORD *)&v54[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = v56;
  swift_release(v58);
  v60 = *(_QWORD *)&v54[v57];
  if (!v60)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v61 = (void *)objc_opt_self(MFAATokenManager, v59);
  v62 = *(_QWORD *)(v60 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  v63 = *(_QWORD *)(v60 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  swift_retain(v60);
  sub_10009B27C(v62, v63);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v62, v63);
  LODWORD(v61) = objc_msgSend(v61, "isTokenValidForFeatures:token:", 32, isa);
  swift_release(v60);

  if (!(_DWORD)v61)
  {
    v69 = sub_1000ABB30();
    v70 = swift_allocError(&type metadata for DockdError, v69, 0, 0);
    *v71 = 5;
    sub_10012F324(0, v70);
    swift_errorRelease(v70);
    v72 = *(void **)&v54[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
    if (!v72)
    {
      v87((char *)v86, v26);
      sub_10009E3A0(v95, v89);
      return;
    }
    v73 = v72;
    v74 = objc_msgSend(v55, "identifier");
    if (v74)
    {
      v75 = v74;
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v78 = v77;

      v79 = swift_allocError(&type metadata for DockdError, v69, 0, 0);
      *v80 = 5;
      v81 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
      v82 = v81;
      if (*(_QWORD *)&v73[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
      {
        v73[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
        v83 = *(id *)&v73[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
        sub_1001319A0(v76, v78, 5, v82, v79);
        swift_bridgeObjectRelease(v82);

      }
      else
      {
        swift_bridgeObjectRelease(v81);
      }
      swift_errorRelease(v79);

      swift_bridgeObjectRelease(v78);
      sub_10009E3A0(v95, v89);
      v68 = v86;
      goto LABEL_21;
    }
LABEL_27:
    __break(1u);
    return;
  }
  v65 = *(_QWORD *)&v54[v57];
  if (!v65)
    goto LABEL_25;
  v66 = v86;
  v67 = v91;
  if (!v91)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_retain(v65);
  sub_1001876F0(v90, v67);
  swift_release(v65);
  sub_10009E3A0(v95, v89);
  v68 = v66;
LABEL_21:
  v87((char *)v68, v26);
}

id sub_100139C70(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t *);
  BOOL v18;
  _BYTE *v19;
  id result;
  void *v21;
  _BYTE *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  id v37;

  v36[0] = a3;
  v9 = &qword_10026EA20;
  v10 = sub_10009061C(&qword_10026EA20);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v36 - v14;
  v16 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth;
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(v4
                                                             + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth);
  sub_1000ACE4C(a2, (uint64_t)v36 - v14, &qword_10026EA20);
  if (v17)
    v18 = a4 >> 60 == 15;
  else
    v18 = 1;
  if (!v18)
  {
    v9 = (uint64_t *)type metadata accessor for UUID(0);
    v5 = *(v9 - 1);
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(v5 + 48);
    if (v17(v15, 1, v9) != 1)
    {
LABEL_13:
      result = (id)sub_10009B2C0((uint64_t)v15, &qword_10026EA20);
      v32 = *(_QWORD *)(v4 + v16);
      if (v32)
      {
        sub_1000ACE4C(a2, (uint64_t)v13, &qword_10026EA20);
        result = (id)v17(v13, 1, v9);
        if ((_DWORD)result != 1)
        {
          swift_retain(v32);
          sub_10018904C(v36[0], a4, (uint64_t)v13);
          swift_release(v32);
          return (id)(*(uint64_t (**)(char *, uint64_t *))(v5 + 8))(v13, v9);
        }
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
  }
  sub_10009B2C0((uint64_t)v15, &qword_10026EA20);
  v13 = (char *)sub_1000ABB30();
  a4 = swift_allocError(&type metadata for DockdError, v13, 0, 0);
  *v19 = 7;
  sub_10012F324(0, a4);
  result = (id)swift_errorRelease(a4);
  v21 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v21)
  {
    if (a1)
    {
      v22 = v21;
      result = objc_msgSend(a1, "identifier", v36[0]);
      if (result)
      {
        v23 = result;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
        v26 = v25;

        v27 = swift_allocError(&type metadata for DockdError, v13, 0, 0);
        *v28 = 7;
        v29 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
        v30 = v29;
        if (*(_QWORD *)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
          v31 = *(id *)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_1001319A0(v24, v26, 5, v30, v27);
          swift_bridgeObjectRelease(v30);

        }
        else
        {
          swift_bridgeObjectRelease(v29);
        }
        swift_errorRelease(v27);

        swift_bridgeObjectRelease(v26);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_18:
  v37 = 0;
  if (objc_msgSend(a1, "stopPairingWithError:", &v37, v36[0]))
    return v37;
  v36[0] = (uint64_t)v37;
  v33 = v37;
  v34 = _convertNSErrorToError(_:)(v36[0]);

  swift_willThrow(v35);
  return (id)swift_errorRelease(v34);
}

void sub_10013A13C(void *a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD aBlock[6];

  v6 = v2;
  v9 = *(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth];
  *(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = 0;
  swift_release(v9);
  if (a2)
  {
    sub_10012F324(0, a2);
    v10 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
    if (!v10)
    {
      if (a1)
        goto LABEL_15;
      __break(1u);
      goto LABEL_14;
    }
    if (a1)
    {
      v3 = v10;
      v11 = objc_msgSend(a1, "identifier");
      if (v11)
      {
        v12 = v11;
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v4 = v14;

        v5 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
        if (*(_QWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
          v15 = *(id *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_1001319A0(v13, v4, 5, v5, a2);

          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v5);

LABEL_15:
          v22 = *(void **)&v6[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
          aBlock[4] = MotionFeedback.init(positions:velocities:);
          aBlock[5] = 0;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1001873D4;
          aBlock[3] = &unk_10023C958;
          v23 = _Block_copy(aBlock);
          v24 = v22;
          objc_msgSend(a1, "removePairingForCurrentControllerOnQueue:completion:", v24, v23);
          _Block_release(v23);

          return;
        }
LABEL_14:

        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v5);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  v25 = objc_msgSend(objc_allocWithZone((Class)HAPAccessoryPairingRequest), "init");
  objc_msgSend(v25, "setRequiresUserConsent:", 0);
  objc_msgSend(v25, "setPairingIdentity:", 0);
  v16 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
  if (!v16)
  {
    if (a1)
      goto LABEL_19;
    __break(1u);
    goto LABEL_18;
  }
  if (!a1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = v16;
  v17 = objc_msgSend(a1, "identifier");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    a2 = v20;

    v3 = (_BYTE *)sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    if (*(_QWORD *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
    {
      v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 5;
      v21 = *(id *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
      sub_1001319A0(v19, a2, 2, (uint64_t)v3, 0);

      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v3);

LABEL_19:
      objc_msgSend(a1, "tearDownSessionOnAuthCompletion");
      objc_msgSend(a1, "startPairingWithRequest:", v25);

      return;
    }
LABEL_18:

    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v3);
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

id sub_10013A54C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;
  _QWORD *v23;

  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x726576726573, 0xE600000000000000);
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager] = 0;
  v20 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue;
  v11 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  v23 = _swiftEmptyArrayStorage;
  v12 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10009061C(&qword_10026D000);
  v14 = sub_1000D5BAC((unint64_t *)&qword_10026C540, &qword_10026D000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v13, v14, v4, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x8000000100200DF0, v9, v6, v3, 0);
  *(_QWORD *)&v10[v20] = v15;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval] = 0xBFF0000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = 0;
  v16 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_virtualEventService;
  *(_QWORD *)&v10[v16] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VirtualEventService(0)), "init");

  v17 = (objc_class *)type metadata accessor for AccessoryServer(0);
  v22.receiver = v10;
  v22.super_class = v17;
  return objc_msgSendSuper2(&v22, "init");
}

id sub_10013A80C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryServer(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10013A8D0()
{
  return type metadata accessor for AccessoryServer(0);
}

uint64_t type metadata accessor for AccessoryServer(uint64_t a1)
{
  uint64_t result;

  result = qword_10026E9F8;
  if (!qword_10026E9F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryServer);
  return result;
}

uint64_t sub_10013A914(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = "\b";
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10013A9AC(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  Swift::String v18;
  uint64_t v19;
  uint8_t *v20;
  Class isa;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    sub_10013A13C(a1, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v9);
    sub_10009B27C(a2, a3);
    v13 = sub_10009B27C(a2, a3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      v25 = a1;
      v17 = (uint8_t *)v16;
      v24 = swift_slowAlloc(32, -1);
      v27 = v24;
      *(_DWORD *)v17 = 136315138;
      v23 = v17 + 4;
      v18 = Data.base64EncodedString(options:)(0);
      v26 = sub_1000906BC(v18._countAndFlagsBits, (unint64_t)v18._object, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23, v17 + 12);
      swift_bridgeObjectRelease(v18._object);
      sub_10009B2FC(a2, a3);
      sub_10009B2FC(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Provisioning new SW auth token: %s", v17, 0xCu);
      v19 = v24;
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v20 = v17;
      a1 = v25;
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_10009B2FC(a2, a3);
      sub_10009B2FC(a2, a3);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "provisionToken:", isa);

  }
}

uint64_t sub_10013AC10(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10009B27C(a1, a2);
  sub_10013AE60(a1, a2);
  v5 = v4;
  sub_10009B2FC(a1, a2);
  v6 = static String._fromUTF8Repairing(_:)(v5 + 32, *(_QWORD *)(v5 + 16));
  swift_release(v5);
  return v6;
}

uint64_t sub_10013AC84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, v4);
  *a3 = result;
  a3[1] = v6;
  return result;
}

_QWORD *sub_10013ACBC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = (_QWORD *)__DataStorage._bytes.getter();
  v9 = (uint64_t)result;
  if (result)
  {
    result = (_QWORD *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - (_QWORD)result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = sub_10013AE14(v9, v15, a4);
  if (v4)
    return (_QWORD *)v16;
  return result;
}

unint64_t sub_10013AD68(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
    return specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return swift_retain(*(_QWORD *)(a2 + 8 * result + 32));
  }
  __break(1u);
  return result;
}

_QWORD *sub_10013ADC0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 1) != 0)
    return 0;
  v6 = a3;
  result = a1(&v7, &v6);
  if (!v4)
    return (_QWORD *)v7;
  return result;
}

_QWORD *sub_10013AE14(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

void sub_10013AE60(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_10013AEDC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_10009061C(&qword_10026BF40);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10009B27C(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_10009B2FC(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x10013AFB0);
    }
  }
  return v4;
}

unint64_t sub_10013AFC8@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;

  result = sub_10013AD68(*a1, *a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_10013B004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (!a1)
    a2 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10013B038(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

void sub_10013B0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v26 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v4 = __chkstk_darwin(v26);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v24 - v7);
  v9 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v25 = (unint64_t)(v10 + 63) >> 6;
  v28 = a1;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    v16 = *(_QWORD *)(v28 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = type metadata accessor for BTDiscoveredDevice(0);
    sub_1000D537C(v16 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, (uint64_t)v8 + *(int *)(v26 + 48));
    *v8 = v18;
    v8[1] = v19;
    sub_1000D55A0((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_10026E6B0);
    swift_bridgeObjectRetain(v19);
    sub_1001342D4(v6, v27);
    sub_10009B2C0((uint64_t)v6, (uint64_t *)&unk_10026E6B0);
    if (v2)
      goto LABEL_24;
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v13);
  if (v22)
  {
LABEL_19:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v13 << 6);
    goto LABEL_5;
  }
  v23 = v13 + 1;
  if (v13 + 1 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 2;
  if (v13 + 2 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 3;
  if (v13 + 3 >= v25)
    goto LABEL_24;
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 4;
  if (v13 + 4 >= v25)
  {
LABEL_24:
    swift_release(v28);
    return;
  }
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v13 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v25)
      goto LABEL_24;
    v22 = *(_QWORD *)(v24 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10013B32C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *i;
  uint64_t v10;
  id v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v5 = result + 40;
    v6 = -(uint64_t)v2;
    v16 = result + 40;
    v17 = *(_QWORD *)(result + 16);
    do
    {
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      v8 = -(uint64_t)v7;
      for (i = (_OWORD *)(v5 + 24 * v4++); ; i = (_OWORD *)((char *)i + 24))
      {
        if (v8 + v4 == 1)
        {
          __break(1u);
          return result;
        }
        v10 = *((_QWORD *)i - 1);
        v18 = *i;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        swift_bridgeObjectRetain(v18);
        v11 = *((id *)&v18 + 1);
        if ((static NSObject.== infix(_:_:)(v11, a2) & 1) != 0)
          break;

        result = swift_bridgeObjectRelease(v18);
        ++v4;
        if (v6 + v4 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1001A50C8(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v5 = v16;
      v12 = v18;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        result = sub_1001A50C8(v13 > 1, v14 + 1, 1);
        v12 = v18;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[3 * v14];
      v15[4] = v10;
      *(_OWORD *)(v15 + 5) = v12;
      v2 = v17;
    }
    while (v6 + v4);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10013B4E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_22;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*a1);
  if (!v6)
  {
LABEL_14:
    swift_bridgeObjectRelease(v5);
    v17 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      if (v17 < 0)
        v21 = *a1;
      else
        v21 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a1);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v17);
      return v22;
    }
    return *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
LABEL_3:
  v7 = 0;
  v52 = a2;
  v53 = a3;
  while (1)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8 * v7 + 32);
      swift_retain(v8);
    }
    v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_10009B27C(v10, v9);
    sub_10011CAC4(v10, v9);
    v12 = v11;
    v14 = v13;
    sub_10009B2FC(v10, v9);
    a2 = v53;
    if (v12 == v52 && v14 == v53)
      break;
    a3 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v52, v53, 0);
    swift_release(v8);
    swift_bridgeObjectRelease(v14);
    if ((a3 & 1) != 0)
      goto LABEL_17;
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_22:
      if (v5 < 0)
        v20 = v5;
      else
        v20 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v6)
        goto LABEL_14;
      goto LABEL_3;
    }
    ++v7;
    if (v16 == v6)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease(v5);
  swift_release(v8);
  v5 = v53;
LABEL_17:
  result = swift_bridgeObjectRelease(v5);
  v19 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *a1;
    if (!((unint64_t)*a1 >> 62))
    {
      if (v19 == *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        return v7;
      goto LABEL_36;
    }
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  result = swift_bridgeObjectRelease(v5);
  if (v19 == v24)
    return v7;
LABEL_36:
  for (i = v7 + 5; ; ++i)
  {
    v26 = i - 4;
    v27 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v27);
      goto LABEL_41;
    }
    if ((v26 & 0x8000000000000000) != 0)
      break;
    if (v26 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_82;
    v28 = *(_QWORD *)(v27 + 8 * i);
    swift_retain(v28);
LABEL_41:
    v29 = *(_QWORD *)(v28 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    v30 = *(_QWORD *)(v28 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_10009B27C(v29, v30);
    sub_10011CAC4(v29, v30);
    v32 = v31;
    v34 = v33;
    sub_10009B2FC(v29, v30);
    if (v32 == v52 && v34 == v53)
    {
      swift_release(v28);
      result = swift_bridgeObjectRelease(v53);
      goto LABEL_69;
    }
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v52, v53, 0);
    swift_release(v28);
    result = swift_bridgeObjectRelease(v34);
    if ((v36 & 1) != 0)
      goto LABEL_69;
    if (v26 != v7)
    {
      v37 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        result = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v38 = result;
        v37 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
          goto LABEL_51;
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_85;
        if (v7 >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_86;
        v38 = *(_QWORD *)(v37 + 8 * v7 + 32);
        result = swift_retain(v38);
        if ((v37 & 0xC000000000000001) == 0)
        {
LABEL_51:
          if ((v26 & 0x8000000000000000) != 0)
            goto LABEL_87;
          if (v26 >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_88;
          v39 = *(_QWORD *)(v37 + 8 * i);
          swift_retain(v39);
          goto LABEL_54;
        }
      }
      v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v37);
      v37 = *a1;
LABEL_54:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v37);
      *a1 = v37;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v37 < 0 || (v37 & 0x4000000000000000) != 0)
      {
        v37 = sub_100171424(v37);
        *a1 = v37;
      }
      v41 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v39;
      v42 = swift_release(v41);
      specialized Array._endMutation()(v42);
      v43 = *a1;
      result = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v43;
      if (!(_DWORD)result || v43 < 0 || (v43 & 0x4000000000000000) != 0)
      {
        result = sub_100171424(v43);
        v43 = result;
        *a1 = result;
      }
      if ((v26 & 0x8000000000000000) != 0)
        goto LABEL_89;
      v44 = v43 & 0xFFFFFFFFFFFFFF8;
      if (v26 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_90;
      v45 = *(_QWORD *)(v44 + 8 * i);
      *(_QWORD *)(v44 + 8 * i) = v38;
      v46 = swift_release(v45);
      result = specialized Array._endMutation()(v46);
    }
    if (__OFADD__(v7++, 1))
      goto LABEL_84;
LABEL_69:
    v48 = i - 3;
    if (__OFADD__(v26, 1))
      goto LABEL_83;
    v49 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      if (v49 < 0)
        v51 = *a1;
      else
        v51 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a1);
      v50 = _CocoaArrayWrapper.endIndex.getter(v51);
      result = swift_bridgeObjectRelease(v49);
    }
    else
    {
      v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v48 == v50)
      return v7;
  }
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
  return result;
}

void sub_10013B9BC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessory uncertified, requesting user permission.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v14 = *(char **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (v14)
    {
      v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
      if (*(_QWORD *)&v14[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
      {
        if (a1)
        {
          v16 = v14;
          v17 = objc_msgSend(a1, "identifier");
          if (!v17)
          {
LABEL_15:
            __break(1u);
            return;
          }
          v18 = v17;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v21 = v20;

          v22 = sub_1001B1440((uint64_t)&off_100238560);
          if (*(_QWORD *)&v14[v15])
          {
            v16[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 3;
            v23 = *(id *)&v16[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
            sub_1001319A0(v19, v21, 1, v22, 0);
            swift_bridgeObjectRelease(v21);
            swift_bridgeObjectRelease(v22);

            v24 = *(void **)&v14[v15];
            if (v24)
            {
LABEL_11:
              v25 = v24;

              v25[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth] = 0;
              return;
            }
          }
          else
          {
            swift_bridgeObjectRelease(v21);
            swift_bridgeObjectRelease(v22);
            v24 = *(void **)&v14[v15];
            if (v24)
              goto LABEL_11;
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_15;
      }
    }
  }
}

uint64_t sub_10013BBF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  char v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int64_t v52;

  v42 = a2;
  v50 = a4;
  v43 = a1;
  v49 = sub_10009061C((uint64_t *)&unk_10026E6B0);
  v5 = __chkstk_darwin(v49);
  v48 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v41 - v7);
  v9 = type metadata accessor for BTDiscoveredDevice(0);
  v47 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v51 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v44 = 0;
  v45 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v46 = (unint64_t)(v15 + 63) >> 6;
  while (v17)
  {
    v18 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v52 = v13;
    v19 = v18 | (v13 << 6);
LABEL_22:
    v24 = (uint64_t *)(v51[6] + 16 * v19);
    v25 = *v24;
    v26 = v24[1];
    sub_1000D537C(v51[7] + *(_QWORD *)(v47 + 72) * v19, (uint64_t)v12);
    v27 = v49;
    v28 = (uint64_t)v8 + *(int *)(v49 + 48);
    *v8 = v25;
    v8[1] = v26;
    v29 = (uint64_t)v12;
    sub_1000D537C((uint64_t)v12, v28);
    v30 = *(int *)(v27 + 48);
    v31 = v48;
    v32 = (uint64_t)v48 + v30;
    *v48 = v25;
    v31[1] = v26;
    sub_1000D537C(v28, (uint64_t)v31 + v30);
    v33 = *(void **)(v32 + 8);
    v34 = v33;
    swift_bridgeObjectRetain_n(v26, 2);
    sub_1000D53C0(v32);
    v35 = *(_QWORD *)(v50 + 16);
    if (v35)
    {
      v36 = *(void **)(v35 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
      v37 = v36;
      if (!v33)
      {
        sub_10009B2C0((uint64_t)v8, (uint64_t *)&unk_10026E6B0);
        if (v36)
          goto LABEL_5;
        goto LABEL_30;
      }
      if (v36)
      {
        sub_100090EE8(0, (unint64_t *)&qword_10026EA50, CBPeripheral_ptr);
        v38 = v34;
        v39 = static NSObject.== infix(_:_:)(v38, v37);
        sub_10009B2C0((uint64_t)v8, (uint64_t *)&unk_10026E6B0);

        v12 = (char *)v29;
        sub_1000D53C0(v29);
        result = swift_bridgeObjectRelease(v26);
        v13 = v52;
        if ((v39 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
LABEL_28:
        sub_10009B2C0((uint64_t)v8, (uint64_t *)&unk_10026E6B0);
        v37 = v34;
LABEL_5:

        v12 = (char *)v29;
        sub_1000D53C0(v29);
        result = swift_bridgeObjectRelease(v26);
        v13 = v52;
      }
    }
    else
    {
      if (v33)
        goto LABEL_28;
      sub_10009B2C0((uint64_t)v8, (uint64_t *)&unk_10026E6B0);
LABEL_30:
      v12 = (char *)v29;
      sub_1000D53C0(v29);
      result = swift_bridgeObjectRelease(v26);
      v13 = v52;
LABEL_31:
      *(unint64_t *)((char *)v43 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v44++, 1))
      {
        __break(1u);
        return sub_10019B320(v43, v42, v44, v51);
      }
    }
  }
  v20 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v20 >= v46)
    return sub_10019B320(v43, v42, v44, v51);
  v21 = *(_QWORD *)(v45 + 8 * v20);
  v22 = v13 + 1;
  if (v21)
    goto LABEL_21;
  v22 = v13 + 2;
  if (v13 + 2 >= v46)
    return sub_10019B320(v43, v42, v44, v51);
  v21 = *(_QWORD *)(v45 + 8 * v22);
  if (v21)
    goto LABEL_21;
  v22 = v13 + 3;
  if (v13 + 3 >= v46)
    return sub_10019B320(v43, v42, v44, v51);
  v21 = *(_QWORD *)(v45 + 8 * v22);
  if (v21)
  {
LABEL_21:
    v17 = (v21 - 1) & v21;
    v52 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
    goto LABEL_22;
  }
  v23 = v13 + 4;
  if (v13 + 4 >= v46)
    return sub_10019B320(v43, v42, v44, v51);
  v21 = *(_QWORD *)(v45 + 8 * v23);
  if (v21)
  {
    v22 = v13 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v46)
      return sub_10019B320(v43, v42, v44, v51);
    v21 = *(_QWORD *)(v45 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10013BFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    v11 = sub_10013BBF0((unint64_t *)((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    v12 = swift_release(a2);
    if (v3)
      swift_willThrow(v12);
    swift_release_n(a2, 2);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v9, -1);
    bzero(v13, v9);
    swift_retain(a2);
    v11 = sub_10013BBF0((unint64_t *)v13, v8, a1, a2);
    swift_release(a2);
    swift_slowDealloc(v13, -1, -1);
    swift_release_n(a2, 2);
  }
  return v11;
}

_QWORD *sub_10013C184(_QWORD *result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  BOOL v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  id v19;
  id v20;
  char v21;
  id v22;
  id v23;
  char v24;
  id v25;
  id v26;
  char v27;
  id v28;
  id v29;
  char v30;
  id v31;
  id v32;
  char v33;
  id v34;
  id v35;
  char v36;
  id v37;
  id v38;
  char v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;

  v52 = result;
  v1 = result[2];
  if (v1)
  {
    result = *(_QWORD **)(v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
    if (result)
    {
      result = objc_msgSend(result, "services");
      if (result)
      {
        v2 = result;
        v3 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
        v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

        v49 = v4;
        if ((unint64_t)v4 >> 62)
          goto LABEL_66;
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        while (v5)
        {
          v4 = 0;
          v50 = v5;
          v48 = v49 + 32;
          while ((v49 & 0xC000000000000001) != 0)
          {
            v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v49);
            v7 = __OFADD__(v4++, 1);
            if (v7)
              goto LABEL_63;
LABEL_14:
            v51 = v6;
            v8 = objc_msgSend(v6, "characteristics", v48);
            if (v8)
            {
              v9 = v8;
              v10 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
              v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

            }
            else
            {
              v11 = (uint64_t)_swiftEmptyArrayStorage;
            }
            if ((unint64_t)v11 >> 62)
            {
              if (v11 < 0)
                v46 = v11;
              else
                v46 = v11 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v11);
              v12 = _CocoaArrayWrapper.endIndex.getter(v46);
              swift_bridgeObjectRelease(v11);
              if (!v12)
                goto LABEL_7;
            }
            else
            {
              v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (!v12)
                goto LABEL_7;
            }
            sub_100090EE8(0, &qword_10026EAA8, CBUUID_ptr);
            if (v12 < 1)
              goto LABEL_64;
            for (i = 0; i != v12; ++i)
            {
              if ((v11 & 0xC000000000000001) != 0)
                v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
              else
                v14 = *(id *)(v11 + 8 * i + 32);
              v15 = v14;
              v16 = objc_msgSend(v14, "UUID");
              if (qword_10026BB98 != -1)
                swift_once(&qword_10026BB98, sub_10012E1F8);
              v17 = (id)qword_100275578;
              v18 = static NSObject.== infix(_:_:)(v16, v17);

              if ((v18 & 1) != 0)
                goto LABEL_53;
              v19 = objc_msgSend(v15, "UUID");
              if (qword_10026BBA0 != -1)
                swift_once(&qword_10026BBA0, sub_10012E2C8);
              v20 = (id)qword_100275580;
              v21 = static NSObject.== infix(_:_:)(v19, v20);

              if ((v21 & 1) != 0)
                goto LABEL_53;
              v22 = objc_msgSend(v15, "UUID");
              if (qword_10026BBA8 != -1)
                swift_once(&qword_10026BBA8, sub_10012E398);
              v23 = (id)qword_100275588;
              v24 = static NSObject.== infix(_:_:)(v22, v23);

              if ((v24 & 1) != 0)
                goto LABEL_53;
              v25 = objc_msgSend(v15, "UUID");
              if (qword_10026BBC8 != -1)
                swift_once(&qword_10026BBC8, sub_10012E6D8);
              v26 = (id)qword_1002755A8;
              v27 = static NSObject.== infix(_:_:)(v25, v26);

              if ((v27 & 1) != 0)
                goto LABEL_53;
              v28 = objc_msgSend(v15, "UUID");
              if (qword_10026BBD0 != -1)
                swift_once(&qword_10026BBD0, sub_10012E7A8);
              v29 = (id)qword_1002755B0;
              v30 = static NSObject.== infix(_:_:)(v28, v29);

              if ((v30 & 1) != 0)
                goto LABEL_53;
              v31 = objc_msgSend(v15, "UUID");
              if (qword_10026BBB0 != -1)
                swift_once(&qword_10026BBB0, sub_10012E468);
              v32 = (id)qword_100275590;
              v33 = static NSObject.== infix(_:_:)(v31, v32);

              if ((v33 & 1) != 0)
                goto LABEL_53;
              v34 = objc_msgSend(v15, "UUID");
              if (qword_10026BBB8 != -1)
                swift_once(&qword_10026BBB8, sub_10012E538);
              v35 = (id)qword_100275598;
              v36 = static NSObject.== infix(_:_:)(v34, v35);

              if ((v36 & 1) != 0)
                goto LABEL_53;
              v37 = objc_msgSend(v15, "UUID");
              if (qword_10026BBC0 != -1)
                swift_once(&qword_10026BBC0, sub_10012E608);
              v38 = (id)qword_1002755A0;
              v39 = static NSObject.== infix(_:_:)(v37, v38);

              if ((v39 & 1) != 0)
                goto LABEL_53;
              v40 = objc_msgSend(v15, "UUID");
              if (qword_10026BBE0 != -1)
                swift_once(&qword_10026BBE0, sub_10012E948);
              v41 = (id)qword_1002755C0;
              v42 = static NSObject.== infix(_:_:)(v40, v41);

              if ((v42 & 1) != 0)
              {
LABEL_53:
                if ((objc_msgSend(v15, "properties") & 0x10) != 0
                  || (objc_msgSend(v15, "properties") & 0x20) != 0)
                {
                  v43 = v52[2];
                  if (v43)
                  {
                    v44 = *(void **)(v43 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
                    if (v44)
                    {
                      v45 = v44;
                      objc_msgSend(v45, "setNotifyValue:forCharacteristic:", 1, v15);

                    }
                  }
                }
              }

            }
LABEL_7:

            swift_bridgeObjectRelease(v11);
            if (v4 == v50)
              return (_QWORD *)swift_bridgeObjectRelease(v49);
          }
          if ((unint64_t)v4 >= *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_65;
          v6 = *(id *)(v48 + 8 * v4);
          v7 = __OFADD__(v4++, 1);
          if (!v7)
            goto LABEL_14;
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          if (v4 < 0)
            v47 = v4;
          else
            v47 = v4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v4);
          v5 = _CocoaArrayWrapper.endIndex.getter(v47);
          swift_bridgeObjectRelease(v4);
        }
        return (_QWORD *)swift_bridgeObjectRelease(v49);
      }
    }
  }
  return result;
}

void sub_10013C860(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67;
  void *v68;
  void *v69;
  char *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v89;
  id v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  _QWORD *v134;
  id v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  id v141;
  char *v142;
  uint64_t v143;
  id v144;
  void *v145;
  void *v146;
  id v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  void (*v152)(char *, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint8_t *v169;
  uint64_t v170;
  char *v171;
  void (*v172)(char *, uint64_t);
  void *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  char *v180;
  char v181[8];
  uint64_t v182;
  uint64_t v183;
  char v184[8];
  char v185[8];
  uint64_t v186;
  uint64_t v187;
  char v188[8];
  __int128 aBlock;
  __int128 v190;
  uint64_t (*v191)(uint64_t);
  uint64_t v192;
  _QWORD v193[3];
  char v194[8];
  _QWORD *v195;
  _BYTE v196[16];
  uint64_t v197;
  char v198[8];

  v4 = v3;
  v179 = a1;
  v7 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v7);
  v9 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v171 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (uint64_t)&v171 - v20;
  __chkstk_darwin(v19);
  v25 = (char *)&v171 - v22;
  v180 = v4;
  if (!a3)
  {
    v176 = v9;
    if (!a2)
      goto LABEL_110;
    v21 = a2;
    v37 = (unint64_t)a2 >> 62;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v155 = a2;
      else
        v155 = a2 & 0xFFFFFFFFFFFFFF8;
      v156 = v24;
      v157 = v23;
      v158 = v37;
      swift_bridgeObjectRetain(v21);
      v159 = _CocoaArrayWrapper.endIndex.getter(v155);
      swift_bridgeObjectRelease(v21);
      v37 = v158;
      v24 = v156;
      v23 = v157;
      if (v159)
      {
LABEL_7:
        v38 = *(void **)&v180[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
        v178 = v23;
        if (!v38)
        {
          v191 = 0;
          aBlock = 0u;
          v190 = 0u;
          goto LABEL_78;
        }
        v173 = (void *)v37;
        v171 = v24;
        v39 = v179;
        if (!v179)
          goto LABEL_111;
        v177 = v11;
        v40 = v38;
        v41 = objc_msgSend(v39, "identifier");
        if (!v41)
        {
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        v42 = v41;
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v45 = v44;

        v174 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v46 = *(id *)&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        v175 = v40;
        v47 = &v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess(&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v198, 0, 0);
        v48 = *(_QWORD *)v47;
        v49 = *(_QWORD *)(v48 + 16);
        if (v49)
        {
          v172 = (void (*)(char *, uint64_t))v21;
          v50 = v48 + 32;
          swift_bridgeObjectRetain(v48);
          do
          {
            sub_10009AFF4(v50, (uint64_t)&v195);
            v51 = *(void **)(*sub_10009B038(&v195, v197) + 32);
            if (v51)
            {
              v52 = v51;
              v53 = objc_msgSend(v52, "identifier");
              if (v53)
              {
                v54 = v53;
                v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
                v57 = v56;

                if (v55 == v43 && v57 == v45)
                {
                  swift_bridgeObjectRelease(v48);
                  v48 = v45;
LABEL_77:
                  swift_bridgeObjectRelease(v48);
                  v146 = v175;
                  v147 = *(id *)&v175[v174];
                  OS_dispatch_semaphore.signal()();

                  sub_10009AFF4((uint64_t)&v195, (uint64_t)&aBlock);
                  sub_100090E88(&v195);

                  swift_bridgeObjectRelease(v45);
                  v11 = v177;
                  v21 = (uint64_t)v172;
                  if (!*((_QWORD *)&v190 + 1))
                  {
LABEL_78:
                    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
LABEL_79:
                    v148 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, &v180[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v178);
                    v149 = Logger.logObject.getter(v148);
                    v150 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v149, v150))
                    {
                      v151 = (uint8_t *)swift_slowAlloc(2, -1);
                      *(_WORD *)v151 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v149, v150, "No record for discovered accessory!", v151, 2u);
                      swift_slowDealloc(v151, -1, -1);
                    }

                    v152 = *(void (**)(char *, uint64_t))(v11 + 8);
                    v153 = v14;
LABEL_82:
                    v154 = v178;
LABEL_90:
                    v152(v153, v154);
                    return;
                  }
LABEL_60:
                  v109 = sub_10009061C(&qword_10026C2E0);
                  v110 = type metadata accessor for DaemonAccessory(0);
                  if ((swift_dynamicCast(&v195, &aBlock, v109, v110, 6) & 1) == 0)
                    goto LABEL_79;
                  v111 = v195;
                  sub_10013C184(v195);
                  if (*((_BYTE *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
                  {
                    v112 = v179;
                    sub_1000E1B64(v179);
                    v113 = (_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
                    v114 = *(_QWORD *)((char *)v111
                                     + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion
                                     + 8);
                    *v113 = v115;
                    v113[1] = v116;
                    swift_bridgeObjectRelease(v114);
                    sub_1000E1B70(v112);
                    v117 = (_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
                    v118 = *(_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8);
                    *v117 = v119;
                    v117[1] = v120;
                    swift_bridgeObjectRelease(v118);
                    sub_1000E1E58(v112);
                    v121 = (_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
                    v122 = *(_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber
                                                    + 8);
                    *v121 = v123;
                    v121[1] = v124;
                    swift_bridgeObjectRelease(v122);
                    sub_1000E2058(v112);
                    v125 = (_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
                    v126 = *(_QWORD *)((char *)v111 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8);
                    *v125 = v127;
                    v125[1] = v128;
                    swift_bridgeObjectRelease(v126);
                    v129 = v180;
                    if (!v173)
                    {
                      v130 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain(v21);
                      if (v130)
                        goto LABEL_64;
LABEL_95:
                      swift_bridgeObjectRelease(v21);
                      v166 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v171, (uint64_t)v129 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v178);
                      v167 = Logger.logObject.getter(v166);
                      v168 = static os_log_type_t.default.getter(v167);
                      if (os_log_type_enabled(v167, v168))
                      {
                        v169 = (uint8_t *)swift_slowAlloc(2, -1);
                        *(_WORD *)v169 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v167, v168, "No accessories paired", v169, 2u);
                        swift_slowDealloc(v169, -1, -1);
                        swift_release(v111);

                      }
                      else
                      {

                        swift_release(v111);
                      }
                      v152 = *(void (**)(char *, uint64_t))(v11 + 8);
                      v153 = v171;
                      goto LABEL_82;
                    }
                    if (v21 < 0)
                      v165 = v21;
                    else
                      v165 = v21 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v21);
                    if (!_CocoaArrayWrapper.endIndex.getter(v165))
                      goto LABEL_95;
LABEL_64:
                    if ((v21 & 0xC000000000000001) != 0)
                    {
                      v132 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
                      v131 = (uint64_t)v176;
                      goto LABEL_67;
                    }
                    v131 = (uint64_t)v176;
                    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
                    {
                      v132 = *(id *)(v21 + 32);
LABEL_67:
                      swift_bridgeObjectRelease(v21);
                      v133 = type metadata accessor for TaskPriority(0);
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v131, 1, 1, v133);
                      v134 = (_QWORD *)swift_allocObject(&unk_10023CA58, 56, 7);
                      v134[2] = 0;
                      v134[3] = 0;
                      v134[4] = v111;
                      v134[5] = v129;
                      v134[6] = v132;
                      v135 = v129;
                      swift_retain(v111);
                      v136 = sub_10018A990(v131, (uint64_t)&unk_10026EA98, (uint64_t)v134);
                      swift_release(v111);
                      swift_release(v136);
                      return;
                    }
                    __break(1u);
LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
LABEL_109:
                    __break(1u);
LABEL_110:
                    __break(1u);
LABEL_111:
                    __break(1u);
                    goto LABEL_112;
                  }
                  if (v173)
                  {
                    if (v21 < 0)
                      v170 = v21;
                    else
                      v170 = v21 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v21);
                    if (_CocoaArrayWrapper.endIndex.getter(v170))
                    {
LABEL_72:
                      if ((v21 & 0xC000000000000001) != 0)
                      {
                        v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
                      }
                      else
                      {
                        if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
                          goto LABEL_107;
                        v144 = *(id *)(v21 + 32);
                      }
                      v145 = v144;
                      swift_bridgeObjectRelease(v21);
                      sub_1001323D4((uint64_t)v111, v145);

                      swift_release(v111);
                      return;
                    }
                  }
                  else
                  {
                    v143 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain(v21);
                    if (v143)
                      goto LABEL_72;
                  }
                  swift_release(v111);
                  swift_bridgeObjectRelease(v21);
                  return;
                }
                v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v43, v45, 0);
                swift_bridgeObjectRelease(v57);
                if ((v59 & 1) != 0)
                  goto LABEL_77;
              }

            }
            sub_100090E88(&v195);
            v50 += 40;
            --v49;
          }
          while (v49);
          swift_bridgeObjectRelease(v48);
          v21 = (uint64_t)v172;
        }
        v107 = v175;
        v108 = *(id *)&v175[v174];
        OS_dispatch_semaphore.signal()();

        v191 = 0;
        aBlock = 0u;
        v190 = 0u;

        swift_bridgeObjectRelease(v45);
        v11 = v177;
        if (!*((_QWORD *)&v190 + 1))
          goto LABEL_78;
        goto LABEL_60;
      }
    }
    else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    v160 = v23;
    v161 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v18, &v180[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v23);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v162, v163))
    {
      v164 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v164 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Error while discoverying accessory: No accessories.", v164, 2u);
      swift_slowDealloc(v164, -1, -1);
    }

    v152 = *(void (**)(char *, uint64_t))(v11 + 8);
    v153 = v18;
    v154 = v160;
    goto LABEL_90;
  }
  v26 = *(char **)(v11 + 16);
  v174 = (uint64_t)&v4[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger];
  v27 = v23;
  ((void (*)(char *))v26)((char *)&v171 - v22);
  swift_errorRetain(a3);
  v28 = swift_errorRetain(a3);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  v31 = os_log_type_enabled(v29, v30);
  v178 = v27;
  v176 = (char *)v21;
  v175 = v26;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v33;
    *(_DWORD *)v32 = 136315138;
    v177 = v11;
    swift_getErrorValue(a3, v184, v181);
    v34 = Error.localizedDescription.getter(v182, v183);
    v36 = v35;
    v195 = (_QWORD *)sub_1000906BC(v34, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v36);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error while discoverying accessory: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    v21 = *(_QWORD *)(v177 + 8);
  }
  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);

    v21 = *(_QWORD *)(v11 + 8);
  }
  ((void (*)(char *, uint64_t))v21)(v25, v27);
  swift_getErrorValue(a3, v194, v193);
  v60 = dispatch thunk of Error._domain.getter(v193[1], v193[2]);
  v62 = v61;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("HAPErrorDomain"));
  v65 = v63;
  if (v60 == v64 && v62 == v63)
  {
    swift_bridgeObjectRelease_n(v62, 2);
  }
  else
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 0);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v65);
    if ((v66 & 1) == 0)
      goto LABEL_28;
  }
  swift_getErrorValue(a3, v188, v185);
  dispatch thunk of Error._code.getter(v186, v187);
LABEL_28:
  v67 = (void *)_convertErrorToNSError(_:)(a3);
  objc_msgSend(v67, "isHAPError");
  v68 = *(void **)&v180[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
  v69 = v179;
  if (!v68)
  {
    v191 = 0;
    aBlock = 0u;
    v190 = 0u;
    goto LABEL_55;
  }
  if (!v179)
    goto LABEL_108;
  v172 = (void (*)(char *, uint64_t))v21;
  v70 = v68;
  v71 = objc_msgSend(v69, "identifier");
  if (!v71)
    goto LABEL_109;
  v72 = v71;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
  v75 = v74;

  v177 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v76 = *(id *)&v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v77 = &v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v70[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v198, 0, 0);
  v78 = *(_QWORD *)v77;
  v79 = *(_QWORD *)(v78 + 16);
  if (!v79)
  {
LABEL_45:
    v90 = *(id *)&v70[v177];
    OS_dispatch_semaphore.signal()();

    v191 = 0;
    aBlock = 0u;
    v190 = 0u;

    swift_bridgeObjectRelease(v75);
    goto LABEL_49;
  }
  v173 = v67;
  v80 = v78 + 32;
  swift_bridgeObjectRetain(v78);
  while (1)
  {
    sub_10009AFF4(v80, (uint64_t)&v195);
    v81 = *(void **)(*sub_10009B038(&v195, v197) + 32);
    if (!v81)
      goto LABEL_34;
    v82 = v81;
    v83 = objc_msgSend(v82, "identifier");
    if (v83)
      break;
LABEL_33:

LABEL_34:
    sub_100090E88(&v195);
    v80 += 40;
    if (!--v79)
    {
      swift_bridgeObjectRelease(v78);
      v67 = v173;
      goto LABEL_45;
    }
  }
  v84 = v83;
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
  v87 = v86;

  if (v85 != v73 || v87 != v75)
  {
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v73, v75, 0);
    swift_bridgeObjectRelease(v87);
    if ((v89 & 1) != 0)
      goto LABEL_48;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease(v78);
  v78 = v75;
LABEL_48:
  swift_bridgeObjectRelease(v78);
  v91 = *(id *)&v70[v177];
  OS_dispatch_semaphore.signal()();

  sub_10009AFF4((uint64_t)&v195, (uint64_t)&aBlock);
  sub_100090E88(&v195);

  swift_bridgeObjectRelease(v75);
  v67 = v173;
LABEL_49:
  v92 = v180;
  if (!*((_QWORD *)&v190 + 1))
  {
LABEL_55:

    sub_10009B2C0((uint64_t)&aBlock, (uint64_t *)&unk_10026DF40);
    return;
  }
  v93 = sub_10009061C(&qword_10026C2E0);
  v94 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(&v195, &aBlock, v93, v94, 6) & 1) != 0)
  {
    v95 = v195;
    if (*((_BYTE *)v195 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 1)
    {
      *((_BYTE *)v195 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
      v96 = v176;
      v97 = v178;
      ((void (*)(char *, uint64_t, uint64_t))v175)(v176, v174, v178);
      v21 = v179;
      v98 = Logger.logObject.getter(v21);
      v99 = static os_log_type_t.default.getter(v98);
      if (os_log_type_enabled(v98, v99))
      {
        v173 = v67;
        v100 = (uint8_t *)swift_slowAlloc(12, -1);
        v101 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v101;
        *(_DWORD *)v100 = 136315138;
        v102 = objc_msgSend((id)v21, "identifier");
        if (v102)
        {
          v103 = v102;
          v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
          v106 = v105;

          v195 = (_QWORD *)sub_1000906BC(v104, v106, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v100 + 4, v100 + 12);

          swift_bridgeObjectRelease(v106);
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "Attempting to remove pairing for undiscovered accessory %s", v100, 0xCu);
          swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v101, -1, -1);
          swift_slowDealloc(v100, -1, -1);

          v172(v176, v178);
          v92 = v180;
          v67 = v173;
          goto LABEL_69;
        }
LABEL_113:

        __break(1u);
      }
      else
      {

        v172(v96, v97);
LABEL_69:
        v137 = *(void **)&v92[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
        v138 = swift_allocObject(&unk_10023CA80, 24, 7);
        *(_QWORD *)(v138 + 16) = v92;
        v191 = sub_100141F10;
        v192 = v138;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v190 = sub_1001873D4;
        *((_QWORD *)&v190 + 1) = &unk_10023CA98;
        v139 = _Block_copy(&aBlock);
        v140 = v192;
        v141 = v137;
        v142 = v92;
        swift_release(v140);
        objc_msgSend((id)v21, "removePairingForCurrentControllerOnQueue:completion:", v141, v139);

        _Block_release(v139);
        swift_release(v95);

      }
    }
    else
    {
      swift_release(v195);

    }
  }
  else
  {

  }
}

uint64_t sub_10013D93C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD aBlock[5];
  uint64_t v70;
  _QWORD *v71;
  char v72[32];

  v64 = a2;
  v57 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v65 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
LABEL_34:
    swift_once(&qword_10026BC00, sub_100158DF8);
  v5 = &unk_100275000;
  v6 = qword_100275638;
  v7 = sub_1001C1CC8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v7);
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v9 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = (uint64_t *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v72, 0, 0);
  v11 = *v10;
  v12 = *(os_unfair_lock_s **)(v6 + v8);
  v13 = v11;
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  os_unfair_lock_unlock(v12 + 4);
  swift_release(v12);
  v14 = 0;
  v15 = v13 + 64;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v13 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  v68 = (char *)&type metadata for Any + 8;
  v62 = v13;
  v63 = a1;
  v66 = v19;
  v67 = v13 + 64;
  while (v18)
  {
    v20 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v21 = v20 | (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v13 + 56) + 16 * v21;
    if (*(_QWORD *)v25)
    {
      v26 = *(void **)(v25 + 8);
      v27 = *(id *)v25;
      v28 = v26;
      v29 = objc_msgSend(v27, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(aBlock);
      swift_unknownObjectRelease(v29);
      v30 = sub_10009061C((uint64_t *)&unk_10026EA80);
      if ((swift_dynamicCast(&v71, aBlock, v68, v30, 6) & 1) != 0)
      {
        v31 = v71;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v32 = v28;
        v33 = static NSObject.== infix(_:_:)(a1, v32);

        if ((v33 & 1) != 0)
        {
          v34 = v5[199];
          v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          v36 = *(os_unfair_lock_s **)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain(v36);
          os_unfair_lock_lock(v36 + 4);
          swift_release(v36);
          v37 = *(_QWORD *)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v37)
          {
            v38 = *(void **)(v37 + 24);
            if (v38)
            {
              aBlock[4] = sub_1000B145C;
              v70 = v37;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10012357C;
              aBlock[3] = &unk_10023CA20;
              v39 = _Block_copy(aBlock);
              v60 = v31;
              v40 = v39;
              swift_retain_n(v37, 2);
              v59 = v38;
              static DispatchQoS.unspecified.getter(v59);
              v71 = _swiftEmptyArrayStorage;
              v58 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v61 = v35;
              v41 = sub_10009061C((uint64_t *)&unk_10026BF60);
              v42 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
              v43 = v55;
              v44 = v57;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v41, v42, v57, v58);
              v45 = v59;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v65, v43, v40);
              v46 = v40;
              v31 = v60;
              _Block_release(v46);

              v47 = v43;
              v5 = (_QWORD *)&unk_100275000;
              v48 = v44;
              v35 = v61;
              (*(void (**)(char *, uint64_t))(v56 + 8))(v47, v48);
              (*(void (**)(char *, uint64_t))(v53 + 8))(v65, v54);
              v49 = v70;
              swift_release(v37);
              swift_release(v49);
            }
          }
          v50 = *(os_unfair_lock_s **)(v34 + v35);
          swift_retain(v50);
          os_unfair_lock_unlock(v50 + 4);
          swift_release(v50);
          a1 = v63;
          objc_msgSend(v31, "batteryStateDataWithInfo:data:", v63, v64);
          swift_unknownObjectRelease(v31);

          v13 = v62;
        }
        else
        {
          swift_unknownObjectRelease(v31);

        }
        v19 = v66;
        v15 = v67;
      }
      else
      {

      }
    }
  }
  v22 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v22 >= v19)
    return swift_release(v13);
  v23 = *(_QWORD *)(v15 + 8 * v22);
  ++v14;
  if (v23)
    goto LABEL_21;
  v14 = v22 + 1;
  if (v22 + 1 >= v19)
    return swift_release(v13);
  v23 = *(_QWORD *)(v15 + 8 * v14);
  if (v23)
    goto LABEL_21;
  v14 = v22 + 2;
  if (v22 + 2 >= v19)
    return swift_release(v13);
  v23 = *(_QWORD *)(v15 + 8 * v14);
  if (v23)
  {
LABEL_21:
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_22;
  }
  v24 = v22 + 3;
  if (v24 < v19)
  {
    v23 = *(_QWORD *)(v15 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v14 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_33;
        if (v14 >= v19)
          return swift_release(v13);
        v23 = *(_QWORD *)(v15 + 8 * v14);
        ++v24;
        if (v23)
          goto LABEL_21;
      }
    }
    v14 = v24;
    goto LABEL_21;
  }
  return swift_release(v13);
}

void sub_10013DEE0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t *v33;
  char *v34;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  NSObject *v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  char v44;
  id v45;
  _BYTE *v46;
  id v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(_BYTE *, uint64_t);
  _BYTE *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  NSObject *v73;
  id v74;
  void *v75;
  int64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_unfair_lock_s *v105;
  void *v106;
  os_unfair_lock_s *v107;
  id v108;
  uint64_t v109;
  void *v110;
  id v111;
  char v112;
  unsigned __int8 v113;
  void *v114;
  id v115;
  void *v116;
  id v117;
  char v118;
  id v119;
  id v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  void *v124;
  Class isa;
  id v126;
  id v127;
  void *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  id v132;
  id v133;
  void *v134;
  uint64_t v135;
  NSObject *v136;
  char *v137;
  id v138;
  NSObject **v139;
  NSObject *v140;
  Class v141;
  uint64_t v142;
  void *v143;
  id v144;
  id v145;
  void *v146;
  uint64_t v147;
  NSObject *v148;
  NSObject *v149;
  NSObject *v150;
  char v152;
  os_log_t v153;
  void *v154;
  id v155;
  void *v156;
  id v157;
  char v158;
  id v159;
  id v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  void *v164;
  Class v165;
  id v166;
  id v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  id v172;
  id v173;
  void *v174;
  uint64_t v175;
  NSObject *v176;
  char *v177;
  id v178;
  NSObject **v179;
  NSObject *v180;
  Class v181;
  uint64_t v182;
  void *v183;
  id v184;
  id v185;
  void *v186;
  uint64_t v187;
  NSObject *v188;
  NSObject *v189;
  NSObject *v190;
  char v192;
  os_log_t v193;
  uint64_t *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  _BOOL4 v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  void *v229;
  uint64_t v230;
  id v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  id v237;
  void *v238;
  uint64_t v239;
  void *v240;
  id v241;
  void *v242;
  id v243;
  char v244;
  id v245;
  id v246;
  unint64_t v247;
  NSObject *v248;
  uint64_t v249;
  uint64_t (*v250)(uint64_t, uint64_t, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  NSObject *v254;
  os_log_type_t v255;
  _BOOL4 v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void (*v261)(uint64_t, uint64_t);
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  os_log_type_t v268;
  _BOOL4 v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  id v276;
  void *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  id v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  id v287;
  id v288;
  void *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  char v294;
  char *v295;
  id v296;
  id v297;
  id v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  os_unfair_lock_s *v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  id v307;
  id v308;
  id v309;
  void *v310;
  id v311;
  id v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  size_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  char v330;
  id v331;
  void *v332;
  id v333;
  int v334;
  uint64_t v335;
  _BYTE *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  NSObject *v340;
  os_log_type_t v341;
  uint8_t *v342;
  char *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  char *v352;
  NSObject *v353;
  NSObject *v354;
  os_log_type_t v355;
  _BOOL4 v356;
  uint8_t *v357;
  NSObject **v358;
  NSObject *v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  char *v364;
  id v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  id v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  id v376;
  id v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char v383;
  id v384;
  char *v385;
  id v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  id v390;
  void *v391;
  id v392;
  uint64_t v393;
  uint64_t v394;
  NSString v395;
  uint64_t v396;
  id v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  uint64_t v409;
  void *v410;
  id v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  void *v415;
  id v416;
  id v417;
  id v418;
  NSObject *v419;
  os_log_type_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  os_log_t v433;
  uint64_t v434;
  id v435;
  _BYTE v436[12];
  int v437;
  os_log_t v438;
  char *v439;
  __n128 v440;
  char *v441;
  uint64_t v442;
  unsigned int v443;
  _BYTE *v444;
  uint64_t v445;
  char *v446;
  unint64_t v447;
  char *v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  __n128 v452;
  uint64_t v453;
  _BYTE *v454;
  uint64_t v455;
  uint64_t v456;
  _BYTE *v457;
  _BYTE *v458;
  _BYTE *v459;
  uint64_t v460;
  _BYTE *v461;
  _BYTE *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  _BYTE *v466;
  __n128 v467;
  _BYTE *v468;
  char *v469;
  int64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  NSObject *v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int128 v488;
  __int128 v489;
  char v490[24];
  __int128 v491;
  __int128 v492;
  uint64_t v493;
  __int128 __dst;
  _QWORD v495[4];

  v474 = a1;
  v3 = type metadata accessor for ComponentType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v436[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10009061C((uint64_t *)&unk_10026E0E0);
  __chkstk_darwin(v7);
  v9 = &v436[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for TrajectoryCommand.Progress(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v462 = &v436[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Logger(0);
  v14 = __chkstk_darwin(v13);
  v458 = &v436[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v459 = &v436[-v17];
  v18 = __chkstk_darwin(v16);
  v19 = __chkstk_darwin(v18);
  v461 = &v436[-v20];
  v21 = __chkstk_darwin(v19);
  v457 = &v436[-v22];
  __chkstk_darwin(v21);
  v24 = __chkstk_darwin(&v436[-v23]);
  v25 = __chkstk_darwin(v24);
  v26 = __chkstk_darwin(v25);
  v468 = &v436[-v31];
  if (a2)
  {
    v479 = *(_QWORD *)(a2 + 16);
    if (v479)
    {
      v466 = v28;
      v453 = v27;
      v450 = v26;
      v442 = v30;
      v476 = v473 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
      v471 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
      v472 = v29;
      v478 = a2 + 32;
      v448 = (char *)&v488 + 8;
      v446 = (char *)&v491 + 8;
      v443 = enum case for ComponentType.Battery(_:);
      v441 = (char *)&v488 + 4;
      v451 = a2;
      v32 = swift_bridgeObjectRetain(a2);
      v455 = 0;
      v477 = (char *)&type metadata for Any + 8;
      v33 = &qword_10026E5F0;
      v32.n128_u64[0] = 136315138;
      v467 = v32;
      v32.n128_u64[0] = 138412290;
      v452 = v32;
      v32.n128_u64[0] = 136316162;
      v440 = v32;
      v447 = (unint64_t)"com.apple.dockaccessoryd.server";
      v449 = 0x8000000100200E10;
      v464 = v3;
      v444 = v6;
      v445 = v4;
      v454 = v9;
      v34 = (char *)&type metadata for Any;
      v460 = v10;
      v35 = &selRef_authSession_authComplete_;
      v456 = v11;
      v36 = 0;
      v480 = v13;
      while (1)
      {
        sub_100090EA8(v478 + 32 * v36, (uint64_t)v495);
        sub_100090EA8((uint64_t)v495, (uint64_t)&v491);
        v37 = sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
        v38 = swift_dynamicCast(&v488, &v491, v477, v37, 6);
        v482 = v37;
        if ((v38 & 1) == 0)
          goto LABEL_70;
        v39 = v488;
        v40 = objc_msgSend((id)v488, v35[41]);
        if (!v40)
        {
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
        }
        v41 = v40;
        v42 = sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v43 = objc_msgSend(v41, "UUID");

        if (qword_10026BBA8 != -1)
          swift_once(&qword_10026BBA8, sub_10012E398);
        v44 = static NSObject.== infix(_:_:)(v43, qword_100275588);

        if ((v44 & 1) == 0)
        {

          goto LABEL_69;
        }
        v45 = -[NSObject value](v39, "value");
        v46 = v468;
        if (v45)
        {
          v47 = v45;
          _bridgeAnyObjectToAny(_:)(&v488);
          swift_unknownObjectRelease(v47);
        }
        else
        {
          v488 = 0u;
          v489 = 0u;
        }
        sub_1000D55A0((uint64_t)&v488, (uint64_t)&v491, &qword_10026E5F0);
        if (!*((_QWORD *)&v492 + 1))
        {

          sub_10009B2C0((uint64_t)&v491, &qword_10026E5F0);
LABEL_288:
          sub_100090E88(v495);
          goto LABEL_289;
        }
        if ((swift_dynamicCast(&__dst, &v491, v34 + 8, &type metadata for UInt64, 6) & 1) == 0)
        {

          goto LABEL_288;
        }
        v48 = v34;
        v481 = v36;
        v470 = __dst;
        v49 = (char *)(__dst & 1);
        v50 = v472;
        v469 = *(char **)(v472 + 16);
        v51 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v469)(v46, v476, v13);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.default.getter(v52);
        v54 = os_log_type_enabled(v52, v53);
        v475 = v39;
        v465 = v42;
        v463 = (uint64_t)v49;
        if (v54)
        {
          v55 = swift_slowAlloc(12, -1);
          v56 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v491 = v56;
          *(_DWORD *)v55 = v467.n128_u32[0];
          if (v49)
            v57 = 0x64656C62616E45;
          else
            v57 = 0x64656C6261736944;
          if (v49)
            v58 = 0xE700000000000000;
          else
            v58 = 0xE800000000000000;
          *(_QWORD *)(v55 + 4) = sub_1000906BC(v57, v58, (uint64_t *)&v491);
          v59 = v58;
          v34 = (char *)&type metadata for Any;
          swift_bridgeObjectRelease(v59);
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Tracking is %s!", (uint8_t *)v55, 0xCu);
          swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);

          v60 = *(void (**)(_BYTE *, uint64_t))(v50 + 8);
          v60(v46, v13);
        }
        else
        {

          v60 = *(void (**)(_BYTE *, uint64_t))(v50 + 8);
          v60(v46, v13);
          v34 = v48;
        }
        v61 = v466;
        v62 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v469)(v466, v476, v13);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.default.getter(v63);
        v65 = os_log_type_enabled(v63, v64);
        v66 = v470;
        if (v65)
        {
          v67 = swift_slowAlloc(12, -1);
          v68 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v491 = v68;
          *(_DWORD *)v67 = v467.n128_u32[0];
          if (((v66 >> 1) & 1) != 0)
            v69 = 1701736260;
          else
            v69 = 0x656E6F44746F4ELL;
          if (((v66 >> 1) & 1) != 0)
            v70 = 0xE400000000000000;
          else
            v70 = 0xE700000000000000;
          *(_QWORD *)(v67 + 4) = sub_1000906BC(v69, v70, (uint64_t *)&v491);
          v71 = v70;
          v34 = (char *)&type metadata for Any;
          swift_bridgeObjectRelease(v71);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Startup done is %s!", (uint8_t *)v67, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v67, -1, -1);
        }

        v60(v61, v13);
        v72 = v474;
        v73 = v475;
        v36 = v481;
        v33 = &qword_10026E5F0;
        if ((v66 & 2) != 0)
        {
          if (qword_10026BC00 != -1)
            swift_once(&qword_10026BC00, sub_100158DF8);
          v74 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
          sub_1000D26AC();

          v72 = v474;
        }
        v75 = *(void **)(v473 + v471);
        if (!v75)
        {
          v493 = 0;
          v491 = 0u;
          v492 = 0u;
          v35 = &selRef_authSession_authComplete_;
LABEL_63:

          sub_10009B2C0((uint64_t)&v491, (uint64_t *)&unk_10026DF40);
          goto LABEL_69;
        }
        if (!v72)
          goto LABEL_296;
        v76 = v75;
        v77 = objc_msgSend(v72, "identifier");
        if (!v77)
          goto LABEL_297;
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v81 = v80;

        v82 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v83 = *(id *)(v76 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        v84 = (char *)(v76 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess(v76 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, &v483, 0, 0);
        v85 = *(_QWORD *)v84;
        v86 = *(_QWORD *)(v85 + 16);
        if (!v86)
          goto LABEL_53;
        v469 = v82;
        v470 = v76;
        v87 = v85 + 32;
        swift_bridgeObjectRetain(v85);
        while (1)
        {
          sub_10009AFF4(v87, (uint64_t)&v488);
          v88 = *(void **)(*sub_10009B038(&v488, *((uint64_t *)&v489 + 1)) + 32);
          if (!v88)
            goto LABEL_42;
          v89 = v88;
          v90 = objc_msgSend(v89, "identifier");
          if (v90)
            break;
LABEL_41:

LABEL_42:
          sub_100090E88(&v488);
          v87 += 40;
          if (!--v86)
          {
            swift_bridgeObjectRelease(v85);
            v73 = v475;
            v82 = v469;
            v76 = v470;
LABEL_53:
            v97 = *(id *)&v82[v76];
            OS_dispatch_semaphore.signal()();

            v493 = 0;
            v491 = 0u;
            v492 = 0u;

            swift_bridgeObjectRelease(v81);
            v36 = v481;
            v34 = (char *)&type metadata for Any;
            goto LABEL_56;
          }
        }
        v91 = v90;
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v94 = v93;

        if (v92 != v79 || v94 != v81)
          break;
        swift_bridgeObjectRelease(v85);
        v85 = v81;
        v13 = v480;
        v33 = &qword_10026E5F0;
LABEL_55:
        swift_bridgeObjectRelease(v85);
        v98 = (id)v470;
        v99 = *(id *)&v469[v470];
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v488, (uint64_t)&v491);
        sub_100090E88(&v488);

        swift_bridgeObjectRelease(v81);
        v36 = v481;
        v34 = (char *)&type metadata for Any;
        v73 = v475;
LABEL_56:
        v35 = &selRef_authSession_authComplete_;
        if (!*((_QWORD *)&v492 + 1))
          goto LABEL_63;
        v100 = sub_10009061C(&qword_10026C2E0);
        v101 = type metadata accessor for DaemonAccessory(0);
        if ((swift_dynamicCast(&v488, &v491, v100, v101, 6) & 1) != 0)
        {
          v102 = v488;
          if (qword_10026BC00 != -1)
            swift_once(&qword_10026BC00, sub_100158DF8);
          v103 = qword_100275638;
          v104 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
          v105 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
          swift_retain(v105);
          os_unfair_lock_lock(v105 + 4);
          swift_release(v105);
          v106 = *(void **)(v103 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
          v107 = *(os_unfair_lock_s **)(v103 + v104);
          v108 = v106;
          swift_retain(v107);
          os_unfair_lock_unlock(v107 + 4);
          v109 = swift_release(v107);
          if (v106)
          {
            v110 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v109);
            v111 = *(id *)(v102 + 24);
            v112 = static NSObject.== infix(_:_:)(v110, v111);

            if ((v112 & 1) != 0)
            {
              v113 = v463;
              *(_BYTE *)(v102 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = v463;
              sub_10015F088(v113);
              swift_release(v102);

              goto LABEL_68;
            }
            swift_release(v102);

          }
          else
          {
            swift_release(v102);
          }

LABEL_68:
          v34 = (char *)&type metadata for Any;
          v35 = &selRef_authSession_authComplete_;
        }
        else
        {

        }
LABEL_69:
        v37 = v482;
LABEL_70:
        sub_100090EA8((uint64_t)v495, (uint64_t)&v491);
        if ((swift_dynamicCast(&v488, &v491, v34 + 8, v37, 6) & 1) == 0)
          goto LABEL_100;
        v114 = (void *)v488;
        v115 = objc_msgSend((id)v488, v35[41]);
        if (!v115)
          goto LABEL_292;
        v116 = v115;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v117 = objc_msgSend(v116, "UUID");

        if (qword_10026BBC8 != -1)
          swift_once(&qword_10026BBC8, sub_10012E6D8);
        v118 = static NSObject.== infix(_:_:)(v117, qword_1002755A8);

        if ((v118 & 1) == 0)
        {

          goto LABEL_78;
        }
        v119 = objc_msgSend(v114, "value");
        if (v119)
        {
          v120 = v119;
          _bridgeAnyObjectToAny(_:)(&v488);
          swift_unknownObjectRelease(v120);
        }
        else
        {
          v488 = 0u;
          v489 = 0u;
        }
        sub_1000D55A0((uint64_t)&v488, (uint64_t)&v491, v33);
        v37 = v482;
        if (!*((_QWORD *)&v492 + 1))
        {

          sub_10009B2C0((uint64_t)&v491, v33);
          goto LABEL_100;
        }
        if ((swift_dynamicCast(&__dst, &v491, v34 + 8, &type metadata for Data, 6) & 1) == 0)
        {

          goto LABEL_100;
        }
        v123 = *((_QWORD *)&__dst + 1);
        v122 = (char *)__dst;
        v124 = (void *)objc_opt_self(HAPFirmwareUpdateReadiness, v121);
        v470 = (int64_t)v122;
        isa = Data._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v491 = 0;
        v126 = objc_msgSend(v124, "parsedFromData:error:", isa, &v491);

        v127 = v126;
        v128 = (void *)v491;
        if (!v127)
        {
          v469 = (char *)v123;
          v195 = (id)v491;
          v196 = _convertNSErrorToError(_:)(v128);

          swift_willThrow(v197);
          goto LABEL_131;
        }
        v129 = *(void **)(v473 + v471);
        if (!v129)
        {
          v493 = 0;
          v491 = 0u;
          v492 = 0u;
          v218 = v128;
LABEL_153:

          sub_10009B2FC(v470, v123);
          sub_10009B2C0((uint64_t)&v491, (uint64_t *)&unk_10026DF40);
          goto LABEL_78;
        }
        v465 = (uint64_t)v127;
        v130 = v474;
        if (!v474)
          goto LABEL_299;
        v469 = (char *)v123;
        v481 = v36;
        v131 = v129;
        v132 = v128;
        v133 = objc_msgSend(v130, "identifier");
        if (!v133)
          goto LABEL_300;
        v134 = v133;
        v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
        v475 = v136;

        v137 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v138 = *(id *)(v131 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        v139 = (NSObject **)(v131 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess(v131 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, &v484, 0, 0);
        v140 = *v139;
        v141 = (*v139)[2].isa;
        if (!v141)
          goto LABEL_143;
        v438 = v140;
        v439 = v137;
        v463 = v131;
        v142 = (uint64_t)&v140[4];
        swift_bridgeObjectRetain(v140);
        while (2)
        {
          sub_10009AFF4(v142, (uint64_t)&v488);
          v143 = *(void **)(*sub_10009B038(&v488, *((uint64_t *)&v489 + 1)) + 32);
          if (!v143)
            goto LABEL_89;
          v144 = v143;
          v145 = objc_msgSend(v144, "identifier");
          if (!v145)
            goto LABEL_88;
          v146 = v145;
          v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
          v149 = v148;

          v150 = v475;
          if (v147 != v135 || v149 != v475)
          {
            v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v147, v149, v135, v475, 0);
            swift_bridgeObjectRelease(v149);
            v13 = v480;
            v34 = (char *)&type metadata for Any;
            v33 = &qword_10026E5F0;
            if ((v152 & 1) != 0)
            {
              v150 = v475;
              v153 = v438;
              goto LABEL_147;
            }
LABEL_88:

            v35 = &selRef_authSession_authComplete_;
LABEL_89:
            sub_100090E88(&v488);
            v142 += 40;
            v141 = (Class)((char *)v141 - 1);
            if (!v141)
            {
              swift_bridgeObjectRelease(v438);
              v131 = v463;
              v137 = v439;
LABEL_143:
              v220 = *(id *)&v137[v131];
              OS_dispatch_semaphore.signal()();

              v493 = 0;
              v491 = 0u;
              v492 = 0u;

              swift_bridgeObjectRelease(v475);
              goto LABEL_148;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease(v438);
        v153 = v150;
        v13 = v480;
        v34 = (char *)&type metadata for Any;
        v33 = &qword_10026E5F0;
LABEL_147:
        swift_bridgeObjectRelease(v153);
        v222 = (id)v463;
        v223 = *(id *)&v439[v463];
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v488, (uint64_t)&v491);
        sub_100090E88(&v488);

        swift_bridgeObjectRelease(v150);
        v35 = &selRef_authSession_authComplete_;
LABEL_148:
        v123 = (unint64_t)v469;
        v127 = (id)v465;
        v36 = v481;
        if (!*((_QWORD *)&v492 + 1))
          goto LABEL_153;
        v224 = sub_10009061C(&qword_10026C2E0);
        v225 = type metadata accessor for DaemonAccessory(0);
        if ((swift_dynamicCast(&v488, &v491, v224, v225, 6) & 1) != 0)
        {
          v226 = v488;
          v227 = *(_QWORD *)(v473 + v471);
          if (v227)
          {
            v228 = *(id *)(v227 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
            v229 = v127;
            v230 = v455;
            sub_100127304(v226, v229);
            if (v230)
            {

              swift_release(v226);
              v196 = v230;
LABEL_131:
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v472 + 16))(v459, v476, v13);
              swift_errorRetain(v196);
              v198 = swift_errorRetain(v196);
              v199 = Logger.logObject.getter(v198);
              v200 = static os_log_type_t.error.getter();
              v201 = os_log_type_enabled(v199, v200);
              v455 = 0;
              if (v201)
              {
                v202 = swift_slowAlloc(12, -1);
                v203 = (uint64_t *)swift_slowAlloc(8, -1);
                *(_DWORD *)v202 = v452.n128_u32[0];
                swift_errorRetain(v196);
                v204 = _swift_stdlib_bridgeErrorToNSError(v196);
                *(_QWORD *)(v202 + 4) = v204;
                *v203 = v204;
                swift_errorRelease(v196);
                swift_errorRelease(v196);
                _os_log_impl((void *)&_mh_execute_header, v199, v200, "error parsing firmware update readiness %@", (uint8_t *)v202, 0xCu);
                v205 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v203, 1, v205);
                v206 = v203;
                v35 = &selRef_authSession_authComplete_;
                swift_slowDealloc(v206, -1, -1);
                swift_slowDealloc(v202, -1, -1);

                sub_10009B2FC(v470, (unint64_t)v469);
                swift_errorRelease(v196);
              }
              else
              {

                sub_10009B2FC(v470, (unint64_t)v469);
                swift_errorRelease(v196);
                swift_errorRelease(v196);
                swift_errorRelease(v196);

              }
              (*(void (**)(_BYTE *, uint64_t))(v472 + 8))(v459, v13);
              v34 = (char *)&type metadata for Any;
            }
            else
            {
              v455 = 0;

              sub_10009B2FC(v470, (unint64_t)v469);
              swift_release(v226);

            }
          }
          else
          {

            sub_10009B2FC(v470, (unint64_t)v469);
            swift_release(v226);

          }
        }
        else
        {

          sub_10009B2FC(v470, v123);
        }
LABEL_78:
        v37 = v482;
LABEL_100:
        sub_100090EA8((uint64_t)v495, (uint64_t)&v491);
        if ((swift_dynamicCast(&v488, &v491, v34 + 8, v37, 6) & 1) == 0)
          goto LABEL_164;
        v154 = (void *)v488;
        v155 = objc_msgSend((id)v488, v35[41]);
        if (!v155)
          goto LABEL_293;
        v156 = v155;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v157 = objc_msgSend(v156, "UUID");

        if (qword_10026BBD0 != -1)
          swift_once(&qword_10026BBD0, sub_10012E7A8);
        v158 = static NSObject.== infix(_:_:)(v157, qword_1002755B0);

        if ((v158 & 1) == 0)
        {

          goto LABEL_108;
        }
        v159 = objc_msgSend(v154, "value");
        if (v159)
        {
          v160 = v159;
          _bridgeAnyObjectToAny(_:)(&v488);
          swift_unknownObjectRelease(v160);
        }
        else
        {
          v488 = 0u;
          v489 = 0u;
        }
        sub_1000D55A0((uint64_t)&v488, (uint64_t)&v491, v33);
        v37 = v482;
        if (!*((_QWORD *)&v492 + 1))
        {

          v194 = v33;
          goto LABEL_163;
        }
        if ((swift_dynamicCast(&__dst, &v491, v34 + 8, &type metadata for Data, 6) & 1) == 0)
        {

          goto LABEL_164;
        }
        v163 = *((_QWORD *)&__dst + 1);
        v162 = (char *)__dst;
        v164 = (void *)objc_opt_self(HAPFirmwareUpdateStatus, v161);
        v470 = (int64_t)v162;
        v165 = Data._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v491 = 0;
        v166 = objc_msgSend(v164, "parsedFromData:error:", v165, &v491);

        v167 = v166;
        v168 = (void *)v491;
        if (!v167)
        {
          v469 = (char *)v163;
          v207 = (id)v491;
          v208 = _convertNSErrorToError(_:)(v168);

          swift_willThrow(v209);
          goto LABEL_134;
        }
        v169 = *(void **)(v473 + v471);
        if (!v169)
        {
          v493 = 0;
          v491 = 0u;
          v492 = 0u;
          v219 = v168;
LABEL_162:
          v37 = v482;

          sub_10009B2FC(v470, v163);
          v194 = (uint64_t *)&unk_10026DF40;
LABEL_163:
          sub_10009B2C0((uint64_t)&v491, v194);
          goto LABEL_164;
        }
        v465 = (uint64_t)v167;
        v170 = v474;
        if (!v474)
          goto LABEL_301;
        v469 = (char *)v163;
        v481 = v36;
        v171 = v169;
        v172 = v168;
        v173 = objc_msgSend(v170, "identifier");
        if (!v173)
          goto LABEL_302;
        v174 = v173;
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
        v475 = v176;

        v177 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v178 = *(id *)(v171 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        v179 = (NSObject **)(v171 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess(v171 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, &v485, 0, 0);
        v180 = *v179;
        v181 = (*v179)[2].isa;
        if (!v181)
          goto LABEL_145;
        v438 = v180;
        v439 = v177;
        v463 = v171;
        v182 = (uint64_t)&v180[4];
        swift_bridgeObjectRetain(v180);
        while (2)
        {
          sub_10009AFF4(v182, (uint64_t)&v488);
          v183 = *(void **)(*sub_10009B038(&v488, *((uint64_t *)&v489 + 1)) + 32);
          if (!v183)
            goto LABEL_119;
          v184 = v183;
          v185 = objc_msgSend(v184, "identifier");
          if (!v185)
            goto LABEL_118;
          v186 = v185;
          v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
          v189 = v188;

          v190 = v475;
          if (v187 != v175 || v189 != v475)
          {
            v192 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v189, v175, v475, 0);
            swift_bridgeObjectRelease(v189);
            v13 = v480;
            v34 = (char *)&type metadata for Any;
            v33 = &qword_10026E5F0;
            if ((v192 & 1) != 0)
            {
              v190 = v475;
              v193 = v438;
              goto LABEL_156;
            }
LABEL_118:

            v35 = &selRef_authSession_authComplete_;
LABEL_119:
            sub_100090E88(&v488);
            v182 += 40;
            v181 = (Class)((char *)v181 - 1);
            if (!v181)
            {
              swift_bridgeObjectRelease(v438);
              v171 = v463;
              v177 = v439;
LABEL_145:
              v221 = *(id *)&v177[v171];
              OS_dispatch_semaphore.signal()();

              v493 = 0;
              v491 = 0u;
              v492 = 0u;

              swift_bridgeObjectRelease(v475);
              goto LABEL_157;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease(v438);
        v193 = v190;
        v13 = v480;
        v34 = (char *)&type metadata for Any;
        v33 = &qword_10026E5F0;
LABEL_156:
        swift_bridgeObjectRelease(v193);
        v231 = (id)v463;
        v232 = *(id *)&v439[v463];
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v488, (uint64_t)&v491);
        sub_100090E88(&v488);

        swift_bridgeObjectRelease(v190);
        v35 = &selRef_authSession_authComplete_;
LABEL_157:
        v163 = (unint64_t)v469;
        v167 = (id)v465;
        v36 = v481;
        if (!*((_QWORD *)&v492 + 1))
          goto LABEL_162;
        v233 = sub_10009061C(&qword_10026C2E0);
        v234 = type metadata accessor for DaemonAccessory(0);
        if ((swift_dynamicCast(&v488, &v491, v233, v234, 6) & 1) != 0)
        {
          v235 = v488;
          v236 = *(_QWORD *)(v473 + v471);
          if (v236)
          {
            v237 = *(id *)(v236 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
            v238 = v167;
            v239 = v455;
            sub_100127794(v235, v238);
            if (v239)
            {

              swift_release(v235);
              v208 = v239;
LABEL_134:
              v455 = 0;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v472 + 16))(v458, v476, v13);
              swift_errorRetain(v208);
              v210 = swift_errorRetain(v208);
              v211 = Logger.logObject.getter(v210);
              v212 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v211, v212))
              {
                v213 = swift_slowAlloc(12, -1);
                v214 = (uint64_t *)swift_slowAlloc(8, -1);
                *(_DWORD *)v213 = v452.n128_u32[0];
                swift_errorRetain(v208);
                v215 = _swift_stdlib_bridgeErrorToNSError(v208);
                *(_QWORD *)(v213 + 4) = v215;
                *v214 = v215;
                swift_errorRelease(v208);
                swift_errorRelease(v208);
                _os_log_impl((void *)&_mh_execute_header, v211, v212, "error parsing firmware update update status %@", (uint8_t *)v213, 0xCu);
                v216 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v214, 1, v216);
                v217 = v214;
                v35 = &selRef_authSession_authComplete_;
                swift_slowDealloc(v217, -1, -1);
                swift_slowDealloc(v213, -1, -1);

                sub_10009B2FC(v470, (unint64_t)v469);
                swift_errorRelease(v208);
              }
              else
              {

                sub_10009B2FC(v470, (unint64_t)v469);
                swift_errorRelease(v208);
                swift_errorRelease(v208);
                swift_errorRelease(v208);

              }
              (*(void (**)(_BYTE *, uint64_t))(v472 + 8))(v458, v13);
              v34 = (char *)&type metadata for Any;
            }
            else
            {
              v455 = 0;

              sub_10009B2FC(v470, (unint64_t)v469);
              swift_release(v235);

            }
          }
          else
          {

            sub_10009B2FC(v470, (unint64_t)v469);
            swift_release(v235);

          }
        }
        else
        {

          sub_10009B2FC(v470, v163);
        }
LABEL_108:
        v37 = v482;
LABEL_164:
        sub_100090EA8((uint64_t)v495, (uint64_t)&v491);
        if ((swift_dynamicCast(&v488, &v491, v34 + 8, v37, 6) & 1) == 0)
          goto LABEL_213;
        v240 = (void *)v488;
        v241 = objc_msgSend((id)v488, v35[41]);
        if (!v241)
          goto LABEL_294;
        v242 = v241;
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v243 = objc_msgSend(v242, "UUID");

        if (qword_10026BBB0 != -1)
          swift_once(&qword_10026BBB0, sub_10012E468);
        v244 = static NSObject.== infix(_:_:)(v243, qword_100275590);

        if ((v244 & 1) == 0)
        {

LABEL_172:
          v37 = v482;
          goto LABEL_213;
        }
        v245 = objc_msgSend(v240, "value");
        if (v245)
        {
          v246 = v245;
          _bridgeAnyObjectToAny(_:)(&v488);
          swift_unknownObjectRelease(v246);
        }
        else
        {
          v488 = 0u;
          v489 = 0u;
        }
        sub_1000D55A0((uint64_t)&v488, (uint64_t)&v491, v33);
        v37 = v482;
        if (!*((_QWORD *)&v492 + 1))
        {

          sub_10009B2C0((uint64_t)&v491, v33);
          goto LABEL_213;
        }
        if ((swift_dynamicCast(&__dst, &v491, v34 + 8, &type metadata for Data, 6) & 1) == 0)
        {

          goto LABEL_213;
        }
        v481 = v36;
        v247 = *((_QWORD *)&__dst + 1);
        v248 = __dst;
        v249 = v472;
        v250 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v472 + 16);
        v251 = v13;
        v252 = v453;
        v253 = v250(v453, v476, v251);
        v254 = Logger.logObject.getter(v253);
        v255 = static os_log_type_t.debug.getter();
        v256 = os_log_type_enabled(v254, v255);
        v475 = v248;
        v470 = (int64_t)v250;
        if (v256)
        {
          v257 = swift_slowAlloc(12, -1);
          v258 = v247;
          v259 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v491 = v259;
          *(_DWORD *)v257 = v467.n128_u32[0];
          *(_QWORD *)(v257 + 4) = sub_1000906BC(0xD00000000000004BLL, v449, (uint64_t *)&v491);
          _os_log_impl((void *)&_mh_execute_header, v254, v255, "%s Decoding trajectory status from ADK", (uint8_t *)v257, 0xCu);
          swift_arrayDestroy(v259, 1, (char *)&type metadata for Any + 8);
          v260 = v259;
          v247 = v258;
          v248 = v475;
          swift_slowDealloc(v260, -1, -1);
          swift_slowDealloc(v257, -1, -1);
        }

        v261 = *(void (**)(uint64_t, uint64_t))(v249 + 8);
        v261(v252, v251);
        v13 = v251;
        sub_10009B27C((uint64_t)v248, v247);
        v262 = (uint64_t)v454;
        TrajectoryCommand.Progress.init(data:)(v248, v247);
        v263 = v456;
        v264 = v460;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v456 + 48))(v262, 1, v460) == 1)
        {

          sub_10009B2FC((uint64_t)v248, v247);
          sub_10009B2C0(v262, (uint64_t *)&unk_10026E0E0);
          v36 = v481;
          v34 = (char *)&type metadata for Any;
          v35 = &selRef_authSession_authComplete_;
          v33 = &qword_10026E5F0;
          goto LABEL_172;
        }
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v263 + 32))(v462, v262, v264);
        v265 = v450;
        v266 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v470)(v450, v476, v251);
        v267 = Logger.logObject.getter(v266);
        v268 = static os_log_type_t.debug.getter();
        v269 = os_log_type_enabled(v267, v268);
        v469 = (char *)v247;
        if (v269)
        {
          v270 = swift_slowAlloc(12, -1);
          v271 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v491 = v271;
          *(_DWORD *)v270 = v467.n128_u32[0];
          *(_QWORD *)(v270 + 4) = sub_1000906BC(0xD00000000000004BLL, v447 | 0x8000000000000000, (uint64_t *)&v491);
          _os_log_impl((void *)&_mh_execute_header, v267, v268, "%s Received trajectory status from ADK", (uint8_t *)v270, 0xCu);
          swift_arrayDestroy(v271, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v271, -1, -1);
          swift_slowDealloc(v270, -1, -1);
        }

        v261(v265, v251);
        v13 = v251;
        v272 = v474;
        v273 = *(void **)(v473 + v471);
        v274 = v460;
        v35 = &selRef_authSession_authComplete_;
        v33 = &qword_10026E5F0;
        if (!v273)
        {
          v493 = 0;
          v491 = 0u;
          v492 = 0u;
          v34 = (char *)&type metadata for Any;
LABEL_210:

          sub_10009B2FC((uint64_t)v475, (unint64_t)v469);
          sub_10009B2C0((uint64_t)&v491, (uint64_t *)&unk_10026DF40);
          goto LABEL_212;
        }
        v34 = (char *)&type metadata for Any;
        if (!v474)
          goto LABEL_303;
        v275 = v273;
        v276 = objc_msgSend(v272, "identifier");
        if (!v276)
          goto LABEL_304;
        v277 = v276;
        v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v276);
        v280 = v279;

        v470 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v281 = *(id *)(v275 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        v282 = (char *)(v275 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess(v275 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories, &v486, 0, 0);
        v283 = *(char **)v282;
        v284 = *(_QWORD *)(*(_QWORD *)v282 + 16);
        if (!v284)
          goto LABEL_202;
        v465 = v275;
        v285 = (uint64_t)(v283 + 32);
        v463 = (uint64_t)v283;
        swift_bridgeObjectRetain(v283);
        while (2)
        {
          sub_10009AFF4(v285, (uint64_t)&v488);
          v286 = *(void **)(*sub_10009B038(&v488, *((uint64_t *)&v489 + 1)) + 32);
          if (!v286)
            goto LABEL_190;
          v287 = v286;
          v288 = objc_msgSend(v287, "identifier");
          if (!v288)
            goto LABEL_189;
          v289 = v288;
          v290 = static String._unconditionallyBridgeFromObjectiveC(_:)(v288);
          v292 = v291;

          if (v290 != v278 || v292 != v280)
          {
            v294 = _stringCompareWithSmolCheck(_:_:expecting:)(v290, v292, v278, v280, 0);
            swift_bridgeObjectRelease(v292);
            v13 = v480;
            v33 = &qword_10026E5F0;
            if ((v294 & 1) != 0)
            {
              v295 = (char *)v463;
              goto LABEL_206;
            }
LABEL_189:

            v34 = (char *)&type metadata for Any;
LABEL_190:
            sub_100090E88(&v488);
            v285 += 40;
            if (!--v284)
            {
              swift_bridgeObjectRelease(v463);
              v275 = v465;
LABEL_202:
              v296 = *(id *)(v275 + v470);
              OS_dispatch_semaphore.signal()();

              v493 = 0;
              v491 = 0u;
              v492 = 0u;

              swift_bridgeObjectRelease(v280);
              v274 = v460;
              goto LABEL_207;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease(v463);
        v295 = v280;
        v13 = v480;
        v33 = &qword_10026E5F0;
LABEL_206:
        swift_bridgeObjectRelease(v295);
        v297 = (id)v465;
        v298 = *(id *)(v465 + v470);
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v488, (uint64_t)&v491);
        sub_100090E88(&v488);

        swift_bridgeObjectRelease(v280);
        v274 = v460;
        v34 = (char *)&type metadata for Any;
LABEL_207:
        v35 = &selRef_authSession_authComplete_;
        if (!*((_QWORD *)&v492 + 1))
          goto LABEL_210;
        v299 = sub_10009061C(&qword_10026C2E0);
        v300 = type metadata accessor for DaemonAccessory(0);
        v301 = swift_dynamicCast(&v488, &v491, v299, v300, 6);
        if ((v301 & 1) != 0)
        {
          v302 = v488;
          v303 = *(os_unfair_lock_s **)(v488 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
          __chkstk_darwin(v301);
          *(_QWORD *)&v436[-16] = v462;
          *(_QWORD *)&v436[-8] = v302;
          swift_retain(v303);
          os_unfair_lock_lock(v303 + 4);
          v304 = v455;
          sub_100180780(v305, (uint64_t (*)(void))sub_100141E14);
          v455 = v304;
          v34 = (char *)&type metadata for Any;
          os_unfair_lock_unlock(v303 + 4);
          swift_release(v302);

          swift_release(v303);
          sub_10009B2FC((uint64_t)v475, (unint64_t)v469);
          v35 = &selRef_authSession_authComplete_;
        }
        else
        {

          sub_10009B2FC((uint64_t)v475, (unint64_t)v469);
        }
LABEL_212:
        v37 = v482;
        (*(void (**)(_BYTE *, uint64_t))(v456 + 8))(v462, v274);
        v36 = v481;
LABEL_213:
        sub_100090EA8((uint64_t)v495, (uint64_t)&v491);
        if ((swift_dynamicCast(&v488, &v491, v34 + 8, v37, 6) & 1) == 0)
          goto LABEL_238;
        v306 = (void *)v488;
        v307 = objc_msgSend((id)v488, "value");
        if (v307)
        {
          v308 = v307;
          _bridgeAnyObjectToAny(_:)(&v488);
          swift_unknownObjectRelease(v308);
        }
        else
        {
          v488 = 0u;
          v489 = 0u;
        }
        sub_1000D55A0((uint64_t)&v488, (uint64_t)&v491, v33);
        if (!*((_QWORD *)&v492 + 1))
        {

          sub_10009B2C0((uint64_t)&v491, v33);
          goto LABEL_238;
        }
        if ((swift_dynamicCast(&__dst, &v491, v34 + 8, &type metadata for Data, 6) & 1) == 0)
        {

          goto LABEL_238;
        }
        v475 = __dst;
        v481 = v36;
        v482 = *((_QWORD *)&__dst + 1);
        v309 = objc_msgSend(v306, v35[41]);
        if (!v309)
          goto LABEL_295;
        v310 = v309;
        v311 = objc_msgSend(v309, "UUID");

        v312 = objc_msgSend(v311, "data");
        v313 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v312);
        v315 = v314;

        sub_100177DCC(12, v313, v315);
        v316 = v488;
        v317 = sub_10009061C((uint64_t *)&unk_10026EA70);
        *((_QWORD *)&v492 + 1) = v317;
        v493 = sub_1000D5BAC((unint64_t *)&qword_10026CFE0, (uint64_t *)&unk_10026EA70, (uint64_t)&protocol conformance descriptor for <A> [A]);
        *(_QWORD *)&v491 = &off_1002384F0;
        v318 = sub_10009B038(&v491, v317);
        v319 = *v318;
        v320 = *(_QWORD *)(*v318 + 16);
        if (v320)
        {
          v321 = v319 + 32;
          if (v320 <= 0xE)
          {
            *(_QWORD *)((char *)&__dst + 6) = 0;
            *(_QWORD *)&__dst = 0;
            BYTE14(__dst) = v320;
            memcpy(&__dst, (const void *)(v319 + 32), v320);
            v326 = __dst;
            v327 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          }
          else
          {
            v322 = v13;
            v323 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v323, *(unsigned int *)(v323 + 48), *(unsigned __int16 *)(v323 + 52));
            v324 = __DataStorage.init(bytes:length:)(v321, v320);
            v325 = v324;
            if (v320 >= 0x7FFFFFFF)
            {
              v328 = type metadata accessor for Data.RangeReference(0);
              v326 = swift_allocObject(v328, 32, 7);
              *(_QWORD *)(v326 + 16) = 0;
              *(_QWORD *)(v326 + 24) = v320;
              v327 = v325 | 0x8000000000000000;
            }
            else
            {
              v326 = v320 << 32;
              v327 = v324 | 0x4000000000000000;
            }
            v13 = v322;
          }
        }
        else
        {
          v326 = 0;
          v327 = 0xC000000000000000;
        }
        sub_100090E88(&v491);
        sub_1001810E0(v316, *((uint64_t *)&v316 + 1));
        v330 = v329;
        sub_10009B2FC(v326, v327);
        sub_10009B2FC(v316, *((unint64_t *)&v316 + 1));

        v36 = v481;
        v34 = (char *)&type metadata for Any;
        v35 = &selRef_authSession_authComplete_;
        if ((v330 & 1) == 0)
        {
LABEL_237:

          sub_10009B2FC((uint64_t)v475, v482);
          goto LABEL_238;
        }
        v331 = objc_msgSend(v306, "cbCharacteristic");
        if (!v331)
        {
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
          return;
        }
        v332 = v331;
        v333 = objc_msgSend(v331, "UUID");

        v334 = sub_100119010();
        if (qword_10026BBE0 != -1)
          swift_once(&qword_10026BBE0, sub_10012E948);
        if (v334 != sub_100119010())
          goto LABEL_237;
        v335 = v472;
        v336 = v457;
        v465 = *(_QWORD *)(v472 + 16);
        ((void (*)(_BYTE *, uint64_t, uint64_t))v465)(v457, v476, v13);
        v337 = (uint64_t)v475;
        v338 = v482;
        sub_10009B27C((uint64_t)v475, v482);
        v339 = sub_10009B27C(v337, v338);
        v340 = Logger.logObject.getter(v339);
        v341 = static os_log_type_t.default.getter(v340);
        if (os_log_type_enabled(v340, v341))
        {
          v342 = (uint8_t *)swift_slowAlloc(12, -1);
          v343 = (char *)swift_slowAlloc(32, -1);
          v344 = v337;
          *(_QWORD *)&v491 = v343;
          *(_DWORD *)v342 = v467.n128_u32[0];
          v469 = (char *)(v342 + 4);
          v470 = (int64_t)v343;
          sub_100117E20(v337, v338);
          v345 = v33;
          v346 = v13;
          v348 = v347;
          *(_QWORD *)&v488 = sub_1000906BC(v349, v347, (uint64_t *)&v491);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v448, v469, v342 + 12);
          v350 = v348;
          v13 = v346;
          v33 = v345;
          v351 = v482;
          swift_bridgeObjectRelease(v350);
          sub_10009B2FC(v344, v351);
          sub_10009B2FC(v344, v351);
          _os_log_impl((void *)&_mh_execute_header, v340, v341, "Sensor Data: %s", v342, 0xCu);
          v34 = (char *)&type metadata for Any;
          v352 = (char *)v470;
          swift_arrayDestroy(v470, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v352, -1, -1);
          swift_slowDealloc(v342, -1, -1);

          v469 = *(char **)(v472 + 8);
          ((void (*)(_BYTE *, uint64_t))v469)(v457, v13);
        }
        else
        {
          sub_10009B2FC(v337, v338);
          sub_10009B2FC(v337, v338);

          v469 = *(char **)(v335 + 8);
          ((void (*)(_BYTE *, uint64_t))v469)(v336, v13);
          v34 = (char *)&type metadata for Any;
        }
        ((void (*)(_BYTE *, uint64_t, uint64_t))v465)(v461, v476, v13);
        v353 = v306;
        v354 = Logger.logObject.getter(v353);
        v355 = static os_log_type_t.default.getter(v354);
        v356 = os_log_type_enabled(v354, v355);
        v470 = (int64_t)v353;
        if (v356)
        {
          v357 = (uint8_t *)swift_slowAlloc(12, -1);
          v358 = (NSObject **)swift_slowAlloc(8, -1);
          *(_DWORD *)v357 = v452.n128_u32[0];
          v463 = (uint64_t)(v357 + 4);
          *(_QWORD *)&v491 = v353;
          v359 = v353;
          v34 = (char *)&type metadata for Any;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v491, v446, v463, v357 + 12);
          *v358 = v353;

          _os_log_impl((void *)&_mh_execute_header, v354, v355, "Characteristic: %@", v357, 0xCu);
          v360 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v358, 1, v360);
          swift_slowDealloc(v358, -1, -1);
          swift_slowDealloc(v357, -1, -1);
        }
        else
        {

          v354 = v353;
        }
        v361 = v464;
        v35 = &selRef_authSession_authComplete_;

        ((void (*)(_BYTE *, uint64_t))v469)(v461, v13);
        v362 = *(void **)(v473 + v471);
        if (!v362)
        {
          v493 = 0;
          v491 = 0u;
          v492 = 0u;
LABEL_274:

          sub_10009B2FC((uint64_t)v475, v482);
          sub_10009B2C0((uint64_t)&v491, (uint64_t *)&unk_10026DF40);
          v36 = v481;
LABEL_238:
          sub_100090E88(v495);
          goto LABEL_239;
        }
        v363 = v474;
        if (!v474)
          goto LABEL_305;
        v364 = v362;
        v365 = objc_msgSend(v363, "identifier");
        if (!v365)
          goto LABEL_306;
        v366 = v365;
        v367 = static String._unconditionallyBridgeFromObjectiveC(_:)(v365);
        v369 = v368;

        v463 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        v370 = *(id *)&v364[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        v371 = &v364[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess(&v364[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v490, 0, 0);
        v372 = *(_QWORD *)v371;
        v373 = *(_QWORD *)(v372 + 16);
        if (!v373)
        {
LABEL_262:
          v384 = *(id *)&v364[v463];
          OS_dispatch_semaphore.signal()();

          v493 = 0;
          v491 = 0u;
          v492 = 0u;

          swift_bridgeObjectRelease(v369);
          goto LABEL_265;
        }
        v439 = v364;
        v374 = v372 + 32;
        swift_bridgeObjectRetain(v372);
        while (2)
        {
          sub_10009AFF4(v374, (uint64_t)&v488);
          v375 = *(void **)(*sub_10009B038(&v488, *((uint64_t *)&v489 + 1)) + 32);
          if (!v375)
            goto LABEL_251;
          v376 = v375;
          v377 = objc_msgSend(v376, "identifier");
          if (!v377)
            goto LABEL_250;
          v378 = v377;
          v379 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
          v381 = v380;

          if (v379 != v367 || v381 != v369)
          {
            v383 = _stringCompareWithSmolCheck(_:_:expecting:)(v379, v381, v367, v369, 0);
            swift_bridgeObjectRelease(v381);
            v13 = v480;
            v33 = &qword_10026E5F0;
            if ((v383 & 1) != 0)
              goto LABEL_264;
LABEL_250:

            v361 = v464;
LABEL_251:
            sub_100090E88(&v488);
            v374 += 40;
            if (!--v373)
            {
              swift_bridgeObjectRelease(v372);
              v364 = v439;
              goto LABEL_262;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease(v372);
        v372 = v369;
        v13 = v480;
        v33 = &qword_10026E5F0;
LABEL_264:
        swift_bridgeObjectRelease(v372);
        v385 = v439;
        v386 = *(id *)&v439[v463];
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v488, (uint64_t)&v491);
        sub_100090E88(&v488);

        swift_bridgeObjectRelease(v369);
        v361 = v464;
LABEL_265:
        v35 = &selRef_authSession_authComplete_;
        v34 = (char *)&type metadata for Any;
        if (!*((_QWORD *)&v492 + 1))
          goto LABEL_274;
        v387 = sub_10009061C(&qword_10026C2E0);
        v388 = type metadata accessor for DaemonAccessory(0);
        if ((swift_dynamicCast(&v488, &v491, v387, v388, 6) & 1) == 0)
        {

          sub_10009B2FC((uint64_t)v475, v482);
          v36 = v481;
          goto LABEL_238;
        }
        v389 = v488;
        v390 = objc_msgSend((id)v470, "service");
        if (!v390)
          goto LABEL_307;
        v391 = v390;
        v392 = objc_msgSend(v390, "type");

        if (!v392)
          goto LABEL_308;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v392);
        v394 = v393;

        v395 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v394);
        v397 = objc_msgSend((id)objc_opt_self(CBUUID, v396), "UUIDWithString:", v395);

        v399 = (uint64_t)v444;
        v398 = v445;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v445 + 104))(v444, v443, v361);
        v400 = (uint64_t *)(v389 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
        swift_beginAccess(v389 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, &v487, 0, 0);
        v401 = *v400;
        swift_bridgeObjectRetain(v401);
        sub_100177D8C(v399, v401);
        v403 = v402;
        swift_bridgeObjectRelease(v401);
        if (!v403)
        {
          (*(void (**)(uint64_t, uint64_t))(v398 + 8))(v399, v361);
          goto LABEL_280;
        }
        v404 = (char *)v397;
        v405 = v455;
        v406 = v361;
        v407 = (_QWORD *)sub_10013B32C(v403, (uint64_t)v404);
        v455 = v405;
        swift_bridgeObjectRelease(v403);
        v463 = (uint64_t)v404;

        (*(void (**)(uint64_t, uint64_t))(v398 + 8))(v399, v406);
        if (!v407[2])
        {
          swift_bridgeObjectRelease(v407);
LABEL_280:
          v13 = v480;
          sub_100090E88(v495);

          sub_10009B2FC((uint64_t)v475, v482);
          swift_release(v389);

LABEL_281:
          v36 = v481;
          v34 = (char *)&type metadata for Any;
          v35 = &selRef_authSession_authComplete_;
          goto LABEL_285;
        }
        v409 = v407[4];
        v408 = v407[5];
        v410 = (void *)v407[6];
        swift_bridgeObjectRetain(v408);
        v439 = v410;
        swift_bridgeObjectRelease(v407);
        v411 = objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState(0));
        swift_bridgeObjectRetain(v408);
        v412 = (uint64_t)v475;
        v413 = v482;
        sub_10009B27C((uint64_t)v475, v482);
        swift_bridgeObjectRetain(v408);
        v414 = AccessoryBatteryState.init(data:name:)(v412, v413, v409, v408);
        v13 = v480;
        if (!v414)
        {
          sub_100090E88(v495);

          sub_10009B2FC(v412, v413);
          swift_release(v389);

          swift_bridgeObjectRelease_n(v408, 2);
          goto LABEL_281;
        }
        v415 = (void *)v414;
        ((void (*)(uint64_t, uint64_t, uint64_t))v465)(v442, v476, v480);
        v416 = v415;
        sub_10009B27C(v412, v413);
        v417 = v416;
        sub_10009B27C(v412, v413);
        swift_bridgeObjectRetain(v408);
        v418 = v417;
        v419 = Logger.logObject.getter(v418);
        v420 = static os_log_type_t.default.getter(v419);
        v421 = v420;
        if (os_log_type_enabled(v419, v420))
        {
          v422 = v412;
          v423 = swift_slowAlloc(48, -1);
          v465 = swift_slowAlloc(96, -1);
          *(_QWORD *)&v491 = v465;
          *(_DWORD *)v423 = v440.n128_u32[0];
          v438 = v419;
          swift_bridgeObjectRetain(v408);
          *(_QWORD *)&v488 = sub_1000906BC(v409, v408, (uint64_t *)&v491);
          v424 = v448;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v448, v423 + 4, v423 + 12);
          swift_bridgeObjectRelease_n(v408, 3);
          *(_WORD *)(v423 + 12) = 2080;
          sub_100117E20(v422, v413);
          v437 = v421;
          v426 = v425;
          *(_QWORD *)&v488 = sub_1000906BC(v427, v425, (uint64_t *)&v491);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v424, v423 + 14, v423 + 22);
          swift_bridgeObjectRelease(v426);
          sub_10009B2FC(v422, v413);
          v428 = sub_10009B2FC(v422, v413);
          *(_WORD *)(v423 + 22) = 2048;
          *(_QWORD *)&v488 = AccessoryBatteryState.batteryPercent.getter(v428);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v424, v423 + 24, v423 + 32);

          *(_WORD *)(v423 + 32) = 1024;
          v429 = AccessoryBatteryState.lowBattery.getter();

          LODWORD(v488) = v429 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v441, v423 + 34, v423 + 38);

          *(_WORD *)(v423 + 38) = 2080;
          *(_QWORD *)&v488 = AccessoryBatteryState.chargeState.getter();
          v430 = String.init<A>(describing:)(&v488, &type metadata for AccessoryChargeState);
          v432 = v431;
          *(_QWORD *)&v488 = sub_1000906BC(v430, v431, (uint64_t *)&v491);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v424, v423 + 40, v423 + 48);

          swift_bridgeObjectRelease(v432);
          v433 = v438;
          _os_log_impl((void *)&_mh_execute_header, v438, (os_log_type_t)v437, "Got battery data for '%s': %s -> %f, %{BOOL}d, %s", (uint8_t *)v423, 0x30u);
          v434 = v465;
          swift_arrayDestroy(v465, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v434, -1, -1);
          swift_slowDealloc(v423, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n(v408, 2);

          sub_10009B2FC(v412, v413);
          sub_10009B2FC(v412, v413);

        }
        ((void (*)(uint64_t, uint64_t))v469)(v442, v480);
        v36 = v481;
        v35 = &selRef_authSession_authComplete_;
        v435 = *(id *)(v389 + 24);
        sub_10013D93C((uint64_t)v435, (uint64_t)v418);

        swift_bridgeObjectRelease(v408);
        swift_release(v389);

        sub_10009B2FC((uint64_t)v475, v413);
        sub_100090E88(v495);
        v34 = (char *)&type metadata for Any;
        v13 = v480;
LABEL_285:
        v33 = &qword_10026E5F0;
LABEL_239:
        if (++v36 == v479)
        {
LABEL_289:
          swift_bridgeObjectRelease(v451);
          return;
        }
      }
      v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v79, v81, 0);
      swift_bridgeObjectRelease(v94);
      v13 = v480;
      v33 = &qword_10026E5F0;
      if ((v96 & 1) != 0)
        goto LABEL_55;
      goto LABEL_41;
    }
  }
}

uint64_t sub_100140E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char **v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  _QWORD aBlock[5];
  uint64_t v66;
  _QWORD *v67;
  char v68[32];

  v61 = a1;
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v50 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_10026BC00, sub_100158DF8);
LABEL_2:
    v5 = &unk_100275000;
    v6 = qword_100275638;
    v7 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v7);
    v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    v9 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain(v9);
    os_unfair_lock_lock(v9 + 4);
    swift_release(v9);
    v10 = (uint64_t *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
    swift_beginAccess(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, v68, 0, 0);
    v11 = *v10;
    v12 = *(os_unfair_lock_s **)(v6 + v8);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    os_unfair_lock_unlock(v12 + 4);
    swift_release(v12);
    v13 = 0;
    v14 = *(_QWORD *)(v11 + 64);
    v62 = v11 + 64;
    v15 = 1 << *(_BYTE *)(v11 + 32);
    v16 = -1;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    v17 = v16 & v14;
    v63 = (unint64_t)(v15 + 63) >> 6;
    v18 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
    v19 = (char *)&type metadata for Any + 8;
    v56 = a2;
    v49 = v11;
    v60 = (char *)&type metadata for Any + 8;
    if ((v16 & v14) != 0)
    {
      do
      {
        while (1)
        {
          v20 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
          v21 = v20 | (v13 << 6);
LABEL_22:
          v25 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v21);
          v26 = objc_msgSend(v25, v18[83]);
          _bridgeAnyObjectToAny(_:)(aBlock);
          swift_unknownObjectRelease(v26);
          v27 = sub_10009061C((uint64_t *)&unk_10026DF20);
          if ((swift_dynamicCast(&v67, aBlock, v19, v27, 6) & 1) != 0)
            break;

          if (!v17)
            goto LABEL_8;
        }
        v64 = v13;
        v28 = v67;
        v29 = v5[199];
        v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
        v31 = *(os_unfair_lock_s **)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
        swift_retain(v31);
        os_unfair_lock_lock(v31 + 4);
        swift_release(v31);
        v32 = *(_QWORD *)(v29 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
        if (v32)
        {
          v33 = *(void **)(v32 + 24);
          if (v33)
          {
            aBlock[4] = sub_1000B145C;
            v66 = v32;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_10012357C;
            aBlock[3] = &unk_10023C930;
            v58 = _Block_copy(aBlock);
            swift_retain_n(v32, 2);
            v57 = v33;
            v59 = v28;
            v34 = v50;
            static DispatchQoS.unspecified.getter(v57);
            v67 = _swiftEmptyArrayStorage;
            v35 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v36 = sub_10009061C((uint64_t *)&unk_10026BF60);
            v37 = sub_1000D5BAC((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60, (uint64_t)&protocol conformance descriptor for [A]);
            v38 = v53;
            v39 = v55;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v36, v37, v55, v35);
            v40 = v57;
            v41 = v58;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v38, v58);
            _Block_release(v41);

            a2 = v56;
            v42 = v38;
            v11 = v49;
            v43 = v39;
            v5 = (_QWORD *)&unk_100275000;
            (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v43);
            v44 = v34;
            v28 = v59;
            (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
            v45 = v66;
            swift_release(v32);
            swift_release(v45);
          }
        }
        v46 = *(os_unfair_lock_s **)(v29 + v30);
        swift_retain(v46);
        os_unfair_lock_unlock(v46 + 4);
        swift_release(v46);
        objc_msgSend(v28, "systemEventDataWithInfo:data:", v61, a2);
        swift_unknownObjectRelease(v28);

        v18 = &selRef_getSystemTrackingEnabledWithAppID_completion_;
        v19 = v60;
        v13 = v64;
      }
      while (v17);
    }
LABEL_8:
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v63)
      return swift_release(v11);
    v23 = *(_QWORD *)(v62 + 8 * v22);
    ++v13;
    if (v23)
      goto LABEL_21;
    v13 = v22 + 1;
    if (v22 + 1 >= v63)
      return swift_release(v11);
    v23 = *(_QWORD *)(v62 + 8 * v13);
    if (v23)
      goto LABEL_21;
    v13 = v22 + 2;
    if (v22 + 2 >= v63)
      return swift_release(v11);
    v23 = *(_QWORD *)(v62 + 8 * v13);
    if (v23)
      goto LABEL_21;
    v24 = v22 + 3;
    if (v24 >= v63)
      return swift_release(v11);
    v23 = *(_QWORD *)(v62 + 8 * v24);
    if (v23)
    {
      v13 = v24;
LABEL_21:
      v17 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v13 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      v13 = v24 + 1;
      if (__OFADD__(v24, 1))
        break;
      if (v13 >= v63)
        return swift_release(v11);
      v23 = *(_QWORD *)(v62 + 8 * v13);
      ++v24;
      if (v23)
        goto LABEL_21;
    }
LABEL_30:
    __break(1u);
  }
}

uint64_t sub_100141410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100141420(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100141428(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v30[24];
  _BYTE v31[40];
  _QWORD v32[5];

  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v32[3] = type metadata accessor for AccessoryServer(0);
  v32[4] = &off_10023C908;
  v32[0] = a1;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x687475617773, 0xE600000000000000);
  v16 = OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_authManager;
  *(_QWORD *)(a6 + v16) = objc_msgSend(objc_allocWithZone((Class)DockAuthManager), "init");
  v17 = OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager;
  *(_QWORD *)(a6 + v17) = objc_msgSend((id)objc_opt_self(MFAATokenManager, v18), "sharedManager");
  v19 = a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)(v19 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID, a3, v12);
  v20 = (uint64_t *)(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  *v20 = a4;
  v20[1] = a5;
  sub_10009AFF4((uint64_t)v32, (uint64_t)v31);
  swift_beginAccess(v19, v30, 33, 0);
  sub_10009B27C(a4, a5);
  sub_100141CBC((uint64_t)v31, v19);
  swift_endAccess(v30);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer) = a2;
  v21 = type metadata accessor for Transaction(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  swift_unknownObjectWeakInit(v22 + 40, 0);
  *(_QWORD *)(v22 + 80) = 0;
  *(_BYTE *)(v22 + 88) = 1;
  v23 = a2;
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v22 + 64) = 0xD00000000000001FLL;
  *(_QWORD *)(v22 + 72) = 0x8000000100200DA0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 56) = 0x4024000000000000;
  v24 = swift_unknownObjectWeakAssign(v22 + 40, 0);
  UUID.init()(v24);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  sub_100090E88(v32);
  v25 = a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  *(_QWORD *)v25 = v22;
  *(_QWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0xE000000000000000;
  *(_QWORD *)(v25 + 40) = 0;
  v26 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(v25 + *(int *)(v26 + 36), v15, v12);
  *(_OWORD *)(v25 + *(int *)(v26 + 40)) = xmmword_1001DE7B0;
  swift_beginAccess(v25, v31, 0, 0);
  v27 = *(_QWORD *)v25 + 40;
  *(_QWORD *)(*(_QWORD *)v25 + 48) = &off_10023DE68;
  swift_unknownObjectWeakAssign(v27, a6);
  return a6;
}

id sub_100141774(void *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id result;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth);
  if (v4)
  {
    swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth));
    sub_100188620();
    return (id)swift_release(v4);
  }
  v7 = sub_1000ABB30();
  v8 = (_BYTE *)swift_allocError(&type metadata for DockdError, v7, 0, 0);
  *v9 = 6;
  sub_10012F324(0, (uint64_t)v8);
  result = (id)swift_errorRelease(v8);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v10)
  {
    if (a1)
      goto LABEL_12;
    __break(1u);
    goto LABEL_10;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = v10;
  result = objc_msgSend(a1, "identifier");
  if (!result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v2 = v13;

  v7 = swift_allocError(&type metadata for DockdError, v7, 0, 0);
  *v14 = 6;
  v3 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
  if (!*(_QWORD *)&v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
LABEL_10:
    swift_bridgeObjectRelease(v3);
    goto LABEL_11;
  }
  v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
  v15 = *(id *)&v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  sub_1001319A0(v12, v2, 5, v3, v7);
  swift_bridgeObjectRelease(v3);

LABEL_11:
  swift_errorRelease(v7);

  swift_bridgeObjectRelease(v2);
LABEL_12:
  v20 = 0;
  if (objc_msgSend(a1, "stopPairingWithError:", &v20))
    return v20;
  v19 = v20;
  v16 = v20;
  v17 = _convertNSErrorToError(_:)(v19);

  swift_willThrow(v18);
  return (id)swift_errorRelease(v17);
}

uint64_t sub_100141A08(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_100141B10(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  _BYTE *v18;

  v4 = v3;
  if (a3)
  {
    sub_10013A13C(a1, a3);
  }
  else
  {
    v7 = sub_1001B1440((uint64_t)_swiftEmptyArrayStorage);
    v8 = a2[1];
    if (v8)
    {
      v9 = *a2;
      swift_bridgeObjectRetain(a2[1]);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      sub_1001BA9BC(v9, v8, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v11 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (v11)
    {
      v18 = v11;
      v12 = objc_msgSend(a1, "identifier");
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

        if (*(_QWORD *)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 3;
          v17 = *(id *)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_1001319A0(v14, v16, 1, v7, 0);
          swift_bridgeObjectRelease(v16);
          swift_bridgeObjectRelease(v7);

        }
        else
        {
          swift_bridgeObjectRelease(v16);
          swift_bridgeObjectRelease(v7);
        }

      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v7);
    }
  }
}

uint64_t sub_100141CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026EA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100141D08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10026EA44);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10009B0EC;
  return sub_1001329F4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100141D88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100141DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001313CC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100141DBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a4 != 2)
  {
    a8(a2, a3);
    return ((uint64_t (*)(uint64_t, uint64_t))a8)(a5, a6);
  }
  return result;
}

void sub_100141E14()
{
  uint64_t v0;

  sub_10017EC0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100141E30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100141E6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10026EA94);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10009B7AC;
  return sub_10013611C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100141EEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100141F10(uint64_t a1)
{
  uint64_t v1;

  return sub_100135F28(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100141F3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[6] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_100141FD8, 0, 0);
}

uint64_t sub_100141FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  void *v31;
  id v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __n128 v49;
  uint64_t Strong;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  os_log_type_t v62;

  v2 = (uint64_t *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  *(_QWORD *)(v0 + 88) = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  v7 = v1 + v6;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 96) = v8;
  v9 = v8(v3, v7, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Shutting down", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 48);

  v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  *(_QWORD *)(v0 + 104) = v17;
  v17(v13, v14);
  v18 = *(void **)(v16 + 32);
  *(_QWORD *)(v0 + 112) = v18;
  if (v18)
  {
    v19 = dword_10026D704;
    v18;
    v20 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 120) = v20;
    *v20 = v0;
    v20[1] = sub_1001424B8;
    return sub_1000E28A8();
  }
  else
  {
    v22 = (_QWORD *)*v2;
    v22[4] = 0;
    if (v22[5])
    {
      v23 = type metadata accessor for Errors(0);
      v24 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v25 = swift_allocError(v23, v24, 0, 0);
      *v26 = 0;
      v26[1] = 0xE000000000000000;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v26, enum case for Errors.OperationCancelled(_:), v23);
      sub_100144DD4(v25);
      swift_errorRelease(v25);
    }
    v27 = (_QWORD *)*v2;
    v28 = *(_QWORD *)(*v2 + 120);
    v27[14] = 0;
    v27[15] = 0;
    swift_bridgeObjectRelease(v28);
    v29 = (void *)v27[16];
    if (v29)
    {
      *(_QWORD *)(v0 + 16) = 0;
      v30 = objc_msgSend(v29, "closeAndReturnError:", v0 + 16);
      v31 = *(void **)(v0 + 16);
      if (v30)
      {
        v32 = v31;
      }
      else
      {
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
        v34 = *(_QWORD *)(v0 + 72);
        v36 = *(_QWORD *)(v0 + 48);
        v35 = *(_QWORD *)(v0 + 56);
        v37 = v36 + *(_QWORD *)(v0 + 88);
        v38 = v31;
        v39 = _convertNSErrorToError(_:)(v31);

        swift_willThrow(v40);
        v33(v34, v37, v35);
        v41 = v39;
        swift_retain(v36);
        swift_errorRetain(v39);
        swift_retain(v36);
        v42 = swift_errorRetain(v39);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.error.getter();
        v45 = os_log_type_enabled(v43, v44);
        v46 = *(_QWORD *)(v0 + 48);
        if (v45)
        {
          v62 = v44;
          v61 = (uint64_t *)(v0 + 32);
          v47 = swift_slowAlloc(22, -1);
          v48 = (_QWORD *)swift_slowAlloc(16, -1);
          v49.n128_u64[0] = 138412546;
          *(_DWORD *)v47 = 138412546;
          Strong = swift_weakLoadStrong(v46 + 16, v49);
          if (Strong)
          {
            v51 = Strong;
            v52 = *(id *)(Strong + 24);
            v53 = v51;
            v54 = v0 + 40;
            swift_release(v53);
            *(_QWORD *)(v0 + 24) = v52;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v61, v47 + 4, v47 + 12);
          }
          else
          {
            *(_QWORD *)(v0 + 40) = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v47 + 4, v47 + 12);
            v54 = v0 + 40;
            v52 = 0;
          }
          v55 = *v2;
          *v48 = v52;
          swift_release_n(v55, 2);
          *(_WORD *)(v47 + 12) = 2112;
          swift_errorRetain(v41);
          v56 = _swift_stdlib_bridgeErrorToNSError(v41);
          *v61 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v54, v47 + 14, v47 + 22);
          v48[1] = v56;
          swift_errorRelease(v41);
          swift_errorRelease(v41);
          _os_log_impl((void *)&_mh_execute_header, v43, v62, "Failed to close file for accessory: %@ with error: %@'", (uint8_t *)v47, 0x16u);
          v57 = sub_10009061C(&qword_10026BC40);
          swift_arrayDestroy(v48, 2, v57);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v47, -1, -1);

          swift_errorRelease(v41);
        }
        else
        {
          swift_errorRelease(v41);
          swift_release_n(v46, 2);
          swift_errorRelease(v41);
          swift_errorRelease(v41);

        }
        (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      }
    }
    v58 = *(_QWORD *)(v0 + 72);
    v59 = *(_QWORD *)(v0 + 80);
    v60 = (void *)v27[16];
    v27[16] = 0;

    swift_task_dealloc(v59);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001424B8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));

  return swift_task_switch(sub_10014253C, 0, 0);
}

uint64_t sub_10014253C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  id v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __n128 v30;
  uint64_t Strong;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v43;
  os_log_type_t v44;

  v1 = (uint64_t *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  if (*(_QWORD *)(v2 + 40))
  {
    v4 = type metadata accessor for Errors(0);
    v5 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v6 = swift_allocError(v4, v5, 0, 0);
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v7, enum case for Errors.OperationCancelled(_:), v4);
    sub_100144DD4(v6);
    swift_errorRelease(v6);
  }
  v8 = (_QWORD *)*v1;
  v9 = *(_QWORD *)(*v1 + 120);
  v8[14] = 0;
  v8[15] = 0;
  swift_bridgeObjectRelease(v9);
  v10 = (void *)v8[16];
  if (v10)
  {
    *(_QWORD *)(v0 + 16) = 0;
    v11 = objc_msgSend(v10, "closeAndReturnError:", v0 + 16);
    v12 = *(void **)(v0 + 16);
    if (v11)
    {
      v13 = v12;
    }
    else
    {
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
      v15 = *(_QWORD *)(v0 + 72);
      v17 = *(_QWORD *)(v0 + 48);
      v16 = *(_QWORD *)(v0 + 56);
      v18 = v17 + *(_QWORD *)(v0 + 88);
      v19 = v12;
      v20 = _convertNSErrorToError(_:)(v12);

      swift_willThrow(v21);
      v14(v15, v18, v16);
      v22 = v20;
      swift_retain(v17);
      swift_errorRetain(v20);
      swift_retain(v17);
      v23 = swift_errorRetain(v20);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter();
      v26 = os_log_type_enabled(v24, v25);
      v27 = *(_QWORD *)(v0 + 48);
      if (v26)
      {
        v44 = v25;
        v43 = (uint64_t *)(v0 + 32);
        v28 = swift_slowAlloc(22, -1);
        v29 = (_QWORD *)swift_slowAlloc(16, -1);
        v30.n128_u64[0] = 138412546;
        *(_DWORD *)v28 = 138412546;
        Strong = swift_weakLoadStrong(v27 + 16, v30);
        if (Strong)
        {
          v32 = Strong;
          v33 = *(id *)(Strong + 24);
          v34 = v32;
          v35 = v0 + 40;
          swift_release(v34);
          *(_QWORD *)(v0 + 24) = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v43, v28 + 4, v28 + 12);
        }
        else
        {
          *(_QWORD *)(v0 + 40) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v28 + 4, v28 + 12);
          v35 = v0 + 40;
          v33 = 0;
        }
        v36 = *v1;
        *v29 = v33;
        swift_release_n(v36, 2);
        *(_WORD *)(v28 + 12) = 2112;
        swift_errorRetain(v22);
        v37 = _swift_stdlib_bridgeErrorToNSError(v22);
        *v43 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v35, v28 + 14, v28 + 22);
        v29[1] = v37;
        swift_errorRelease(v22);
        swift_errorRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v24, v44, "Failed to close file for accessory: %@ with error: %@'", (uint8_t *)v28, 0x16u);
        v38 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v29, 2, v38);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        swift_errorRelease(v22);
      }
      else
      {
        swift_errorRelease(v22);
        swift_release_n(v27, 2);
        swift_errorRelease(v22);
        swift_errorRelease(v22);

      }
      (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    }
  }
  v39 = *(_QWORD *)(v0 + 72);
  v40 = *(_QWORD *)(v0 + 80);
  v41 = (void *)v8[16];
  v8[16] = 0;

  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001428FC()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t result;
  void *v5;
  id v6;

  v1 = objc_msgSend(*(id *)(v0 + 56), "format");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "value");

    if (!v3)
      return 7367034;
  }
  result = (uint64_t)objc_msgSend(*(id *)(v0 + 56), "format");
  if (result)
  {
    v5 = (void *)result;
    v6 = objc_msgSend((id)result, "value");

    if (v6 == (id)1)
      return 7633012;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1001429B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_1001429D0, 0, 0);
}

uint64_t sub_1001429D0(__n128 a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  Swift::String v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  Strong = swift_weakLoadStrong(*(_QWORD *)(v1 + 88) + 16, a1);
  *(_QWORD *)(v1 + 96) = Strong;
  if (!Strong)
  {
    v31 = type metadata accessor for Errors(0);
    v32 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v31, v32, 0, 0);
    *v33 = 0xD000000000000010;
    v33[1] = 0x80000001001FEB90;
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for Errors.AccessoryServerNil(_:), v31);
    swift_willThrow(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v3 = Strong;
  v4 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (!v4 || (objc_msgSend(v4, "canAcceptBulkSendListeners") & 1) == 0)
  {
    v5 = *(id *)(v3 + 40);
    OS_dispatch_queue.sync<A>(execute:)((_QWORD *)(v1 + 120), sub_100146CEC, v3, &type metadata for Bool);

    if (*(_BYTE *)(v1 + 120) == 1)
    {
      v6 = type metadata accessor for Errors(0);
      v7 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      swift_allocError(v6, v7, 0, 0);
      v9 = v8;
      _StringGuts.grow(_:)(53);
      v10._countAndFlagsBits = 0xD000000000000033;
      v10._object = (void *)0x8000000100201020;
      String.append(_:)(v10);
      v11 = *(id *)(v3 + 24);
      v12 = objc_msgSend(v11, "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);

      swift_bridgeObjectRelease(v15);
      *v9 = 0;
      v9[1] = 0xE000000000000000;
      v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v9, enum case for Errors.OperationNotSupported(_:), v6);
      swift_willThrow(v17);
      swift_release(v3);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  v18 = *(_QWORD *)(v1 + 88);
  v19 = *(id *)(v18 + 24);
  swift_retain(v3);
  v20 = sub_1000EDA88();
  v21 = *(_QWORD *)(v18 + 64);
  v22 = *(_QWORD *)(v18 + 72);
  objc_allocWithZone((Class)type metadata accessor for AccessoryDataStreamAdapter(0));
  swift_bridgeObjectRetain(v22);
  v23 = sub_1000E5E54(v3, v19, v20, 0xD000000000000014, 0x8000000100200FE0, v21, v22);
  swift_release(v3);

  v24 = *(void **)(v18 + 32);
  *(_QWORD *)(v18 + 32) = v23;

  v25 = *(char **)(v18 + 32);
  if (v25)
  {
    v26 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 40) = type metadata accessor for AccessoryDiagnosticsSession(0);
    *(_QWORD *)(v1 + 48) = &off_10023CAC8;
    *(_QWORD *)(v1 + 16) = v26;
    v27 = (uint64_t)&v25[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate];
    swift_beginAccess(&v25[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate], v1 + 56, 33, 0);
    v28 = v25;
    swift_retain(v26);
    sub_100146D04(v1 + 16, v27);
    swift_endAccess(v1 + 56);

  }
  v29 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 104) = v29;
  *v29 = v1;
  v29[1] = sub_100142DA4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v29, 0, 0, 0xD000000000000010, 0x8000000100201000, sub_100146D4C, *(_QWORD *)(v1 + 88), (char *)&type metadata for () + 8);
}

uint64_t sub_100142DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100142E3C;
  else
    v3 = sub_100142E08;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100142E08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100142E3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100142E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v4 = sub_10009061C(&qword_10026EDD0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  result = __chkstk_darwin(v4);
  v8 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(char **)(a2 + 32);
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 16) & ~v10;
    v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_10023CAF8, v12 + 8, v10 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v13 + v11, v8, v4);
    *(_QWORD *)(v13 + v12) = a2;
    v14 = (uint64_t *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
    if (*(_QWORD *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback])
    {
      v15 = type metadata accessor for Errors(0);
      v16 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
      v17 = swift_allocError(v15, v16, 0, 0);
      *v18 = 0xD00000000000001ELL;
      v18[1] = 0x8000000100201060;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v18, enum case for Errors.OperationInProgress(_:), v15);
      v19 = swift_retain(a2);
      swift_willThrow(v19);
      swift_release(v13);
      v23[0] = v17;
      return CheckedContinuation.resume(throwing:)(v23, v4);
    }
    else
    {
      swift_retain(a2);
      v20 = v9;
      sub_1000E3BF4();
      v21 = *v14;
      v22 = v14[1];
      *v14 = (uint64_t)sub_100146DCC;
      v14[1] = v13;
      swift_retain(v13);
      sub_1000B1410(v21, v22);

      return swift_release(v13);
    }
  }
  return result;
}

uint64_t sub_100143058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v18 = a2;
    swift_errorRetain(a2);
    v10 = sub_10009061C(&qword_10026EDD0);
    return CheckedContinuation.resume(throwing:)(&v18, v10);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v6);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Diagnostics data stream was setup successfully", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_BYTE *)(a4 + 104) = 1;
    *(_QWORD *)(a4 + 96) = 1;
    v16 = sub_10009061C(&qword_10026EDD0);
    return CheckedContinuation.resume(returning:)(v16, v16);
  }
}

void sub_1001431C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_QWORD *)(v2 + 32))
  {
    v10 = type metadata accessor for Errors(0);
    v11 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v10, v11, 0, 0);
    v13 = v12;
    v14 = 0xD000000000000017;
    v15 = "Data stream not present";
LABEL_7:
    *v12 = v14;
    v12[1] = (unint64_t)(v15 - 32) | 0x8000000000000000;
    v9 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v13, enum case for Errors.CommunicationFailure(_:), v10);
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v2 + 104) & 1) == 0)
  {
    v10 = type metadata accessor for Errors(0);
    v16 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    swift_allocError(v10, v16, 0, 0);
    v13 = v12;
    v14 = 0xD00000000000001FLL;
    v15 = "Session not ready for data read";
    goto LABEL_7;
  }
  if (*(_QWORD *)(v2 + 40))
  {
    v3 = type metadata accessor for Errors(0);
    v4 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v5 = swift_allocError(v3, v4, 0, 0);
    *v6 = 0xD000000000000027;
    v6[1] = 0x8000000100200F90;
    v7 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104);
    v7(v6, enum case for Errors.OperationInProgress(_:), v3);
    sub_100144DD4(v5);
    swift_errorRelease(v5);
    swift_allocError(v3, v4, 0, 0);
    *v8 = 0xD000000000000027;
    v8[1] = 0x8000000100200F90;
    v9 = ((uint64_t (*)(_QWORD *, _QWORD, uint64_t))v7)(v8, enum case for Errors.CommunicationFailure(_:), v3);
LABEL_8:
    swift_willThrow(v9);
    return;
  }
  v17 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  swift_retain(a2);
  sub_1000B1410(0, v17);
  v18 = *(id *)(v2 + 24);
  v19 = sub_10009061C(&qword_10026C588);
  OS_dispatch_queue.sync<A>(execute:)(&v20, sub_100146CD4, v2, v19);

}

void sub_10014341C(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v4 = v3;
    sub_1000E2D24();

  }
  *a2 = v3 == 0;
}

uint64_t sub_10014346C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t result;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  _QWORD *v61;
  __n128 v62;
  uint64_t Strong;
  uint64_t v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;

  v2 = v1;
  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v70 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v70 - v16;
  v18 = v1[17];
  v73 = v8;
  if (v18 && (*(_BYTE *)(v18 + 57) & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    if (!v1[16])
    {
      v20 = sub_100143DF4();
      if (v20)
      {
        v21 = (void *)v1[16];
        v1[16] = v20;

      }
      else
      {
        v22 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
        v72 = v7;
        v23 = v22(v17, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v7);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "error creating file handle", v26, 2u);
          v27 = v26;
          v8 = v73;
          swift_slowDealloc(v27, -1, -1);
        }

        v7 = v72;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v72);
      }
    }
    v19 = 0;
  }
  v28 = v2[11];
  v29 = (unint64_t)objc_msgSend(a1, "length");
  if ((v29 & 0x8000000000000000) != 0)
  {
LABEL_39:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return result;
  }
  if (__CFADD__(v28, v29))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v2[10] < v28 + v29)
  {
    v30 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v15, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v7);
    swift_retain(v2);
    v31 = a1;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(32, -1);
      *(_DWORD *)v34 = 134218496;
      v75 = (id)v2[11];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2048;
      v75 = -[NSObject length](v31, "length");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v34 + 14, v34 + 22);

      *(_WORD *)(v34 + 22) = 2048;
      v75 = (id)v2[10];
      v30 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v34 + 24, v34 + 32);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Diagnostics exceeded max size (written: %llu, new data: %ld, max: %llu", (uint8_t *)v34, 0x20u);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {

      swift_release(v2);
      v32 = v31;
    }

    v49 = *(void (**)(char *, uint64_t))(v30 + 8);
    v50 = v15;
    goto LABEL_23;
  }
  v35 = (unint64_t)objc_msgSend(a1, "length");
  if ((v35 & 0x8000000000000000) != 0)
    goto LABEL_39;
  v36 = v2[11];
  v37 = __CFADD__(v36, v35);
  v38 = (char *)(v36 + v35);
  if (v37)
LABEL_37:
    __break(1u);
  v2[11] = v38;
  if (v19)
  {
    v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v41 = v40;
    static String.Encoding.utf8.getter(v39);
    v42 = String.init(data:encoding:)(v39, v41, v6);
    v44 = v43;
    sub_10009B2FC(v39, v41);
    if (v44)
    {
      v45 = v2[19];
      v75 = (id)v2[18];
      v76 = v45;
      swift_bridgeObjectRetain(v45);
      v46._countAndFlagsBits = v42;
      v46._object = v44;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v44);
      v47 = v76;
      v48 = v2[19];
      v2[18] = v75;
      v2[19] = v47;
      swift_bridgeObjectRelease(v48);
    }
    return 1;
  }
  v52 = (void *)v2[16];
  if (!v52)
  {
    v56 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v12, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v7);
    v57 = swift_retain_n(v2, 4);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v58, v59))
    {

      swift_release_n(v2, 4);
      v49 = *(void (**)(char *, uint64_t))(v56 + 8);
      v50 = v12;
LABEL_23:
      v49(v50, v7);
      return 0;
    }
    v72 = v7;
    v60 = swift_slowAlloc(22, -1);
    v61 = (_QWORD *)swift_slowAlloc(8, -1);
    v71 = (id)swift_slowAlloc(32, -1);
    v75 = v71;
    v62.n128_u64[0] = 138412546;
    *(_DWORD *)v60 = 138412546;
    Strong = swift_weakLoadStrong(v2 + 2, v62);
    if (Strong)
    {
      v64 = Strong;
      v65 = *(id *)(Strong + 24);
      swift_release(v64);
      v74 = (uint64_t)v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 4, v60 + 12);
    }
    else
    {
      v74 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 4, v60 + 12);
      v65 = 0;
    }
    *v61 = v65;
    swift_release_n(v2, 2);
    *(_WORD *)(v60 + 12) = 2080;
    v66 = v2[15];
    if (v66)
    {
      v67 = v2[14];
      swift_bridgeObjectRetain(v2[15]);
      v74 = sub_1000906BC(v67, v66, (uint64_t *)&v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 14, v60 + 22);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v66);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to create log file for accessory: %@ file path: %s", (uint8_t *)v60, 0x16u);
      v68 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v61, 1, v68);
      swift_slowDealloc(v61, -1, -1);
      v69 = v71;
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v72);
      return 0;
    }
    swift_release(v2);
    __break(1u);
    goto LABEL_39;
  }
  v75 = a1;
  v53 = sub_100090EE8(0, (unint64_t *)&qword_10026DFB8, NSData_ptr);
  v54 = sub_100146C7C();
  v55 = v52;
  NSFileHandle.write<A>(contentsOf:)(&v75, v53, v54);

  return 1;
}

uint64_t sub_100143DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  unint64_t v33;
  void *object;
  NSString v35;
  void *v36;
  uint64_t v37;
  uint64_t inited;
  NSString *v39;
  unint64_t v40;
  NSURL *v41;
  void *v42;
  void *v43;
  _OWORD *v44;
  Class isa;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  id v70;
  id v71;
  char *v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  __n128 v77;
  uint64_t Strong;
  uint64_t v79;
  id v80;
  __n128 v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void (**v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void (**v95)(char *, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  void (**v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  id v113;
  void *v114;
  uint64_t countAndFlagsBits;
  void *v116;
  NSString v117;
  NSString v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void (**v148)(char *, uint64_t, uint64_t);
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _QWORD v154[3];
  char v155[8];
  uint64_t v156;
  char v157[8];
  char v158;
  Swift::String v159;
  id v160[2];
  char v161[8];

  v149 = type metadata accessor for Logger(0);
  v148 = *(void (***)(char *, uint64_t, uint64_t))(v149 - 8);
  v0 = __chkstk_darwin(v149);
  v125 = (char *)&v122 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v0);
  v124 = (char *)&v122 - v2;
  v3 = sub_10009061C(&qword_10026EDB8);
  __chkstk_darwin(v3);
  v147 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for TimeZone(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v133 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v144 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v143 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v141 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator(0);
  v151 = *(_QWORD *)(v142 - 8);
  v9 = __chkstk_darwin(v142);
  v131 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v138 = (char *)&v122 - v11;
  v132 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v127 = *(_QWORD *)(v132 - 8);
  v12 = __chkstk_darwin(v132);
  v126 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v130 = (char *)&v122 - v14;
  v129 = type metadata accessor for Date(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v150 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL.DirectoryHint(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v20);
  v22 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v153 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = 1;
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager, v26), "defaultManager");
  v29 = objc_msgSend(v28, "URLsForDirectory:inDomains:", 13, 1);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v23);

  if (*(_QWORD *)(v30 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v22, v30 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), v23);
    v27 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, v27, 1, v23);
  swift_bridgeObjectRelease(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {

    sub_10009B2C0((uint64_t)v22, &qword_10026BF70);
    return 0;
  }
  v123 = v24;
  v31 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v32 = v153;
  v122 = v23;
  v31(v153, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for URL.DirectoryHint.isDirectory(_:), v16);
  v33 = sub_1000D4CF4();
  URL.append<A>(components:directoryHint:)(&off_1002383B8, v19, &type metadata for String, v33);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v158 = 0;
  object = URL.path(percentEncoded:)(1)._object;
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v36 = v28;
  LOBYTE(object) = objc_msgSend(v28, "fileExistsAtPath:isDirectory:", v35, &v158);

  if ((object & 1) == 0)
  {
    v37 = sub_10009061C((uint64_t *)&unk_10026CFF0);
    inited = swift_initStackObject(v37, v161);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
    *(_QWORD *)(inited + 40) = 448;
    v39 = NSFilePosixPermissions;
    v40 = sub_1001B0EBC(inited);
    URL._bridgeToObjectiveC()(v41);
    v43 = v42;
    v44 = sub_1001A95C4(v40);
    swift_bridgeObjectRelease(v40);
    type metadata accessor for FileAttributeKey(0);
    sub_100090E1C((unint64_t *)&qword_10026C130, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1001DE4CC);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v44);
    v160[0] = 0;
    LODWORD(v44) = objc_msgSend(v28, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v43, 1, isa, v160);

    v46 = v160[0];
    if (!(_DWORD)v44)
    {
      v92 = v46;
      v93 = _convertNSErrorToError(_:)(v46);

      swift_willThrow(v94);
      v95 = v148;
      v96 = v125;
      v97 = v149;
      v148[2](v125, v152 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v149);
      swift_errorRetain(v93);
      v98 = swift_errorRetain(v93);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, (os_log_type_t)v100))
      {
        v101 = swift_slowAlloc(22, -1);
        v102 = swift_slowAlloc(64, -1);
        v159._countAndFlagsBits = v102;
        *(_DWORD *)v101 = 136315394;
        swift_beginAccess(v32, v160, 0, 0);
        v103 = URL.path(percentEncoded:)(1);
        v156 = sub_1000906BC(v103._countAndFlagsBits, (unint64_t)v103._object, &v159._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v101 + 4, v101 + 12);
        swift_bridgeObjectRelease(v103._object);
        *(_WORD *)(v101 + 12) = 2080;
        swift_getErrorValue(v93, v155, v154);
        v104 = Error.localizedDescription.getter(v154[1], v154[2]);
        v106 = v105;
        v156 = sub_1000906BC(v104, v105, &v159._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v101 + 14, v101 + 22);
        swift_bridgeObjectRelease(v106);
        swift_errorRelease(v93);
        swift_errorRelease(v93);
        _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v100, "Unable to create file storage directory %s: %s", (uint8_t *)v101, 0x16u);
        swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v102, -1, -1);
        swift_slowDealloc(v101, -1, -1);

        swift_errorRelease(v93);
        ((void (*)(char *, uint64_t))v95[1])(v125, v149);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v153, v122);
        return 0;
      }

      swift_errorRelease(v93);
      swift_errorRelease(v93);
      swift_errorRelease(v93);

      ((void (*)(char *, uint64_t))v95[1])(v96, v97);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v123 + 8))(v32, v122);
      return 0;
    }
  }
  v47 = v152;
  v48 = sub_1001428FC();
  if (!v49)
  {
    v85 = v148;
    v86 = v124;
    v87 = v149;
    v88 = ((uint64_t (*)(char *, uint64_t, uint64_t))v148[2])(v124, v47 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v149);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "FileType not supported", v91, 2u);
      swift_slowDealloc(v91, -1, -1);
    }

    ((void (*)(char *, uint64_t))v85[1])(v86, v87);
    goto LABEL_19;
  }
  v125 = (char *)v48;
  v148 = v49;
  v149 = (uint64_t)v28;
  static Date.now.getter(v48);
  v50 = enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v151 + 104);
  v52 = v138;
  v53 = v142;
  v51(v138, enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:), v142);
  v54 = v141;
  (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v141, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v135);
  v55 = v143;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v143, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v137);
  v56 = v144;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v144, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v140);
  v57 = v147;
  TimeZone.init(secondsFromGMT:)(0);
  v58 = v145;
  v59 = v146;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48))(v57, 1, v146);
  if ((_DWORD)result != 1)
  {
    v61 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v62 = v133;
    v61(v133, v57, v59);
    v63 = v126;
    Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(v52, v54, v55, v56, 0, v62);
    v64 = v131;
    v51(v131, v50, v53);
    v65 = v130;
    Date.ISO8601FormatStyle.dateSeparator(_:)(v64);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v64, v53);
    v66 = *(void (**)(char *, uint64_t))(v127 + 8);
    v67 = v132;
    v66(v63, v132);
    v68 = sub_100090E1C(&qword_10026EDC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle, (uint64_t)&protocol conformance descriptor for Date.ISO8601FormatStyle);
    v69 = v150;
    Date.formatted<A>(_:)(v160, v65, v67, v68);
    v66(v65, v67);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v69, v129);
    v70 = v160[0];
    v71 = v160[1];
    v72 = v153;
    v73 = URL.path(percentEncoded:)(1);
    v160[0] = 0;
    v160[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(v160[1]);
    strcpy((char *)v160, "diagnostics_");
    BYTE5(v160[1]) = 0;
    HIWORD(v160[1]) = -5120;
    v74._countAndFlagsBits = (uint64_t)v70;
    v74._object = v71;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v71);
    v75._countAndFlagsBits = 95;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    v76 = v152;
    Strong = swift_weakLoadStrong(v152 + 16, v77);
    if (Strong)
    {
      v79 = Strong;
      v80 = *(id *)(Strong + 24);
      swift_release(v79);
      v82 = DockCoreInfo.description.getter(v81);
      v84 = v83;

    }
    else
    {
      v84 = (void *)0xE300000000000000;
      v82 = 7104878;
    }
    v107 = (void *)v149;
    v108 = v148;
    v109 = (uint64_t)v125;
    v110._countAndFlagsBits = v82;
    v110._object = v84;
    String.append(_:)(v110);
    swift_bridgeObjectRelease(v84);
    v111._countAndFlagsBits = 46;
    v111._object = (void *)0xE100000000000000;
    String.append(_:)(v111);
    v112._countAndFlagsBits = v109;
    v112._object = v108;
    String.append(_:)(v112);
    swift_bridgeObjectRelease(v108);
    v113 = v160[1];
    v159 = v73;
    swift_bridgeObjectRetain(v73._object);
    v159._countAndFlagsBits = String.init<A>(_:)(&v159, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v159._object = v114;
    String.append<A>(contentsOf:)(v160, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v73._object);
    swift_bridgeObjectRelease(v113);
    countAndFlagsBits = v159._countAndFlagsBits;
    v116 = v159._object;
    v117 = String._bridgeToObjectiveC()();
    objc_msgSend(v107, "createFileAtPath:contents:attributes:", v117, 0, 0);

    swift_bridgeObjectRetain(v116);
    v118 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v116);
    v120 = objc_msgSend((id)objc_opt_self(NSFileHandle, v119), "fileHandleForWritingAtPath:", v118);

    v121 = *(_QWORD *)(v76 + 120);
    *(_QWORD *)(v76 + 112) = countAndFlagsBits;
    *(_QWORD *)(v76 + 120) = v116;
    swift_bridgeObjectRelease(v121);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v72, v122);
    return (uint64_t)v120;
  }
  __break(1u);
  return result;
}

uint64_t sub_100144C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 >= 0 && *(_QWORD *)(v2 + 96) == a1;
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)(v2 + 96) = a1 + 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    v10 = swift_retain(v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v14 = swift_slowAlloc(22, -1);
      *(_DWORD *)v14 = 134218240;
      v17 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2048;
      v17 = *(_QWORD *)(v2 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 14, v14 + 22);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid data sequence number received: %ld expected: %llu", (uint8_t *)v14, 0x16u);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t sub_100144DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19 = v2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v13 = _swift_stdlib_bridgeErrorToNSError(a1);
      v20 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
    }
    else
    {
      v20 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      v13 = 0;
    }
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling completion handler with error: %@", v11, 0xCu);
    v14 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    v2 = v19;
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 40);
  if (v16)
  {
    v17 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    swift_retain(v17);
    sub_1000B1410((uint64_t)v16, v17);
    v16(a1, 0, 0);
    return sub_1000B1410((uint64_t)v16, v17);
  }
  return result;
}

uint64_t sub_10014503C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_weakDestroy(v0 + 16);

  sub_1000B1410(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1001450D0()
{
  uint64_t v0;

  sub_10014503C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001450F4()
{
  return type metadata accessor for AccessoryDiagnosticsSession(0);
}

uint64_t type metadata accessor for AccessoryDiagnosticsSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10026EAE8;
  if (!qword_10026EAE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDiagnosticsSession);
  return result;
}

uint64_t sub_100145138(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1001E0238;
  v4[3] = &unk_1001E0250;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_1001E0268;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = &unk_1001E0280;
  v4[10] = &unk_1001E0250;
  v4[11] = &unk_1001E0238;
  v4[12] = &unk_1001E0238;
  v4[13] = &unk_1001E0268;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1001451FC(uint64_t a1, uint64_t a2)
{
  return sub_10014625C(a2) & 1;
}

uint64_t sub_100145224()
{
  return sub_1001466A0();
}

uint64_t sub_100145244()
{
  return sub_100145FA0();
}

unint64_t sub_100145264(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1001456B0(a1, a2, v4);
}

unint64_t sub_1001452C8(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 4);
  return sub_100145790(a1, v3);
}

unint64_t sub_1001452FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10014582C(a1, v4);
}

unint64_t sub_100145330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6, v7);
  return sub_100145D84(a1, v8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&unk_10026E0F0, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1001453C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100145934(a1, v4);
}

unint64_t sub_1001453F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1001459F8(a1, v5);
}

unint64_t sub_100145484(uint64_t a1)
{
  id v2;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v2 = *(id *)(a1 + 24);
  NSObject.hash(into:)(v5);

  v3 = Hasher._finalize()();
  return sub_100145B6C(a1, v3);
}

unint64_t sub_1001454E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100145C74(a1, v4, (unint64_t *)&qword_10026E880, NSUUID_ptr);
}

unint64_t sub_100145534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100145C74(a1, v4, &qword_10026EAA8, CBUUID_ptr);
}

unint64_t sub_100145580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for ComponentType(0);
  v6 = sub_100090E1C(&qword_10026EDA8, (uint64_t (*)(uint64_t))&type metadata accessor for ComponentType, (uint64_t)&protocol conformance descriptor for ComponentType);
  v8 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6, v7);
  return sub_100145D84(a1, v8, (uint64_t (*)(uint64_t))&type metadata accessor for ComponentType, &qword_10026EDB0, (uint64_t)&protocol conformance descriptor for ComponentType);
}

unint64_t sub_100145618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100145C74(a1, v4, (unint64_t *)&unk_10026CF30, CBService_ptr);
}

unint64_t sub_100145664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100145C74(a1, v4, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
}

unint64_t sub_1001456B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100145790(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10014582C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for DockCoreInfo(0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100145934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000E61D4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100146C48((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1001459F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100145B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v16[4];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    v9 = type metadata accessor for DockCoreInfo(0);
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
      v11 = *(void **)(v10 + 24);
      v12 = *(void **)(a1 + 24);
      v16[3] = v9;
      v16[0] = v12;
      swift_retain(v10);
      v13 = v11;
      v14 = v12;
      LOBYTE(v11) = DockCoreInfo.isEqual(_:)(v16);

      sub_10009B2C0((uint64_t)v16, &qword_10026E5F0);
      swift_release(v10);
      if ((v11 & 1) != 0)
        break;
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_100145C74(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100090EE8(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100145D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100090E1C(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_100145EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_weakInit(v3 + 16, 0);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 64) = 0x74736F6E67616964;
  *(_QWORD *)(v3 + 72) = 0xEF61746144736369;
  *(_QWORD *)(v3 + 80) = 5242880;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0xE000000000000000;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000012, 0x8000000100201080);
  swift_weakAssign(v3 + 16, a1);
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 56) = a3;
  return v3;
}

uint64_t sub_100145FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  __n128 v10;
  uint64_t Strong;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v2);
  v6 = swift_retain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v10.n128_u64[0] = 138412290;
    *(_DWORD *)v9 = 138412290;
    Strong = swift_weakLoadStrong(v1 + 16, v10);
    if (Strong)
    {
      v12 = Strong;
      v13 = *(id *)(Strong + 24);
      swift_release(v12);
      v23 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    }
    else
    {
      v23 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
      v13 = 0;
    }
    v14 = v22;
    *v22 = v13;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to read data for accessory: %@", v9, 0xCu);
    v15 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v14, 1, v15);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (*(_QWORD *)(v1 + 40))
  {
    v17 = type metadata accessor for Errors(0);
    v18 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v19 = swift_allocError(v17, v18, 0, 0);
    *v20 = 0x722064656C696166;
    v20[1] = 0xEB00000000646165;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, enum case for Errors.CommunicationFailure(_:), v17);
    sub_100144DD4(v19);
    return swift_errorRelease(v19);
  }
  return result;
}

uint64_t sub_10014625C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char v28;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  os_log_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v42 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v42 - v12;
  if (*(_QWORD *)(a1 + 16)
    && (v14 = sub_100145264(1635017060, 0xE400000000000000), (v15 & 1) != 0)
    && (sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)&v44),
        v16 = sub_100090EE8(0, (unint64_t *)&qword_10026DFB8, NSData_ptr),
        (swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, v16, 6) & 1) != 0))
  {
    v17 = v43;
    if (*(_QWORD *)(a1 + 16))
    {
      v18 = sub_100145264(0x617461646174656DLL, 0xE800000000000000);
      if ((v19 & 1) != 0)
      {
        sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v44);
        v20 = sub_10009061C(&qword_10026EDA0);
        if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
        {
          v21 = v43;
          if (v43[2] && (v22 = sub_100145264(0xD000000000000012, 0x8000000100200F50), (v23 & 1) != 0))
          {
            sub_100090EA8(v21[7] + 32 * v22, (uint64_t)&v44);
          }
          else
          {
            v44 = 0u;
            v45 = 0u;
          }
          swift_bridgeObjectRelease(v21);
          if (*((_QWORD *)&v45 + 1))
          {
            v30 = sub_100090EE8(0, &qword_10026C380, NSNumber_ptr);
            if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, v30, 6) & 1) != 0)
            {
              v31 = v43;
              if ((sub_100144C2C((uint64_t)objc_msgSend(v43, "integerValue")) & 1) != 0)
              {

              }
              else
              {
                v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
                v33 = Logger.logObject.getter(v32);
                v34 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v33, v34))
                {
                  v35 = (uint8_t *)swift_slowAlloc(2, -1);
                  v42 = v33;
                  v36 = v35;
                  *(_WORD *)v35 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v42, v34, "unexpected sequence number but still accept it", v35, 2u);
                  v37 = v36;
                  v33 = v42;
                  swift_slowDealloc(v37, -1, -1);
                }

                (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
              }
            }
          }
          else
          {
            sub_10009B2C0((uint64_t)&v44, &qword_10026E5F0);
          }
        }
      }
    }
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Data frame received", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v28 = sub_10014346C(v17);

  }
  else
  {
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No data present in frame", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v28 = 0;
  }
  return v28 & 1;
}

uint64_t sub_1001466A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint8_t *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  __n128 v36;
  uint64_t Strong;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t result;
  void (*v43)(_QWORD, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v53 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v53 - v10;
  if (!v1[5])
  {
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v53 - v10, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      v56 = v3;
      v18 = v17;
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Data read completed but no completion handler", v17, 2u);
      v19 = v18;
      v3 = v56;
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    v12 = v1[17];
    if (v12)
      goto LABEL_3;
LABEL_7:
    v13 = 0;
    goto LABEL_8;
  }
  v12 = v1[17];
  if (!v12)
    goto LABEL_7;
LABEL_3:
  v13 = *(unsigned __int8 *)(v12 + 57);
LABEL_8:
  v20 = (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  if ((v13 & 1) != 0 || v1[16])
  {
    v21(v6, v20, v2);
    v32 = swift_retain_n(v1, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v55 = v2;
      v56 = v3;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (_QWORD *)swift_slowAlloc(8, -1);
      v36.n128_u64[0] = 138412290;
      *(_DWORD *)v35 = 138412290;
      Strong = swift_weakLoadStrong(v1 + 2, v36);
      if (Strong)
      {
        v38 = Strong;
        v39 = *(id *)(Strong + 24);
        swift_release(v38);
        v57 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v35 + 4, v35 + 12);
      }
      else
      {
        v57 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v35 + 4, v35 + 12);
        v39 = 0;
      }
      v40 = v54;
      *v54 = v39;
      swift_release_n(v1, 2);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Data read completed for accessory: %@", v35, 0xCu);
      v41 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v40, 1, v41);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v2 = v55;
      v3 = v56;
    }
    else
    {

      swift_release_n(v1, 2);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v43 = (void (*)(_QWORD, uint64_t, uint64_t, __n128))v1[5];
    if (v43)
    {
      v44 = v1[6];
      v1[5] = 0;
      v1[6] = 0;
      swift_retain(v44);
      sub_1000B1410((uint64_t)v43, v44);
      if (v13)
      {
        v46 = v1[18];
        v45 = v1[19];
      }
      else
      {
        v46 = v1[14];
        v45 = v1[15];
      }
      v47 = swift_bridgeObjectRetain(v45);
      v43(0, v46, v45, v47);
      swift_bridgeObjectRelease(v45);
      return sub_1000B1410((uint64_t)v43, v44);
    }
  }
  else
  {
    v21(v9, v20, v2);
    v22 = swift_retain_n(v1, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v56 = v3;
      v25 = v2;
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v28.n128_u64[0] = 138412290;
      *(_DWORD *)v26 = 138412290;
      v29 = swift_weakLoadStrong(v1 + 2, v28);
      if (v29)
      {
        v30 = v29;
        v31 = *(id *)(v29 + 24);
        swift_release(v30);
        v57 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v26 + 4, v26 + 12);
      }
      else
      {
        v57 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v26 + 4, v26 + 12);
        v31 = 0;
      }
      *v27 = v31;
      swift_release_n(v1, 2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Data read completed for accessory: %@ but file path not present", v26, 0xCu);
      v48 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v27, 1, v48);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v2 = v25;
      v3 = v56;
    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v49 = type metadata accessor for Errors(0);
    v50 = sub_100090E1C((unint64_t *)&qword_10026C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Errors, (uint64_t)&protocol conformance descriptor for Errors);
    v51 = swift_allocError(v49, v50, 0, 0);
    *v52 = 0x656C6966206C696ELL;
    v52[1] = 0xEF656C646E616820;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v52, enum case for Errors.CommunicationFailure(_:), v49);
    sub_100144DD4(v51);
    return swift_errorRelease(v51);
  }
  return result;
}

uint64_t sub_100146C48(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_100146C7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026EDC8;
  if (!qword_10026EDC8)
  {
    v1 = sub_100090EE8(255, (unint64_t *)&qword_10026DFB8, NSData_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSData, v1);
    atomic_store(result, (unint64_t *)&qword_10026EDC8);
  }
  return result;
}

void sub_100146CD4(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_10014341C(v1, a1);
}

id sub_100146CEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10009ED44(v1, a1);
}

uint64_t sub_100146D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C((uint64_t *)&unk_10026D798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100146D4C(uint64_t a1)
{
  uint64_t v1;

  return sub_100142E70(a1, v1);
}

uint64_t sub_100146D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10009061C(&qword_10026EDD0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100146DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_10009061C(&qword_10026EDD0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100143058(a1, a2, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

char *DockDetector.__allocating_init(workQueue:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DockDetector.init(workQueue:)(a1);
}

uint64_t sub_100146E60@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;

  v3 = a2;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = _swiftEmptyArrayStorage;
  type metadata accessor for JarvisEventHistory(0);
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0xD000000000000012, 0x80000001001E0300);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    __break(1u);
  v5 = (_QWORD *)(a1 + 32);
  *(_BYTE *)v3 = *(_BYTE *)(a1 + 32);
  v6 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v7 = swift_unknownObjectRetain_n(a1, 2);
  v31 = v6;
  v8 = (_QWORD *)swift_dynamicCastClass(v7, v6);
  if (!v8)
  {
    swift_bridgeObjectRelease(a1);
    v8 = _swiftEmptyArrayStorage;
  }
  v9 = v8[2];
  swift_release(v8);
  if (v9 != v4 - 1)
    goto LABEL_41;
  v5 = (_QWORD *)swift_dynamicCastClass(a1, v31);
  if (!v5)
  {
    swift_bridgeObjectRelease(a1);
    v5 = _swiftEmptyArrayStorage;
  }
LABEL_8:
  swift_bridgeObjectRelease(a1);
  v30 = v5[2];
  if (v30)
  {
    a1 = 0;
    v10 = 0;
    v29 = v3;
    while (v10)
    {
      v4 = v5[2];
      if (v4 < a1)
        goto LABEL_40;
      swift_bridgeObjectRetain(v5);
      v12 = swift_unknownObjectRetain_n(v11, 2);
      v13 = (_QWORD *)swift_dynamicCastClass(v12, v31);
      if (!v13)
      {
        swift_release(v5);
        v13 = _swiftEmptyArrayStorage;
      }
      v14 = v13[2];
      swift_release(v13);
      if (v10 + v4 == v14)
      {
        v15 = (_QWORD *)swift_dynamicCastClass(v5, v31);
        swift_release(v5);
        if (!v15)
        {
          swift_release(v5);
          v15 = _swiftEmptyArrayStorage;
          v16 = _swiftEmptyArrayStorage[2];
          if (!v16)
            goto LABEL_39;
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      swift_release(v5);
      v15 = sub_1001BFA6C((uint64_t)v5, (uint64_t)(v5 + 4), a1, (2 * v4) | 1);
      swift_release(v5);
      v16 = v15[2];
      if (!v16)
        goto LABEL_39;
LABEL_20:
      if (v16 < 9)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        swift_bridgeObjectRelease(a1);
        v5 = sub_1001BFA6C(a1, (uint64_t)v5, 1, (2 * v4) | 1);
        goto LABEL_8;
      }
      v17 = *((_BYTE *)v15 + 32);
      swift_bridgeObjectRelease(v15);
      v4 = *(_QWORD *)((char *)v15 + 33);
      v18 = mach_continuous_time();
      v19 = v18 - v4;
      if (v18 < v4)
        goto LABEL_37;
      v20 = Logger.logObject.getter(v18);
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(35, -1);
        *(_DWORD *)v22 = 134218752;
        *(_QWORD *)(v22 + 4) = v4;
        *(_WORD *)(v22 + 12) = 2048;
        *(_QWORD *)(v22 + 14) = mach_continuous_time();
        *(_WORD *)(v22 + 22) = 2048;
        *(_QWORD *)(v22 + 24) = v19;
        *(_WORD *)(v22 + 32) = 256;
        *(_BYTE *)(v22 + 34) = v17;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "time is %llu, current time is %llu, ticks = %llu event is %hhu", (uint8_t *)v22, 0x23u);
        v23 = v22;
        v3 = v29;
        swift_slowDealloc(v23, -1, -1);
      }

      if (v4)
      {
        v24 = *(_QWORD **)(v3 + 8);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = sub_1000EA154(0, v24[2] + 1, 1, v24);
        v4 = v24[2];
        v25 = v24[3];
        if (v4 >= v25 >> 1)
          v24 = sub_1000EA154((_QWORD *)(v25 > 1), v4 + 1, 1, v24);
        v24[2] = v4 + 1;
        v26 = &v24[2 * v4];
        *((_BYTE *)v26 + 32) = v17;
        v26[5] = v19;
        *(_QWORD *)(v3 + 8) = v24;
      }
      v27 = a1 + 9;
      if (__OFADD__(a1, 9))
        goto LABEL_38;
      v10 -= 9;
      a1 += 9;
      if (v27 >= v30)
        return swift_release(v5);
    }
    swift_bridgeObjectRetain(v5);
    v15 = v5;
LABEL_19:
    v16 = v15[2];
    if (!v16)
      goto LABEL_39;
    goto LABEL_20;
  }
  return swift_release(v5);
}

id DockDetector.startupValidator.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator, v3, 0, 0);
  return *v1;
}

void DockDetector.startupValidator.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DockDetector.startupValidator.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator, a1, 33, 0);
  return j__swift_endAccess;
}

char *DockDetector.init(workQueue:)(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  char *v12;
  mach_timebase_info *v13;
  char *v14;
  _BYTE v16[24];
  objc_super v17;

  v3 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator;
  v4 = objc_allocWithZone((Class)type metadata accessor for MotionValidator(0));
  v5 = v1;
  *(_QWORD *)&v1[v3] = MotionValidator.init(type:interval:)(0, 0.1);
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x657465446B636F44, 0xEC000000726F7463);
  v6 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager;
  *(_QWORD *)&v5[v6] = IOHIDManagerCreate(kCFAllocatorDefault, 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisInterval] = 0x3FC999999999999ALL;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisLastDockedTimeout] = 0x4000000000000000;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisLastUndockedTimeout] = 0x4014000000000000;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimeThreshold] = 0x404E000000000000;
  v7 = &v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus];
  v8 = enum case for DockStatus.Undocked(_:);
  v9 = type metadata accessor for DockStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisReportLength] = 91;
  v10 = &v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_kJarvisReportID] = 2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue] = a1;
  v11 = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_reportBuffer] = swift_slowAlloc(91, -1);

  v17.receiver = v5;
  v17.super_class = (Class)type metadata accessor for DockDetector(0);
  v12 = (char *)objc_msgSendSuper2(&v17, "init");
  v13 = (mach_timebase_info *)&v12[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase];
  swift_beginAccess(&v12[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase], v16, 33, 0);
  v14 = v12;
  mach_timebase_info(v13);
  swift_endAccess(v16);

  return v14;
}

uint64_t type metadata accessor for DockDetector(uint64_t a1)
{
  return sub_10014877C(a1, (uint64_t *)&unk_10026EE80, (uint64_t)&nominal type descriptor for DockDetector);
}

id DockDetector.__deallocating_deinit()
{
  char *v0;
  void *v1;
  objc_super v3;

  IOHIDManagerClose(*(IOHIDManagerRef *)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager], 0);
  v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer];
  *(_QWORD *)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = 0;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DockDetector(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_1001476FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  CFSetRef v8;
  CFSetRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  __IOHIDManager *v18;
  uint64_t v19;
  CFDictionaryRef matching;
  void *v21;

  v2 = v1;
  v3 = Logger.logObject.getter(a1);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting up Jarvis detection", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_1001B232C((uint64_t)&off_1002385A0);
  matching = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v7 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager;
  IOHIDManagerSetDeviceMatching(*(IOHIDManagerRef *)(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager), matching);
  v8 = IOHIDManagerCopyDevices(*(IOHIDManagerRef *)(v2 + v7));
  if (!v8)
    goto LABEL_5;
  v9 = v8;
  v21 = 0;
  type metadata accessor for IOHIDDevice(0);
  v11 = v10;
  v12 = sub_100090E1C(&qword_10026BF38, (uint64_t (*)(uint64_t))type metadata accessor for IOHIDDevice, (uint64_t)&unk_1001DDA30);
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v9, &v21, v11, v12);

  v13 = v21;
  if (!v21)
  {
LABEL_5:
    swift_bridgeObjectRelease(0);
    v13 = &_swiftEmptySetSingleton;
  }
  v14 = sub_1001BFBC4((uint64_t)v13);
  swift_bridgeObjectRelease(v13);
  if (((unint64_t)v14 & 0x8000000000000000) != 0 || ((unint64_t)v14 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v14);
    v15 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_release(v14);
    if (!v15)
      goto LABEL_13;
  }
  else
  {
    v15 = (uint64_t)v14[2];
    if (!v15)
    {
LABEL_13:
      swift_release(v14);
      v17 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis) = v15;

      v18 = (__IOHIDManager *)*(id *)(v2 + v7);
      IOHIDManagerOpen(v18, 0);

      return;
    }
  }
  if (((unint64_t)v14 & 0xC000000000000001) != 0)
  {
    v16 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    goto LABEL_12;
  }
  if (v14[2])
  {
    v16 = v14[4];
LABEL_12:
    v15 = (uint64_t)v16;
    goto LABEL_13;
  }
  __break(1u);
}

void sub_100147904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint8_t *v11;
  __IOHIDDevice *v12;
  uint64_t Report;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  double v24;
  _BOOL8 v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  void *v40;
  NSObject *v41;
  CFIndex pReportLength;
  _BYTE v43[24];

  v2 = type metadata accessor for DockStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JarvisEventHistory(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis);
  if (v10)
  {
    pReportLength = 91;
    v11 = *(uint8_t **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_reportBuffer);
    v12 = v10;
    Report = IOHIDDeviceGetReport(v12, kIOHIDReportTypeFeature, 2, v11, &pReportLength);
    if ((_DWORD)Report)
    {
      v14 = Logger.logObject.getter(Report);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        v17 = "Failed to get HID device report";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v17, v16, 2u);
        swift_slowDealloc(v16, -1, -1);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (pReportLength < 1 || *v11 != 2)
    {
      v14 = Logger.logObject.getter(Report);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        v17 = "Report doesn't contain valid report ID";
        goto LABEL_16;
      }
LABEL_17:

LABEL_18:
      return;
    }
    v20 = sub_1001BFCBC((char *)v11, pReportLength);
    sub_100146E60((unint64_t)v20, (uint64_t)v9);
    v21 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer;
    v22 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer);
    if (v22)
    {
      v23 = v22;
      v24 = dispatch thunk of RepeatingTimer.timeSinceInit()();

      v25 = sub_100147EB4((uint64_t)v9, INFINITY);
      if (v24 > 5.0)
      {
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v28 = 0;
          v29 = "Jarvis: monitoring done, not docked but still connecting";
LABEL_22:
          _os_log_impl((void *)&_mh_execute_header, v26, v27, v29, v28, 2u);
          swift_slowDealloc(v28, -1, -1);
          goto LABEL_23;
        }
        goto LABEL_23;
      }
      if (v24 > 2.0 && v25)
      {
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v28 = 0;
          v29 = "Jarvis: monitoring done, docked and connecting";
          goto LABEL_22;
        }
LABEL_23:

        (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DockStatus.Docked(_:), v2);
        v30 = a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus;
        v31 = swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus, v43, 33, 0);
        (*(void (**)(uint64_t, char *, uint64_t, __n128))(v3 + 40))(v30, v5, v2, v31);
        swift_endAccess(v43);
LABEL_28:
        v38 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback);
        if (v38)
        {
          v39 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback + 8);
          swift_retain(v39);
          v38(1);
          sub_1000B1410((uint64_t)v38, v39);
        }
        IOHIDManagerClose(*(IOHIDManagerRef *)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager), 0);
        v40 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = 0;

        sub_1001487B0((uint64_t)v9);
        return;
      }
    }
    if (!sub_100147EB4((uint64_t)v9, 60.0))
    {
      sub_1001487B0((uint64_t)v9);
      goto LABEL_18;
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DockStatus.Docked(_:), v2);
    v32 = a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus;
    v33 = swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus, v43, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v3 + 40))(v32, v5, v2, v33);
    v34 = swift_endAccess(v43);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Jarvis: docked", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    goto LABEL_28;
  }
  v41 = Logger.logObject.getter(v7);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v18, "Jarvis: no devices found", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

}

BOOL sub_100147EB4(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  unsigned __int32 *v6;
  __n128 v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  double v15;
  _BYTE v16[24];

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v3 + 16))
    return 1;
  if (*(_BYTE *)(v3 + 32) != 1)
    return 0;
  v5 = (double)*(unint64_t *)(v3 + 40);
  v6 = (unsigned __int32 *)(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase);
  v7 = swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase, v16, 0, 0);
  v7.n128_u32[0] = *v6;
  LODWORD(v8) = v6[1];
  v9 = v5 * (double)v7.n128_u64[0] / (double)v8 / 1000000000.0;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Secs since last Jarvis event is %f", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  return v9 < a2;
}

uint64_t DockDetector.newStatus(_:monitorJarvisCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v32 = a2;
  v33 = a3;
  v34 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DockStatus(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(id *)&v3[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_10023CB30, v17 + 16, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  *(_QWORD *)(v18 + v16) = v3;
  v19 = (uint64_t *)(v18 + v17);
  v21 = v32;
  v20 = v33;
  *v19 = v32;
  v19[1] = v20;
  aBlock[4] = sub_100148598;
  v40 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023CB48;
  v22 = _Block_copy(aBlock);
  v23 = v31;
  v24 = v3;
  v25 = sub_1000BC8F4(v21, v20);
  static DispatchQoS.unspecified.getter(v25);
  v38 = _swiftEmptyArrayStorage;
  v26 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v28 = sub_100090F20();
  v29 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v27, v28, v34, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  return swift_release(v40);
}

void sub_100148290(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  __n128 v29;
  _BYTE v31[24];

  v8 = type metadata accessor for DockStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v31[-v13 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v31[-v13 - 8], a1, v8);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 88))(v14, v8);
  if ((_DWORD)v15 == enum case for DockStatus.Undocked(_:))
  {
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 104))(v12, v15, v8);
    v28 = &a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus];
    v29 = swift_beginAccess(&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus], v31, 33, 0);
    (*(void (**)(char *, _BYTE *, uint64_t, __n128))(v9 + 40))(v28, v12, v8, v29);
    swift_endAccess(v31);
    IOHIDManagerClose(*(IOHIDManagerRef *)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager], 0);
    v27 = *(void **)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer];
    *(_QWORD *)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = 0;
    goto LABEL_7;
  }
  if ((_DWORD)v15 != enum case for DockStatus.DockedRSSI(_:))
  {
    if ((_DWORD)v15 != enum case for DockStatus.Docked(_:))
    {
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
      return;
    }
    goto LABEL_6;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 104))(v12, v15, v8);
  v16 = &a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus];
  v17 = swift_beginAccess(&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus], v31, 33, 0);
  (*(void (**)(char *, _BYTE *, uint64_t, __n128))(v9 + 40))(v16, v12, v8, v17);
  swift_endAccess(v31);
  if (!a3)
    return;
  v18 = &a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback];
  v19 = *(_QWORD *)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback];
  v20 = *(_QWORD *)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback + 8];
  *(_QWORD *)v18 = a3;
  *((_QWORD *)v18 + 1) = a4;
  swift_retain(a4);
  v21 = sub_1000B1410(v19, v20);
  sub_1001476FC(v21);
  v22 = *(void **)&a2[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue];
  v23 = swift_allocObject(&unk_10023CB80, 24, 7);
  *(_QWORD *)(v23 + 16) = a2;
  objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
  v24 = v22;
  v25 = a2;
  v26 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, v22, sub_100148760, v23, 0.2);
  v27 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer];
  *(_QWORD *)&v25[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = v26;
LABEL_7:

}

uint64_t sub_100148510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DockStatus(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  if (*(_QWORD *)(v0 + v6))
    swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v3 | 7);
}

void sub_100148598()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DockStatus(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100148290(v0 + v2, *(char **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001485E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001485F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void DockDetector.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("dockaccessoryd.DockDetector", 27, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10014862C()
{
  return type metadata accessor for DockDetector(0);
}

uint64_t sub_100148660(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[4] = "\b";
    v5[5] = "\b";
    v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[9] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for DockStatus(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      v5[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[12] = &unk_1001E02E8;
      v5[13] = &unk_1001E0300;
      v5[14] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[15] = (char *)&value witness table for Builtin.RawPointer + 64;
      return swift_updateClassMetadata2(a1, 256, 16, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t sub_10014873C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100148760()
{
  uint64_t v0;

  sub_100147904(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for JarvisEventHistory(uint64_t a1)
{
  return sub_10014877C(a1, qword_10026EEE8, (uint64_t)&nominal type descriptor for JarvisEventHistory);
}

uint64_t sub_10014877C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1001487B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JarvisEventHistory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for JarvisEvent()
{
  return &type metadata for JarvisEvent;
}

uint64_t *sub_1001487FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[1];
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Logger(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1001488A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1001488E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_100148960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001489DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100148A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100148AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148AC0);
}

uint64_t sub_100148AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100148B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148B48);
}

uint64_t sub_100148B48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100148BBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100148C44(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  unsigned __int8 v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char v37;
  unint64_t v38;
  unsigned __int8 v39;
  char v40;
  _QWORD v41[3];

  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_75:
    swift_bridgeObjectRelease(v3);
    return 0;
  }
  v3 = a2;
  v4 = HIBYTE(a2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_75;
  if ((v3 & 0x1000000000000000) == 0)
  {
    if ((v3 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v3);
      v9 = sub_1001538C4(v8, v5, a3);
      v11 = v10 & 1;
      goto LABEL_11;
    }
    v41[0] = result;
    v41[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (v4)
      {
        v23 = v4 - 1;
        if (v23)
        {
          v13 = 0;
          v24 = a3 + 48;
          v25 = a3 + 55;
          v26 = a3 + 87;
          if (a3 > 0xA)
          {
            v24 = 58;
          }
          else
          {
            v26 = 97;
            v25 = 65;
          }
          v27 = (unsigned __int8 *)v41 + 1;
          v11 = 1;
          do
          {
            v28 = *v27;
            if (v28 < 0x30 || v28 >= v24)
            {
              if (v28 < 0x41 || v28 >= v25)
              {
                v9 = 0;
                if (v28 < 0x61 || v28 >= v26)
                  goto LABEL_11;
                v29 = -87;
              }
              else
              {
                v29 = -55;
              }
            }
            else
            {
              v29 = -48;
            }
            if (!is_mul_ok(v13, a3))
              goto LABEL_73;
            v30 = v13 * a3;
            v31 = v28 + v29;
            v22 = __CFADD__(v30, v31);
            v13 = v30 + v31;
            if (v22)
              goto LABEL_73;
            ++v27;
            --v23;
          }
          while (v23);
LABEL_72:
          v11 = 0;
          v9 = (unsigned __int8 *)v13;
          goto LABEL_11;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v4)
        {
          v13 = 0;
          v32 = a3 + 48;
          v33 = a3 + 55;
          v34 = a3 + 87;
          if (a3 > 0xA)
          {
            v32 = 58;
          }
          else
          {
            v34 = 97;
            v33 = 65;
          }
          v35 = (unsigned __int8 *)v41;
          v11 = 1;
          while (1)
          {
            v36 = *v35;
            if (v36 < 0x30 || v36 >= v32)
            {
              if (v36 < 0x41 || v36 >= v33)
              {
                v9 = 0;
                if (v36 < 0x61 || v36 >= v34)
                  goto LABEL_11;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if (!is_mul_ok(v13, a3))
              goto LABEL_73;
            v38 = v13 * a3;
            v39 = v36 + v37;
            v22 = __CFADD__(v38, v39);
            v13 = v38 + v39;
            if (v22)
              goto LABEL_73;
            ++v35;
            if (!--v4)
              goto LABEL_72;
          }
        }
        goto LABEL_73;
      }
      if (v4)
      {
        v12 = v4 - 1;
        if (v12)
        {
          v13 = 0;
          v14 = a3 + 48;
          v15 = a3 + 55;
          v16 = a3 + 87;
          if (a3 > 0xA)
          {
            v14 = 58;
          }
          else
          {
            v16 = 97;
            v15 = 65;
          }
          v17 = (unsigned __int8 *)v41 + 1;
          v11 = 1;
          while (1)
          {
            v18 = *v17;
            if (v18 < 0x30 || v18 >= v14)
            {
              if (v18 < 0x41 || v18 >= v15)
              {
                v9 = 0;
                if (v18 < 0x61 || v18 >= v16)
                  goto LABEL_11;
                v19 = -87;
              }
              else
              {
                v19 = -55;
              }
            }
            else
            {
              v19 = -48;
            }
            if (!is_mul_ok(v13, a3))
              break;
            v20 = v13 * a3;
            v21 = v18 + v19;
            v22 = v20 >= v21;
            v13 = v20 - v21;
            if (!v22)
              break;
            ++v17;
            if (!--v12)
              goto LABEL_72;
          }
        }
LABEL_73:
        v9 = 0;
        v11 = 1;
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v9 = sub_100153290(result, v3, a3);
  v11 = v40;
LABEL_11:
  swift_bridgeObjectRelease(v3);
  if ((v11 & 1) != 0)
    return 0;
  else
    return (uint64_t)v9;
}

uint64_t sub_100148F6C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[16];

  v5 = v4;
  Strong = swift_weakLoadStrong(v3 + 8, a3);
  if (Strong)
  {
    v9 = Strong;
    if (*(_QWORD *)(a2 + 16))
    {
      sub_1000ACE4C(v3, (uint64_t)v19, (uint64_t *)&unk_10026F320);
      v10 = *(_BYTE *)(v9 + 24);
      swift_retain(a1);
      swift_bridgeObjectRetain(a2);
      if ((v10 & 1) != 0)
      {
        sub_1001490DC(v9, a2, (uint64_t)v19, a1);
      }
      else
      {
        sub_100115B78();
        if (!v5)
        {
          sub_1001490DC(v9, a2, (uint64_t)v19, a1);
          sub_100116140();
        }
      }
      swift_bridgeObjectRelease(a2);
      swift_release(v9);
      sub_10009B2C0((uint64_t)v19, (uint64_t *)&unk_10026F320);
      v18 = a1;
    }
    else
    {
      v15 = sub_1000ABB30();
      v16 = swift_allocError(&type metadata for DockdError, v15, 0, 0);
      *v17 = 2;
      swift_willThrow(v16);
      v18 = v9;
    }
    return swift_release(v18);
  }
  else
  {
    v11 = sub_1000ABB30();
    v12 = swift_allocError(&type metadata for DockdError, v11, 0, 0);
    *v13 = 2;
    return swift_willThrow(v12);
  }
}

uint64_t sub_1001490DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  char v30;
  __n128 v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[7];
  _QWORD v42[4];
  _QWORD v43[2];
  uint64_t v44;

  v44 = a4;
  v7 = sub_1000BB71C(63, 0xE100000000000000, *(_QWORD *)(a2 + 16));
  v8 = sub_1001493CC((uint64_t)v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  HIDWORD(v43[1]) = -335544320;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v43, "INSERT INTO ");
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v12 = *(void **)(*(_QWORD *)a3 + 24);
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 10272;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_1001493CC(a2);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 0x5345554C41562029;
  v17._object = (void *)0xEA00000000002820;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v8;
  v18._object = v10;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v10);
  v19._countAndFlagsBits = 15145;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20 = v43[0];
  v21 = v43[1];
  v23 = type metadata accessor for DBStatement(0, v22);
  inited = swift_initStackObject(v23, (char *)v42 + 1);
  *(_QWORD *)(inited + 16) = 0;
  v25 = swift_weakInit(inited + 24, 0);
  swift_weakAssign(v25, a1);
  swift_retain(a1);
  v26 = sub_1001163A4(v20, v21);
  swift_bridgeObjectRelease(v21);
  v27 = swift_release(a1);
  *(_QWORD *)(inited + 16) = v26;
  if (!v26)
  {
    v33 = sub_1001168EC();
    v34 = swift_allocError(&type metadata for DBError, v33, 0, 0);
    *(_DWORD *)v35 = 1;
LABEL_7:
    *(_BYTE *)(v35 + 4) = 2;
    swift_willThrow(v34);
    return swift_release(inited);
  }
  __chkstk_darwin(v27);
  v41[2] = &v44;
  v41[3] = inited;
  v41[4] = a2;
  swift_retain(inited);
  OS_dispatch_queue.sync<A>(execute:)(v42, sub_100155318, v41, &type metadata for Bool);
  swift_release(inited);
  if ((v42[0] & 1) == 0)
  {
    v36 = sub_1001168EC();
    v34 = swift_allocError(&type metadata for DBError, v36, 0, 0);
    *(_DWORD *)v35 = 2;
    goto LABEL_7;
  }
  v29 = sub_100114D88(101, v28);
  if ((v30 & 1) == 0)
  {
    v31.n128_f64[0] = swift_setDeallocating(inited);
    return sub_100114C08(v31);
  }
  v37 = v29;
  v38 = HIDWORD(v29);
  LODWORD(v43[0]) = v29;
  BYTE4(v43[0]) = BYTE4(v29);
  v39 = sub_1001168EC();
  swift_willThrowTypedImpl(v43, &type metadata for DBError, v39);
  swift_allocError(&type metadata for DBError, v39, 0, 0);
  *(_DWORD *)v40 = v37;
  *(_BYTE *)(v40 + 4) = v38;
  return swift_release(inited);
}

uint64_t sub_1001493CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = 0;
  v12 = swift_bridgeObjectRetain(a1);
  v3 = (uint64_t *)(v12 + 40);
  v4 = 0xE000000000000000;
  do
  {
    v6 = *(v3 - 1);
    v5 = *v3;
    v7 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v7 = v2 & 0xFFFFFFFFFFFFLL;
    if (v7)
      v8 = 8236;
    else
      v8 = 0;
    if (v7)
      v9 = (void *)0xE200000000000000;
    else
      v9 = (void *)0xE000000000000000;
    v14 = v2;
    v15 = v4;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v9);
    v13[0] = v6;
    v13[1] = v5;
    String.append<A>(contentsOf:)(v13, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    v2 = v14;
    v4 = v15;
    v3 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(v12);
  return v2;
}

uint64_t sub_1001494EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE v26[16];

  v9 = v8;
  Strong = swift_weakLoadStrong(v7 + 8, a7);
  if (Strong)
  {
    v17 = Strong;
    if (*(_QWORD *)(a2 + 16))
    {
      sub_1000ACE4C(v7, (uint64_t)v26, (uint64_t *)&unk_10026F320);
      v18 = *(_BYTE *)(v17 + 24);
      swift_retain(a1);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a6);
      if ((v18 & 1) != 0)
      {
        sub_1001496C0(v17, a1, a2, (uint64_t)v26, a3, a4, a5, a6);
      }
      else
      {
        sub_100115B78();
        if (!v9)
        {
          sub_1001496C0(v17, a1, a2, (uint64_t)v26, a3, a4, a5, a6);
          sub_100116140();
        }
      }
      swift_bridgeObjectRelease(a2);
      swift_release(a1);
      swift_release(v17);
      sub_10009B2C0((uint64_t)v26, (uint64_t *)&unk_10026F320);
      swift_bridgeObjectRelease(a6);
      return swift_bridgeObjectRelease(a4);
    }
    else
    {
      v23 = sub_1000ABB30();
      v24 = swift_allocError(&type metadata for DockdError, v23, 0, 0);
      *v25 = 2;
      swift_willThrow(v24);
      return swift_release(v17);
    }
  }
  else
  {
    v19 = sub_1000ABB30();
    v20 = swift_allocError(&type metadata for DockdError, v19, 0, 0);
    *v21 = 2;
    return swift_willThrow(v20);
  }
}

uint64_t sub_1001496C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;

  v13 = sub_10014BC7C(a3);
  v14 = v13[2];
  if (v14 == *(_QWORD *)(a3 + 16))
  {
    v47 = a6;
    v48 = a7;
    v46 = v13;
    v15 = 0;
    if (v14)
    {
      v16 = v13 + 5;
      v17 = (_QWORD *)(a3 + 40);
      v18 = 0xE000000000000000;
      do
      {
        v19 = HIBYTE(v18) & 0xF;
        if (v19)
          v20 = 8236;
        else
          v20 = 0;
        if (v19)
          v21 = (void *)0xE200000000000000;
        else
          v21 = (void *)0xE000000000000000;
        swift_bridgeObjectRetain(v18);
        v22._countAndFlagsBits = v20;
        v22._object = v21;
        String.append(_:)(v22);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v21);
        v24 = v15;
        v23 = v18;
        v49 = *(v17 - 1);
        v50 = (void *)*v17;
        swift_bridgeObjectRetain(*v17);
        v25._countAndFlagsBits = 656424224;
        v25._object = (void *)0xE400000000000000;
        String.append(_:)(v25);
        v26 = *(v16 - 1);
        v27 = (void *)*v16;
        swift_bridgeObjectRetain(*v16);
        v28._countAndFlagsBits = v26;
        v28._object = v27;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(v27);
        v29._countAndFlagsBits = 39;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v50;
        v51 = v23;
        swift_bridgeObjectRetain(v23);
        v31._countAndFlagsBits = v49;
        v31._object = v30;
        String.append(_:)(v31);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v30);
        v15 = v24;
        v18 = v51;
        v16 += 2;
        v17 += 2;
        --v14;
      }
      while (v14);
    }
    else
    {
      v18 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease(v46);
    v36 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    v37 = *(void **)(*(_QWORD *)a4 + 24);
    swift_bridgeObjectRetain(v37);
    v38._countAndFlagsBits = v36;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v37);
    v39._countAndFlagsBits = 0x2054455320;
    v39._object = (void *)0xE500000000000000;
    String.append(_:)(v39);
    swift_bridgeObjectRetain(0xE700000000000000);
    v40._countAndFlagsBits = v15;
    v40._object = (void *)v18;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(0xE700000000000000);
    swift_bridgeObjectRelease(v18);
    v41._countAndFlagsBits = a5;
    v41._object = v47;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 2112800;
    v42._object = (void *)0xE300000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = v48;
    v43._object = a8;
    String.append(_:)(v43);
    v44._countAndFlagsBits = 59;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    swift_bridgeObjectRetain(0xE700000000000000);
    v45._countAndFlagsBits = 0x20455245485720;
    v45._object = (void *)0xE700000000000000;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(0xE700000000000000);
    swift_bridgeObjectRelease(0xE700000000000000);
    sub_10011671C(0x20455441445055, 0xE700000000000000, 0);
    return swift_bridgeObjectRelease(0xE700000000000000);
  }
  else
  {
    swift_bridgeObjectRelease(v13);
    v32 = sub_1001168EC();
    v33 = swift_allocError(&type metadata for DBError, v32, 0, 0);
    *(_DWORD *)v34 = 2;
    *(_BYTE *)(v34 + 4) = 2;
    return swift_willThrow(v33);
  }
}

uint64_t sub_1001499D4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  Strong = swift_weakLoadStrong(v1 + 8, a1);
  if (Strong)
  {
    v5 = Strong;
    sub_1000ACE4C(v1, (uint64_t)v10, (uint64_t *)&unk_10026F360);
    if ((*(_BYTE *)(v5 + 24) & 1) != 0)
    {
      v3 = sub_100149B04(v5, (uint64_t)v10);
      swift_release(v5);
    }
    else
    {
      sub_100115B78();
      if (!v2)
      {
        v3 = sub_100149B04(v5, (uint64_t)v10);
        sub_100116140();
      }
      swift_release(v5);
    }
    sub_10009B2C0((uint64_t)v10, (uint64_t *)&unk_10026F360);
  }
  else
  {
    v6 = sub_1000ABB30();
    v7 = swift_allocError(&type metadata for DockdError, v6, 0, 0);
    *v8 = 2;
    swift_willThrow(v7);
  }
  return v3;
}

uint64_t sub_100149B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;
  _BYTE *v35;
  _QWORD v36[5];
  int v37;
  char v38;
  _BYTE v39[32];
  _QWORD v40[2];
  unint64_t v41;

  v41 = (unint64_t)_swiftEmptyArrayStorage;
  HIBYTE(v40[1]) = -18;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v40, "SELECT * FROM ");
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v5 = *(void **)(*(_QWORD *)a2 + 24);
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7 = v40[0];
  v8 = v40[1];
  v10 = type metadata accessor for DBStatement(0, v9);
  inited = swift_initStackObject(v10, v39);
  *(_QWORD *)(inited + 16) = 0;
  v12 = swift_weakInit(inited + 24, 0);
  swift_weakAssign(v12, a1);
  swift_retain(a1);
  v13 = sub_1001163A4(v7, v8);
  swift_bridgeObjectRelease(v8);
  swift_release(a1);
  *(_QWORD *)(inited + 16) = v13;
  Strong = swift_weakLoadStrong(inited + 24, v14);
  if (Strong)
  {
    v16 = Strong;
    while (1)
    {
      if (!*(_QWORD *)(inited + 16))
      {
        swift_release(v16);
        v26 = 0x200000001;
        goto LABEL_14;
      }
      if ((*(_BYTE *)(v16 + 24) & 1) == 0)
      {
        swift_release(v16);
        goto LABEL_13;
      }
      OS_dispatch_queue.sync<A>(execute:)(v40, sub_100155448, inited, &type metadata for Int32);
      v17 = swift_release(v16);
      if (LODWORD(v40[0]) != 100)
      {
        v26 = LODWORD(v40[0]) | (unint64_t)&_mh_execute_header;
        goto LABEL_14;
      }
      __chkstk_darwin(v17);
      v36[2] = v18;
      v19 = sub_10009061C((uint64_t *)&unk_10026F370);
      v20 = OS_dispatch_queue.sync<A>(execute:)(v40, sub_100155430, v36, v19);
      v21 = v40[0];
      if (!v40[0])
        break;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v23 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized Array._endMutation()(v24);
      v16 = swift_weakLoadStrong(inited + 24, v25);
      if (!v16)
        goto LABEL_13;
    }
    v34 = sub_1000ABB30();
    v28 = swift_allocError(&type metadata for DockdError, v34, 0, 0);
    *v35 = 2;
    swift_willThrow(v28);
  }
  else
  {
LABEL_13:
    v26 = 0x200000000;
LABEL_14:
    LODWORD(v40[0]) = v26;
    BYTE4(v40[0]) = BYTE4(v26);
    v27 = sub_1001168EC();
    swift_willThrowTypedImpl(v40, &type metadata for DBError, v27);
    v28 = swift_allocError(&type metadata for DBError, v27, 0, 0);
    *(_DWORD *)v29 = v26;
    *(_BYTE *)(v29 + 4) = BYTE4(v26);
  }
  v40[0] = v28;
  swift_errorRetain(v28);
  v30 = sub_10009061C(&qword_10026CF70);
  if (swift_dynamicCast(&v37, v40, v30, &type metadata for DBError, 0) && v38 == 1 && v37 == 101)
  {
    swift_errorRelease(v28);
    swift_release(inited);
    swift_errorRelease(v40[0]);
    return v41;
  }
  else
  {
    swift_bridgeObjectRelease(v41);
    v32 = swift_errorRelease(v40[0]);
    swift_willThrow(v32);
    v33.n128_f64[0] = swift_setDeallocating(inited);
    return sub_100114C08(v33);
  }
}

void sub_100149E90(unint64_t a1, const void *a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const __CFDictionary *isa;
  const __CFDictionary *v22;
  OSStatus v23;
  CFStringRef v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE v37[80];
  char v38[88];

  v8 = sub_10014D850(a2, a3, 1);
  v9 = v8;
  if (!((unint64_t)v8 >> 62))
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return;
  }
  if (v8 >= 0)
    v8 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v8))
    goto LABEL_24;
LABEL_3:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
LABEL_6:
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v3 + 128) = a1;
    v10 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v10, v38);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValuePersistentRef);
    *(_QWORD *)(inited + 40) = v12;
    v13 = *(_QWORD *)(v3 + 96);
    v14 = *(_QWORD *)(v3 + 104);
    *(_QWORD *)(inited + 72) = &type metadata for Data;
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 56) = v14;
    sub_10009B27C(v13, v14);
    v15 = sub_1001B0FB8(inited);
    v16 = swift_initStackObject(v10, v37);
    *(_OWORD *)(v16 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrGeneric);
    *(_QWORD *)(v16 + 40) = v17;
    v18 = sub_10014CD88();
    *(_QWORD *)(v16 + 72) = &type metadata for String;
    *(_QWORD *)(v16 + 48) = v18;
    *(_QWORD *)(v16 + 56) = v19;
    v20 = sub_1001B0FB8(v16);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v15);
    v22 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    v23 = SecItemUpdate(isa, v22);

    if (!v23)
    {
      swift_release(v3);
      return;
    }
    v24 = SecCopyErrorMessageString(v23, 0);
    if (v24)
    {
      v25 = (__CFString *)v24;
      v34 = 0;
      v35 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)(v24, &v34);

      v4 = v34;
      a1 = v35;
    }
    else
    {
      v4 = 0;
      a1 = 0;
    }
    if (qword_10026BBF0 == -1)
      goto LABEL_12;
    goto LABEL_27;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v9 + 32);
    swift_retain(v3);
    goto LABEL_6;
  }
  __break(1u);
LABEL_27:
  swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_12:
  v26 = type metadata accessor for Logger(0);
  sub_10008EA50(v26, (uint64_t)qword_10026EF30);
  swift_bridgeObjectRetain(a1);
  v27 = swift_bridgeObjectRetain_n(a3, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v34 = v31;
    *(_DWORD *)v30 = 136315394;
    swift_bridgeObjectRetain(a3);
    v36 = sub_1000906BC((uint64_t)a2, (unint64_t)a3, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v30 + 12) = 2080;
    if (a1)
      v32 = v4;
    else
      v32 = 0x206E776F6E6B6E55;
    if (a1)
      v33 = a1;
    else
      v33 = 0xED0000726F727245;
    swift_bridgeObjectRetain(a1);
    v36 = sub_1000906BC(v32, v33, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to update peer key state number for %s: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
    swift_release(v3);

  }
  else
  {

    swift_release(v3);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(a3, 2);
  }
}

void sub_10014A2DC(uint64_t a1, unint64_t a2, const void *a3, const void *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const __CFDictionary *isa;
  const __CFDictionary *v25;
  OSStatus v26;
  CFStringRef v27;
  __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE v40[80];
  char v41[88];

  v10 = sub_10014D850(a3, a4, 1);
  v11 = v10;
  if (!((unint64_t)v10 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease(v11);
    return;
  }
  if (v10 >= 0)
    v10 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v10))
    goto LABEL_24;
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v4 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
LABEL_6:
    swift_bridgeObjectRelease(v11);
    v12 = v4[18];
    v4[17] = a1;
    v4[18] = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v12);
    v13 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v13, v41);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValuePersistentRef);
    *(_QWORD *)(inited + 40) = v15;
    v16 = v4[12];
    v17 = v4[13];
    *(_QWORD *)(inited + 72) = &type metadata for Data;
    *(_QWORD *)(inited + 48) = v16;
    *(_QWORD *)(inited + 56) = v17;
    sub_10009B27C(v16, v17);
    v18 = sub_1001B0FB8(inited);
    v19 = swift_initStackObject(v13, v40);
    *(_OWORD *)(v19 + 16) = xmmword_1001DE690;
    *(_QWORD *)(v19 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrGeneric);
    *(_QWORD *)(v19 + 40) = v20;
    v21 = sub_10014CD88();
    *(_QWORD *)(v19 + 72) = &type metadata for String;
    *(_QWORD *)(v19 + 48) = v21;
    *(_QWORD *)(v19 + 56) = v22;
    v23 = sub_1001B0FB8(v19);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v25 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v26 = SecItemUpdate(isa, v25);

    if (!v26)
    {
      swift_release(v4);
      return;
    }
    v27 = SecCopyErrorMessageString(v26, 0);
    if (v27)
    {
      v28 = (__CFString *)v27;
      v37 = 0;
      v38 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)(v27, &v37);

      v5 = v37;
      a2 = v38;
    }
    else
    {
      v5 = 0;
      a2 = 0;
    }
    if (qword_10026BBF0 == -1)
      goto LABEL_12;
    goto LABEL_27;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD **)(v11 + 32);
    swift_retain(v4);
    goto LABEL_6;
  }
  __break(1u);
LABEL_27:
  swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_12:
  v29 = type metadata accessor for Logger(0);
  sub_10008EA50(v29, (uint64_t)qword_10026EF30);
  swift_bridgeObjectRetain(a2);
  v30 = swift_bridgeObjectRetain_n(a4, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v37 = v34;
    *(_DWORD *)v33 = 136315394;
    swift_bridgeObjectRetain(a4);
    v39 = sub_1000906BC((uint64_t)a3, (unint64_t)a4, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v33 + 12) = 2080;
    if (a2)
      v35 = v5;
    else
      v35 = 0x206E776F6E6B6E55;
    if (a2)
      v36 = a2;
    else
      v36 = 0xED0000726F727245;
    swift_bridgeObjectRetain(a2);
    v39 = sub_1000906BC(v35, v36, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to update peer key state number for %s: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);
    swift_release(v4);

  }
  else
  {

    swift_release(v4);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t sub_10014A740()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026EF30);
  sub_10008EA50(v0, (uint64_t)qword_10026EF30);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x65726F747379656BLL, 0xE800000000000000);
}

void sub_10014A7B4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

BOOL sub_10014AAB4(char *a1, char *a2)
{
  return *(_QWORD *)&aIpkd[8 * *a1] == *(_QWORD *)&aIpkd[8 * *a2];
}

Swift::Int sub_10014AAD8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(*(_QWORD *)&aIpkd[8 * v1]);
  return Hasher._finalize()();
}

void sub_10014AB24()
{
  char *v0;

  Hasher._combine(_:)(*(_QWORD *)&aIpkd[8 * *v0]);
}

Swift::Int sub_10014AB58()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(*(_QWORD *)&aIpkd[8 * v1]);
  return Hasher._finalize()();
}

uint64_t *sub_10014ABA0@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (*result == 1684762729)
    v3 = 0;
  else
    v3 = 3;
  if (v2 == 1684762731)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 1684759156)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_10014ABE8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aIpkd[8 * *v1];
}

uint64_t sub_10014AC00(sqlite3_stmt *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  const unsigned __int8 *v18;
  const unsigned __int8 *v19;
  const unsigned __int8 *v20;
  const unsigned __int8 *v21;
  const unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int v69;
  unint64_t v70;
  const unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  const unsigned __int8 *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83[3];
  uint64_t v84;
  uint64_t v85;

  v2 = v1;
  v4 = sub_10009061C(&qword_10026EA20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v80 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v82 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &unk_100275000;
  v14 = (uint64_t)&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier];
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v15(&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier], 1, 1, v10);
  *(_QWORD *)&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version] = 0;
  v16 = sqlite3_column_text(a1, 1);
  if (!v16)
  {
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_10008EA50(v37, (uint64_t)qword_10026EF30);
    v29 = Logger.logObject.getter(v38);
    v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v39))
      goto LABEL_28;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    v41 = "Unable to read identifier";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v29, v39, v41, v40, 2u);
    v36 = v40;
    goto LABEL_27;
  }
  v17 = v16;
  v81 = v11;
  v18 = sqlite3_column_text(a1, 2);
  if (!v18)
  {
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10008EA50(v42, (uint64_t)qword_10026EF30);
    v29 = Logger.logObject.getter(v43);
    v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v39))
      goto LABEL_28;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    v41 = "Unable to read peripheral identifier";
    goto LABEL_26;
  }
  v19 = v18;
  v20 = sqlite3_column_text(a1, 3);
  if (!v20)
  {
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_10008EA50(v44, (uint64_t)qword_10026EF30);
    v29 = Logger.logObject.getter(v45);
    v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v39))
      goto LABEL_28;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    v41 = "Unable to read session Id";
    goto LABEL_26;
  }
  v21 = v20;
  v22 = sqlite3_column_text(a1, 4);
  if (!v22)
  {
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10008EA50(v46, (uint64_t)qword_10026EF30);
    v29 = Logger.logObject.getter(v47);
    v39 = static os_log_type_t.error.getter();
    v13 = &unk_100275000;
    if (!os_log_type_enabled(v29, v39))
      goto LABEL_28;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    v41 = "Unable to read version";
    goto LABEL_26;
  }
  v80 = v22;
  v23 = String.init(cString:)(v19);
  v25 = v24;
  UUID.init(uuidString:)(v23, v24);
  swift_bridgeObjectRelease(v25);
  v26 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v9, 1, v10) == 1)
  {
    sub_10009B2C0((uint64_t)v9, &qword_10026EA20);
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10008EA50(v27, (uint64_t)qword_10026EF30);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    v13 = (_QWORD *)&unk_100275000;
    if (!os_log_type_enabled(v29, v30))
      goto LABEL_28;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v83[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = String.init(cString:)(v19);
    v35 = v34;
    v84 = sub_1000906BC(v33, v34, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Invalid UUID %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v36 = v31;
LABEL_27:
    swift_slowDealloc(v36, -1, -1);
LABEL_28:

    sub_10009B2C0((uint64_t)&v2[v13[194]], &qword_10026EA20);
    v48 = type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry(0);
    swift_deallocPartialClassInstance(v2, v48, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
    return 0;
  }
  v50 = v82;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v82, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v7, v50, v10);
  v15(v7, 0, 1, v10);
  swift_beginAccess(v14, v83, 33, 0);
  sub_1001552D0((uint64_t)v7, v14);
  swift_endAccess(v83);
  *((_QWORD *)v2 + 2) = String.init(cString:)(v17);
  *((_QWORD *)v2 + 3) = v51;
  result = String.init(cString:)(v21);
  v53 = v52;
  v54 = HIBYTE(v52) & 0xF;
  v55 = result & 0xFFFFFFFFFFFFLL;
  if ((v53 & 0x2000000000000000) != 0)
    v56 = v54;
  else
    v56 = result & 0xFFFFFFFFFFFFLL;
  if (!v56)
  {
    swift_bridgeObjectRelease(v53);
    v70 = 0;
    goto LABEL_69;
  }
  if ((v53 & 0x1000000000000000) != 0)
  {
    v58 = (unint64_t)sub_100153290(result, v53, 10);
    v60 = v79;
LABEL_66:
    swift_bridgeObjectRelease(v53);
    if ((v60 & 1) != 0)
      v70 = 0;
    else
      v70 = v58;
LABEL_69:
    v71 = v80;
    v72 = v81;
    *(_QWORD *)&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId] = v70;
    v73 = String.init(cString:)(v71);
    v75 = sub_100148C44(v73, v74, 0xAuLL);
    v77 = v76;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v82, v10);
    if ((v77 & 1) != 0)
      v78 = 0;
    else
      v78 = v75;
    *(_QWORD *)&v2[OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version] = v78;
    return (uint64_t)v2;
  }
  if ((v53 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v57 = (unsigned __int8 *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v57 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v53);
    v58 = (unint64_t)sub_1001538C4(v57, v55, 10);
    v60 = v59 & 1;
    goto LABEL_66;
  }
  v83[0] = result;
  v83[1] = v53 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v54)
    {
      v65 = v54 - 1;
      if (v65)
      {
        v58 = 0;
        v66 = (unsigned __int8 *)v83 + 1;
        while (1)
        {
          v67 = *v66 - 48;
          if (v67 > 9)
            break;
          if (!is_mul_ok(v58, 0xAuLL))
            break;
          v64 = __CFADD__(10 * v58, v67);
          v58 = 10 * v58 + v67;
          if (v64)
            break;
          v60 = 0;
          ++v66;
          if (!--v65)
            goto LABEL_66;
        }
      }
      goto LABEL_65;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v54)
      {
        v58 = 0;
        v68 = v83;
        while (1)
        {
          v69 = *(unsigned __int8 *)v68 - 48;
          if (v69 > 9)
            break;
          if (!is_mul_ok(v58, 0xAuLL))
            break;
          v64 = __CFADD__(10 * v58, v69);
          v58 = 10 * v58 + v69;
          if (v64)
            break;
          v60 = 0;
          v68 = (uint64_t *)((char *)v68 + 1);
          if (!--v54)
            goto LABEL_66;
        }
      }
      goto LABEL_65;
    }
    if (v54)
    {
      v61 = v54 - 1;
      if (v61)
      {
        v58 = 0;
        v62 = (unsigned __int8 *)v83 + 1;
        while (1)
        {
          v63 = *v62 - 48;
          if (v63 > 9)
            break;
          if (!is_mul_ok(v58, 0xAuLL))
            break;
          v64 = 10 * v58 >= v63;
          v58 = 10 * v58 - v63;
          if (!v64)
            break;
          v60 = 0;
          ++v62;
          if (!--v61)
            goto LABEL_66;
        }
      }
LABEL_65:
      v58 = 0;
      v60 = 1;
      goto LABEL_66;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10014B3E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, _QWORD *);
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSString v27;
  sqlite3_stmt *v28;
  int v29;
  BOOL v30;
  NSString v31;
  sqlite3_stmt *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  sqlite3_stmt *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  sqlite3_stmt *v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = sub_10009061C(&qword_10026EA20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v61 - v8;
  v67 = a1;
  v10 = sqlite3_bind_parameter_count(*(sqlite3_stmt **)(a1 + 16));
  v11 = v10;
  v68 = a2[2];
  if (v68 != v10)
  {
    if (qword_10026BBF0 == -1)
      goto LABEL_42;
    goto LABEL_67;
  }
  if (v10 < 1)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_42:
    v44 = type metadata accessor for Logger(0);
    sub_10008EA50(v44, (uint64_t)qword_10026EF30);
    swift_bridgeObjectRetain(a2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(18, -1);
      *(_DWORD *)v48 = 67109376;
      LODWORD(v70) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4, v48 + 4, v48 + 8);
      *(_WORD *)(v48 + 8) = 2048;
      v70 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v48 + 10, v48 + 18);
      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "SQL parameters list (%d) is not the same size as bound values (%ld)", (uint8_t *)v48, 0x12u);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(a2);
    }
    return 0;
  }
  v64 = v7;
  v61 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version;
  v62 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId;
  v12 = v63 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
  v66 = a2 + 4;
  swift_beginAccess(v63 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, &v70, 0, 0);
  v13 = 1;
  v65 = v12;
  while (1)
  {
    v14 = v13;
    if (v13 == v11)
    {
      v13 = 0;
      goto LABEL_8;
    }
    if (v13 == 0x7FFFFFFF)
    {
      __break(1u);
      goto LABEL_66;
    }
    ++v13;
LABEL_8:
    v15 = v14 - 1;
    if (__OFSUB__(v14, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      if (qword_10026BBF0 != -1)
        goto LABEL_69;
      goto LABEL_60;
    }
    if (v15 < 0 || v68 <= v15)
      goto LABEL_58;
    v16 = &v66[2 * v15];
    a2 = (_QWORD *)*v16;
    v17 = v16[1];
    v18 = *v16 == 0x7265687069726570 && v17 == 0xEC00000064496C61;
    if (v18
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7265687069726570, 0xEC00000064496C61, a2, v17, 0) & 1) != 0)
    {
      sub_1000ACE4C(v12, (uint64_t)v9, &qword_10026EA20);
      a2 = (_QWORD *)type metadata accessor for UUID(0);
      v19 = *(a2 - 1);
      v20 = *(uint64_t (**)(char *, uint64_t, _QWORD *))(v19 + 48);
      v21 = v20(v9, 1, a2);
      sub_10009B2C0((uint64_t)v9, &qword_10026EA20);
      if (v21 == 1)
      {
        v22 = 0xE000000000000000;
        goto LABEL_20;
      }
      v23 = v12;
      v24 = (uint64_t)v64;
      sub_1000ACE4C(v23, (uint64_t)v64, &qword_10026EA20);
      v25 = v20((char *)v24, 1, a2);
      if ((_DWORD)v25 != 1)
      {
        UUID.uuidString.getter(v25);
        v22 = v26;
        (*(void (**)(uint64_t, _QWORD *))(v19 + 8))(v24, a2);
LABEL_20:
        v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v22);
        v28 = *(sqlite3_stmt **)(v67 + 16);
        a2 = objc_retainAutorelease(v27);
        v29 = sqlite3_bind_text(v28, v14, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0);
        v12 = v65;
        if (v29)
        {
          if (qword_10026BBF0 != -1)
            swift_once(&qword_10026BBF0, sub_10014A740);
          v49 = type metadata accessor for Logger(0);
          v50 = sub_10008EA50(v49, (uint64_t)qword_10026EF30);
          v51 = Logger.logObject.getter(v50);
          v52 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v51, v52))
            goto LABEL_63;
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          v54 = "Unable to bind peripheral UUID";
          goto LABEL_62;
        }
        goto LABEL_38;
      }
      __break(1u);
LABEL_69:
      swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_60:
      v59 = type metadata accessor for Logger(0);
      v60 = sub_10008EA50(v59, (uint64_t)qword_10026EF30);
      v51 = Logger.logObject.getter(v60);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        v54 = "Unable to bind version";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    v30 = a2 == (_QWORD *)0x696669746E656469 && v17 == 0xEA00000000007265;
    if (v30
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a2, v17, 0) & 1) != 0)
    {
      v31 = String._bridgeToObjectiveC()();
      v32 = *(sqlite3_stmt **)(v67 + 16);
      a2 = objc_retainAutorelease(v31);
      if (sqlite3_bind_text(v32, v14, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0))
      {
        if (qword_10026BBF0 != -1)
          swift_once(&qword_10026BBF0, sub_10014A740);
        v55 = type metadata accessor for Logger(0);
        v56 = sub_10008EA50(v55, (uint64_t)qword_10026EF30);
        v51 = Logger.logObject.getter(v56);
        v52 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v51, v52))
          goto LABEL_63;
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        v54 = "Unable to bind identifier";
LABEL_62:
        _os_log_impl((void *)&_mh_execute_header, v51, v52, v54, v53, 2u);
        swift_slowDealloc(v53, -1, -1);

        return 0;
      }
      goto LABEL_38;
    }
    if (a2 == (_QWORD *)0x496E6F6973736573 && v17 == 0xE900000000000064
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x496E6F6973736573, 0xE900000000000064, a2, v17, 0) & 1) != 0)
    {
      break;
    }
    if ((a2 != (_QWORD *)0x6E6F6973726576 || v17 != 0xE700000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a2, v17, 0) & 1) == 0)
    {
      goto LABEL_39;
    }
    v69 = *(_QWORD *)(v63 + v61);
    v38 = sub_1001553EC();
    String.init<A>(_:radix:uppercase:)(&v69, 10, 0, &type metadata for UInt, v38);
    v40 = v39;
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    v42 = *(sqlite3_stmt **)(v67 + 16);
    a2 = objc_retainAutorelease(v41);
    if (sqlite3_bind_text(v42, v14, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0))
      goto LABEL_59;
LABEL_38:

LABEL_39:
    if (v14 == v11)
      return 1;
  }
  v69 = *(_QWORD *)(v63 + v62);
  v33 = sub_10009E400();
  String.init<A>(_:radix:uppercase:)(&v69, 10, 0, &type metadata for UInt64, v33);
  v35 = v34;
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  v37 = *(sqlite3_stmt **)(v67 + 16);
  a2 = objc_retainAutorelease(v36);
  if (!sqlite3_bind_text(v37, v14, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0))
    goto LABEL_38;
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v57 = type metadata accessor for Logger(0);
  v58 = sub_10008EA50(v57, (uint64_t)qword_10026EF30);
  v51 = Logger.logObject.getter(v58);
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    v54 = "Unable to bind sessionId";
    goto LABEL_62;
  }
LABEL_63:

  return 0;
}

_QWORD *sub_10014BC7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *result;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v3 = sub_10009061C(&qword_10026EA20);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v43 = (char *)&v37 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v38 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version;
    v40 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId;
    v41 = v5;
    v8 = v1 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
    swift_bridgeObjectRetain(a1);
    swift_beginAccess(v8, v46, 0, 0);
    v39 = a1;
    v9 = (_QWORD *)(a1 + 40);
    v10 = _swiftEmptyArrayStorage;
    v44 = v8;
    v42 = v1;
    v11 = (uint64_t)v43;
    while (1)
    {
      v13 = *(v9 - 1);
      v12 = *v9;
      v14 = v13 == 0x696669746E656469 && v12 == 0xEA00000000007265;
      if (v14
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, *(v9 - 1), *v9, 0) & 1) != 0)
      {
        break;
      }
      v21 = v13 == 0x7265687069726570 && v12 == 0xEC00000064496C61;
      if (!v21
        && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7265687069726570, 0xEC00000064496C61, v13, v12, 0) & 1) == 0)
      {
        if (v13 == 0x496E6F6973736573 && v12 == 0xE900000000000064
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x496E6F6973736573, 0xE900000000000064, v13, v12, 0) & 1) != 0)
        {
          v45 = *(_QWORD *)(v1 + v40);
          v34 = sub_10009E400();
          v35 = &type metadata for UInt64;
        }
        else
        {
          if ((v13 != 0x6E6F6973726576 || v12 != 0xE700000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, v13, v12, 0) & 1) == 0)
          {
            goto LABEL_15;
          }
          v45 = *(_QWORD *)(v1 + v38);
          v34 = sub_1001553EC();
          v35 = &type metadata for UInt;
        }
        v15 = String.init<A>(_:radix:uppercase:)(&v45, 10, 0, v35, v34);
        v16 = v36;
        goto LABEL_9;
      }
      sub_1000ACE4C(v8, v11, &qword_10026EA20);
      v22 = v8;
      v23 = type metadata accessor for UUID(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
      v26 = v25(v11, 1, v23);
      sub_10009B2C0(v11, &qword_10026EA20);
      if (v26 == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_1000E9698(0, v10[2] + 1, 1, v10);
        v1 = v42;
        v28 = v10[2];
        v27 = v10[3];
        if (v28 >= v27 >> 1)
          v10 = sub_1000E9698((_QWORD *)(v27 > 1), v28 + 1, 1, v10);
        v10[2] = v28 + 1;
        v29 = &v10[2 * v28];
        v29[4] = 0;
        v20 = v29 + 4;
        v16 = 0xE000000000000000;
        goto LABEL_14;
      }
      v30 = v22;
      v31 = v41;
      sub_1000ACE4C(v30, v41, &qword_10026EA20);
      result = (_QWORD *)v25(v31, 1, v23);
      if ((_DWORD)result == 1)
      {
        __break(1u);
        return result;
      }
      v15 = UUID.uuidString.getter(result);
      v16 = v33;
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v31, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_1000E9698(0, v10[2] + 1, 1, v10);
      v1 = v42;
LABEL_11:
      v18 = v10[2];
      v17 = v10[3];
      if (v18 >= v17 >> 1)
        v10 = sub_1000E9698((_QWORD *)(v17 > 1), v18 + 1, 1, v10);
      v10[2] = v18 + 1;
      v19 = &v10[2 * v18];
      v19[4] = v15;
      v20 = v19 + 4;
LABEL_14:
      v20[1] = v16;
      v8 = v44;
LABEL_15:
      v9 += 2;
      if (!--v7)
      {
        swift_bridgeObjectRelease(v39);
        return v10;
      }
    }
    v15 = *(_QWORD *)(v1 + 16);
    v16 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v16);
LABEL_9:
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1000E9698(0, v10[2] + 1, 1, v10);
    goto LABEL_11;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10014C11C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_10009B2C0((uint64_t)v0 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, &qword_10026EA20);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10014C15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_OWORD *)(v2 + 40) = xmmword_1001DE7B0;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0xE000000000000000;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0xE000000000000000;
  *(_OWORD *)(v2 + 96) = xmmword_1001DE7B0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0xE000000000000000;
  *(_WORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = objc_msgSend((id)objc_opt_self(HAPPairingIdentity, a2), "pairingIdentity");
  return v2;
}

void sub_10014C1C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t inited;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  Class v62;
  id v63;
  id v64;
  id v65;
  NSString v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  Class isa;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[152];
  __int128 v111;
  __int128 v112;
  __int128 v113;

  v2 = v1;
  *(_OWORD *)(v1 + 40) = xmmword_1001DE7B0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0xE000000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  *(_OWORD *)(v1 + 96) = xmmword_1001DE7B0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0xE000000000000000;
  *(_WORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  v6 = v5;
  if (!*(_QWORD *)(a1 + 16) || (v7 = sub_100145264(v4, v5), (v8 & 1) == 0))
  {
    v112 = 0u;
    v113 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_9;
  }
  sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v112);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v113 + 1))
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
LABEL_10:
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10008EA50(v15, (uint64_t)qword_10026EF30);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v17, v18))
      goto LABEL_15;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "Unable to parse key chain account";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 2u);
    swift_slowDealloc(v19, -1, -1);
LABEL_15:

    goto LABEL_16;
  }
  if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    goto LABEL_10;
  }
  v9 = v111;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  v12 = v11;
  if (*(_QWORD *)(a1 + 16) && (v13 = sub_100145264(v10, v11), (v14 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v12);
  if (!*((_QWORD *)&v113 + 1))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    swift_bridgeObjectRelease(a1);
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
LABEL_26:
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10008EA50(v30, (uint64_t)qword_10026EF30);
    v17 = Logger.logObject.getter(v31);
    v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v17, v18))
      goto LABEL_15;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "Unable to parse key chain value";
    goto LABEL_14;
  }
  if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    swift_bridgeObjectRelease(a1);
    goto LABEL_26;
  }
  v24 = v111;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrType);
  v27 = v26;
  if (*(_QWORD *)(a1 + 16) && (v28 = sub_100145264(v25, v26), (v29 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v27);
  if (!*((_QWORD *)&v113 + 1))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    swift_bridgeObjectRelease(a1);
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
LABEL_39:
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10008EA50(v35, (uint64_t)qword_10026EF30);
    v17 = Logger.logObject.getter(v36);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v37, "Unable to parse key chain item type", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    v40 = *((_QWORD *)&v24 + 1);
    v39 = v24;
LABEL_44:
    sub_10009B2FC(v39, v40);
    goto LABEL_15;
  }
  v32 = swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    swift_bridgeObjectRelease(a1);
    goto LABEL_39;
  }
  switch((_QWORD)v111)
  {
    case 0x646B6274:
      v109 = v24;
      v34 = 2;
      break;
    case 0x646B7069:
      v109 = v24;
      v34 = 0;
      break;
    case 0x646B706BLL:
      v109 = v24;
      v34 = 1;
      break;
    default:
      swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
      swift_bridgeObjectRelease(a1);
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v49 = type metadata accessor for Logger(0);
      v50 = sub_10008EA50(v49, (uint64_t)qword_10026EF30);
      v17 = Logger.logObject.getter(v50);
      v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v52 = 134217984;
        *(_QWORD *)&v112 = *((_QWORD *)&v24 + 1);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v52 + 4, v52 + 12);
        _os_log_impl((void *)&_mh_execute_header, v17, v51, "Unable to parse key chain item accessory key type: %ld", v52, 0xCu);
        swift_slowDealloc(v52, -1, -1);
      }
      v40 = *((_QWORD *)&v24 + 1);
      v39 = v24;
      goto LABEL_44;
  }
  v41 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(v32, v33);
  inited = swift_initStackObject(v41, v110);
  swift_bridgeObjectRetain(*((_QWORD *)&v9 + 1));
  sub_10014C15C(v9, *((uint64_t *)&v9 + 1));
  *(_BYTE *)(inited + 56) = v34;
  if (!v34)
  {
    v108 = inited;
    sub_10014A7B4(v109, *((uint64_t *)&v24 + 1));
    v54 = v53;
    if (v53[2])
    {
      v56 = v53[4];
      v55 = v53[5];
      v57 = objc_allocWithZone((Class)HMFPairingKey);
      sub_10009B27C(v56, v55);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v58 = objc_msgSend(v57, "initWithPairingKeyData:", isa);
      sub_10009B2FC(v56, v55);

      v107 = v58;
      if (v58)
      {
        if (v54[2] < 2uLL)
        {
          __break(1u);
          return;
        }
        v59 = v54[6];
        v60 = v54[7];
        sub_10009B27C(v59, v60);
        swift_bridgeObjectRelease(v54);
        v61 = objc_allocWithZone((Class)HMFPairingKey);
        v62 = Data._bridgeToObjectiveC()().super.isa;
        v63 = objc_msgSend(v61, "initWithPairingKeyData:", v62);
        sub_10009B2FC(v59, v60);

        if (v63)
        {
          v64 = objc_allocWithZone((Class)HAPPairingIdentity);
          v65 = v63;
          v66 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
          v67 = objc_msgSend(v64, "initWithIdentifier:publicKey:privateKey:", v66, v107, v65);

          inited = v108;
          v68 = *(void **)(v108 + 32);
          *(_QWORD *)(v108 + 32) = v67;

          goto LABEL_62;
        }
        swift_release(v108);

      }
      else
      {
        swift_release(v108);
        swift_bridgeObjectRelease(v54);
      }
      swift_bridgeObjectRelease(a1);
      v104 = v109;
      v105 = *((_QWORD *)&v24 + 1);
    }
    else
    {
      swift_release(v108);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(a1);
      v104 = v109;
      v105 = *((_QWORD *)&v24 + 1);
    }
    sub_10009B2FC(v104, v105);
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    goto LABEL_16;
  }
  if (v34 == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    sub_10014A7B4(v109, *((uint64_t *)&v24 + 1));
    v44 = v43;
    if (v43[2])
    {
      v45 = v43[4];
      v46 = v43[5];
      sub_10009B27C(v45, v46);
      swift_bridgeObjectRelease(v44);
      v47 = *(_QWORD *)(inited + 40);
      v48 = *(_QWORD *)(inited + 48);
      *(_QWORD *)(inited + 40) = v45;
      *(_QWORD *)(inited + 48) = v46;
      sub_10009B2FC(v47, v48);
      goto LABEL_62;
    }
    swift_release(inited);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(a1);
    sub_10009B2FC(v109, *((unint64_t *)&v24 + 1));
LABEL_16:
    sub_10009B2FC(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 88));
    sub_10009B2FC(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 120));
    v21 = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 144));
    v23 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(v21, v22);
    swift_deallocPartialClassInstance(v2, v23, 152, 7);
    return;
  }
  swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
LABEL_62:
  v69 = *(_QWORD *)(inited + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(inited + 16);
  *(_QWORD *)(v2 + 24) = v69;
  v70 = inited;
  v71 = *(void **)(inited + 32);
  *(_QWORD *)(v2 + 32) = v71;
  v72 = *(_QWORD *)(v70 + 40);
  v73 = *(_QWORD *)(v70 + 48);
  v74 = *(_QWORD *)(v2 + 40);
  v75 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = v72;
  *(_QWORD *)(v2 + 48) = v73;
  swift_bridgeObjectRetain(v69);
  v76 = v71;
  sub_10009B27C(v72, v73);
  sub_10009B2FC(v74, v75);
  *(_BYTE *)(v2 + 56) = *(_BYTE *)(v70 + 56);
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
  v79 = v78;
  if (*(_QWORD *)(a1 + 16) && (v80 = sub_100145264(v77, v78), (v81 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v80, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v79);
  if (*((_QWORD *)&v113 + 1))
  {
    if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v82 = *((_QWORD *)&v111 + 1);
      v83 = *(_QWORD *)(v2 + 72);
      *(_QWORD *)(v2 + 64) = v111;
      *(_QWORD *)(v2 + 72) = v82;
      swift_bridgeObjectRelease(v83);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
  }
  v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
  v86 = v85;
  if (*(_QWORD *)(a1 + 16) && (v87 = sub_100145264(v84, v85), (v88 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v87, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v86);
  if (*((_QWORD *)&v113 + 1))
  {
    if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v89 = *((_QWORD *)&v111 + 1);
      v90 = *(_QWORD *)(v2 + 88);
      *(_QWORD *)(v2 + 80) = v111;
      *(_QWORD *)(v2 + 88) = v89;
      swift_bridgeObjectRelease(v90);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
  }
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValuePersistentRef);
  v93 = v92;
  if (*(_QWORD *)(a1 + 16) && (v94 = sub_100145264(v91, v92), (v95 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v94, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v93);
  if (*((_QWORD *)&v113 + 1))
  {
    if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v96 = *(_QWORD *)(v2 + 96);
      v97 = *(_QWORD *)(v2 + 104);
      *(_OWORD *)(v2 + 96) = v111;
      sub_10009B2FC(v96, v97);
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
  }
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrGeneric);
  v100 = v99;
  if (*(_QWORD *)(a1 + 16) && (v101 = sub_100145264(v98, v99), (v102 & 1) != 0))
  {
    sub_100090EA8(*(_QWORD *)(a1 + 56) + 32 * v101, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(a1);
  if (*((_QWORD *)&v113 + 1))
  {
    if ((swift_dynamicCast(&v111, &v112, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v103 = *((_QWORD *)&v111 + 1);
      sub_10014CED8(v111, *((unint64_t *)&v111 + 1));
      sub_10009B2FC(v109, *((unint64_t *)&v24 + 1));
      swift_release(v70);
      swift_bridgeObjectRelease(v103);
    }
    else
    {
      sub_10009B2FC(v109, *((unint64_t *)&v24 + 1));
      swift_release(v70);
    }
  }
  else
  {
    sub_10009B2FC(v109, *((unint64_t *)&v24 + 1));
    swift_release(v70);
    sub_10009B2C0((uint64_t)&v112, &qword_10026E5F0);
  }
}

uint64_t sub_10014CD88()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;

  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v15);
  v1._countAndFlagsBits = 43;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001DE690;
  v4 = *(_WORD *)(v0 + 128);
  *(_QWORD *)(v3 + 56) = &type metadata for UInt16;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UInt16;
  *(_WORD *)(v3 + 32) = v4;
  v5 = String.init(format:_:)(1479815205, 0xE400000000000000, v3);
  v7 = v6;
  swift_bridgeObjectRetain(v15);
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v7);
  result = v14;
  v10 = *(void **)(v0 + 144);
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRetain(v15);
    v12._countAndFlagsBits = 43;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRetain(v15);
    v13._countAndFlagsBits = v11;
    v13._object = v10;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v10);
    return v14;
  }
  return result;
}

uint64_t sub_10014CED8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[2];

  v5 = sub_10009061C(&qword_10026EA20);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v108 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v108 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v22 = (char *)&v108 - v21;
  v23 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v23 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v23)
    return 0;
  v109 = v19;
  v110 = v20;
  v111 = v2;
  v112 = v18;
  v113[0] = 43;
  v113[1] = 0xE100000000000000;
  __chkstk_darwin(v18);
  *(&v108 - 2) = (uint64_t)v113;
  swift_bridgeObjectRetain(a2);
  v24 = (_QWORD *)sub_100152AB0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10015535C, (uint64_t)(&v108 - 4), a1, a2);
  v25 = v24;
  v26 = v24[2];
  if (!v26)
    goto LABEL_35;
  if (v26 == 2)
  {
    v42 = v24[4];
    v43 = v24[5];
    v44 = v24[6];
    v45 = v24[7];
    swift_bridgeObjectRetain(v45);
    v46 = Substring.distance(from:to:)(v42, v43, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v45);
    if (v46 != 36)
      goto LABEL_35;
    v47 = v25[4];
    v48 = v25[5];
    v49 = v25[6];
    v50 = v25[7];
    swift_bridgeObjectRetain(v50);
    v51 = static String._fromSubstring(_:)(v47, v48, v49, v50);
    v53 = v52;
    swift_bridgeObjectRelease(v50);
    UUID.init(uuidString:)(v51, v53);
    swift_bridgeObjectRelease(v53);
    v54 = v112;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v112) == 1)
    {
      swift_bridgeObjectRelease(v25);
      v41 = (uint64_t)v11;
      goto LABEL_16;
    }
    v79 = v110;
    v80 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(v110, v11, v54);
    v81 = UUID.uuidString.getter(v80);
    v69 = v111;
    v82 = *(_QWORD *)(v111 + 120);
    *(_QWORD *)(v111 + 112) = v81;
    *(_QWORD *)(v69 + 120) = v83;
    swift_bridgeObjectRelease(v82);
    if (v25[2] < 2uLL)
    {
      __break(1u);
    }
    else
    {
      v84 = v25[8];
      v85 = v25[9];
      v86 = v25[10];
      v79 = v25[11];
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v25);
      if ((v85 ^ v84) >> 14)
      {
        v87 = sub_100153B40(v84, v85, v86, v79, 16);
        if ((v87 & 0x1000000) != 0)
          v87 = sub_1001531A4(v84, v85, v86, v79, 16);
        v70 = v87;
        swift_bridgeObjectRelease(v79);
        if ((v70 & 0x10000) == 0)
        {
          (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v110, v112);
LABEL_29:
          *(_WORD *)(v69 + 128) = v70;
          return 1;
        }
LABEL_47:
        (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v110, v112);
        return 0;
      }
    }
    swift_bridgeObjectRelease(v79);
    goto LABEL_47;
  }
  v27 = v15;
  if (v26 != 1)
  {
    v55 = v24[4];
    v56 = v24[5];
    v57 = v24[6];
    v58 = v24[7];
    swift_bridgeObjectRetain(v58);
    v59 = Substring.distance(from:to:)(v55, v56, v55, v56, v57, v58);
    swift_bridgeObjectRelease(v58);
    if (v59 == 36)
    {
      v60 = v25[4];
      v61 = v25[5];
      v62 = v25[6];
      v63 = v25[7];
      swift_bridgeObjectRetain(v63);
      v64 = static String._fromSubstring(_:)(v60, v61, v62, v63);
      v66 = v65;
      swift_bridgeObjectRelease(v63);
      UUID.init(uuidString:)(v64, v66);
      swift_bridgeObjectRelease(v66);
      v67 = v112;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v112) == 1)
      {
        swift_bridgeObjectRelease(v25);
        v41 = (uint64_t)v8;
        goto LABEL_16;
      }
      v88 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v109, v8, v67);
      v89 = UUID.uuidString.getter(v88);
      v90 = v111;
      v91 = *(_QWORD *)(v111 + 120);
      *(_QWORD *)(v111 + 112) = v89;
      *(_QWORD *)(v90 + 120) = v92;
      result = swift_bridgeObjectRelease(v91);
      if (v25[2] < 2uLL)
      {
        __break(1u);
      }
      else
      {
        v94 = v25[8];
        v95 = v25[9];
        if ((v95 ^ (unint64_t)v94) < 0x4000)
        {
LABEL_34:
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v109, v112);
          goto LABEL_35;
        }
        v97 = v25[10];
        v96 = v25[11];
        result = sub_100153B40(v25[8], v25[9], v97, v96, 16);
        if ((result & 0x1000000) != 0)
        {
          swift_bridgeObjectRetain(v96);
          v98 = sub_1001531A4(v94, v95, v97, v96, 16);
          result = swift_bridgeObjectRelease(v96);
          if ((v98 & 0x10000) != 0)
            goto LABEL_34;
        }
        else
        {
          LOWORD(v98) = result;
          if ((result & 0x10000) != 0)
            goto LABEL_34;
        }
        *(_WORD *)(v90 + 128) = v98;
        if (v25[2] >= 3uLL)
        {
          v100 = v90;
          v101 = v25[12];
          v102 = v25[13];
          v103 = v25[14];
          v104 = v25[15];
          swift_bridgeObjectRetain(v104);
          swift_bridgeObjectRelease(v25);
          v105 = static String._fromSubstring(_:)(v101, v102, v103, v104);
          v107 = v106;
          swift_bridgeObjectRelease(v104);
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v109, v112);
          v78 = *(_QWORD *)(v100 + 144);
          *(_QWORD *)(v100 + 136) = v105;
          *(_QWORD *)(v100 + 144) = v107;
          goto LABEL_42;
        }
      }
      __break(1u);
      return result;
    }
LABEL_35:
    v99 = v25;
    goto LABEL_36;
  }
  v28 = v24[4];
  v29 = v24[5];
  v30 = v24[6];
  v31 = v24[7];
  swift_bridgeObjectRetain(v31);
  v32 = Substring.distance(from:to:)(v28, v29, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v31);
  v33 = v25[4];
  v34 = v25[5];
  v36 = v25[6];
  v35 = v25[7];
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v25);
  if (v32 != 36)
  {
    if ((v34 ^ v33) >> 14)
    {
      v68 = sub_100153B40(v33, v34, v36, v35, 16);
      v69 = v111;
      if ((v68 & 0x1000000) != 0)
        v68 = sub_1001531A4(v33, v34, v36, v35, 16);
      v70 = v68;
      swift_bridgeObjectRelease(v35);
      if ((v70 & 0x10000) != 0)
        return 0;
      goto LABEL_29;
    }
    v99 = (_QWORD *)v35;
LABEL_36:
    swift_bridgeObjectRelease(v99);
    return 0;
  }
  v37 = static String._fromSubstring(_:)(v33, v34, v36, v35);
  v39 = v38;
  swift_bridgeObjectRelease(v35);
  UUID.init(uuidString:)(v37, v39);
  swift_bridgeObjectRelease(v39);
  v40 = v112;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v13, 1, v112) != 1)
  {
    v71 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v22, v13, v40);
    v72 = UUID.uuidString.getter(v71);
    v73 = v40;
    v74 = v72;
    v76 = v75;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v73);
    v77 = v111;
    v78 = *(_QWORD *)(v111 + 120);
    *(_QWORD *)(v111 + 112) = v74;
    *(_QWORD *)(v77 + 120) = v76;
LABEL_42:
    swift_bridgeObjectRelease(v78);
    return 1;
  }
  v41 = (uint64_t)v13;
LABEL_16:
  sub_10009B2C0(v41, &qword_10026EA20);
  return 0;
}

uint64_t sub_10014D5AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_10009B2FC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  sub_10009B2FC(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  return v0;
}

uint64_t sub_10014D600()
{
  uint64_t v0;

  sub_10014D5AC();
  return swift_deallocClassInstance(v0, 152, 7);
}

_QWORD *sub_10014D620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10008EA50(v6, (uint64_t)qword_10026EF30);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Creating new controller key-pair!", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = UUID.init()(v11);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  v16 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(v16, v17);
  v19 = (_QWORD *)swift_allocObject(v18, 152, 7);
  sub_10014C15C(v13, v15);
  v20 = v19[9];
  v19[8] = 0xD000000000000018;
  v19[9] = 0x80000001002015C0;
  swift_bridgeObjectRelease(v20);
  v21 = v19[11];
  v19[10] = 0xD00000000000002FLL;
  v19[11] = 0x80000001002015E0;
  swift_bridgeObjectRelease(v21);
  if ((sub_10014E730((uint64_t)v19, 0, 0) & 1) != 0)
  {
    v22 = v19[3];
    v23 = (_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
    v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController + 8);
    *v23 = v19[2];
    v23[1] = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    v25 = sub_1000ABB30();
    v26 = swift_allocError(&type metadata for DockdError, v25, 0, 0);
    *v27 = 3;
    swift_willThrow(v26);
    swift_release(v19);
  }
  return v19;
}

uint64_t sub_10014D850(const void *a1, const void *a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const __CFString *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  const __CFDictionary *isa;
  OSStatus v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  CFTypeRef result[4];
  _BYTE v81[368];

  v7 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v7, v81);
  *(_OWORD *)(inited + 16) = xmmword_1001E0120;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v9;
  type metadata accessor for CFString(0);
  v11 = v10;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  *(_QWORD *)(inited + 88) = v12;
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup);
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup + 8);
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 104) = v14;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrType);
  *(_QWORD *)(inited + 136) = v15;
  v16 = *(_QWORD *)&aIpkd[8 * a3];
  v17 = objc_allocWithZone((Class)NSNumber);
  v18 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain(v14);
  v19 = objc_msgSend(v17, "initWithInteger:", v16);
  *(_QWORD *)(inited + 168) = sub_10009B64C(0, v20);
  *(_QWORD *)(inited + 144) = v19;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  *(_QWORD *)(inited + 184) = v21;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  v22 = 1;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(_QWORD *)(inited + 232) = v23;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnPersistentRef);
  *(_QWORD *)(inited + 280) = v24;
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = 1;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecMatchLimit);
  *(_QWORD *)(inited + 328) = v25;
  *(_QWORD *)(inited + 360) = v11;
  *(_QWORD *)(inited + 336) = kSecMatchLimitAll;
  v26 = (id)kSecMatchLimitAll;
  v27 = sub_1001B0FB8(inited);
  if (a2)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
    v22 = v29;
    result[3] = &type metadata for String;
    result[0] = a1;
    result[1] = a2;
    sub_1000E6004(result, v79);
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    v78 = v27;
    sub_1001BA88C(v79, v28, v22, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  result[0] = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v32 = SecItemCopyMatching(isa, result);

  v33 = result[0];
  v34 = (uint64_t)_swiftEmptyArrayStorage;
  if (!v32)
  {
    if (result[0])
    {
      *(CFTypeRef *)&v79[0] = result[0];
      swift_unknownObjectRetain(result[0]);
      v35 = sub_10009061C(&qword_10026EDA0);
      if (swift_dynamicCast(&v78, v79, (char *)&type metadata for Swift.AnyObject + 8, v35, 6))
      {
        v36 = v78;
        if (qword_10026BBF0 != -1)
          swift_once(&qword_10026BBF0, sub_10014A740);
        v37 = type metadata accessor for Logger(0);
        v38 = sub_10008EA50(v37, (uint64_t)qword_10026EF30);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Found single keychain result for query.", v41, 2u);
          swift_slowDealloc(v41, -1, -1);
        }

        v44 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(v42, v43);
        swift_allocObject(v44, 152, 7);
        sub_10014C1C4(v36);
        if (v45)
        {
          v46 = v45;
          v47 = sub_10009061C(&qword_10026C340);
          v48 = swift_allocObject(v47, 40, 7);
          *(_OWORD *)(v48 + 16) = xmmword_1001DE6A0;
          *(_QWORD *)(v48 + 32) = v46;
          *(_QWORD *)&v79[0] = v48;
          specialized Array._endMutation()(v48);
LABEL_41:
          v34 = *(_QWORD *)&v79[0];
          v33 = result[0];
          goto LABEL_42;
        }
        goto LABEL_25;
      }
      if (result[0])
      {
        *(CFTypeRef *)&v79[0] = result[0];
        swift_unknownObjectRetain(result[0]);
        v49 = sub_10009061C((uint64_t *)&unk_10026F380);
        if ((swift_dynamicCast(&v78, v79, (char *)&type metadata for Swift.AnyObject + 8, v49, 6) & 1) != 0)
        {
          v50 = v78;
          if (qword_10026BBF0 != -1)
            swift_once(&qword_10026BBF0, sub_10014A740);
          v51 = type metadata accessor for Logger(0);
          sub_10008EA50(v51, (uint64_t)qword_10026EF30);
          v52 = swift_bridgeObjectRetain_n(v50, 2);
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.info.getter();
          v55 = (unint64_t)v50 >> 62;
          if (!os_log_type_enabled(v53, v54))
          {

            swift_bridgeObjectRelease_n(v50, 2);
            goto LABEL_27;
          }
          v22 = swift_slowAlloc(12, -1);
          *(_DWORD *)v22 = 134217984;
          if (v55)
            goto LABEL_49;
          v56 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
          while (1)
          {
            swift_bridgeObjectRelease(v50);
            *(_QWORD *)&v79[0] = v56;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, (char *)v79 + 8, v22 + 4, v22 + 12);
            swift_bridgeObjectRelease(v50);
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Found keychain results for query: %ld", (uint8_t *)v22, 0xCu);
            swift_slowDealloc(v22, -1, -1);

LABEL_27:
            *(_QWORD *)&v79[0] = v34;
            if (v55)
            {
              if (v50 < 0)
                v53 = v50;
              else
                v53 = (v50 & 0xFFFFFFFFFFFFFF8);
              swift_bridgeObjectRetain(v50);
              v34 = _CocoaArrayWrapper.endIndex.getter(v53);
              swift_bridgeObjectRelease(v50);
              if (!v34)
              {
LABEL_47:
                swift_bridgeObjectRelease(v50);
                v34 = (uint64_t)_swiftEmptyArrayStorage;
                v33 = result[0];
                goto LABEL_42;
              }
            }
            else
            {
              v34 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (!v34)
                goto LABEL_47;
            }
            if (v34 >= 1)
              break;
            __break(1u);
LABEL_49:
            if (v50 < 0)
              v76 = v50;
            else
              v76 = v50 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v50);
            v56 = _CocoaArrayWrapper.endIndex.getter(v76);
            swift_bridgeObjectRelease(v50);
          }
          for (i = 0; i != v34; ++i)
          {
            if ((v50 & 0xC000000000000001) != 0)
            {
              v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v50);
            }
            else
            {
              v64 = *(_QWORD *)(v50 + 8 * i + 32);
              swift_unknownObjectRetain(v64);
            }
            v78 = v64;
            swift_unknownObjectRetain(v64);
            v65 = sub_10009061C(&qword_10026EDA0);
            v66 = swift_dynamicCast(&v77, &v78, (char *)&type metadata for Swift.AnyObject + 8, v65, 6);
            if ((v66 & 1) != 0)
            {
              v68 = v77;
              v69 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(v66, v67);
              swift_allocObject(v69, 152, 7);
              sub_10014C1C4(v68);
              if (v70)
              {
                v71 = v70;
                v72 = swift_retain(v70);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
                v73 = *(_QWORD *)((*(_QWORD *)&v79[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
                v74 = *(_QWORD *)((*(_QWORD *)&v79[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v73 >= v74 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v73 + 1, 1);
                v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()(v63);
                swift_release(v71);
              }
            }
            swift_unknownObjectRelease(v64);
          }
          swift_bridgeObjectRelease(v50);
          goto LABEL_41;
        }
      }
    }
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_10008EA50(v57, (uint64_t)qword_10026EF30);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Could not find any keychain results for query.", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

LABEL_25:
    v33 = result[0];
    v34 = (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_42:
  swift_unknownObjectRelease(v33);
  return v34;
}

uint64_t sub_10014E028(uint64_t a1, char a2)
{
  uint64_t v2;
  const void *v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const __CFDictionary *isa;
  const __CFDictionary *v26;
  OSStatus v27;
  CFStringRef v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  _BYTE v58[80];
  _BYTE v59[88];

  v5 = *(const void **)(a1 + 16);
  v6 = *(const void **)(a1 + 24);
  swift_bridgeObjectRetain(v6);
  v7 = sub_10014D850(v5, v6, a2 & 1);
  swift_bridgeObjectRelease(v6);
  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  if (v7 < 0)
    v52 = v7;
  else
    v52 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease(v7);
  if (!v8)
    goto LABEL_47;
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_51:
      swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_27:
      v41 = type metadata accessor for Logger(0);
      sub_10008EA50(v41, (uint64_t)qword_10026EF30);
      swift_bridgeObjectRetain(v6);
      v42 = swift_retain_n(a1, 2);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v53 = v2;
        v45 = swift_slowAlloc(32, -1);
        v54 = swift_slowAlloc(96, -1);
        v55 = v54;
        *(_DWORD *)v45 = 136315650;
        if ((a2 & 1) != 0)
          v46 = 1919247728;
        else
          v46 = 0x676E6972696170;
        if ((a2 & 1) != 0)
          v47 = 0xE400000000000000;
        else
          v47 = 0xE700000000000000;
        v57 = sub_1000906BC(v46, v47, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v45 + 12) = 2080;
        v49 = *(_QWORD *)(a1 + 16);
        v48 = *(_QWORD *)(a1 + 24);
        swift_bridgeObjectRetain(v48);
        v57 = sub_1000906BC(v49, v48, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v45 + 14, v45 + 22);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v48);
        *(_WORD *)(v45 + 22) = 2080;
        if (v6)
          v50 = v53;
        else
          v50 = 0x206E776F6E6B6E55;
        if (v6)
          v51 = (unint64_t)v6;
        else
          v51 = 0xED0000726F727245;
        swift_bridgeObjectRetain(v6);
        v57 = sub_1000906BC(v50, v51, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v45 + 24, v45 + 32);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to update %s keychain item for identfier %s: %s", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v45, -1, -1);
        swift_release(v8);

      }
      else
      {

        swift_release(v8);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_release_n(a1, 2);
      }
      return 0;
    }
    v8 = *(_QWORD **)(v7 + 32);
    swift_retain(v8);
  }
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = v8[2];
  v12 = v8[3];
  v13 = v9 == v11 && v10 == v12;
  if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0) & 1) == 0)
  {
    swift_release(v8);
    return 0;
  }
  v14 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v14, v59);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValuePersistentRef);
  *(_QWORD *)(inited + 40) = v16;
  v17 = v8[12];
  v18 = v8[13];
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v18;
  sub_10009B27C(v17, v18);
  v19 = sub_1001B0FB8(inited);
  v20 = swift_initStackObject(v14, v58);
  *(_OWORD *)(v20 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v20 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(v20 + 40) = v21;
  v22 = sub_100154118(a1, a2 & 1);
  *(_QWORD *)(v20 + 72) = &type metadata for Data;
  *(_QWORD *)(v20 + 48) = v22;
  *(_QWORD *)(v20 + 56) = v23;
  v24 = sub_1001B0FB8(v20);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v27 = SecItemUpdate(isa, v26);

  if (v27)
  {
    v28 = SecCopyErrorMessageString(v27, 0);
    if (v28)
    {
      v29 = (__CFString *)v28;
      v55 = 0;
      v56 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)(v28, &v55);

      v2 = v55;
      v6 = v56;
    }
    else
    {
      v2 = 0;
      v6 = 0;
    }
    if (qword_10026BBF0 == -1)
      goto LABEL_27;
    goto LABEL_51;
  }
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v30 = type metadata accessor for Logger(0);
  sub_10008EA50(v30, (uint64_t)qword_10026EF30);
  v31 = swift_retain_n(a1, 4);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v55 = v35;
    *(_DWORD *)v34 = 136315394;
    if (*(_BYTE *)(a1 + 56))
      v36 = 1919247728;
    else
      v36 = 0x676E6972696170;
    if (*(_BYTE *)(a1 + 56))
      v37 = 0xE400000000000000;
    else
      v37 = 0xE700000000000000;
    v57 = sub_1000906BC(v36, v37, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v34 + 4, v34 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v34 + 12) = 2080;
    v38 = *(_QWORD *)(a1 + 16);
    v39 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v39);
    v57 = sub_1000906BC(v38, v39, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v34 + 14, v34 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfully updated %s keychain item for identfier %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
    swift_release(v8);

    return 1;
  }
  else
  {

    swift_release_n(a1, 4);
    swift_release(v8);
    return 1;
  }
}

uint64_t sub_10014E730(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const __CFString *v19;
  const __CFString *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  const __CFDictionary *isa;
  OSStatus v42;
  char v43;
  CFStringRef v44;
  __CFString *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v72;
  _OWORD v73[2];
  __int128 v74;
  void *v75;
  char v76[424];

  v4 = v3;
  v7 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v7, v76);
  *(_OWORD *)(inited + 16) = xmmword_1001DE7C0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v9;
  type metadata accessor for CFString(0);
  v11 = v10;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  *(_QWORD *)(inited + 88) = v12;
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup);
  v14 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup + 8);
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 104) = v14;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(_QWORD *)(inited + 136) = v15;
  *(_QWORD *)(inited + 168) = v11;
  *(_QWORD *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrType);
  *(_QWORD *)(inited + 184) = v16;
  v17 = *(_QWORD *)&aIpkd[8 * *(char *)(a1 + 56)];
  v18 = objc_allocWithZone((Class)NSNumber);
  v19 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain(v14);
  v20 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v21 = objc_msgSend(v18, "initWithInteger:", v17);
  *(_QWORD *)(inited + 216) = sub_10009B64C(0, v22);
  *(_QWORD *)(inited + 192) = v21;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
  *(_QWORD *)(inited + 232) = v23;
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 240) = v24;
  *(_QWORD *)(inited + 248) = v25;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
  *(_QWORD *)(inited + 280) = v26;
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(_QWORD *)(inited + 288) = v27;
  *(_QWORD *)(inited + 296) = v28;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 328) = v29;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(inited + 360) = &type metadata for String;
  *(_QWORD *)(inited + 336) = v30;
  *(_QWORD *)(inited + 344) = v31;
  *(_QWORD *)(inited + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(inited + 376) = v32;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  v33 = sub_100154118(a1, a2);
  *(_QWORD *)(inited + 408) = &type metadata for Data;
  *(_QWORD *)(inited + 384) = v33;
  *(_QWORD *)(inited + 392) = v34;
  v35 = sub_1001B0FB8(inited);
  if ((a2 & 1) != 0)
  {
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrGeneric);
    v38 = v37;
    v75 = &type metadata for String;
    *(_QWORD *)&v74 = sub_10014CD88();
    *((_QWORD *)&v74 + 1) = v39;
    sub_1000E6004(&v74, v73);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    sub_1001BA88C(v73, v36, v38, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v35);
  v42 = SecItemAdd(isa, 0);

  if (v42)
  {
    if ((a3 & 1) != 0 && (v42 == -25296 || v42 == -25299))
    {
      v43 = sub_10014E028(a1, a2 & 1);
    }
    else
    {
      v44 = SecCopyErrorMessageString(v42, 0);
      if (v44)
      {
        v45 = (__CFString *)v44;
        v74 = 0uLL;
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v44, &v74);

        v46 = *((_QWORD *)&v74 + 1);
        v47 = v74;
      }
      else
      {
        v47 = 0;
        v46 = 0;
      }
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v58 = type metadata accessor for Logger(0);
      sub_10008EA50(v58, (uint64_t)qword_10026EF30);
      swift_bridgeObjectRetain(v46);
      v59 = swift_retain_n(a1, 4);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v72 = v47;
        v62 = swift_slowAlloc(32, -1);
        v70 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v74 = v70;
        *(_DWORD *)v62 = 136315650;
        if (*(_BYTE *)(a1 + 56))
          v63 = 1919247728;
        else
          v63 = 0x676E6972696170;
        if (*(_BYTE *)(a1 + 56))
          v64 = 0xE400000000000000;
        else
          v64 = 0xE700000000000000;
        *(_QWORD *)&v73[0] = sub_1000906BC(v63, v64, (uint64_t *)&v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 8, v62 + 4, v62 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v64);
        *(_WORD *)(v62 + 12) = 2080;
        v65 = *(_QWORD *)(a1 + 16);
        v66 = *(_QWORD *)(a1 + 24);
        swift_bridgeObjectRetain(v66);
        *(_QWORD *)&v73[0] = sub_1000906BC(v65, v66, (uint64_t *)&v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 8, v62 + 14, v62 + 22);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v66);
        *(_WORD *)(v62 + 22) = 2080;
        if (v46)
          v67 = v72;
        else
          v67 = 0x206E776F6E6B6E55;
        if (v46)
          v68 = v46;
        else
          v68 = 0xED0000726F727245;
        swift_bridgeObjectRetain(v46);
        *(_QWORD *)&v73[0] = sub_1000906BC(v67, v68, (uint64_t *)&v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 8, v62 + 24, v62 + 32);
        swift_bridgeObjectRelease_n(v46, 2);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unable to add %s keychain item for identfier %s: %s", (uint8_t *)v62, 0x20u);
        swift_arrayDestroy(v70, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v46, 2);
        swift_release_n(a1, 4);
      }
      v43 = 0;
    }
  }
  else
  {
    if (qword_10026BBF0 != -1)
      swift_once(&qword_10026BBF0, sub_10014A740);
    v48 = type metadata accessor for Logger(0);
    sub_10008EA50(v48, (uint64_t)qword_10026EF30);
    v49 = swift_retain_n(a1, 4);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v74 = v53;
      *(_DWORD *)v52 = 136315394;
      if (*(_BYTE *)(a1 + 56))
        v54 = 1919247728;
      else
        v54 = 0x676E6972696170;
      if (*(_BYTE *)(a1 + 56))
        v55 = 0xE400000000000000;
      else
        v55 = 0xE700000000000000;
      *(_QWORD *)&v73[0] = sub_1000906BC(v54, v55, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 8, v52 + 4, v52 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v52 + 12) = 2080;
      v56 = *(_QWORD *)(a1 + 16);
      v57 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v57);
      *(_QWORD *)&v73[0] = sub_1000906BC(v56, v57, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 8, v52 + 14, v52 + 22);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Successfully added %s keychain item for identfier %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

      swift_release_n(a1, 4);
    }
    v43 = 1;
  }
  return v43 & 1;
}

unint64_t sub_10014EEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  _BYTE v38[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals, v38, 0, 0);
  v6 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v5);
    if (v7)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease(v6);
    v2 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table);
    v19 = qword_10026BB70;
    swift_retain(v2);
    if (v19 == -1)
    {
LABEL_27:
      v20 = qword_1002754E0;
      v21 = swift_weakInit(&v36, 0);
      v35 = v2;
      swift_weakAssign(v21, v20);
      sub_1000D55A0((uint64_t)&v35, (uint64_t)v37, (uint64_t *)&unk_10026F360);
      result = sub_1001499D4(v22);
      v2 = result;
      if (result >> 62)
        goto LABEL_62;
      v24 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v24)
        goto LABEL_29;
LABEL_50:
      swift_bridgeObjectRelease(v2);
      sub_10009B2C0((uint64_t)v37, (uint64_t *)&unk_10026F360);
      return 0;
    }
LABEL_60:
    swift_once(&qword_10026BB70, sub_1001150BC);
    goto LABEL_27;
  }
  if (v6 < 0)
    v33 = *v5;
  else
    v33 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v33);
  if (!v7)
    goto LABEL_26;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
    goto LABEL_58;
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_60;
  }
  v8 = *(_QWORD *)(v6 + 32);
  swift_retain(v8);
LABEL_6:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = v9 == a1 && v10 == a2;
  if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a1, a2, 0) & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return v8;
  }
  swift_release(v8);
  if (v7 == 1)
    goto LABEL_26;
  v12 = 5;
  while (1)
  {
    v13 = v12 - 4;
    if ((v6 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v6);
      v14 = __OFADD__(v13, 1);
      v15 = v12 - 3;
      if (v14)
        goto LABEL_57;
      goto LABEL_20;
    }
    if (v13 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      break;
    v8 = *(_QWORD *)(v6 + 8 * v12);
    swift_retain(v8);
    v14 = __OFADD__(v13, 1);
    v15 = v12 - 3;
    if (v14)
    {
LABEL_57:
      __break(1u);
LABEL_58:
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
      goto LABEL_6;
    }
LABEL_20:
    v16 = *(_QWORD *)(v8 + 16);
    v17 = *(_QWORD *)(v8 + 24);
    v18 = v16 == a1 && v17 == a2;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0) & 1) != 0)
      goto LABEL_11;
    swift_release(v8);
    ++v12;
    if (v15 == v7)
      goto LABEL_26;
  }
  __break(1u);
LABEL_62:
  if (v2 < 0)
    v34 = v2;
  else
    v34 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v24 = _CocoaArrayWrapper.endIndex.getter(v34);
  result = swift_bridgeObjectRelease(v2);
  if (!v24)
    goto LABEL_50;
LABEL_29:
  if ((v2 & 0xC000000000000001) != 0)
    goto LABEL_68;
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(_QWORD *)(v2 + 32);
    swift_retain(v8);
    while (1)
    {
      v25 = *(_QWORD *)(v8 + 16);
      v26 = *(_QWORD *)(v8 + 24);
      if (v25 == a1 && v26 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, a1, a2, 0) & 1) != 0)
      {
LABEL_35:
        swift_bridgeObjectRelease(v2);
        sub_10009B2C0((uint64_t)v37, (uint64_t *)&unk_10026F360);
        return v8;
      }
      result = swift_release(v8);
      if (v24 == 1)
        goto LABEL_50;
      v27 = 5;
      while (1)
      {
        v28 = v27 - 4;
        if ((v2 & 0xC000000000000001) == 0)
          break;
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v2);
        v14 = __OFADD__(v28, 1);
        v29 = v27 - 3;
        if (v14)
          goto LABEL_67;
LABEL_44:
        v30 = *(_QWORD *)(v8 + 16);
        v31 = *(_QWORD *)(v8 + 24);
        v32 = v30 == a1 && v31 == a2;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, a1, a2, 0) & 1) != 0)
          goto LABEL_35;
        result = swift_release(v8);
        ++v27;
        if (v29 == v24)
          goto LABEL_50;
      }
      if (v28 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_70;
      v8 = *(_QWORD *)(v2 + 8 * v27);
      swift_retain(v8);
      v14 = __OFADD__(v28, 1);
      v29 = v27 - 3;
      if (!v14)
        goto LABEL_44;
LABEL_67:
      __break(1u);
LABEL_68:
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

void sub_10014F2D0(const void *a1, const void *a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = sub_10014D850(a1, a2, 1);
  v35 = (unint64_t)a2;
  if ((unint64_t)v7 >> 62)
  {
LABEL_30:
    if (v7 < 0)
      v22 = v7;
    else
      v22 = v7 & 0xFFFFFFFFFFFFFF8;
    v8 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      v9 = v7 & 0xC000000000000001;
      v10 = 4;
      v36 = v7;
      do
      {
        v11 = v10 - 4;
        if (v9)
        {
          v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7);
          v12 = v10 - 3;
          if (__OFADD__(v11, 1))
            goto LABEL_29;
        }
        else
        {
          v4 = *(_QWORD *)(v7 + 8 * v10);
          swift_retain(v4);
          v12 = v10 - 3;
          if (__OFADD__(v11, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        v13 = *(_QWORD *)(v4 + 112);
        v3 = *(_QWORD *)(v4 + 120);
        v14 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0)
          v14 = v13 & 0xFFFFFFFFFFFFLL;
        if (v14)
        {
          swift_bridgeObjectRetain_n(*(_QWORD *)(v4 + 120), 2);
          v5 = sub_10014D850((const void *)v13, (const void *)v3, 0);
          swift_bridgeObjectRelease(v3);
          if ((unint64_t)v5 >> 62)
          {
            if (v5 < 0)
              v15 = v5;
            else
              v15 = v5 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v5);
            v16 = _CocoaArrayWrapper.endIndex.getter(v15);
            swift_bridgeObjectRelease(v5);
            if (v16)
            {
LABEL_21:
              if (qword_10026BBF0 != -1)
                goto LABEL_53;
              goto LABEL_22;
            }
          }
          else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_21;
          }
          swift_bridgeObjectRelease(v5);
          swift_release(v4);
          swift_bridgeObjectRelease(v3);
          v7 = v36;
        }
        else
        {
          swift_release(v4);
        }
        ++v10;
      }
      while (v12 != v8);
    }
  }
  swift_bridgeObjectRelease(v7);
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v23 = type metadata accessor for Logger(0);
  sub_10008EA50(v23, (uint64_t)qword_10026EF30);
  v24 = swift_bridgeObjectRetain_n(v35, 2);
  v13 = Logger.logObject.getter(v24);
  v25 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled((os_log_t)v13, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v40 = v27;
    *(_DWORD *)v26 = 136315138;
    v3 = (unint64_t)(v26 + 12);
    v4 = (uint64_t)(v26 + 4);
    swift_bridgeObjectRetain(v35);
    v38 = sub_1000906BC((uint64_t)a1, v35, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v35, 3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v13, v25, "Unable to find controller associated with accessory %s.  Returning default controller key-pair.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
  }
  v28 = sub_10014D850(0, 0, 0);
  v29 = v28;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 >= 0)
      v28 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v28))
      goto LABEL_41;
LABEL_48:
    swift_bridgeObjectRelease(v29);
    if ((a3 & 1) != 0)
    {
      sub_10014D620();
    }
    else
    {
      v30 = sub_1000ABB30();
      v31 = swift_allocError(&type metadata for DockdError, v30, 0, 0);
      *v32 = 1;
      swift_willThrow(v31);
    }
    return;
  }
  if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_41:
  if ((v29 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
    goto LABEL_44;
  }
  if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain(*(_QWORD *)(v29 + 32));
LABEL_44:
    swift_bridgeObjectRelease(v29);
    return;
  }
  __break(1u);
LABEL_53:
  swift_once(&qword_10026BBF0, sub_10014A740);
LABEL_22:
  v17 = type metadata accessor for Logger(0);
  sub_10008EA50(v17, (uint64_t)qword_10026EF30);
  swift_bridgeObjectRetain_n(v35, 2);
  swift_bridgeObjectRetain(v3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v40 = v37;
    *(_DWORD *)v21 = 136315394;
    swift_bridgeObjectRetain(v3);
    v38 = sub_1000906BC(v13, v3, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain(v35);
    v38 = sub_1000906BC((uint64_t)a1, v35, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease_n(v35, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Found controller %s for given accessory identifier: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease_n(v3, 2);
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    goto LABEL_28;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain(*(_QWORD *)(v5 + 32));
LABEL_28:
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v5);
    swift_release(v4);
    return;
  }
  __break(1u);
}

uint64_t sub_10014F8C8(const void *a1, const void *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const __CFDictionary *isa;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char v32[80];
  uint64_t v33;

  result = sub_10014D850(a1, a2, 1);
  v3 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v4 = result;
    if (result)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v3);
    v28 = sub_1000ABB30();
    v29 = swift_allocError(&type metadata for DockdError, v28, 0, 0);
    *v30 = 1;
    return swift_willThrow(v29);
  }
  v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_18;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v7 = kSecValuePersistentRef;
    v31 = v3;
    do
    {
      if (v6)
      {
        v15 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        v15 = *(_QWORD **)(v3 + 8 * v5 + 32);
        swift_retain(v15);
      }
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v16 = type metadata accessor for Logger(0);
      sub_10008EA50(v16, (uint64_t)qword_10026EF30);
      v17 = swift_retain(v15);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v33 = v21;
        *(_DWORD *)v20 = 136315138;
        v22 = v4;
        v23 = v6;
        v24 = v15[2];
        v25 = v15[3];
        swift_bridgeObjectRetain(v25);
        *(_QWORD *)(v20 + 4) = sub_1000906BC(v24, v25, &v33);
        swift_release(v15);
        v26 = v25;
        v6 = v23;
        v4 = v22;
        v3 = v31;
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removing accessory key item for %s", (uint8_t *)v20, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        v27 = v21;
        v7 = kSecValuePersistentRef;
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_release(v15);
      }
      ++v5;
      v8 = sub_10009061C((uint64_t *)&unk_10026C2D0);
      inited = swift_initStackObject(v8, v32);
      *(_OWORD *)(inited + 16) = xmmword_1001DE690;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      *(_QWORD *)(inited + 40) = v10;
      v11 = v15[12];
      v12 = v15[13];
      *(_QWORD *)(inited + 72) = &type metadata for Data;
      *(_QWORD *)(inited + 48) = v11;
      *(_QWORD *)(inited + 56) = v12;
      sub_10009B27C(v11, v12);
      v13 = sub_1001B0FB8(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      SecItemDelete(isa);
      swift_release(v15);

    }
    while (v4 != v5);
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

uint64_t sub_10014FBF8(const void *a1, const void *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const __CFDictionary *isa;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[80];
  uint64_t v30;

  result = sub_10014D850(a1, a2, 0);
  v3 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v4 = result;
    if (result)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v3);
  }
  v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return swift_bridgeObjectRelease(v3);
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v7 = kSecValuePersistentRef;
    v28 = v3;
    do
    {
      if (v6)
      {
        v15 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        v15 = *(_QWORD **)(v3 + 8 * v5 + 32);
        swift_retain(v15);
      }
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v16 = type metadata accessor for Logger(0);
      sub_10008EA50(v16, (uint64_t)qword_10026EF30);
      v17 = swift_retain(v15);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v30 = v21;
        *(_DWORD *)v20 = 136315138;
        v22 = v4;
        v23 = v6;
        v24 = v15[2];
        v25 = v15[3];
        swift_bridgeObjectRetain(v25);
        *(_QWORD *)(v20 + 4) = sub_1000906BC(v24, v25, &v30);
        swift_release(v15);
        v26 = v25;
        v6 = v23;
        v4 = v22;
        v3 = v28;
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removing controller key item for %s", (uint8_t *)v20, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        v27 = v21;
        v7 = kSecValuePersistentRef;
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_release(v15);
      }
      ++v5;
      v8 = sub_10009061C((uint64_t *)&unk_10026C2D0);
      inited = swift_initStackObject(v8, v29);
      *(_OWORD *)(inited + 16) = xmmword_1001DE690;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      *(_QWORD *)(inited + 40) = v10;
      v11 = v15[12];
      v12 = v15[13];
      *(_QWORD *)(inited + 72) = &type metadata for Data;
      *(_QWORD *)(inited + 48) = v11;
      *(_QWORD *)(inited + 56) = v12;
      sub_10009B27C(v11, v12);
      v13 = sub_1001B0FB8(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      SecItemDelete(isa);
      swift_release(v15);

    }
    while (v4 != v5);
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

id sub_10014FEF8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  objc_super v10;

  v3 = &v2[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup];
  *(_QWORD *)v3 = 0xD000000000000020;
  *((_QWORD *)v3 + 1) = 0x80000001001FC4A0;
  v4 = OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table;
  v5 = type metadata accessor for DBTable(0, a2);
  v6 = swift_allocObject(v5, 32, 7);
  *(_QWORD *)(v6 + 16) = 0x7265687069726550;
  *(_QWORD *)(v6 + 24) = 0xEB00000000736C61;
  *(_QWORD *)&v2[v4] = v6;
  *(_QWORD *)&v2[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals] = _swiftEmptyArrayStorage;
  v7 = &v2[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0xE000000000000000;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for AccessoryKeystore(v6, v8);
  return objc_msgSendSuper2(&v10, "init");
}

id sub_10014FFE0(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for AccessoryKeystore(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for AccessoryKeystore(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd17AccessoryKeystore, a2);
}

uint64_t sub_100150090()
{
  return type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry(0);
}

uint64_t type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_10026F018;
  if (!qword_10026F018)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryKeystore.AccessoryPeripheralEntry);
  return result;
}

void sub_1001500D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001E03A0;
  sub_10015015C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_10015015C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10026F028)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10026F028);
  }
}

uint64_t type metadata accessor for AccessoryKeystore.AccessoryKeyItem(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtCC14dockaccessoryd17AccessoryKeystore16AccessoryKeyItem, a2);
}

uint64_t sub_1001501D0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10008EA50(v0, (uint64_t)qword_10026EF30);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Attempting to fetch local keychain identity...", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_10014D850(0, 0, 0);
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(v5);
    if (result)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease(v6);
    v10 = sub_1000ABB30();
    v11 = swift_allocError(&type metadata for DockdError, v10, 0, 0);
    *v12 = 1;
    return swift_willThrow(v11);
  }
  result = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!result)
    goto LABEL_14;
LABEL_7:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(_QWORD *)(v6 + 32);
    swift_retain(v8);
LABEL_10:
    swift_bridgeObjectRelease(v6);
    v9 = *(id *)(v8 + 32);
    swift_release(v8);
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

void sub_100150390()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  _QWORD *v13;

  v2 = v0;
  v3 = sub_10014D850(0, 0, 0);
  v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v3))
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(v4);
    v13 = sub_10014D620();
    if (!v1)
    {
      v10 = (uint64_t)v13;
      goto LABEL_11;
    }
    return;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_3:
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10008EA50(v5, (uint64_t)qword_10026EF30);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found existing controller keychain item.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  if ((v4 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(_QWORD *)(v4 + 32);
    swift_retain(v10);
LABEL_10:
    swift_bridgeObjectRelease(v4);
    v11 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v11);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v2, "updateActiveControllerPairingIdentifier:", v12);

LABEL_11:
    *(id *)(v10 + 32);
    swift_release(v10);
    return;
  }
  __break(1u);
}

id sub_100150574(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  void *v6;

  v5 = a1;
  v6 = (void *)a4();

  return v6;
}

void sub_1001506A4(_QWORD *a1, _QWORD *a2, _QWORD *a3, char a4, const void *a5, const void *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  if (a6)
  {
    sub_10014F2D0(a5, a6, a4 & 1);
    if (!v6)
    {
      v11 = v10;
      if (a3)
      {
        v12 = *(_QWORD *)(v10 + 24);
        swift_bridgeObjectRetain(v12);
        v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v12);
        v14 = v13;
        *a3 = v13;
      }
      if (a1)
      {
        v15 = objc_msgSend(*(id *)(v11 + 32), "publicKey");
        v16 = objc_msgSend(v15, "data");

        if (!v16)
        {
          __break(1u);
          goto LABEL_17;
        }
        v17 = v16;
        *a1 = v16;
      }
      if (!a2)
        goto LABEL_13;
      v18 = objc_msgSend(*(id *)(v11 + 32), "privateKey");

      if (!v18)
        goto LABEL_13;
      v19 = objc_msgSend(*(id *)(v11 + 32), "privateKey");
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v19, "data");

        if (v21)
        {
          v22 = v21;
          *a2 = v21;
LABEL_13:
          swift_release(v11);
          return;
        }
        goto LABEL_18;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  else
  {
    v23 = sub_1000ABB30();
    v24 = swift_allocError(&type metadata for DockdError, v23, 0, 0);
    *v25 = 2;
    swift_willThrow(v24);
  }
}

uint64_t sub_100150CEC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE v22[152];

  if (a4)
  {
    v5 = v4;
    v10 = type metadata accessor for AccessoryKeystore.AccessoryKeyItem(a1, a2);
    inited = swift_initStackObject(v10, v22);
    swift_bridgeObjectRetain(a4);
    sub_10014C15C(a3, a4);
    *(_BYTE *)(inited + 56) = 1;
    v12 = *(_QWORD *)(inited + 72);
    *(_QWORD *)(inited + 64) = 0xD000000000000018;
    *(_QWORD *)(inited + 72) = 0x80000001002014D0;
    swift_bridgeObjectRelease(v12);
    v13 = *(_QWORD *)(inited + 88);
    *(_QWORD *)(inited + 80) = 0xD000000000000039;
    *(_QWORD *)(inited + 88) = 0x80000001002014F0;
    result = swift_bridgeObjectRelease(v13);
    if (a2 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v15 = *(_QWORD *)(inited + 40);
      v16 = *(_QWORD *)(inited + 48);
      *(_QWORD *)(inited + 40) = a1;
      *(_QWORD *)(inited + 48) = a2;
      sub_10009B27C(a1, a2);
      sub_10009B2FC(v15, v16);
      v17 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController + 8);
      v18 = *(_QWORD *)(inited + 120);
      *(_QWORD *)(inited + 112) = *(_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
      *(_QWORD *)(inited + 120) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(inited + 128) = 0;
      sub_10014E730(inited, 1, 1);
      return swift_release(inited);
    }
  }
  else
  {
    v19 = sub_1000ABB30();
    v20 = swift_allocError(&type metadata for DockdError, v19, 0, 0);
    *v21 = 2;
    return swift_willThrow(v20);
  }
  return result;
}

void sub_100150F70(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  const void *v19;
  const void *v20;
  const void *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (!a1)
  {
    v22 = sub_1000ABB30();
    v23 = swift_allocError(&type metadata for DockdError, v22, 0, 0);
    *v24 = 2;
    swift_willThrow(v23);
    return;
  }
  v2 = v1;
  v3 = a1;
  v4 = objc_msgSend(v3, "controllerKeyIdentifier");
  if (!v4)
  {
    v25 = sub_1000ABB30();
    v26 = swift_allocError(&type metadata for DockdError, v25, 0, 0);
    v28 = 2;
LABEL_18:
    *v27 = v28;
    swift_willThrow(v26);

    return;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = objc_msgSend(v3, "identifier");
  v10 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = sub_10014D850(v10, v12, 1);
  swift_bridgeObjectRelease(v12);
  if (!((unint64_t)v13 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v13 < 0)
    v29 = v13;
  else
    v29 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v13);
  if (!v30)
  {
LABEL_17:
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v13);
    v31 = sub_1000ABB30();
    v26 = swift_allocError(&type metadata for DockdError, v31, 0, 0);
    v28 = 1;
    goto LABEL_18;
  }
LABEL_5:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
  }
  else
  {
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v14 = *(_QWORD **)(v13 + 32);
    swift_retain(v14);
  }
  swift_bridgeObjectRelease(v13);
  v15 = (void *)v14[4];
  v14[4] = v3;
  v16 = v3;

  v17 = v14[15];
  v14[14] = v6;
  v14[15] = v8;
  swift_bridgeObjectRelease(v17);
  v18 = objc_msgSend(v16, "identifier");
  v19 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  sub_10014F8C8(v19, v21);
  if (v2)
  {

    swift_release(v14);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    sub_10014E730((uint64_t)v14, 1, 0);

    swift_release(v14);
  }
}

uint64_t sub_100151284(const void *a1, const void *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;

  if (a2)
  {
    v4 = sub_10014D850(a1, a2, 1);
    if ((unint64_t)v4 >> 62)
      goto LABEL_16;
    for (i = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v15))
    {
      v6 = 4;
      while (1)
      {
        v7 = v6 - 4;
        if ((v4 & 0xC000000000000001) == 0)
          break;
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4);
        v9 = __OFADD__(v7, 1);
        v10 = v6 - 3;
        if (v9)
          goto LABEL_15;
LABEL_10:
        if (a3)
        {
          swift_bridgeObjectRelease(v4);
          v12 = *(_QWORD *)(v8 + 120);
          swift_bridgeObjectRetain(v12);
          v13 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v12);
          v14 = v13;
          *a3 = v13;
          swift_release(v8);
          return 1;
        }
        swift_release(v8);
        ++v6;
        if (v10 == i)
          goto LABEL_12;
      }
      v8 = *(_QWORD *)(v4 + 8 * v6);
      swift_retain(v8);
      v9 = __OFADD__(v7, 1);
      v10 = v6 - 3;
      if (!v9)
        goto LABEL_10;
LABEL_15:
      __break(1u);
LABEL_16:
      if (v4 < 0)
        v15 = v4;
      else
        v15 = v4 & 0xFFFFFFFFFFFFFF8;
    }
LABEL_12:
    swift_bridgeObjectRelease(v4);
  }
  return 0;
}

uint64_t sub_100151548(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  uint64_t v79;

  v75 = a2;
  v5 = sub_10009061C(&qword_10026EA20);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v73 = (char *)&v69 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v69 - v11;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v69 - v18;
  sub_1000ACE4C(a1, (uint64_t)v12, &qword_10026EA20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10009B2C0((uint64_t)v12, &qword_10026EA20);
    v20 = sub_1000ABB30();
    v21 = swift_allocError(&type metadata for DockdError, v20, 0, 0);
    *v22 = 2;
    v79 = v21;
    return swift_willThrow(v21);
  }
  else
  {
    v72 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
    result = v72(v19, v12, v13);
    if (a3)
    {
      v24 = v75;
      v25 = sub_10014EEF4(v75, a3);
      if (v25)
      {
        v74 = v25;
        if (qword_10026BBF0 != -1)
          swift_once(&qword_10026BBF0, sub_10014A740);
        v26 = type metadata accessor for Logger(0);
        sub_10008EA50(v26, (uint64_t)qword_10026EF30);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
        v27 = swift_bridgeObjectRetain_n(a3, 2);
        v28 = Logger.logObject.getter(v27);
        v29 = v14;
        v30 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v30))
        {
          v31 = swift_slowAlloc(22, -1);
          v70 = v19;
          v32 = v31;
          v69 = swift_slowAlloc(64, -1);
          v78[0] = v69;
          *(_DWORD *)v32 = 136315394;
          v71 = v29;
          swift_bridgeObjectRetain(a3);
          v76 = sub_1000906BC(v24, a3, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v32 + 4, v32 + 12);
          v33 = swift_bridgeObjectRelease_n(a3, 3);
          *(_WORD *)(v32 + 12) = 2080;
          v34 = UUID.uuidString.getter(v33);
          v36 = v35;
          v76 = sub_1000906BC(v34, v35, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v32 + 14, v32 + 22);
          swift_bridgeObjectRelease(v36);
          v29 = v71;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v13);
          _os_log_impl((void *)&_mh_execute_header, v28, v30, "Saving peripheral identifier for %s: %s.", (uint8_t *)v32, 0x16u);
          v37 = v69;
          swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          v38 = v32;
          v19 = v70;
          swift_slowDealloc(v38, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(a3, 2);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v13);
        }

        v48 = v29;
        v49 = (uint64_t)v73;
        v72(v73, v19, v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v13);
        sub_1000D55A0(v49, (uint64_t)v8, &qword_10026EA20);
        v50 = v74;
        v51 = v74 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
        swift_beginAccess(v74 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v78, 33, 0);
        sub_1001552D0((uint64_t)v8, v51);
        swift_endAccess(v78);
        v52 = v50;
      }
      else
      {
        if (qword_10026BBF0 != -1)
          swift_once(&qword_10026BBF0, sub_10014A740);
        v39 = type metadata accessor for Logger(0);
        sub_10008EA50(v39, (uint64_t)qword_10026EF30);
        v40 = swift_bridgeObjectRetain_n(a3, 2);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(12, -1);
          v70 = v19;
          v44 = (uint8_t *)v43;
          v45 = swift_slowAlloc(32, -1);
          v78[0] = v45;
          v71 = v14;
          *(_DWORD *)v44 = 136315138;
          swift_bridgeObjectRetain(a3);
          v76 = sub_1000906BC(v75, a3, v78);
          v14 = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 4, v44 + 12);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Saving new peripheral identifier for %s.", v44, 0xCu);
          swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
          v46 = v45;
          v24 = v75;
          swift_slowDealloc(v46, -1, -1);
          v47 = v44;
          v19 = v70;
          swift_slowDealloc(v47, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        v53 = type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry(0);
        v54 = swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v54 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, 1, 1, v13);
        *(_QWORD *)(v54 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = 0;
        *(_QWORD *)(v54 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = 0;
        *(_QWORD *)(v54 + 16) = v24;
        *(_QWORD *)(v54 + 24) = a3;
        v55 = (uint64_t)v73;
        sub_1000ACE4C(a1, (uint64_t)v73, &qword_10026EA20);
        v56 = v54 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
        swift_beginAccess(v54 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v78, 33, 0);
        swift_bridgeObjectRetain(a3);
        sub_1001552D0(v55, v56);
        swift_endAccess(v78);
        v57 = v74;
        v58 = (_QWORD *)(v74 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
        swift_beginAccess(v74 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals, v78, 33, 0);
        v59 = swift_retain(v54);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
        v61 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v60 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v61 >= v60 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v54);
        specialized Array._endMutation()(v62);
        swift_endAccess(v78);
        v63 = *(_QWORD *)(v57 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table);
        v64 = qword_10026BB70;
        swift_retain(v63);
        if (v64 != -1)
          swift_once(&qword_10026BB70, sub_1001150BC);
        v65 = qword_1002754E0;
        v66 = swift_weakInit(&v77, 0);
        v76 = v63;
        swift_weakAssign(v66, v65);
        sub_1000D55A0((uint64_t)&v76, (uint64_t)v78, (uint64_t *)&unk_10026F320);
        v67 = v79;
        sub_100148F6C(v54, (uint64_t)&off_1002385F0, v68);
        v79 = v67;
        sub_10009B2C0((uint64_t)v78, (uint64_t *)&unk_10026F320);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        v52 = v54;
      }
      return swift_release(v52);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_100151E0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  v5 = sub_10009061C(&qword_10026EA20);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    result = sub_10014EEF4(a1, a2);
    if (result)
    {
      v9 = result;
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v10 = type metadata accessor for Logger(0);
      sub_10008EA50(v10, (uint64_t)qword_10026EF30);
      v11 = swift_bridgeObjectRetain_n(a2, 2);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v20 = v2;
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        v21[0] = v15;
        v19 = v8;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain(a2);
        v22 = sub_1000906BC(a1, a2, v21);
        v8 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4, v14 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Deleting peripheral identifier for %s.", v14, 0xCu);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      v16 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
      v17 = v9 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess(v9 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v21, 33, 0);
      sub_1001552D0((uint64_t)v8, v17);
      swift_endAccess(v21);
      return swift_release(v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001520E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];

  v1 = v0;
  v2 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10008EA50(v5, (uint64_t)qword_10026EF30);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting all peripheral identifiers.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals, v19, 0, 0);
  v11 = *v10;
  if (!((unint64_t)v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (v12)
      goto LABEL_7;
LABEL_17:
    swift_bridgeObjectRelease(v11);
    return;
  }
  if (v11 < 0)
    v17 = v11;
  else
    v17 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v12 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v12)
    goto LABEL_17;
LABEL_7:
  if (v12 >= 1)
  {
    v13 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
      }
      else
      {
        v14 = *(_QWORD *)(v11 + 8 * v13 + 32);
        swift_retain(v14);
      }
      ++v13;
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
      v16 = v14 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess(v14 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v18, 33, 0);
      sub_1001552D0((uint64_t)v4, v16);
      swift_endAccess(v18);
      swift_release(v14);
    }
    while (v12 != v13);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_100152410@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;

  v6 = sub_10009061C(&qword_10026EA20);
  result = __chkstk_darwin(v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v10 = sub_10014EEF4(a1, a2);
    if (v10)
    {
      v11 = v10;
      v12 = v10 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess(v10 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v27, 0, 0);
      sub_1000ACE4C(v12, (uint64_t)v9, &qword_10026EA20);
      v13 = type metadata accessor for UUID(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
      {
        sub_10009B2C0((uint64_t)v9, &qword_10026EA20);
        v15 = sub_1000ABB30();
        v16 = swift_allocError(&type metadata for DockdError, v15, 0, 0);
        *v17 = 1;
        swift_willThrow(v16);
        return swift_release(v11);
      }
      else
      {
        swift_release(v11);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a3, v9, v13);
      }
    }
    else
    {
      if (qword_10026BBF0 != -1)
        swift_once(&qword_10026BBF0, sub_10014A740);
      v18 = type metadata accessor for Logger(0);
      sub_10008EA50(v18, (uint64_t)qword_10026EF30);
      v19 = swift_bridgeObjectRetain_n(a2, 2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v27[0] = v23;
        *(_DWORD *)v22 = 136315138;
        swift_bridgeObjectRetain(a2);
        v28 = sub_1000906BC(a1, a2, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to read peripheral identifier for %s: Key store does not exist.", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      v24 = sub_1000ABB30();
      v25 = swift_allocError(&type metadata for DockdError, v24, 0, 0);
      *v26 = 1;
      return swift_willThrow(v25);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryKeystore.AccessoryKeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001529E8 + 4 * byte_1001E0345[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100152A1C + 4 * asc_1001E0340[v4]))();
}

uint64_t sub_100152A1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100152A24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100152A2CLL);
  return result;
}

uint64_t sub_100152A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100152A40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100152A44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100152A4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryKeystore.AccessoryKeyType()
{
  return &type metadata for AccessoryKeystore.AccessoryKeyType;
}

unint64_t sub_100152A6C()
{
  unint64_t result;

  result = qword_10026F310;
  if (!qword_10026F310)
  {
    result = swift_getWitnessTable(&unk_1001E04BC, &type metadata for AccessoryKeystore.AccessoryKeyType);
    atomic_store(result, (unint64_t *)&qword_10026F310);
  }
  return result;
}

uint64_t sub_100152AB0(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_10023CCD8, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v54 = swift_allocObject(&unk_10023CD00, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_100152F4C(v33 | (v11 << 16), v54, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v49 = a1;
  v50 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6);
    *(_QWORD *)(v54 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v23 = String.subscript.getter(v16, v15, a5, a6);
  v51 = v24;
  v52 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_1000E946C(0, v14[2] + 1, 1, v14);
  v30 = v14[2];
  v29 = v14[3];
  if (v30 >= v29 >> 1)
    v14 = sub_1000E946C((_QWORD *)(v29 > 1), v30 + 1, 1, v14);
  v14[2] = v30 + 1;
  v31 = &v14[4 * v30];
  v31[4] = v52;
  v31[5] = v26;
  v31[6] = v28;
  v31[7] = v51;
  *(_QWORD *)(v50 + 16) = v14;
  v32 = String.index(after:)(v15, a5, a6);
  v15 = v32;
  *(_QWORD *)(v54 + 16) = v32;
  if (v14[2] != v49)
  {
    v16 = v32;
    v17 = v32;
    goto LABEL_11;
  }
  v17 = v32;
  v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    v34 = v54;
    goto LABEL_41;
  }
  if (v55 >= v17 >> 14)
  {
    v36 = String.subscript.getter(v17, v48, a5, a6);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_1000E946C(0, v14[2] + 1, 1, v14);
    v44 = v14[2];
    v43 = v14[3];
    if (v44 >= v43 >> 1)
      v14 = sub_1000E946C((_QWORD *)(v43 > 1), v44 + 1, 1, v14);
    v14[2] = v44 + 1;
    v45 = &v14[4 * v44];
    v45[4] = v36;
    v45[5] = v38;
    v45[6] = v40;
    v45[7] = v42;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_100152F4C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_1000E946C(0, v17[2] + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_1000E946C((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v10;
    v21[5] = v12;
    v21[6] = v14;
    v21[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

unsigned __int8 *sub_1001530A4(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_1001538C4(a1, a2, a3);
}

uint64_t sub_1001530B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100155374();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_1001B35D0(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = (unsigned __int16)sub_100153374(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16 & 0x1FF;
}

uint64_t sub_1001531A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100155374();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_1001B35D0(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_10015361C(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16 & 0x1FFFF;
}

unsigned __int8 *sub_100153290(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1001B35D0(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1001538C4(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_100153374(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10015361C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1001538C4(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100153B40(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LOWORD(result) = 0;
    v14 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_100153CC4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE2(result) & 1;
LABEL_8:
    LOBYTE(v13[0]) = (a4 & 0x1000000000000000) != 0;
    return (unsigned __int16)result | (v14 << 16) | (LOBYTE(v13[0]) << 24);
  }
  return result;
}

uint64_t sub_100153C18(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1;
}

uint64_t sub_100153C6C@<X0>(sqlite3_stmt *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = sub_10014AC00(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100153CC4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned __int16 v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  int v41;
  unsigned int v42;
  char v43;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1001B31E4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1001B31E4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1001B31E4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 87;
        if (a6 > 10)
        {
          v32 = a6 + 55;
        }
        else
        {
          v31 = 97;
          v32 = 65;
        }
        if (a6 <= 10)
          v33 = a6 + 48;
        else
          v33 = 58;
        if (v19)
        {
          LOWORD(v24) = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                v30 = 1;
                if (v36 < 0x61 || v36 >= v31)
                  return v29 | (v30 << 16);
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a6) & 0xFFFF0000) != 0)
              goto LABEL_96;
            v24 = (unsigned __int16)(v24 * a6) + (v36 + v37);
            if ((v24 & 0x10000) != 0)
              goto LABEL_96;
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          v30 = 0;
          v29 = v24;
          return v29 | (v30 << 16);
        }
        goto LABEL_95;
      }
LABEL_96:
      v29 = 0;
      v30 = 1;
      return v29 | (v30 << 16);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v38 = a6 + 87;
      if (a6 > 10)
      {
        v39 = a6 + 55;
      }
      else
      {
        v38 = 97;
        v39 = 65;
      }
      if (a6 <= 10)
        v40 = a6 + 48;
      else
        v40 = 58;
      if (v19)
      {
        LOWORD(v41) = 0;
        do
        {
          v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              v29 = 0;
              v30 = 1;
              if (v42 < 0x61 || v42 >= v38)
                return v29 | (v30 << 16);
              v43 = -87;
            }
            else
            {
              v43 = -55;
            }
          }
          else
          {
            v43 = -48;
          }
          if ((((unsigned __int16)v41 * (unsigned __int16)a6) & 0xFFFF0000) != 0)
            goto LABEL_96;
          v41 = (unsigned __int16)(v41 * a6) + (v42 + v43);
          if ((v41 & 0x10000) != 0)
            goto LABEL_96;
          ++v19;
          --result;
        }
        while (result);
        v30 = 0;
        v29 = v41;
        return v29 | (v30 << 16);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        LOWORD(v24) = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | (v30 << 16);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if ((((unsigned __int16)v24 * (unsigned __int16)a6) & 0xFFFF0000) != 0)
            goto LABEL_96;
          v24 = (unsigned __int16)(v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFF0000) != 0)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_72;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | (v30 << 16);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_100154118(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  Swift::String v25;

  if ((a2 & 1) != 0)
    __asm { BR              X10 }
  v3 = objc_msgSend(*(id *)(a1 + 32), "privateKey");

  if (!v3)
    return 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "publicKey");
  v5 = objc_msgSend(v4, "data");

  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  sub_100117E20(v6, v8);
  v10 = v9;
  sub_10009B2FC(v6, v8);
  v11 = String.uppercased()();
  swift_bridgeObjectRelease(v10);
  v25 = v11;
  swift_bridgeObjectRetain(v11._object);
  v12._countAndFlagsBits = 43;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11._object);
  v13 = objc_msgSend(*(id *)(a1 + 32), "privateKey");
  if (!v13)
  {
    __break(1u);
    JUMPOUT(0x1001543B4);
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "data");

  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  sub_100117E20(v16, v18);
  v20 = v19;
  sub_10009B2FC(v16, v18);
  v21 = String.uppercased()();
  swift_bridgeObjectRelease(v20);
  v25 = v11;
  swift_bridgeObjectRetain(v11._object);
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v11._object);
  swift_bridgeObjectRelease(v21._object);
  v22 = String.init<A>(_:)(&v25, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  return sub_1000E7BE4(v22, v23);
}

void sub_1001543C4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const __CFDictionary *isa;
  const __CFDictionary *v30;
  OSStatus v31;
  CFStringRef v32;
  __CFString *v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  __CFString *v48;
  unint64_t v49;
  char v50[80];
  char v51[88];
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  if (!a1)
    return;
  v4 = *(const void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
  v5 = *(const void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController + 8);
  v6 = a1;
  swift_bridgeObjectRetain(v5);
  v7 = sub_10014D850(v4, v5, 0);
  swift_bridgeObjectRelease(v5);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v42 = v7;
    else
      v42 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v43 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(v7);
    if (v43)
      goto LABEL_4;
LABEL_31:
    swift_bridgeObjectRelease(v7);
    v44 = sub_10014D620();
    if (v3)
    {

      return;
    }
    v8 = v44;
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_31;
LABEL_4:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v8 = *(_QWORD **)(v7 + 32);
    swift_retain(v8);
  }
  swift_bridgeObjectRelease(v7);
LABEL_8:
  v9 = (void *)v8[4];
  v8[4] = v6;
  v45 = v6;

  v10 = sub_10009061C((uint64_t *)&unk_10026C2D0);
  inited = swift_initStackObject(v10, v51);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValuePersistentRef);
  *(_QWORD *)(inited + 40) = v12;
  v13 = v8[12];
  v14 = v8[13];
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v14;
  sub_10009B27C(v13, v14);
  v47 = sub_1001B0FB8(inited);
  v15 = swift_initStackObject(v10, v50);
  *(_OWORD *)(v15 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v15 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(v15 + 40) = v16;
  v17 = swift_retain(v8);
  v18 = sub_100154118(v17, 0);
  v20 = v19;
  swift_release(v8);
  *(_QWORD *)(v15 + 72) = &type metadata for Data;
  *(_QWORD *)(v15 + 48) = v18;
  *(_QWORD *)(v15 + 56) = v20;
  v46 = sub_1001B0FB8(v15);
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v21 = type metadata accessor for Logger(0);
  sub_10008EA50(v21, (uint64_t)qword_10026EF30);
  v22 = swift_retain(v8);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v48 = (__CFString *)v26;
    *(_DWORD *)v25 = 136315138;
    v27 = v8[2];
    v28 = v8[3];
    swift_bridgeObjectRetain(v28);
    v52 = sub_1000906BC(v27, v28, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 4, v25 + 12);
    swift_release(v8);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saving local pairing identity for %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_release(v8);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v47);
  v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v46);
  v31 = SecItemUpdate(isa, v30);

  if (v31)
  {
    v32 = SecCopyErrorMessageString(v31, 0);
    v33 = (__CFString *)v32;
    if (v32)
    {
      v48 = 0;
      v49 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)(v32, &v48);

      v33 = v48;
      v34 = v49;
    }
    else
    {
      v34 = 0;
    }
    swift_bridgeObjectRetain(v34);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (__CFString *)swift_slowAlloc(32, -1);
      v39 = (uint64_t)v48;
      *(_DWORD *)v38 = 136315138;
      if (v34)
        v40 = (uint64_t)v33;
      else
        v40 = 0x206E776F6E6B6E55;
      if (v34)
        v41 = v34;
      else
        v41 = 0xED0000726F727245;
      swift_bridgeObjectRetain(v34);
      v52 = sub_1000906BC(v40, v41, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to save local pairing identity: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
      swift_release(v8);

    }
    else
    {
      swift_release(v8);

      swift_bridgeObjectRelease_n(v34, 2);
    }
  }
  else
  {

    swift_release(v8);
  }
}

uint64_t sub_100154974(const void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v19;

  if (a2)
  {
    v3 = sub_10014D850(a1, a2, 1);
    if ((unint64_t)v3 >> 62)
      goto LABEL_22;
    for (i = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
    {
      v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
      v6 = 4;
      while (1)
      {
        v7 = v6 - 4;
        if ((v3 & 0xC000000000000001) == 0)
          break;
        v8 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
        v9 = __OFADD__(v7, 1);
        v2 = v6 - 3;
        if (v9)
          goto LABEL_21;
LABEL_10:
        v10 = v8[14];
        v11 = v8[15];
        v12 = v5[1];
        v13 = v10 == *v5 && v11 == v12;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, *v5, v12, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v3);
          v14 = v8[5];
          sub_10009B27C(v14, v8[6]);
          swift_release(v8);
          return v14;
        }
        swift_release(v8);
        ++v6;
        if (v2 == i)
          goto LABEL_16;
      }
      v8 = *(_QWORD **)(v3 + 8 * v6);
      swift_retain(v8);
      v9 = __OFADD__(v7, 1);
      v2 = v6 - 3;
      if (!v9)
        goto LABEL_10;
LABEL_21:
      __break(1u);
LABEL_22:
      if (v3 < 0)
        v19 = v3;
      else
        v19 = v3 & 0xFFFFFFFFFFFFFF8;
    }
LABEL_16:
    swift_bridgeObjectRelease(v3);
    v14 = 1;
  }
  else
  {
    v14 = 2;
  }
  v15 = sub_1000ABB30();
  v16 = swift_allocError(&type metadata for DockdError, v15, 0, 0);
  *v17 = v14;
  swift_willThrow(v16);
  return v14;
}

id sub_100154ADC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  NSObject *v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  os_log_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  NSString v49;
  unsigned __int8 v50;
  id result;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  void *v67;
  __n128 v68;
  void *v69;
  os_log_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(_QWORD, _QWORD, _QWORD);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85[3];

  v78 = a4;
  v77 = a5;
  v8 = sub_10009061C(&qword_10026EA20);
  v9 = __chkstk_darwin(v8);
  v74 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v73 = (uint64_t)&v69 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v69 - v16;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BBF0 != -1)
    swift_once(&qword_10026BBF0, sub_10014A740);
  v22 = sub_10008EA50(v18, (uint64_t)qword_10026EF30);
  v23 = *(void (**)(char *))(v19 + 16);
  v76 = v22;
  v23(v21);
  sub_1000ACE4C((uint64_t)a1, (uint64_t)v17, &qword_10026EA20);
  v24 = swift_bridgeObjectRetain_n(a3, 2);
  v25 = Logger.logObject.getter(v24);
  v75 = static os_log_type_t.default.getter(v25);
  v26 = os_log_type_enabled(v25, (os_log_type_t)v75);
  v82 = a2;
  v80 = a1;
  if (v26)
  {
    v71 = v19;
    v72 = a3;
    a2 = swift_slowAlloc(22, -1);
    v69 = (void *)swift_slowAlloc(64, -1);
    v85[0] = v69;
    *(_DWORD *)a2 = 136315394;
    v27 = type metadata accessor for UUID(0);
    a3 = *(_QWORD *)(v27 - 8);
    a1 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a3 + 48);
    v28 = a1(v17, 1, v27);
    v70 = v25;
    if (v28 == 1)
    {
      v29 = 0xE300000000000000;
      v30 = 7104878;
      goto LABEL_10;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)v17, &qword_10026EA20);

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v27 = v79;
    if (a3)
      goto LABEL_12;
    __break(1u);
  }
  sub_1000ACE4C((uint64_t)v17, (uint64_t)v15, &qword_10026EA20);
  v31 = a1(v15, 1, v27);
  if ((_DWORD)v31 == 1)
  {
LABEL_27:
    result = (id)swift_bridgeObjectRelease(v72);
    __break(1u);
    return result;
  }
  v30 = UUID.uuidString.getter(v31);
  v29 = v32;
  (*(void (**)(char *, uint64_t))(a3 + 8))(v15, v27);
LABEL_10:
  v83 = sub_1000906BC(v30, v29, (uint64_t *)v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, a2 + 4, a2 + 12);
  swift_bridgeObjectRelease(v29);
  sub_10009B2C0((uint64_t)v17, &qword_10026EA20);
  *(_WORD *)(a2 + 12) = 2080;
  a3 = v72;
  if (!v72)
  {
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain(v72);
  v33 = v82;
  v83 = sub_1000906BC(v82, a3, (uint64_t *)v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, a2 + 14, a2 + 22);
  swift_bridgeObjectRelease_n(a3, 3);
  v34 = v70;
  _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v75, "updatePeripheralIdentifier(%s, %s)", (uint8_t *)a2, 0x16u);
  v35 = v69;
  swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1, -1);
  v36 = a2;
  a2 = v33;
  swift_slowDealloc(v36, -1, -1);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v18);
  a1 = v80;
LABEL_12:
  v37 = v81;
  v38 = sub_10014EEF4(a2, a3);
  if (v38)
  {
    v39 = v38;
    v40 = swift_bridgeObjectRetain_n(a3, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (void *)swift_slowAlloc(32, -1);
      v85[0] = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(a3);
      v83 = sub_1000906BC(v82, a3, (uint64_t *)v85);
      v37 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Updating peripheral identifier information for %s.", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v55 = v77;
    v54 = v78;
    v56 = type metadata accessor for UUID(0);
    v57 = (uint64_t)v80;
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v80, 1, v56) != 1)
    {
      v58 = v73;
      sub_1000ACE4C(v57, v73, &qword_10026EA20);
      v59 = v39 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess(v39 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, v85, 33, 0);
      sub_1001552D0(v58, v59);
      swift_endAccess(v85);
    }
    *(_QWORD *)(v39 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = v55;
    *(_QWORD *)(v39 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = v54;
    v60 = *(_QWORD *)&v37[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table];
    v61 = qword_10026BB70;
    swift_retain(v60);
    v62 = v82;
    if (v61 != -1)
      swift_once(&qword_10026BB70, sub_1001150BC);
    v63 = qword_1002754E0;
    v64 = swift_weakInit(&v84, 0);
    v83 = v60;
    swift_weakAssign(v64, v63);
    sub_1000D55A0((uint64_t)&v83, (uint64_t)v85, (uint64_t *)&unk_10026F320);
    v83 = 39;
    v84 = (void *)0xE100000000000000;
    swift_bridgeObjectRetain(a3);
    v65._countAndFlagsBits = v62;
    v65._object = (void *)a3;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(a3);
    v66._countAndFlagsBits = 39;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    v67 = v84;
    sub_1001494EC(v39, (uint64_t)&off_100238650, 0x696669746E656469, (void *)0xEA00000000007265, v83, v84, v68);
    swift_bridgeObjectRelease(v67);
    swift_arrayDestroy(&unk_100238670, 3, &type metadata for String);
    sub_10009B2C0((uint64_t)v85, (uint64_t *)&unk_10026F320);
    return (id)swift_release(v39);
  }
  else
  {
    v45 = v74;
    sub_1000ACE4C((uint64_t)a1, v74, &qword_10026EA20);
    v46 = type metadata accessor for UUID(0);
    v47 = *(_QWORD *)(v46 - 8);
    isa = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    }
    v49 = String._bridgeToObjectiveC()();
    v85[0] = 0;
    v50 = objc_msgSend(v37, "savePeripheralIdentifier:forAccessoryIdentifier:error:", isa, v49, v85);

    result = v85[0];
    if ((v50 & 1) == 0)
    {
      v52 = result;
      _convertNSErrorToError(_:)(result);

      return (id)swift_willThrow(v53);
    }
  }
  return result;
}

uint64_t sub_1001552D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026EA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100155318@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10014B3E8(*(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32));
  *a1 = result & 1;
  return result;
}

uint64_t sub_10015535C(uint64_t *a1)
{
  return sub_1001554A4(a1) & 1;
}

unint64_t sub_100155374()
{
  unint64_t result;

  result = qword_10026F340;
  if (!qword_10026F340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10026F340);
  }
  return result;
}

uint64_t sub_1001553B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001553DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1001553EC()
{
  unint64_t result;

  result = qword_10026F350;
  if (!qword_10026F350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_10026F350);
  }
  return result;
}

uint64_t sub_100155430@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100153C6C(*(sqlite3_stmt **)(v1 + 16), a1);
}

uint64_t sub_100155448@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001166EC(v1, a1);
}

unint64_t sub_100155460()
{
  unint64_t result;

  result = qword_10026F390;
  if (!qword_10026F390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10026F390);
  }
  return result;
}

uint64_t sub_1001554A4(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_1001554F8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_10026F3A0);
  sub_10008EA50(v0, (uint64_t)qword_10026F3A0);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x48676E6972696170, 0xEE0072656C646E61);
}

id sub_100155578()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  objc_class *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  objc_super v38;
  _QWORD *v39;

  v37 = type metadata accessor for Logger(0);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v0[OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger];
  v12 = v0;
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x676E6972696170, 0xE700000000000000);
  v32 = OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue;
  v14 = sub_1000ABAF4(0, v13);
  static DispatchQoS.unspecified.getter(v14);
  v39 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10009061C(&qword_10026D000);
  v17 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
  v18 = v15;
  v19 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v16, v17, v5, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  v20 = v7;
  v21 = v4;
  v23 = v36;
  v22 = v37;
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100201690, v10, v20, v21, 0);
  *(_QWORD *)&v12[v32] = v24;
  v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 16))(v23, v11, v22);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "pairing interface open", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v22);
  v29 = (objc_class *)type metadata accessor for dockPairing(0);
  v38.receiver = v12;
  v38.super_class = v29;
  return objc_msgSendSuper2(&v38, "init");
}

void sub_100155990(uint64_t a1, void (*a2)(uint64_t))
{
  id v4;

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v4 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  a2(a1);

}

uint64_t sub_100155A20(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v8 = _Block_copy(aBlock);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;
  _Block_copy(v8);
  v12 = a1;
  a5(v9, v11, v12, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v11);
}

id sub_100155AAC()
{
  return sub_100094D38(0, (uint64_t (*)(void))type metadata accessor for dockPairing);
}

uint64_t sub_100155B0C()
{
  return type metadata accessor for dockPairing(0);
}

uint64_t type metadata accessor for dockPairing(uint64_t a1)
{
  uint64_t result;

  result = qword_10026F3E0;
  if (!qword_10026F3E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for dockPairing);
  return result;
}

uint64_t sub_100155B50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100155BC8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *Strong;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BBF8 != -1)
    swift_once(&qword_10026BBF8, sub_1001554F8);
  v14 = sub_10008EA50(v10, (uint64_t)qword_10026F3A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v33 = a1;
  if (v18)
  {
    v19 = swift_slowAlloc(18, -1);
    v31 = a5;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v32 = a4;
    v22 = v21;
    v34 = v21;
    *(_DWORD *)v20 = 67109378;
    LODWORD(v35) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v20 + 4, v20 + 8);
    *(_WORD *)(v20 + 8) = 2080;
    v35 = a2;
    v36 = a3;
    swift_bridgeObjectRetain(a3);
    v23 = sub_10009061C((uint64_t *)&unk_10026C2C0);
    v24 = String.init<A>(describing:)(&v35, v23);
    v26 = v25;
    v35 = sub_1000906BC(v24, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 10, v20 + 18);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v31, (uint8_t *)v20, 0x12u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a4 = v32;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v28 = a4 + 16;
  swift_beginAccess(v28, &v35, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v28);
  sub_1001767C4(v33);

}

id sub_100155F0C(uint64_t a1)
{
  return sub_100094D38(a1, (uint64_t (*)(void))type metadata accessor for PairingServiceDelegate);
}

uint64_t type metadata accessor for PairingServiceDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd22PairingServiceDelegate, a2);
}

void sub_100155F38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  unint64_t v36;
  id v37;
  NSString v38;
  NSDictionary v39;
  objc_class *v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[80];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v42 - v13;
  v16 = objc_msgSend((id)objc_opt_self(NSXPCConnection, v15), "currentConnection");
  if (v16)
  {
    v17 = v16;
    v45 = a1;
    v18 = objc_msgSend(v16, "processIdentifier");
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v8);
    v19 = swift_bridgeObjectRetain_n(a2, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v44 = v18;
    if (v22)
    {
      v23 = swift_slowAlloc(18, -1);
      v43 = a4;
      v24 = v23;
      v25 = swift_slowAlloc(32, -1);
      v47 = v25;
      *(_DWORD *)v24 = 67109378;
      LODWORD(v46) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4, v24 + 4, v24 + 8);
      *(_WORD *)(v24 + 8) = 2080;
      v42 = v8;
      swift_bridgeObjectRetain(a2);
      v46 = sub_1000906BC(v45, a2, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v24 + 10, v24 + 18);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Client %d requested pairing for %s", (uint8_t *)v24, 0x12u);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      v26 = v24;
      a4 = v43;
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v42);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v39.super.isa = (Class)v17;
    sub_100168740(v44, v17, v45, a2);
    v40 = 0;
    isa = v39.super.isa;
  }
  else
  {
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v8);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed fetching current NSXPCConnection, cannot construct client", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v32 = v31;
    v33 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v33, v48);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v35;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000029;
    *(_QWORD *)(inited + 56) = 0x80000001001FD0F0;
    v36 = sub_1001B0FB8(inited);
    v37 = objc_allocWithZone((Class)NSError);
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    v39.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    v40 = (objc_class *)objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 100, v39.super.isa);

    isa = v40;
  }

  (*(void (**)(uint64_t, objc_class *))(a4 + 16))(a4, v40);
}

void sub_1001563A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  unint64_t v29;
  id v30;
  NSString v31;
  Class isa;
  id v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[80];

  v35 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10009B2C0((uint64_t)v13, &qword_10026EA20);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v7);
    v18 = swift_bridgeObjectRetain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v37 = v22;
      *(_DWORD *)v21 = 136315138;
      v34 = v21 + 4;
      swift_bridgeObjectRetain(a2);
      v36 = sub_1000906BC(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v34, v21 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Invalid pairing token: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v25 = v24;
    v26 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v26, v38);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v28;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000015;
    *(_QWORD *)(inited + 56) = 0x8000000100201670;
    v29 = sub_1001B0FB8(inited);
    v30 = objc_allocWithZone((Class)NSError);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    v33 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, 100, isa);

    (*(void (**)(uint64_t, id))(v35 + 16))(v35, v33);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v23 = *(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000D13FC((uint64_t)v17);

    (*(void (**)(uint64_t, _QWORD))(v35 + 16))(v35, 0);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1001567C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v28 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10023CEA0, v16 + v13, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v17 + v16, (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = sub_100157984;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023CEB8;
  v18 = _Block_copy(aBlock);
  v19 = v14;
  static DispatchQoS.unspecified.getter(v19);
  v29 = _swiftEmptyArrayStorage;
  v20 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v22 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  swift_release(v31);
  return (*(uint64_t (**)(uint64_t, _QWORD))(v28 + 16))(v28, 0);
}

void sub_100156A34(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  unint64_t v45;
  id v46;
  NSString v47;
  Class isa;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t aBlock[5];
  uint64_t v61;
  _QWORD *v62;
  _BYTE v63[88];

  v56 = a4;
  v55 = a3;
  v6 = (_QWORD *)type metadata accessor for Logger(0);
  v58 = *(v6 - 1);
  v59 = v6;
  __chkstk_darwin(v6);
  v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v19 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v50 - v20;
  UUID.init(uuidString:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10009B2C0((uint64_t)v14, &qword_10026EA20);
    (*(void (**)(char *, uint64_t, id))(v58 + 16))(v57, v55 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v59);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = v56;
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      aBlock[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(a2);
      v62 = (_QWORD *)sub_1000906BC(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid pairing token: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, id))(v58 + 8))(v57, v59);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v41 = v40;
    v42 = sub_10009061C((uint64_t *)&unk_10026C2D0);
    inited = swift_initStackObject(v42, v63);
    *(_OWORD *)(inited + 16) = xmmword_1001DE690;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v44;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000015;
    *(_QWORD *)(inited + 56) = 0x8000000100201670;
    v45 = sub_1001B0FB8(inited);
    v46 = objc_allocWithZone((Class)NSError);
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    v49 = objc_msgSend(v46, "initWithDomain:code:userInfo:", v47, 100, isa);

    (*(void (**)(uint64_t, id))(v26 + 16))(v26, v49);
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v29(v21, v14, v15);
    v59 = *(id *)(v55 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    v30 = *(unsigned __int8 *)(v16 + 80);
    v31 = (v30 + 16) & ~v30;
    v32 = swift_allocObject(&unk_10023CE50, v31 + v17, v30 | 7);
    v29((char *)(v32 + v31), v19, v15);
    aBlock[4] = (uint64_t)sub_100157900;
    v61 = v32;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10012357C;
    aBlock[3] = (uint64_t)&unk_10023CE68;
    v33 = _Block_copy(aBlock);
    v34 = v59;
    static DispatchQoS.unspecified.getter(v34);
    v62 = _swiftEmptyArrayStorage;
    v35 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v36 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v37 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    v38 = v36;
    v39 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v38, v37, v54, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v9, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v39);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v52);
    swift_release(v61);
    (*(void (**)(uint64_t, _QWORD))(v56 + 16))(v56, 0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
}

uint64_t sub_10015704C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  id v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_t v60;
  uint64_t v61;
  int v62;
  id v63;
  unsigned int v64;
  _QWORD v65[2];
  uint64_t aBlock;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  void (*v70)();
  uint64_t v71;
  __int128 v72;
  __int128 v73;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v57 - v7;
  v64 = objc_msgSend(a1, "processIdentifier");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "valueForEntitlement:", v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(&v72);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v72 = 0u;
    v73 = 0u;
  }
  v63 = v6;
  sub_10009AEEC((uint64_t)&v72, (uint64_t)&aBlock);
  if (v69)
  {
    v11 = swift_dynamicCast(v65, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v11)
      v12 = v65[0];
    else
      v12 = 0;
    if (v11)
      v13 = v65[1];
    else
      v13 = 0;
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
    v12 = 0;
    v13 = 0;
  }
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "valueForEntitlement:", v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(&v72);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v72 = 0u;
    v73 = 0u;
  }
  v16 = v12;
  sub_10009AEEC((uint64_t)&v72, (uint64_t)&aBlock);
  if (v69)
  {
    if ((swift_dynamicCast(v65, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v65[0] & 1) != 0)
    {
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      v17 = sub_10016D5D0(a1);
      v19 = v18;
      v20 = v63;
      if (qword_10026BBF8 != -1)
        swift_once(&qword_10026BBF8, sub_1001554F8);
      v21 = sub_10008EA50(v2, (uint64_t)qword_10026F3A0);
      (*(void (**)(id, uint64_t, uint64_t))(v3 + 16))(v20, v21, v2);
      swift_bridgeObjectRetain(v19);
      v22 = swift_bridgeObjectRetain_n(v13, 2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      v62 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(28, -1);
        v59 = v17;
        v26 = v25;
        v61 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v72 = v61;
        *(_DWORD *)v26 = 67109634;
        LODWORD(aBlock) = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v26 + 4, v26 + 8);
        *(_WORD *)(v26 + 8) = 2080;
        v58 = v26 + 10;
        aBlock = v12;
        v67 = v13;
        swift_bridgeObjectRetain(v13);
        v27 = sub_10009061C((uint64_t *)&unk_10026C2C0);
        v60 = v23;
        v28 = v27;
        v29 = String.init<A>(describing:)(&aBlock, v27);
        v31 = v30;
        aBlock = sub_1000906BC(v29, v30, (uint64_t *)&v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v67, v58, v26 + 18);
        swift_bridgeObjectRelease_n(v13, 2);
        swift_bridgeObjectRelease(v31);
        *(_WORD *)(v26 + 18) = 2080;
        aBlock = v59;
        v67 = v19;
        swift_bridgeObjectRetain(v19);
        v32 = String.init<A>(describing:)(&aBlock, v28);
        v34 = v33;
        aBlock = sub_1000906BC(v32, v33, (uint64_t *)&v72);
        v16 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v67, v26 + 20, v26 + 28);
        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease(v34);
        v35 = v60;
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v62, "new pairing connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v26, 0x1Cu);
        v36 = v61;
        swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease_n(v13, 2);
      }
      (*(void (**)(id, uint64_t))(v3 + 8))(v20, v2);
      v44 = (void *)objc_opt_self(NSXPCInterface, v43);
      v63 = objc_msgSend(v44, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore24XPCPairingDaemonProtocol_);
      v45 = swift_allocObject(&unk_10023CD88, 24, 7);
      swift_unknownObjectWeakInit(v45 + 16, a1);
      v46 = swift_allocObject(&unk_10023CDB0, 48, 7);
      v47 = v64;
      *(_DWORD *)(v46 + 16) = v64;
      *(_QWORD *)(v46 + 24) = v16;
      *(_QWORD *)(v46 + 32) = v13;
      *(_QWORD *)(v46 + 40) = v45;
      v70 = sub_100157888;
      v71 = v46;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v67 = 1107296256;
      v68 = sub_10012357C;
      v69 = &unk_10023CDC8;
      v48 = _Block_copy(&aBlock);
      v49 = v16;
      v50 = v71;
      swift_bridgeObjectRetain(v13);
      swift_retain(v45);
      swift_release(v50);
      objc_msgSend(a1, "setInvalidationHandler:", v48);
      _Block_release(v48);
      v51 = swift_allocObject(&unk_10023CE00, 48, 7);
      *(_DWORD *)(v51 + 16) = v47;
      *(_QWORD *)(v51 + 24) = v49;
      *(_QWORD *)(v51 + 32) = v13;
      *(_QWORD *)(v51 + 40) = v45;
      v70 = sub_1001578CC;
      v71 = v51;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v67 = 1107296256;
      v68 = sub_10012357C;
      v69 = &unk_10023CE18;
      v52 = _Block_copy(&aBlock);
      v53 = v71;
      swift_retain(v45);
      swift_release(v53);
      objc_msgSend(a1, "setInterruptionHandler:", v52);
      _Block_release(v52);
      v54 = v63;
      objc_msgSend(a1, "setExportedInterface:", v63);
      v55 = objc_msgSend(v44, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP11DockKitCore24XPCPairingClientProtocol_);
      objc_msgSend(a1, "setRemoteObjectInterface:", v55);
      v56 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for dockPairing(0)), "init");
      objc_msgSend(a1, "setExportedObject:", v56);
      objc_msgSend(a1, "resume");
      swift_release(v45);

      return 1;
    }
  }
  else
  {
    sub_10009B2C0((uint64_t)&aBlock, &qword_10026E5F0);
  }
  swift_bridgeObjectRelease(v13);
  if (qword_10026BBF8 != -1)
    swift_once(&qword_10026BBF8, sub_1001554F8);
  v37 = sub_10008EA50(v2, (uint64_t)qword_10026F3A0);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v37, v2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v41 = 67109120;
    LODWORD(aBlock) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v41 + 4, v41 + 8);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "process %d is not entitled for this API. Add entitlements and try again", v41, 8u);
    swift_slowDealloc(v41, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  objc_msgSend(a1, "invalidate");
  return 0;
}

uint64_t sub_100157860()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100157888()
{
  uint64_t v0;

  sub_100155BC8(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Pairing Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1001578B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001578C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001578CC()
{
  uint64_t v0;

  sub_100155BC8(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), "dockaccessoryd: Pairing Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1001578F4()
{
  return sub_100157920((uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

void sub_100157900()
{
  sub_100157998((uint64_t (*)(_QWORD))&type metadata accessor for UUID, sub_1000D1868);
}

uint64_t sub_100157914()
{
  return sub_100157920((uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_100157920(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

void sub_100157984()
{
  sub_100157998((uint64_t (*)(_QWORD))&type metadata accessor for URL, (void (*)(uint64_t))sub_1000C99A8);
}

void sub_100157998(uint64_t (*a1)(_QWORD), void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  sub_100155990(v2 + ((v4 + 16) & ~v4), a2);
}

uint64_t sub_1001579F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  NSURL *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSString *v64;
  NSString *v65;
  Class isa;
  id v67;
  void *countAndFlagsBits;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  Swift::String v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  const void *v92;
  const void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint8_t *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  void (*v124)(char *, uint64_t);
  os_unfair_lock_s *v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t);
  void (*v130)(char *, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  unint64_t v143;
  void (*v144)(char *, _QWORD, uint64_t);
  unsigned int v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  unsigned int (*v157)(char *, uint64_t, uint64_t);
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162[8];
  Swift::String v163;
  char v164[8];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v159 = *(_QWORD *)(v2 - 8);
  v160 = v2;
  v3 = __chkstk_darwin(v2);
  v133 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v139 = (char *)&v127 - v5;
  v6 = sub_10009061C(&qword_10026EA20);
  __chkstk_darwin(v6);
  v147 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Logger(0);
  v153 = *(_QWORD *)(v148 - 8);
  v8 = __chkstk_darwin(v148);
  v152 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v135 = (char *)&v127 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v127 - v12;
  v14 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for URL.DirectoryHint(0);
  v17 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v19 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10009061C(&qword_10026BF70);
  v21 = __chkstk_darwin(v20);
  v158 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v127 - v23;
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v154 = (char *)&v127 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v150 = (char *)&v127 - v30;
  v31 = __chkstk_darwin(v29);
  v140 = (char *)&v127 - v32;
  __chkstk_darwin(v31);
  v156 = (char *)&v127 - v33;
  v141 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v34 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v34);
  os_unfair_lock_lock(v34 + 4);
  swift_release(v34);
  v35 = (_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v164, 1, 0);
  v36 = *v35;
  v134 = v35;
  *v35 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v36);
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D5B8((uint64_t)v24);
  v157 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v157(v24, 1, v25) == 1)
  {
    sub_10009B2C0((uint64_t)v24, &qword_10026BF70);
    goto LABEL_41;
  }
  v149 = v26;
  v155 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v155(v156, v24, v25);
  v163._countAndFlagsBits = 0x6E6F6973726576;
  v163._object = (void *)0xE700000000000000;
  v37 = *(void (**)(_QWORD))(v17 + 104);
  v145 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v38 = v151;
  v144 = (void (*)(char *, _QWORD, uint64_t))v37;
  v37(v19);
  v39 = sub_1000D4CF4();
  v40 = v140;
  v143 = v39;
  URL.appending<A>(path:directoryHint:)(&v163, v19, &type metadata for String);
  v142 = *(void (**)(char *, uint64_t))(v17 + 8);
  v142(v19, v38);
  v41 = swift_bridgeObjectRelease(v163._object);
  static String.Encoding.utf8.getter(v41);
  v42 = String.init(contentsOf:encoding:)(v40, v16);
  v146 = v19;
  v43 = v42;
  v45 = v44;
  v132 = 0;
  v46 = v153;
  v47 = v148;
  v130 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
  v130(v13, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v148);
  v48 = swift_bridgeObjectRetain(v45);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v152 = (char *)swift_slowAlloc(32, -1);
    v163._countAndFlagsBits = (uint64_t)v152;
    *(_DWORD *)v51 = 136315138;
    v138 = v51 + 4;
    swift_bridgeObjectRetain(v45);
    v161 = sub_1000906BC(v43, v45, &v163._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v138, v51 + 12);
    swift_bridgeObjectRelease_n(v45, 3);
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v50, "Current database version string %s", v51, 0xCu);
    v52 = v152;
    swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);

    v53 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v54 = v13;
    v55 = v148;
  }
  else
  {

    swift_bridgeObjectRelease_n(v45, 2);
    v53 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v54 = v13;
    v55 = v47;
  }
  v129 = v53;
  v53(v54, v55);
  v56 = v149;
  v57 = v156;
  v58 = *(id *)(qword_100275568 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  URL._bridgeToObjectiveC()(v59);
  v61 = v60;
  v62 = sub_10009061C(&qword_1002701D8);
  v63 = swift_allocObject(v62, 48, 7);
  *(_OWORD *)(v63 + 16) = xmmword_1001DD7E0;
  *(_QWORD *)(v63 + 32) = NSURLIsRegularFileKey;
  *(_QWORD *)(v63 + 40) = NSURLIsReadableKey;
  type metadata accessor for URLResourceKey(0);
  v64 = NSURLIsRegularFileKey;
  v65 = NSURLIsReadableKey;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  v163._countAndFlagsBits = 0;
  v67 = objc_msgSend(v58, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v61, isa, 21, &v163);

  countAndFlagsBits = (void *)v163._countAndFlagsBits;
  if (!v67)
  {
    v119 = v57;
    v120 = (id)v163._countAndFlagsBits;
    v121 = _convertNSErrorToError(_:)(countAndFlagsBits);

    swift_willThrow(v122);
    swift_errorRelease(v121);
    v123 = *(void (**)(char *, uint64_t))(v56 + 8);
    v123(v140, v25);
    v123(v119, v25);
    goto LABEL_41;
  }
  v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, v25);
  v70 = countAndFlagsBits;

  v71 = *(_QWORD *)(v69 + 16);
  v128 = v69;
  if (v71)
  {
    v131 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore;
    v127 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    v72 = v69 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
    v73 = *(_QWORD *)(v56 + 72);
    v153 = *(_QWORD *)(v56 + 16);
    v74 = (uint64_t)v147;
    v75 = v158;
    v76 = v150;
    v136 = v73;
    ((void (*)(char *, unint64_t, uint64_t))v153)(v158, v72, v25);
    while (1)
    {
      v77 = *(char **)(v56 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v77)(v75, 0, 1, v25);
      if (v157(v75, 1, v25) == 1)
        goto LABEL_40;
      v155(v76, v75, v25);
      v78 = URL.path(percentEncoded:)(1);
      UUID.init(uuidString:)(v78._countAndFlagsBits, v78._object);
      swift_bridgeObjectRelease(v78._object);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v74, 1, v160) == 1)
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v76, v25);
        sub_10009B2C0(v74, &qword_10026EA20);
        goto LABEL_12;
      }
      v152 = v77;
      sub_10009B2C0(v74, &qword_10026EA20);
      v163 = URL.path(percentEncoded:)(1);
      v79 = v146;
      v80 = v151;
      v144(v146, v145, v151);
      v81 = v76;
      v82 = v1;
      v83 = (uint64_t)v154;
      URL.appending<A>(path:directoryHint:)(&v163, v79, &type metadata for String);
      v142(v79, v80);
      swift_bridgeObjectRelease(v163._object);
      v84 = sub_10016ECB0(v83);
      if (!v84)
      {
        v56 = v149;
        v106 = *(void (**)(uint64_t, uint64_t))(v149 + 8);
        v106(v83, v25);
        v106((uint64_t)v81, v25);
        v1 = v82;
        v76 = v81;
        v73 = v136;
        v77 = v152;
        goto LABEL_12;
      }
      v85 = v84;
      v86 = (void *)((uint64_t (*)(void))dispatch thunk of DockCoreAccessory.info.getter)();
      v87 = (uint64_t)v139;
      DockCoreInfo.identifier.getter();

      v88 = sub_10011D00C(v87);
      v90 = v89;
      v91 = *(id *)(v82 + v131);
      v137 = v88;
      v138 = (uint8_t *)v90;
      sub_10011CAC4(v88, v90);
      v93 = v92;
      v95 = sub_10014D850(v94, v92, 1);
      v96 = v95;
      v1 = v82;
      if ((unint64_t)v95 >> 62)
      {
        if (v95 >= 0)
          v95 &= 0xFFFFFFFFFFFFFF8uLL;
        v97 = _CocoaArrayWrapper.endIndex.getter(v95);
      }
      else
      {
        v97 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v76 = v150;
      v77 = v152;
      if (v97)
      {
        v98 = v1;
        if ((v96 & 0xC000000000000001) != 0)
        {
          v118 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v96);

          swift_bridgeObjectRelease(v93);
          swift_unknownObjectRelease(v118);
          swift_bridgeObjectRelease(v96);
        }
        else
        {
          v99 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);

          swift_bridgeObjectRelease(v93);
          swift_bridgeObjectRelease(v96);
          if (!v99)
            __break(1u);
        }
        v100 = v134;
        swift_beginAccess(v134, &v163, 33, 0);
        v101 = v85;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
        v103 = *(_QWORD *)((*v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v102 = *(_QWORD *)((*v100 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v1 = v98;
        if (v103 >= v102 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
        v104 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v101);
        specialized Array._endMutation()(v104);
        swift_endAccess(&v163);
        sub_10009B2FC(v137, (unint64_t)v138);

        v56 = v149;
        v105 = *(void (**)(char *, uint64_t))(v149 + 8);
        v105(v154, v25);
        v76 = v150;
      }
      else
      {

        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v96);
        v107 = v148;
        v108 = ((uint64_t (*)(char *, uint64_t, uint64_t))v130)(v135, v127, v148);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v111 = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Skipping existing paired accessory, no matching entry in keystore.", v111, 2u);
          v112 = v111;
          v107 = v148;
          swift_slowDealloc(v112, -1, -1);
        }

        v113 = v129(v135, v107);
        v114 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v113);
        v115 = (uint64_t)v133;
        DockCoreInfo.identifier.getter();

        v116 = v132;
        sub_10015E068(v115);
        if (v116)
        {
          sub_10009B2FC(v137, (unint64_t)v138);

          swift_errorRelease(v116);
          (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v115, v160);
          v56 = v149;
          v117 = *(void (**)(char *, uint64_t))(v149 + 8);
          v117(v154, v25);
          v117(v76, v25);
          v132 = 0;
          goto LABEL_31;
        }
        v132 = 0;
        sub_10009B2FC(v137, (unint64_t)v138);

        (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v115, v160);
        v56 = v149;
        v105 = *(void (**)(char *, uint64_t))(v149 + 8);
        v105(v154, v25);
      }
      v105(v76, v25);
LABEL_31:
      v74 = (uint64_t)v147;
      v73 = v136;
LABEL_12:
      v72 += v73;
      --v71;
      v75 = v158;
      if (!v71)
        goto LABEL_39;
      ((void (*)(char *, unint64_t, uint64_t))v153)(v158, v72, v25);
    }
  }
  v77 = *(char **)(v56 + 56);
  v75 = v158;
LABEL_39:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v75, 1, 1, v25);
LABEL_40:
  swift_bridgeObjectRelease(v128);
  v124 = *(void (**)(char *, uint64_t))(v56 + 8);
  v124(v140, v25);
  v124(v156, v25);
LABEL_41:
  v125 = *(os_unfair_lock_s **)(v1 + v141);
  swift_retain(v125);
  os_unfair_lock_unlock(v125 + 4);
  return swift_release(v125);
}

uint64_t sub_10015891C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v19;
  _QWORD v20[6];
  uint64_t v21;
  char v22[24];

  v2 = v1;
  LOBYTE(v1) = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v22, 0, 0);
  v9 = *v8;
  v10 = (unint64_t)*v8 >> 62;
  v20[4] = v4;
  v20[5] = v3;
  v20[3] = v6;
  if (v10)
    goto LABEL_11;
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v9);
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v12 = 4;
    v13 = v1 & 1;
    while (1)
    {
      v1 = v12 - 4;
      v14 = (v9 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v9)
          : *(id *)(v9 + 8 * v12);
      v15 = v14;
      v16 = v12 - 3;
      if (__OFADD__(v1, 1))
        break;
      dispatch thunk of DockCoreAccessory.needsMigration.setter(v13);
      sub_10016216C(v15);

      ++v12;
      if (v16 == v11)
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    if (v9 < 0)
      v19 = v9;
    else
      v19 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
  }
LABEL_9:
  swift_bridgeObjectRelease(v9);
  v17 = *(os_unfair_lock_s **)(v2 + v21);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  swift_release(v17);
  return 0;
}

uint64_t sub_100158CD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100158D94(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 9; ; ++i)
  {
    v4 = i - 7;
    if (__OFADD__(i - 8, 1))
      break;
    v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100158DF8()
{
  uint64_t result;

  result = sub_100158E14();
  qword_100275638 = result;
  return result;
}

uint64_t sub_100158E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  char *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[3];
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DockAccessoryDatabase(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100159148();
  v6 = *(id *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification);
  DeviceNotification.state.setter(0);

  v7 = *(id *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification);
  DeviceNotification.state.setter(0);

  v8 = *(id *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  DeviceNotification.state.setter(0);

  sub_1001579F4();
  v9 = type metadata accessor for DockKitFeatures(0);
  v25 = (void *)v9;
  v26 = sub_100090E1C(&qword_10026BC30, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitFeatures, (uint64_t)&protocol conformance descriptor for DockKitFeatures);
  v10 = sub_10008EA68(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v10, enum case for DockKitFeatures.RemoteControl(_:), v9);
  LOBYTE(v9) = isFeatureEnabled(_:)(aBlock);
  sub_100090E88(aBlock);
  if ((v9 & 1) != 0)
  {
    v11 = objc_allocWithZone((Class)type metadata accessor for DockIDSServer(0));
    v12 = sub_10018B3CC(0xD000000000000025, 0x8000000100201EE0);
    v13 = *(void **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer) = v12;

  }
  else
  {
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v0);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Ignoring IDS initialization, feature not enabled.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  v18 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_queue);
  v19 = swift_allocObject(&unk_10023D5D0, 24, 7);
  swift_weakInit(v19 + 16, v5);
  v26 = (uint64_t)sub_100177B64;
  v27 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015AEF4;
  v25 = &unk_10023D5E8;
  v20 = _Block_copy(aBlock);
  swift_release(v27);
  v21 = os_state_add_handler(v18, v20);
  _Block_release(v20);
  v22 = v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle;
  *(_QWORD *)v22 = v21;
  *(_BYTE *)(v22 + 8) = 0;
  return v5;
}

uint64_t (*sub_100159104(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100159148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;

  v1 = v0;
  v2 = sub_10009061C(&qword_10026E0A0);
  v89 = *(_QWORD *)(v2 - 8);
  v90 = v2;
  __chkstk_darwin(v2);
  v88 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin(v4);
  v85 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6573616261746164, 0xE800000000000000);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 2;
  v12 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps) = &_swiftEmptyDictionarySingleton;
  v13 = (_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn) = 0;
  v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  v91 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v15 = swift_allocObject(v91, 20, 7);
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v0 + v14) = v15;
  v16 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore;
  *(_QWORD *)(v0 + v17) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessoryKeystore(0, v18)), "init");
  v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_queue;
  v81 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v81);
  v92 = _swiftEmptyArrayStorage;
  v20 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v83 = v20;
  v21 = sub_10009061C(&qword_10026D000);
  v82 = v21;
  v84 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
  v22 = v21;
  v23 = v6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v22, v84, v6, v20);
  v24 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v25 = v85;
  v86 = *(_QWORD *)(v86 + 104);
  v26 = v87;
  ((void (*)(char *, _QWORD, uint64_t))v86)(v85, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v87);
  *(_QWORD *)(v0 + v19) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100201F10, v11, v8, v25, 0);
  v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
  *(_QWORD *)(v1 + v27) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessoryManager(0)), "init");
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager) = 0;
  v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients;
  *(_QWORD *)(v1 + v28) = sub_1001B0924((uint64_t)_swiftEmptyArrayStorage);
  v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionQueue;
  v30 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v1 + v29) = v30;
  v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue;
  static DispatchQoS.unspecified.getter(v30);
  v92 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v82, v84, v23, v83);
  ((void (*)(char *, uint64_t, uint64_t))v86)(v25, v24, v26);
  *(_QWORD *)(v1 + v31) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x8000000100201F40, v11, v8, v25, 0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_imuUpdateInterval) = 0x3F91111111111111;
  v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_continuityCaptureHeadingMap;
  *(_QWORD *)(v1 + v32) = sub_1001B0A48((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_batteryPollInterval) = 0x404E000000000000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer) = 0;
  v33 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  LOBYTE(v92) = 0;
  v34 = v88;
  DKThreadSafe.init(wrappedValue:)(&v92, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v33, v34, v90);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking) = _swiftEmptyArrayStorage;
  v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators;
  *(_QWORD *)(v1 + v35) = sub_1001B0B54((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator) = 0;
  v36 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  *(_QWORD *)(v1 + v36) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules;
  *(_QWORD *)(v1 + v37) = sub_1001C1AD0((uint64_t)_swiftEmptyArrayStorage);
  v38 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount;
  *(_QWORD *)(v1 + v38) = sub_1001C1ADC((uint64_t)_swiftEmptyArrayStorage);
  v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount;
  *(_QWORD *)(v1 + v39) = sub_1001C1ADC((uint64_t)_swiftEmptyArrayStorage);
  v40 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache;
  *(_QWORD *)(v1 + v40) = sub_1001B0C6C((uint64_t)_swiftEmptyArrayStorage);
  v41 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  *(_QWORD *)(v1 + v41) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v42 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules;
  *(_QWORD *)(v1 + v42) = sub_1001C1BB0((uint64_t)_swiftEmptyArrayStorage);
  v43 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients;
  *(_QWORD *)(v1 + v43) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v44 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  *(_QWORD *)(v1 + v44) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v45 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules;
  *(_QWORD *)(v1 + v45) = sub_1001C1BBC((uint64_t)_swiftEmptyArrayStorage);
  v46 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  *(_QWORD *)(v1 + v46) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v47 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients;
  *(_QWORD *)(v1 + v47) = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v48 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  *(_QWORD *)(v1 + v48) = sub_1001C1CC8((uint64_t)_swiftEmptyArrayStorage);
  v49 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  *(_QWORD *)(v1 + v49) = sub_1001C1CD4((uint64_t)_swiftEmptyArrayStorage);
  v50 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients;
  *(_QWORD *)(v1 + v50) = sub_1001B0C78((uint64_t)_swiftEmptyArrayStorage);
  v51 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions;
  *(_QWORD *)(v1 + v51) = sub_1001B0C84((uint64_t)_swiftEmptyArrayStorage);
  v52 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions;
  *(_QWORD *)(v1 + v52) = sub_1001B0C84((uint64_t)_swiftEmptyArrayStorage);
  v53 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients;
  *(_QWORD *)(v1 + v53) = sub_1001C1DEC((uint64_t)_swiftEmptyArrayStorage);
  v54 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitConfiguration;
  *(_QWORD *)(v1 + v54) = sub_1001B0DAC((uint64_t)&off_100238218);
  v55 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification;
  v56 = (objc_class *)type metadata accessor for DeviceNotification(0);
  v57 = static DeviceNotification.connectedNotificationName.getter();
  v59 = v58;
  v60 = objc_allocWithZone(v56);
  *(_QWORD *)(v1 + v55) = DeviceNotification.init(name:)(v57, v59);
  v61 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification;
  v62 = static DeviceNotification.configNotificationName.getter();
  v64 = v63;
  v65 = objc_allocWithZone(v56);
  *(_QWORD *)(v1 + v61) = DeviceNotification.init(name:)(v62, v64);
  v66 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification;
  v67 = static DeviceNotification.trackingButtonNotificationName.getter();
  v69 = v68;
  v70 = objc_allocWithZone(v56);
  *(_QWORD *)(v1 + v66) = DeviceNotification.init(name:)(v67, v69);
  v71 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v72 = v91;
  v73 = swift_allocObject(v91, 20, 7);
  *(_DWORD *)(v73 + 16) = 0;
  *(_QWORD *)(v1 + v71) = v73;
  v74 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__configLock;
  v75 = swift_allocObject(v72, 20, 7);
  *(_DWORD *)(v75 + 16) = 0;
  *(_QWORD *)(v1 + v74) = v75;
  v76 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v77 = swift_allocObject(v72, 20, 7);
  *(_DWORD *)(v77 + 16) = 0;
  *(_QWORD *)(v1 + v76) = v77;
  v78 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  v79 = swift_allocObject(v72, 20, 7);
  *(_QWORD *)(v1 + v78) = v79;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions) = _swiftEmptyArrayStorage;
  *(_DWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
  return v1;
}

uint64_t sub_100159964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle + 8) & 1) == 0)
    os_state_remove_handler(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle));
  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories));

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId
                                      + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_continuityCaptureHeadingMap));

  v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  v4 = sub_10009061C(&qword_10026E0A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitConfiguration));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__configLock));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask));
  return v0;
}

uint64_t sub_100159D44()
{
  uint64_t v0;

  sub_100159964();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100159D68()
{
  return type metadata accessor for DockAccessoryDatabase(0);
}

uint64_t type metadata accessor for DockAccessoryDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_10026F5C8;
  if (!qword_10026F5C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DockAccessoryDatabase);
  return result;
}

void sub_100159DAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[60];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[3] = "\b";
    v6[4] = "\b";
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[6] = &unk_1001E0580;
    v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[10] = &unk_1001E0598;
    v6[11] = "\b";
    v6[12] = "\b";
    v6[13] = "\b";
    v6[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[15] = &unk_1001E0580;
    v6[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[19] = "\b";
    v6[20] = "\b";
    v6[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[25] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[26] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[27] = "\b";
    sub_10016E8D8();
    if (v5 <= 0x3F)
    {
      v6[28] = *(_QWORD *)(v4 - 8) + 64;
      v6[29] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[30] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[31] = "\b";
      v6[32] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[33] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[34] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[35] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[36] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[37] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[38] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[39] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[40] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[41] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[42] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[43] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[44] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[45] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[46] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[47] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[48] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[49] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[50] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[51] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[52] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[53] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[54] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[55] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[56] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[57] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[58] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[59] = "\b";
      swift_updateClassMetadata2(a1, 256, 60, v6, a1 + 80);
    }
  }
}

void sub_100159EF8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  __n128 v73;
  int64_t v74;
  NSObject *v75;
  NSObject *v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  NSObject **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  NSObject *v100;
  NSObject *v101;
  unint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  int64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  NSObject **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int64_t v123;
  int64_t v124;
  NSObject *v125;
  NSObject *v126;
  unint64_t v127;
  unint64_t v128;
  int64_t v129;
  unint64_t v130;
  int64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  NSObject **v135;
  uint64_t v136;
  uint64_t v137;
  os_unfair_lock_s *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  __n128 v147;
  char *v148;
  char v149[24];
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[16];
  uint64_t v154[4];

  v141 = type metadata accessor for Logger(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v1 = (char *)&v139 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x6574617473, 0xE500000000000000);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "===== State Dump =====", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v148 = v1;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136315138;
    v154[0] = v11;
    v12 = qword_100275320;
    v13 = *(_QWORD *)algn_100275328;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100275328);
    v152 = sub_1000906BC(v12, v13, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v10 + 4, v10 + 12);
    v14 = v13;
    v1 = v148;
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "dockaccessoryd version: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v154[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v152 = sub_1000906BC(0x312E303332, 0xE500000000000000, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DockKitCore version: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Paired accessories:", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = v143;
  v142 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v25 = *(os_unfair_lock_s **)(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v25);
  os_unfair_lock_lock(v25 + 4);
  swift_release(v25);
  v26 = (uint64_t *)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v154, 0, 0);
  v27 = *v26;
  if ((unint64_t)*v26 >> 62)
  {
    if (v27 < 0)
      v47 = *v26;
    else
      v47 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v28 = _CocoaArrayWrapper.endIndex.getter(v47);
    if (v28)
      goto LABEL_11;
  }
  else
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v26);
    if (v28)
    {
LABEL_11:
      if (v28 < 1)
        goto LABEL_110;
      v30 = 0;
      v31 = v27 & 0xC000000000000001;
      *(_QWORD *)&v29 = 136315138;
      v145 = v29;
      v144 = (char *)&type metadata for Any + 8;
      v146 = v28;
      v147.n128_u64[0] = v27;
      do
      {
        if (v31)
          v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v27);
        else
          v43 = *(id *)(v27 + 8 * v30 + 32);
        v44 = v43;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v32 = swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          v152 = v33;
          *(_DWORD *)v32 = v145;
          v34 = objc_msgSend(v44, "description");
          v35 = v31;
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v38 = v37;

          v39 = v36;
          v31 = v35;
          *(_QWORD *)(v32 + 4) = sub_1000906BC(v39, v38, &v152);

          v40 = v38;
          v28 = v146;
          swift_bridgeObjectRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "- %s", (uint8_t *)v32, 0xCu);
          swift_arrayDestroy(v33, 1, v144);
          v41 = v33;
          v1 = v148;
          swift_slowDealloc(v41, -1, -1);
          v42 = v32;
          v27 = v147.n128_u64[0];
          swift_slowDealloc(v42, -1, -1);

        }
        else
        {

        }
        ++v30;
      }
      while (v28 != v30);
    }
  }
  swift_bridgeObjectRelease(v27);
  v48 = *(os_unfair_lock_s **)(v143 + v142);
  swift_retain(v48);
  os_unfair_lock_unlock(v48 + 4);
  v49 = swift_release(v48);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v152 = v53;
    *(_DWORD *)v52 = 136315138;
    v54 = sub_1001AD7C0();
    v56 = v55;
    v150 = sub_1000906BC((uint64_t)v54, v55, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v52 + 4, v52 + 12);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }

  v57 = *(os_unfair_lock_s **)(v143 + v142);
  swift_retain(v57);
  os_unfair_lock_lock(v57 + 4);
  v58 = swift_release(v57);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "XPC Connections:", v61, 2u);
    swift_slowDealloc(v61, -1, -1);
  }

  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Pairing Clients:", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
  }

  v66 = (uint64_t *)(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, &v152, 0, 0);
  v67 = *v66;
  v68 = *(_QWORD *)(*v66 + 64);
  v146 = *v66 + 64;
  v69 = 1 << *(_BYTE *)(v67 + 32);
  v70 = -1;
  if (v69 < 64)
    v70 = ~(-1 << v69);
  v71 = v70 & v68;
  v72 = (unint64_t)(v69 + 63) >> 6;
  v73 = swift_bridgeObjectRetain(v67);
  v74 = 0;
  v73.n128_u64[0] = 138412290;
  v147 = v73;
  while (1)
  {
    if (v71)
    {
      v77 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      v78 = v77 | (v74 << 6);
      goto LABEL_51;
    }
    v79 = v74 + 1;
    if (__OFADD__(v74, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v79 >= v72)
      goto LABEL_53;
    v80 = *(_QWORD *)(v146 + 8 * v79);
    ++v74;
    if (!v80)
    {
      v74 = v79 + 1;
      if (v79 + 1 >= v72)
        goto LABEL_53;
      v80 = *(_QWORD *)(v146 + 8 * v74);
      if (!v80)
      {
        v74 = v79 + 2;
        if (v79 + 2 >= v72)
          goto LABEL_53;
        v80 = *(_QWORD *)(v146 + 8 * v74);
        if (!v80)
          break;
      }
    }
LABEL_50:
    v71 = (v80 - 1) & v80;
    v78 = __clz(__rbit64(v80)) + (v74 << 6);
LABEL_51:
    v76 = *(id *)(*(_QWORD *)(v67 + 56) + 8 * v78);
    v82 = Logger.logObject.getter(v76);
    v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = swift_slowAlloc(12, -1);
      v85 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v84 = v147.n128_u32[0];
      *(_QWORD *)(v84 + 4) = v76;
      *v85 = v76;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "- %@", (uint8_t *)v84, 0xCu);
      v86 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v85, 1, v86);
      swift_slowDealloc(v85, -1, -1);
      v87 = v84;
      v1 = v148;
      swift_slowDealloc(v87, -1, -1);
      v75 = v82;
    }
    else
    {

      v75 = v76;
      v76 = v82;
    }

  }
  v81 = v79 + 3;
  if (v81 < v72)
  {
    v80 = *(_QWORD *)(v146 + 8 * v81);
    if (!v80)
    {
      while (1)
      {
        v74 = v81 + 1;
        if (__OFADD__(v81, 1))
          break;
        if (v74 >= v72)
          goto LABEL_53;
        v80 = *(_QWORD *)(v146 + 8 * v74);
        ++v81;
        if (v80)
          goto LABEL_50;
      }
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    v74 = v81;
    goto LABEL_50;
  }
LABEL_53:
  v88 = swift_release(v67);
  v89 = Logger.logObject.getter(v88);
  v90 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v89, v90))
  {
    v91 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v91 = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "Actuation Clients:", v91, 2u);
    swift_slowDealloc(v91, -1, -1);
  }

  v92 = (uint64_t *)(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, &v150, 0, 0);
  v93 = *v92;
  v94 = *(_QWORD *)(*v92 + 64);
  v146 = *v92 + 64;
  v95 = 1 << *(_BYTE *)(v93 + 32);
  v96 = -1;
  if (v95 < 64)
    v96 = ~(-1 << v95);
  v97 = v96 & v94;
  v98 = (unint64_t)(v95 + 63) >> 6;
  swift_bridgeObjectRetain(v93);
  v99 = 0;
  while (2)
  {
    if (v97)
    {
      v102 = __clz(__rbit64(v97));
      v97 &= v97 - 1;
      v103 = v102 | (v99 << 6);
LABEL_76:
      v101 = *(id *)(*(_QWORD *)(v93 + 56) + 8 * v103);
      v107 = Logger.logObject.getter(v101);
      v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = swift_slowAlloc(12, -1);
        v110 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v109 = v147.n128_u32[0];
        *(_QWORD *)(v109 + 4) = v101;
        *v110 = v101;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "- %@", (uint8_t *)v109, 0xCu);
        v111 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v110, 1, v111);
        swift_slowDealloc(v110, -1, -1);
        v112 = v109;
        v1 = v148;
        swift_slowDealloc(v112, -1, -1);
        v100 = v107;
      }
      else
      {

        v100 = v101;
        v101 = v107;
      }

      continue;
    }
    break;
  }
  v104 = v99 + 1;
  if (__OFADD__(v99, 1))
    goto LABEL_105;
  if (v104 < v98)
  {
    v105 = *(_QWORD *)(v146 + 8 * v104);
    ++v99;
    if (!v105)
    {
      v99 = v104 + 1;
      if (v104 + 1 >= v98)
        goto LABEL_78;
      v105 = *(_QWORD *)(v146 + 8 * v99);
      if (!v105)
      {
        v99 = v104 + 2;
        if (v104 + 2 >= v98)
          goto LABEL_78;
        v105 = *(_QWORD *)(v146 + 8 * v99);
        if (!v105)
        {
          v106 = v104 + 3;
          if (v106 >= v98)
            goto LABEL_78;
          v105 = *(_QWORD *)(v146 + 8 * v106);
          if (!v105)
          {
            while (1)
            {
              v99 = v106 + 1;
              if (__OFADD__(v106, 1))
                break;
              if (v99 >= v98)
                goto LABEL_78;
              v105 = *(_QWORD *)(v146 + 8 * v99);
              ++v106;
              if (v105)
                goto LABEL_75;
            }
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          v99 = v106;
        }
      }
    }
LABEL_75:
    v97 = (v105 - 1) & v105;
    v103 = __clz(__rbit64(v105)) + (v99 << 6);
    goto LABEL_76;
  }
LABEL_78:
  v113 = swift_release(v93);
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v114, v115))
  {
    v116 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v116 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "Sensor Clients:", v116, 2u);
    swift_slowDealloc(v116, -1, -1);
  }

  v117 = (uint64_t *)(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess(v143 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v149, 0, 0);
  v118 = *v117;
  v119 = *(_QWORD *)(*v117 + 64);
  v146 = *v117 + 64;
  v120 = 1 << *(_BYTE *)(v118 + 32);
  v121 = -1;
  if (v120 < 64)
    v121 = ~(-1 << v120);
  v122 = v121 & v119;
  v123 = (unint64_t)(v120 + 63) >> 6;
  swift_bridgeObjectRetain(v118);
  v124 = 0;
  while (2)
  {
    if (v122)
    {
      v127 = __clz(__rbit64(v122));
      v122 &= v122 - 1;
      v128 = v127 | (v124 << 6);
LABEL_101:
      v126 = *(id *)(*(_QWORD *)(v118 + 56) + 8 * v128);
      v132 = Logger.logObject.getter(v126);
      v133 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v132, v133))
      {
        v134 = swift_slowAlloc(12, -1);
        v135 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v134 = v147.n128_u32[0];
        *(_QWORD *)(v134 + 4) = v126;
        *v135 = v126;
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "- %@", (uint8_t *)v134, 0xCu);
        v136 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v135, 1, v136);
        swift_slowDealloc(v135, -1, -1);
        v137 = v134;
        v1 = v148;
        swift_slowDealloc(v137, -1, -1);
        v125 = v132;
      }
      else
      {

        v125 = v126;
        v126 = v132;
      }

      continue;
    }
    break;
  }
  v129 = v124 + 1;
  if (__OFADD__(v124, 1))
    goto LABEL_106;
  if (v129 >= v123)
  {
LABEL_103:
    swift_release(v118);
    v138 = *(os_unfair_lock_s **)(v143 + v142);
    swift_retain(v138);
    os_unfair_lock_unlock(v138 + 4);
    swift_release(v138);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v1, v141);
    return;
  }
  v130 = *(_QWORD *)(v146 + 8 * v129);
  ++v124;
  if (v130)
    goto LABEL_100;
  v124 = v129 + 1;
  if (v129 + 1 >= v123)
    goto LABEL_103;
  v130 = *(_QWORD *)(v146 + 8 * v124);
  if (v130)
    goto LABEL_100;
  v124 = v129 + 2;
  if (v129 + 2 >= v123)
    goto LABEL_103;
  v130 = *(_QWORD *)(v146 + 8 * v124);
  if (v130)
  {
LABEL_100:
    v122 = (v130 - 1) & v130;
    v128 = __clz(__rbit64(v130)) + (v124 << 6);
    goto LABEL_101;
  }
  v131 = v129 + 3;
  if (v131 >= v123)
    goto LABEL_103;
  v130 = *(_QWORD *)(v146 + 8 * v131);
  if (v130)
  {
    v124 = v131;
    goto LABEL_100;
  }
  while (1)
  {
    v124 = v131 + 1;
    if (__OFADD__(v131, 1))
      break;
    if (v124 >= v123)
      goto LABEL_103;
    v130 = *(_QWORD *)(v146 + 8 * v124);
    ++v131;
    if (v130)
      goto LABEL_100;
  }
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
}

uint64_t sub_10015AE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v3;
  uint64_t Strong;
  uint64_t v5;
  _BYTE v7[24];

  if (*(_DWORD *)(a1 + 16) == 3)
  {
    v2 = a2 + 16;
    v3 = swift_beginAccess(a2 + 16, v7, 0, 0);
    Strong = swift_weakLoadStrong(v2, v3);
    if (Strong)
    {
      v5 = Strong;
      sub_100159EF8();
      swift_release(v5);
    }
  }
  return 0;
}

uint64_t sub_10015AEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10015AF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
  v8 = swift_retain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v28 = v4;
    v11 = swift_slowAlloc(12, -1);
    v29 = v2;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc(32, -1);
    v31[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v27 = v12 + 4;
    v14 = *(_QWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 72);
    swift_bridgeObjectRetain(v15);
    v30 = sub_1000906BC(v14, v15, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v27, v12 + 12);
    swift_release(a1);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "registering transaction %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v16 = v12;
    v2 = v29;
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v28);
  }
  else
  {

    swift_release(a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v18 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v18);
  os_unfair_lock_lock(v18 + 4);
  swift_release(v18);
  v19 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions, v31, 33, 0);
  v20 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, a1);
  specialized Array._endMutation()(v23);
  swift_endAccess(v31);
  v24 = *(os_unfair_lock_s **)(v2 + v17);
  swift_retain(v24);
  os_unfair_lock_unlock(v24 + 4);
  return swift_release(v24);
}

void sub_10015B1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t aBlock[5];
  _QWORD *v67;
  char v68[32];

  v57 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v52 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v50 = v0;
  v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions, v68, 1, 0);
  v48 = v8;
  v9 = *v8;
  if (!((unint64_t)*v8 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = swift_bridgeObjectRetain(*v8);
    if (v10)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    v45 = *v48;
    *v48 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v45);
    v46 = *(os_unfair_lock_s **)(v50 + v49);
    swift_retain(v46);
    os_unfair_lock_unlock(v46 + 4);
    swift_release(v46);
    return;
  }
  if (v9 < 0)
    v44 = *v8;
  else
    v44 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v44);
  if (!v10)
    goto LABEL_22;
LABEL_3:
  if (v10 >= 1)
  {
    v12 = 0;
    v64 = v50 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    v63 = v9 & 0xC000000000000001;
    v11.n128_u64[0] = 136315138;
    v59 = v11;
    v58 = (char *)&type metadata for Any + 8;
    v61 = v9;
    v62 = v6;
    v60 = v10;
    v51 = v4;
    do
    {
      if (v63)
      {
        v14 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v9);
      }
      else
      {
        v14 = *(_QWORD **)(v9 + 8 * v12 + 32);
        swift_retain(v14);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v64, v3);
      v15 = swift_retain(v14);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        aBlock[0] = v19;
        *(_DWORD *)v18 = v59.n128_u32[0];
        v20 = v14[8];
        v21 = v14[9];
        swift_bridgeObjectRetain(v21);
        *(_QWORD *)(v18 + 4) = sub_1000906BC(v20, v21, aBlock);
        swift_release(v14);
        v22 = v21;
        v10 = v60;
        swift_bridgeObjectRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping txn %s", (uint8_t *)v18, 0xCu);
        swift_arrayDestroy(v19, 1, v58);
        v23 = v19;
        v6 = v62;
        swift_slowDealloc(v23, -1, -1);
        v24 = v18;
        v9 = v61;
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

        swift_release(v14);
      }
      v25 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (!v14[2])
        goto LABEL_5;
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "stopping txn", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      v29 = (void *)v14[3];
      if (v29)
      {
        aBlock[4] = (uint64_t)sub_1000ED900;
        v67 = v14;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10012357C;
        aBlock[3] = (uint64_t)&unk_10023D458;
        v30 = _Block_copy(aBlock);
        swift_retain(v14);
        v31 = v29;
        v32 = v3;
        v33 = v52;
        static DispatchQoS.unspecified.getter(v31);
        v65 = _swiftEmptyArrayStorage;
        v34 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v35 = sub_10009061C((uint64_t *)&unk_10026BF60);
        v36 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
        v37 = v55;
        v38 = v57;
        v39 = v34;
        v6 = v62;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v35, v36, v57, v39);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v30);
        _Block_release(v30);

        v40 = v37;
        v41 = v38;
        v10 = v60;
        v9 = v61;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v41);
        v42 = v33;
        v3 = v32;
        v4 = v51;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v54);
        v43 = v67;
        swift_release(v14);
        v13 = v43;
      }
      else
      {
LABEL_5:
        v13 = v14;
      }
      swift_release(v13);
      ++v12;
    }
    while (v10 != v12);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_10015B790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
  v15 = (_QWORD *)swift_allocObject(&unk_10023D4E0, 56, 7);
  v15[2] = v4;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_100177AF8;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023D4F8;
  v16 = _Block_copy(aBlock);
  swift_retain(v4);
  swift_bridgeObjectRetain(a2);
  v17 = sub_1000BC8F4(a3, a4);
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v20 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v9, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  return swift_release(v27);
}

id sub_10015B9B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  id result;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  id v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD *);
  uint64_t *v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t aBlock[5];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v68 = a2;
  v69 = a5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v65 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v66 = (char *)&v61 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v61 - v15;
  v67 = a1;
  v17 = a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v18 = v14;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19((char *)&v61 - v15, v17, v14);
  v20 = swift_bridgeObjectRetain_n(a3, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v62 = v18;
    v23 = swift_slowAlloc(12, -1);
    v63 = a4;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v64 = v17;
    v26 = v19;
    v27 = v25;
    aBlock[0] = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a3);
    v72 = sub_1000906BC(v68, a3, aBlock);
    v18 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Registering motion for client %s", v24, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v28 = v27;
    v19 = v26;
    v17 = v64;
    swift_slowDealloc(v28, -1, -1);
    v29 = v24;
    a4 = v63;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
  }

  v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  v30(v16, v18);
  v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager;
  v32 = v67;
  result = *(id *)(v67 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager);
  if (!result)
  {
    v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v66, v17, v18);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      v64 = v17;
      v38 = v19;
      v39 = v18;
      v40 = v37;
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Creating motion manager", v37, 2u);
      v41 = v40;
      v18 = v39;
      v19 = v38;
      v17 = v64;
      swift_slowDealloc(v41, -1, -1);
    }

    v30(v66, v18);
    v42 = objc_msgSend(objc_allocWithZone((Class)CMMotionManager), "init");
    v43 = *(void **)(v32 + v31);
    *(_QWORD *)(v32 + v31) = v42;

    result = *(id *)(v32 + v31);
    if (!result)
      goto LABEL_22;
  }
  if ((objc_msgSend(result, "isDeviceMotionActive") & 1) != 0)
    goto LABEL_17;
  result = *(id *)(v32 + v31);
  if (!result)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (objc_msgSend(result, "isDeviceMotionAvailable"))
  {
    v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v65, v17, v18);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = v18;
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "starting motion updates", v48, 2u);
      v49 = v48;
      v18 = v47;
      swift_slowDealloc(v49, -1, -1);
    }

    v30(v65, v18);
    result = *(id *)(v32 + v31);
    if (result)
    {
      objc_msgSend(result, "setDeviceMotionUpdateInterval:", 0.0166666667);
      result = *(id *)(v32 + v31);
      if (result)
      {
        objc_msgSend(result, "setShowsDeviceMovementDisplay:", 1);
        v50 = *(void **)(v32 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionQueue);
        result = objc_msgSend(v50, "setMaxConcurrentOperationCount:", 1);
        v51 = *(void **)(v32 + v31);
        if (v51)
        {
          aBlock[4] = (uint64_t)sub_100177B2C;
          v71 = v32;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_10009F2B8;
          aBlock[3] = (uint64_t)&unk_10023D548;
          v52 = _Block_copy(aBlock);
          v53 = v71;
          v54 = v51;
          swift_retain(v32);
          swift_release(v53);
          objc_msgSend(v54, "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:", 4, v50, v52);
          _Block_release(v52);

          goto LABEL_17;
        }
LABEL_25:
        __break(1u);
        return result;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  if (a4)
  {
    v55 = swift_allocObject(&unk_10023D530, 32, 7);
    v56 = v69;
    *(_QWORD *)(v55 + 16) = a4;
    *(_QWORD *)(v55 + 24) = v56;
    v57 = sub_100177B08;
  }
  else
  {
    v57 = 0;
    v55 = 0;
  }
  v58 = (uint64_t *)(v32 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients);
  swift_beginAccess(v32 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients, aBlock, 33, 0);
  swift_bridgeObjectRetain(a3);
  sub_1000BC8F4(a4, v69);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v58);
  v72 = *v58;
  *v58 = 0x8000000000000000;
  sub_1001BC290((uint64_t)v57, v55, v68, a3, isUniquelyReferenced_nonNull_native);
  v60 = *v58;
  *v58 = v72;
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(a3);
  return (id)swift_endAccess(aBlock);
}

uint64_t sub_10015BF40(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void **aBlock;
  _QWORD v40[4];
  uint64_t v41;
  _BYTE v42[8];

  v6 = type metadata accessor for Logger(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_weakInit(v42, a3);
  if (a2)
  {
    Strong = swift_weakLoadStrong(v17, v18);
    if (Strong)
    {
      v20 = Strong;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v8, Strong + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v37);
      swift_errorRetain(a2);
      swift_release(v20);
      swift_errorRetain(a2);
      v21 = swift_errorRetain(a2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v24 = 138412290;
        swift_errorRetain(a2);
        v26 = _swift_stdlib_bridgeErrorToNSError(a2);
        aBlock = (void **)v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v40, v24 + 4, v24 + 12);
        *v25 = v26;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "device motion update failed with error %@", v24, 0xCu);
        v27 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v25, 1, v27);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }
      swift_errorRelease(a2);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v37);
    }
    return swift_weakDestroy(v42);
  }
  else
  {
    v37 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
    v28 = swift_allocObject(&unk_10023D580, 32, 7);
    *(_QWORD *)(v28 + 16) = a3;
    *(_QWORD *)(v28 + 24) = a1;
    v40[3] = sub_100177B38;
    v41 = v28;
    aBlock = _NSConcreteStackBlock;
    v40[0] = 1107296256;
    v40[1] = sub_10012357C;
    v40[2] = &unk_10023D598;
    v29 = _Block_copy(&aBlock);
    v30 = a1;
    v31 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v31);
    v38 = _swiftEmptyArrayStorage;
    v32 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v34 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v33, v34, v9, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v29);
    _Block_release(v29);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_weakDestroy(v42);
    return swift_release(v41);
  }
}

void sub_10015C308(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void (*v17)(void **);
  BOOL v18;
  uint64_t v19;
  id v20;
  void *v21;
  _BYTE v22[24];

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients, v22, 0, 0);
  v4 = *v3;
  v5 = *v3 + 64;
  v6 = 1 << *(_BYTE *)(*v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(*v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(*v3);
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_20;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v9)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_25;
      v14 = *(_QWORD *)(v5 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v9)
          goto LABEL_25;
        v14 = *(_QWORD *)(v5 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_20:
    v16 = *(_QWORD *)(v4 + 56) + 16 * v12;
    v17 = *(void (**)(void **))v16;
    if (*(_QWORD *)v16)
      v18 = a2 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = *(_QWORD *)(v16 + 8);
      v21 = a2;
      sub_1000BC8F4((uint64_t)v17, v19);
      v20 = a2;
      v17(&v21);

      sub_1000B1410((uint64_t)v17, v19);
    }
  }
  v15 = v13 + 3;
  if (v15 >= v9)
  {
LABEL_25:
    swift_release(v4);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
}

void sub_10015C4B8(uint64_t a1, int64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
    v15 = (_QWORD *)swift_allocObject(&unk_10023D490, 40, 7);
    v15[2] = v3;
    v15[3] = a1;
    v15[4] = a2;
    aBlock[4] = sub_100177A94;
    v25 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10012357C;
    aBlock[3] = &unk_10023D4A8;
    v16 = _Block_copy(aBlock);
    swift_retain(v3);
    swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v17);
    v23 = _swiftEmptyArrayStorage;
    v18 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = v8;
    v20 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v21 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v20, v21, v7, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_release(v25);
  }
  else
  {
    sub_10015C70C(a1, a2);
  }
}

void sub_10015C6E4(uint64_t a1, uint64_t a2, int64_t a3)
{
  sub_10015C70C(a2, a3);
}

void sub_10015C70C(uint64_t a1, int64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char v19;
  uint64_t (*v20)(unint64_t, char *, uint64_t);
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __n128 v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(unint64_t, char *, uint64_t);
  uint64_t v71;
  uint64_t v72[3];

  v3 = v2;
  v66 = a1;
  v67 = a2;
  v4 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v62 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v62 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v20 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v68 + 16);
  v69 = &v3[OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger];
  v70 = v20;
  ((void (*)(char *))v20)(v12);
  v21 = v67;
  v22 = swift_bridgeObjectRetain_n(v67, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v65 = v4;
  v64.n128_u64[0] = (unint64_t)v10;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v72[0] = v27;
    v63 = v3;
    *(_DWORD *)v26 = 136315138;
    v21 = v67;
    swift_bridgeObjectRetain(v67);
    v28 = v66;
    v71 = sub_1000906BC(v66, v21, v72);
    v3 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v21, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unregistering motion for client %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v29 = v27;
    v4 = v65;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v68 = *(_QWORD *)(v68 + 8);
    ((void (*)(char *, uint64_t))v68)(v12, v4);
  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
    v68 = *(_QWORD *)(v68 + 8);
    ((void (*)(char *, uint64_t))v68)(v12, v4);
    v28 = v66;
  }
  v30 = &v3[OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients];
  swift_beginAccess(&v3[OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients], v72, 33, 0);
  v31 = sub_1001B4048(v28, v21);
  v33 = v32;
  swift_endAccess(v72);
  if (v31 >= 2)
    sub_1001779F8(v31, v33);
  v34 = *(_QWORD *)v30;
  if (!*(_QWORD *)(*(_QWORD *)v30 + 16))
  {
    v55 = v64.n128_u64[0];
    v56 = v70(v64.n128_u64[0], v69, v4);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Stopping device motion updates", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    ((void (*)(unint64_t, uint64_t))v68)(v55, v4);
    v60 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager;
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager], "stopDeviceMotionUpdates");
    v61 = *(void **)&v3[v60];
    *(_QWORD *)&v3[v60] = 0;

    return;
  }
  v35 = *(_QWORD *)(v34 + 64);
  v66 = v34 + 64;
  v36 = 1 << *(_BYTE *)(v34 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v67 = (unint64_t)(v36 + 63) >> 6;
  v39 = swift_bridgeObjectRetain(v34);
  v40 = 0;
  v39.n128_u64[0] = 136315138;
  v64 = v39;
  v63 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v38)
    {
      v41 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v42 = v41 | (v40 << 6);
      goto LABEL_33;
    }
    v43 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v43 >= v67)
      goto LABEL_35;
    v44 = *(_QWORD *)(v66 + 8 * v43);
    ++v40;
    if (!v44)
    {
      v40 = v43 + 1;
      if (v43 + 1 >= v67)
        goto LABEL_35;
      v44 = *(_QWORD *)(v66 + 8 * v40);
      if (!v44)
      {
        v40 = v43 + 2;
        if (v43 + 2 >= v67)
          goto LABEL_35;
        v44 = *(_QWORD *)(v66 + 8 * v40);
        if (!v44)
        {
          v40 = v43 + 3;
          if (v43 + 3 >= v67)
            goto LABEL_35;
          v44 = *(_QWORD *)(v66 + 8 * v40);
          if (!v44)
          {
            v40 = v43 + 4;
            if (v43 + 4 >= v67)
              goto LABEL_35;
            v44 = *(_QWORD *)(v66 + 8 * v40);
            if (!v44)
              break;
          }
        }
      }
    }
LABEL_32:
    v38 = (v44 - 1) & v44;
    v42 = __clz(__rbit64(v44)) + (v40 << 6);
LABEL_33:
    v46 = (uint64_t *)(*(_QWORD *)(v34 + 48) + 16 * v42);
    v48 = *v46;
    v47 = v46[1];
    v70((unint64_t)v7, v69, v4);
    v49 = swift_bridgeObjectRetain_n(v47, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v72[0] = v53;
      *(_DWORD *)v52 = v64.n128_u32[0];
      swift_bridgeObjectRetain(v47);
      *(_QWORD *)(v52 + 4) = sub_1000906BC(v48, v47, v72);
      swift_bridgeObjectRelease_n(v47, 3);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Client remaining: %s", (uint8_t *)v52, 0xCu);
      swift_arrayDestroy(v53, 1, v63);
      v54 = v53;
      v4 = v65;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
    }
    ((void (*)(char *, uint64_t))v68)(v7, v4);
  }
  v45 = v43 + 5;
  if (v45 >= v67)
  {
LABEL_35:
    swift_release(v34);
    return;
  }
  v44 = *(_QWORD *)(v66 + 8 * v45);
  if (v44)
  {
    v40 = v45;
    goto LABEL_32;
  }
  while (1)
  {
    v40 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v40 >= v67)
      goto LABEL_35;
    v44 = *(_QWORD *)(v66 + 8 * v40);
    ++v45;
    if (v44)
      goto LABEL_32;
  }
LABEL_42:
  __break(1u);
}

id sub_10015CDA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager);
  if (result)
    result = objc_msgSend(result, "deviceMotion");
  *a2 = result;
  return result;
}

void sub_10015CDF4()
{
  uint64_t v0;
  uint64_t v1;
  dispatch_semaphore_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[5];
  uint64_t v10;

  v1 = v0;
  v2 = dispatch_semaphore_create(0);
  v3 = swift_allocObject(&unk_10023D3F0, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_1001779E4;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10012357C;
  v9[3] = &unk_10023D408;
  v4 = _Block_copy(v9);
  v5 = v10;
  swift_retain(v1);
  v6 = v2;
  swift_release(v5);
  AudioServicesPlaySystemSoundWithCompletion(0x424u, v4);
  _Block_release(v4);
  OS_dispatch_semaphore.wait()();
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v7 = swift_allocObject(&unk_10023D440, 32, 7);
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v6;
  swift_retain(v1);
  v8 = v6;
  sub_10015D5FC(0xD000000000000010, 0x8000000100201E20, (uint64_t)sub_1001779F0, v7);
  swift_release(v7);
  OS_dispatch_semaphore.wait()();

}

Swift::Int sub_10015CF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "done playing pong sound", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return OS_dispatch_semaphore.signal()();
}

Swift::Int sub_10015D074(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  if (!a2)
  {
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v30 - v12, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v7);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "Launched camera app successfully", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28 = v13;
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v7);
  v14 = a2;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28 = v11;
LABEL_8:
    v27(v28, v7);
    return OS_dispatch_semaphore.signal()();
  }
  v17 = (uint8_t *)swift_slowAlloc(12, -1);
  v31 = swift_slowAlloc(32, -1);
  v35 = v31;
  v32 = v7;
  *(_DWORD *)v17 = 136315138;
  v30 = v17 + 4;
  v18 = objc_msgSend(v14, "localizedDescription");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v33 = a4;
  v21 = v20;

  v34 = sub_1000906BC(v19, v21, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v30, v17 + 12);

  swift_bridgeObjectRelease(v21);
  _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to launch Camera app with error: %s", v17, 0xCu);
  v22 = v31;
  swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v32);
  return OS_dispatch_semaphore.signal()();
}

void sub_10015D34C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap, v17, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v2);
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    if ((sub_1000F85F4(v15, v16) & 1) != 0)
    {
LABEL_22:
      swift_release(v2);
      return;
    }
    swift_bridgeObjectRelease(v16);
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v7)
      goto LABEL_22;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_22;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_22;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v7)
    goto LABEL_22;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_22;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10015D4FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  os_unfair_lock_s *v12;
  _BYTE v14[24];

  v1 = v0;
  sub_1000F8FD8();
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v7 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v7);
    os_unfair_lock_lock(v7 + 4);
    swift_release(v7);
    v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps);
    swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps, v14, 0, 0);
    v9 = *v8;
    if (*(_QWORD *)(v9 + 16))
    {
      swift_bridgeObjectRetain(v9);
      sub_100145264(v4, v5);
      v11 = v10;
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v9);
    }
    else
    {
      swift_bridgeObjectRelease(v5);
      v11 = 0;
    }
    v12 = *(os_unfair_lock_s **)(v1 + v6);
    swift_retain(v12);
    os_unfair_lock_unlock(v12 + 4);
    swift_release(v12);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void sub_10015D5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v13;
  Class isa;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void **aBlock;
  uint64_t v23;
  void (*v24)(uint64_t, void *, void *);
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  _QWORD *v27;
  char v28[104];

  v9 = (id)SBSCreateOpenApplicationService();
  v10 = sub_10009061C((uint64_t *)&unk_10026CFB0);
  inited = swift_initStackObject(v10, v28);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
  v23 = v12;
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  v13 = sub_1001B1560(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  v16 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions, v15), "optionsWithDictionary:", isa);

  if (v9)
  {
    v17 = v9;
    v18 = String._bridgeToObjectiveC()();
    v19 = (_QWORD *)swift_allocObject(&unk_10023D3A0, 56, 7);
    v19[2] = v4;
    v19[3] = a1;
    v19[4] = a2;
    v19[5] = a3;
    v19[6] = a4;
    v26 = sub_1001779D0;
    v27 = v19;
    aBlock = _NSConcreteStackBlock;
    v23 = 1107296256;
    v24 = sub_10009F2B8;
    v25 = &unk_10023D3B8;
    v20 = _Block_copy(&aBlock);
    v21 = v27;
    swift_retain(v4);
    swift_bridgeObjectRetain(a2);
    swift_retain(a4);
    swift_release(v21);
    objc_msgSend(v17, "openApplication:withOptions:completion:", v18, v16, v20);

    _Block_release(v20);
    v16 = v18;
  }

}

void sub_10015D800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  char v34[8];
  uint64_t v35;
  uint64_t v36;

  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v31 = a1;
    v32 = a7;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v14);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v30 = a6;
      v22 = v21;
      v29 = swift_slowAlloc(64, -1);
      v36 = v29;
      *(_DWORD *)v22 = 136315394;
      swift_bridgeObjectRetain(a5);
      v35 = sub_1000906BC(a4, a5, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v22 + 12) = 2080;
      swift_getErrorValue(a2, v34, v33);
      v23 = Error.localizedDescription.getter(v33[1], v33[2]);
      v25 = v24;
      v35 = sub_1000906BC(v23, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to launch %s: %s", (uint8_t *)v22, 0x16u);
      v26 = v29;
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v22;
      a6 = v30;
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v28 = (void *)_convertErrorToNSError(_:)(a2);
    a1 = v31;
  }
  else
  {
    v28 = 0;
  }
  a6(a1, v28);

}

void sub_10015DAB8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v15[24];

  v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v15, 0, 0);
  v6 = *v5;
  v7 = a1;
  swift_bridgeObjectRetain(v6);
  v9 = (uint64_t)sub_100172594(v8, (uint64_t)v7);
  swift_bridgeObjectRelease(v6);

  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v11 = v9;
    else
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v9);
    if (!v12)
      goto LABEL_11;
    swift_bridgeObjectRetain(v9);
    v13 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v9);
    if (!v13)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease(v9);
    v14 = *(os_unfair_lock_s **)(v1 + v3);
    swift_retain(v14);
    os_unfair_lock_unlock(v14 + 4);
    swift_release(v14);
    return;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v9 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_10015DC38(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  v2 = v1;
  v24 = type metadata accessor for Logger(0);
  v26 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v28, 33, 0);
  v11 = a1;
  v12 = 0;
  v13 = sub_100172848(v10, (uint64_t)v11);

  v14 = *v10;
  if (!((unint64_t)*v10 >> 62))
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15 >= v13)
      goto LABEL_3;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 < 0)
    v21 = *v10;
  else
    v21 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v10);
  v15 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v14);
  if (v15 < v13)
    goto LABEL_15;
LABEL_3:
  sub_100172BA0(v13, v15, (uint64_t (*)(_QWORD))&type metadata accessor for DockCoreAccessory);
  v16 = swift_endAccess(v28);
  DockCoreInfo.identifier.getter(v16);
  sub_10015E068((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = *v10;
  if (!((unint64_t)*v10 >> 62))
  {
    v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
LABEL_16:
  if (v12 < 0)
    v22 = v12;
  else
    v22 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v17 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v12);
LABEL_5:
  v18 = *(os_unfair_lock_s **)(v2 + v27);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  result = swift_release(v18);
  if (!v17)
  {
    if (qword_10026BC20 != -1)
      result = swift_once(&qword_10026BC20, sub_1001A3078);
    v20 = *(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
    if (v20)
    {
      swift_retain(*(_QWORD *)(qword_1002757B0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan));
      sub_1000DAD94(1);
      return swift_release(v20);
    }
  }
  return result;
}

uint64_t sub_10015E068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  NSURL *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  id v30;
  uint64_t (*v31)(char *, uint64_t);
  id v32;
  id v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v35[1] = a1;
  v1 = type metadata accessor for Logger(0);
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D5B8((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10009B2C0((uint64_t)v10, &qword_10026BF70);
    v16 = v36;
    v15 = v37;
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 16))(v3, v35[0] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v37);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to remove paired accessory: Unable to get library path", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v3, v15);
  }
  else
  {
    v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v38 = (id)UUID.uuidString.getter(v22);
    v39 = v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.notDirectory(_:), v4);
    v24 = sub_1000D4CF4();
    URL.append<A>(component:directoryHint:)(&v38, v7, &type metadata for String, v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease(v39);
    v25 = *(id *)(qword_100275568 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
    URL._bridgeToObjectiveC()(v26);
    v28 = v27;
    v38 = 0;
    v29 = objc_msgSend(v25, "removeItemAtURL:error:", v27, &v38);

    v30 = v38;
    if (v29)
    {
      v31 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
      v32 = v38;
      return v31(v14, v11);
    }
    else
    {
      v33 = v38;
      _convertNSErrorToError(_:)(v30);

      swift_willThrow(v34);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t sub_10015E3E4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  void *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  void *v40;
  os_unfair_lock_s *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  NSObject *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  void **aBlock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  void (*v68)();
  uint64_t v69;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v63 = (uint8_t *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v58 - v15;
  if (a1)
  {
    v60 = v5;
    v17 = a1;
    sub_10015DAB8(v17);
    if (v18)
    {
      v19 = v18;
      v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v21 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain(v21);
      os_unfair_lock_lock(v21 + 4);
      swift_release(v21);
      v61 = v7;
      v22 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = v19;
      v59 = v19;

      v23 = 1;
      *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 1;
      v24 = *(os_unfair_lock_s **)(v2 + v20);
      swift_retain(v24);
      os_unfair_lock_unlock(v24 + 4);
      swift_release(v24);
      sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
      v25 = (void *)static OS_dispatch_queue.main.getter();
      v68 = sub_10017797C;
      v69 = v2;
      aBlock = _NSConcreteStackBlock;
      v65 = 1107296256;
      v66 = sub_10012357C;
      v67 = &unk_10023D368;
      v26 = _Block_copy(&aBlock);
      v27 = v69;
      swift_retain(v2);
      v28 = swift_release(v27);
      static DispatchQoS.unspecified.getter(v28);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v29 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v30 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v31 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
      v32 = v63;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v30, v31, v4, v29);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v32, v26);
      _Block_release(v26);

      (*(void (**)(uint8_t *, uint64_t))(v60 + 8))(v32, v4);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v61);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
      v50 = v17;
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v62 = swift_slowAlloc(8, -1);
        v63 = v53;
        aBlock = (void **)&v50->isa;
        *(_DWORD *)v53 = 138412290;
        v50 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v65, v53 + 4, v53 + 12);
        v54 = v62;
        *(_QWORD *)v62 = a1;

        v55 = v63;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Can't select %@, it's unknown", v63, 0xCu);
        v56 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v54, 1, v56);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {

        v51 = v50;
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      return 0;
    }
  }
  else
  {
    v33 = v5;
    v61 = v7;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Set connected to nil", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v38 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v39 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v39);
    os_unfair_lock_lock(v39 + 4);
    swift_release(v39);
    v40 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = 0;

    *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 2;
    v41 = *(os_unfair_lock_s **)(v2 + v38);
    swift_retain(v41);
    os_unfair_lock_unlock(v41 + 4);
    swift_release(v41);
    sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
    v42 = (void *)static OS_dispatch_queue.main.getter();
    v68 = sub_10017795C;
    v69 = v2;
    aBlock = _NSConcreteStackBlock;
    v65 = 1107296256;
    v66 = sub_10012357C;
    v67 = &unk_10023D340;
    v43 = _Block_copy(&aBlock);
    v44 = v69;
    swift_retain(v2);
    v45 = swift_release(v44);
    static DispatchQoS.unspecified.getter(v45);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v46 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = sub_10009061C((uint64_t *)&unk_10026BF60);
    v48 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
    v49 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v47, v48, v4, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v49, v43);
    _Block_release(v43);

    (*(void (**)(uint8_t *, uint64_t))(v33 + 8))(v49, v4);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v61);
    return 1;
  }
  return v23;
}

void sub_10015EA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  id v8;

  v6 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  if (TrackingButtonState.rawValue.getter(a2) < 0)
  {
    v7 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v7, 3451, 0);
    __break(1u);
  }
  else
  {
    ((void (*)(void))DeviceNotification.state.setter)();

    v8 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification);
    DeviceNotification.state.setter(a3);

  }
}

void sub_10015EB50(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint8_t *v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  _QWORD *v45;
  uint8_t *v46;
  NSObject *v47;
  uint64_t v48;
  char v49;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v45 - v9;
  if (a1)
  {
    v11 = a1;
    sub_10015DAB8(v11);
    if (v12)
    {
      v13 = v12;
      v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain(v15);
      os_unfair_lock_lock(v15 + 4);
      swift_release(v15);
      v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked;
      v17 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked) = v13;
      v18 = v13;

      v19 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
      if (!v19)
      {
LABEL_6:
        v23 = *(os_unfair_lock_s **)(v2 + v14);
        swift_retain(v23);
        os_unfair_lock_unlock(v23 + 4);
        swift_release(v23);

        return;
      }
      v20 = *(void **)(v2 + v16);
      if (v20)
      {
        v21 = v19;
        v22 = v20;
        sub_10018C7FC(v22, 0);

        goto LABEL_6;
      }
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
      v37 = v11;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = (_QWORD *)swift_slowAlloc(8, -1);
        v46 = v40;
        v47 = v37;
        *(_DWORD *)v40 = 138412290;
        v37 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 4, v40 + 12);
        v41 = v45;
        *v45 = a1;

        v42 = v46;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Can't select %@, it's unknown", v46, 0xCu);
        v43 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v41, 1, v43);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {

        v38 = v37;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "Set docked to nil", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v29 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v29);
    os_unfair_lock_lock(v29 + 4);
    swift_release(v29);
    v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked;
    v31 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
    if (v31)
    {
      v32 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
      if (v32)
      {
        v33 = v32;
        v34 = v31;
        sub_10018C7FC(v34, 1);

      }
      v49 = 0;
      swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, &v47, 33, 0);
      v35 = sub_10009061C(&qword_10026E0A0);
      DKThreadSafe.wrappedValue.setter(&v49, v35);
      swift_endAccess(&v47);
      v36 = *(void **)(v2 + v30);
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)(v2 + v30) = 0;

    v44 = *(os_unfair_lock_s **)(v2 + v28);
    swift_retain(v44);
    os_unfair_lock_unlock(v44 + 4);
    swift_release(v44);
  }
}

void sub_10015EF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void *v6;
  os_unfair_lock_s *v7;
  id v8;
  _BYTE v9[31];
  char v10;

  v1 = v0;
  v10 = 0;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v9, 33, 0);
  v2 = sub_10009061C(&qword_10026E0A0);
  DKThreadSafe.wrappedValue.setter(&v10, v2);
  swift_endAccess(v9);
  if ((sub_10015FA14() & 1) != 0)
  {
    v3 = 2;
  }
  else
  {
    v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v5 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock));
    os_unfair_lock_lock(v5 + 4);
    swift_release(v5);
    v6 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    v7 = *(os_unfair_lock_s **)(v1 + v4);
    v8 = v6;
    swift_retain(v7);
    os_unfair_lock_unlock(v7 + 4);
    swift_release(v7);
    if (v6)
    {

      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  sub_10015F3DC(v3);
}

void sub_10015F088(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  void *v26;
  os_unfair_lock_s *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = TrackingButtonState.init(rawValue:)(a1);
  if ((v11 & 1) != 0)
    v12 = 2;
  else
    v12 = v10;
  v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v14 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v14);
  os_unfair_lock_lock(v14 + 4);
  swift_release(v14);
  v31 = v12;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = v12;
  v15 = *(os_unfair_lock_s **)(v2 + v13);
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  v16 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_10023D300, 25, 7);
  *(_QWORD *)(v18 + 16) = v2;
  *(_BYTE *)(v18 + 24) = a1;
  aBlock[4] = sub_100177950;
  v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023D318;
  v19 = _Block_copy(aBlock);
  v20 = v36;
  swift_retain(v2);
  v21 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v24 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  v25 = *(os_unfair_lock_s **)(v2 + v13);
  swift_retain(v25);
  os_unfair_lock_lock(v25 + 4);
  swift_release(v25);
  v26 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v27 = *(os_unfair_lock_s **)(v2 + v13);
  v28 = v26;
  swift_retain(v27);
  os_unfair_lock_unlock(v27 + 4);
  swift_release(v27);
  if (v26)
  {
    v29 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
    if (v29)
    {
      v30 = v29;
      sub_10018C818(v28, v31);

    }
  }
}

void sub_10015F390(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  id v3;

  v2 = a2;
  v3 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  DeviceNotification.state.setter(v2);

}

void sub_10015F3DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void *v6;
  os_unfair_lock_s *v7;
  id v8;
  id v9;

  v3 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
  *(_QWORD *)v3 = a1;
  *(_BYTE *)(v3 + 8) = 0;
  v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v7 = *(os_unfair_lock_s **)(v1 + v4);
  v8 = v6;
  swift_retain(v7);
  os_unfair_lock_unlock(v7 + 4);
  swift_release(v7);
  if (v6)
  {
    v9 = v8;
    sub_10015F4C8(a1, v6);

  }
}

void sub_10015F4C8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  char *v21;
  void *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void (*v30)(char *, uint64_t);
  void *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[4];
  char v65[24];
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v3 = v2;
  v62 = a1;
  v5 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  if (a2)
  {
    v54 = v11;
    v55 = v9;
    v56 = v8;
    v57 = v7;
    v61 = v3;
    v19 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v20 = a2;
    v21 = v19;
    v22 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v21);
    v59 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v23 = *(id *)&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v60 = v21;
    v24 = &v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v65, 0, 0);
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(*(_QWORD *)v24 + 16);
    v27 = v62;
    if (v26)
    {
      v58 = v20;
      v28 = v25 + 32;
      swift_bridgeObjectRetain(v25);
      while (1)
      {
        sub_10009AFF4(v28, (uint64_t)&v63);
        v29 = *(id *)(*sub_10009B038(&v63, v64[2]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v29) = static UUID.== infix(_:_:)(v18, v16);
        v30 = *(void (**)(char *, uint64_t))(v13 + 8);
        v30(v16, v12);
        v30(v18, v12);
        if ((v29 & 1) != 0)
          break;
        sub_100090E88(&v63);
        v28 += 40;
        if (!--v26)
        {
          swift_bridgeObjectRelease(v25);
          v27 = v62;
          v20 = v58;
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease(v25);
      v33 = v60;
      v34 = *(id *)&v60[v59];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)&v63, (uint64_t)&v66);
      sub_100090E88(&v63);

      v27 = v62;
      v20 = v58;
    }
    else
    {
LABEL_7:
      v31 = v60;
      v32 = *(id *)&v60[v59];
      OS_dispatch_semaphore.signal()();

      v68 = 0;
      v66 = 0u;
      v67 = 0u;

    }
    v35 = v61;
    if (*((_QWORD *)&v67 + 1))
    {
      v36 = sub_10009061C(&qword_10026C2E0);
      v37 = type metadata accessor for DaemonAccessory(0);
      if ((swift_dynamicCast(&v63, &v66, v36, v37, 6) & 1) != 0)
      {
        v38 = v63;
        v39 = v55;
        v40 = v56;
        v41 = v54;
        v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v35 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v56);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = swift_slowAlloc(22, -1);
          v46 = swift_slowAlloc(32, -1);
          v62 = v38;
          v47 = v46;
          *(_QWORD *)&v66 = v46;
          *(_DWORD *)v45 = 136315394;
          v58 = v20;
          v63 = sub_1000906BC(0xD00000000000002FLL, 0x8000000100201D80, (uint64_t *)&v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v45 + 4, v45 + 12);
          *(_WORD *)(v45 + 12) = 2048;
          v63 = TrackerStateEvent.rawValue.getter(v27);
          v20 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v45 + 14, v45 + 22);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s Updated tracking sensor state=%ld", (uint8_t *)v45, 0x16u);
          swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
          v48 = v47;
          v38 = v62;
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v45, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
        v49 = type metadata accessor for TaskPriority(0);
        v50 = (uint64_t)v57;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v57, 1, 1, v49);
        v51 = (_QWORD *)swift_allocObject(&unk_10023D2D8, 48, 7);
        v51[2] = 0;
        v51[3] = 0;
        v51[4] = v38;
        v51[5] = v27;
        v52 = sub_10018A9B0(v50, (uint64_t)&unk_1002701C8, (uint64_t)v51);

        swift_release(v52);
      }
      else
      {

      }
    }
    else
    {

      sub_10009B2C0((uint64_t)&v66, (uint64_t *)&unk_10026DF40);
    }
  }
}

uint64_t sub_10015F9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  *(_QWORD *)(v5 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_100270234);
  *(_QWORD *)(v5 + 24) = v7;
  *v7 = v5;
  v7[1] = sub_1000F35C4;
  return sub_100179D80(a5);
}

uint64_t sub_10015FA14()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v2);
  os_unfair_lock_lock(v2 + 4);
  swift_release(v2);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary);
  v5 = *(os_unfair_lock_s **)(v0 + v1);
  swift_retain_n(v4, 2);
  v6 = v3;
  swift_retain(v5);
  v7 = v6;
  os_unfair_lock_unlock(v5 + 4);

  v8 = swift_release(v5);
  if (v3)
  {
    if (v4)
    {
      v9 = dispatch thunk of TrackingSummaryInternal.subjects.getter(v8);
      v10 = v9;
      if ((unint64_t)v9 >> 62)
      {
        if (v9 >= 0)
          v9 &= 0xFFFFFFFFFFFFFF8uLL;
        v11 = _CocoaArrayWrapper.endIndex.getter(v9);
      }
      else
      {
        v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v10);

      swift_release_n(v4, 2);
      if (v11 > 0)
        return 1;
    }
    else
    {

    }
  }
  else
  {
    swift_release_n(v4, 2);
  }
  return 0;
}

uint64_t sub_10015FB38(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  __n128 v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  void (*v85)(char *);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[16];
  uint64_t v90[4];

  v3 = type metadata accessor for Logger(0);
  v4 = *(void (**)(char *, uint64_t))(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v76 - v8;
  v77 = v1;
  v85 = (void (*)(char *))*((_QWORD *)v4 + 2);
  v86 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v85((char *)&v76 - v8);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v82 = v3;
  if (v13)
  {
    v14 = swift_slowAlloc(32, -1);
    v84 = v4;
    v15 = v14;
    v83 = swift_slowAlloc(64, -1);
    v90[0] = v83;
    *(_DWORD *)v15 = 136315650;
    v88 = sub_1000906BC(0xD00000000000001DLL, 0x8000000100201D60, v90);
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2080;
    v17 = CameraSessionInformation.appId.getter(v16);
    v19 = v18;
    v88 = sub_1000906BC(v17, v18, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v15 + 14, v15 + 22);

    v20 = swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 22) = 2048;
    v21 = CameraSessionInformation.cameraType.getter(v20);
    v22 = TrackerCamera.rawValue.getter(v21);

    v88 = v22;
    v3 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v15 + 24, v15 + 32);

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s session=%s cam=%ld", (uint8_t *)v15, 0x20u);
    v23 = v83;
    swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v24 = (void (*)(char *, uint64_t))*((_QWORD *)v84 + 1);
  }
  else
  {

    v24 = (void (*)(char *, uint64_t))*((_QWORD *)v4 + 1);
  }
  v84 = v24;
  v24(v9, v3);
  v25 = v77;
  v76 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v26 = *(os_unfair_lock_s **)(v77 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v26);
  os_unfair_lock_lock(v26 + 4);
  v27 = swift_release(v26);
  v28 = CameraSessionInformation.appId.getter(v27);
  v30 = v29;
  v31 = (_QWORD *)(v25 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
  swift_beginAccess(v25 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions, v90, 0, 0);
  v32 = *v31;
  if (*(_QWORD *)(*v31 + 16))
  {
    swift_bridgeObjectRetain(*v31);
    v33 = sub_100145264(v28, v30);
    if ((v34 & 1) != 0)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
      swift_bridgeObjectRetain(v35);
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain(*v31);
  }
  v35 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_9:
  swift_bridgeObjectRelease(v30);
  v36 = swift_bridgeObjectRelease(v32);
  v37 = CameraSessionInformation.appId.getter(v36);
  v39 = v38;
  v40 = sub_10009061C(&qword_10026C340);
  v41 = swift_allocObject(v40, 40, 7);
  *(_OWORD *)(v41 + 16) = xmmword_1001DE6A0;
  *(_QWORD *)(v41 + 32) = v10;
  v88 = v41;
  specialized Array._endMutation()(v41);
  v42 = v88;
  swift_beginAccess(v31, &v88, 33, 0);
  v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
  v87 = *v31;
  *v31 = 0x8000000000000000;
  sub_1001BAF18(v42, v37, v39, isUniquelyReferenced_nonNull_native);
  v44 = *v31;
  *v31 = v87;
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v44);
  v45 = swift_endAccess(&v88);
  v46 = CameraSessionInformation.appId.getter(v45);
  v47 = (uint64_t *)(v77 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
  v48 = *(_QWORD *)(v77 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId + 8);
  *v47 = v46;
  v47[1] = v49;
  swift_bridgeObjectRelease(v48);
  v50 = v35;
  if (v35 >> 62)
    goto LABEL_23;
  v51 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  v52 = swift_bridgeObjectRetain(v35);
  while (v51)
  {
    v83 = v50 & 0xC000000000000001;
    v53 = 4;
    v52.n128_u64[0] = 136315650;
    v80 = v52;
    v79 = 0x8000000100201D60;
    v78 = (char *)&type metadata for Any + 8;
    v81 = v7;
    while (1)
    {
      v54 = v83
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53 - 4, v50)
          : *(id *)(v50 + 8 * v53);
      v55 = v54;
      v56 = v53 - 3;
      if (__OFADD__(v53 - 4, 1))
        break;
      ((void (*)(char *, uint64_t, uint64_t))v85)(v7, v86, v3);
      v57 = v55;
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = v51;
        v61 = v50;
        v62 = swift_slowAlloc(32, -1);
        v63 = swift_slowAlloc(64, -1);
        v88 = v63;
        *(_DWORD *)v62 = v80.n128_u32[0];
        v64 = sub_1000906BC(0xD00000000000001DLL, v79, &v88);
        *(_QWORD *)(v62 + 4) = v64;
        *(_WORD *)(v62 + 12) = 2080;
        v65 = CameraSessionInformation.appId.getter(v64);
        v67 = v66;
        *(_QWORD *)(v62 + 14) = sub_1000906BC(v65, v66, &v88);

        v68 = swift_bridgeObjectRelease(v67);
        *(_WORD *)(v62 + 22) = 2048;
        v69 = CameraSessionInformation.cameraType.getter(v68);
        v70 = TrackerCamera.rawValue.getter(v69);

        *(_QWORD *)(v62 + 24) = v70;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s previous session=%s cam=%ld", (uint8_t *)v62, 0x20u);
        swift_arrayDestroy(v63, 2, v78);
        v71 = v63;
        v3 = v82;
        swift_slowDealloc(v71, -1, -1);
        v72 = v62;
        v50 = v61;
        v51 = v60;
        v7 = v81;
        swift_slowDealloc(v72, -1, -1);

      }
      else
      {

      }
      v84(v7, v3);
      ++v53;
      if (v56 == v51)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    if (v50 < 0)
      v75 = v50;
    else
      v75 = v50 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v50);
    v51 = _CocoaArrayWrapper.endIndex.getter(v75);
  }
LABEL_21:
  swift_bridgeObjectRelease(v50);
  v73 = *(os_unfair_lock_s **)(v77 + v76);
  swift_retain(v73);
  os_unfair_lock_unlock(v73 + 4);
  swift_release(v73);
  sub_10016A6A4();
  return v50;
}

uint64_t sub_1001601E0(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v15;
  _BYTE v16[24];

  v4 = v3;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = (_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap, v16, 33, 0);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v15 = *v10;
  *v10 = 0x8000000000000000;
  sub_1001BADDC(a2, a3, a1, isUniquelyReferenced_nonNull_native);
  v12 = *v10;
  *v10 = v15;
  swift_bridgeObjectRelease(v12);
  swift_endAccess(v16);
  v13 = *(os_unfair_lock_s **)(v4 + v8);
  swift_retain(v13);
  os_unfair_lock_unlock(v13 + 4);
  return swift_release(v13);
}

uint64_t sub_1001602E0(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  id v15;
  char v16;
  void *v17;
  os_unfair_lock_s *v18;
  _BYTE v19[24];
  _BYTE v20[24];

  if (a2)
  {
    v4 = v3;
    v7 = result;
    v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v9);
    os_unfair_lock_lock(v9 + 4);
    swift_release(v9);
    v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps);
    swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps, v20, 0, 0);
    v11 = *v10;
    if (*(_QWORD *)(*v10 + 16))
    {
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v11);
      v12 = sub_100145264(v7, a2);
      if ((v13 & 1) != 0)
      {
        v14 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v11);
        if (a3
          && (sub_100090EE8(0, &qword_100270168, NSXPCConnection_ptr),
              v14 = v14,
              v15 = a3,
              v16 = static NSObject.== infix(_:_:)(v14, v15),
              v14,
              v15,
              (v16 & 1) != 0))
        {
          swift_beginAccess(v10, v19, 33, 0);
          v17 = (void *)sub_1001B47D4(v7, a2);
          swift_endAccess(v19);

        }
        else
        {

        }
      }
      else
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v11);
      }
    }
    v18 = *(os_unfair_lock_s **)(v4 + v8);
    swift_retain(v18);
    os_unfair_lock_unlock(v18 + 4);
    return swift_release(v18);
  }
  return result;
}

uint64_t sub_100160480(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v18;
  os_unfair_lock_s *v19;
  _BYTE v21[24];
  _BYTE v22[24];

  v2 = v1;
  v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap, v22, 0, 0);
  v7 = *v6;
  if (*(_QWORD *)(*v6 + 16))
  {
    v8 = sub_1001452C8(a1);
    if ((v9 & 1) != 0)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
      v12 = *v10;
      v11 = v10[1];
      swift_bridgeObjectRetain(v11);
      sub_100160B10(v12, v11);
      swift_beginAccess(v6, v21, 33, 0);
      sub_1001B3EBC(a1);
      v14 = v13;
      swift_endAccess(v21);
      swift_bridgeObjectRelease(v14);
      v15 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
      v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId + 8);
      if (v16)
      {
        if (v12 == *v15 && v16 == v11)
        {
          swift_bridgeObjectRelease(v11);
        }
        else
        {
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, *v15, v16, 0);
          swift_bridgeObjectRelease(v11);
          if ((v18 & 1) == 0)
            goto LABEL_13;
        }
        v11 = v15[1];
        *v15 = 0;
        v15[1] = 0;
      }
      swift_bridgeObjectRelease(v11);
    }
  }
LABEL_13:
  v19 = *(os_unfair_lock_s **)(v2 + v4);
  swift_retain(v19);
  os_unfair_lock_unlock(v19 + 4);
  return swift_release(v19);
}

uint64_t sub_1001605F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  char *v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void *v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  os_unfair_lock_s *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[5];
  char v69[24];
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v2 = v1;
  v60 = type metadata accessor for CameraOrientationInternal(0);
  v59 = *(_QWORD *)(v60 - 8);
  v4 = __chkstk_darwin(v60);
  v65 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v58 - v6;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v16 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v16);
  os_unfair_lock_lock(v16 + 4);
  swift_release(v16);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary) = a1;
  v67 = a1;
  swift_retain(a1);
  v18 = v17;
  v19 = v15;
  v20 = v2;
  swift_release(v18);
  v21 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  if (v21)
  {
    v64 = v7;
    v66 = v19;
    v22 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v23 = v21;
    v24 = v22;
    v25 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v24);
    v62 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v26 = *(id *)&v24[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v63 = v24;
    v27 = &v24[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v24[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v69, 0, 0);
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(*(_QWORD *)v27 + 16);
    v61 = v23;
    if (v29)
    {
      v58 = v20;
      v30 = v28 + 32;
      swift_bridgeObjectRetain(v28);
      while (1)
      {
        sub_10009AFF4(v30, (uint64_t)v68);
        v31 = *(id *)(*sub_10009B038(v68, v68[3]) + 24);
        DockCoreInfo.identifier.getter(v31);

        DockCoreInfo.identifier.getter(v32);
        LOBYTE(v31) = static UUID.== infix(_:_:)(v14, v12);
        v33 = *(void (**)(char *, uint64_t))(v9 + 8);
        v33(v12, v8);
        v33(v14, v8);
        if ((v31 & 1) != 0)
          break;
        sub_100090E88(v68);
        v30 += 40;
        if (!--v29)
        {
          swift_bridgeObjectRelease(v28);
          v20 = v58;
          v23 = v61;
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease(v28);
      v49 = v63;
      v50 = *(id *)&v63[v62];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v68, (uint64_t)&v70);
      sub_100090E88(v68);

      v20 = v58;
      v36 = v65;
      v19 = v66;
      v37 = v64;
      v23 = v61;
      if (!*((_QWORD *)&v71 + 1))
        goto LABEL_12;
    }
    else
    {
LABEL_7:
      v34 = v63;
      v35 = *(id *)&v63[v62];
      OS_dispatch_semaphore.signal()();

      v72 = 0;
      v70 = 0u;
      v71 = 0u;

      v36 = v65;
      v19 = v66;
      v37 = v64;
      if (!*((_QWORD *)&v71 + 1))
      {
LABEL_12:

        sub_10009B2C0((uint64_t)&v70, (uint64_t *)&unk_10026DF40);
        goto LABEL_18;
      }
    }
    v38 = sub_10009061C(&qword_10026C2E0);
    v39 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v68, &v70, v38, v39, 6) & 1) == 0)
    {

      v19 = v66;
      goto LABEL_18;
    }
    v65 = (char *)v68[0];
    ((void (*)(void))dispatch thunk of TrackingSummaryInternal.orientation.getter)();
    v40 = v59;
    v41 = *(void (**)(char *, _QWORD, uint64_t))(v59 + 104);
    v42 = v60;
    v41(v36, enum case for CameraOrientationInternal.landscapeLeft(_:), v60);
    v43 = sub_100090E1C(&qword_1002701B8, (uint64_t (*)(uint64_t))&type metadata accessor for CameraOrientationInternal, (uint64_t)&protocol conformance descriptor for CameraOrientationInternal);
    dispatch thunk of RawRepresentable.rawValue.getter(&v70, v42, v43);
    dispatch thunk of RawRepresentable.rawValue.getter(v68, v42, v43);
    v44 = v70;
    v45 = v68[0];
    v46 = *(void (**)(char *, uint64_t))(v40 + 8);
    v46(v36, v42);
    v47 = ((uint64_t (*)(char *, uint64_t))v46)(v37, v42);
    if (v44 == v45)
    {

      v48 = v65;
      v19 = v66;
    }
    else
    {
      dispatch thunk of TrackingSummaryInternal.orientation.getter(v47);
      v41(v36, enum case for CameraOrientationInternal.landscapeRight(_:), v42);
      dispatch thunk of RawRepresentable.rawValue.getter(&v70, v42, v43);
      dispatch thunk of RawRepresentable.rawValue.getter(v68, v42, v43);

      v51 = v70;
      v52 = v68[0];
      v46(v36, v42);
      v46(v37, v42);
      v53 = v51 == v52;
      v48 = v65;
      v19 = v66;
      if (!v53)
      {
        v54 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader;
        v55 = v65[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader] & 0xFE;
LABEL_17:
        v48[v54] = v55;
        swift_release(v48);
        goto LABEL_18;
      }
    }
    v54 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader;
    v55 = v48[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader] | 1;
    goto LABEL_17;
  }
LABEL_18:
  v56 = *(os_unfair_lock_s **)(v20 + v19);
  swift_retain(v56);
  os_unfair_lock_unlock(v56 + 4);
  return swift_release(v56);
}

void sub_100160B10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  double v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  char *v53;
  void *v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  id v62;
  _BYTE *v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  _BYTE *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  _BYTE v84[4];
  _BOOL4 v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[4];
  char v95[24];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99[32];

  v3 = v2;
  v6 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v6);
  v87 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v91 = *(_QWORD *)(v8 - 8);
  v92 = v8;
  v9 = __chkstk_darwin(v8);
  v90 = &v84[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v89 = &v84[-v11];
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v84[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v88 = v3;
    v20 = v19;
    v86 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v96 = v86;
    *(_DWORD *)v20 = 136315394;
    v93 = sub_1000906BC(0xD00000000000001CLL, 0x8000000100201D40, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v93 = sub_1000906BC(a1, a2, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s finish camera session app=%s", (uint8_t *)v20, 0x16u);
    v21 = v86;
    swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v20;
    v3 = v88;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  v23 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions, v99, 0, 0);
  v24 = *v23;
  if (*(_QWORD *)(*v23 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v24);
    v25 = sub_100145264(a1, a2);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(a2);
      if ((unint64_t)v27 >> 62)
      {
        if (v27 < 0)
          v36 = v27;
        else
          v36 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v27);
        v28 = _CocoaArrayWrapper.endIndex.getter(v36);
        swift_bridgeObjectRelease(v27);
        if (v28)
        {
LABEL_8:
          v29 = v28 - 1;
          if (__OFSUB__(v28, 1))
          {
            __break(1u);
          }
          else if ((v27 & 0xC000000000000001) == 0)
          {
            if ((v29 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v29 < *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v30 = *(id *)(v27 + 8 * v29 + 32);
LABEL_13:
              v31 = v30;
              swift_bridgeObjectRelease(v27);
              v32 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
              objc_msgSend(v32, "timeIntervalSince1970");
              v34 = v33;

              CameraSessionInformation.endTime.setter(v34);
              goto LABEL_21;
            }
            __break(1u);
            goto LABEL_59;
          }
          v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v27);
          goto LABEL_13;
        }
      }
      else
      {
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v28)
          goto LABEL_8;
      }
      v35 = v27;
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      v35 = a2;
    }
    swift_bridgeObjectRelease(v35);
  }
LABEL_21:
  v37 = *v23;
  if (!*(_QWORD *)(*v23 + 16))
  {
LABEL_38:
    v46 = 0;
    goto LABEL_39;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v37);
  v38 = sub_100145264(a1, a2);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease(v37);
    v47 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v47);
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v38);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(a2);
  if (!((unint64_t)v27 >> 62))
  {
    v40 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v40)
      goto LABEL_25;
    goto LABEL_36;
  }
  if (v27 < 0)
    v48 = v27;
  else
    v48 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v27);
  v40 = _CocoaArrayWrapper.endIndex.getter(v48);
  swift_bridgeObjectRelease(v27);
  if (!v40)
  {
LABEL_36:
    v47 = v27;
    goto LABEL_37;
  }
LABEL_25:
  v29 = v40 - 1;
  if (__OFSUB__(v40, 1))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if ((v27 & 0xC000000000000001) != 0)
  {
LABEL_60:
    v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v27);
    goto LABEL_30;
  }
  if ((v29 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_62;
  }
  if (v29 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_62:
    __break(1u);
    return;
  }
  v41 = *(id *)(v27 + 8 * v29 + 32);
LABEL_30:
  v42 = v41;
  v43 = swift_bridgeObjectRelease(v27);
  v44 = CameraSessionInformation.cameraType.getter(v43);

  v45 = TrackerCamera.rawValue.getter(v44);
  v46 = v45 == TrackerCamera.rawValue.getter(0);
LABEL_39:
  v49 = TrackingButtonState.rawValue.getter(*(_QWORD *)(v3
                                                      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState));
  if (v49 == TrackingButtonState.rawValue.getter(1))
  {
    v50 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    if (v50)
    {
      v85 = v46;
      v88 = v3;
      v51 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
      v52 = v50;
      v53 = v51;
      v54 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v53);
      v55 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
      v56 = *(id *)&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
      OS_dispatch_semaphore.wait()();

      v57 = &v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
      swift_beginAccess(&v53[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v95, 0, 0);
      v58 = *(_QWORD *)v57;
      v59 = *(_QWORD *)(*(_QWORD *)v57 + 16);
      if (v59)
      {
        v86 = (uint64_t)v52;
        v60 = v58 + 32;
        swift_bridgeObjectRetain(v58);
        v61 = v89;
        while (1)
        {
          sub_10009AFF4(v60, (uint64_t)&v93);
          v62 = *(id *)(*sub_10009B038(&v93, v94[2]) + 24);
          DockCoreInfo.identifier.getter(v62);

          v63 = v90;
          DockCoreInfo.identifier.getter(v64);
          LOBYTE(v62) = static UUID.== infix(_:_:)(v61, v63);
          v65 = *(void (**)(_BYTE *, uint64_t))(v91 + 8);
          v66 = v63;
          v67 = v92;
          v65(v66, v92);
          v65(v61, v67);
          if ((v62 & 1) != 0)
            break;
          sub_100090E88(&v93);
          v60 += 40;
          if (!--v59)
          {
            swift_bridgeObjectRelease(v58);
            v52 = (id)v86;
            goto LABEL_46;
          }
        }
        swift_bridgeObjectRelease(v58);
        v83 = *(id *)&v53[v55];
        OS_dispatch_semaphore.signal()();

        sub_10009AFF4((uint64_t)&v93, (uint64_t)&v96);
        sub_100090E88(&v93);

        v52 = (id)v86;
        if (!*((_QWORD *)&v97 + 1))
          goto LABEL_51;
      }
      else
      {
LABEL_46:
        v68 = *(id *)&v53[v55];
        OS_dispatch_semaphore.signal()();

        v98 = 0;
        v96 = 0u;
        v97 = 0u;

        if (!*((_QWORD *)&v97 + 1))
        {
LABEL_51:

          sub_10009B2C0((uint64_t)&v96, (uint64_t *)&unk_10026DF40);
          return;
        }
      }
      v69 = sub_10009061C(&qword_10026C2E0);
      v70 = type metadata accessor for DaemonAccessory(0);
      if ((swift_dynamicCast(&v93, &v96, v69, v70, 6) & 1) != 0)
      {
        v71 = v93;
        type metadata accessor for Actuator(0);
        v72 = static Actuator.Pitch.getter();
        v74 = v73;
        v75 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)(v72);
        swift_bridgeObjectRelease(v74);
        if (v75)
        {
          v76 = type metadata accessor for TaskPriority(0);
          v77 = (uint64_t)v87;
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v87, 1, 1, v76);
          v78 = swift_allocObject(&unk_10023D2B0, 64, 7);
          *(_QWORD *)(v78 + 16) = 0;
          *(_QWORD *)(v78 + 24) = 0;
          v79 = v88;
          *(_QWORD *)(v78 + 32) = v88;
          *(_BYTE *)(v78 + 40) = v85;
          *(_QWORD *)(v78 + 48) = v75;
          *(_QWORD *)(v78 + 56) = v71;
          swift_retain(v79);
          v80 = v75;
          swift_retain(v71);
          v81 = sub_10018A990(v77, (uint64_t)&unk_1002701A8, v78);

          swift_release(v71);
          v82 = *(_QWORD *)(v79 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask);
          *(_QWORD *)(v79 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = v81;
          swift_release(v82);
          return;
        }
        swift_release(v71);
      }

    }
  }
}

uint64_t sub_1001613A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_BYTE *)(v7 + 34) = a5;
  *(_QWORD *)(v7 + 40) = a4;
  v8 = type metadata accessor for TrajectoryCommand(0);
  *(_QWORD *)(v7 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 80) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v7 + 88) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 96) = v11;
  *(_QWORD *)(v7 + 104) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v7 + 112) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 120) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 128) = swift_task_alloc(v14);
  *(_QWORD *)(v7 + 136) = swift_task_alloc(v14);
  return swift_task_switch(sub_100161468, 0, 0);
}

uint64_t sub_100161468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = static ContinuousClock.Instant.now.getter();
  v5 = static Duration.seconds(_:)(v4, 1.0);
  ContinuousClock.Instant.advanced(by:)(v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 144) = v6;
  v7 = v6(v1, v2);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  ContinuousClock.init()(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(_QWORD *)(v0 + 152) = v8;
  v9 = sub_100090E1C(&qword_1002701B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  *v8 = v0;
  v8[1] = sub_10016154C;
  return static Task<>.sleep<A>(until:tolerance:clock:)(*(_QWORD *)(v0 + 136), v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88), v9);
}

uint64_t sub_10016154C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 152));
  if (v0)
  {
    v3 = v2[17];
    v4 = (void (*)(uint64_t, uint64_t))v2[18];
    v6 = v2[13];
    v5 = v2[14];
    v9 = v2 + 11;
    v7 = v2[11];
    v8 = v9[1];
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v4(v3, v5);
  }
  else
  {
    v10 = v2[17];
    v11 = (void (*)(uint64_t, uint64_t))v2[18];
    v12 = v2[14];
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);
    v11(v10, v12);
  }
  return swift_task_switch(sub_100161614, 0, 0);
}

uint64_t sub_100161614()
{
  uint64_t v0;
  __n128 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
    goto LABEL_6;
  v2 = 0.0;
  if (*(_BYTE *)(v0 + 34) == 1)
  {
    v1.n128_f64[0] = Actuator.homePosition.getter();
    v2 = v1.n128_f64[0];
  }
  v3 = *(_QWORD *)(v0 + 80);
  v4 = dispatch thunk of Component.id.getter(v1);
  v5 = sub_100161878(v4, v3, v2);
  v6 = TrajectoryCommand.encode()(v5);
  *(_QWORD *)(v0 + 160) = v7;
  if (v7 >> 60 == 15)
  {
    v8 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
    swift_release(v9);
LABEL_6:
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = v6;
  v15 = v7;
  v16 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 168) = v6;
  v17 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v0 + 176) = v17;
  v17[2] = v16;
  v17[3] = v14;
  v17[4] = v15;
  v18 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 184) = v18;
  *v18 = v0;
  v18[1] = sub_100161794;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 33, 0, 0, 0xD000000000000012, 0x80000001001FF9F0, sub_1001149E0, v17, &type metadata for Bool);
}

uint64_t sub_100161794()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001617F0, 0, 0);
}

uint64_t sub_1001617F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009E3A0(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100161878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  v5 = sub_10009061C(&qword_100270188);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for TrajectoryCommand.Animation(0);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TrajectoryCommand.TrajectoryPoint(0);
  v11 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrajectoryCommand.Trajectory(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TrajectoryCommand.Trajectory.init()(v16);
  v19 = TrajectoryCommand.Trajectory.actuatorId.setter(a1);
  TrajectoryCommand.Trajectory.duration.setter(v19, 1.0);
  TrajectoryCommand.Trajectory.positionCommand.setter(1);
  TrajectoryCommand.Trajectory.velocityCommand.setter(1);
  v20 = TrajectoryCommand.Trajectory.relative.setter(0);
  v21 = TrajectoryCommand.TrajectoryPoint.init()(v20);
  v22 = TrajectoryCommand.TrajectoryPoint.position.setter(v21, -a3);
  v23 = TrajectoryCommand.TrajectoryPoint.velocity.setter(v22, 0.0);
  TrajectoryCommand.TrajectoryPoint.time.setter(v23, 1.0);
  v24 = sub_10009061C(&qword_100270190);
  v25 = *(unsigned __int8 *)(v11 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v24, v26 + *(_QWORD *)(v11 + 72), v25 | 7);
  v38 = xmmword_1001DE690;
  *(_OWORD *)(v27 + 16) = xmmword_1001DE690;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v27 + v26, v13, v10);
  TrajectoryCommand.Trajectory.points.setter(v27);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v29 = v40;
  v28(v40, enum case for TrajectoryCommand.Animation.Custom(_:), v41);
  v30 = enum case for TrajectoryCommand.Priority.Low(_:);
  v31 = type metadata accessor for TrajectoryCommand.Priority(0);
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v7, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v7, 0, 1, v31);
  v33 = sub_10009061C(&qword_100270198);
  v34 = *(unsigned __int8 *)(v15 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v33, v35 + *(_QWORD *)(v15 + 72), v34 | 7);
  *(_OWORD *)(v36 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v36 + v35, v18, v14);
  TrajectoryCommand.init(type:priority:trajectories:)(v29, v7, v36);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

id sub_100161B48(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  os_unfair_lock_s *v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  os_unfair_lock_s *v48;
  id v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char v55[24];
  _QWORD v56[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v54 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v52 = (char *)&v51 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v51 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v51 - v16;
  v18 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v15);
  sub_10015DAB8(v18);
  v20 = v19;

  if (v20)
  {
    if ((a2 & 1) == 0)
      return v20;

  }
  v53 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v21 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock));
  os_unfair_lock_lock(v21 + 4);
  swift_release(v21);
  if ((a2 & 1) != 0)
  {
    v22 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v55, 0, 0);
    v23 = *v22;
    v24 = a1;
    swift_bridgeObjectRetain(v23);
    v20 = sub_1001764F8(v25);
    swift_bridgeObjectRelease(v23);

    if (v20)
    {
      v26 = v6;
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v17, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found already paired accessory with the same info. Updating the accessory", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v26);
      dispatch thunk of DockCoreAccessory.updateFrom(accessory:)(v24);
      v31 = *(os_unfair_lock_s **)(v3 + v53);
      swift_retain(v31);
      os_unfair_lock_unlock(v31 + 4);
      swift_release(v31);
      return v20;
    }
    v33 = v7;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not found any paired accessory with the same info. Saving paired accessory", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = v14;
    v32 = v6;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v38, v6);
  }
  else
  {
    v32 = v6;
    v33 = v7;
  }
  sub_10016216C(a1);
  v39 = (_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v56, 33, 0);
  v20 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v41 = *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v40 = *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v41 >= v40 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
  v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v20);
  specialized Array._endMutation()(v42);
  swift_endAccess(v56);
  v43 = v52;
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 16))(v52, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v32);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Saved paired accessory", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v32);
  v48 = *(os_unfair_lock_s **)(v3 + v53);
  swift_retain(v48);
  os_unfair_lock_unlock(v48 + 4);
  swift_release(v48);
  v49 = v20;
  return v20;
}

uint64_t sub_10016216C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *);
  void *v67;
  uint64_t v68;
  void (*v69)(char *, char *);
  void *v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  id v87;
  uint64_t v88;

  v82 = a1;
  v1 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v1 - 8);
  v84 = v1;
  v2 = __chkstk_darwin(v1);
  v77 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v79 = (char *)&v73 - v4;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10009061C(&qword_10026BF70);
  __chkstk_darwin(v12);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v78 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v73 - v19;
  if (qword_10026BB90 != -1)
    swift_once(&qword_10026BB90, sub_10012D190);
  sub_10012D5B8((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10009B2C0((uint64_t)v14, &qword_10026BF70);
    v22 = v83;
    v21 = v84;
    v23 = v77;
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 16))(v77, v80 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v84);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to save paired accessory: Unable to get library path", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v23, v21);
  }
  else
  {
    v74 = v16;
    v29 = *(uint64_t (**)(char *, char *, uint64_t))(v16 + 32);
    v77 = (char *)v15;
    v30 = v29(v20, v14, v15);
    v31 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v30);
    DockCoreInfo.identifier.getter(v31);

    v33 = (void *)UUID.uuidString.getter(v32);
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v9 + 8);
    v37 = v20;
    v36(v11, v8);
    v87 = v33;
    v88 = v35;
    v39 = v75;
    v38 = v76;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v7, enum case for URL.DirectoryHint.notDirectory(_:), v76);
    v40 = sub_1000D4CF4();
    URL.append<A>(component:directoryHint:)(&v87, v7, &type metadata for String, v40);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v38);
    swift_bridgeObjectRelease(v88);
    v41 = v79;
    v42 = v80;
    v44 = v83;
    v43 = v84;
    v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 16))(v79, v80 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v84);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (void *)swift_slowAlloc(32, -1);
      v87 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_beginAccess(v37, v86, 0, 0);
      v50 = URL.path(percentEncoded:)(1);
      v85 = sub_1000906BC(v50._countAndFlagsBits, (unint64_t)v50._object, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v50._object);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Attempting to save paired accessory to disk at %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      v51 = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v79, v84);
    }
    else
    {

      v51 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v41, v43);
    }
    v53 = v81;
    v52 = v82;
    dispatch thunk of DockCoreAccessory.prepForPersistence()(v51);
    v55 = (void *)objc_opt_self(NSKeyedArchiver, v54);
    v87 = 0;
    v56 = objc_msgSend(v55, "archivedDataWithRootObject:requiringSecureCoding:error:", v52, 1, &v87);
    v57 = v87;
    v58 = v78;
    if (v56)
    {
      v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v61 = v60;

      v62 = swift_beginAccess(v37, &v87, 0, 0);
      v63 = v74;
      v64 = v77;
      (*(void (**)(char *, char *, char *, __n128))(v74 + 16))(v58, v37, v77, v62);
      Data.write(to:options:)(v58, 1, v59, v61);
      if (v53)
      {
        v65 = v64;
        v66 = *(void (**)(char *, char *))(v63 + 8);
        v66(v58, v65);
        sub_10009B2FC(v59, v61);
        return ((uint64_t (*)(char *, char *))v66)(v37, v65);
      }
      else
      {
        v69 = *(void (**)(char *, char *))(v63 + 8);
        v69(v58, v64);
        v70 = *(void **)(v42 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v70)
        {
          v71 = v64;
          v72 = v70;
          sub_10018CE58(v82);
          sub_10009B2FC(v59, v61);

          return ((uint64_t (*)(char *, char *))v69)(v37, v71);
        }
        else
        {
          sub_10009B2FC(v59, v61);
          return ((uint64_t (*)(char *, char *))v69)(v37, v64);
        }
      }
    }
    else
    {
      v67 = v57;
      _convertNSErrorToError(_:)(v57);

      swift_willThrow(v68);
      return (*(uint64_t (**)(char *, char *))(v74 + 8))(v37, v77);
    }
  }
}

void sub_1001627E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void (*v23)(_QWORD);
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  _BYTE v63[12];
  int v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD);
  _BYTE *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v10 = v9;
  v77 = a2;
  v78 = a6;
  v75 = a5;
  v76 = a4;
  v15 = type metadata accessor for Logger(0);
  v79 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v63[-v19];
  sub_10015DAB8(a1);
  if (v21)
  {
    v22 = v21;
    v74 = a8;
    v23 = *(void (**)(_QWORD))(v79 + 16);
    v71 = v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    v72 = v23;
    v23(v20);
    swift_bridgeObjectRetain_n(a7, 2);
    v24 = a1;
    swift_bridgeObjectRetain_n(a3, 2);
    v25 = v24;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    v28 = v27;
    v29 = os_log_type_enabled(v26, v27);
    v73 = v18;
    if (v29)
    {
      v30 = swift_slowAlloc(32, -1);
      v70 = v15;
      v31 = v30;
      v32 = swift_slowAlloc(8, -1);
      v67 = a7;
      v33 = (_QWORD *)v32;
      v66 = v32;
      v68 = swift_slowAlloc(64, -1);
      v82 = v68;
      *(_DWORD *)v31 = 138412802;
      v69 = v10;
      v80 = (uint64_t)v25;
      v65 = v26;
      v34 = v25;
      v64 = v28;
      v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v31 + 4, v31 + 12);
      *v33 = v25;
      a7 = v67;

      *(_WORD *)(v31 + 12) = 2080;
      v80 = v77;
      v81 = a3;
      swift_bridgeObjectRetain(a3);
      v36 = sub_10009061C((uint64_t *)&unk_10026C2C0);
      v37 = String.init<A>(describing:)(&v80, v36);
      v39 = v38;
      v80 = sub_1000906BC(v37, v38, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v31 + 22) = 2080;
      v80 = v78;
      v81 = a7;
      swift_bridgeObjectRetain(a7);
      v40 = String.init<A>(describing:)(&v80, v36);
      v42 = v41;
      v80 = sub_1000906BC(v40, v41, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease_n(a7, 2);
      swift_bridgeObjectRelease(v42);
      v43 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "Updating accessory information for %@: firmware %s, model %s", (uint8_t *)v31, 0x20u);
      v44 = sub_10009061C(&qword_10026BC40);
      v45 = v66;
      swift_arrayDestroy(v66, 1, v44);
      swift_slowDealloc(v45, -1, -1);
      v46 = v68;
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      v47 = v31;
      v15 = v70;
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a7, 2);
      swift_bridgeObjectRelease_n(a3, 2);

    }
    v79 = *(_QWORD *)(v79 + 8);
    v48 = ((uint64_t (*)(_BYTE *, uint64_t))v79)(v20, v15);
    v49 = v74;
    v50 = v75;
    v51 = a3;
    if (!a3)
    {
      v77 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter(v48);
      v51 = v52;
    }
    v53 = swift_bridgeObjectRetain(a3);
    v54 = dispatch thunk of DockCoreAccessory.firmwareVersion.setter(v77, v51, v53);
    v55 = v50;
    v56 = v76;
    if (!v50)
    {
      v56 = dispatch thunk of DockCoreAccessory.serialNumber.getter(v54);
      v55 = v57;
    }
    v58 = swift_bridgeObjectRetain(v50);
    v59 = dispatch thunk of DockCoreAccessory.serialNumber.setter(v56, v55, v58);
    v60 = a7;
    if (!a7)
    {
      v78 = dispatch thunk of DockCoreAccessory.model.getter(v59);
      v60 = v61;
    }
    v62 = swift_bridgeObjectRetain(a7);
    dispatch thunk of DockCoreAccessory.model.setter(v78, v60, v62);
    dispatch thunk of DockCoreAccessory.certified.setter(a9 & 1);
    dispatch thunk of DockCoreAccessory.isMagSafe.setter(v49 & 1);
    sub_10016216C(v22);

  }
}

uint64_t sub_100162DD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  os_unfair_lock_s *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  char v50;
  os_unfair_lock_s *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  _BYTE v61[24];

  v5 = v4;
  v56 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  v57 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v16 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v16);
  os_unfair_lock_lock(v16 + 4);
  swift_release(v16);
  v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera);
  v18 = v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera;
  if ((a4 & 1) != 0)
  {
    swift_beginAccess(v18, v61, 0, 0);
    if ((sub_100158D94(a1, *v17) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v9);
      v19 = swift_bridgeObjectRetain_n(a3, 2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(18, -1);
        v55 = v9;
        v23 = v22;
        v54 = swift_slowAlloc(32, -1);
        v60 = v54;
        *(_DWORD *)v23 = 67109378;
        LODWORD(v58) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4, v23 + 4, v23 + 8);
        *(_WORD *)(v23 + 8) = 2080;
        v53 = v23 + 10;
        v58 = v56;
        v59[0] = a3;
        swift_bridgeObjectRetain(a3);
        v24 = sub_10009061C((uint64_t *)&unk_10026C2C0);
        v25 = String.init<A>(describing:)(&v58, v24);
        v27 = v26;
        v58 = sub_1000906BC(v25, v26, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v53, v23 + 18);
        swift_bridgeObjectRelease_n(a3, 2);
        swift_bridgeObjectRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "caching %d [%s] authorized for camera permission", (uint8_t *)v23, 0x12u);
        v28 = v54;
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v55);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      }
      swift_beginAccess(v17, &v58, 33, 0);
      v39 = (_QWORD *)*v17;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v17);
      *v17 = (uint64_t)v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v39 = sub_1000E9BF8(0, v39[2] + 1, 1, v39);
        *v17 = (uint64_t)v39;
      }
      v42 = v39[2];
      v41 = v39[3];
      if (v42 >= v41 >> 1)
      {
        v39 = sub_1000E9BF8((_QWORD *)(v41 > 1), v42 + 1, 1, v39);
        *v17 = (uint64_t)v39;
      }
      v39[2] = v42 + 1;
      *((_DWORD *)v39 + v42 + 8) = a1;
      swift_endAccess(&v58);
    }
  }
  else
  {
    swift_beginAccess(v18, v61, 1, 0);
    if ((sub_100158D94(a1, *v17) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v9);
      v29 = swift_bridgeObjectRetain_n(a3, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(18, -1);
        v55 = v9;
        v33 = v32;
        v54 = swift_slowAlloc(32, -1);
        v60 = v54;
        *(_DWORD *)v33 = 67109378;
        LODWORD(v58) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4, v33 + 4, v33 + 8);
        *(_WORD *)(v33 + 8) = 2080;
        v53 = v33 + 10;
        v58 = v56;
        v59[0] = a3;
        swift_bridgeObjectRetain(a3);
        v34 = sub_10009061C((uint64_t *)&unk_10026C2C0);
        v35 = String.init<A>(describing:)(&v58, v34);
        v37 = v36;
        v58 = sub_1000906BC(v35, v36, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v53, v33 + 18);
        swift_bridgeObjectRelease_n(a3, 2);
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Clearing TCC cached authorization value for %d [%s]", (uint8_t *)v33, 0x12u);
        v38 = v54;
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v55);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      }
      v43 = *v17;
      v44 = *(_QWORD *)(*v17 + 16);
      if (v44)
      {
        swift_bridgeObjectRetain(*v17);
        v45 = 0;
        v46 = _swiftEmptyArrayStorage;
        do
        {
          v49 = *(_DWORD *)(v43 + 4 * v45 + 32);
          if (v49 != (_DWORD)a1)
          {
            v50 = swift_isUniquelyReferenced_nonNull_native(v46);
            v58 = (uint64_t)v46;
            if ((v50 & 1) == 0)
            {
              sub_1001A5064(0, v46[2] + 1, 1);
              v46 = (_QWORD *)v58;
            }
            v48 = v46[2];
            v47 = v46[3];
            if (v48 >= v47 >> 1)
            {
              sub_1001A5064(v47 > 1, v48 + 1, 1);
              v46 = (_QWORD *)v58;
            }
            v46[2] = v48 + 1;
            *((_DWORD *)v46 + v48 + 8) = v49;
          }
          ++v45;
        }
        while (v44 != v45);
        swift_bridgeObjectRelease(v43);
        v43 = *v17;
      }
      else
      {
        v46 = _swiftEmptyArrayStorage;
      }
      *v17 = (uint64_t)v46;
      swift_bridgeObjectRelease(v43);
    }
  }
  v51 = *(os_unfair_lock_s **)(v5 + v57);
  swift_retain(v51);
  os_unfair_lock_unlock(v51 + 4);
  return swift_release(v51);
}

void sub_1001633CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];

  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, v26, 0, 0);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v25, 0, 0);
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v5 = __OFADD__(v2, v4);
  v6 = v2 + v4;
  if (v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v24, 0, 0);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  v5 = __OFADD__(v6, v8);
  v9 = v6 + v8;
  if (v5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, v23, 0, 0);
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  v5 = __OFADD__(v9, v11);
  v12 = v9 + v11;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, v22, 0, 0);
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 16);
  v5 = __OFADD__(v12, v14);
  v15 = v12 + v14;
  if (v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v16 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v21, 0, 0);
  v17 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  v5 = __OFADD__(v15, v17);
  v18 = v15 + v17;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v20, 0, 0);
  if (__OFADD__(v18, *(_QWORD *)(*(_QWORD *)v19 + 16)))
LABEL_13:
    __break(1u);
}

uint64_t sub_100163554(unsigned int a1, void *a2)
{
  return sub_100174828(a1, a2, &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, "added first event client, taking transaction");
}

uint64_t sub_100163568(unsigned int a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v14;
  id v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  _BYTE v33[24];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = (_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v33, 33, 0);
  v15 = a2;
  v16 = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  v32 = *v14;
  *v14 = 0x8000000000000000;
  sub_1001BBE30((uint64_t)a2, (uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
  v18 = *v14;
  *v14 = v32;
  swift_bridgeObjectRelease(v18);
  swift_endAccess(v33);
  sub_1001633CC();
  v20 = v19;
  v21 = *(os_unfair_lock_s **)(v4 + v12);
  swift_retain(v21);
  os_unfair_lock_unlock(v21 + 4);
  swift_release(v21);
  if (v20 == 1)
  {
    v22 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "added first battery client, taking transaction", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    sub_10016BF20(1);
  }
  v26 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
  if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer))
  {
    v27 = swift_allocObject(&unk_10023D238, 32, 7);
    *(_QWORD *)(v27 + 16) = v4;
    *(_QWORD *)(v27 + 24) = v16;
    objc_allocWithZone((Class)type metadata accessor for RepeatingTimer(0));
    v28 = v16;
    swift_retain(v4);
    v29 = RepeatingTimer.init(interval:fireOnce:queue:_:)(0, 0, sub_100177714, v27, 60.0);
    v30 = *(void **)(v4 + v26);
    *(_QWORD *)(v4 + v26) = v29;

  }
  return 1;
}

uint64_t sub_1001637E4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_10023D260, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain(a1);
  v9 = a2;
  v10 = sub_10018A990((uint64_t)v6, (uint64_t)&unk_100270180, (uint64_t)v8);
  return swift_release(v10);
}

uint64_t sub_1001638B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[17] = a4;
  v5[18] = a5;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[20] = v8;
  v5[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v5[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[23] = v10;
  v5[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v5[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[26] = v12;
  v5[27] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_task_alloc(dword_10026F5DC);
  v5[28] = v13;
  *v13 = v5;
  v13[1] = sub_10016397C;
  return sub_10016AFA0(a5);
}

uint64_t sub_10016397C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001639D8, 0, 0);
}

void sub_1001639D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t i;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int64_t v69;

  v1 = *(_QWORD *)(v0 + 232);
  if (!v1)
  {
    v45 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 16))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 136) + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, *(_QWORD *)(v0 + 200));
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Error reading battery data", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }
    v50 = *(_QWORD *)(v0 + 208);
    v49 = *(_QWORD *)(v0 + 216);
    v51 = *(_QWORD *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
LABEL_47:
    v52 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v67 = (_QWORD *)(v0 + 64);
  v56 = *(_QWORD *)(v0 + 184);
  v55 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = sub_1001C1CC8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v3);
  v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v0 + 96, 0, 0);
  v7 = *(os_unfair_lock_s **)(v2 + v4);
  v8 = *v6;
  swift_bridgeObjectRetain(*v6);
  swift_retain(v7);
  os_unfair_lock_unlock(v7 + 4);
  swift_release(v7);
  v9 = 0;
  v68 = v8 + 64;
  v10 = -1;
  v11 = -1 << *(_BYTE *)(v8 + 32);
  if (-v11 < 64)
    v10 = ~(-1 << -(char)v11);
  v12 = v10 & *(_QWORD *)(v8 + 64);
  v69 = (unint64_t)(63 - v11) >> 6;
  v13 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v1 < 0)
    v13 = v1;
  v54 = v13;
  v66 = v8;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v9 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v8 + 56) + 16 * v15;
    if (*(_QWORD *)v19)
    {
      v20 = *(void **)(v19 + 8);
      v21 = *(id *)v19;
      v22 = v20;
      v23 = objc_msgSend(v21, "remoteObjectProxy");
      _bridgeAnyObjectToAny(_:)(v67);
      swift_unknownObjectRelease(v23);
      v24 = sub_10009061C((uint64_t *)&unk_10026EA80);
      if ((swift_dynamicCast(v0 + 120, v67, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
      {
        v25 = *(_QWORD *)(v0 + 144);
        v26 = *(void **)(v0 + 120);
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v27 = v22;
        v28 = v25;
        v29 = v27;
        v30 = static NSObject.== infix(_:_:)(v28, v27);

        if ((v30 & 1) != 0)
        {
          v64 = v29;
          if (qword_10026BC00 != -1)
            swift_once(&qword_10026BC00, sub_100158DF8);
          v31 = qword_100275638;
          v65 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          v32 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain(v32);
          os_unfair_lock_lock(v32 + 4);
          swift_release(v32);
          v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          v34 = v31;
          if (v33)
          {
            v35 = *(void **)(v33 + 24);
            if (v35)
            {
              v36 = *(_QWORD *)(v0 + 192);
              v60 = *(_QWORD *)(v0 + 176);
              v61 = v34;
              v62 = *(_QWORD *)(v0 + 168);
              v63 = *(_QWORD *)(v0 + 152);
              *(_QWORD *)(v0 + 48) = sub_1000B145C;
              *(_QWORD *)(v0 + 56) = v33;
              *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
              *(_QWORD *)(v0 + 24) = 1107296256;
              *(_QWORD *)(v0 + 32) = sub_10012357C;
              *(_QWORD *)(v0 + 40) = &unk_10023D278;
              v59 = _Block_copy((const void *)(v0 + 16));
              swift_retain_n(v33, 2);
              v58 = v35;
              static DispatchQoS.unspecified.getter(v58);
              *(_QWORD *)(v0 + 128) = _swiftEmptyArrayStorage;
              v57 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v37 = sub_10009061C((uint64_t *)&unk_10026BF60);
              v38 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
              dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 128, v37, v38, v63, v57);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v62, v59);
              _Block_release(v59);

              (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v62, v63);
              (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v36, v60);
              v39 = *(_QWORD *)(v0 + 56);
              swift_release(v33);
              swift_release(v39);
              v34 = v61;
            }
          }
          v40 = *(os_unfair_lock_s **)(v34 + v65);
          swift_retain(v40);
          os_unfair_lock_unlock(v40 + 4);
          swift_release(v40);
          if ((unint64_t)v1 >> 62)
          {
            swift_bridgeObjectRetain(v1);
            v41 = _CocoaArrayWrapper.endIndex.getter(v54);
            if (!v41)
              goto LABEL_42;
          }
          else
          {
            v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v1);
            if (!v41)
              goto LABEL_42;
          }
          if (v41 < 1)
            goto LABEL_50;
          for (i = 0; i != v41; ++i)
          {
            if ((v1 & 0xC000000000000001) != 0)
              v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
            else
              v43 = *(id *)(v1 + 8 * i + 32);
            v44 = v43;
            objc_msgSend(v26, "batteryStateDataWithInfo:data:", *(_QWORD *)(v0 + 144), v43);

          }
LABEL_42:

          swift_bridgeObjectRelease(v1);
          swift_unknownObjectRelease(v26);

          v8 = v66;
        }
        else
        {
          swift_unknownObjectRelease(v26);

          v8 = v66;
        }
      }
      else
      {

      }
    }
  }
  v16 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v16 >= v69)
    goto LABEL_43;
  v17 = *(_QWORD *)(v68 + 8 * v16);
  ++v9;
  if (v17)
    goto LABEL_23;
  v9 = v16 + 1;
  if (v16 + 1 >= v69)
    goto LABEL_43;
  v17 = *(_QWORD *)(v68 + 8 * v9);
  if (v17)
    goto LABEL_23;
  v9 = v16 + 2;
  if (v16 + 2 >= v69)
    goto LABEL_43;
  v17 = *(_QWORD *)(v68 + 8 * v9);
  if (v17)
  {
LABEL_23:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
    goto LABEL_24;
  }
  v18 = v16 + 3;
  if (v18 >= v69)
  {
LABEL_43:
    swift_bridgeObjectRelease(v1);
    swift_release(v8);
    goto LABEL_47;
  }
  v17 = *(_QWORD *)(v68 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v69)
      goto LABEL_43;
    v17 = *(_QWORD *)(v68 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

uint64_t sub_1001640A8(unsigned int a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v14;
  id v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  _BYTE v28[24];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = (_QWORD *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v28, 33, 0);
  v15 = a2;
  v16 = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  v27 = *v14;
  *v14 = 0x8000000000000000;
  sub_1001BBE3C((uint64_t)a2, (uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
  v18 = *v14;
  *v14 = v27;
  swift_bridgeObjectRelease(v18);
  swift_endAccess(v28);
  sub_1001633CC();
  v20 = v19;
  v21 = *(os_unfair_lock_s **)(v4 + v12);
  swift_retain(v21);
  os_unfair_lock_unlock(v21 + 4);
  swift_release(v21);
  if (v20 == 1)
  {
    v22 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "added first tracking state client, taking transaction", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    sub_10016BF20(1);
  }
  return 1;
}

uint64_t sub_1001642AC(unsigned int a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  char v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  os_unfair_lock_s *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  char v41[24];

  v9 = v7;
  v34 = DockCoreInfo.description.getter(a2);
  v14 = v13;
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v15 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v15);
  os_unfair_lock_lock(v15 + 4);
  swift_release(v15);
  v16 = (uint64_t *)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v41, 0, 0);
  if (!*(_QWORD *)(*v16 + 16) || (sub_1001452C8(a1), (v17 & 1) == 0))
  {
    v18 = sub_1001B1E54((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess(v16, v40, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    v38 = *v16;
    *v16 = 0x8000000000000000;
    sub_1001BBE24(v18, a1, isUniquelyReferenced_nonNull_native);
    v20 = *v16;
    *v16 = v38;
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v40);
  }
  swift_beginAccess(v16, v40, 33, 0);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  v21 = swift_isUniquelyReferenced_nonNull_native(*v16);
  v22 = *v16;
  v39 = *v16;
  *v16 = 0x8000000000000000;
  v24 = sub_1001452C8(a1);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = v23;
  if (*(_QWORD *)(v22 + 24) >= v27)
  {
    if ((v21 & 1) != 0)
    {
      if ((v23 & 1) == 0)
        goto LABEL_17;
      goto LABEL_11;
    }
LABEL_16:
    sub_1001BE870();
    if ((v8 & 1) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
  sub_1001B7CE8(v27, v21);
  v28 = sub_1001452C8(a1);
  if ((v8 & 1) != (v29 & 1))
  {
LABEL_18:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
    __break(1u);
    return result;
  }
  v24 = v28;
  if ((v8 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  v30 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v24);
  v31 = swift_isUniquelyReferenced_nonNull_native(v30);
  sub_1001BBC6C(a4, a5, a6, a7, v34, v14, v31);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v30)
    *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v24) = v30;
  else
    sub_1001BA5B4(v24, v39);
  *v16 = v39;
  swift_endAccess(v40);
  v32 = *(os_unfair_lock_s **)(v9 + v37);
  swift_retain(v32);
  os_unfair_lock_unlock(v32 + 4);
  swift_release(v32);
  return 1;
}

void (*sub_10016454C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100171790(v6, a2, a3);
  return sub_1001645B8;
}

void sub_1001645B8(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

uint64_t sub_1001645F0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD v79[3];
  char v80[32];

  v7 = v6;
  v72 = a3;
  v12 = type metadata accessor for Logger(0);
  v74 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = DockCoreInfo.description.getter(v15);
  v17 = v16;
  if ((a6 & 1) != 0)
  {
    v18 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(*(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock));
    os_unfair_lock_lock(v18 + 4);
    swift_release(v18);
  }
  v19 = (uint64_t *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v80, 0, 0);
  v20 = *v19;
  if (!*(_QWORD *)(*v19 + 16))
    goto LABEL_14;
  sub_1001452C8(a1);
  if ((v21 & 1) == 0)
    goto LABEL_14;
  v22 = sub_1001452C8(a1);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
  if (!*(_QWORD *)(v25 + 16))
  {
LABEL_14:
    v42 = v17;
LABEL_15:
    swift_bridgeObjectRelease(v42);
    a4 = 0;
    v43 = 0;
    v75 = 0;
    v76 = 0;
    a5 = 0;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v17);
  v26 = sub_100145264(v73, v17);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease_n(v17, 2);
    v42 = v25;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v25 + 56) + 32 * v26 + 8));
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v25);
  v29 = *v19;
  if (!*(_QWORD *)(*v19 + 16))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v30 = sub_1001452C8(a1);
  if ((v23 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v31 = *(uint64_t **)(*(_QWORD *)(v29 + 56) + 8 * v30);
  if (!v31[2])
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v69 = v12;
  v70 = a4;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v31);
  v32 = sub_100145264(v73, v17);
  if ((v33 & 1) == 0)
  {
LABEL_49:
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v31);
    __break(1u);
    goto LABEL_50;
  }
  v34 = (uint64_t *)(v31[7] + 32 * v32);
  v36 = *v34;
  v35 = v34[1];
  a4 = v34[2];
  v37 = v34[3];
  v75 = v36;
  v76 = v37;
  v71 = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v31);
  v38 = sub_1001740E8(a4);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a5);
  v40 = sub_1001740E8(v39);
  swift_bridgeObjectRelease(a5);
  if (*(_QWORD *)(v40 + 16) <= *(_QWORD *)(v38 + 16) >> 3)
  {
    v79[0] = v38;
    sub_100171A04(v40);
    swift_bridgeObjectRelease(v40);
    v41 = (unint64_t *)v79[0];
  }
  else
  {
    v41 = sub_100171B98(v40, v38);
    swift_bridgeObjectRelease(v40);
  }
  a5 = sub_1001BF850((uint64_t)v41);
  swift_bridgeObjectRelease(v41);
  v12 = v69;
  if (a5[2])
  {
    swift_retain(a5);
    v54 = v71;
    if (v71)
    {
      sub_1001776E0(v75, v71, a4);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v54);
      v55 = v76;
    }
    else
    {
      v55 = 1;
    }
    v67 = v55;
    swift_beginAccess(v19, v79, 33, 0);
    swift_bridgeObjectRetain(v70);
    LODWORD(v68) = swift_isUniquelyReferenced_nonNull_native(*v19);
    v78 = (uint64_t *)*v19;
    v31 = v78;
    *v19 = 0x8000000000000000;
    v24 = sub_1001452C8(a1);
    v56 = v31[2];
    v57 = (v23 & 1) == 0;
    v58 = v56 + v57;
    if (!__OFADD__(v56, v57))
    {
      if (v31[3] < v58)
      {
        HIDWORD(v66) = v23;
        sub_1001B7CE8(v58, v68);
        v31 = v78;
        v59 = sub_1001452C8(a1);
        if ((BYTE4(v66) & 1) != (v60 & 1))
        {
LABEL_50:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
          __break(1u);
          return result;
        }
        v24 = v59;
        if ((v66 & 0x100000000) == 0)
          goto LABEL_48;
        goto LABEL_38;
      }
      if ((v68 & 1) != 0)
      {
        if ((v23 & 1) != 0)
        {
LABEL_38:
          v61 = *(_QWORD *)(v78[7] + 8 * v24);
          v68 = v24;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
          v77 = v61;
          sub_1001BBC6C(v72, v70, (uint64_t)a5, v67, v73, v17, isUniquelyReferenced_nonNull_native);
          v63 = v77;
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease(0x8000000000000000);
          v64 = (uint64_t)v78;
          if (v63)
            *(_QWORD *)(v78[7] + 8 * v68) = v63;
          else
            sub_1001BA5B4(v68, (uint64_t)v78);
          v43 = v71;
          *v19 = v64;
          swift_endAccess(v79);
          goto LABEL_17;
        }
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_47:
      v31 = (uint64_t *)&v78;
      v68 = v24;
      v65 = v23;
      sub_1001BE870();
      v24 = v68;
      if ((v65 & 1) != 0)
        goto LABEL_38;
      goto LABEL_48;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v17);
  v43 = v71;
LABEL_16:
  swift_beginAccess(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v79, 33, 0);
  v44 = (void *)sub_1001B3E28(a1);
  swift_endAccess(v79);

  swift_beginAccess(v19, v79, 33, 0);
  v45 = sub_1001B4664(a1);
  swift_endAccess(v79);
  swift_bridgeObjectRelease(v45);
LABEL_17:
  sub_1001633CC();
  v47 = v46;
  if ((a6 & 1) != 0)
  {
    v48 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v48);
    os_unfair_lock_unlock(v48 + 4);
    swift_release(v48);
  }
  if (!v47)
  {
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 16))(v14, v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "no more sensor or actuation clients, releasing transaction", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v74 + 8))(v14, v12);
    sub_10016CA18();
  }
  sub_1001776B0(v75, v43, a4);
  return (uint64_t)a5;
}

uint64_t sub_100164BE0(unsigned int a1, __n128 a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  char v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  char v32[24];

  v4 = v2;
  v6 = DockCoreInfo.description.getter(a2);
  v8 = v7;
  v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v11 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v32, 0, 0);
  if (!*(_QWORD *)(*v11 + 16) || (sub_1001452C8(a1), (v12 & 1) == 0))
  {
LABEL_14:
    swift_bridgeObjectRelease(v8);
    v27 = *(os_unfair_lock_s **)(v4 + v9);
    swift_retain(v27);
    os_unfair_lock_unlock(v27 + 4);
    swift_release(v27);
    return 1;
  }
  swift_beginAccess(v11, v31, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v14 = *v11;
  v30 = *v11;
  *v11 = 0x8000000000000000;
  v16 = sub_1001452C8(a1);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = v15;
  if (*(_QWORD *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v15 & 1) != 0)
      {
LABEL_10:
        v29 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v16);
        v22 = sub_1001B4560(v6, v8);
        v24 = v23;
        v26 = v25;
        if (v29)
          *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v16) = v29;
        else
          sub_1001BA5B4(v16, v30);
        *v11 = v30;
        swift_endAccess(v31);
        sub_1001776B0(v22, v24, v26);
        goto LABEL_14;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    sub_1001BE870();
    if ((v3 & 1) != 0)
      goto LABEL_10;
    goto LABEL_17;
  }
  sub_1001B7CE8(v19, isUniquelyReferenced_nonNull_native);
  v20 = sub_1001452C8(a1);
  if ((v3 & 1) == (v21 & 1))
  {
    v16 = v20;
    if ((v3 & 1) == 0)
      goto LABEL_17;
    goto LABEL_10;
  }
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
  return result;
}

void sub_100164DFC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __n128 v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  char *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  uint64_t v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70[24];
  char v71[32];

  v68 = a1;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v6);
  os_unfair_lock_lock(v6 + 4);
  swift_release(v6);
  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v71, 0, 0);
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 + 64);
  v65 = *v7 + 64;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v64 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v60 = v1;
  v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  v59 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected;
  swift_bridgeObjectRetain(v8);
  v63 = v13;
  v14 = swift_beginAccess(v13, v70, 0, 0);
  v15 = 0;
  v16 = 0;
  v17 = v10 + 63;
  v18 = v5;
  v66 = v17 >> 6;
  v14.n128_u64[0] = 136315394;
  v56 = v14;
  v55 = (char *)&type metadata for Any + 8;
  v57 = v3;
  v58 = v2;
  v61 = v8;
  v62 = v5;
  while (v12)
  {
    v20 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v21 = v20 | (v15 << 6);
LABEL_19:
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21);
    if (*(_DWORD *)(v25 + 16) == v68)
    {
      v67 = v16;
      v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v27 = *v26;
      v19 = v26[1];
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v18, v64, v2);
      swift_bridgeObjectRetain_n(v19, 3);
      v28 = swift_retain_n(v25, 3);
      v29 = Logger.logObject.getter(v28);
      v30 = v18;
      v31 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v31))
      {
        v32 = swift_slowAlloc(18, -1);
        v33 = swift_slowAlloc(32, -1);
        v69 = v33;
        *(_DWORD *)v32 = v56.n128_u32[0];
        swift_bridgeObjectRetain(v19);
        *(_QWORD *)(v32 + 4) = sub_1000906BC(v27, v19, &v69);
        swift_release_n(v25, 2);
        swift_bridgeObjectRelease_n(v19, 3);
        *(_WORD *)(v32 + 12) = 1024;
        *(_DWORD *)(v32 + 14) = v68;
        _os_log_impl((void *)&_mh_execute_header, v29, v31, "Stopping animator for device %s, client %d disconnected", (uint8_t *)v32, 0x12u);
        swift_arrayDestroy(v33, 1, v55);
        v34 = v33;
        v2 = v58;
        swift_slowDealloc(v34, -1, -1);
        v35 = v32;
        v3 = v57;
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_release_n(v25, 2);
        swift_bridgeObjectRelease_n(v19, 2);
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
      v36 = v27;
      v16 = v67;
      v37 = *v63;
      swift_bridgeObjectRetain(v19);
      swift_retain(v25);
      swift_bridgeObjectRetain(v37);
      v39 = (uint64_t)sub_1001736DC(v38, v36, v19);
      swift_bridgeObjectRelease(v37);
      swift_release(v25);
      swift_bridgeObjectRelease(v19);
      if ((unint64_t)v39 >> 62)
      {
        if (v39 < 0)
          v51 = v39;
        else
          v51 = v39 & 0xFFFFFFFFFFFFFF8;
        if (!_CocoaArrayWrapper.endIndex.getter(v51))
        {
LABEL_4:
          swift_release(v25);
          swift_bridgeObjectRelease(v19);
          v19 = v39;
          goto LABEL_5;
        }
      }
      else if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_4;
      }
      if ((v39 & 0xC000000000000001) != 0)
      {
        v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
        swift_unknownObjectRelease(v52);
        swift_bridgeObjectRelease(v39);
      }
      else
      {
        v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease(v39);
        if (!v40)
          goto LABEL_47;
      }
      v41 = *(void **)(v60 + v59);
      if (v41)
      {
        v42 = v41;
        v43 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v42);
        v45 = DockCoreInfo.description.getter(v44);
        v47 = v46;

        if (v45 == v36 && v47 == v19)
        {
          swift_bridgeObjectRelease(v19);
          goto LABEL_36;
        }
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v36, v19, 0);
        swift_bridgeObjectRelease(v47);
        if ((v48 & 1) != 0)
        {
LABEL_36:
          v49 = *(void **)(v60 + v59);
          v50 = v49;
          sub_10015F4C8(0, v49);

          v42 = v50;
        }
        v3 = v57;
        v2 = v58;

      }
      sub_1000BA9C4(1, 0.0);
      swift_release(v25);
LABEL_5:
      swift_bridgeObjectRelease(v19);
      v8 = v61;
      v18 = v62;
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v15 >= v66)
    goto LABEL_45;
  v23 = *(_QWORD *)(v65 + 8 * v15);
  if (v23)
  {
LABEL_18:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v15 << 6);
    goto LABEL_19;
  }
  v24 = v15 + 1;
  if (v15 + 1 >= v66)
    goto LABEL_45;
  v23 = *(_QWORD *)(v65 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v15 + 2;
  if (v15 + 2 >= v66)
    goto LABEL_45;
  v23 = *(_QWORD *)(v65 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v15 + 3;
  if (v15 + 3 >= v66)
  {
LABEL_45:
    swift_release(v8);
    v53 = *(os_unfair_lock_s **)(v60 + v54);
    swift_retain(v53);
    os_unfair_lock_unlock(v53 + 4);
    swift_release(v53);
    return;
  }
  v23 = *(_QWORD *)(v65 + 8 * v24);
  if (v23)
  {
LABEL_17:
    v15 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v66)
      goto LABEL_45;
    v23 = *(_QWORD *)(v65 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_48:
  __break(1u);
}

void sub_1001653B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  os_unfair_lock_s *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  NSObject *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  NSObject **v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  NSObject **v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64_t v94;
  __n128 v95;
  int64_t v96;
  NSObject *v97;
  unint64_t v98;
  unint64_t v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  void *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  NSObject **v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int64_t v122;
  __n128 v123;
  int64_t v124;
  NSObject *v125;
  unint64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  void *v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  NSObject **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int64_t v148;
  __n128 v149;
  int64_t v150;
  NSObject *v151;
  unint64_t v152;
  unint64_t v153;
  int64_t v154;
  unint64_t v155;
  int64_t v156;
  void *v157;
  NSObject *v158;
  os_log_type_t v159;
  uint64_t v160;
  NSObject **v161;
  uint64_t v162;
  NSObject **v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  __n128 v173;
  char *v174;
  char *v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  void *v183;
  void *v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  NSObject *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  __n128 v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  NSObject *v233;
  os_log_type_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  os_unfair_lock_s *v248;
  uint64_t v249;
  unint64_t *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t *v255;
  _QWORD *v256;
  __n128 v257;
  char *v258;
  uint64_t *v259;
  uint64_t *v260;
  char *v261;
  __n128 v262;
  uint64_t v263;
  void (*v264)(char *, uint64_t);
  uint64_t (*v265)(char *);
  uint64_t v266;
  void *v267;
  uint64_t v268[3];
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273[24];
  char v274[24];
  char v275[24];
  char v276[24];
  char v277[24];
  char v278[32];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v258 = (char *)&v249 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v252 = (char *)&v249 - v7;
  v8 = __chkstk_darwin(v6);
  v257.n128_u64[0] = (unint64_t)&v249 - v9;
  v10 = __chkstk_darwin(v8);
  v260 = (uint64_t *)((char *)&v249 - v11);
  v12 = __chkstk_darwin(v10);
  v261 = (char *)&v249 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v249 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v249 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v249 - v20;
  v265 = *(uint64_t (**)(char *))(v3 + 16);
  v266 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v22 = v265((char *)&v249 - v20);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "removing all clients", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v264 = *(void (**)(char *, uint64_t))(v3 + 8);
  v264(v21, v2);
  v251 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v26 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v26);
  os_unfair_lock_lock(v26 + 4);
  swift_release(v26);
  v253 = v1;
  v27 = (unint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v278, 1, 0);
  v28 = *v27;
  v30 = (unint64_t *)(*v27 + 64);
  v29 = *v30;
  v254 = v27;
  v255 = v30;
  v31 = 1 << *(_BYTE *)(v28 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v29;
  v256 = (_QWORD *)((unint64_t)(v31 + 63) >> 6);
  v34 = swift_bridgeObjectRetain(v28);
  v35 = 0;
  v34.n128_u64[0] = 138412290;
  v262 = v34;
  v263 = v2;
  while (1)
  {
    if (v33)
    {
      v37 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v38 = v37 | (v35 << 6);
      goto LABEL_24;
    }
    v39 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if (v39 >= (uint64_t)v256)
      goto LABEL_26;
    v40 = v255[v39];
    ++v35;
    if (!v40)
    {
      v35 = v39 + 1;
      if (v39 + 1 >= (uint64_t)v256)
        goto LABEL_26;
      v40 = v255[v35];
      if (!v40)
      {
        v35 = v39 + 2;
        if (v39 + 2 >= (uint64_t)v256)
          goto LABEL_26;
        v40 = v255[v35];
        if (!v40)
          break;
      }
    }
LABEL_23:
    v33 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v35 << 6);
    v2 = v263;
LABEL_24:
    v42 = *(void **)(*(_QWORD *)(v28 + 56) + 8 * v38);
    ((void (*)(char *, uint64_t, uint64_t))v265)(v19, v266, v2);
    v43 = v42;
    v36 = Logger.logObject.getter(v43);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v44))
    {
      v45 = swift_slowAlloc(12, -1);
      v259 = (uint64_t *)v35;
      v46 = v19;
      v47 = v16;
      v48 = v28;
      v49 = v45;
      v50 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = v262.n128_u32[0];
      *(_QWORD *)(v49 + 4) = v43;
      *v50 = v43;
      _os_log_impl((void *)&_mh_execute_header, v36, v44, "forcibly removing act client %@", (uint8_t *)v49, 0xCu);
      v51 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v50, 1, v51);
      swift_slowDealloc(v50, -1, -1);
      v52 = v49;
      v28 = v48;
      v16 = v47;
      v19 = v46;
      v35 = (uint64_t)v259;
      v2 = v263;
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {

      v36 = v43;
    }

    v264(v19, v2);
    -[NSObject invalidate](v43, "invalidate");

  }
  v41 = v39 + 3;
  if (v41 < (uint64_t)v256)
  {
    v40 = v255[v41];
    if (!v40)
    {
      while (1)
      {
        v35 = v41 + 1;
        if (__OFADD__(v41, 1))
          break;
        if (v35 >= (uint64_t)v256)
          goto LABEL_26;
        v40 = v255[v35];
        ++v41;
        if (v40)
          goto LABEL_23;
      }
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    v35 = v41;
    goto LABEL_23;
  }
LABEL_26:
  swift_release(v28);
  v53 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v54 = *v254;
  *v254 = v53;
  swift_bridgeObjectRelease(v54);
  v55 = sub_1001C1AD0((uint64_t)_swiftEmptyArrayStorage);
  v56 = v253;
  v57 = (unint64_t *)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v277, 1, 0);
  v58 = *v57;
  *v57 = v55;
  swift_bridgeObjectRelease(v58);
  v59 = (unint64_t *)(v56 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess(v56 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v276, 1, 0);
  v60 = *v59;
  v62 = (_QWORD *)(*v59 + 64);
  v61 = *v62;
  v255 = v59;
  v256 = v62;
  v63 = 1 << *(_BYTE *)(v60 + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  v65 = v64 & v61;
  v259 = (uint64_t *)((unint64_t)(v63 + 63) >> 6);
  v66 = swift_bridgeObjectRetain(v60);
  v67 = 0;
  v68 = v263;
  while (2)
  {
    if (v65)
    {
      v70 = __clz(__rbit64(v65));
      v65 &= v65 - 1;
      v71 = v70 | (v67 << 6);
LABEL_47:
      v75 = *(void **)(*(_QWORD *)(v60 + 56) + 8 * v71);
      ((void (*)(char *, uint64_t, uint64_t, __n128))v265)(v16, v266, v68, v66);
      v76 = v75;
      v69 = Logger.logObject.getter(v76);
      v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v77))
      {
        v78 = swift_slowAlloc(12, -1);
        v79 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v78 = v262.n128_u32[0];
        *(_QWORD *)(v78 + 4) = v76;
        *v79 = v76;
        _os_log_impl((void *)&_mh_execute_header, v69, v77, "forcibly removing sens client %@", (uint8_t *)v78, 0xCu);
        v80 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v79, 1, v80);
        swift_slowDealloc(v79, -1, -1);
        v81 = v78;
        v68 = v263;
        swift_slowDealloc(v81, -1, -1);
      }
      else
      {

        v69 = v76;
      }

      v264(v16, v68);
      -[NSObject invalidate](v76, "invalidate");

      continue;
    }
    break;
  }
  v72 = v67 + 1;
  if (__OFADD__(v67, 1))
    goto LABEL_172;
  if (v72 < (uint64_t)v259)
  {
    v73 = v256[v72];
    ++v67;
    if (!v73)
    {
      v67 = v72 + 1;
      if (v72 + 1 >= (uint64_t)v259)
        goto LABEL_49;
      v73 = v256[v67];
      if (!v73)
      {
        v67 = v72 + 2;
        if (v72 + 2 >= (uint64_t)v259)
          goto LABEL_49;
        v73 = v256[v67];
        if (!v73)
        {
          v74 = v72 + 3;
          if (v74 >= (uint64_t)v259)
            goto LABEL_49;
          v73 = v256[v74];
          if (!v73)
          {
            while (1)
            {
              v67 = v74 + 1;
              if (__OFADD__(v74, 1))
                break;
              if (v67 >= (uint64_t)v259)
                goto LABEL_49;
              v73 = v256[v67];
              ++v74;
              if (v73)
                goto LABEL_46;
            }
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }
          v67 = v74;
        }
      }
    }
LABEL_46:
    v65 = (v73 - 1) & v73;
    v71 = __clz(__rbit64(v73)) + (v67 << 6);
    goto LABEL_47;
  }
LABEL_49:
  swift_release(v60);
  v82 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v83 = *v255;
  *v255 = v82;
  swift_bridgeObjectRelease(v83);
  v84 = sub_1001C1BB0((uint64_t)_swiftEmptyArrayStorage);
  v85 = v253;
  v86 = (unint64_t *)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules, v275, 1, 0);
  v87 = *v86;
  *v86 = v84;
  swift_bridgeObjectRelease(v87);
  v88 = (_QWORD *)(v85 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess(v85 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, v274, 1, 0);
  v256 = v88;
  v89 = *v88;
  v90 = *(_QWORD *)(*v88 + 64);
  v259 = (uint64_t *)(*v88 + 64);
  v91 = 1 << *(_BYTE *)(v89 + 32);
  v92 = -1;
  if (v91 < 64)
    v92 = ~(-1 << v91);
  v93 = v92 & v90;
  v94 = (unint64_t)(v91 + 63) >> 6;
  v95 = swift_bridgeObjectRetain(v89);
  v96 = 0;
  while (2)
  {
    if (v93)
    {
      v98 = __clz(__rbit64(v93));
      v93 &= v93 - 1;
      v99 = v98 | (v96 << 6);
LABEL_70:
      v103 = *(void **)(*(_QWORD *)(v89 + 56) + 8 * v99);
      ((void (*)(char *, uint64_t, uint64_t, __n128))v265)(v261, v266, v68, v95);
      v104 = v103;
      v97 = Logger.logObject.getter(v104);
      v105 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v97, v105))
      {
        v106 = swift_slowAlloc(12, -1);
        v107 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v106 = v262.n128_u32[0];
        *(_QWORD *)(v106 + 4) = v104;
        *v107 = v104;
        _os_log_impl((void *)&_mh_execute_header, v97, v105, "forcibly removing pairing client %@", (uint8_t *)v106, 0xCu);
        v108 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v107, 1, v108);
        swift_slowDealloc(v107, -1, -1);
        v109 = v106;
        v68 = v263;
        swift_slowDealloc(v109, -1, -1);
      }
      else
      {

        v97 = v104;
      }

      v264(v261, v68);
      -[NSObject invalidate](v104, "invalidate");

      continue;
    }
    break;
  }
  v100 = v96 + 1;
  if (__OFADD__(v96, 1))
    goto LABEL_173;
  if (v100 < v94)
  {
    v101 = v259[v100];
    ++v96;
    if (!v101)
    {
      v96 = v100 + 1;
      if (v100 + 1 >= v94)
        goto LABEL_72;
      v101 = v259[v96];
      if (!v101)
      {
        v96 = v100 + 2;
        if (v100 + 2 >= v94)
          goto LABEL_72;
        v101 = v259[v96];
        if (!v101)
        {
          v102 = v100 + 3;
          if (v102 >= v94)
            goto LABEL_72;
          v101 = v259[v102];
          if (!v101)
          {
            while (1)
            {
              v96 = v102 + 1;
              if (__OFADD__(v102, 1))
                break;
              if (v96 >= v94)
                goto LABEL_72;
              v101 = v259[v96];
              ++v102;
              if (v101)
                goto LABEL_69;
            }
LABEL_180:
            __break(1u);
            goto LABEL_181;
          }
          v96 = v102;
        }
      }
    }
LABEL_69:
    v93 = (v101 - 1) & v101;
    v99 = __clz(__rbit64(v101)) + (v96 << 6);
    goto LABEL_70;
  }
LABEL_72:
  swift_release(v89);
  v110 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v111 = *v256;
  *v256 = v110;
  swift_bridgeObjectRelease(v111);
  v112 = sub_1001C1BBC((uint64_t)_swiftEmptyArrayStorage);
  v113 = v253;
  v114 = (unint64_t *)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules, v273, 1, 0);
  v115 = *v114;
  *v114 = v112;
  swift_bridgeObjectRelease(v115);
  v116 = (uint64_t *)(v113 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients);
  swift_beginAccess(v113 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, &v272, 1, 0);
  v259 = v116;
  v117 = *v116;
  v118 = *(_QWORD *)(*v116 + 64);
  v261 = (char *)(*v116 + 64);
  v119 = 1 << *(_BYTE *)(v117 + 32);
  v120 = -1;
  if (v119 < 64)
    v120 = ~(-1 << v119);
  v121 = v120 & v118;
  v122 = (unint64_t)(v119 + 63) >> 6;
  v123 = swift_bridgeObjectRetain(v117);
  v124 = 0;
  while (2)
  {
    if (v121)
    {
      v126 = __clz(__rbit64(v121));
      v121 &= v121 - 1;
      v127 = v126 | (v124 << 6);
LABEL_93:
      v132 = *(void **)(*(_QWORD *)(v117 + 56) + 8 * v127);
      ((void (*)(uint64_t *, uint64_t, uint64_t, __n128))v265)(v260, v266, v68, v123);
      v133 = v132;
      v125 = Logger.logObject.getter(v133);
      v134 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v125, v134))
      {
        v135 = swift_slowAlloc(12, -1);
        v136 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v135 = v262.n128_u32[0];
        *(_QWORD *)(v135 + 4) = v133;
        *v136 = v133;
        _os_log_impl((void *)&_mh_execute_header, v125, v134, "forcibly removing trajectory client %@", (uint8_t *)v135, 0xCu);
        v137 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v136, 1, v137);
        swift_slowDealloc(v136, -1, -1);
        v138 = v135;
        v68 = v263;
        swift_slowDealloc(v138, -1, -1);
      }
      else
      {

        v125 = v133;
      }

      v264((char *)v260, v68);
      -[NSObject invalidate](v133, "invalidate");

      continue;
    }
    break;
  }
  v128 = v124 + 1;
  if (__OFADD__(v124, 1))
    goto LABEL_174;
  v129 = v257.n128_u64[0];
  if (v128 < v122)
  {
    v130 = *(_QWORD *)&v261[8 * v128];
    ++v124;
    if (!v130)
    {
      v124 = v128 + 1;
      if (v128 + 1 >= v122)
        goto LABEL_95;
      v130 = *(_QWORD *)&v261[8 * v124];
      if (!v130)
      {
        v124 = v128 + 2;
        if (v128 + 2 >= v122)
          goto LABEL_95;
        v130 = *(_QWORD *)&v261[8 * v124];
        if (!v130)
        {
          v131 = v128 + 3;
          if (v131 >= v122)
            goto LABEL_95;
          v130 = *(_QWORD *)&v261[8 * v131];
          if (!v130)
          {
            while (1)
            {
              v124 = v131 + 1;
              if (__OFADD__(v131, 1))
                break;
              if (v124 >= v122)
                goto LABEL_95;
              v130 = *(_QWORD *)&v261[8 * v124];
              ++v131;
              if (v130)
                goto LABEL_92;
            }
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          v124 = v131;
        }
      }
    }
LABEL_92:
    v121 = (v130 - 1) & v130;
    v127 = __clz(__rbit64(v130)) + (v124 << 6);
    goto LABEL_93;
  }
LABEL_95:
  swift_release(v117);
  v139 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v140 = *v259;
  *v259 = v139;
  swift_bridgeObjectRelease(v140);
  v141 = (uint64_t *)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, &v271, 1, 0);
  v142 = *v141;
  v144 = (char *)(*v141 + 64);
  v143 = *(_QWORD *)v144;
  v260 = v141;
  v261 = v144;
  v145 = 1 << *(_BYTE *)(v142 + 32);
  v146 = -1;
  if (v145 < 64)
    v146 = ~(-1 << v145);
  v147 = v146 & v143;
  v148 = (unint64_t)(v145 + 63) >> 6;
  v149 = swift_bridgeObjectRetain(v142);
  v150 = 0;
  while (2)
  {
    if (v147)
    {
      v152 = __clz(__rbit64(v147));
      v147 &= v147 - 1;
      v153 = v152 | (v150 << 6);
LABEL_116:
      v157 = *(void **)(*(_QWORD *)(v142 + 56) + 8 * v153);
      ((void (*)(unint64_t, uint64_t, uint64_t, __n128))v265)(v129, v266, v68, v149);
      v158 = v157;
      v151 = Logger.logObject.getter(v158);
      v159 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v151, v159))
      {
        v160 = swift_slowAlloc(12, -1);
        v161 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v160 = v262.n128_u32[0];
        *(_QWORD *)(v160 + 4) = v158;
        *v161 = v158;
        _os_log_impl((void *)&_mh_execute_header, v151, v159, "forcibly removing event client %@", (uint8_t *)v160, 0xCu);
        v162 = sub_10009061C(&qword_10026BC40);
        swift_arrayDestroy(v161, 1, v162);
        v163 = v161;
        v129 = v257.n128_u64[0];
        swift_slowDealloc(v163, -1, -1);
        v164 = v160;
        v68 = v263;
        swift_slowDealloc(v164, -1, -1);
      }
      else
      {

        v151 = v158;
      }

      v264((char *)v129, v68);
      -[NSObject invalidate](v158, "invalidate");

      continue;
    }
    break;
  }
  v154 = v150 + 1;
  if (__OFADD__(v150, 1))
    goto LABEL_175;
  if (v154 < v148)
  {
    v155 = *(_QWORD *)&v261[8 * v154];
    ++v150;
    if (!v155)
    {
      v150 = v154 + 1;
      if (v154 + 1 >= v148)
        goto LABEL_118;
      v155 = *(_QWORD *)&v261[8 * v150];
      if (!v155)
      {
        v150 = v154 + 2;
        if (v154 + 2 >= v148)
          goto LABEL_118;
        v155 = *(_QWORD *)&v261[8 * v150];
        if (!v155)
        {
          v156 = v154 + 3;
          if (v156 >= v148)
            goto LABEL_118;
          v155 = *(_QWORD *)&v261[8 * v156];
          if (!v155)
          {
            while (1)
            {
              v150 = v156 + 1;
              if (__OFADD__(v156, 1))
                break;
              if (v150 >= v148)
                goto LABEL_118;
              v155 = *(_QWORD *)&v261[8 * v150];
              ++v156;
              if (v155)
                goto LABEL_115;
            }
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }
          v150 = v156;
        }
      }
    }
LABEL_115:
    v147 = (v155 - 1) & v155;
    v153 = __clz(__rbit64(v155)) + (v150 << 6);
    goto LABEL_116;
  }
LABEL_118:
  swift_release(v142);
  v165 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  v166 = *v260;
  *v260 = v165;
  swift_bridgeObjectRelease(v166);
  v167 = (unint64_t *)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, &v270, 1, 0);
  v250 = v167;
  v168 = *v167;
  v169 = *(_QWORD *)(*v167 + 64);
  v255 = (unint64_t *)(*v167 + 64);
  v170 = 1 << *(_BYTE *)(v168 + 32);
  v171 = -1;
  if (v170 < 64)
    v171 = ~(-1 << v170);
  v172 = v171 & v169;
  v256 = (_QWORD *)((unint64_t)(v170 + 63) >> 6);
  v259 = (uint64_t *)v168;
  v173 = swift_bridgeObjectRetain(v168);
  v174 = 0;
  v173.n128_u64[0] = 136315138;
  v257 = v173;
  v254 = (unint64_t *)((char *)&type metadata for Any + 8);
  v175 = v258;
  v176 = v252;
  while (2)
  {
    if (v172)
    {
      v260 = (uint64_t *)((v172 - 1) & v172);
      v261 = v174;
      v177 = __clz(__rbit64(v172)) | ((_QWORD)v174 << 6);
LABEL_138:
      v182 = v259[7] + 16 * v177;
      v183 = *(void **)v182;
      v184 = *(void **)(v182 + 8);
      ((void (*)(char *, uint64_t, uint64_t))v265)(v176, v266, v68);
      v262.n128_u64[0] = (unint64_t)v183;
      v185 = v183;
      v186 = v184;
      v187 = v185;
      v188 = v186;
      v189 = v187;
      v190 = v188;
      v191 = Logger.logObject.getter(v190);
      v192 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v191, v192))
      {
        v193 = swift_slowAlloc(12, -1);
        v194 = swift_slowAlloc(32, -1);
        v268[0] = v194;
        *(_DWORD *)v193 = v257.n128_u32[0];
        v269 = v262.n128_u64[0];
        v195 = v189;
        v196 = sub_10009061C(&qword_100270170);
        v197 = String.init<A>(describing:)(&v269, v196);
        v199 = v198;
        *(_QWORD *)(v193 + 4) = sub_1000906BC(v197, v198, v268);

        v68 = v263;
        v200 = v199;
        v175 = v258;
        swift_bridgeObjectRelease(v200);
        _os_log_impl((void *)&_mh_execute_header, v191, v192, "forcibly removing battery client %s", (uint8_t *)v193, 0xCu);
        swift_arrayDestroy(v194, 1, v254);
        swift_slowDealloc(v194, -1, -1);
        swift_slowDealloc(v193, -1, -1);

      }
      else
      {

      }
      v264(v176, v68);
      v172 = (unint64_t)v260;
      if (v262.n128_u64[0])
      {
        objc_msgSend(v189, "invalidate");

      }
      v174 = v261;
      continue;
    }
    break;
  }
  v178 = (uint64_t)(v174 + 1);
  if (__OFADD__(v174, 1))
    goto LABEL_176;
  if (v178 >= (uint64_t)v256)
  {
LABEL_143:
    swift_release(v259);
    v201 = sub_1001C1CC8((uint64_t)_swiftEmptyArrayStorage);
    v202 = *v250;
    *v250 = v201;
    swift_bridgeObjectRelease(v202);
    v203 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
    v204 = v253;
    v205 = *(void **)(v253 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer);
    if (v205)
    {
      v206 = v205;
      dispatch thunk of RepeatingTimer.cancel()(v206, v207, v208, v209, v210);

      v204 = v253;
      v205 = *(void **)(v253 + v203);
    }
    *(_QWORD *)(v204 + v203) = 0;
    v211 = v204;

    v212 = (unint64_t *)(v211
                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
    swift_beginAccess(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v268, 1, 0);
    v254 = v212;
    v213 = (_QWORD *)*v212;
    v214 = *(_QWORD *)(*v212 + 64);
    v259 = (uint64_t *)(*v212 + 64);
    v215 = 1 << *((_BYTE *)v213 + 32);
    v216 = -1;
    if (v215 < 64)
      v216 = ~(-1 << v215);
    v217 = v216 & v214;
    v260 = (uint64_t *)((unint64_t)(v215 + 63) >> 6);
    v218 = swift_bridgeObjectRetain(v213);
    v219 = 0;
    v255 = (unint64_t *)((char *)&type metadata for Any + 8);
    v256 = v213;
    while (1)
    {
      if (v217)
      {
        v262.n128_u64[0] = (v217 - 1) & v217;
        v220 = __clz(__rbit64(v217)) | (v219 << 6);
      }
      else
      {
        v221 = v219 + 1;
        if (__OFADD__(v219, 1))
          goto LABEL_177;
        if (v221 >= (uint64_t)v260)
        {
LABEL_170:
          swift_release(v213);
          v246 = sub_1001C1CD4((uint64_t)_swiftEmptyArrayStorage);
          v247 = *v254;
          *v254 = v246;
          swift_bridgeObjectRelease(v247);
          v248 = *(os_unfair_lock_s **)(v253 + v251);
          swift_retain(v248);
          os_unfair_lock_unlock(v248 + 4);
          swift_release(v248);
          return;
        }
        v222 = v259[v221];
        ++v219;
        if (!v222)
        {
          v219 = v221 + 1;
          if (v221 + 1 >= (uint64_t)v260)
            goto LABEL_170;
          v222 = v259[v219];
          if (!v222)
          {
            v219 = v221 + 2;
            if (v221 + 2 >= (uint64_t)v260)
              goto LABEL_170;
            v222 = v259[v219];
            if (!v222)
            {
              v223 = v221 + 3;
              if (v223 >= (uint64_t)v260)
                goto LABEL_170;
              v222 = v259[v223];
              if (!v222)
              {
                while (1)
                {
                  v219 = v223 + 1;
                  if (__OFADD__(v223, 1))
                    goto LABEL_184;
                  if (v219 >= (uint64_t)v260)
                    goto LABEL_170;
                  v222 = v259[v219];
                  ++v223;
                  if (v222)
                    goto LABEL_164;
                }
              }
              v219 = v223;
            }
          }
        }
LABEL_164:
        v262.n128_u64[0] = (v222 - 1) & v222;
        v220 = __clz(__rbit64(v222)) + (v219 << 6);
      }
      v224 = v213[7] + 16 * v220;
      v226 = *(void **)v224;
      v225 = *(void **)(v224 + 8);
      ((void (*)(char *, uint64_t, uint64_t, __n128))v265)(v175, v266, v68, v218);
      v227 = v226;
      v228 = v225;
      v229 = v227;
      v230 = v228;
      v231 = v229;
      v232 = v230;
      v233 = Logger.logObject.getter(v232);
      v234 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v233, v234))
      {
        v235 = swift_slowAlloc(12, -1);
        v236 = swift_slowAlloc(32, -1);
        v261 = (char *)v219;
        v237 = v236;
        v269 = v236;
        *(_DWORD *)v235 = v257.n128_u32[0];
        v267 = v226;
        v238 = v231;
        v239 = sub_10009061C(&qword_100270170);
        v240 = String.init<A>(describing:)(&v267, v239);
        v242 = v241;
        *(_QWORD *)(v235 + 4) = sub_1000906BC(v240, v241, &v269);

        v243 = v242;
        v175 = v258;
        swift_bridgeObjectRelease(v243);
        _os_log_impl((void *)&_mh_execute_header, v233, v234, "forcibly removing tracking summary client %s", (uint8_t *)v235, 0xCu);
        swift_arrayDestroy(v237, 1, v255);
        v244 = v237;
        v219 = (uint64_t)v261;
        swift_slowDealloc(v244, -1, -1);
        v245 = v235;
        v213 = v256;
        swift_slowDealloc(v245, -1, -1);

      }
      else
      {

      }
      v68 = v263;
      v264(v175, v263);
      v217 = v262.n128_u64[0];
      if (v226)
      {
        objc_msgSend(v231, "invalidate");

      }
    }
  }
  v179 = v255[v178];
  v180 = (uint64_t)(v174 + 1);
  if (v179)
    goto LABEL_137;
  v180 = (uint64_t)(v174 + 2);
  if ((uint64_t)(v174 + 2) >= (uint64_t)v256)
    goto LABEL_143;
  v179 = v255[v180];
  if (v179)
    goto LABEL_137;
  v180 = (uint64_t)(v174 + 3);
  if ((uint64_t)(v174 + 3) >= (uint64_t)v256)
    goto LABEL_143;
  v179 = v255[v180];
  if (v179)
  {
LABEL_137:
    v260 = (uint64_t *)((v179 - 1) & v179);
    v261 = (char *)v180;
    v177 = __clz(__rbit64(v179)) + (v180 << 6);
    goto LABEL_138;
  }
  v181 = v174 + 4;
  if ((uint64_t)(v174 + 4) >= (uint64_t)v256)
    goto LABEL_143;
  v179 = v255[(_QWORD)v181];
  if (v179)
  {
    v180 = (uint64_t)(v174 + 4);
    goto LABEL_137;
  }
  while (1)
  {
    v180 = (uint64_t)(v181 + 1);
    if (__OFADD__(v181, 1))
      break;
    if (v180 >= (uint64_t)v256)
      goto LABEL_143;
    v179 = v255[v180];
    ++v181;
    if (v179)
      goto LABEL_137;
  }
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
}

uint64_t sub_100166A00(unsigned int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v11 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v11);
  os_unfair_lock_lock(v11 + 4);
  swift_release(v11);
  v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, v31, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(*v12 + 16) && (v14 = sub_1001452C8(a1), (v15 & 1) != 0))
  {
    if (a2)
    {
      v29 = v6;
      v16 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v14);
      sub_100090EE8(0, &qword_100270168, NSXPCConnection_ptr);
      v17 = v16;
      v18 = a2;
      LOBYTE(a2) = static NSObject.== infix(_:_:)(v17, v18);

      if ((a2 & 1) != 0)
      {
        swift_beginAccess(v12, v30, 33, 0);
        v19 = sub_1001B3E28(a1);
        swift_endAccess(v30);

        v17 = (id)v19;
      }

      v6 = v29;
    }
  }
  else
  {
    LOBYTE(a2) = 0;
  }
  sub_1001633CC();
  v21 = v20;
  v22 = *(os_unfair_lock_s **)(v3 + v10);
  swift_retain(v22);
  os_unfair_lock_unlock(v22 + 4);
  swift_release(v22);
  if ((a2 & 1) != 0 && !v21)
  {
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "no more clients, releasing transaction", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10016CA18();
  }
  return 1;
}

void sub_100166C58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  os_unfair_lock_s *v19;
  _BYTE v20[24];

  v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v20, 0, 0);
  v7 = *v6;
  v8 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(v7);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_21;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_21;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_5:
    sub_1001ADCB0(*(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15), a2);
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_21:
    swift_release(v7);
    v19 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain(v19);
    os_unfair_lock_unlock(v19 + 4);
    swift_release(v19);
    return;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t (*sub_100166E10(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t (*v12)();
  os_unfair_lock_s *v13;
  __int128 v15;
  _BYTE v16[24];

  v3 = v2;
  v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions, v16, 0, 0);
  v9 = *v8;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v9);
  v10 = sub_100145264(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v15 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_retain(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10 + 8));
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(swift_allocObject(&unk_10023D210, 32, 7) + 16) = v15;
  v12 = sub_100177674;
LABEL_6:
  v13 = *(os_unfair_lock_s **)(v3 + v6);
  swift_retain(v13);
  os_unfair_lock_unlock(v13 + 4);
  swift_release(v13);
  return v12;
}

uint64_t (*sub_100166F54(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t (*v12)();
  os_unfair_lock_s *v13;
  __int128 v15;
  _BYTE v16[24];

  v3 = v2;
  v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions, v16, 0, 0);
  v9 = *v8;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v9);
  v10 = sub_100145264(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v15 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_retain(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10 + 8));
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(swift_allocObject(&unk_10023D1E8, 32, 7) + 16) = v15;
  v12 = sub_100177674;
LABEL_6:
  v13 = *(os_unfair_lock_s **)(v3 + v6);
  swift_retain(v13);
  os_unfair_lock_unlock(v13 + 4);
  swift_release(v13);
  return v12;
}

uint64_t sub_100167098(unsigned int a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  char v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  os_unfair_lock_s *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  char v41[24];

  v9 = v7;
  v34 = DockCoreInfo.description.getter(a2);
  v14 = v13;
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v15 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v15);
  os_unfair_lock_lock(v15 + 4);
  swift_release(v15);
  v16 = (uint64_t *)(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess(v9 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules, v41, 0, 0);
  if (!*(_QWORD *)(*v16 + 16) || (sub_1001452C8(a1), (v17 & 1) == 0))
  {
    v18 = sub_1001B1E48((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess(v16, v40, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    v38 = *v16;
    *v16 = 0x8000000000000000;
    sub_1001BBB14(v18, a1, isUniquelyReferenced_nonNull_native);
    v20 = *v16;
    *v16 = v38;
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v40);
  }
  swift_beginAccess(v16, v40, 33, 0);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  v21 = swift_isUniquelyReferenced_nonNull_native(*v16);
  v22 = *v16;
  v39 = *v16;
  *v16 = 0x8000000000000000;
  v24 = sub_1001452C8(a1);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = v23;
  if (*(_QWORD *)(v22 + 24) >= v27)
  {
    if ((v21 & 1) != 0)
    {
      if ((v23 & 1) == 0)
        goto LABEL_17;
      goto LABEL_11;
    }
LABEL_16:
    sub_1001BE684();
    if ((v8 & 1) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
  sub_1001B79B0(v27, v21);
  v28 = sub_1001452C8(a1);
  if ((v8 & 1) != (v29 & 1))
  {
LABEL_18:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
    __break(1u);
    return result;
  }
  v24 = v28;
  if ((v8 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  v30 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v24);
  v31 = swift_isUniquelyReferenced_nonNull_native(v30);
  sub_1001BBB08(a4, a5, a6, a7, v34, v14, v31);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v30)
    *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v24) = v30;
  else
    sub_1001BA5B4(v24, v39);
  *v16 = v39;
  swift_endAccess(v40);
  v32 = *(os_unfair_lock_s **)(v9 + v37);
  swift_retain(v32);
  os_unfair_lock_unlock(v32 + 4);
  swift_release(v32);
  return 1;
}

uint64_t sub_100167338(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  char v78[24];

  v6 = v5;
  v69 = a3;
  v10 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = DockCoreInfo.description.getter(v13);
  v15 = v14;
  v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v17 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v17);
  os_unfair_lock_lock(v17 + 4);
  swift_release(v17);
  v18 = (uint64_t *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules, v78, 0, 0);
  v19 = *v18;
  if (!*(_QWORD *)(*v18 + 16))
    goto LABEL_12;
  sub_1001452C8(a1);
  if ((v20 & 1) == 0)
    goto LABEL_12;
  v21 = sub_1001452C8(a1);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_12:
    v39 = v15;
LABEL_13:
    swift_bridgeObjectRelease(v39);
    a4 = 0;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    a5 = 0;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v15);
  v24 = sub_100145264(v70, v15);
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease_n(v15, 2);
    v39 = v23;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v23 + 56) + 32 * v24 + 8));
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v23);
  v27 = *v18;
  if (!*(_QWORD *)(*v18 + 16))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v28 = sub_1001452C8(a1);
  if ((v22 & 1) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
  if (!*(_QWORD *)(v29 + 16))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v67 = a4;
  v68 = v10;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v29);
  v30 = sub_100145264(v70, v15);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v29);
    __break(1u);
    goto LABEL_46;
  }
  v32 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 32 * v30);
  v34 = *v32;
  v33 = v32[1];
  a4 = v32[2];
  v72 = v32[3];
  v73 = v34;
  v74 = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v29);
  v35 = sub_1001740E8(a4);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a5);
  v37 = sub_1001740E8(v36);
  swift_bridgeObjectRelease(a5);
  if (*(_QWORD *)(v37 + 16) <= *(_QWORD *)(v35 + 16) >> 3)
  {
    v77[0] = v35;
    sub_100171A04(v37);
    swift_bridgeObjectRelease(v37);
    v38 = (unint64_t *)v77[0];
  }
  else
  {
    v38 = sub_100171B98(v37, v35);
    swift_bridgeObjectRelease(v37);
  }
  a5 = sub_1001BF850((uint64_t)v38);
  swift_bridgeObjectRelease(v38);
  v10 = v68;
  if (a5[2])
  {
    swift_retain(a5);
    v51 = v74;
    if (v74)
    {
      v52 = v72;
      sub_1001776E0(v73, v74, a4);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v51);
      v65 = v52;
    }
    else
    {
      v65 = 1;
    }
    swift_beginAccess(v18, v77, 33, 0);
    swift_bridgeObjectRetain(v67);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v76 = *v18;
    v53 = v76;
    *v18 = 0x8000000000000000;
    v10 = sub_1001452C8(a1);
    v54 = *(_QWORD *)(v53 + 16);
    v55 = (v22 & 1) == 0;
    v56 = v54 + v55;
    if (!__OFADD__(v54, v55))
    {
      if (*(_QWORD *)(v53 + 24) >= v56)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_44;
        goto LABEL_32;
      }
      v10 = v22;
      sub_1001B79B0(v56, isUniquelyReferenced_nonNull_native);
      v57 = sub_1001452C8(a1);
      if ((v10 & 1) == (v58 & 1))
      {
        v59 = v57;
        v22 = v10;
        while ((v22 & 1) == 0)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          v64 = v22;
          sub_1001BE684();
          v22 = v64;
LABEL_32:
          v59 = v10;
        }
        v60 = *(_QWORD *)(*(_QWORD *)(v76 + 56) + 8 * v59);
        v61 = swift_isUniquelyReferenced_nonNull_native(v60);
        v75 = v60;
        sub_1001BBB08(v69, v67, (uint64_t)a5, v65, v70, v15, v61);
        v62 = v75;
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(0x8000000000000000);
        v63 = v76;
        if (v62)
          *(_QWORD *)(*(_QWORD *)(v76 + 56) + 8 * v59) = v62;
        else
          sub_1001BA5B4(v59, v76);
        v10 = v68;
        *v18 = v63;
        swift_endAccess(v77);
        goto LABEL_15;
      }
LABEL_46:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
      __break(1u);
      return result;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease(v15);
LABEL_14:
  swift_beginAccess(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v77, 33, 0);
  v40 = (void *)sub_1001B3E28(a1);
  swift_endAccess(v77);

  swift_beginAccess(v18, v77, 33, 0);
  v41 = sub_1001B4554(a1);
  swift_endAccess(v77);
  swift_bridgeObjectRelease(v41);
LABEL_15:
  sub_1001633CC();
  v43 = v42;
  v44 = *(os_unfair_lock_s **)(v6 + v16);
  swift_retain(v44);
  os_unfair_lock_unlock(v44 + 4);
  swift_release(v44);
  if (!v43)
  {
    v45 = v71;
    v46 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v71 + 16))(v12, v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "no more sensor or actuation clients, releasing transaction", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, unint64_t))(v45 + 8))(v12, v10);
    sub_10016CA18();
  }
  sub_1001776B0(v73, v74, a4);
  return (uint64_t)a5;
}

void sub_100167900(uint64_t a1, void (*a2)(_QWORD, _QWORD), char a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  os_unfair_lock_s *v23;
  id v24;
  _BOOL8 v25;
  _QWORD *v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v10 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v11 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  v12 = v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking;
  if ((a3 & 1) != 0)
  {
    swift_beginAccess(v12, v28, 1, 0);
    if ((sub_100158CD0(a1, (uint64_t)a2, (_QWORD *)*v11) & 1) != 0)
    {
      sub_100167B54(a1, a2, a4);
      sub_100168554(0xD000000000000018, (void (*)(_QWORD, _QWORD))0x80000001001FF850);
    }
    v13 = *v11;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v13);
    v15 = sub_10017388C(v14, a1, (uint64_t)a2);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(a2);
    v16 = *v11;
    *v11 = v15;
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    swift_beginAccess(v12, v28, 0, 0);
    if ((sub_100158CD0(a1, (uint64_t)a2, (_QWORD *)*v11) & 1) == 0)
    {
      swift_beginAccess(v11, v27, 33, 0);
      v17 = (_QWORD *)*v11;
      swift_bridgeObjectRetain(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
      *v11 = (uint64_t)v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v17 = sub_1000E9698(0, v17[2] + 1, 1, v17);
        *v11 = (uint64_t)v17;
      }
      v20 = v17[2];
      v19 = v17[3];
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        v26 = sub_1000E9698((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
        v21 = v20 + 1;
        v17 = v26;
        *v11 = (uint64_t)v26;
      }
      v17[2] = v21;
      v22 = &v17[2 * v20];
      v22[4] = a1;
      v22[5] = a2;
      swift_endAccess(v27);
      sub_100167B54(a1, a2, a4);
      sub_100168554(0xD000000000000018, (void (*)(_QWORD, _QWORD))0x80000001001FF850);
    }
  }
  v23 = *(os_unfair_lock_s **)(v4 + v9);
  swift_retain(v23);
  os_unfair_lock_unlock(v23 + 4);
  swift_release(v23);
  v24 = *(id *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification);
  v25 = DeviceNotification.state.getter() == 0;
  DeviceNotification.state.setter(v25);

}

void sub_100167B54(uint64_t a1, void (*a2)(_QWORD, _QWORD), int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  __n128 v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char **v26;
  char *v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  int64_t v76;
  char *i;
  unint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  os_log_t v100;
  uint64_t v101;
  int v102;
  char *v103;
  __n128 v104;
  char *v105;
  _BYTE *v106;
  uint64_t v107;
  char *v108;
  int64_t v109;
  char *v110;
  __n128 v111;
  char *v112;
  uint64_t v113;
  char *v114;
  int64_t v115;
  void (*v116)(_QWORD, _QWORD);
  char *v117;
  uint64_t v118;
  uint64_t v119[3];
  uint64_t v120;
  _BYTE v121[32];

  v116 = a2;
  v107 = a1;
  v113 = type metadata accessor for Logger(0);
  v115 = *(_QWORD *)(v113 - 8);
  v5 = __chkstk_darwin(v113);
  v112 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v108 = (char *)&v98 - v8;
  __chkstk_darwin(v7);
  v114 = (char *)&v98 - v9;
  v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v121, 0, 0);
  v11 = *v10;
  v12 = *v10 + 64;
  v13 = 1 << *(_BYTE *)(*v10 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(*v10 + 64);
  v118 = v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v16 = (unint64_t)(v13 + 63) >> 6;
  v106 = v121;
  v105 = (char *)&v120 + 4;
  v17 = swift_bridgeObjectRetain(v11);
  v18 = 0;
  v19 = _swiftEmptyArrayStorage;
  v17.n128_u64[0] = 136315650;
  v104 = v17;
  v103 = (char *)&type metadata for Any + 8;
  v109 = v16;
  while (v15)
  {
    v20 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v21 = v20 | (v18 << 6);
LABEL_5:
    v22 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v21);
    if (*(_DWORD *)(v22 + 16) == a3)
    {
      v26 = (char **)(*(_QWORD *)(v11 + 48) + 16 * v21);
      v110 = *v26;
      v111.n128_u64[0] = (unint64_t)v19;
      v27 = v26[1];
      v28 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v114, v118, v113);
      swift_bridgeObjectRetain_n(v27, 3);
      swift_retain_n(v22, 3);
      v29 = swift_bridgeObjectRetain_n(v28, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      v32 = v31;
      v33 = os_log_type_enabled(v30, v31);
      v117 = v27;
      if (v33)
      {
        v34 = swift_slowAlloc(28, -1);
        v102 = v32;
        v35 = v34;
        v101 = swift_slowAlloc(64, -1);
        v119[0] = v101;
        *(_DWORD *)v35 = v104.n128_u32[0];
        v99 = v35 + 4;
        swift_retain(v22);
        v100 = v30;
        v36 = sub_1000B9AFC();
        v38 = v37;
        v98 = v37;
        swift_release(v22);
        v120 = sub_1000906BC(v36, v38, v119);
        v39 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v106, v99, v35 + 12);
        swift_release_n(v22, 2);
        swift_bridgeObjectRelease_n(v117, 2);
        swift_bridgeObjectRelease(v98);
        *(_WORD *)(v35 + 12) = 2080;
        v99 = v35 + 14;
        v40 = (unint64_t)v116;
        swift_bridgeObjectRetain(v116);
        v120 = sub_1000906BC(v107, v40, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v39, v99, v35 + 22);
        swift_bridgeObjectRelease_n(v40, 3);
        v41 = v35;
        *(_WORD *)(v35 + 22) = 1024;
        LODWORD(v120) = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v105, v35 + 24, v35 + 28);
        v42 = v100;
        _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v102, "expiring animator %s, owner %s [pid %d] re-enabling system tracking", (uint8_t *)v35, 0x1Cu);
        v43 = v101;
        swift_arrayDestroy(v101, 2, v103);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v116, 2);
        swift_release_n(v22, 2);
        swift_bridgeObjectRelease_n(v27, 2);
      }
      (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v113);
      v44 = *(void **)(v22 + 144);
      v19 = (_QWORD *)v111.n128_u64[0];
      if (v44)
      {
        v45 = v44;
        dispatch thunk of RepeatingTimer.suspend()(v45);

        v44 = *(void **)(v22 + 144);
      }
      *(_QWORD *)(v22 + 144) = 0;

      sub_1000BBE2C();
      swift_bridgeObjectRetain(v117);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = sub_1000E9698(0, v19[2] + 1, 1, v19);
      v47 = v19[2];
      v46 = v19[3];
      if (v47 >= v46 >> 1)
        v19 = sub_1000E9698((_QWORD *)(v46 > 1), v47 + 1, 1, v19);
      v19[2] = v47 + 1;
      v48 = &v19[2 * v47];
      v49 = v117;
      v48[4] = v110;
      v48[5] = v49;
      swift_release(v22);
      swift_bridgeObjectRelease(v49);
      v16 = v109;
    }
  }
  v23 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v23 >= v16)
    goto LABEL_31;
  v24 = *(_QWORD *)(v12 + 8 * v23);
  ++v18;
  if (v24)
    goto LABEL_20;
  v18 = v23 + 1;
  if (v23 + 1 >= v16)
    goto LABEL_31;
  v24 = *(_QWORD *)(v12 + 8 * v18);
  if (v24)
    goto LABEL_20;
  v18 = v23 + 2;
  if (v23 + 2 >= v16)
    goto LABEL_31;
  v24 = *(_QWORD *)(v12 + 8 * v18);
  if (v24)
  {
LABEL_20:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_5;
  }
  v25 = v23 + 3;
  if (v25 >= v16)
  {
LABEL_31:
    swift_release(v11);
    v50 = v19;
    v51 = v19[2];
    if (v51)
    {
      v52 = v50 + 5;
      do
      {
        v55 = *(v52 - 1);
        v56 = *v52;
        swift_beginAccess(v10, v119, 33, 0);
        v57 = *v10;
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        v58 = sub_100145264(v55, v56);
        v60 = v59;
        swift_bridgeObjectRelease(v57);
        v53 = 0;
        if ((v60 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
          v62 = *v10;
          v120 = *v10;
          *v10 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1001BE340();
            v62 = v120;
          }
          swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v62 + 48) + 16 * v58 + 8));
          v53 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v58);
          sub_1001B9928(v58, v62);
          v54 = *v10;
          *v10 = v62;
          swift_bridgeObjectRelease(v54);
        }
        v52 += 2;
        swift_endAccess(v119);
        swift_bridgeObjectRelease(v56);
        swift_release(v53);
        --v51;
      }
      while (v51);
    }
    swift_bridgeObjectRelease(v50);
    v63 = v115;
    v64 = v108;
    v65 = v113;
    v117 = *(char **)(v115 + 16);
    v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v117)(v108, v118, v113);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "remaining animators:", v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }

    v116 = *(void (**)(_QWORD, _QWORD))(v63 + 8);
    v116(v64, v65);
    v70 = *v10;
    v71 = *(_QWORD *)(*v10 + 64);
    v114 = (char *)(*v10 + 64);
    v72 = 1 << *(_BYTE *)(v70 + 32);
    v73 = -1;
    if (v72 < 64)
      v73 = ~(-1 << v72);
    v74 = v73 & v71;
    v115 = (unint64_t)(v72 + 63) >> 6;
    v75 = swift_bridgeObjectRetain(v70);
    v76 = 0;
    v75.n128_u64[0] = 136315138;
    v111 = v75;
    v110 = (char *)&type metadata for Any + 8;
    for (i = v112; ; v116(i, v65))
    {
      if (v74)
      {
        v78 = __clz(__rbit64(v74));
        v74 &= v74 - 1;
        v79 = v78 | (v76 << 6);
      }
      else
      {
        v80 = v76 + 1;
        if (__OFADD__(v76, 1))
          goto LABEL_65;
        if (v80 >= v115)
        {
LABEL_63:
          swift_release(v70);
          return;
        }
        v81 = *(_QWORD *)&v114[8 * v80];
        ++v76;
        if (!v81)
        {
          v76 = v80 + 1;
          if (v80 + 1 >= v115)
            goto LABEL_63;
          v81 = *(_QWORD *)&v114[8 * v76];
          if (!v81)
          {
            v76 = v80 + 2;
            if (v80 + 2 >= v115)
              goto LABEL_63;
            v81 = *(_QWORD *)&v114[8 * v76];
            if (!v81)
            {
              v82 = v80 + 3;
              if (v82 >= v115)
                goto LABEL_63;
              v81 = *(_QWORD *)&v114[8 * v82];
              if (!v81)
              {
                while (1)
                {
                  v76 = v82 + 1;
                  if (__OFADD__(v82, 1))
                    goto LABEL_67;
                  if (v76 >= v115)
                    goto LABEL_63;
                  v81 = *(_QWORD *)&v114[8 * v76];
                  ++v82;
                  if (v81)
                    goto LABEL_60;
                }
              }
              v76 = v82;
            }
          }
        }
LABEL_60:
        v74 = (v81 - 1) & v81;
        v79 = __clz(__rbit64(v81)) + (v76 << 6);
      }
      v83 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * v79);
      v84 = *v83;
      v85 = v83[1];
      v86 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * v79);
      ((void (*)(char *, uint64_t, uint64_t))v117)(i, v118, v65);
      swift_bridgeObjectRetain_n(v85, 3);
      v87 = swift_retain_n(v86, 3);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.default.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = swift_slowAlloc(12, -1);
        v91 = swift_slowAlloc(32, -1);
        v119[2] = v86;
        v120 = v91;
        *(_DWORD *)v90 = v111.n128_u32[0];
        v119[0] = v84;
        v119[1] = v85;
        swift_bridgeObjectRetain(v85);
        swift_retain(v86);
        v92 = sub_10009061C(&qword_100270150);
        v93 = String.init<A>(describing:)(v119, v92);
        v95 = v94;
        *(_QWORD *)(v90 + 4) = sub_1000906BC(v93, v94, &v120);
        swift_release_n(v86, 2);
        swift_bridgeObjectRelease_n(v85, 2);
        swift_bridgeObjectRelease(v95);
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "    animator: %s", (uint8_t *)v90, 0xCu);
        swift_arrayDestroy(v91, 1, v110);
        v96 = v91;
        i = v112;
        swift_slowDealloc(v96, -1, -1);
        v97 = v90;
        v65 = v113;
        swift_slowDealloc(v97, -1, -1);
        swift_release(v86);
        swift_bridgeObjectRelease(v85);

      }
      else
      {

        swift_release_n(v86, 3);
        swift_bridgeObjectRelease_n(v85, 3);
      }
    }
  }
  v24 = *(_QWORD *)(v12 + 8 * v25);
  if (v24)
  {
    v18 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v18 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v18 >= v16)
      goto LABEL_31;
    v24 = *(_QWORD *)(v12 + 8 * v18);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

void sub_100168554(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD);
  BOOL v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v24, 0, 0);
  v6 = *v5;
  v23 = v6 + 64;
  v7 = 1 << *(_BYTE *)(v6 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v6 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v6);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_21;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v15 >= v10)
      goto LABEL_27;
    v16 = *(_QWORD *)(v23 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_27;
      v16 = *(_QWORD *)(v23 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_27;
        v16 = *(_QWORD *)(v23 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_21:
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14 + 8);
    v19 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v14);
    v20 = *(_QWORD *)(v19 + 24);
    v21 = *(void (**)(_QWORD, _QWORD))(v19 + 32);
    v22 = v20 == a1 && v21 == a2;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a1, a2, 0) & 1) != 0)
    {
      v12 = *(_DWORD *)(v19 + 16);
      swift_bridgeObjectRetain(v18);
      swift_retain(v19);
      sub_100167B54(a1, a2, v12);
      swift_release(v19);
      swift_bridgeObjectRelease(v18);
    }
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_27:
    swift_release(v6);
    return;
  }
  v16 = *(_QWORD *)(v23 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v10)
      goto LABEL_27;
    v16 = *(_QWORD *)(v23 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100168740(unsigned int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  id v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v5 = v4;
  v29 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v14 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v14);
  os_unfair_lock_lock(v14 + 4);
  swift_release(v14);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, v31, 33, 0);
  v15 = a2;
  sub_1001A935C((uint64_t)a2, a1);
  swift_endAccess(v31);
  v16 = (_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules, v31, 33, 0);
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v30 = *v16;
  *v16 = 0x8000000000000000;
  sub_1001BADDC(a3, a4, a1, isUniquelyReferenced_nonNull_native);
  v18 = *v16;
  *v16 = v30;
  swift_bridgeObjectRelease(v18);
  swift_endAccess(v31);
  sub_1001633CC();
  v20 = v19;
  v21 = *(os_unfair_lock_s **)(v5 + v13);
  swift_retain(v21);
  os_unfair_lock_unlock(v21 + 4);
  swift_release(v21);
  if (v20 == 1)
  {
    v22 = v29;
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v29);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "added first pairing client, taking transaction", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
    sub_10016BF20(1);
  }
  return 1;
}

void sub_100168984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  unint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  __int128 v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  void *v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  id v46;
  id v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSString v65;
  NSDictionary v66;
  void *v67;
  id v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  void *v87;
  uint64_t v88[4];
  char v89[24];
  char v90[32];

  v77 = a4;
  v75 = a3;
  v76 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Logger(0);
  v81 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v80 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1001C1BBC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v11);
  v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules, v90, 0, 0);
  v15 = *v14;
  v16 = *(os_unfair_lock_s **)(v4 + v12);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  os_unfair_lock_unlock(v16 + 4);
  swift_release(v16);
  v17 = sub_1001C19D8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v17);
  v18 = *(os_unfair_lock_s **)(v4 + v12);
  swift_retain(v18);
  os_unfair_lock_lock(v18 + 4);
  swift_release(v18);
  v19 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, v89, 0, 0);
  v20 = *v19;
  v21 = *(os_unfair_lock_s **)(v4 + v12);
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  os_unfair_lock_unlock(v21 + 4);
  swift_release(v21);
  v23 = 0;
  v24 = *(_QWORD *)(v20 + 64);
  v84 = v20;
  v85 = v20 + 64;
  v25 = 1 << *(_BYTE *)(v20 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v72 = v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v86 = (unint64_t)(v25 + 63) >> 6;
  v82 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v22 = 136315394;
  v69 = v22;
  v74 = v6;
  v71 = a1;
  v83 = v7;
  v73 = v9;
  while (1)
  {
    while (v27)
    {
      v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v29 = v28 | (v23 << 6);
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_22:
        v33 = *(void **)(*(_QWORD *)(v84 + 56) + 8 * v29);
        v34 = sub_1001452C8(*(_DWORD *)(*(_QWORD *)(v84 + 48) + 4 * v29));
        if ((v35 & 1) != 0)
        {
          v36 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v34);
          v38 = *v36;
          v37 = v36[1];
          v39 = v33;
          swift_bridgeObjectRetain(v37);
          v41 = UUID.uuidString.getter(v40);
          if (v38 == v41 && v37 == v42)
          {
            swift_bridgeObjectRelease_n(v37, 2);
            goto LABEL_30;
          }
          v44 = v42;
          v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v37, v41, v42, 0);
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(v37);
          if ((v45 & 1) != 0)
          {
LABEL_30:
            v46 = v39;
            v47 = objc_msgSend(v46, "remoteObjectProxy");
            _bridgeAnyObjectToAny(_:)(v88);
            swift_unknownObjectRelease(v47);
            v48 = sub_10009061C(&qword_100270158);
            v49 = swift_dynamicCast(&v87, v88, v82, v48, 6);
            v50 = v83;
            if ((v49 & 1) != 0)
            {
              v78 = v87;
              (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v72, v79);
              v51 = v73;
              v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16))(v73, a1, v6);
              v53 = Logger.logObject.getter(v52);
              v54 = v6;
              v55 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v53, v55))
              {
                v56 = swift_slowAlloc(22, -1);
                v57 = swift_slowAlloc(32, -1);
                v70 = v57;
                v88[0] = v57;
                *(_DWORD *)v56 = v69;
                v58 = UUID.uuidString.getter(v57);
                v60 = v59;
                *(_QWORD *)(v56 + 4) = sub_1000906BC(v58, v59, v88);
                swift_bridgeObjectRelease(v60);
                (*(void (**)(char *, uint64_t))(v83 + 8))(v51, v54);
                *(_WORD *)(v56 + 12) = 2048;
                *(_QWORD *)(v56 + 14) = PairingRequestState.rawValue.getter(v76);
                _os_log_impl((void *)&_mh_execute_header, v53, v55, "Notifying prox card %s of state change %ld", (uint8_t *)v56, 0x16u);
                v61 = v70;
                swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v61, -1, -1);
                swift_slowDealloc(v56, -1, -1);
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v54);
              }

              v62 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v80, v79);
              a1 = v71;
              UUID.uuidString.getter(v62);
              v64 = v63;
              v65 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v64);
              v66.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
              if (v77)
                v67 = (void *)_convertErrorToNSError(_:)(v77);
              else
                v67 = 0;
              v68 = v78;
              objc_msgSend(v78, "pairingStatusWithInfo:state:metadata:error:", v65, v76, v66.super.isa, v67, v69);
              swift_unknownObjectRelease(v68);

              v6 = v74;
            }
            else
            {

            }
          }
          else
          {

          }
        }
      }
    }
    v30 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v30 >= v86)
      goto LABEL_38;
    v31 = *(_QWORD *)(v85 + 8 * v30);
    ++v23;
    if (!v31)
    {
      v23 = v30 + 1;
      if (v30 + 1 >= v86)
        goto LABEL_38;
      v31 = *(_QWORD *)(v85 + 8 * v23);
      if (!v31)
      {
        v23 = v30 + 2;
        if (v30 + 2 >= v86)
          goto LABEL_38;
        v31 = *(_QWORD *)(v85 + 8 * v23);
        if (!v31)
          break;
      }
    }
LABEL_21:
    v27 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v23 << 6);
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_22;
  }
  v32 = v30 + 3;
  if (v32 >= v86)
  {
LABEL_38:
    swift_bridgeObjectRelease(v15);
    swift_release(v84);
    return;
  }
  v31 = *(_QWORD *)(v85 + 8 * v32);
  if (v31)
  {
    v23 = v32;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v86)
      goto LABEL_38;
    v31 = *(_QWORD *)(v85 + 8 * v23);
    ++v32;
    if (v31)
      goto LABEL_21;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100169000(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  pid_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v51;
  id v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  char v62[24];

  v7 = v6;
  v59 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a1;
  v18 = DockCoreInfo.description.getter(v17);
  v20 = v19;
  v21 = getpid();
  v53 = a2;
  v56 = a5;
  v57 = a6;
  v54 = a3;
  if (v21 == a2)
  {
    if (a3 == 0xD000000000000018 && a4 == 0x80000001001FC480)
      v22 = 1;
    else
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, 0xD000000000000018, 0x80000001001FC480, 0);
  }
  else
  {
    v22 = 0;
  }
  v23 = v20;
  v24 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v25 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v25);
  os_unfair_lock_lock(v25 + 4);
  swift_release(v25);
  v26 = (_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v62, 0, 0);
  v27 = *v26;
  v28 = *(_QWORD *)(*v26 + 16);
  v51 = v18;
  if (v28)
  {
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v27);
    v29 = sub_100145264(v18, v23);
    if ((v30 & 1) != 0)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v29);
      swift_retain(v31);
    }
    else
    {
      v31 = 0;
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v31 = 0;
  }
  v58 = v24;
  v55 = a4;
  if ((v22 & 1) != 0)
  {
    v32 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator);
    swift_retain(v32);
    swift_release(v31);
    if (!v32)
      goto LABEL_27;
    v31 = v32;
    if (!*(_QWORD *)(v32 + 56))
      goto LABEL_21;
    goto LABEL_19;
  }
  if (!v31)
    goto LABEL_27;
  v32 = v31;
  if (*(_QWORD *)(v31 + 56))
  {
LABEL_19:
    if (*(_QWORD *)(v32 + 48) && *(_BYTE *)(v32 + 40) != 1)
    {
      swift_bridgeObjectRelease(v23);
      goto LABEL_34;
    }
  }
LABEL_21:
  *(_BYTE *)(v32 + 40) = 1;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v59);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Removing previously expired animator", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v59);
  v37 = *(void **)(v32 + 144);
  swift_retain(v32);
  if (v37)
  {
    v38 = v37;
    dispatch thunk of RepeatingTimer.suspend()(v38);

    v39 = *(void **)(v32 + 144);
  }
  else
  {
    v39 = 0;
  }
  *(_QWORD *)(v32 + 144) = 0;

  sub_1000BBE2C();
  swift_release_n(v32, 2);
LABEL_27:
  v40 = type metadata accessor for VelocityAnimator(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = v52;
  v42 = v55;
  swift_bridgeObjectRetain(v55);
  swift_retain(v7);
  v43 = v57;
  swift_retain(v57);
  v31 = sub_1000BC524(v53, v54, v42, v56, v43, (uint64_t)sub_10017762C, v7);

  swift_release(v43);
  swift_release(v7);
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRelease(v23);
    v44 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator);
    *(_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator) = v31;
    swift_retain(v31);
    swift_release(v44);
LABEL_34:
    v48 = v58;
    goto LABEL_35;
  }
  swift_beginAccess(v26, v61, 33, 0);
  if (v31)
  {
    swift_retain(v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    v60 = *v26;
    *v26 = 0x8000000000000000;
    sub_1001BB750(v31, v51, v23, isUniquelyReferenced_nonNull_native);
    v46 = *v26;
    *v26 = v60;
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v46);
  }
  else
  {
    v47 = sub_1001B4488(v51, v23);
    swift_bridgeObjectRelease(v23);
    swift_release(v47);
  }
  v48 = v58;
  swift_endAccess(v61);
LABEL_35:
  v49 = *(os_unfair_lock_s **)(v7 + v48);
  swift_retain(v49);
  os_unfair_lock_unlock(v49 + 4);
  swift_release(v49);
  return v31;
}

uint64_t sub_1001694AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v24 - v15;
  v24[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_queue);
  static DispatchTime.now()(v14);
  + infix(_:_:)(v13, 1.0);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  aBlock[4] = sub_100177634;
  v30 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023D1B0;
  v18 = _Block_copy(aBlock);
  v19 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v22 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v3, v20);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v8, v5, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
  v17(v16, v9);
  return swift_release(v30);
}

uint64_t sub_100169710(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  char v16[24];

  v2 = v1;
  v3 = DockCoreInfo.description.getter(a1);
  v5 = v4;
  v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v16, 0, 0);
  v9 = *v8;
  if (!*(_QWORD *)(v9 + 16))
  {
    v13 = v5;
LABEL_6:
    swift_bridgeObjectRelease(v13);
    v12 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v9);
  v10 = sub_100145264(v3, v5);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
    v13 = v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_retain(v12);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
LABEL_7:
  v14 = *(os_unfair_lock_s **)(v2 + v6);
  swift_retain(v14);
  os_unfair_lock_unlock(v14 + 4);
  swift_release(v14);
  return v12;
}

uint64_t sub_100169828(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  _BYTE v19[24];
  _BYTE v20[24];

  v2 = v1;
  v3 = DockCoreInfo.description.getter(a1);
  v5 = v4;
  v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v20, 0, 0);
  v9 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v9);
    sub_100145264(v3, v5);
    v11 = v10;
    swift_bridgeObjectRelease(v5);
    if ((v11 & 1) != 0)
    {
      swift_bridgeObjectRelease(v9);
      v12 = *v8;
      if (*(_QWORD *)(*v8 + 16))
      {
        swift_bridgeObjectRetain(v5);
        swift_bridgeObjectRetain(v12);
        v13 = sub_100145264(v3, v5);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
          swift_retain(v15);
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(v12);
          sub_1000BBE2C();
          swift_release(v15);
        }
        else
        {
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(v12);
        }
      }
      swift_beginAccess(v8, v19, 33, 0);
      v16 = sub_1001B4488(v3, v5);
      swift_endAccess(v19);
      swift_bridgeObjectRelease(v5);
      swift_release(v16);
    }
    else
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v9);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v5);
  }
  v17 = *(os_unfair_lock_s **)(v2 + v6);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  return swift_release(v17);
}

void sub_1001699EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  os_unfair_lock_s *v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  char *v35;
  unint64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t **v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t **v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  int64_t v136;
  char *v137;
  __n128 v138;
  void (*v139)(char *, uint64_t);
  unint64_t *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[32];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v132 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v127 = (char *)&v126 - v7;
  v8 = __chkstk_darwin(v6);
  v137 = (char *)&v126 - v9;
  v10 = __chkstk_darwin(v8);
  v130 = (char *)&v126 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v126 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v126 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v141 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v142 = v17;
  v18 = ((uint64_t (*)(char *))v17)((char *)&v126 - v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Cleaning up stale animators", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v16, v2);
  v128 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v23 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v23);
  os_unfair_lock_lock(v23 + 4);
  swift_release(v23);
  v131 = v1;
  v24 = (unint64_t **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v147, 1, 0);
  v129 = v24;
  v25 = *v24;
  v26 = (*v24)[8];
  v135 = (uint64_t)(*v24 + 8);
  v27 = 1 << *((_BYTE *)v25 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v136 = (unint64_t)(v27 + 63) >> 6;
  v140 = v25;
  v30 = swift_bridgeObjectRetain(v25);
  v31 = 0;
  v30.n128_u64[0] = 136315138;
  v138 = v30;
  v133 = v2;
  v134 = (char *)&type metadata for Any + 8;
  v139 = v22;
  while (1)
  {
    if (v29)
    {
      v32 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v33 = v32 | (v31 << 6);
      goto LABEL_23;
    }
    v34 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    v35 = v137;
    if (v34 >= v136)
      goto LABEL_32;
    v36 = *(_QWORD *)(v135 + 8 * v34);
    ++v31;
    if (!v36)
    {
      v31 = v34 + 1;
      if (v34 + 1 >= v136)
        goto LABEL_32;
      v36 = *(_QWORD *)(v135 + 8 * v31);
      if (!v36)
      {
        v31 = v34 + 2;
        if (v34 + 2 >= v136)
          goto LABEL_32;
        v36 = *(_QWORD *)(v135 + 8 * v31);
        if (!v36)
          break;
      }
    }
LABEL_22:
    v29 = (v36 - 1) & v36;
    v33 = __clz(__rbit64(v36)) + (v31 << 6);
LABEL_23:
    v38 = (uint64_t *)(v140[6] + 16 * v33);
    v39 = *v38;
    v40 = v38[1];
    v41 = *(_QWORD *)(v140[7] + 8 * v33);
    if (!*(_QWORD *)(v41 + 56) || !*(_QWORD *)(v41 + 48) || *(_BYTE *)(v41 + 40) == 1)
    {
      *(_BYTE *)(v41 + 40) = 1;
      v42 = *(void **)(v41 + 144);
      swift_bridgeObjectRetain(v40);
      swift_retain(v41);
      if (v42)
      {
        v43 = v42;
        dispatch thunk of RepeatingTimer.suspend()(v43);

        v44 = *(void **)(v41 + 144);
      }
      else
      {
        v44 = 0;
      }
      *(_QWORD *)(v41 + 144) = 0;

      sub_1000BBE2C();
      v142(v14, v141, v2);
      swift_bridgeObjectRetain_n(v40, 2);
      v45 = swift_retain_n(v41, 2);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(12, -1);
        v49 = v14;
        v50 = swift_slowAlloc(32, -1);
        v145 = v41;
        v146 = v50;
        *(_DWORD *)v48 = v138.n128_u32[0];
        v143 = v39;
        v144 = v40;
        swift_bridgeObjectRetain(v40);
        swift_retain(v41);
        v51 = sub_10009061C(&qword_100270150);
        v52 = String.init<A>(describing:)(&v143, v51);
        v54 = v53;
        *(_QWORD *)(v48 + 4) = sub_1000906BC(v52, v53, &v146);
        swift_release_n(v41, 2);
        swift_bridgeObjectRelease_n(v40, 2);
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "   expired: %s", (uint8_t *)v48, 0xCu);
        swift_arrayDestroy(v50, 1, v134);
        v55 = v50;
        v14 = v49;
        swift_slowDealloc(v55, -1, -1);
        v56 = v48;
        v2 = v133;
        v22 = v139;
        swift_slowDealloc(v56, -1, -1);
        swift_release(v41);
        swift_bridgeObjectRelease(v40);

      }
      else
      {

        swift_release_n(v41, 3);
        swift_bridgeObjectRelease_n(v40, 3);
      }
      v22(v14, v2);
    }
  }
  v37 = v34 + 3;
  if (v37 >= v136)
  {
LABEL_32:
    swift_release(v140);
    v57 = v129;
    v58 = *v129;
    swift_bridgeObjectRetain(*v129);
    v60 = sub_1001714E0(v59);
    swift_bridgeObjectRelease(v58);
    v61 = *v57;
    *v57 = v60;
    swift_bridgeObjectRelease(v61);
    v62 = v130;
    v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v142)(v130, v141, v2);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "remaining animators:", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v22(v62, v2);
    v67 = *v57;
    v68 = (*v57)[8];
    v135 = (uint64_t)(*v57 + 8);
    v69 = 1 << *((_BYTE *)v67 + 32);
    v70 = -1;
    if (v69 < 64)
      v70 = ~(-1 << v69);
    v71 = v70 & v68;
    v136 = (unint64_t)(v69 + 63) >> 6;
    v140 = v67;
    v72 = swift_bridgeObjectRetain(v67);
    v73 = 0;
    v134 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if (v71)
      {
        v74 = __clz(__rbit64(v71));
        v71 &= v71 - 1;
        v75 = v74 | (v73 << 6);
      }
      else
      {
        v76 = v73 + 1;
        if (__OFADD__(v73, 1))
          goto LABEL_75;
        v77 = v132;
        if (v76 >= v136)
        {
LABEL_57:
          swift_release(v140);
          v96 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator;
          v97 = v131;
          v98 = *(_QWORD *)(v131 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator);
          if (v98)
          {
            if (*(_QWORD *)(v98 + 56) && *(_QWORD *)(v98 + 48) && *(_BYTE *)(v98 + 40) != 1)
            {
              v142(v77, v141, v2);
              v115 = swift_retain_n(v98, 3);
              v116 = Logger.logObject.getter(v115);
              v117 = static os_log_type_t.default.getter(v116);
              if (os_log_type_enabled(v116, v117))
              {
                v118 = (uint8_t *)swift_slowAlloc(12, -1);
                v119 = swift_slowAlloc(32, -1);
                v143 = v119;
                *(_DWORD *)v118 = v138.n128_u32[0];
                swift_retain(v98);
                v120 = sub_1000B9AFC();
                v121 = v2;
                v123 = v122;
                swift_release(v98);
                v146 = sub_1000906BC(v120, v123, &v143);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v118 + 4, v118 + 12);
                swift_release_n(v98, 2);
                swift_bridgeObjectRelease(v123);
                _os_log_impl((void *)&_mh_execute_header, v116, v117, "    animator: %s", v118, 0xCu);
                swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v119, -1, -1);
                swift_slowDealloc(v118, -1, -1);
                swift_release(v98);

                v124 = v132;
                v125 = v121;
              }
              else
              {

                swift_release_n(v98, 3);
                v124 = v77;
                v125 = v2;
              }
              v139(v124, v125);
            }
            else
            {
              *(_BYTE *)(v98 + 40) = 1;
              v99 = *(void **)(v98 + 144);
              swift_retain(v98);
              if (v99)
              {
                v100 = v99;
                dispatch thunk of RepeatingTimer.suspend()(v100);

                v101 = *(void **)(v98 + 144);
              }
              else
              {
                v101 = 0;
              }
              v102 = v127;
              *(_QWORD *)(v98 + 144) = 0;

              sub_1000BBE2C();
              v142(v102, v141, v2);
              v103 = swift_retain_n(v98, 2);
              v104 = Logger.logObject.getter(v103);
              v105 = static os_log_type_t.default.getter(v104);
              if (os_log_type_enabled(v104, v105))
              {
                v106 = (uint8_t *)swift_slowAlloc(12, -1);
                v107 = swift_slowAlloc(32, -1);
                v143 = v107;
                *(_DWORD *)v106 = v138.n128_u32[0];
                swift_retain(v98);
                v108 = sub_1000B9AFC();
                v110 = v109;
                swift_release(v98);
                v146 = sub_1000906BC(v108, v110, &v143);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v106 + 4, v106 + 12);
                swift_release_n(v98, 2);
                swift_bridgeObjectRelease(v110);
                _os_log_impl((void *)&_mh_execute_header, v104, v105, "   expired: %s", v106, 0xCu);
                swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v107, -1, -1);
                swift_slowDealloc(v106, -1, -1);
                swift_release(v98);

                v111 = v127;
                v112 = v133;
              }
              else
              {

                swift_release_n(v98, 3);
                v111 = v102;
                v112 = v2;
              }
              v139(v111, v112);
              v113 = *(_QWORD *)(v131 + v96);
              *(_QWORD *)(v131 + v96) = 0;
              swift_release(v113);
            }
            v97 = v131;
          }
          v114 = *(os_unfair_lock_s **)(v97 + v128);
          swift_retain(v114);
          os_unfair_lock_unlock(v114 + 4);
          swift_release(v114);
          return;
        }
        v78 = *(_QWORD *)(v135 + 8 * v76);
        ++v73;
        if (!v78)
        {
          v73 = v76 + 1;
          if (v76 + 1 >= v136)
            goto LABEL_57;
          v78 = *(_QWORD *)(v135 + 8 * v73);
          if (!v78)
          {
            v73 = v76 + 2;
            if (v76 + 2 >= v136)
              goto LABEL_57;
            v78 = *(_QWORD *)(v135 + 8 * v73);
            if (!v78)
            {
              v79 = v76 + 3;
              if (v79 >= v136)
                goto LABEL_57;
              v78 = *(_QWORD *)(v135 + 8 * v79);
              if (!v78)
              {
                while (1)
                {
                  v73 = v79 + 1;
                  if (__OFADD__(v79, 1))
                    goto LABEL_77;
                  if (v73 >= v136)
                    goto LABEL_57;
                  v78 = *(_QWORD *)(v135 + 8 * v73);
                  ++v79;
                  if (v78)
                    goto LABEL_54;
                }
              }
              v73 = v79;
            }
          }
        }
LABEL_54:
        v71 = (v78 - 1) & v78;
        v75 = __clz(__rbit64(v78)) + (v73 << 6);
      }
      v80 = (uint64_t *)(v140[6] + 16 * v75);
      v81 = *v80;
      v82 = v80[1];
      v83 = *(_QWORD *)(v140[7] + 8 * v75);
      ((void (*)(char *, uint64_t, uint64_t, __n128))v142)(v35, v141, v2, v72);
      swift_bridgeObjectRetain_n(v82, 3);
      v84 = swift_retain_n(v83, 3);
      v85 = Logger.logObject.getter(v84);
      v86 = v2;
      v87 = static os_log_type_t.default.getter(v85);
      if (os_log_type_enabled(v85, v87))
      {
        v88 = swift_slowAlloc(12, -1);
        v89 = swift_slowAlloc(32, -1);
        v145 = v83;
        v146 = v89;
        *(_DWORD *)v88 = v138.n128_u32[0];
        v143 = v81;
        v144 = v82;
        swift_bridgeObjectRetain(v82);
        swift_retain(v83);
        v90 = sub_10009061C(&qword_100270150);
        v91 = String.init<A>(describing:)(&v143, v90);
        v93 = v92;
        *(_QWORD *)(v88 + 4) = sub_1000906BC(v91, v92, &v146);
        swift_release_n(v83, 2);
        swift_bridgeObjectRelease_n(v82, 2);
        swift_bridgeObjectRelease(v93);
        _os_log_impl((void *)&_mh_execute_header, v85, v87, "    animator: %s", (uint8_t *)v88, 0xCu);
        swift_arrayDestroy(v89, 1, v134);
        v94 = v89;
        v22 = v139;
        swift_slowDealloc(v94, -1, -1);
        v95 = v88;
        v35 = v137;
        swift_slowDealloc(v95, -1, -1);
        swift_release(v83);
        swift_bridgeObjectRelease(v82);

      }
      else
      {

        swift_release_n(v83, 3);
        swift_bridgeObjectRelease_n(v82, 3);
      }
      v22(v35, v86);
      v2 = v86;
    }
  }
  v36 = *(_QWORD *)(v135 + 8 * v37);
  if (v36)
  {
    v31 = v37;
    goto LABEL_22;
  }
  while (1)
  {
    v31 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v31 >= v136)
      goto LABEL_32;
    v36 = *(_QWORD *)(v135 + 8 * v31);
    ++v37;
    if (v36)
      goto LABEL_22;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
}

uint64_t sub_10016A6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask);
  if (v8 && *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId + 8))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v2);
    v9 = swift_retain(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cancelling previous return to base task", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    Task.cancel()();
    swift_release(v8);
    v13 = *(_QWORD *)(v1 + v7);
    *(_QWORD *)(v1 + v7) = 0;
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_10016A818(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;

  v3 = v2;
  v4 = DockState.rawValue.getter(a2);
  v5 = DockState.rawValue.getter(0);
  if (v4 == v5)
  {
    v6 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v5);
    v7 = v6;
    goto LABEL_6;
  }
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  v11 = *(os_unfair_lock_s **)(v3 + v8);
  v7 = v10;
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  swift_release(v11);
  if (v10)
  {
    v12 = sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
    v13 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v12);
    v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v13);
    v15 = static NSObject.== infix(_:_:)(v13, v14);

    if ((v15 & 1) == 0)
    {
LABEL_7:

      return 1;
    }
    v6 = 0;
LABEL_6:
    sub_10015EB50(v6);
    goto LABEL_7;
  }
  return 1;
}

void sub_10016A93C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  id v18;
  char *v19;
  void *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  char *v39;
  _QWORD v40[4];
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  char v47[24];
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v2 = v1;
  v44 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v40[3] = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v40 - v11;
  v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  v14 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain(v14);
  os_unfair_lock_lock(v14 + 4);
  swift_release(v14);
  v45 = v1;
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
  if (v15)
  {
    swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn));
    sub_1000ED3F4();
    swift_release(v15);
  }
  v16 = *(os_unfair_lock_s **)(v45 + v13);
  swift_retain(v16);
  os_unfair_lock_unlock(v16 + 4);
  swift_release(v16);
  if (a1)
  {
    v17 = qword_10026BC00;
    v40[1] = a1;
    v18 = a1;
    if (v17 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v19 = (char *)*(id *)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v41 = v18;
    v20 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v19);
    v42 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v21 = *(id *)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    v43 = v19;
    v22 = &v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v47, 0, 0);
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    if (v24)
    {
      v40[2] = v4;
      v25 = v23 + 32;
      swift_bridgeObjectRetain(v23);
      while (1)
      {
        sub_10009AFF4(v25, (uint64_t)v46);
        v26 = *(id *)(*sub_10009B038(v46, v46[3]) + 24);
        DockCoreInfo.identifier.getter(v26);

        DockCoreInfo.identifier.getter(v27);
        LOBYTE(v26) = static UUID.== infix(_:_:)(v12, v10);
        v28 = *(void (**)(char *, uint64_t))(v7 + 8);
        v28(v10, v6);
        v28(v12, v6);
        if ((v26 & 1) != 0)
          break;
        sub_100090E88(v46);
        v25 += 40;
        if (!--v24)
        {
          swift_bridgeObjectRelease(v23);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease(v23);
      v29 = v43;
      v38 = *(id *)&v43[v42];
      OS_dispatch_semaphore.signal()();

      sub_10009AFF4((uint64_t)v46, (uint64_t)&v48);
      sub_100090E88(v46);

      if (!*((_QWORD *)&v49 + 1))
        goto LABEL_18;
    }
    else
    {
LABEL_11:
      v29 = v43;
      v30 = *(id *)&v43[v42];
      OS_dispatch_semaphore.signal()();

      v50 = 0;
      v48 = 0u;
      v49 = 0u;

      if (!*((_QWORD *)&v49 + 1))
      {
LABEL_18:

        sub_10009B2C0((uint64_t)&v48, (uint64_t *)&unk_10026DF40);
        return;
      }
    }
    v31 = sub_10009061C(&qword_10026C2E0);
    v32 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v46, &v48, v31, v32, 6) & 1) != 0)
    {
      v33 = v46[0];
      v34 = *(char **)(v46[0] + 16);
      if (v34)
      {
        v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v35)
        {
          v36 = v34;
          if (objc_msgSend(v35, "state") == (id)2)
          {
            v37 = *(id *)&v29[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager];
            sub_100126838(v33, 0, 0, 0, 0.0);

            swift_release(v33);
            return;
          }
        }
        else
        {
          v39 = v34;
        }

        swift_release(v33);
      }
      else
      {

        swift_release(v33);
      }
    }
    else
    {

    }
  }
}

uint64_t sub_10016AFA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[22] = a1;
  v2[23] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[25] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v5);
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  v6 = type metadata accessor for ComponentType(0);
  v2[29] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[30] = v7;
  v2[31] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v2[32] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[33] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[34] = swift_task_alloc(v10);
  v2[35] = swift_task_alloc(v10);
  return swift_task_switch(sub_10016B07C, 0, 0);
}

void sub_10016B07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  int64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;

  v1 = v0 + 96;
  if (qword_10026BC00 != -1)
    goto LABEL_62;
  while (1)
  {
    v2 = v0 + 16;
    v3 = *(char **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v4 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v5 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v6 = v3;
    v7 = v5;
    OS_dispatch_semaphore.wait()();

    v8 = &v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess(&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v1, 0, 0);
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(*(_QWORD *)v8 + 16);
    if (!v10)
      goto LABEL_7;
    v95 = v4;
    v98 = v3;
    v101 = v6;
    v11 = *(_QWORD *)(v0 + 264);
    v12 = v9 + 32;
    v94 = *(_QWORD *)v8;
    swift_bridgeObjectRetain(v9);
    do
    {
      v14 = *(_QWORD *)(v0 + 272);
      v13 = *(_QWORD *)(v0 + 280);
      v15 = *(_QWORD *)(v0 + 256);
      sub_10009AFF4(v12, v0 + 56);
      v16 = *(id *)(*sub_10009B038((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80)) + 24);
      DockCoreInfo.identifier.getter(v16);

      DockCoreInfo.identifier.getter(v17);
      LOBYTE(v16) = static UUID.== infix(_:_:)(v13, v14);
      v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v18(v14, v15);
      v18(v13, v15);
      if ((v16 & 1) != 0)
      {
        swift_bridgeObjectRelease(v94);
        v45 = *(id *)&v98[v95];
        OS_dispatch_semaphore.signal()();

        v2 = v0 + 16;
        sub_10009AFF4(v0 + 56, v0 + 16);
        sub_100090E88((_QWORD *)(v0 + 56));

        if (*(_QWORD *)(v0 + 40))
          goto LABEL_8;
LABEL_18:
        sub_10009B2C0(v2, (uint64_t *)&unk_10026DF40);
LABEL_19:
        v46 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, *(_QWORD *)(v0 + 192));
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v49 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Accessory not found", v49, 2u);
          swift_slowDealloc(v49, -1, -1);
        }
        v51 = *(_QWORD *)(v0 + 200);
        v50 = *(_QWORD *)(v0 + 208);
        v52 = *(_QWORD *)(v0 + 192);

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
LABEL_59:
        v84 = 0;
        goto LABEL_60;
      }
      sub_100090E88((_QWORD *)(v0 + 56));
      v12 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v94);
    v6 = v101;
    v2 = v0 + 16;
    v4 = v95;
    v3 = v98;
LABEL_7:
    v19 = *(id *)&v3[v4];
    OS_dispatch_semaphore.signal()();

    *(_QWORD *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;

    if (!*(_QWORD *)(v0 + 40))
      goto LABEL_18;
LABEL_8:
    v20 = sub_10009061C(&qword_10026C2E0);
    v21 = type metadata accessor for DaemonAccessory(0);
    if ((swift_dynamicCast(v0 + 168, v2, v20, v21, 6) & 1) == 0)
      goto LABEL_19;
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 168);
    v103 = swift_allocObject(&unk_10023D198, 24, 7);
    *(_QWORD *)(v103 + 16) = sub_1001B1FA8((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v23, enum case for ComponentType.Battery(_:), v24);
    v102 = v25;
    v26 = (_QWORD *)(v25 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
    v27 = swift_beginAccess(v25 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, v0 + 120, 0, 0);
    v28 = *v26;
    if (!*(_QWORD *)(*v26 + 16))
      goto LABEL_23;
    v29 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRetain(*v26);
    v30 = sub_100145580(v29);
    if ((v31 & 1) == 0)
    {
      swift_bridgeObjectRelease(v28);
LABEL_23:
      v53 = *(_QWORD *)(v0 + 216);
      v55 = *(_QWORD *)(v0 + 192);
      v54 = *(_QWORD *)(v0 + 200);
      v56 = *(_QWORD *)(v0 + 184);
      (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232), v27);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v53, v56 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v55);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Accessory does not have a battery service, cannot read", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
        swift_release(v102);

      }
      else
      {

        swift_release(v102);
      }
      v61 = *(_QWORD *)(v0 + 216);
LABEL_58:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(v61, *(_QWORD *)(v0 + 192));
      swift_release(v103);
      goto LABEL_59;
    }
    v96 = v103 + 16;
    v32 = *(_QWORD *)(v0 + 240);
    v33 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v30);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    v99 = v35;
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      v37 = (void **)(v99 + 48);
      do
      {
        v38 = *(v37 - 2);
        v39 = (uint64_t)*(v37 - 1);
        v40 = *v37;
        v41 = qword_10026BBE0;
        swift_bridgeObjectRetain_n(v39, 2);
        v42 = v40;
        if (v41 != -1)
          swift_once(&qword_10026BBE0, sub_10012E948);
        v43 = *(_QWORD *)(v0 + 184);
        v44 = qword_1002755C0;
        swift_bridgeObjectRetain(v39);
        swift_retain(v43);
        swift_retain(v103);
        sub_100184B3C(v44, v42, v25, v43, v103, v38, v39);

        swift_release(v103);
        swift_release(v43);
        swift_bridgeObjectRelease_n(v39, 3);
        v37 += 3;
        --v36;
      }
      while (v36);
    }
    swift_bridgeObjectRelease(v99);
    v62 = swift_beginAccess(v96, v0 + 144, 0, 0);
    v1 = *(_QWORD *)v96;
    if (!*(_QWORD *)(*(_QWORD *)v96 + 16))
    {
      v85 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, *(_QWORD *)(v0 + 192), v62);
      v86 = Logger.logObject.getter(v85);
      v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Battery Data is empty", v88, 2u);
        swift_slowDealloc(v88, -1, -1);
        swift_release(v102);

      }
      else
      {

        swift_release(v102);
      }
      v61 = *(_QWORD *)(v0 + 224);
      goto LABEL_58;
    }
    v97 = v1 + 64;
    v63 = -1;
    v64 = -1 << *(_BYTE *)(v1 + 32);
    if (-v64 < 64)
      v63 = ~(-1 << -(char)v64);
    v65 = v63 & *(_QWORD *)(v1 + 64);
    v100 = (unint64_t)(63 - v64) >> 6;
    swift_bridgeObjectRetain(v1);
    v66 = 0;
    while (v65)
    {
      while (1)
      {
        v71 = __clz(__rbit64(v65));
        v65 &= v65 - 1;
        v70 = v71 | (v66 << 6);
LABEL_48:
        v72 = 16 * v70;
        v73 = (uint64_t *)(*(_QWORD *)(v1 + 48) + v72);
        v74 = *v73;
        v75 = v73[1];
        v76 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v72);
        v78 = *v76;
        v77 = v76[1];
        objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState(0));
        swift_bridgeObjectRetain(v75);
        sub_10009B27C(v78, v77);
        swift_bridgeObjectRetain(v75);
        sub_10009B27C(v78, v77);
        v79 = (void *)AccessoryBatteryState.init(data:name:)(v78, v77, v74, v75);
        if (v79)
          break;
        swift_bridgeObjectRelease(v75);
        sub_10009B2FC(v78, v77);
        if (!v65)
          goto LABEL_33;
      }
      v80 = v79;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
      v82 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v81 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v82 >= v81 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
      v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v80);
      specialized Array._endMutation()(v83);
      swift_bridgeObjectRelease(v75);
      sub_10009B2FC(v78, v77);

    }
LABEL_33:
    v67 = v66 + 1;
    if (!__OFADD__(v66, 1))
      break;
    __break(1u);
LABEL_62:
    swift_once(&qword_10026BC00, sub_100158DF8);
  }
  if (v67 >= v100)
    goto LABEL_53;
  v68 = *(_QWORD *)(v97 + 8 * v67);
  ++v66;
  if (v68)
  {
LABEL_46:
    v65 = (v68 - 1) & v68;
    v70 = __clz(__rbit64(v68)) + (v66 << 6);
    goto LABEL_48;
  }
  v66 = v67 + 1;
  if (v67 + 1 >= v100)
  {
LABEL_53:
    swift_release(v102);
    swift_release(v1);
    v84 = _swiftEmptyArrayStorage;
    swift_release(v103);
LABEL_60:
    v89 = *(_QWORD *)(v0 + 272);
    v90 = *(_QWORD *)(v0 + 248);
    v92 = *(_QWORD *)(v0 + 216);
    v91 = *(_QWORD *)(v0 + 224);
    v93 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    (*(void (**)(_QWORD *))(v0 + 8))(v84);
    return;
  }
  v68 = *(_QWORD *)(v97 + 8 * v66);
  if (v68)
    goto LABEL_46;
  v66 = v67 + 2;
  if (v67 + 2 >= v100)
    goto LABEL_53;
  v68 = *(_QWORD *)(v97 + 8 * v66);
  if (v68)
    goto LABEL_46;
  v69 = v67 + 3;
  if (v69 >= v100)
    goto LABEL_53;
  v68 = *(_QWORD *)(v97 + 8 * v69);
  if (v68)
  {
    v66 = v69;
    goto LABEL_46;
  }
  while (1)
  {
    v66 = v69 + 1;
    if (__OFADD__(v69, 1))
      break;
    if (v66 >= v100)
      goto LABEL_53;
    v68 = *(_QWORD *)(v97 + 8 * v66);
    ++v69;
    if (v68)
      goto LABEL_46;
  }
  __break(1u);
}

void sub_10016B978(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  id v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _OWORD v57[2];
  uint64_t v58[4];

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v54 - v17;
  if (a2 || !a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v54 - v17, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
    swift_errorRetain(a2);
    v28 = swift_errorRetain(a2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v58[0] = v32;
      v54 = v13;
      *(_DWORD *)v31 = 136315138;
      *(_QWORD *)&v57[0] = a2;
      swift_errorRetain(a2);
      v33 = sub_10009061C(&qword_10026E070);
      v55 = v12;
      v34 = String.init<A>(describing:)(v57, v33);
      v36 = v35;
      *(_QWORD *)&v57[0] = sub_1000906BC(v34, v35, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, (char *)v57 + 8, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v36);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to read characteristic: %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v18, v55);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v37 = *(void (**)(char *, uint64_t))(v13 + 8);
    v38 = v18;
LABEL_14:
    v37(v38, v12);
    return;
  }
  v55 = a4;
  v19 = objc_msgSend(a1, "metadata");
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, "format");

    if (v21)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      if (v22 == 1635017060 && v24 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        v27 = a5;
      }
      else
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, 1635017060, 0xE400000000000000, 0);
        swift_bridgeObjectRelease(v24);
        v27 = a5;
        if ((v26 & 1) == 0)
          return;
      }
      v39 = objc_msgSend(a1, "value");
      if (v39)
      {
        v40 = v39;
        _bridgeAnyObjectToAny(_:)(v57);
        swift_unknownObjectRelease(v40);
      }
      else
      {
        memset(v57, 0, sizeof(v57));
      }
      sub_10009AEEC((uint64_t)v57, (uint64_t)v58);
      if (!v58[3])
      {
        sub_10009B2C0((uint64_t)v58, &qword_10026E5F0);
        return;
      }
      if ((swift_dynamicCast(v56, v58, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v41 = v56[0];
        v42 = (_QWORD *)(v55 + 16);
        v43 = v56[1];
        swift_beginAccess(v55 + 16, v58, 33, 0);
        swift_bridgeObjectRetain(a6);
        sub_10009B27C(v41, v43);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v42);
        *(_QWORD *)&v57[0] = *v42;
        *v42 = 0x8000000000000000;
        sub_1001BBF9C(v41, v43, v27, a6, isUniquelyReferenced_nonNull_native);
        v45 = *v42;
        *v42 = *(_QWORD *)&v57[0];
        swift_bridgeObjectRelease(a6);
        swift_bridgeObjectRelease(v45);
        swift_endAccess(v58);
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
        sub_10009B27C(v41, v43);
        v46 = sub_10009B27C(v41, v43);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.default.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          v55 = v12;
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          v58[0] = v50;
          *(_DWORD *)v49 = 136315138;
          sub_100117E20(v41, v43);
          v54 = v13;
          v52 = v51;
          *(_QWORD *)&v57[0] = sub_1000906BC(v53, v51, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, (char *)v57 + 8, v49 + 4, v49 + 12);
          swift_bridgeObjectRelease(v52);
          sub_10009B2FC(v41, v43);
          sub_10009B2FC(v41, v43);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Battery Data: %s", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          sub_10009B2FC(v41, v43);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v55);
          return;
        }
        sub_10009B2FC(v41, v43);
        sub_10009B2FC(v41, v43);
        sub_10009B2FC(v41, v43);

        v37 = *(void (**)(char *, uint64_t))(v13 + 8);
        v38 = v16;
        goto LABEL_14;
      }
    }
  }
}

void sub_10016BF20(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t (*v19)(char *);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  os_unfair_lock_s *v42;
  id v43;
  id v44;
  void *v45;
  char *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[5];
  char v83[24];
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v2 = v1;
  LODWORD(v79) = a1;
  v3 = type metadata accessor for UUID(0);
  v80 = *(_QWORD *)(v3 - 8);
  v81 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v69 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  v17 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain(v17);
  os_unfair_lock_lock(v17 + 4);
  swift_release(v17);
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
  {
    v18 = *(os_unfair_lock_s **)(v2 + v16);
    swift_retain(v18);
    os_unfair_lock_unlock(v18 + 4);
    swift_release(v18);
    return;
  }
  v74 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn;
  v75 = (char *)v16;
  v76 = v8;
  v77 = v6;
  v73 = v13;
  v19 = *(uint64_t (**)(char *))(v10 + 16);
  v71 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v20 = v19(v15);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = v2;
  v78 = v9;
  if (v23)
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "starting keep-alive transaction", v25, 2u);
    v26 = v25;
    v9 = v78;
    swift_slowDealloc(v26, -1, -1);
  }

  v72 = *(void (**)(char *, uint64_t))(v10 + 8);
  v72(v15, v9);
  if ((v79 & 1) != 0)
    v27 = 10.0;
  else
    v27 = 0.0;
  v28 = type metadata accessor for Transaction(0);
  v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  swift_unknownObjectWeakInit(v29 + 40, 0);
  *(_QWORD *)(v29 + 80) = 0;
  *(_BYTE *)(v29 + 88) = 1;
  swift_retain(v2);
  Logger.init(subsystem:category:)(0x656363616B636F64, 0xEE006479726F7373, 0x746361736E617254, 0xEB000000006E6F69);
  *(_QWORD *)(v29 + 64) = 0xD000000000000022;
  *(_QWORD *)(v29 + 72) = 0x8000000100201D10;
  *(double *)(v29 + 56) = v27;
  *(_QWORD *)(v29 + 48) = &off_10023D170;
  swift_unknownObjectWeakAssign(v29 + 40, v2);
  swift_release(v2);
  v30 = v74;
  v31 = *(_QWORD *)(v24 + v74);
  *(_QWORD *)(v24 + v74) = v29;
  swift_release(v31);
  v32 = *(_QWORD *)(v24 + v30);
  v33 = v77;
  v34 = v76;
  v35 = v75;
  if (v32)
  {
    swift_retain(v32);
    sub_1000ECBEC();
    swift_release(v32);
  }
  v36 = *(os_unfair_lock_s **)&v35[v24];
  swift_retain(v36);
  os_unfair_lock_unlock(v36 + 4);
  swift_release(v36);
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v38 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v38);
  os_unfair_lock_lock(v38 + 4);
  swift_release(v38);
  v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
  v40 = *(void **)(*(_QWORD *)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  v41 = *(void **)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v42 = *(os_unfair_lock_s **)(v24 + v37);
  v43 = v41;
  v44 = v40;
  swift_retain(v42);
  os_unfair_lock_unlock(v42 + 4);
  swift_release(v42);
  if (!v41)
  {

    return;
  }
  v79 = v44;
  v45 = *(void **)(v24 + v39);
  v46 = (char *)v43;
  v47 = v45;
  v48 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v47);
  v49 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v50 = *(id *)&v47[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v51 = &v47[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v47[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v83, 0, 0);
  v52 = *(_QWORD *)v51;
  v53 = *(_QWORD *)(*(_QWORD *)v51 + 16);
  if (v53)
  {
    v70 = v49;
    v74 = (uint64_t)v19;
    v75 = v46;
    v54 = v52 + 32;
    swift_bridgeObjectRetain(v52);
    v55 = v81;
    while (1)
    {
      sub_10009AFF4(v54, (uint64_t)v82);
      v56 = *(id *)(*sub_10009B038(v82, v82[3]) + 24);
      DockCoreInfo.identifier.getter(v56);

      DockCoreInfo.identifier.getter(v57);
      LOBYTE(v56) = static UUID.== infix(_:_:)(v34, v33);
      v58 = *(void (**)(char *, uint64_t))(v80 + 8);
      v58(v33, v55);
      v58(v34, v55);
      if ((v56 & 1) != 0)
        break;
      sub_100090E88(v82);
      v54 += 40;
      if (!--v53)
      {
        swift_bridgeObjectRelease(v52);
        v46 = v75;
        v49 = v70;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(v52);
    v60 = *(id *)&v47[v70];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v82, (uint64_t)&v84);
    sub_100090E88(v82);

    v46 = v75;
  }
  else
  {
LABEL_16:
    v59 = *(id *)&v47[v49];
    OS_dispatch_semaphore.signal()();

    v86 = 0;
    v84 = 0u;
    v85 = 0u;

  }
  v61 = v79;
  if (!*((_QWORD *)&v85 + 1))
  {

    sub_10009B2C0((uint64_t)&v84, (uint64_t *)&unk_10026DF40);
    return;
  }
  v62 = sub_10009061C(&qword_10026C2E0);
  v63 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v82, &v84, v62, v63, 6) & 1) == 0)
  {

    return;
  }
  v64 = v82[0];
  v65 = *(char **)(v82[0] + 16);
  if (!v65)
  {

    goto LABEL_28;
  }
  v66 = *(void **)&v65[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
  if (v66)
  {
    v67 = v65;
    if (objc_msgSend(v66, "state") == (id)2)
    {
      sub_100126838(v64, 0, 0, 0, 0.0);

LABEL_28:
      swift_release(v64);
      return;
    }
  }
  else
  {
    v68 = v65;
  }

  swift_release(v64);
}

void sub_10016C838(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v16[1] = v3;
    v13 = swift_slowAlloc(12, -1);
    v16[0] = a1;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc(32, -1);
    v18 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v17 = sub_1000906BC(v16[0], a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "watchdog fired, tearing down os_transaction for %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10016CA18();
}

void sub_10016CA18()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  char *isa;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  char *v32;
  NSObject *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  os_unfair_lock_s *v40;
  id v41;
  NSObject *v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void (*v55)(char *, NSObject *);
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  void *v63;
  char *v64;
  NSObject *v65;
  char *v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  void (*v96)(char *, uint64_t);
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  char *v103;
  _QWORD v104[5];
  char v105[24];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  isa = (char *)v2[-1].isa;
  v102 = v2;
  v103 = isa;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v93 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v98 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v97 = (char *)&v93 - v14;
  v15 = __chkstk_darwin(v13);
  v99 = (char *)&v93 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v93 - v17;
  v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  v20 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain(v20);
  os_unfair_lock_lock(v20 + 4);
  swift_release(v20);
  v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
  {
    v31 = *(os_unfair_lock_s **)(v1 + v19);
    swift_retain(v31);
    os_unfair_lock_unlock(v31 + 4);
    swift_release(v31);
    return;
  }
  v100 = (char *)v19;
  v22 = *(uint64_t (**)(_QWORD))(v10 + 16);
  v94 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v95 = (void (*)(char *, uint64_t, uint64_t))v22;
  v23 = v22(v18);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v101 = v9;
  if (v26)
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "no more elegible clients, tearing down os_transaction", v27, 2u);
    v28 = v27;
    v9 = v101;
    swift_slowDealloc(v28, -1, -1);
  }

  v96 = *(void (**)(char *, uint64_t))(v10 + 8);
  v96(v18, v9);
  v29 = *(_QWORD *)(v1 + v21);
  if (v29)
  {
    swift_retain(*(_QWORD *)(v1 + v21));
    sub_1000ED080();
    swift_release(v29);
    v30 = *(_QWORD *)(v1 + v21);
  }
  else
  {
    v30 = 0;
  }
  v32 = v100;
  v33 = v102;
  *(_QWORD *)(v1 + v21) = 0;
  swift_release(v30);
  v34 = *(os_unfair_lock_s **)&v32[v1];
  swift_retain(v34);
  os_unfair_lock_unlock(v34 + 4);
  swift_release(v34);
  v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v36 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v36);
  os_unfair_lock_lock(v36 + 4);
  swift_release(v36);
  v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
  v38 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  v39 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v40 = *(os_unfair_lock_s **)(v1 + v35);
  v41 = v39;
  v42 = v38;
  swift_retain(v40);
  os_unfair_lock_unlock(v40 + 4);
  swift_release(v40);
  if (!v39)
  {

    return;
  }
  v102 = v42;
  v43 = *(void **)(v1 + v37);
  v44 = (char *)v41;
  v45 = v43;
  v46 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v45);
  v47 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v48 = *(id *)&v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  v49 = &v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess(&v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories], v105, 0, 0);
  v50 = *(_QWORD *)v49;
  v51 = *(_QWORD *)(*(_QWORD *)v49 + 16);
  if (v51)
  {
    v93 = v47;
    v100 = v44;
    v52 = v50 + 32;
    swift_bridgeObjectRetain(v50);
    while (1)
    {
      sub_10009AFF4(v52, (uint64_t)v104);
      v53 = *(id *)(*sub_10009B038(v104, v104[3]) + 24);
      DockCoreInfo.identifier.getter(v53);

      DockCoreInfo.identifier.getter(v54);
      LOBYTE(v53) = static UUID.== infix(_:_:)(v8, v6);
      v55 = (void (*)(char *, NSObject *))*((_QWORD *)v103 + 1);
      v55(v6, v33);
      v55(v8, v33);
      if ((v53 & 1) != 0)
        break;
      sub_100090E88(v104);
      v52 += 40;
      if (!--v51)
      {
        swift_bridgeObjectRelease(v50);
        v44 = v100;
        v47 = v93;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v50);
    v57 = *(id *)&v45[v93];
    OS_dispatch_semaphore.signal()();

    sub_10009AFF4((uint64_t)v104, (uint64_t)&v106);
    sub_100090E88(v104);

    v44 = v100;
  }
  else
  {
LABEL_14:
    v56 = *(id *)&v45[v47];
    OS_dispatch_semaphore.signal()();

    v108 = 0;
    v106 = 0u;
    v107 = 0u;

  }
  v58 = v101;
  if (!*((_QWORD *)&v107 + 1))
  {

    sub_10009B2C0((uint64_t)&v106, (uint64_t *)&unk_10026DF40);
    return;
  }
  v59 = sub_10009061C(&qword_10026C2E0);
  v60 = type metadata accessor for DaemonAccessory(0);
  if ((swift_dynamicCast(v104, &v106, v59, v60, 6) & 1) == 0)
  {

    return;
  }
  v61 = v104[0];
  v62 = *(char **)(v104[0] + 16);
  if (!v62)
  {
    swift_release(v104[0]);

    return;
  }
  v63 = *(void **)&v62[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
  if (!v63)
  {
    v66 = v62;
    goto LABEL_27;
  }
  v64 = v62;
  if (objc_msgSend(v63, "state") != (id)2)
  {
LABEL_27:

    swift_release(v61);
    return;
  }
  v65 = 0;
  sub_100126838(v61, 0, 0, 0, 0.0);
  v103 = v64;
  v95(v99, v94, v58);
  v67 = v102;
  v68 = v44;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v72 = swift_slowAlloc(22, -1);
    v73 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v72 = 138412546;
    v74 = dispatch thunk of DockCoreAccessory.info.getter(v73);
    *(_QWORD *)&v106 = v74;
    v102 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 8, v72 + 4, v72 + 12);
    *v73 = v74;

    *(_WORD *)(v72 + 12) = 2048;
    *(_QWORD *)&v106 = 0x404E000000000000;
    v65 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 8, v72 + 14, v72 + 22);

    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Setting accessory reachable %@ after %f secs", (uint8_t *)v72, 0x16u);
    v75 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v73, 1, v75);
    v58 = v101;
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v72, -1, -1);
  }
  else
  {

    v69 = v68;
  }

  v96(v99, v58);
  type metadata accessor for DockCoreManager(0, v76, v77, v78);
  v79 = static DockCoreManager.localFirmwarePath.getter();
  v81 = v80;
  sub_100126838(v61, 1, v79, v80, 60.0);
  if (v65)
  {
    swift_bridgeObjectRelease(v81);
    v95(v98, v94, v58);
    v82 = v68;
    swift_errorRetain(v65);
    v83 = v82;
    v84 = swift_errorRetain(v65);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = swift_slowAlloc(22, -1);
      v88 = (uint64_t *)swift_slowAlloc(16, -1);
      *(_DWORD *)v87 = 138412546;
      v102 = v85;
      v89 = dispatch thunk of DockCoreAccessory.info.getter(v88);
      *(_QWORD *)&v106 = v89;
      v85 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 8, v87 + 4, v87 + 12);
      *v88 = v89;

      *(_WORD *)(v87 + 12) = 2112;
      swift_errorRetain(v65);
      v90 = _swift_stdlib_bridgeErrorToNSError(v65);
      *(_QWORD *)&v106 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 8, v87 + 14, v87 + 22);
      v88[1] = v90;
      swift_errorRelease(v65);
      swift_errorRelease(v65);
      v91 = v102;
      _os_log_impl((void *)&_mh_execute_header, v102, v86, "Failed setting %@ reachable: %@", (uint8_t *)v87, 0x16u);
      v92 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v88, 2, v92);
      v58 = v101;
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);

      swift_errorRelease(v65);
      swift_release(v61);

    }
    else
    {

      swift_release(v61);
      swift_errorRelease(v65);

      swift_errorRelease(v65);
      swift_errorRelease(v65);
    }

    v96(v98, v58);
  }
  else
  {

    swift_release(v61);
    swift_bridgeObjectRelease(v81);
  }
}

uint64_t sub_10016D5D0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __SecTask *v10;
  NSObject *v11;
  CFStringRef v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  audit_token_t token;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  v7 = (char *)&token - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&token - v8;
  objc_msgSend(a1, "auditToken");
  v10 = SecTaskCreateWithAuditToken(0, &token);
  if (!v10)
  {
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v3);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to create audit token task for bundle identifier", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return 0;
  }
  v11 = v10;
  *(_QWORD *)token.val = 0;
  v12 = SecTaskCopySigningIdentifier(v10, (CFErrorRef *)&token);
  if (!v12)
  {
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v3);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed fetching signing identifier for new connection", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      v23 = v11;
    }
    else
    {
      v23 = v20;
      v20 = v11;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
  v13 = (__CFString *)v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  return v14;
}

unint64_t sub_10016D840(unsigned int a1, char a2)
{
  uint64_t v2;
  char v3;
  _QWORD *v5;
  char v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE v35[24];

  if ((a2 & 1) == 0)
  {
    v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount, v35, 0, 0);
    if (!*(_QWORD *)(*v5 + 16))
      goto LABEL_14;
    sub_1001452C8(a1);
    if ((v6 & 1) == 0)
      goto LABEL_14;
    swift_beginAccess(v5, v34, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v8 = *v5;
    v32 = *v5;
    *v5 = 0x8000000000000000;
    result = sub_1001452C8(a1);
    v11 = *(_QWORD *)(v8 + 16);
    v12 = (v10 & 1) == 0;
    v13 = __OFADD__(v11, v12);
    v14 = v11 + v12;
    if (!v13)
    {
      v3 = v10;
      if (*(_QWORD *)(v8 + 24) >= v14)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_28;
      }
      else
      {
        sub_1001B7710(v14, isUniquelyReferenced_nonNull_native);
        result = sub_1001452C8(a1);
        if ((v3 & 1) != (v15 & 1))
        {
LABEL_13:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
          __break(1u);
LABEL_14:
          swift_beginAccess(v5, v34, 33, 0);
          v23 = swift_isUniquelyReferenced_nonNull_native(*v5);
          v33 = *v5;
          *v5 = 0x8000000000000000;
          sub_1001BB9E0(1, a1, v23);
          v24 = *v5;
          *v5 = v33;
          swift_bridgeObjectRelease(v24);
          return swift_endAccess(v34);
        }
      }
      if ((v3 & 1) == 0)
        goto LABEL_29;
      goto LABEL_17;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount, v35, 0, 0);
  if (!*(_QWORD *)(*v5 + 16))
    goto LABEL_14;
  sub_1001452C8(a1);
  if ((v16 & 1) == 0)
    goto LABEL_14;
  swift_beginAccess(v5, v34, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v17 = *v5;
  v32 = *v5;
  *v5 = 0x8000000000000000;
  result = sub_1001452C8(a1);
  v19 = *(_QWORD *)(v17 + 16);
  v20 = (v18 & 1) == 0;
  v13 = __OFADD__(v19, v20);
  v21 = v19 + v20;
  if (v13)
    goto LABEL_26;
  v3 = v18;
  if (*(_QWORD *)(v17 + 24) >= v21)
    goto LABEL_20;
  sub_1001B7710(v21, isUniquelyReferenced_nonNull_native);
  result = sub_1001452C8(a1);
  if ((v3 & 1) != (v22 & 1))
    goto LABEL_13;
LABEL_21:
  if ((v3 & 1) != 0)
  {
    while (1)
    {
      v25 = v32;
      v26 = *(_QWORD *)(v32 + 56);
      v29 = *(_QWORD *)(v26 + 8 * result);
      v13 = __OFADD__(v29, 1);
      v28 = v29 + 1;
      if (!v13)
        break;
LABEL_27:
      __break(1u);
LABEL_28:
      v30 = result;
      sub_1001BE4F4();
      result = v30;
      if ((v3 & 1) != 0)
      {
LABEL_17:
        v25 = v32;
        v26 = *(_QWORD *)(v32 + 56);
        v27 = *(_QWORD *)(v26 + 8 * result);
        v13 = __OFADD__(v27, 1);
        v28 = v27 + 1;
        if (!v13)
          break;
        __break(1u);
LABEL_20:
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_21;
      }
      else
      {
LABEL_29:
        __break(1u);
      }
      v31 = result;
      sub_1001BE4F4();
      result = v31;
      if ((v3 & 1) == 0)
        goto LABEL_31;
    }
    *(_QWORD *)(v26 + 8 * result) = v28;
    *v5 = v25;
    return swift_endAccess(v34);
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_10016DAE8(unsigned int a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[24];

  v3 = v2;
  v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  v8 = (_BYTE)v7 + 16;
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  if ((a2 & 1) == 0)
  {
    v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
    swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount, v40, 0, 0);
    if (!*(_QWORD *)(*v9 + 16))
      goto LABEL_14;
    sub_1001452C8(a1);
    if ((v10 & 1) == 0)
      goto LABEL_14;
    swift_beginAccess(v9, v39, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v12 = *v9;
    v37 = *v9;
    *v9 = 0x8000000000000000;
    result = sub_1001452C8(a1);
    v15 = *(_QWORD *)(v12 + 16);
    v16 = (v14 & 1) == 0;
    v17 = __OFADD__(v15, v16);
    v18 = v15 + v16;
    if (!v17)
    {
      v8 = v14;
      if (*(_QWORD *)(v12 + 24) >= v18)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_28;
      }
      else
      {
        sub_1001B7710(v18, isUniquelyReferenced_nonNull_native);
        result = sub_1001452C8(a1);
        if ((v8 & 1) != (v19 & 1))
        {
LABEL_13:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
          __break(1u);
LABEL_14:
          swift_beginAccess(v9, v39, 33, 0);
          v27 = swift_isUniquelyReferenced_nonNull_native(*v9);
          v38 = *v9;
          *v9 = 0x8000000000000000;
          sub_1001BB9E0(0, a1, v27);
          v28 = *v9;
          *v9 = v38;
          swift_bridgeObjectRelease(v28);
LABEL_24:
          swift_endAccess(v39);
          v34 = *(os_unfair_lock_s **)(v3 + v6);
          swift_retain(v34);
          os_unfair_lock_unlock(v34 + 4);
          return swift_release(v34);
        }
      }
      if ((v8 & 1) == 0)
        goto LABEL_29;
      goto LABEL_17;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount);
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount, v40, 0, 0);
  if (!*(_QWORD *)(*v9 + 16))
    goto LABEL_14;
  sub_1001452C8(a1);
  if ((v20 & 1) == 0)
    goto LABEL_14;
  swift_beginAccess(v9, v39, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v21 = *v9;
  v37 = *v9;
  *v9 = 0x8000000000000000;
  result = sub_1001452C8(a1);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = (v22 & 1) == 0;
  v17 = __OFADD__(v23, v24);
  v25 = v23 + v24;
  if (v17)
    goto LABEL_26;
  v8 = v22;
  if (*(_QWORD *)(v21 + 24) >= v25)
    goto LABEL_20;
  sub_1001B7710(v25, isUniquelyReferenced_nonNull_native);
  result = sub_1001452C8(a1);
  if ((v8 & 1) != (v26 & 1))
    goto LABEL_13;
LABEL_21:
  if ((v8 & 1) != 0)
  {
    while (1)
    {
      v29 = v37;
      v30 = *(_QWORD *)(v37 + 56);
      v33 = *(_QWORD *)(v30 + 8 * result);
      v17 = __OFSUB__(v33, 1);
      v32 = v33 - 1;
      if (!v17)
        break;
LABEL_27:
      __break(1u);
LABEL_28:
      v35 = result;
      sub_1001BE4F4();
      result = v35;
      if ((v8 & 1) != 0)
      {
LABEL_17:
        v29 = v37;
        v30 = *(_QWORD *)(v37 + 56);
        v31 = *(_QWORD *)(v30 + 8 * result);
        v17 = __OFSUB__(v31, 1);
        v32 = v31 - 1;
        if (!v17)
          break;
        __break(1u);
LABEL_20:
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_21;
      }
      else
      {
LABEL_29:
        __break(1u);
      }
      v36 = result;
      sub_1001BE4F4();
      result = v36;
      if ((v8 & 1) == 0)
        goto LABEL_31;
    }
    *(_QWORD *)(v30 + 8 * result) = v32;
    *v9 = v29;
    goto LABEL_24;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10016DDE8(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  double v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t result;
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  os_log_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[16];
  uint64_t v97[3];
  char v98[31];
  BOOL v99[9];

  v4 = v3;
  v91 = a1;
  v87 = type metadata accessor for Logger(0);
  v89 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v88 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009061C(&qword_10026E6A0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v90 = (char *)&v76 - v13;
  __chkstk_darwin(v12);
  v15 = (unint64_t)&v76 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v76 - v20;
  __chkstk_darwin(v19);
  v24 = (char *)&v76 - v23;
  v99[0] = 0;
  v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitConfiguration);
  if (!*(_QWORD *)(v25 + 16))
    return 0;
  v85 = v22;
  swift_bridgeObjectRetain(a3);
  v26 = sub_100145264(a2, a3);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  v86 = v17;
  v82 = v11;
  v28 = a2;
  v29 = *(double *)(*(_QWORD *)(v25 + 56) + 8 * v26);
  swift_bridgeObjectRelease(a3);
  v83 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v30 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  v31 = (uint64_t)&v30[4];
  swift_retain(v30);
  os_unfair_lock_lock(v30 + 4);
  swift_release(v30);
  v84 = v4;
  v32 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients);
  swift_beginAccess(v32, v98, 0, 0);
  v33 = *v32;
  v34 = v91;
  if (!*(_QWORD *)(*v32 + 16) || (sub_1001452C8(v91), (v35 & 1) == 0))
  {
    v44 = sub_1001B1CA8((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess(v32, v97, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    v95 = *v32;
    *v32 = 0x8000000000000000;
    sub_1001BB744(v44, v34, isUniquelyReferenced_nonNull_native);
    v46 = *v32;
    *v32 = v95;
    swift_bridgeObjectRelease(v46);
    swift_endAccess(v97);
    v31 = v28;
    goto LABEL_17;
  }
  v36 = sub_1001452C8(v34);
  if ((v37 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v36);
  v31 = v28;
  v39 = v86;
  if (!*(_QWORD *)(v38 + 16))
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v15, 1, 1, v16);
LABEL_15:
    sub_10009B2C0(v15, &qword_10026E6A0);
LABEL_16:
    v34 = v91;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v38);
  v40 = sub_100145264(v28, a3);
  if ((v41 & 1) != 0)
  {
    v28 = v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))(v15, *(_QWORD *)(v38 + 56) + *(_QWORD *)(v39 + 72) * v40, v16);
    v42 = 0;
  }
  else
  {
    v42 = 1;
    v28 = v16;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v15, v42, 1, v28);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v38);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v39 + 48))(v15, 1, v28) == 1)
    goto LABEL_15;
  v63 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v39 + 32))(v24, v15, v16);
  v64 = fabs(Date.timeIntervalSinceNow.getter(v63));
  v99[0] = v64 < 1.0 / v29;
  if (v64 >= 1.0 / v29)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v16);
    goto LABEL_16;
  }
  v28 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, v84 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v87);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v21, v24, v16);
  v65 = swift_bridgeObjectRetain_n(a3, 2);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter();
  v68 = v67;
  if (!os_log_type_enabled(v66, v67))
  {

    v75 = *(void (**)(char *, uint64_t))(v39 + 8);
    v75(v21, v16);
    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v28);
    v75(v24, v16);
    goto LABEL_16;
  }
  v69 = swift_slowAlloc(34, -1);
  v80 = v66;
  v70 = v69;
  v81 = swift_slowAlloc(32, -1);
  v97[0] = v81;
  *(_DWORD *)v70 = 136315906;
  v79 = v68;
  swift_bridgeObjectRetain(a3);
  v95 = sub_1000906BC(v31, a3, v97);
  v78 = v96;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v70 + 4, v70 + 12);
  swift_bridgeObjectRelease_n(a3, 3);
  *(_WORD *)(v70 + 12) = 1024;
  v71 = v39;
  v34 = v91;
  LODWORD(v95) = v91;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 4, v70 + 14, v70 + 18);
  *(_WORD *)(v70 + 18) = 1024;
  LODWORD(v95) = 1;
  v72 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 4, v70 + 20, v70 + 24);
  *(_WORD *)(v70 + 24) = 2048;
  v77 = v70 + 26;
  v95 = Date.timeIntervalSinceNow.getter(v72);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v78, v77, v70 + 34);
  v73 = *(void (**)(char *, uint64_t))(v71 + 8);
  v73(v21, v16);
  v28 = (uint64_t)v80;
  _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v79, "rateLimit: %s %d %{BOOL}d %f", (uint8_t *)v70, 0x22u);
  v74 = v81;
  swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v74, -1, -1);
  swift_slowDealloc(v70, -1, -1);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v87);
  v73(v24, v16);
LABEL_17:
  swift_beginAccess(v99, v97, 0, 0);
  v21 = v90;
  if (v99[0])
  {
LABEL_31:
    v62 = *(os_unfair_lock_s **)(v84 + v83);
    swift_retain(v62);
    os_unfair_lock_unlock(v62 + 4);
    swift_release(v62);
    return v99[0];
  }
  swift_bridgeObjectRetain(a3);
  Date.init()(v47);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v21, 0, 1, v16);
  swift_beginAccess(v32, &v95, 33, 0);
  v48 = swift_isUniquelyReferenced_nonNull_native(*v32);
  v94 = *v32;
  v49 = v94;
  *v32 = 0x8000000000000000;
  v15 = sub_1001452C8(v34);
  v51 = *(_QWORD *)(v49 + 16);
  v52 = (v50 & 1) == 0;
  v53 = v51 + v52;
  if (__OFADD__(v51, v52))
  {
    __break(1u);
    goto LABEL_38;
  }
  LOBYTE(v28) = v50;
  if (*(_QWORD *)(v49 + 24) >= v53)
  {
    v34 = v86;
    if ((v48 & 1) != 0)
    {
      if ((v50 & 1) != 0)
        goto LABEL_25;
      goto LABEL_40;
    }
LABEL_39:
    sub_1001BE334();
    if ((v28 & 1) != 0)
      goto LABEL_25;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  sub_1001B73F0(v53, v48);
  v54 = sub_1001452C8(v34);
  if ((v28 & 1) == (v55 & 1))
  {
    v15 = v54;
    v34 = v86;
    if ((v28 & 1) == 0)
      goto LABEL_40;
LABEL_25:
    v93 = *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v21, 1, v16) == 1)
    {
      sub_10009B2C0((uint64_t)v21, &qword_10026E6A0);
      v56 = (uint64_t)v82;
      sub_1001B434C(v31, a3, (uint64_t)v82);
      swift_bridgeObjectRelease(a3);
      sub_10009B2C0(v56, &qword_10026E6A0);
      v57 = v93;
      if (v93)
      {
LABEL_27:
        v58 = v94;
        *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v15) = v57;
LABEL_30:
        *v32 = v58;
        swift_endAccess(&v95);
        goto LABEL_31;
      }
    }
    else
    {
      v59 = v85;
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v85, v21, v16);
      v60 = v93;
      v61 = swift_isUniquelyReferenced_nonNull_native(v93);
      v92 = v60;
      sub_1001BB608(v59, v31, a3, v61);
      v57 = v92;
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(0x8000000000000000);
      if (v57)
        goto LABEL_27;
    }
    v58 = v94;
    sub_1001BA5B4(v15, v94);
    goto LABEL_30;
  }
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
  return result;
}

uint64_t sub_10016E69C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  _BYTE v27[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = (_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients);
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients, v27, 0, 0);
  v11 = *v10;
  if (*(_QWORD *)(*v10 + 16))
  {
    v12 = sub_1001452C8(a1);
    if ((v13 & 1) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12) + 16))
      {
        v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.default.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 67109120;
          v25 = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v17 + 4, v17 + 8);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cleaning rate-limiting tracking for %d", v17, 8u);
          swift_slowDealloc(v17, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v18 = sub_1001B1CA8((uint64_t)_swiftEmptyArrayStorage);
        swift_beginAccess(v10, &v25, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
        v24 = *v10;
        *v10 = 0x8000000000000000;
        sub_1001BB744(v18, a1, isUniquelyReferenced_nonNull_native);
        v20 = *v10;
        *v10 = v24;
        swift_bridgeObjectRelease(v20);
        swift_endAccess(&v25);
      }
    }
  }
  v21 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v21);
  os_unfair_lock_unlock(v21 + 4);
  return swift_release(v21);
}

void sub_10016E8D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10026F5E0)
  {
    v0 = type metadata accessor for DKThreadSafe(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10026F5E0);
  }
}

ValueMetadata *type metadata accessor for TrackingSummaryClient()
{
  return &type metadata for TrackingSummaryClient;
}

_QWORD *initializeBufferWithCopyOfBuffer for BatteryClient(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for BatteryClient(id *a1)
{

}

uint64_t assignWithCopy for BatteryClient(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for BatteryClient(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t _s14dockaccessoryd13BatteryClientVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10016EA74(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BatteryClient()
{
  return &type metadata for BatteryClient;
}

ValueMetadata *type metadata accessor for SensorRule()
{
  return &type metadata for SensorRule;
}

uint64_t _s14dockaccessoryd12FeedbackRuleVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s14dockaccessoryd12FeedbackRuleVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s14dockaccessoryd12FeedbackRuleVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  return a1;
}

_QWORD *_s14dockaccessoryd12FeedbackRuleVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t _s14dockaccessoryd12FeedbackRuleVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10016EC4C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedbackRule()
{
  return &type metadata for FeedbackRule;
}

ValueMetadata *type metadata accessor for MagneticHeadingStamped()
{
  return &type metadata for MagneticHeadingStamped;
}

void *sub_10016ECB0(uint64_t a1)
{
  void (**v2)(char *, uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint8_t *v42;
  char *v43;
  os_log_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];

  v46 = type metadata accessor for UUID(0);
  v2 = *(void (***)(char *, uint64_t))(v46 - 8);
  __chkstk_darwin(v46);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v50 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v48 = (void (**)(char *, uint64_t))((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - v9;
  v11 = type metadata accessor for URL(0);
  v12 = __chkstk_darwin(v11);
  v51 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - v14;
  v47 = v16;
  (*((void (**)(char *, uint64_t, uint64_t))v16 + 2))((char *)&v42 - v14, a1, v11);
  v17 = objc_allocWithZone((Class)NSData);
  v18 = sub_1000D2C84((uint64_t)v15, 2);
  v47 = v4;
  v48 = v2;
  v19 = v49;
  v20 = v50;
  v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  sub_100090EE8(0, &qword_10026CF88, NSKeyedUnarchiver_ptr);
  v24 = type metadata accessor for DockCoreAccessory(0);
  v25 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v24, v21, v23, v24);
  if (v25)
  {
    v26 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v10, v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v5);
    v27 = v25;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v44 = v28;
      v30 = swift_slowAlloc(12, -1);
      v51 = v21;
      v45 = v23;
      v31 = (uint8_t *)v30;
      v32 = swift_slowAlloc(32, -1);
      v53[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v42 = v31 + 4;
      v33 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      v49 = v5;
      v34 = v47;
      DockCoreInfo.identifier.getter();

      v35 = sub_100090E1C(&qword_10026E860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = v46;
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v46, v35);
      v43 = v26;
      v39 = v38;
      v48[1](v34, v36);
      v52 = sub_1000906BC(v37, v39, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v42, v31 + 12);

      swift_bridgeObjectRelease(v39);
      v40 = v44;
      _os_log_impl((void *)&_mh_execute_header, v44, v29, "Loaded paired accessory for %s.", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
      sub_10009B2FC(v51, v45);

      (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v49);
    }
    else
    {

      sub_10009B2FC(v21, v23);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v5);
    }
  }
  else
  {
    sub_10009B2FC(v21, v23);
  }
  return v25;
}

uint64_t sub_10016F488(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100090E1C(&qword_10026E5D0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      v24 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_10016FED8((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_10016F6E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1001700DC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10016F890(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_1002701D0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v40 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v38 = v2;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v39)
      goto LABEL_35;
    v21 = v40[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_35;
      v21 = v40[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v41 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28, v29);
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v39)
  {
    v21 = v40[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_10016FBFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10009061C(&qword_100270160);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10016FED8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10016F890(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100170274();
      goto LABEL_12;
    }
    sub_100170648(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15, v16);
  v18 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v9, *(_QWORD *)(v13 + 48) + v20 * a2, v6);
      v22 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1001700DC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10016FBFC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100170498();
      goto LABEL_22;
    }
    sub_100170970(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void *sub_100170274()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009061C(&qword_1002701D0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_100170498()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10009061C(&qword_100270160);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_100170648(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10009061C(&qword_1002701D0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v36 = v2;
  v37 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_35;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_35;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26, v27);
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v38)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100170970(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10009061C(&qword_100270160);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100170C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100090E1C(&qword_10026E5D0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = swift_bridgeObjectRetain(v10);
  v34 = a1;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a2;
    v18 = ~v16;
    v19 = *(_QWORD *)(v7 + 72);
    v35 = v7;
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v21 = v19 * v17;
      v20(v9, *(_QWORD *)(v10 + 48) + v19 * v17, v6);
      v22 = sub_100090E1C((unint64_t *)&unk_10026E0F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v6);
      if ((v23 & 1) != 0)
        break;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v24 = 1;
        a2 = v33;
        v7 = v35;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v24, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v25 = v32;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    v27 = *v25;
    v36 = *v25;
    *v25 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100170274();
      v27 = v36;
    }
    v28 = *(_QWORD *)(v27 + 48) + v21;
    v7 = v35;
    a2 = v33;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 32))(v33, v28, v6);
    sub_100170FE4(v17);
    v29 = *v25;
    *v25 = v36;
    swift_bridgeObjectRelease(v29);
    v24 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v24 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v24, 1, v6);
}

uint64_t sub_100170E58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100170498();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100171260(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_100170FE4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v31 = v1;
    v11 = ~v9;
    swift_retain(v7);
    v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    v33 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        v15 = v14 * v10;
        v32(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        v16 = *(_QWORD *)(v7 + 40);
        v17 = sub_100090E1C(&qword_10026E5D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17, v18);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v3);
        v20 = v19 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v20 < v13 || a1 < (uint64_t)v20)
            goto LABEL_6;
        }
        else if (v20 < v13 && a1 < (uint64_t)v20)
        {
          goto LABEL_6;
        }
        v23 = *(_QWORD *)(v7 + 48);
        v24 = v14 * a1;
        v25 = v23 + v14 * a1;
        v26 = v23 + v15;
        if (v14 * a1 < v15 || v25 >= v26 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v3);
        }
        else
        {
          a1 = v10;
          if (v24 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v33 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v33 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v31;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
  return result;
}

unint64_t sub_100171260(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

_QWORD *sub_100171428(_QWORD *a1)
{
  return sub_1000E9578(0, a1[2], 0, a1);
}

uint64_t sub_10017143C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_1001714A4(_QWORD *a1)
{
  return sub_1000E9AD8(0, a1[2], 0, a1);
}

_QWORD *sub_1001714B8(_QWORD *a1)
{
  return sub_1000E9AE4(0, a1[2], 0, a1);
}

_QWORD *sub_1001714CC(_QWORD *a1)
{
  return sub_1000E9698(0, a1[2], 0, a1);
}

unint64_t *sub_1001714E0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  uint64_t v11;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100171630((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_100171630((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

unint64_t *sub_100171630(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_21;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_10019B664(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_10019B664(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_10019B664(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12);
    if (*(_QWORD *)(v16 + 56) && *(_QWORD *)(v16 + 48) && (*(_BYTE *)(v16 + 40) & 1) == 0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_10019B664(result, a2, v4, a3);
      }
    }
    else
    {
      *(_BYTE *)(v16 + 40) = 1;
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_10019B664(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_10019B664(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

void (*sub_100171790(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1001719D8(v7);
  v7[10] = sub_100171870(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100171820;
}

void sub_100171820(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100171870(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100145264(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10017199C;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1001BD324();
      goto LABEL_7;
    }
    sub_1001B5A04(v16, a4 & 1);
    v20 = sub_100145264(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10017199C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1001ABE58(*a1, *((_BYTE *)*a1 + 40), (_QWORD *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_1001719D8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001719F8;
}

uint64_t sub_1001719F8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void sub_100171A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        goto LABEL_24;
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          goto LABEL_24;
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            goto LABEL_24;
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_100170E58(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

unint64_t *sub_100171B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_1000E6210(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_100172000((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000E6210(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_100172000((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000E6210(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_100172000(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v38 = v9 + 6;
                while (v14 != v38)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_1001722F4(v41, a2, v40, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_1001722F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10009061C(&qword_100270160);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100172588(uint64_t a1, uint64_t a2)
{
  return sub_100172BA0(a1, a2, type metadata accessor for AccessoryPairingToken);
}

_QWORD *sub_100172594(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_15;
        v8 = sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v9 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v8);
        v10 = static NSObject.== infix(_:_:)(v9, a2);

        if ((v10 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
          v12 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
          v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v6);
          specialized ContiguousArray._endMutation()(v13);
        }
        else
        {

        }
        ++v4;
        if (v7 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v15 = a1;
      else
        v15 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100172714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return 0;
  }
LABEL_13:
  if (a1 < 0)
    v11 = a1;
  else
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v11);
  swift_bridgeObjectRelease(a1);
  if (!v4)
    return 0;
LABEL_3:
  sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
  for (i = 0; ; ++i)
  {
    v6 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1)
       : *(id *)(a1 + 8 * i + 32);
    v7 = v6;
    v8 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v6);
    v9 = static NSObject.== infix(_:_:)(v8, a2);

    if ((v9 & 1) != 0)
      break;
    v10 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    if (v10 == v4)
      return 0;
  }
  return i;
}

uint64_t sub_100172848(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  v7 = sub_100172714(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    i = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if (v9 < 0)
        v31 = v9;
      else
        v31 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v32 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v9);
      if (i != v32)
        goto LABEL_6;
    }
    else if (i != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
      for (i = v7 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v13 = *(id *)(v12 + 8 * i);
        }
        v14 = v13;
        v15 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v13);
        v9 = static NSObject.== infix(_:_:)(v15, a2);

        if ((v9 & 1) == 0)
          break;
LABEL_32:
        v26 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_49;
        v9 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v9 < 0)
            v28 = *a1;
          else
            v28 = v9 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v27 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(v9);
        }
        else
        {
          v27 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v26 == v27)
          return v7;
      }
      if (v11 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v17 = *(id *)(v9 + 8 * i);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v16 = *(id *)(v9 + 8 * v7 + 32);
        if ((v9 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v9);
      v9 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v9);
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        v9 = sub_10017143C(v9);
        *a1 = v9;
      }
      v19 = *(void **)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v17;

      specialized Array._endMutation()(v20);
      v9 = *a1;
      v21 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v9;
      if (!v21 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        v9 = sub_10017143C(v9);
        *a1 = v9;
      }
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v22 = v9 & 0xFFFFFFFFFFFFFF8;
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v23 = *(void **)(v22 + 8 * i);
      *(_QWORD *)(v22 + 8 * i) = v16;

      v9 = (uint64_t)a1;
      specialized Array._endMutation()(v24);
      goto LABEL_31;
    }
    return v7;
  }
  v29 = *a1;
  if (!((unint64_t)*a1 >> 62))
    return *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v29 < 0)
    v33 = *a1;
  else
    v33 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v29);
  return v34;
}

uint64_t sub_100172BA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v28 = v7;
  else
    v28 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v9 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v7;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v9 < 0)
      v30 = v9;
    else
      v30 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v9);
    v9 = *v4;
    goto LABEL_15;
  }
LABEL_37:
  if (v9 < 0)
    v29 = v9;
  else
    v29 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v9);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v9;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v9 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v9);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v9);
  v16 = *v4;
  *v4 = v15;
  swift_bridgeObjectRelease(v16);
  v13 = *v4 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = v13 + 32;
  v18 = (char *)(v13 + 32 + 8 * v5);
  v19 = v6(0);
  v20 = (void *)swift_arrayDestroy(v18, v7, v19);
  if (!v8)
    return specialized Array._endMutation()(v20);
  v21 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v3;
    if (!__OFSUB__(v22, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v21 < 0)
    v31 = *v4;
  else
    v31 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  v20 = (void *)swift_bridgeObjectRelease(v21);
  v23 = v32 - v3;
  if (__OFSUB__(v32, v3))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (char *)(v17 + 8 * v3);
    if (v5 != v3 || v18 >= &v24[8 * v23])
      v20 = memmove(v18, v24, 8 * v23);
    v3 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v25 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v26 = v25 + v8;
      if (!__OFADD__(v25, v8))
      {
LABEL_27:
        *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
        return specialized Array._endMutation()(v20);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v3 < 0)
      v33 = v3;
    else
      v33 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    v20 = (void *)swift_bridgeObjectRelease(v3);
    v26 = v34 + v8;
    if (!__OFADD__(v34, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v35 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v35, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100172E9C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1000E9578(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_10009061C(&qword_10026C2E0);
  result = (void *)swift_arrayDestroy(&v4[5 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v17[40 * v16])
      result = memmove(&v4[5 * a1 + 4], v17, 40 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_100173018(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  _QWORD *v17;
  void (*v18)(_QWORD *);
  _QWORD *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  _QWORD v26[4];
  _BYTE v27[32];
  _BYTE v28[24];

  if (!a3)
    return a3 != 0;
  v5 = v3;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = (_QWORD *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v28, 0, 0);
  v11 = *v10;
  v12 = *(_QWORD *)(*v10 + 16);
  swift_bridgeObjectRetain(a2);
  if (!v12)
    goto LABEL_6;
  swift_bridgeObjectRetain(v11);
  sub_100145264(a1, a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
LABEL_6:
    swift_beginAccess(v10, v27, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    v26[0] = *v10;
    *v10 = 0x8000000000000000;
    sub_1001BADD0((uint64_t)_swiftEmptyArrayStorage, a1, a2, isUniquelyReferenced_nonNull_native);
    v15 = *v10;
    *v10 = v26[0];
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v15);
    swift_endAccess(v27);
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v11);
LABEL_7:
  swift_bridgeObjectRetain(a2);
  v16 = sub_100159104((uint64_t)v27);
  v18 = sub_10016454C(v26, a1, a2);
  if (*v17)
  {
    v19 = v17;
    v20 = a3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v22 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= v21 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
    specialized Array._endMutation()(v23);
  }
  ((void (*)(_QWORD *, _QWORD))v18)(v26, 0);
  swift_bridgeObjectRelease(a2);
  ((void (*)(_BYTE *, _QWORD))v16)(v27, 0);
  v24 = *(os_unfair_lock_s **)(v5 + v8);
  swift_retain(v24);
  os_unfair_lock_unlock(v24 + 4);
  swift_release(v24);
  return a3 != 0;
}

uint64_t sub_100173234(void *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  unint64_t v27;
  id v28;
  id v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD v60[3];
  _BYTE v61[24];

  if (!a1)
    return a1 != 0;
  v49 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  swift_release(v3);
  v50 = v1;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v61, 0, 0);
  v52 = *v4 + 64;
  v5 = 1 << *(_BYTE *)(*v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v4 + 64);
  v53 = (unint64_t)(v5 + 63) >> 6;
  v54 = *v4;
  swift_bridgeObjectRetain(*v4);
  v8 = 0;
  v9 = _swiftEmptyArrayStorage;
  v51 = v4;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v12 = (v7 - 1) & v7;
      v13 = v11 | (v8 << 6);
    }
    else
    {
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_54;
      if (v14 >= v53)
      {
LABEL_49:
        swift_release(v54);
        v47 = *(os_unfair_lock_s **)(v50 + v49);
        swift_retain(v47);
        os_unfair_lock_unlock(v47 + 4);
        swift_release(v47);
        return a1 != 0;
      }
      v15 = *(_QWORD *)(v52 + 8 * v14);
      ++v8;
      if (!v15)
      {
        v8 = v14 + 1;
        if (v14 + 1 >= v53)
          goto LABEL_49;
        v15 = *(_QWORD *)(v52 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 2;
          if (v14 + 2 >= v53)
            goto LABEL_49;
          v15 = *(_QWORD *)(v52 + 8 * v8);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v53)
              goto LABEL_49;
            v15 = *(_QWORD *)(v52 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v8 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_55;
                if (v8 >= v53)
                  goto LABEL_49;
                v15 = *(_QWORD *)(v52 + 8 * v8);
                ++v16;
                if (v15)
                  goto LABEL_22;
              }
            }
            v8 = v16;
          }
        }
      }
LABEL_22:
      v12 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v8 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * v13);
    v18 = v17[1];
    v57 = v12;
    v58 = *v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v13);
    v60[0] = v9;
    if ((unint64_t)v19 >> 62)
      break;
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = a1;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    if (v20)
      goto LABEL_25;
LABEL_40:
    v32 = v9;
    v56 = (uint64_t)v9;
LABEL_41:
    swift_bridgeObjectRelease(v19);

    swift_beginAccess(v4, v60, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v36 = *v4;
    v59 = (_QWORD *)*v4;
    *v4 = 0x8000000000000000;
    v37 = v18;
    v39 = sub_100145264(v58, v18);
    v40 = *(_QWORD *)(v36 + 16);
    v41 = (v38 & 1) == 0;
    v42 = v40 + v41;
    if (__OFADD__(v40, v41))
      goto LABEL_53;
    v43 = v38;
    if (*(_QWORD *)(v36 + 24) >= v42)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1001BD324();
    }
    else
    {
      sub_1001B5A04(v42, isUniquelyReferenced_nonNull_native);
      v44 = sub_100145264(v58, v18);
      if ((v43 & 1) != (v45 & 1))
        goto LABEL_56;
      v39 = v44;
    }
    v9 = v32;
    if ((v43 & 1) != 0)
    {
      v46 = v59[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v46 + 8 * v39));
      *(_QWORD *)(v46 + 8 * v39) = v56;
    }
    else
    {
      sub_1001BC748(v39, v58, v18, v56, v59);
      swift_bridgeObjectRetain(v18);
    }
    v10 = *v4;
    *v4 = v59;
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v10);
    swift_endAccess(v60);
    v7 = v57;
  }
  if (v19 < 0)
    v33 = v19;
  else
    v33 = v19 & 0xFFFFFFFFFFFFFF8;
  v34 = a1;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = _CocoaArrayWrapper.endIndex.getter(v33);
  if (!v20)
    goto LABEL_40;
LABEL_25:
  v55 = v18;
  v22 = 0;
  while (1)
  {
    if ((v19 & 0xC000000000000001) != 0)
    {
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v19);
    }
    else
    {
      if (v22 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_52;
      v25 = *(id *)(v19 + 8 * v22 + 32);
    }
    v26 = v25;
    v27 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    sub_100090EE8(0, &qword_100270168, NSXPCConnection_ptr);
    v28 = a1;
    v29 = v26;
    v30 = static NSObject.== infix(_:_:)(v29, v28);

    if ((v30 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
      v23 = *(_QWORD *)(v60[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v29);
      specialized ContiguousArray._endMutation()(v24);
    }
    ++v22;
    if (v27 == v20)
    {
      v56 = v60[0];
      v4 = v51;
      v32 = _swiftEmptyArrayStorage;
      v18 = v55;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_1001736DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      v22 = v4 & 0xC000000000000001;
      v21 = v4 & 0xFFFFFFFFFFFFFF8;
      while (v22)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
LABEL_9:
        v8 = v7;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_18;
        v10 = v4;
        v11 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        v12 = DockCoreInfo.description.getter();
        v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          v15 = swift_bridgeObjectRelease(a3);
LABEL_14:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v8);
          specialized ContiguousArray._endMutation()(v18);
          goto LABEL_5;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
        v15 = swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
          goto LABEL_14;

LABEL_5:
        v4 = v10;
        ++v6;
        if (v9 == v5)
          return _swiftEmptyArrayStorage;
      }
      if (v6 < *(_QWORD *)(v21 + 16))
        break;
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v5 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v5)
        return _swiftEmptyArrayStorage;
    }
    v7 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10017388C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v7 = result + 40;
    v8 = -(uint64_t)v3;
    v18 = result + 40;
    do
    {
      if (v6 <= v3)
        v9 = v3;
      else
        v9 = v6;
      v10 = -(uint64_t)v9;
      for (i = (_QWORD *)(v7 + 16 * v6++); ; i += 2)
      {
        if (v10 + v6 == 1)
        {
          __break(1u);
          return result;
        }
        v12 = *(i - 1);
        v13 = *i;
        if (v12 != a2 || v13 != a3)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*(i - 1), *i, a2, a3, 0);
          if ((result & 1) == 0)
            break;
        }
        ++v6;
        if (v8 + v6 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain(v13);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1001A5080(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        result = sub_1001A5080(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v12;
      v17[5] = v13;
      v3 = v19;
      v7 = v18;
    }
    while (v8 + v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void sub_1001739F8(uint64_t a1, void *a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  os_unfair_lock_s *v21;
  _BYTE v22[24];

  v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v22, 0, 0);
  v7 = *v6;
  v8 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(v7);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v12)
      goto LABEL_21;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_21;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v12)
          goto LABEL_21;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v11 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_5:
    v16 = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15);
    v17 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v15);
    sub_1000F2F9C(v16, v17, a2);

  }
  v20 = v18 + 3;
  if (v20 >= v12)
  {
LABEL_21:
    swift_release(v7);
    v21 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain(v21);
    os_unfair_lock_unlock(v21 + 4);
    swift_release(v21);
    return;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v12)
      goto LABEL_21;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100173BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100173EAC(unsigned int a1, void *a2)
{
  return sub_100174828(a1, a2, &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, "added first trajectory client, taking transaction");
}

void sub_100173EC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_s *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v26 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v10 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v27 = a1;
  v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, v29, 0, 0);
  v12 = *v11;
  v28 = v12 + 64;
  v13 = 1 << *(_BYTE *)(v12 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v12 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(v12);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v22 >= v16)
      goto LABEL_21;
    v23 = *(_QWORD *)(v28 + 8 * v22);
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_21;
      v23 = *(_QWORD *)(v28 + 8 * v17);
      if (!v23)
      {
        v17 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_21;
        v23 = *(_QWORD *)(v28 + 8 * v17);
        if (!v23)
          break;
      }
    }
LABEL_20:
    v15 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_5:
    v20 = *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * v19);
    v21 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v19);
    sub_1000F0C08(v20, v21, a2, a3, a4, a5);

  }
  v24 = v22 + 3;
  if (v24 >= v16)
  {
LABEL_21:
    swift_release(v12);
    v25 = *(os_unfair_lock_s **)(v27 + v26);
    swift_retain(v25);
    os_unfair_lock_unlock(v25 + 4);
    swift_release(v25);
    return;
  }
  v23 = *(_QWORD *)(v28 + 8 * v24);
  if (v23)
  {
    v17 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v17 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v17 >= v16)
      goto LABEL_21;
    v23 = *(_QWORD *)(v28 + 8 * v17);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001740D4(unsigned int a1, void *a2)
{
  return sub_100174828(a1, a2, &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, "Got first sensor client, taking transaction");
}

uint64_t sub_1001740E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10016F6E4(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10017417C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v23[24];
  _BYTE v24[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, v24, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) && (sub_1001452C8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess(v10, v23, 33, 0);
    v12 = (void *)sub_1001B3E28(a1);
    swift_endAccess(v23);

    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules, v23, 33, 0);
    v13 = sub_1001B4554(a1);
    swift_endAccess(v23);
    swift_bridgeObjectRelease(v13);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  sub_1001633CC();
  v16 = v15;
  v17 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  swift_release(v17);
  if (v14 && !v16)
  {
    v18 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "no more sensor or actuation clients, releasing transaction", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_10016CA18();
  }
  return 1;
}

uint64_t sub_1001743B0(double a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  _QWORD *v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = v6;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = DockCoreInfo.identifier.getter(v15);
  v19 = UUID.description.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v38 = v19;
  v39 = v21;
  swift_bridgeObjectRetain(v21);
  v22._countAndFlagsBits = 45;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23 = v39;
  swift_bridgeObjectRetain(v39);
  v24._countAndFlagsBits = a3;
  v24._object = a4;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v26 = v38;
  v25 = v39;
  v27 = objc_allocWithZone((Class)type metadata accessor for ActuatorFeedback(0));
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a5);
  v28 = (void *)ActuatorFeedback.init(velocities:positions:timestamp:)(a6, a5, a1);
  v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  v30 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock);
  swift_retain(v30);
  os_unfair_lock_lock(v30 + 4);
  swift_release(v30);
  v31 = (_QWORD *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache);
  swift_beginAccess(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache, &v38, 33, 0);
  v32 = v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
  v37 = *v31;
  *v31 = 0x8000000000000000;
  sub_1001BBC60((uint64_t)v32, v26, v25, isUniquelyReferenced_nonNull_native);
  v34 = *v31;
  *v31 = v37;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v34);
  swift_endAccess(&v38);
  v35 = *(os_unfair_lock_s **)(v7 + v29);
  swift_retain(v35);
  os_unfair_lock_unlock(v35 + 4);

  return swift_release(v35);
}

void sub_1001745BC(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t), uint64_t a7, char *a8, double a9)
{
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _BYTE v36[24];

  v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v36, 0, 0);
  v15 = *v14;
  v29 = v15 + 64;
  v16 = 1 << *(_BYTE *)(v15 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v15 + 64);
  v30 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(v15);
  v19 = 0;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_5;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v24 >= v30)
      goto LABEL_21;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v19;
    if (!v25)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_21;
      v25 = *(_QWORD *)(v29 + 8 * v19);
      if (!v25)
      {
        v19 = v24 + 2;
        if (v24 + 2 >= v30)
          goto LABEL_21;
        v25 = *(_QWORD *)(v29 + 8 * v19);
        if (!v25)
          break;
      }
    }
LABEL_20:
    v18 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_5:
    v22 = *(_DWORD *)(*(_QWORD *)(v15 + 48) + 4 * v21);
    v23 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v21);
    sub_1000F1ED0(v22, v23, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, a7, a9, a8);

  }
  v26 = v24 + 3;
  if (v26 >= v30)
  {
LABEL_21:
    swift_release(v15);
    v27 = *(os_unfair_lock_s **)(a1 + v28);
    swift_retain(v27);
    os_unfair_lock_unlock(v27 + 4);
    swift_release(v27);
    return;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v19 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    v19 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v19 >= v30)
      goto LABEL_21;
    v25 = *(_QWORD *)(v29 + 8 * v19);
    ++v26;
    if (v25)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100174814(unsigned int a1, void *a2)
{
  return sub_100174828(a1, a2, &OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, "added first actuation client, taking transaction");
}

uint64_t sub_100174828(unsigned int a1, void *a2, _QWORD *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v24;
  _BYTE v25[24];

  v24 = a4;
  v6 = v4;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v14 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v14);
  os_unfair_lock_lock(v14 + 4);
  swift_release(v14);
  swift_beginAccess(v6 + *a3, v25, 33, 0);
  v15 = a2;
  sub_1001A935C((uint64_t)a2, a1);
  swift_endAccess(v25);
  sub_1001633CC();
  v17 = v16;
  v18 = *(os_unfair_lock_s **)(v6 + v13);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  swift_release(v18);
  if (v17 == 1)
  {
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v9);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v24, v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    sub_10016BF20(1);
  }
  return 1;
}

void sub_1001749F0(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  __n128 v47;
  void *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  void *v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  os_unfair_lock_s *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  os_unfair_lock_s *v94;
  id v95;
  uint64_t v96;
  char *v97;
  __n128 v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  char v119[24];
  uint64_t v120;
  uint64_t v121;
  char v122[32];
  char v123[8];
  char v124[8];

  v2 = v1;
  v104 = type metadata accessor for Logger(0);
  v105 = *(_QWORD *)(v104 - 8);
  v4 = __chkstk_darwin(v104);
  v103 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v96 - v6;
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, v124, 0, 0);
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  v106 = a1;
  if (v11 && (sub_1001452C8(a1), (v12 & 1) != 0))
  {
    swift_beginAccess(v10, v123, 33, 0);
    v13 = (void *)sub_1001B3E28(a1);
    swift_endAccess(v123);

    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules, v119, 0, 0);
    v15 = *v14;
    if (*(_QWORD *)(*v14 + 16) && (v16 = sub_1001452C8(a1), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_bridgeObjectRetain(v18);
    }
    else
    {
      v18 = 0;
    }
    swift_beginAccess(v14, v123, 33, 0);
    v20 = sub_1001B4664(a1);
    swift_endAccess(v123);
    swift_bridgeObjectRelease(v20);
    v19 = 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  sub_1001633CC();
  v22 = v21;
  v23 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v23);
  os_unfair_lock_unlock(v23 + 4);
  swift_release(v23);
  if (v19 && !v22)
  {
    v24 = v104;
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v104);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "no more sensor or actuation clients, releasing transaction", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v24);
    sub_10016CA18();
  }
  if (!v18)
    return;
  v29 = *(_QWORD *)(v18 + 64);
  v113 = v18 + 64;
  v30 = 1 << *(_BYTE *)(v18 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v102 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v111 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  v33 = swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories, v123, 0, 0);
  v34 = 0;
  v117 = 0;
  v114 = (unint64_t)(v30 + 63) >> 6;
  v100 = (char *)&v120 + 4;
  v99 = &v121;
  v33.n128_u64[0] = 67109378;
  v98 = v33;
  v97 = (char *)&type metadata for Any + 8;
  v107 = v2;
  v108 = v8;
  v109 = v18;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v32)
        {
          v35 = __clz(__rbit64(v32));
          v32 &= v32 - 1;
          v36 = v35 | (v34 << 6);
        }
        else
        {
          if (__OFADD__(v34++, 1))
            goto LABEL_73;
          if (v34 >= v114)
          {
LABEL_70:
            swift_release(v18);
            return;
          }
          v38 = *(_QWORD *)(v113 + 8 * v34);
          if (!v38)
          {
            v39 = v34 + 1;
            if (v34 + 1 >= v114)
              goto LABEL_70;
            v38 = *(_QWORD *)(v113 + 8 * v39);
            if (!v38)
            {
              v39 = v34 + 2;
              if (v34 + 2 >= v114)
                goto LABEL_70;
              v38 = *(_QWORD *)(v113 + 8 * v39);
              if (!v38)
              {
                v39 = v34 + 3;
                if (v34 + 3 >= v114)
                  goto LABEL_70;
                v38 = *(_QWORD *)(v113 + 8 * v39);
                if (!v38)
                {
                  while (1)
                  {
                    v34 = v39 + 1;
                    if (__OFADD__(v39, 1))
                      goto LABEL_74;
                    if (v34 >= v114)
                      goto LABEL_70;
                    v38 = *(_QWORD *)(v113 + 8 * v34);
                    ++v39;
                    if (v38)
                      goto LABEL_31;
                  }
                }
              }
            }
            v34 = v39;
          }
LABEL_31:
          v32 = (v38 - 1) & v38;
          v36 = __clz(__rbit64(v38)) + (v34 << 6);
        }
        v40 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v36);
        v41 = *v40;
        v42 = v40[1];
        v43 = *(_QWORD *)(v18 + 56) + 32 * v36;
        v45 = *(_QWORD *)(v43 + 8);
        v44 = *(_QWORD *)(v43 + 16);
        v46 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo(0));
        swift_bridgeObjectRetain_n(v42, 2);
        swift_bridgeObjectRetain(v45);
        v47 = swift_bridgeObjectRetain(v44);
        v48 = (void *)DockCoreInfo.init(uuidString:)(v41, v42, v47);
        if (v48)
          break;
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v45);
        swift_bridgeObjectRelease(v42);
      }
      v112 = v41;
      v115 = v32;
      v116 = v44;
      v49 = v34;
      v50 = v18;
      v51 = v2;
      v52 = v8;
      v53 = v51;
      v54 = *(os_unfair_lock_s **)(v51 + v8);
      v55 = v48;
      swift_retain(v54);
      os_unfair_lock_lock(v54 + 4);
      swift_release(v54);
      v56 = *v111;
      v57 = v55;
      swift_bridgeObjectRetain(v56);
      v58 = v117;
      v60 = (uint64_t)sub_100172594(v59, (uint64_t)v57);
      v117 = v58;
      swift_bridgeObjectRelease(v56);
      v118 = v57;

      if ((unint64_t)v60 >> 62)
        break;
      if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_35;
LABEL_67:
      swift_bridgeObjectRelease(v60);
      v8 = v52;
      v2 = v53;
      v94 = *(os_unfair_lock_s **)(v53 + v8);
      swift_retain(v94);
      os_unfair_lock_unlock(v94 + 4);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v42);
      v95 = v118;

      swift_release(v94);
      v18 = v50;
      v34 = v49;
      v32 = v115;
      v63 = v116;
LABEL_68:
      swift_bridgeObjectRelease(v63);
    }
    if (v60 < 0)
      v92 = v60;
    else
      v92 = v60 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v60);
    v93 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v60);
    if (!v93)
      goto LABEL_67;
    swift_bridgeObjectRetain(v60);
    v62 = (void *)_CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v60);
    if (v62)
      break;
    swift_bridgeObjectRelease(v60);
    v8 = v52;
LABEL_39:
    v2 = v53;
    v18 = v50;
    v34 = v49;
    v63 = v116;
    v64 = *(os_unfair_lock_s **)(v2 + v8);
    swift_retain(v64);
    os_unfair_lock_unlock(v64 + 4);
    v65 = v118;

    swift_release(v64);
    if (!v62)
    {
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v42);

      v32 = v115;
      goto LABEL_68;
    }
    v116 = v45;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v66 = qword_100275638;
    v67 = v62;
    v68 = dispatch thunk of DockCoreAccessory.info.getter(v67);
    v110 = v67;

    v69 = (void *)v68;
    v71 = DockCoreInfo.description.getter(v70);
    v73 = v72;
    v74 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    v75 = *(os_unfair_lock_s **)(v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain(v75);
    os_unfair_lock_lock(v75 + 4);
    swift_release(v75);
    v76 = (uint64_t *)(v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
    swift_beginAccess(v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators, v122, 0, 0);
    v77 = *v76;
    if (!*(_QWORD *)(v77 + 16))
    {
      v81 = v73;
LABEL_52:
      swift_bridgeObjectRelease(v81);
      v80 = 0;
      goto LABEL_53;
    }
    swift_bridgeObjectRetain(v77);
    v78 = sub_100145264(v71, v73);
    if ((v79 & 1) == 0)
    {
      swift_bridgeObjectRelease(v73);
      v81 = v77;
      goto LABEL_52;
    }
    v80 = *(_QWORD *)(*(_QWORD *)(v77 + 56) + 8 * v78);
    swift_retain(v80);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v77);
LABEL_53:
    v8 = v108;
    v82 = *(os_unfair_lock_s **)(v66 + v74);
    swift_retain(v82);
    os_unfair_lock_unlock(v82 + 4);

    swift_release(v82);
    if (v80)
    {
      v2 = v107;
      v18 = v109;
      v83 = v116;
      if (*(_DWORD *)(v80 + 16) == v106)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v103, v102, v104);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRetain(v63);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.default.getter(v85);
        if (os_log_type_enabled(v85, v86))
        {
          v87 = swift_slowAlloc(18, -1);
          v101 = swift_slowAlloc(32, -1);
          v121 = v101;
          *(_DWORD *)v87 = v98.n128_u32[0];
          LODWORD(v120) = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v100, v87 + 4, v87 + 8);
          *(_WORD *)(v87 + 8) = 2080;
          swift_bridgeObjectRetain(v42);
          v120 = sub_1000906BC(v112, v42, &v121);
          v8 = v108;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v99, v87 + 10, v87 + 18);
          swift_bridgeObjectRelease_n(v63, 2);
          swift_bridgeObjectRelease_n(v83, 2);
          swift_bridgeObjectRelease_n(v42, 3);
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Client %d disconnected while animator active for %s, stopping velocity", (uint8_t *)v87, 0x12u);
          v88 = v101;
          swift_arrayDestroy(v101, 1, v97);
          swift_slowDealloc(v88, -1, -1);
          v89 = v87;
          v18 = v109;
          swift_slowDealloc(v89, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v63, 2);
          swift_bridgeObjectRelease_n(v83, 2);
          swift_bridgeObjectRelease_n(v42, 2);
        }
        (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
        v32 = v115;
        v90 = v118;
        v91 = v110;
        sub_10015F3DC(0);
        swift_retain(v80);
        sub_1000BA9C4(1, 0.0);
        swift_release_n(v80, 2);

      }
      else
      {
        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v42);

        swift_release(v80);
        v32 = v115;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v116);
      swift_bridgeObjectRelease(v42);

      v2 = v107;
      v18 = v109;
      v32 = v115;
    }
  }
LABEL_35:
  if ((v60 & 0xC000000000000001) != 0)
  {
    v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v60);
    goto LABEL_38;
  }
  if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v61 = *(id *)(v60 + 32);
LABEL_38:
    v62 = v61;
    v8 = v52;
    swift_bridgeObjectRelease(v60);
    goto LABEL_39;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

uint64_t sub_1001754E8(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _BYTE v22[24];
  _BYTE v23[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, v23, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) && (sub_1001452C8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess(v10, v22, 33, 0);
    v12 = (void *)sub_1001B3E28(a1);
    swift_endAccess(v22);

    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  sub_1001633CC();
  v15 = v14;
  v16 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v16);
  os_unfair_lock_unlock(v16 + 4);
  swift_release(v16);
  if (v13 && !v15)
  {
    v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "no more clients, releasing transaction", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_10016CA18();
  }
  return 1;
}

void *sub_1001756E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = DockCoreInfo.identifier.getter(v9);
  v13 = UUID.description.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v33 = v13;
  v34 = v15;
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = 45;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17 = v34;
  swift_bridgeObjectRetain(v34);
  v18._countAndFlagsBits = a2;
  v18._object = a3;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19 = v33;
  v20 = v34;
  v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  v22 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock);
  swift_retain(v22);
  os_unfair_lock_lock(v22 + 4);
  swift_release(v22);
  v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache);
  swift_beginAccess(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache, &v33, 0, 0);
  v24 = *v23;
  if (!*(_QWORD *)(v24 + 16))
  {
    v29 = v20;
LABEL_6:
    swift_bridgeObjectRelease(v29);
    v27 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v24);
  v25 = sub_100145264(v19, v20);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease(v20);
    v29 = v24;
    goto LABEL_6;
  }
  v27 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v25);
  v28 = v27;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v24);
LABEL_7:
  v30 = *(os_unfair_lock_s **)(v4 + v21);
  swift_retain(v30);
  os_unfair_lock_unlock(v30 + 4);
  swift_release(v30);
  return v27;
}

uint64_t sub_1001758A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100175AE4(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000F4420);
}

void sub_1001758B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, _QWORD *a8)
{
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v38[24];

  v33 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v34 = a3;
  v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v38, 0, 0);
  v15 = *v14;
  v16 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v15 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(v15);
  v21 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_21;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v20)
      goto LABEL_27;
    v26 = *(_QWORD *)(v16 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v20)
        goto LABEL_27;
      v26 = *(_QWORD *)(v16 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v20)
          goto LABEL_27;
        v26 = *(_QWORD *)(v16 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v19 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_21:
    v28 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v24);
    v29 = v28[1];
    v30 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v24);
    v31 = *v28 == a1 && v29 == a2;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, a1, a2, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain(v30);
      sub_1000F482C(v22, a4, a5, a6, a7, a8);
      swift_bridgeObjectRelease(v30);
    }
  }
  v27 = v25 + 3;
  if (v27 >= v20)
  {
LABEL_27:
    swift_release(v15);
    v32 = *(os_unfair_lock_s **)(v34 + v33);
    swift_retain(v32);
    os_unfair_lock_unlock(v32 + 4);
    swift_release(v32);
    return;
  }
  v26 = *(_QWORD *)(v16 + 8 * v27);
  if (v26)
  {
    v21 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v20)
      goto LABEL_27;
    v26 = *(_QWORD *)(v16 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100175AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100175AE4(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000F4D00);
}

uint64_t sub_100175AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v39[24];

  v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v35 = a3;
  v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v39, 0, 0);
  v15 = *v14;
  v16 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v15 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  result = swift_bridgeObjectRetain(v15);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_21;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v20)
      goto LABEL_27;
    v27 = *(_QWORD *)(v16 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v20)
        goto LABEL_27;
      v27 = *(_QWORD *)(v16 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v20)
          goto LABEL_27;
        v27 = *(_QWORD *)(v16 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_20:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_21:
    v29 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v25);
    v30 = v29[1];
    v31 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v25);
    if (*v29 != a1 || v30 != a2)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, a1, a2, 0);
      if ((result & 1) == 0)
        continue;
    }
    v23 = swift_bridgeObjectRetain(v31);
    a8(v23, a4, a5, a6, a7);
    result = swift_bridgeObjectRelease(v31);
  }
  v28 = v26 + 3;
  if (v28 >= v20)
  {
LABEL_27:
    swift_release(v15);
    v33 = *(os_unfair_lock_s **)(v35 + v34);
    swift_retain(v33);
    os_unfair_lock_unlock(v33 + 4);
    return swift_release(v33);
  }
  v27 = *(_QWORD *)(v16 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_20;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v20)
      goto LABEL_27;
    v27 = *(_QWORD *)(v16 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_100175D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6, double a7, double a8, double a9, double a10)
{
  os_unfair_lock_s *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[24];

  v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v19 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v19);
  os_unfair_lock_lock(v19 + 4);
  swift_release(v19);
  v40 = a3;
  v20 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v42, 0, 0);
  v21 = *v20;
  v22 = v21 + 64;
  v23 = 1 << *(_BYTE *)(v21 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v21 + 64);
  v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  v27 = 0;
  while (1)
  {
    if (v25)
    {
      v29 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v30 = v29 | (v27 << 6);
      goto LABEL_21;
    }
    v31 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v31 >= v26)
      goto LABEL_27;
    v32 = *(_QWORD *)(v22 + 8 * v31);
    ++v27;
    if (!v32)
    {
      v27 = v31 + 1;
      if (v31 + 1 >= v26)
        goto LABEL_27;
      v32 = *(_QWORD *)(v22 + 8 * v27);
      if (!v32)
      {
        v27 = v31 + 2;
        if (v31 + 2 >= v26)
          goto LABEL_27;
        v32 = *(_QWORD *)(v22 + 8 * v27);
        if (!v32)
          break;
      }
    }
LABEL_20:
    v25 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v27 << 6);
LABEL_21:
    v34 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v30);
    v35 = v34[1];
    v36 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v30);
    v37 = *v34 == a1 && v35 == a2;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v35, a1, a2, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain(v36);
      sub_1000F545C(v28, a4, a5, a6, a7, a8, a9, a10);
      swift_bridgeObjectRelease(v36);
    }
  }
  v33 = v31 + 3;
  if (v33 >= v26)
  {
LABEL_27:
    swift_release(v21);
    v38 = *(os_unfair_lock_s **)(v40 + v39);
    swift_retain(v38);
    os_unfair_lock_unlock(v38 + 4);
    swift_release(v38);
    return;
  }
  v32 = *(_QWORD *)(v22 + 8 * v33);
  if (v32)
  {
    v27 = v33;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v27 >= v26)
      goto LABEL_27;
    v32 = *(_QWORD *)(v22 + 8 * v27);
    ++v33;
    if (v32)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100175F5C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[24];
  _BYTE v32[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients, v32, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) && (sub_1001452C8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess(v10, v31, 33, 0);
    v12 = (void *)sub_1001B470C(a1);
    v14 = v13;
    swift_endAccess(v31);
    sub_100177A08(v12, v14);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  sub_1001633CC();
  v17 = v16;
  v18 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  swift_release(v18);
  if (v15 && !v17)
  {
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "no more clients, releasing transaction", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v23 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
    v24 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer);
    if (v24)
    {
      v25 = v24;
      dispatch thunk of RepeatingTimer.cancel()(v25, v26, v27, v28, v29);

      v24 = *(void **)(v2 + v23);
    }
    *(_QWORD *)(v2 + v23) = 0;

    sub_10016CA18();
  }
  return 1;
}

uint64_t sub_10017618C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE v24[24];
  _BYTE v25[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients, v25, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) && (sub_1001452C8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess(v10, v24, 33, 0);
    v12 = (void *)sub_1001B4718(a1);
    v14 = v13;
    swift_endAccess(v24);
    sub_100177A08(v12, v14);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  sub_1001633CC();
  v17 = v16;
  v18 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  swift_release(v18);
  if (v15 && !v17)
  {
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "no more clients, releasing transaction", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_10016CA18();
  }
  return 1;
}

void *sub_100176390(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1000E9698(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

void *sub_1001764F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = v2;
      v8 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v4);
      v9 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v8);
      v10 = static NSObject.== infix(_:_:)(v8, v9);

      if ((v10 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v5;
      }

      ++v3;
      v2 = v7;
      if (v6 == v7)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

char *sub_100176664(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_1000EA030(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[24 * a1 + 32];
    v15 = &v4[24 * a2 + 32];
    if (a1 != a2 || result >= &v15[24 * v14])
      result = (char *)memmove(result, v15, 24 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001767C4(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE v24[24];
  _BYTE v25[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v9);
  os_unfair_lock_lock(v9 + 4);
  swift_release(v9);
  v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients, v25, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) && (sub_1001452C8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess(v10, v24, 33, 0);
    v12 = (void *)sub_1001B3E28(a1);
    swift_endAccess(v24);

    swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules, v24, 33, 0);
    sub_1001B3EBC(a1);
    v14 = v13;
    swift_endAccess(v24);
    swift_bridgeObjectRelease(v14);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  sub_1001633CC();
  v17 = v16;
  v18 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain(v18);
  os_unfair_lock_unlock(v18 + 4);
  swift_release(v18);
  if (v15 && !v17)
  {
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "no more long running clients, releasing transaction", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_10016CA18();
  }
  return 1;
}

void sub_1001769F8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t a6, unint64_t a7, double a8, double a9)
{
  os_unfair_lock_s *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v49[4];
  void *v50;
  _BYTE v51[32];

  v38 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v15 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain(a7);
  swift_retain(v15);
  os_unfair_lock_lock(v15 + 4);
  swift_release(v15);
  v39 = a3;
  v16 = (_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v51, 0, 0);
  v40 = *v16 + 64;
  v17 = 1 << *(_BYTE *)(*v16 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(*v16 + 64);
  v41 = (unint64_t)(v17 + 63) >> 6;
  v44 = *v16;
  swift_bridgeObjectRetain(*v16);
  v20 = 0;
  v42 = a1;
  v43 = a2;
  while (1)
  {
    do
    {
      if (v19)
      {
        v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v22 = v21 | (v20 << 6);
      }
      else
      {
        v23 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_47;
        if (v23 >= v41)
          goto LABEL_44;
        v24 = *(_QWORD *)(v40 + 8 * v23);
        ++v20;
        if (!v24)
        {
          v20 = v23 + 1;
          if (v23 + 1 >= v41)
            goto LABEL_44;
          v24 = *(_QWORD *)(v40 + 8 * v20);
          if (!v24)
          {
            v20 = v23 + 2;
            if (v23 + 2 >= v41)
              goto LABEL_44;
            v24 = *(_QWORD *)(v40 + 8 * v20);
            if (!v24)
            {
              v25 = v23 + 3;
              if (v25 >= v41)
                goto LABEL_44;
              v24 = *(_QWORD *)(v40 + 8 * v25);
              v20 = v25;
              if (!v24)
              {
                while (1)
                {
                  v20 = v25 + 1;
                  if (__OFADD__(v25, 1))
                    goto LABEL_48;
                  if (v20 >= v41)
                    break;
                  v24 = *(_QWORD *)(v40 + 8 * v20);
                  ++v25;
                  if (v24)
                    goto LABEL_19;
                }
LABEL_44:
                swift_release(v44);
                v37 = *(os_unfair_lock_s **)(v39 + v38);
                swift_retain(v37);
                os_unfair_lock_unlock(v37 + 4);
                swift_bridgeObjectRelease(a7);
                swift_release(v37);
                return;
              }
            }
          }
        }
LABEL_19:
        v19 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v20 << 6);
      }
      v26 = (_QWORD *)(*(_QWORD *)(v44 + 48) + 16 * v22);
      v27 = v26[1];
      v28 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v22);
      v29 = *v26 == a1 && v27 == a2;
    }
    while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, a1, a2, 0) & 1) == 0);
    v45 = v19;
    if ((unint64_t)v28 >> 62)
      break;
    v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v28, 2);
    swift_bridgeObjectRetain(a7);
    if (v30)
      goto LABEL_27;
LABEL_4:
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease_n(v28, 2);
    a1 = v42;
    a2 = v43;
    v19 = v45;
  }
  if (v28 < 0)
    v36 = v28;
  else
    v36 = v28 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v28, 2);
  swift_bridgeObjectRetain(a7);
  v30 = _CocoaArrayWrapper.endIndex.getter(v36);
  if (!v30)
    goto LABEL_4;
LABEL_27:
  if (v30 < 1)
    goto LABEL_46;
  v31 = 0;
  while (2)
  {
    if ((v28 & 0xC000000000000001) != 0)
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v28);
    else
      v32 = *(id *)(v28 + 8 * v31 + 32);
    v33 = v32;
    v34 = objc_msgSend(v32, "remoteObjectProxy");
    _bridgeAnyObjectToAny(_:)(v49);
    swift_unknownObjectRelease(v34);
    v35 = sub_10009061C(&qword_10026E078);
    if ((swift_dynamicCast(&v50, v49, (char *)&type metadata for Any + 8, v35, 6) & 1) == 0)
    {
      v50 = 0;
LABEL_30:

      goto LABEL_31;
    }
    if (!v50)
      goto LABEL_30;
    v49[0] = v50;
    swift_unknownObjectRetain(v50);
    sub_10019A0B0(v49, a8, a9, a5, a6, a7);

    swift_unknownObjectRelease(v49[0]);
    if (!__OFADD__(*a4, 1))
    {
      ++*a4;
LABEL_31:
      ++v31;
      swift_unknownObjectRelease(v50);
      if (v30 == v31)
        goto LABEL_4;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

void sub_100176DC8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t a6, unint64_t a7, double a8, double a9, double a10, double a11)
{
  os_unfair_lock_s *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v44[24];

  v40 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v20 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain(a7);
  swift_retain(v20);
  os_unfair_lock_lock(v20 + 4);
  swift_release(v20);
  v41 = a3;
  v21 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v44, 0, 0);
  v22 = *v21;
  v23 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v22 + 64);
  v27 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain(v22);
  v28 = 0;
  while (1)
  {
    if (v26)
    {
      v30 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v31 = v30 | (v28 << 6);
      goto LABEL_21;
    }
    v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v32 >= v27)
      goto LABEL_27;
    v33 = *(_QWORD *)(v23 + 8 * v32);
    ++v28;
    if (!v33)
    {
      v28 = v32 + 1;
      if (v32 + 1 >= v27)
        goto LABEL_27;
      v33 = *(_QWORD *)(v23 + 8 * v28);
      if (!v33)
      {
        v28 = v32 + 2;
        if (v32 + 2 >= v27)
          goto LABEL_27;
        v33 = *(_QWORD *)(v23 + 8 * v28);
        if (!v33)
          break;
      }
    }
LABEL_20:
    v26 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_21:
    v35 = (_QWORD *)(*(_QWORD *)(v22 + 48) + 16 * v31);
    v36 = v35[1];
    v37 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v31);
    v38 = *v35 == a1 && v36 == a2;
    if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, a1, a2, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(v37);
      sub_10019D9E4(v29, a4, a8, a9, a10, a11, a5, a6, a7);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(a7);
    }
  }
  v34 = v32 + 3;
  if (v34 >= v27)
  {
LABEL_27:
    swift_release(v22);
    v39 = *(os_unfair_lock_s **)(v41 + v40);
    swift_retain(v39);
    os_unfair_lock_unlock(v39 + 4);
    swift_bridgeObjectRelease(a7);
    swift_release(v39);
    return;
  }
  v33 = *(_QWORD *)(v23 + 8 * v34);
  if (v33)
  {
    v28 = v34;
    goto LABEL_20;
  }
  while (1)
  {
    v28 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v28 >= v27)
      goto LABEL_27;
    v33 = *(_QWORD *)(v23 + 8 * v28);
    ++v34;
    if (v33)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

void sub_100177040(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v38[24];

  v33 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain(a7);
  swift_retain(v13);
  os_unfair_lock_lock(v13 + 4);
  swift_release(v13);
  v34 = a3;
  v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v38, 0, 0);
  v15 = *v14;
  v16 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v15 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(v15);
  v21 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_21;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v20)
      goto LABEL_27;
    v26 = *(_QWORD *)(v16 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v20)
        goto LABEL_27;
      v26 = *(_QWORD *)(v16 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v20)
          goto LABEL_27;
        v26 = *(_QWORD *)(v16 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v19 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_21:
    v28 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v24);
    v29 = v28[1];
    v30 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v24);
    v31 = *v28 == a1 && v29 == a2;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, a1, a2, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(v30);
      sub_10019DD80(v22, a4, a5, a6, a7, a8);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(a7);
    }
  }
  v27 = v25 + 3;
  if (v27 >= v20)
  {
LABEL_27:
    swift_release(v15);
    v32 = *(os_unfair_lock_s **)(v34 + v33);
    swift_retain(v32);
    os_unfair_lock_unlock(v32 + 4);
    swift_bridgeObjectRelease(a7);
    swift_release(v32);
    return;
  }
  v26 = *(_QWORD *)(v16 + 8 * v27);
  if (v26)
  {
    v21 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v20)
      goto LABEL_27;
    v26 = *(_QWORD *)(v16 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

void sub_100177288(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, __n128), uint64_t a5, _QWORD *a6)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t i;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD v41[4];
  uint64_t v42;
  char v43[24];

  v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v8 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v8);
  os_unfair_lock_lock(v8 + 4);
  swift_release(v8);
  v33 = a3;
  v9 = (_QWORD *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients, v43, 0, 0);
  v34 = *v9 + 64;
  v10 = 1 << *(_BYTE *)(*v9 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(*v9 + 64);
  v35 = (unint64_t)(v10 + 63) >> 6;
  v36 = *v9;
  swift_bridgeObjectRetain(*v9);
  for (i = 0; ; i = v37)
  {
    do
    {
      if (v12)
      {
        v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v15 = v14 | (i << 6);
      }
      else
      {
        v16 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_47;
        if (v16 >= v35)
          goto LABEL_44;
        v17 = *(_QWORD *)(v34 + 8 * v16);
        ++i;
        if (!v17)
        {
          i = v16 + 1;
          if (v16 + 1 >= v35)
            goto LABEL_44;
          v17 = *(_QWORD *)(v34 + 8 * i);
          if (!v17)
          {
            i = v16 + 2;
            if (v16 + 2 >= v35)
              goto LABEL_44;
            v17 = *(_QWORD *)(v34 + 8 * i);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v35)
                goto LABEL_44;
              v17 = *(_QWORD *)(v34 + 8 * v18);
              i = v18;
              if (!v17)
              {
                while (1)
                {
                  i = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_48;
                  if (i >= v35)
                    break;
                  v17 = *(_QWORD *)(v34 + 8 * i);
                  ++v18;
                  if (v17)
                    goto LABEL_19;
                }
LABEL_44:
                swift_release(v36);
                v31 = *(os_unfair_lock_s **)(v33 + v32);
                swift_retain(v31);
                os_unfair_lock_unlock(v31 + 4);
                swift_release(v31);
                return;
              }
            }
          }
        }
LABEL_19:
        v12 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (i << 6);
      }
      v19 = (_QWORD *)(*(_QWORD *)(v36 + 48) + 16 * v15);
      v20 = v19[1];
      v21 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v15);
      v22 = *v19 == a1 && v20 == a2;
    }
    while (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a1, a2, 0) & 1) == 0);
    v37 = i;
    if ((unint64_t)v21 >> 62)
      break;
    v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v21, 2);
    if (v23)
      goto LABEL_27;
LABEL_4:
    swift_bridgeObjectRelease_n(v21, 2);
  }
  if (v21 < 0)
    v30 = v21;
  else
    v30 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v21, 2);
  v23 = _CocoaArrayWrapper.endIndex.getter(v30);
  if (!v23)
    goto LABEL_4;
LABEL_27:
  if (v23 < 1)
    goto LABEL_46;
  v24 = 0;
  while (2)
  {
    if ((v21 & 0xC000000000000001) != 0)
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v21);
    else
      v25 = *(id *)(v21 + 8 * v24 + 32);
    v26 = v25;
    v27 = objc_msgSend(v25, "remoteObjectProxy", v32);
    _bridgeAnyObjectToAny(_:)(v41);
    swift_unknownObjectRelease(v27);
    v28 = sub_10009061C(&qword_10026E078);
    if ((swift_dynamicCast(&v42, v41, (char *)&type metadata for Any + 8, v28, 6) & 1) == 0)
    {
      v42 = 0;
LABEL_30:

      goto LABEL_31;
    }
    if (!v42)
      goto LABEL_30;
    v41[0] = v42;
    v29 = swift_unknownObjectRetain(v42);
    a4(v41, v29);

    swift_unknownObjectRelease(v41[0]);
    if (!__OFADD__(*a6, 1))
    {
      ++*a6;
LABEL_31:
      ++v24;
      swift_unknownObjectRelease(v42);
      if (v23 == v24)
        goto LABEL_4;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

uint64_t sub_100177608()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017762C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001694AC(a1, v1);
}

uint64_t sub_100177638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100177648(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100177650()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100177678(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(char *, uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(char *, uint64_t *))(v2 + 16);
  v6 = a1;
  v5 = a2;
  return v3(&v6, &v5);
}

uint64_t sub_1001776B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1001776E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_100177714()
{
  uint64_t v0;

  return sub_1001637E4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10017771C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100177750(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10027017C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10009B7AC;
  return sub_1001638B0(a1, v4, v5, v7, v6);
}

uint64_t sub_1001777C8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100177804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_1002701A4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10009B0EC;
  return sub_1001613A0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100177894()
{
  return sub_100177A4C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_1001778AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc(dword_1002701C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10009B7AC;
  v5[2] = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_100270234);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1000F35C4;
  return sub_100179D80(v4);
}

uint64_t sub_10017792C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100177950()
{
  uint64_t v0;

  sub_10015F390(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10017795C()
{
  uint64_t v0;

  sub_10015EA84(v0, 2, 0);
}

void sub_10017797C()
{
  uint64_t v0;

  sub_10015EA84(v0, 1, 1);
}

uint64_t sub_10017799C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1001779D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10015D800(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(_QWORD, _QWORD))(v2 + 40), *(_QWORD *)(v2 + 48));
}

Swift::Int sub_1001779E4()
{
  uint64_t v0;

  return sub_10015CF60(*(_QWORD *)(v0 + 16));
}

Swift::Int sub_1001779F0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10015D074(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001779F8(uint64_t result, uint64_t a2)
{
  if (result != 1)
    return sub_1000B1410(result, a2);
  return result;
}

void sub_100177A08(void *a1, void *a2)
{
  if (a2)
  {

  }
}

uint64_t sub_100177A34()
{
  return sub_100177A4C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100177A4C(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 32));
  return swift_deallocObject(v3, a3, 7);
}

void sub_100177A94()
{
  uint64_t v0;

  sub_10015C70C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100177ABC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

id sub_100177AF8()
{
  uint64_t v0;

  return sub_10015B9B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100177B08(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100177B2C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10015BF40(a1, a2, v2);
}

void sub_100177B38()
{
  uint64_t v0;

  sub_10015C308(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100177B40()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100177B64(uint64_t a1)
{
  uint64_t v1;

  return sub_10015AE90(a1, v1);
}

void *sub_100177BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  void *v13;

  v2 = a2;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_100145484(a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v8);
        v10 = v7;
        return v7;
      }
    }
    return 0;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = swift_retain(a1);
  v5 = __CocoaDictionary.lookup(_:)(v4, v2);
  swift_release(a1);
  if (!v5)
    return 0;
  v12 = v5;
  v6 = sub_100090EE8(0, (unint64_t *)&qword_10026C7E0, UARPAccessory_ptr);
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v13;
  swift_unknownObjectRelease(v5);
  return v7;
}

void *sub_100177CC8(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t updated;
  void *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  void *v13;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_1001454E8((uint64_t)a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v8);
        v10 = v7;
        return v7;
      }
    }
    return 0;
  }
  if (a2 < 0)
    v3 = a2;
  else
    v3 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = a1;
  v5 = __CocoaDictionary.lookup(_:)(v4, v3);

  if (!v5)
    return 0;
  v12 = v5;
  updated = type metadata accessor for AccessoryFirmwareUpdateSession(0);
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, updated, 7);
  v7 = v13;
  swift_unknownObjectRelease(v5);
  return v7;
}

void sub_100177D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16))
  {
    v3 = sub_100145580(a1);
    if ((v4 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  }
}

void sub_100177DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x100177F18);
}

uint64_t sub_100177F4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_100090EE8(0, &qword_1002706E0, off_100235E58);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t *sub_100177FD8@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_100177FF0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

_QWORD *sub_100177FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v4 = v3;
  v37 = a2;
  v38 = a3;
  v36 = a1;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = 0;
  v4[4] = 0;
  v35 = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v35);
  v39 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10009061C(&qword_10026D000);
  v17 = sub_1000D5BAC((unint64_t *)&qword_10026C540, &qword_10026D000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v16, v17, v9, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  v4[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100202170, v14, v11, v8, 0);
  Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x726F737365636361, 0xE900000000000079);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager) = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
  v18 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  *v18 = 0;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = 2;
  v18[5] = 0;
  v18[6] = 0;
  v18[4] = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader) = 0;
  v19 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  *v19 = 0;
  v19[1] = 0;
  v20 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  *v20 = 0;
  v20[1] = 0;
  v21 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  *v21 = 0;
  v21[1] = 0;
  v22 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  *v22 = 0;
  v22[1] = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = 1;
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 0;
  v23 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap;
  *(_QWORD *)((char *)v4 + v23) = sub_1001B19FC((uint64_t)_swiftEmptyArrayStorage);
  v24 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock;
  v25 = sub_10009061C((uint64_t *)&unk_10026C7B0);
  v26 = swift_allocObject(v25, 20, 7);
  *(_DWORD *)(v26 + 16) = 0;
  *(_QWORD *)((char *)v4 + v24) = v26;
  v27 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  *(_QWORD *)((char *)v4 + v27) = sub_1001C1EF4((uint64_t)_swiftEmptyArrayStorage);
  v28 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  *v29 = 0;
  v29[1] = 0;
  Date.init()();
  *((_BYTE *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 0;
  v30 = (void *)v4[2];
  v4[2] = v36;

  v31 = (void *)v4[4];
  v32 = v38;
  v4[3] = v37;
  v4[4] = v32;

  return v4;
}

void sub_1001783A4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  _QWORD *v22;
  double v23;
  Class isa;
  id v25;
  id v26;
  _BYTE v27[3];
  _BYTE v28[5];
  uint64_t v29;
  unint64_t v30;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == *(_QWORD *)(a2 + 16))
  {
    v6 = *(void **)(v4 + 32);
    if (v6)
    {
      v11 = objc_opt_self(_HAPAccessoryServerBTLE200, a2);
      v12 = swift_dynamicCastObjCClass(v6, v11);
      if (v12)
      {
        v13 = (void *)v12;
        v26 = v6;
        v14 = objc_msgSend(v13, "hapCharacteristicForCBCharacteristic:", a4);
        if (v14)
        {
          v25 = v14;
          if (*(_BYTE *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) == 1)
          {
            if ((a3 & 0x100) != 0)
              v15 = *(_BYTE *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader);
            else
              v15 = a3;
            v16 = sub_10009061C(&qword_10026BF40);
            v17 = swift_allocObject(v16, 33, 7);
            *(_OWORD *)(v17 + 16) = xmmword_1001DE690;
            *(_BYTE *)(v17 + 32) = v15;
            v18 = sub_1000EAC28(v17);
            v20 = v19;
            swift_bridgeObjectRelease(v17);
            v29 = v18;
            v30 = v20;
            if (v5)
            {
              v21 = (double *)(a2 + 32);
              v22 = (_QWORD *)(a1 + 32);
              while (1)
              {
                v23 = *v21 * 1000.0;
                if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
                {
                  __break(1u);
LABEL_24:
                  __break(1u);
LABEL_25:
                  __break(1u);
LABEL_26:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
                  goto LABEL_28;
                }
                if (v23 <= -32769.0)
                  goto LABEL_24;
                if (v23 >= 32768.0)
                  goto LABEL_25;
                if ((*v22 & 0x8000000000000000) != 0)
                  goto LABEL_26;
                if (*v22 >= 0x100uLL)
                  break;
                v27[0] = *v22;
                v27[1] = (unsigned __int16)(int)v23 >> 8;
                v27[2] = (int)v23;
                Data._Representation.append(contentsOf:)(v27, v28);
                ++v21;
                ++v22;
                if (!--v5)
                {
                  v18 = v29;
                  v20 = v30;
                  goto LABEL_21;
                }
              }
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_28:
              __break(1u);
            }
            else
            {
LABEL_21:
              sub_10009B27C(v18, v20);
              isa = Data._bridgeToObjectiveC()().super.isa;
              sub_10009B2FC(v18, v20);
              objc_msgSend(v13, "writeWithoutResponse:toCharacteristic:", isa, v25);

              sub_10009B2FC(v18, v20);
            }
          }
          else
          {

          }
        }
        else
        {

        }
      }
    }
  }
}

void sub_1001786A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _OWORD v33[2];
  _BYTE v34[24];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 || !a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
    swift_errorRetain(a2);
    v15 = swift_errorRetain(a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v39[0] = v19;
      *(_DWORD *)v18 = 136315138;
      v32 = v18 + 4;
      *(_QWORD *)&v36 = a2;
      swift_errorRetain(a2);
      v20 = sub_10009061C(&qword_10026E070);
      v21 = String.init<A>(describing:)(&v36, v20);
      v23 = v22;
      *(_QWORD *)&v36 = sub_1000906BC(v21, v22, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v32, v18 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to read characteristic: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v32 = a1;
    v12 = objc_msgSend(v32, "metadata");

    if (!v12)
    {

      return;
    }
    v13 = objc_msgSend(v32, "value");
    if (v13)
    {
      v14 = v13;
      _bridgeAnyObjectToAny(_:)(v33);
      swift_unknownObjectRelease(v14);
    }
    else
    {
      memset(v33, 0, sizeof(v33));
    }
    sub_10009AEEC((uint64_t)v33, (uint64_t)v34);
    if (v35)
    {
      v24 = sub_10009061C(&qword_100270708);
      if ((swift_dynamicCast(&v36, v34, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v37 + 1))
        {
          sub_10009B340(&v36, (uint64_t)v39);
          v25 = v40;
          v26 = v41;
          sub_10009B038(v39, v40);
          v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
          v29 = v28;

          swift_beginAccess(a4 + 16, &v36, 1, 0);
          v30 = *(_QWORD *)(a4 + 24);
          *(_QWORD *)(a4 + 16) = v27;
          *(_QWORD *)(a4 + 24) = v29;
          swift_bridgeObjectRelease(v30);
          sub_100090E88(v39);
          return;
        }
      }
      else
      {
        v38 = 0;
        v36 = 0u;
        v37 = 0u;
      }
    }
    else
    {
      sub_10009B2C0((uint64_t)v34, &qword_10026E5F0);
      v36 = 0u;
      v37 = 0u;
      v38 = 0;
    }

    sub_10009B2C0((uint64_t)&v36, &qword_100270700);
  }
}

void sub_100178A2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void), uint64_t a6, NSObject *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  _QWORD v67[3];
  char v68[8];
  uint64_t v69;
  uint64_t v70;

  v13 = type metadata accessor for Logger(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v19 = (char *)&v61 - v17;
  if (a2)
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v66 = v18;
    v20((char *)&v61 - v17, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
    v21 = a4;
    swift_errorRetain(a2);
    v22 = v21;
    v23 = swift_errorRetain(a2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc(22, -1);
      v65 = a7;
      v28 = v27;
      v63 = swift_slowAlloc(64, -1);
      v70 = v63;
      *(_DWORD *)v28 = 136315394;
      v61 = (uint8_t *)(v28 + 4);
      v29 = objc_msgSend(v22, "UUIDString");
      LODWORD(v62) = v26;
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v64 = v13;
      v32 = v31;
      v34 = v33;

      v69 = sub_1000906BC(v32, v34, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v61, v28 + 12);

      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v28 + 12) = 2080;
      swift_getErrorValue(a2, v68, v67);
      v35 = Error.localizedDescription.getter(v67[1], v67[2]);
      v37 = v36;
      v69 = sub_1000906BC(v35, v36, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v62, "Error reading characteristic %s: %s", (uint8_t *)v28, 0x16u);
      v38 = v63;
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      v39 = v28;
      a7 = v65;
      swift_slowDealloc(v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v64);
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v13);
    }
    v45 = a2;
LABEL_15:
    ((void (*)(_QWORD, uint64_t))a5)(0, v45);
LABEL_16:
    dispatch_group_leave(a7);
    return;
  }
  if (!a1)
  {
    v46 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
    v47 = a4;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v66 = v46;
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v70 = v63;
      v65 = a7;
      *(_DWORD *)v50 = 136315138;
      v51 = v50 + 12;
      v61 = v50 + 4;
      v62 = v50;
      v52 = objc_msgSend(v47, "UUIDString");
      v64 = v13;
      v53 = v52;
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v56 = v55;

      v69 = sub_1000906BC(v54, v56, &v70);
      v57 = v51;
      a7 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v61, v57);

      swift_bridgeObjectRelease(v56);
      v58 = v62;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error reading characteristic %s: no results returned!", v62, 0xCu);
      v59 = v63;
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v64);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v13);
    }
    v45 = 0;
    goto LABEL_15;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v40 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v40)
      goto LABEL_7;
LABEL_26:
    swift_bridgeObjectRelease(a1);
    goto LABEL_16;
  }
  if (a1 >= 0)
    v60 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v60 = a1;
  swift_bridgeObjectRetain(a1);
  v40 = _CocoaArrayWrapper.endIndex.getter(v60);
  if (!v40)
    goto LABEL_26;
LABEL_7:
  v65 = a7;
  if (v40 >= 1)
  {
    v41 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, a1);
      else
        v42 = *(id *)(a1 + 8 * v41 + 32);
      v43 = v42;
      ++v41;
      v44 = objc_msgSend(v42, "characteristic");
      a5();

    }
    while (v40 != v41);
    swift_bridgeObjectRelease(a1);
    a7 = v65;
    goto LABEL_16;
  }
  __break(1u);
}

void sub_100178F98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a4 && a3 >> 60 != 15)
    __asm { BR              X10 }
}

uint64_t sub_100179108()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  return swift_task_switch(sub_100179178, 0, 0);
}

uint64_t sub_100179178()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[8];
  v2 = swift_task_alloc(32);
  v0[13] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 4;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v3;
  v4 = sub_10009061C(&qword_10026E070);
  *v3 = v0;
  v3[1] = sub_10017922C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x8000000100202140, sub_100185744, v2, v4);
}

uint64_t sub_10017922C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100179288, 0, 0);
}

uint64_t sub_100179288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 16);
  if (!v1)
  {
    v17 = v4(*(_QWORD *)(v0 + 88), v2, v3);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Issued accessory start feedback!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 72);

    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v21;
    goto LABEL_8;
  }
  v4(*(_QWORD *)(v0 + 96), v2, v3);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  if (!v8)
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v24 = v9;
LABEL_8:
    v23(v24, v10);
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 80);
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  v31 = v13;
  *(_DWORD *)v12 = 136315138;
  swift_getErrorValue(v1, v0 + 48, v0 + 16);
  v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v16 = v15;
  *(_QWORD *)(v0 + 56) = sub_1000906BC(v14, v15, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v16);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to issue start feedback: %s", v12, 0xCu);
  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
LABEL_9:
  v25 = v1 == 0;
  v26 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v25);
}

uint64_t sub_100179530()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  return swift_task_switch(sub_1001795A0, 0, 0);
}

uint64_t sub_1001795A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[8];
  v2 = swift_task_alloc(32);
  v0[13] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 8;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v3;
  v4 = sub_10009061C(&qword_10026E070);
  *v3 = v0;
  v3[1] = sub_100179654;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x8000000100202140, sub_100185744, v2, v4);
}

uint64_t sub_100179654()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001796B0, 0, 0);
}

uint64_t sub_1001796B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 16);
  if (!v1)
  {
    v17 = v4(*(_QWORD *)(v0 + 88), v2, v3);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Issued accessory stop feedback!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 72);

    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v21;
    goto LABEL_8;
  }
  v4(*(_QWORD *)(v0 + 96), v2, v3);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  if (!v8)
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v24 = v9;
LABEL_8:
    v23(v24, v10);
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 80);
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  v31 = v13;
  *(_DWORD *)v12 = 136315138;
  swift_getErrorValue(v1, v0 + 48, v0 + 16);
  v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v16 = v15;
  *(_QWORD *)(v0 + 56) = sub_1000906BC(v14, v15, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v16);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to issue stop feedback: %s", v12, 0xCu);
  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
LABEL_9:
  v25 = v1 == 0;
  v26 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v25);
}

uint64_t sub_100179958()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  return swift_task_switch(sub_1001799C8, 0, 0);
}

uint64_t sub_1001799C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[8];
  v2 = swift_task_alloc(32);
  v0[13] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 16;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v3;
  v4 = sub_10009061C(&qword_10026E070);
  *v3 = v0;
  v3[1] = sub_100179A7C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x8000000100202140, sub_100185744, v2, v4);
}

uint64_t sub_100179A7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100179AD8, 0, 0);
}

uint64_t sub_100179AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 16);
  if (!v1)
  {
    v17 = v4(*(_QWORD *)(v0 + 88), v2, v3);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Issued accessory begin startup command!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 72);

    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v21;
    goto LABEL_8;
  }
  v4(*(_QWORD *)(v0 + 96), v2, v3);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  if (!v8)
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v24 = v9;
LABEL_8:
    v23(v24, v10);
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 80);
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  v31 = v13;
  *(_DWORD *)v12 = 136315138;
  swift_getErrorValue(v1, v0 + 48, v0 + 16);
  v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v16 = v15;
  *(_QWORD *)(v0 + 56) = sub_1000906BC(v14, v15, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v16);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to issue begin startup command: %s", v12, 0xCu);
  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
LABEL_9:
  v25 = v1 == 0;
  v26 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v25);
}

uint64_t sub_100179D80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v5);
  v2[13] = swift_task_alloc(v5);
  return swift_task_switch(sub_100179DF0, 0, 0);
}

uint64_t sub_100179DF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = TrackerStateEvent.rawValue.getter(v0[8]);
  if (v1 == TrackerStateEvent.rawValue.getter(0))
  {
    v2 = 32;
  }
  else
  {
    v3 = TrackerStateEvent.rawValue.getter(v0[8]);
    if (v3 == TrackerStateEvent.rawValue.getter(1))
    {
      v2 = 64;
    }
    else
    {
      v4 = TrackerStateEvent.rawValue.getter(v0[8]);
      if (v4 == TrackerStateEvent.rawValue.getter(2))
        v2 = 96;
      else
        v2 = 0;
    }
  }
  v5 = v0[9];
  v6 = swift_task_alloc(32);
  v0[14] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[15] = v7;
  v8 = sub_10009061C(&qword_10026E070);
  *v7 = v0;
  v7[1] = sub_100179F08;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x8000000100202140, sub_100184158, v6, v8);
}

uint64_t sub_100179F08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100179F64, 0, 0);
}

uint64_t sub_100179F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v4 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 16);
  if (!v2)
  {
    v17 = v4(*(_QWORD *)(v0 + 96), v3, v1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Issued accessory begin startup command!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 80);

    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v21;
    goto LABEL_8;
  }
  v4(*(_QWORD *)(v0 + 104), v3, v1);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 88);
  if (!v8)
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

    v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v24 = v9;
LABEL_8:
    v23(v24, v10);
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(v0 + 80);
  v30 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 88);
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  v31 = v13;
  *(_DWORD *)v12 = 136315138;
  swift_getErrorValue(v2, v0 + 48, v0 + 16);
  v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v16 = v15;
  *(_QWORD *)(v0 + 56) = sub_1000906BC(v14, v15, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v16);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to issue begin startup command: %s", v12, 0xCu);
  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
LABEL_9:
  v25 = v2 == 0;
  v26 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v25);
}

uint64_t sub_10017A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v28 = a1;
  v29 = a2;
  v4 = sub_10009061C(&qword_1002706F8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[3] = &type metadata for UInt64;
  v30[0] = a3;
  v9 = (void *)objc_opt_self(CBUUID, v8);
  v10 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v11 = swift_allocObject(v10, 72, 7);
  v27 = xmmword_1001DE690;
  *(_OWORD *)(v11 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v11 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v11 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v11 + 32) = 264;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v11);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v15 = objc_msgSend(v9, "UUIDWithString:", v14);

  v16 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v16 + 16) = v27;
  *(_QWORD *)(v16 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v16 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v16 + 32) = 256;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  v20 = v18;
  v21 = v28;
  swift_bridgeObjectRelease(v20);
  v22 = objc_msgSend(v9, "UUIDWithString:", v19);

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  v23 = *(unsigned __int8 *)(v5 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = (uint8_t *)swift_allocObject(&unk_10023D940, v24 + v6, v23 | 7);
  (*(void (**)(uint8_t *, char *, uint64_t))(v5 + 32))(&v25[v24], v7, v4);
  sub_10017E3F0(v30, v15, v22, (uint64_t)sub_1001841C4, v25);
  swift_release(v25);

  return sub_100090E88(v30);
}

uint64_t sub_10017A474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2;
  swift_errorRetain(a2);
  v2 = sub_10009061C(&qword_1002706F8);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_10017A4BC(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  __int128 v48;
  id v49;
  id v50;
  NSObject *v51;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MotionFeedback.encode()(a1, a2);
  if (v10 >> 60 == 15)
    return 0;
  v11 = v9;
  v12 = v10;
  v13 = *(void **)(v2 + 32);
  if (!v13
    || (v14 = objc_opt_self(_HAPAccessoryServerBTLE200, v10),
        (v15 = swift_dynamicCastObjCClass(v13, v14)) == 0))
  {
    sub_10009E3A0(v11, v12);
    return 0;
  }
  v16 = (void *)v15;
  v47 = v6;
  v51 = v13;
  v46 = v16;
  result = (uint64_t)objc_msgSend(v16, "primaryAccessory");
  v50 = (id)result;
  if (!result)
  {
    __break(1u);
    return result;
  }
  v19 = (void *)objc_opt_self(CBUUID, v18);
  v20 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v21 = swift_allocObject(v20, 72, 7);
  v48 = xmmword_1001DE690;
  *(_OWORD *)(v21 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v21 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v21 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v21 + 32) = 272;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v21);
  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v49 = v19;
  v25 = objc_msgSend(v19, "UUIDWithString:", v24);

  v26 = objc_msgSend(v25, "UUIDString");
  if (!v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v28 = v27;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
  }
  v29 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v29 + 16) = v48;
  *(_QWORD *)(v29 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v29 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v29 + 32) = 512;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v29);
  v31 = v30;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  v33 = objc_msgSend(v49, "UUIDWithString:", v32);

  v34 = objc_msgSend(v33, "UUIDString");
  if (!v34)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v36 = v35;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
  }
  v37 = v50;
  v38 = objc_msgSend(v50, "characteristicOfType:serviceType:", v26, v34);

  if (!v38)
  {
    sub_10009E3A0(v11, v12);

    return 0;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "writeWithoutResponse:toCharacteristic:", isa, v38);

  v40 = v47;
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v5);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Sent motion feedback to accessory!", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
    v45 = v51;
  }
  else
  {
    v45 = v42;
    v42 = v51;
  }
  sub_10009E3A0(v11, v12);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v5);
  return 1;
}

void sub_10017A8CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void (**v5)(char *, uint64_t, uint64_t, double);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  void *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  simd_quatd *v29;
  float64x2_t v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  long double v41;
  long double v42;
  double v43;
  void (**v44)(char *, uint64_t, uint64_t, double);
  __n128 v45;
  uint64_t v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t inited;
  double v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  __n128 v59;
  __n128 v60;
  NSObject *v61;
  void (**v62)(char *, uint64_t, uint64_t, double);
  float64x2_t v63;
  void (**v64)(char *, uint64_t, uint64_t, double);
  id v65;
  uint64_t v66;
  _BYTE v67[64];
  CMQuaternion v68;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(void (***)(char *, uint64_t, uint64_t, double))(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v8 = qword_100275638;
  v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v10 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v10);
  os_unfair_lock_lock(v10 + 4);
  swift_release(v10);
  v11 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  v12 = *(os_unfair_lock_s **)(v8 + v9);
  v65 = v11;
  swift_retain(v12);
  os_unfair_lock_unlock(v12 + 4);
  swift_release(v12);
  if (v11)
  {
    type metadata accessor for Actuator(0);
    v13 = static Actuator.Yaw.getter();
    v15 = v14;
    v64 = (void (**)(char *, uint64_t, uint64_t, double))dispatch thunk of DockCoreAccessory.getActuator(name:)(v13);
    swift_bridgeObjectRelease(v15);
    if (v64)
    {
      v16 = static Actuator.Pitch.getter();
      v18 = v17;
      v19 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)(v16);
      swift_bridgeObjectRelease(v18);
      if (v19)
      {
        v20 = objc_msgSend(a1, "attitude");
        objc_msgSend(v20, "quaternion");
        v22 = v21;
        v24 = v23;
        v26 = v25;
        v28 = v27;

        v68.x = v22;
        v68.y = v24;
        v68.z = v26;
        v68.w = v28;
        simd_quatd.init(_:)(v29, v68);
        v31 = (int8x16_t)vnegq_f64(v30);
        v33 = vmulq_f64(v32, (float64x2_t)xmmword_1001DFEE0);
        v34 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)vnegq_f64(v33), 8uLL);
        v35 = vmlaq_f64(vmulq_f64(v30, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v31, (int8x16_t)v30, 8uLL));
        v36 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v30, v31, 8uLL), vmlaq_f64(vmulq_f64(v33, (float64x2_t)0), (float64x2_t)0, v34));
        v37 = vaddq_f64(v34, v35);
        v38 = vnegq_f64(v36);
        v39 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)vnegq_f64(v37), 8uLL);
        v63 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v37, v32, 1), v39, v32.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v38, v30, 1), (float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v38, 8uLL), v30.f64[0]));
        v40 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v36, v32, 1), (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v36, 8uLL), v32.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v37, v30, 1), v39, v30.f64[0]));
        v41 = sqrt(vmuld_n_f64(v40.f64[0], v40.f64[0]) + vmuld_lane_f64(v40.f64[1], v40, 1));
        v42 = atan2(v40.f64[1], v40.f64[0]);
        v43 = atan2(v63.f64[0], v41);
        v44 = v64;
        v46 = dispatch thunk of Component.id.getter(v45);

        v47 = v19;
        v49 = dispatch thunk of Component.id.getter(v48);

        v50 = -v43;
        v51 = sub_10009061C(&qword_10026D940);
        inited = swift_initStackObject(v51, v67);
        *(_OWORD *)(inited + 16) = xmmword_1001DD7E0;
        *(_QWORD *)(inited + 32) = v46;
        *(long double *)(inited + 40) = v42;
        *(_QWORD *)(inited + 48) = v49;
        *(double *)(inited + 56) = v50;
        sub_10017A4BC(inited, (unint64_t)_swiftEmptyArrayStorage);
        v53 = swift_setDeallocating(inited);
        v5[2](v7, v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4, v53);
        v54 = v44;
        v55 = v47;
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(42, -1);
          v59.n128_u64[0] = 134218752;
          *(_DWORD *)v58 = 134218752;
          v66 = dispatch thunk of Component.id.getter(v59);
          v64 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v58 + 4, v58 + 12);

          *(_WORD *)(v58 + 12) = 2048;
          v66 = *(_QWORD *)&v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v58 + 14, v58 + 22);
          *(_WORD *)(v58 + 22) = 2048;
          v66 = dispatch thunk of Component.id.getter(v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v58 + 24, v58 + 32);

          *(_WORD *)(v58 + 32) = 2048;
          v66 = *(_QWORD *)&v50;
          v5 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v58 + 34, v58 + 42);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sent IMU calibration yaw(%ld)=%f pitch(%ld)=%f", (uint8_t *)v58, 0x2Au);
          swift_slowDealloc(v58, -1, -1);
          v61 = v54;
        }
        else
        {

          v61 = v55;
          v55 = v54;
          v56 = v54;
        }

        ((void (*)(char *, uint64_t))v5[1])(v7, v4);
        return;
      }

      v62 = v64;
    }
    else
    {
      v62 = (void (**)(char *, uint64_t, uint64_t, double))v65;
    }

  }
}

uint64_t sub_10017AD84(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE v21[32];
  void *v22[3];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1 > 0.0)
  {
    v9 = v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
    v10 = swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp, v21, 0, 0);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v9, v4, v10);
    v12 = Date.timeIntervalSinceNow.getter(v11);
    v6 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (fabs(v12) < a1)
      return 0;
  }
  Date.init()(v6);
  v14 = v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
  v15 = swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp, v22, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v5 + 40))(v14, v8, v4, v15);
  swift_endAccess(v22);
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v16 = qword_100275638;
  v17 = sub_10009061C(&qword_10026E758);
  OS_dispatch_queue.sync<A>(execute:)(v22, sub_100125B04, v16, v17);
  v18 = v22[0];
  if (v22[0])
  {
    sub_10017A8CC(v22[0]);

    return 1;
  }
  else
  {
    v13 = 1;
    *(_BYTE *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 1;
    swift_retain(v2);
    sub_10015B790(0xD00000000000001DLL, 0x8000000100202120, (uint64_t)sub_100184150, v2);
    swift_release(v2);
  }
  return v13;
}

uint64_t sub_10017AF7C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t Strong;
  __n128 v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _BYTE v35[24];
  _BYTE v36[8];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = swift_weakInit(v36, a2);
  Strong = swift_weakLoadStrong(v12, v13);
  if (Strong)
  {
    v16 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu);
    swift_release(Strong);
    if (v16 == 1)
    {
      v17 = swift_weakLoadStrong(v36, v15);
      if (v17)
      {
        v19 = v17;
        sub_10017A8CC(a1);
        swift_release(v19);
      }
      v20 = swift_weakLoadStrong(v36, v18);
      if (v20)
      {
        *(_BYTE *)(v20 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 0;
        swift_release(v20);
      }
    }
  }
  v21 = swift_weakLoadStrong(v36, v15);
  if (!v21)
    goto LABEL_9;
  v23 = v21;
  v24 = v21 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
  v25 = swift_beginAccess(v21 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp, v35, 0, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v24, v8, v25);
  v26 = swift_release(v23);
  v27 = Date.timeIntervalSinceNow.getter(v26);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  v22.n128_f64[0] = fabs(v27);
  if (v22.n128_f64[0] > 5.0)
  {
LABEL_9:
    v28 = swift_weakLoadStrong(v36, v22);
    if (v28)
    {
      v29 = v28;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v28 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
      v30 = swift_release(v29);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "sendIMUPosition timeout exceeded. Unregistering imu motion manager", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    }
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    sub_10015C70C(0xD00000000000001DLL, 0x8000000100202120);
  }
  return swift_weakDestroy(v36);
}

uint64_t sub_10017B224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v28 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock;
  v6 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
  swift_retain(v6);
  os_unfair_lock_lock(v6 + 4);
  v29 = v3;
  sub_10017B540(v3);
  os_unfair_lock_unlock(v6 + 4);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain(a1);
    sub_1001A50E4(0, v7, 0);
    v8 = a1;
    v9 = _swiftEmptyArrayStorage[2];
    v10 = 32;
    v11 = v7;
    do
    {
      v12 = *(_QWORD *)(v8 + v10);
      v13 = _swiftEmptyArrayStorage[3];
      if (v9 >= v13 >> 1)
      {
        sub_1001A50E4(v13 > 1, v9 + 1, 1);
        v8 = a1;
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v12;
      v10 += 16;
      ++v9;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRetain(v8);
    sub_1001A5048(0, v7, 0);
    v14 = _swiftEmptyArrayStorage[2];
    v15 = 40;
    v16 = a1;
    do
    {
      v17 = *(_QWORD *)(v16 + v15);
      v18 = _swiftEmptyArrayStorage[3];
      if (v14 >= v18 >> 1)
      {
        sub_1001A5048(v18 > 1, v14 + 1, 1);
        v16 = a1;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      _swiftEmptyArrayStorage[v14 + 4] = v17;
      v15 += 16;
      ++v14;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v16);
  }
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain(a2);
    sub_1001A5048(0, v19, 0);
    v20 = _swiftEmptyArrayStorage[2];
    v21 = 40;
    do
    {
      v22 = *(_QWORD *)(a2 + v21);
      v23 = _swiftEmptyArrayStorage[3];
      if (v20 >= v23 >> 1)
        sub_1001A5048(v23 > 1, v20 + 1, 1);
      _swiftEmptyArrayStorage[2] = v20 + 1;
      _swiftEmptyArrayStorage[v20 + 4] = v22;
      v21 += 16;
      ++v20;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(a2);
  }
  v24 = *(void (**)(_QWORD *, _QWORD *, _QWORD *))(v29
                                                            + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  if (v24)
  {
    v25 = *(_QWORD *)(v29 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback + 8);
    swift_retain(v25);
    v24(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    sub_1000B1410((uint64_t)v24, v25);
  }
  v26 = *(os_unfair_lock_s **)(v29 + v28);
  swift_retain(v26);
  os_unfair_lock_lock(v26 + 4);
  sub_10017B77C(v29, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  os_unfair_lock_unlock(v26 + 4);
  swift_release(v26);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
}

void sub_10017B540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v19[24];

  v2 = sub_10009061C(&qword_10026C800);
  __chkstk_darwin(v2);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  v10 = swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks, v19, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v9 + 16)
    && !*(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback))
  {
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v5, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Stopping feedback. No active feedback receivers and startup is not running", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject(&unk_10023D918, 40, 7);
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = a1;
    swift_retain(a1);
    v17 = sub_10018A990((uint64_t)v4, (uint64_t)&unk_1002706F0, (uint64_t)v16);
    swift_release(v17);
  }
}

uint64_t sub_10017B734()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100270224);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  return sub_100179530();
}

void sub_10017B77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t *);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v6 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks, v25, 0, 0);
  v7 = *v6;
  v8 = *v6 + 64;
  v9 = 1 << *(_BYTE *)(*v6 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(*v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(*v6);
  v13 = 0;
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_20:
    v19 = *(_QWORD *)(v7 + 56) + 16 * v15;
    v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t *))v19;
    if (*(_QWORD *)v19)
    {
      v21 = *(_QWORD *)(v19 + 8);
      v26 = a2;
      v23 = a4;
      v24 = a3;
      swift_retain(v21);
      v20(&v26, &v24, &v23);
      sub_1000B1410((uint64_t)v20, v21);
    }
  }
  v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >= v12)
    goto LABEL_22;
  v17 = *(_QWORD *)(v8 + 8 * v16);
  ++v13;
  if (v17)
    goto LABEL_19;
  v13 = v16 + 1;
  if (v16 + 1 >= v12)
    goto LABEL_22;
  v17 = *(_QWORD *)(v8 + 8 * v13);
  if (v17)
    goto LABEL_19;
  v13 = v16 + 2;
  if (v16 + 2 >= v12)
    goto LABEL_22;
  v17 = *(_QWORD *)(v8 + 8 * v13);
  if (v17)
  {
LABEL_19:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_20;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_22:
    swift_release(v7);
    return;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v12)
      goto LABEL_22;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_10017B930(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(char *, uint64_t, uint64_t, __n128);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t *v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t result;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, __n128);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  size_t v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  NSObject *v88;
  __n128 v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char v94;
  void (*v95)(char *, uint64_t);
  unint64_t v96;
  char *v97;
  _UNKNOWN **v98;
  uint64_t v99;
  void *v100;
  void *v101;
  Swift::String v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  unint64_t v133;
  os_log_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  __n128 v151;
  unint64_t v152;
  char *v153;
  __n128 v154;
  char *v155;
  id v156;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v158;
  char v159;
  uint64_t v160;
  _BOOL8 v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  char v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  os_log_t v179;
  char *v180;
  char *v181;
  char *v182;
  __int128 v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t (*v186)(char *, uint64_t, uint64_t, __n128);
  uint64_t (*v187)(char *, uint64_t, uint64_t, __n128);
  uint64_t v188;
  char *v189;
  uint64_t v190;
  id v191;
  _UNKNOWN **v192;
  id v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  unsigned int v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  unint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  _BYTE __dst[14];
  unsigned __int8 v215;
  char v216[8];
  char v217[8];
  _QWORD *v218;
  char v219[8];
  char v220[8];
  char v221[8];
  char *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  char v228[8];

  v3 = type metadata accessor for ComponentType(0);
  v207 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v203 = (char *)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v205 = (char *)&v177 - v7;
  v8 = __chkstk_darwin(v6);
  v204 = (char *)&v177 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v177 - v11;
  v13 = __chkstk_darwin(v10);
  v206 = (char *)&v177 - v14;
  __chkstk_darwin(v13);
  v208 = (char *)&v177 - v15;
  v16 = type metadata accessor for Logger(0);
  v17 = *(uint64_t (***)(char *, uint64_t, uint64_t, __n128))(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v202 = (char *)&v177 - v22;
  v23 = __chkstk_darwin(v21);
  v201 = (char *)&v177 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v177 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v177 - v28;
  v30 = (unint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  v31 = swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap, v228, 1, 0);
  v209 = v30;
  if (*(_QWORD *)(*v30 + 16) && (a1 & 1) == 0)
  {
    v32 = v17[2](v29, v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v16, v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Sensors already enumerated, skipping", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v17[1])(v29, v16);
  }
  v37 = sub_1001B19FC((uint64_t)_swiftEmptyArrayStorage);
  v38 = *v209;
  *v209 = v37;
  swift_bridgeObjectRelease(v38);
  v39 = *(void **)(v1 + 32);
  if (v39 && (v193 = objc_msgSend(v39, "primaryAccessory")) != 0)
  {
    v189 = v12;
    v197 = v1;
    v40 = v17[2];
    v188 = v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
    v187 = v40;
    v41 = ((uint64_t (*)(char *))v40)(v27);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Enumerating sensor services for accessory", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v186 = v17[1];
    ((void (*)(char *, uint64_t))v186)(v27, v16);
    v45 = objc_msgSend(v193, "services");
    if (v45)
    {
      v46 = v45;
      v47 = sub_100090EE8(0, &qword_10026C418, off_100235E68);
      v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

      if ((unint64_t)v1 >> 62)
        goto LABEL_71;
      v49 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v49)
      {
LABEL_75:

        return swift_bridgeObjectRelease(v1);
      }
LABEL_13:
      v185 = v16;
      v192 = 0;
      v212 = v1 & 0xC000000000000001;
      v200 = enum case for ComponentType.Actuator(_:);
      v184 = &__dst[8];
      v16 = 4;
      *(_QWORD *)&v48 = 136315394;
      v183 = v48;
      v181 = (char *)&type metadata for Any + 8;
      v199 = v3;
      v211 = v49;
      v210 = v1;
      while (1)
      {
        v50 = v16 - 4;
        if (v212)
        {
          v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v1);
          v52 = v16 - 3;
          if (__OFADD__(v50, 1))
            goto LABEL_68;
        }
        else
        {
          v51 = *(id *)(v1 + 8 * v16);
          v52 = v16 - 3;
          if (__OFADD__(v50, 1))
          {
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            if (v1 < 0)
              v176 = v1;
            else
              v176 = v1 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v1);
            v49 = _CocoaArrayWrapper.endIndex.getter(v176);
            swift_bridgeObjectRelease(v1);
            if (!v49)
              goto LABEL_75;
            goto LABEL_13;
          }
        }
        v213 = v52;
        v53 = v51;
        v54 = objc_msgSend(v51, "type");
        if (!v54)
          __break(1u);
        v55 = v54;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

        v58 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v57);
        v60 = objc_msgSend((id)objc_opt_self(CBUUID, v59), "UUIDWithString:", v58);

        v61 = objc_msgSend(v60, "data");
        v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v64 = v63;

        sub_100177DCC(12, v62, v64);
        v65 = (uint64_t)v226;
        v66 = v227;
        v67 = sub_10009061C((uint64_t *)&unk_10026EA70);
        v224 = v67;
        v225 = sub_1000D5BAC((unint64_t *)&qword_10026CFE0, (uint64_t *)&unk_10026EA70, (uint64_t)&protocol conformance descriptor for <A> [A]);
        v222 = (char *)&off_100238358;
        v68 = sub_10009B038(&v222, v67);
        v69 = *(_QWORD *)(*v68 + 16);
        if (v69)
        {
          v70 = (const void *)(*v68 + 32);
          if (v69 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            v215 = v69;
            memcpy(__dst, v70, v69);
            v74 = *(_QWORD *)__dst;
            v75 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v215 << 48);
          }
          else
          {
            v71 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
            v72 = __DataStorage.init(bytes:length:)(v70, v69);
            v73 = v72;
            if (v69 >= 0x7FFFFFFF)
            {
              v76 = type metadata accessor for Data.RangeReference(0);
              v74 = swift_allocObject(v76, 32, 7);
              *(_QWORD *)(v74 + 16) = 0;
              *(_QWORD *)(v74 + 24) = v69;
              v75 = v73 | 0x8000000000000000;
            }
            else
            {
              v74 = v69 << 32;
              v75 = v72 | 0x4000000000000000;
            }
          }
        }
        else
        {
          v74 = 0;
          v75 = 0xC000000000000000;
        }
        sub_100090E88(&v222);
        sub_1001810E0(v65, v66);
        v78 = v77;
        sub_10009B2FC(v74, v75);
        sub_10009B2FC(v65, v66);
        if ((v78 & 1) == 0 || sub_100119010() < 0x300 || sub_100119010() > 0x320)
        {

          goto LABEL_15;
        }
        v79 = swift_allocBox(v3);
        v80 = v3;
        v82 = v81;
        v83 = v207;
        v198 = *(void (**)(unint64_t, _QWORD, uint64_t))(v207 + 104);
        v198(v81, v200, v3);
        v84 = swift_allocObject(&unk_10023D878, 32, 7);
        *(_QWORD *)(v84 + 16) = 0x726F746175746361;
        v195 = v84 + 16;
        *(_QWORD *)(v84 + 24) = 0xE800000000000000;
        if (qword_10026BBD8 != -1)
          swift_once(&qword_10026BBD8, sub_10012E878);
        v85 = qword_1002755B8;
        v86 = v197;
        swift_retain(v197);
        swift_retain(v79);
        swift_retain(v84);
        v87 = v60;
        v88 = v85;
        v3 = (uint64_t)v87;
        sub_10018375C(v88, v87, v86, v86, v79, v84, v87);

        swift_release(v84);
        swift_release(v79);
        swift_release(v86);
        v89 = swift_beginAccess(v82, v221, 0, 0);
        v90 = *(char **)(v83 + 16);
        v91 = v208;
        v196 = v82;
        v194 = v90;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v90)(v208, v82, v80, v89);
        v92 = v206;
        v198((unint64_t)v206, v200, v80);
        v93 = sub_100090E1C(&qword_10026EDB0, (uint64_t (*)(uint64_t))&type metadata accessor for ComponentType, (uint64_t)&protocol conformance descriptor for ComponentType);
        v94 = dispatch thunk of static Equatable.== infix(_:_:)(v91, v92, v80, v93);
        v95 = *(void (**)(char *, uint64_t))(v83 + 8);
        v95(v92, v80);
        v198 = (void (*)(unint64_t, _QWORD, uint64_t))v95;
        v95(v91, v80);
        if ((v94 & 1) != 0)
        {
          swift_release(v79);
          swift_release(v84);

          v3 = v199;
          goto LABEL_15;
        }
        v191 = (id)v3;
        v190 = v79;
        swift_beginAccess(v195, v220, 0, 0);
        v97 = *(char **)(v84 + 16);
        v96 = *(_QWORD *)(v84 + 24);
        v195 = v84;
        v98 = v192;
        v222 = (char *)v192;
        swift_bridgeObjectRetain(v96);
        v1 = (uint64_t)&v222;
        v99 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v101 = v100;
        v222 = v97;
        v223 = v96;
        swift_bridgeObjectRetain(v96);
        v102._countAndFlagsBits = v99;
        v102._object = v101;
        String.append(_:)(v102);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v101);
        v226 = v222;
        v227 = v223;
        v192 = (_UNKNOWN **)((char *)v98 + 1);
        if (__OFADD__(v98, 1))
          goto LABEL_69;
        v103 = sub_10017D850(v53);
        v105 = v202;
        if (v104)
        {
          v106 = v103;
          v107 = v104;
          v108 = v201;
          v109 = v185;
          ((void (*)(char *, uint64_t, uint64_t))v187)(v201, v188, v185);
          v110 = v195;
          swift_retain_n(v195, 2);
          v111 = swift_bridgeObjectRetain_n(v107, 2);
          v112 = Logger.logObject.getter(v111);
          v113 = static os_log_type_t.default.getter();
          v114 = v113;
          if (os_log_type_enabled(v112, v113))
          {
            v115 = swift_slowAlloc(22, -1);
            v182 = (char *)v106;
            v116 = v115;
            v180 = (char *)swift_slowAlloc(64, -1);
            v222 = v180;
            *(_DWORD *)v116 = v183;
            v178 = v116 + 4;
            LODWORD(v179) = v114;
            v118 = *(_QWORD *)(v110 + 16);
            v117 = *(_QWORD *)(v110 + 24);
            swift_bridgeObjectRetain(v117);
            *(_QWORD *)__dst = sub_1000906BC(v118, v117, (uint64_t *)&v222);
            v119 = v184;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, v184, v178, v116 + 12);
            swift_release_n(v110, 2);
            swift_bridgeObjectRelease(v117);
            *(_WORD *)(v116 + 12) = 2080;
            swift_bridgeObjectRetain(v107);
            *(_QWORD *)__dst = sub_1000906BC((uint64_t)v182, v107, (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, v119, v116 + 14, v116 + 22);
            swift_bridgeObjectRelease_n(v107, 3);
            _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v179, "Read service name for %s as '%s'", (uint8_t *)v116, 0x16u);
            v120 = v180;
            swift_arrayDestroy(v180, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v120, -1, -1);
            v121 = v116;
            v106 = (uint64_t)v182;
            swift_slowDealloc(v121, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v107, 2);
            swift_release_n(v110, 2);
          }
          ((void (*)(char *, uint64_t))v186)(v108, v109);
          v136 = (uint64_t)v189;
          v137 = v209;
          swift_beginAccess(&v226, v216, 1, 0);
          v138 = v227;
          v226 = (char *)v106;
          v227 = v107;
          swift_bridgeObjectRelease(v138);
        }
        else
        {
          v122 = v185;
          ((void (*)(char *, uint64_t, uint64_t))v187)(v202, v188, v185);
          v123 = v195;
          v124 = swift_retain(v195);
          v125 = Logger.logObject.getter(v124);
          v126 = static os_log_type_t.default.getter();
          v127 = v126;
          if (os_log_type_enabled(v125, v126))
          {
            v128 = swift_slowAlloc(22, -1);
            v182 = (char *)swift_slowAlloc(64, -1);
            v222 = v182;
            *(_DWORD *)v128 = v183;
            LODWORD(v180) = v127;
            v179 = v125;
            v130 = *(_QWORD *)(v123 + 16);
            v129 = *(_QWORD *)(v123 + 24);
            swift_bridgeObjectRetain(v129);
            *(_QWORD *)__dst = sub_1000906BC(v130, v129, (uint64_t *)&v222);
            v131 = v184;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, v184, v128 + 4, v128 + 12);
            swift_release(v123);
            swift_bridgeObjectRelease(v129);
            *(_WORD *)(v128 + 12) = 2080;
            swift_beginAccess(&v226, v217, 0, 0);
            v132 = (uint64_t)v226;
            v133 = v227;
            swift_bridgeObjectRetain(v227);
            *(_QWORD *)__dst = sub_1000906BC(v132, v133, (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, v131, v128 + 14, v128 + 22);
            swift_bridgeObjectRelease(v133);
            v134 = v179;
            _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v180, "No service name for %s, using generated %s", (uint8_t *)v128, 0x16u);
            v135 = (uint64_t)v182;
            swift_arrayDestroy(v182, 2, v181);
            swift_slowDealloc(v135, -1, -1);
            swift_slowDealloc(v128, -1, -1);

          }
          else
          {

            swift_release(v123);
          }
          ((void (*)(char *, uint64_t))v186)(v105, v122);
          v136 = (uint64_t)v189;
          v137 = v209;
        }
        v139 = (void (*)(uint64_t, uint64_t))v198;
        v140 = v196;
        v20 = v194;
        ((void (*)(uint64_t, unint64_t, uint64_t))v194)(v136, v196, v199);
        v141 = *v137;
        if (!*(_QWORD *)(*v137 + 16))
          goto LABEL_50;
        swift_bridgeObjectRetain(*v137);
        v142 = sub_100145580(v136);
        if ((v143 & 1) == 0)
          break;
        v144 = v136;
        v145 = *(_QWORD *)(*(_QWORD *)(v141 + 56) + 8 * v142);
        swift_bridgeObjectRetain(v145);
        swift_bridgeObjectRelease(v141);
        v146 = v144;
        v140 = v196;
        v147 = v199;
        v139(v146, v199);
        swift_bridgeObjectRelease(v145);
LABEL_51:
        v151 = swift_beginAccess(&v226, v219, 0, 0);
        v152 = v227;
        v194 = v226;
        v153 = v204;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v20)(v204, v140, v147, v151);
        v154 = swift_beginAccess(v137, &v222, 33, 0);
        v155 = v205;
        ((void (*)(char *, char *, uint64_t, __n128))v20)(v205, v153, v147, v154);
        v196 = v152;
        swift_bridgeObjectRetain_n(v152, 2);
        v156 = v191;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v137);
        v158 = (uint64_t)v203;
        ((void (*)(char *, char *, uint64_t))v20)(v203, v155, v147);
        *(_QWORD *)__dst = *v137;
        v1 = *(_QWORD *)__dst;
        *v137 = 0x8000000000000000;
        v3 = sub_100145580(v158);
        v160 = *(_QWORD *)(v1 + 16);
        v161 = (v159 & 1) == 0;
        v162 = v160 + v161;
        if (__OFADD__(v160, v161))
          goto LABEL_70;
        v163 = v159;
        v17 = (uint64_t (**)(char *, uint64_t, uint64_t, __n128))v198;
        if (*(_QWORD *)(v1 + 24) >= v162)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v159 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v1 = (uint64_t)__dst;
            sub_1001BDC7C();
            if ((v163 & 1) == 0)
              goto LABEL_64;
          }
        }
        else
        {
          sub_1001B698C(v162, isUniquelyReferenced_nonNull_native);
          v1 = *(_QWORD *)__dst;
          v164 = sub_100145580(v158);
          if ((v163 & 1) != (v165 & 1))
            goto LABEL_78;
          v3 = v164;
          if ((v163 & 1) == 0)
          {
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
        }
        v166 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)__dst + 56) + 8 * v3);
        if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
          v166 = sub_1000E98A8(0, v166[2] + 1, 1, v166);
        v168 = v166[2];
        v167 = v166[3];
        if (v168 >= v167 >> 1)
          v166 = sub_1000E98A8((_QWORD *)(v167 > 1), v168 + 1, 1, v166);
        v166[2] = v168 + 1;
        v169 = &v166[3 * v168];
        v170 = v196;
        v169[4] = v194;
        v169[5] = v170;
        v169[6] = v156;
        v218 = v166;
        sub_1001ABE6C((uint64_t *)&v218, 1, (uint64_t *)__dst, v3, v158);
        swift_bridgeObjectRelease(v218);
        v3 = v199;
        ((void (*)(uint64_t, uint64_t))v17)(v158, v199);
        *v209 = *(_QWORD *)__dst;
        ((void (*)(char *, uint64_t))v17)(v205, v3);
        ((void (*)(char *, uint64_t))v17)(v204, v3);
        swift_endAccess(&v222);

        swift_bridgeObjectRelease(v170);
        v171 = v227;
        swift_release(v190);
        swift_release(v195);
        swift_bridgeObjectRelease(v171);
LABEL_15:
        v1 = v210;
        ++v16;
        if (v213 == v211)
          goto LABEL_75;
      }
      swift_bridgeObjectRelease(v141);
LABEL_50:
      v147 = v199;
      v139(v136, v199);
      v148 = (uint64_t)v208;
      ((void (*)(char *, unint64_t, uint64_t))v20)(v208, v140, v147);
      swift_beginAccess(v137, &v222, 33, 0);
      v149 = swift_isUniquelyReferenced_nonNull_native(*v137);
      *(_QWORD *)__dst = *v137;
      *v137 = 0x8000000000000000;
      sub_1001BB378((uint64_t)_swiftEmptyArrayStorage, v148, v149);
      v150 = *v137;
      *v137 = *(_QWORD *)__dst;
      swift_bridgeObjectRelease(v150);
      v139(v148, v147);
      swift_endAccess(&v222);
      goto LABEL_51;
    }
    __break(1u);
LABEL_78:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v199);
    __break(1u);
  }
  else
  {
LABEL_65:
    v172 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17[2])(v20, v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v16);
    v173 = Logger.logObject.getter(v172);
    v174 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v173, v174))
    {
      v175 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v175 = 0;
      _os_log_impl((void *)&_mh_execute_header, v173, v174, "No accessory to enumerate sensors from", v175, 2u);
      swift_slowDealloc(v175, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v17[1])(v20, v16);
  }
  return result;
}

void sub_10017CC84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char v47;
  id v48;
  id v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject **v61;
  NSObject *v62;
  uint64_t v63;
  NSObject **v64;
  uint64_t v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  NSObject *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  NSObject **v85;
  NSObject *v86;
  uint64_t v87;
  NSObject **v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  os_log_type_t v92;
  NSObject **v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  _OWORD v111[2];
  uint64_t v112[4];

  v105 = a6;
  v106 = a5;
  v108 = a3;
  v9 = type metadata accessor for ComponentType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v109 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v101 - v18;
  v20 = __chkstk_darwin(v17);
  v104 = (char *)&v101 - v21;
  v22 = __chkstk_darwin(v20);
  v103 = (char *)&v101 - v23;
  v24 = __chkstk_darwin(v22);
  v102 = (char *)&v101 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v101 - v26;
  v28 = swift_projectBox(a4);
  if (a2 || !a1)
  {
    v35 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v27, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
    swift_errorRetain(a2);
    v36 = swift_errorRetain(a2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v112[0] = v40;
      v107 = v13;
      *(_DWORD *)v39 = 136315138;
      *(_QWORD *)&v111[0] = a2;
      swift_errorRetain(a2);
      v41 = sub_10009061C(&qword_10026E070);
      v42 = String.init<A>(describing:)(v111, v41);
      v44 = v43;
      *(_QWORD *)&v111[0] = sub_1000906BC(v42, v43, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, (char *)v111 + 8, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to read characteristic: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v109 + 8))(v27, v107);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v45 = *(void (**)(char *, uint64_t))(v35 + 8);
    v46 = v27;
    goto LABEL_27;
  }
  v101 = v28;
  v29 = objc_msgSend(a1, "metadata");
  if (v29)
  {
    v30 = v29;
    v31 = objc_msgSend(v29, "format");

    if (v31)
    {
      v107 = v13;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      if (v32 == 0x38746E6975 && v34 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease(0xE500000000000000);
        v13 = v107;
      }
      else
      {
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, 0x38746E6975, 0xE500000000000000, 0);
        swift_bridgeObjectRelease(v34);
        v13 = v107;
        if ((v47 & 1) == 0)
          goto LABEL_23;
      }
      v48 = objc_msgSend(a1, "value");
      if (v48)
      {
        v49 = v48;
        _bridgeAnyObjectToAny(_:)(v111);
        swift_unknownObjectRelease(v49);
      }
      else
      {
        memset(v111, 0, sizeof(v111));
      }
      sub_10009AEEC((uint64_t)v111, (uint64_t)v112);
      if (v112[3])
      {
        if ((swift_dynamicCast(&v110, v112, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6) & 1) != 0)
        {
          v50 = v106;
          v51 = (char)v110;
          switch(v110)
          {
            case 3u:
              (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for ComponentType.Battery(_:), v9);
              v76 = v101;
              v77 = swift_beginAccess(v101, v112, 1, 0);
              (*(void (**)(uint64_t, char *, uint64_t, __n128))(v10 + 40))(v76, v12, v9, v77);
              swift_beginAccess(v50 + 16, v111, 1, 0);
              v78 = *(_QWORD *)(v50 + 24);
              *(_QWORD *)(v50 + 16) = 0x79726574746162;
              *(_QWORD *)(v50 + 24) = 0xE700000000000000;
              swift_bridgeObjectRelease(v78);
              v79 = v109;
              v80 = v104;
              (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v104, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
              v81 = v105;
              v82 = Logger.logObject.getter(v81);
              v83 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v82, v83))
              {
                v84 = (uint8_t *)swift_slowAlloc(12, -1);
                v85 = (NSObject **)swift_slowAlloc(8, -1);
                *(_DWORD *)v84 = 138412290;
                v110 = v81;
                v86 = v81;
                v13 = v107;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v84 + 4, v84 + 12);
                *v85 = v81;

                _os_log_impl((void *)&_mh_execute_header, v82, v83, "Found Battery service %@", v84, 0xCu);
                v87 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v85, 1, v87);
                v88 = v85;
                v80 = v104;
                swift_slowDealloc(v88, -1, -1);
                swift_slowDealloc(v84, -1, -1);
              }
              else
              {

                v82 = v81;
              }

              v45 = *(void (**)(char *, uint64_t))(v79 + 8);
              v46 = v80;
              goto LABEL_27;
            case 2u:
              (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for ComponentType.Button(_:), v9);
              v89 = v101;
              v90 = swift_beginAccess(v101, v112, 1, 0);
              (*(void (**)(uint64_t, char *, uint64_t, __n128))(v10 + 40))(v89, v12, v9, v90);
              swift_beginAccess(v50 + 16, v111, 1, 0);
              v91 = *(_QWORD *)(v50 + 24);
              *(_QWORD *)(v50 + 16) = 0x6E6F74747562;
              *(_QWORD *)(v50 + 24) = 0xE600000000000000;
              swift_bridgeObjectRelease(v91);
              v55 = v109;
              v56 = v103;
              (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v103, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
              v57 = v105;
              v58 = Logger.logObject.getter(v57);
              v92 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v58, v92))
              {
                v60 = (uint8_t *)swift_slowAlloc(12, -1);
                v93 = (NSObject **)swift_slowAlloc(8, -1);
                *(_DWORD *)v60 = 138412290;
                v110 = v57;
                v94 = v57;
                v13 = v107;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v60 + 4, v60 + 12);
                *v93 = v57;

                v55 = v109;
                _os_log_impl((void *)&_mh_execute_header, v58, v92, "Found Button service %@", v60, 0xCu);
                v95 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v93, 1, v95);
                v64 = v93;
                v56 = v103;
                goto LABEL_33;
              }
              break;
            case 1u:
              (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for ComponentType.LED(_:), v9);
              v52 = v101;
              v53 = swift_beginAccess(v101, v112, 1, 0);
              (*(void (**)(uint64_t, char *, uint64_t, __n128))(v10 + 40))(v52, v12, v9, v53);
              swift_beginAccess(v50 + 16, v111, 1, 0);
              v54 = *(_QWORD *)(v50 + 24);
              *(_QWORD *)(v50 + 16) = 6579564;
              *(_QWORD *)(v50 + 24) = 0xE300000000000000;
              swift_bridgeObjectRelease(v54);
              v55 = v109;
              v56 = v102;
              (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v102, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
              v57 = v105;
              v58 = Logger.logObject.getter(v57);
              v59 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v58, v59))
              {
                v60 = (uint8_t *)swift_slowAlloc(12, -1);
                v61 = (NSObject **)swift_slowAlloc(8, -1);
                *(_DWORD *)v60 = 138412290;
                v13 = v107;
                v110 = v57;
                v62 = v57;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v60 + 4, v60 + 12);
                *v61 = v57;

                v55 = v109;
                _os_log_impl((void *)&_mh_execute_header, v58, v59, "Found LED service %@", v60, 0xCu);
                v63 = sub_10009061C(&qword_10026BC40);
                swift_arrayDestroy(v61, 1, v63);
                v64 = v61;
                v56 = v102;
LABEL_33:
                swift_slowDealloc(v64, -1, -1);
                swift_slowDealloc(v60, -1, -1);
LABEL_38:

                v45 = *(void (**)(char *, uint64_t))(v55 + 8);
                v46 = v56;
                goto LABEL_27;
              }
              break;
            default:
              v96 = v109;
              v97 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 16))(v19, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
              v98 = Logger.logObject.getter(v97);
              v99 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v98, v99))
              {
                v100 = (uint8_t *)swift_slowAlloc(5, -1);
                *(_DWORD *)v100 = 16777472;
                LOBYTE(v112[0]) = v51;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 1, v100 + 4, v100 + 5);
                _os_log_impl((void *)&_mh_execute_header, v98, v99, "Found unknown sensor type %hhu, ignoring", v100, 5u);
                swift_slowDealloc(v100, -1, -1);
              }

              v45 = *(void (**)(char *, uint64_t))(v96 + 8);
              v46 = v19;
              goto LABEL_27;
          }

          v58 = v57;
          goto LABEL_38;
        }
      }
      else
      {
        sub_10009B2C0((uint64_t)v112, &qword_10026E5F0);
      }
    }
  }
LABEL_23:
  v65 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v16, v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
  v66 = a1;
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v67, v68))
  {

    v45 = *(void (**)(char *, uint64_t))(v65 + 8);
    v46 = v16;
LABEL_27:
    v45(v46, v13);
    return;
  }
  v107 = v13;
  v69 = (uint8_t *)swift_slowAlloc(12, -1);
  v70 = swift_slowAlloc(32, -1);
  v112[0] = v70;
  *(_DWORD *)v69 = 136315138;
  v71 = objc_msgSend(v66, "type");
  if (v71)
  {
    v72 = v71;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v75 = v74;

    *(_QWORD *)&v111[0] = sub_1000906BC(v73, v75, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, (char *)v111 + 8, v69 + 4, v69 + 12);

    swift_bridgeObjectRelease(v75);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Characteristic not convertable to UInt8: %s", v69, 0xCu);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);

    (*(void (**)(char *, uint64_t))(v109 + 8))(v16, v107);
  }
  else
  {

    __break(1u);
  }
}

uint64_t sub_10017D850(void *a1)
{
  _WORD *v2;
  __objc2_prot_list **p_prots;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  char **v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  id v47;
  void *v48;
  int v49;
  __objc2_prot_list **v50;
  _WORD *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  __objc2_prot_list **v64;
  _WORD *v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE __dst[14];
  unsigned __int8 v75;
  _QWORD v76[7];
  char v77[24];

  v2 = (_WORD *)type metadata accessor for Logger(0);
  p_prots = (__objc2_prot_list **)*((_QWORD *)v2 - 1);
  __chkstk_darwin(v2);
  v68 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = swift_allocObject(&unk_10023D7D8, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = v5 + 16;
  v72 = v5;
  *(_QWORD *)(v5 + 24) = 0;
  v7 = objc_msgSend(a1, "type");
  if (!v7)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  v8 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v67 = objc_msgSend((id)objc_opt_self(CBUUID, v12), "UUIDWithString:", v11);

  v13 = objc_msgSend(a1, "characteristics");
  if (!v13)
    goto LABEL_43;
  v14 = v13;
  v15 = sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if ((unint64_t)v16 >> 62)
    goto LABEL_33;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
  {
LABEL_37:

    swift_bridgeObjectRelease(v16);
    goto LABEL_38;
  }
LABEL_5:
  v64 = p_prots;
  v65 = v2;
  v63 = v66 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v71 = v16 & 0xC000000000000001;
  v62 = v6;
  swift_beginAccess(v6, v77, 0, 0);
  v18 = 4;
  v19 = &selRef_authSession_authComplete_;
  p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
  v69 = v17;
  v70 = v16;
  while (1)
  {
    if (v71)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v16);
    else
      v20 = *(id *)(v16 + 8 * v18);
    v21 = v20;
    v6 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
LABEL_33:
      if (v16 < 0)
        v58 = v16;
      else
        v58 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v58);
      swift_bridgeObjectRelease(v16);
      if (!v17)
        goto LABEL_37;
      goto LABEL_5;
    }
    v22 = objc_msgSend(v20, v19[41]);
    if (!v22)
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v23 = v22;
    v73 = v18 - 3;
    v24 = objc_msgSend(v22, (SEL)p_prots[195]);

    v25 = v19;
    v26 = objc_msgSend(v21, v19[41]);
    if (!v26)
      goto LABEL_40;
    v27 = v26;
    v28 = objc_msgSend(v26, (SEL)p_prots[195]);

    v29 = objc_msgSend(v28, "data");
    v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    sub_100177DCC(12, v30, v32);
    v2 = (_WORD *)v76[5];
    v33 = v76[6];
    v34 = sub_10009061C((uint64_t *)&unk_10026EA70);
    v76[3] = v34;
    v76[4] = sub_1000D5BAC((unint64_t *)&qword_10026CFE0, (uint64_t *)&unk_10026EA70, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v76[0] = &off_100238298;
    v35 = sub_10009B038(v76, v34);
    v36 = *v35;
    v37 = *(_QWORD *)(*v35 + 16);
    if (v37)
    {
      v38 = v36 + 32;
      if (v37 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        v75 = v37;
        memcpy(__dst, (const void *)(v36 + 32), v37);
        v42 = *(_QWORD *)__dst;
        v43 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v75 << 48);
      }
      else
      {
        v39 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
        v40 = __DataStorage.init(bytes:length:)(v38, v37);
        v41 = v40;
        if (v37 >= 0x7FFFFFFF)
        {
          v44 = type metadata accessor for Data.RangeReference(0);
          v42 = swift_allocObject(v44, 32, 7);
          *(_QWORD *)(v42 + 16) = 0;
          *(_QWORD *)(v42 + 24) = v37;
          v43 = v41 | 0x8000000000000000;
        }
        else
        {
          v42 = v37 << 32;
          v43 = v40 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v42 = 0;
      v43 = 0xC000000000000000;
    }
    sub_100090E88(v76);
    sub_1001810E0((uint64_t)v2, v33);
    v46 = v45;
    sub_10009B2FC(v42, v43);
    sub_10009B2FC((uint64_t)v2, v33);

    v19 = v25;
    p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
    if ((v46 & 1) != 0)
    {
      v47 = objc_msgSend(v21, v25[41]);
      if (!v47)
        goto LABEL_41;
      v48 = v47;
      v2 = objc_msgSend(v47, "UUID");

      v49 = sub_100119010();
      if (qword_10026BBE8 != -1)
        swift_once(&qword_10026BBE8, sub_10012EA18);
      if (v49 == sub_100119010())
      {
        v50 = v64;
        v51 = v65;
        v52 = ((uint64_t (*)(char *, uint64_t, _WORD *))v64[2])(v68, v63, v65);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v2 = (_WORD *)swift_slowAlloc(2, -1);
          *v2 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Found sensor name characteristic, reading", (uint8_t *)v2, 2u);
          swift_slowDealloc(v2, -1, -1);
        }

        ((void (*)(char *, _WORD *))v50[1])(v68, v51);
        v55 = v66;
        swift_retain(v66);
        v56 = v72;
        swift_retain(v72);
        sub_100181228(v24, v67, v55, v55, v56);
        swift_release(v56);
        swift_release(v55);
        p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_ + 16);
      }
    }

    if (*(_QWORD *)(v72 + 24))
      break;
    ++v18;
    v16 = v70;
    if (v73 == v69)
    {

      v57 = v16;
      goto LABEL_31;
    }
  }

  v57 = v70;
LABEL_31:
  swift_bridgeObjectRelease(v57);
  v6 = v62;
LABEL_38:
  swift_beginAccess(v6, v76, 0, 0);
  v59 = v72;
  v60 = *(_QWORD *)(v72 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v72 + 24));
  swift_release(v59);
  return v60;
}

void sub_10017DEE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _OWORD v52[2];
  uint64_t v53[4];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v49 - v13;
  if (a2 || !a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v49 - v13, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
    swift_errorRetain(a2);
    v23 = swift_errorRetain(a2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v53[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v50 = v8;
      *(_QWORD *)&v52[0] = a2;
      swift_errorRetain(a2);
      v28 = sub_10009061C(&qword_10026E070);
      v29 = String.init<A>(describing:)(v52, v28);
      v49 = v9;
      v31 = v30;
      *(_QWORD *)&v52[0] = sub_1000906BC(v29, v30, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, (char *)v52 + 8, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to read characteristic: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v14, v50);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33 = v14;
    goto LABEL_26;
  }
  v15 = objc_msgSend(a1, "metadata");
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "format");

    if (v17)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      if (v18 == 0x676E69727473 && v20 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease(0xE600000000000000);
      }
      else
      {
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, 0x676E69727473, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v20);
        if ((v22 & 1) == 0)
          goto LABEL_22;
      }
      v34 = objc_msgSend(a1, "value");
      if (v34)
      {
        v35 = v34;
        _bridgeAnyObjectToAny(_:)(v52);
        swift_unknownObjectRelease(v35);
      }
      else
      {
        memset(v52, 0, sizeof(v52));
      }
      sub_10009AEEC((uint64_t)v52, (uint64_t)v53);
      if (v53[3])
      {
        if ((swift_dynamicCast(v51, v53, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v36 = v51[0];
          v37 = v51[1];
          swift_beginAccess(a4 + 16, v53, 1, 0);
          v38 = *(_QWORD *)(a4 + 24);
          *(_QWORD *)(a4 + 16) = v36;
          *(_QWORD *)(a4 + 24) = v37;
          swift_bridgeObjectRelease(v38);
          return;
        }
      }
      else
      {
        sub_10009B2C0((uint64_t)v53, &qword_10026E5F0);
      }
    }
  }
LABEL_22:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
  v39 = a1;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v40, v41))
  {

    v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33 = v12;
LABEL_26:
    v32(v33, v8);
    return;
  }
  v49 = v9;
  v50 = v8;
  v42 = (uint8_t *)swift_slowAlloc(12, -1);
  v43 = swift_slowAlloc(32, -1);
  v53[0] = v43;
  *(_DWORD *)v42 = 136315138;
  v44 = objc_msgSend(v39, "type");
  if (v44)
  {
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v48 = v47;

    *(_QWORD *)&v52[0] = sub_1000906BC(v46, v48, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, (char *)v52 + 8, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Characteristic not convertable to UInt8: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v50);
  }
  else
  {

    __break(1u);
  }
}

void sub_10017E3F0(_QWORD *a1, void *a2, void *a3, uint64_t a4, uint8_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Class isa;
  void *v40;
  uint8_t *v41;
  void *v42;
  uint8_t *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  id v69;
  uint64_t aBlock[5];
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;

  v6 = v5;
  v67 = a4;
  v68 = a5;
  v69 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v6 + 32);
  if (v14
    && (v15 = objc_opt_self(_HAPAccessoryServerBTLE200, v11),
        (v16 = swift_dynamicCastObjCClass(v14, v15)) != 0))
  {
    v17 = (void *)v16;
    v18 = v14;
    if (objc_msgSend(v17, "isSecuritySessionOpen"))
    {
      v65 = v18;
      v66 = v10;
      v64 = v9;
      v19 = objc_msgSend(v17, "primaryAccessory");
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v69, "UUIDString");
        if (!v21)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v23 = v22;
          v21 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v23);
        }
        v24 = objc_msgSend(a3, "UUIDString");
        if (!v24)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v26 = v25;
          v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
        }
        v27 = objc_msgSend(v20, "characteristicOfType:serviceType:", v21, v24);

        v28 = v66;
        if (v27)
        {
          v29 = a1[3];
          v30 = sub_10009B038(a1, v29);
          v31 = v27;
          v32 = _bridgeAnythingToObjectiveC<A>(_:)(v30, v29);
          v34 = objc_msgSend((id)objc_opt_self(HAPCharacteristicWriteRequestTuple, v33), "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:", v31, v32, 0, 0, 0, 0);
          swift_unknownObjectRelease(v32);

          if (v34)
          {
            v35 = sub_10009061C(&qword_10026C340);
            v36 = swift_allocObject(v35, 40, 7);
            *(_OWORD *)(v36 + 16) = xmmword_1001DE6A0;
            *(_QWORD *)(v36 + 32) = v34;
            aBlock[0] = v36;
            specialized Array._endMutation()(v36);
            v37 = aBlock[0];
            sub_100090EE8(0, &qword_1002706D8, off_100235E60);
            v38 = v34;
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v37);
            v40 = *(void **)(v6 + 40);
            v41 = v68;
            aBlock[4] = v67;
            v71 = v68;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_100177F4C;
            aBlock[3] = (uint64_t)&unk_10023D7A0;
            v42 = _Block_copy(aBlock);
            v43 = v71;
            v44 = v40;
            swift_retain(v41);
            swift_release(v43);
            objc_msgSend(v17, "writeCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v44, v42, 0.0);
            _Block_release(v42);

            return;
          }

        }
        v51 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v13, v6 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v64);
        v52 = v69;
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = (id)swift_slowAlloc(32, -1);
          aBlock[0] = (uint64_t)v69;
          *(_DWORD *)v55 = 136315138;
          v68 = v55 + 4;
          v56 = objc_msgSend(v52, "UUIDString");
          v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          v59 = v58;

          v72 = sub_1000906BC(v57, v59, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v68, v55 + 12);

          swift_bridgeObjectRelease(v59);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Unable to write characterisitic %s", v55, 0xCu);
          v60 = v69;
          swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v55, -1, -1);

          (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v64);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v51);
        }
        v61 = sub_1000ABB30();
        v62 = swift_allocError(&type metadata for DockdError, v61, 0, 0);
        *v63 = 1;
        swift_willThrow(v62);

      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v48 = sub_1000ABB30();
      v49 = swift_allocError(&type metadata for DockdError, v48, 0, 0);
      *v50 = 2;
      swift_willThrow(v49);

    }
  }
  else
  {
    v45 = sub_1000ABB30();
    v46 = swift_allocError(&type metadata for DockdError, v45, 0, 0);
    *v47 = 2;
    swift_willThrow(v46);
  }
}

uint64_t sub_10017E988(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v29 = a1;
  v30 = a2;
  v4 = sub_10009061C(&qword_1002706D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[3] = &type metadata for Bool;
  LOBYTE(v31[0]) = a3;
  v9 = (void *)objc_opt_self(CBUUID, v8);
  v10 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v11 = swift_allocObject(v10, 72, 7);
  v28 = xmmword_1001DE690;
  *(_OWORD *)(v11 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v11 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v11 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v11 + 32) = 259;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v11);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v15 = objc_msgSend(v9, "UUIDWithString:", v14);

  v16 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v16 + 16) = v28;
  *(_QWORD *)(v16 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v16 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v16 + 32) = 512;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  v20 = v18;
  v21 = v29;
  swift_bridgeObjectRelease(v20);
  v22 = objc_msgSend(v9, "UUIDWithString:", v19);

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  v23 = *(unsigned __int8 *)(v5 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = swift_allocObject(&unk_10023DBE8, v24 + v6, v23 | 7);
  v26 = v30;
  *(_QWORD *)(v25 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v25 + v24, v7, v4);
  swift_retain(v26);
  sub_10017E3F0(v31, v15, v22, (uint64_t)sub_1001855DC, (uint8_t *)v25);
  swift_release(v25);

  return sub_100090E88(v31);
}

void sub_10017EC0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(void *);
  uint64_t v7;

  v3 = (unint64_t)TrajectoryCommand.Progress.encode()();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback;
    v6 = *(void (**)(void *))(a2
                                       + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 8);
      swift_retain(v7);
      v6(v4);
      sub_1000B1410((uint64_t)v6, v7);
    }

  }
}

uint64_t sub_10017EC80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];

  v31 = a1;
  v32 = a2;
  v6 = sub_10009061C(&qword_1002706D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[3] = &type metadata for Data;
  v33[0] = a3;
  v33[1] = a4;
  v11 = (void *)objc_opt_self(CBUUID, v10);
  v12 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v13 = swift_allocObject(v12, 72, 7);
  v30 = xmmword_1001DE690;
  *(_OWORD *)(v13 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v13 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v13 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v13 + 32) = 265;
  sub_10009B27C(a3, a4);
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v13);
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v17 = objc_msgSend(v11, "UUIDWithString:", v16);

  v18 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v18 + 16) = v30;
  *(_QWORD *)(v18 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v18 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v18 + 32) = 512;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v18);
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  v22 = v20;
  v23 = v31;
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend(v11, "UUIDWithString:", v21);

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, v6);
  v25 = *(unsigned __int8 *)(v7 + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = swift_allocObject(&unk_10023D788, v26 + v8, v25 | 7);
  v28 = v32;
  *(_QWORD *)(v27 + 16) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v27 + v26, v9, v6);
  swift_retain(v28);
  sub_10017E3F0(v33, v17, v24, (uint64_t)sub_100180E60, (uint8_t *)v27);
  swift_release(v27);

  return sub_100090E88(v33);
}

void sub_10017EF18()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  id v43;
  _BYTE v44[88];

  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v1 = *(id *)(v0 + 24);
  sub_10015DAB8(v1);
  v43 = v2;

  if (!v43)
    return;
  v4 = *(void **)(v0 + 16);
  if (!v4)
  {

    return;
  }
  v5 = (id)objc_opt_self(CBUUID, v3);
  v6 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v7 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v7 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 32) = 512;
  v42 = v4;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v7);
  v9 = v8;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v41 = objc_msgSend(v5, "UUIDWithString:", v10);

  v11 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  v12 = *(void **)&v42[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
  if (!v12 || (v13 = objc_msgSend(v12, "services")) == 0)
  {

    return;
  }
  v14 = v13;
  v15 = sub_100090EE8(0, (unint64_t *)&unk_10026CF30, CBService_ptr);
  v16 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  v17 = (uint64_t)v41;
  v18 = (uint64_t)sub_1000F78A8((uint64_t)v16, v17);
  swift_bridgeObjectRelease(v16);

  if (!((unint64_t)v18 >> 62))
  {
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
LABEL_29:

    swift_bridgeObjectRelease(v18);
    return;
  }
  if (v18 < 0)
    v39 = v18;
  else
    v39 = v18 & 0xFFFFFFFFFFFFFF8;
  if (!_CocoaArrayWrapper.endIndex.getter(v39))
    goto LABEL_29;
LABEL_9:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_32:
      if (v17 < 0)
        v40 = v17;
      else
        v40 = v17 & 0xFFFFFFFFFFFFFF8;
      if (_CocoaArrayWrapper.endIndex.getter(v40))
        goto LABEL_16;
      goto LABEL_36;
    }
    v19 = *(id *)(v18 + 32);
  }
  v16 = v19;

  swift_bridgeObjectRelease(v18);
  v20 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v20 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v20 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v20 + 32) = 260;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend(v5, "UUIDWithString:", v23);

  if (!*(_QWORD *)&v42[v11] || (v25 = objc_msgSend(v16, "characteristics")) == 0)
  {

LABEL_24:
    return;
  }
  v26 = v25;
  v27 = sub_100090EE8(0, (unint64_t *)&unk_10026EAB0, CBCharacteristic_ptr);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  v5 = v24;
  v17 = (uint64_t)sub_1000F78A8(v28, (uint64_t)v5);
  swift_bridgeObjectRelease(v28);

  if ((unint64_t)v17 >> 62)
    goto LABEL_32;
  if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_36:

    swift_bridgeObjectRelease(v17);
    goto LABEL_24;
  }
LABEL_16:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
  }
  else
  {
    if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v29 = *(id *)(v17 + 32);
  }
  v30 = v29;

  swift_bridgeObjectRelease(v17);
  v31 = sub_10009061C((uint64_t *)&unk_10026E6C0);
  inited = swift_initStackObject(v31, v44);
  *(_OWORD *)(inited + 16) = xmmword_1001DEEB0;
  type metadata accessor for Actuator(0);
  *(_QWORD *)(inited + 32) = static Actuator.Yaw.getter();
  *(_QWORD *)(inited + 40) = v33;
  v34 = static Actuator.Pitch.getter();
  *(_QWORD *)(inited + 48) = v34;
  *(_QWORD *)(inited + 56) = v35;
  *(_QWORD *)(inited + 64) = static Actuator.Roll.getter(v34);
  *(_QWORD *)(inited + 72) = v36;
  v37 = v43;
  v38 = sub_1001835F8(inited);

  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 3, &type metadata for String);
  sub_1001783A4((uint64_t)v38, (uint64_t)&off_1002386A0, 256, (uint64_t)v30);

  swift_bridgeObjectRelease(v38);
}

uint64_t sub_10017F430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v27 = a1;
  v28 = a2;
  v2 = sub_10009061C(&qword_1002706D0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for Bool;
  LOBYTE(v29[0]) = 1;
  v7 = (void *)objc_opt_self(CBUUID, v6);
  v8 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v9 = swift_allocObject(v8, 72, 7);
  v26 = xmmword_1001DE690;
  *(_OWORD *)(v9 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v9 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 257;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v7, "UUIDWithString:", v12);

  v14 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v14 + 16) = v26;
  *(_QWORD *)(v14 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v14 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v14 + 32) = 256;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v14);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  v18 = v16;
  v19 = v27;
  swift_bridgeObjectRelease(v18);
  v20 = objc_msgSend(v7, "UUIDWithString:", v17);

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
  v21 = *(unsigned __int8 *)(v3 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = swift_allocObject(&unk_10023DC10, v22 + v4, v21 | 7);
  v24 = v28;
  *(_QWORD *)(v23 + 16) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v23 + v22, v5, v2);
  swift_retain(v24);
  sub_10017E3F0(v29, v13, v20, (uint64_t)sub_100185664, (uint8_t *)v23);
  swift_release(v23);

  return sub_100090E88(v29);
}

uint64_t sub_10017F6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v27 = a1;
  v28 = a2;
  v2 = sub_10009061C(&qword_1002706D0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for Bool;
  LOBYTE(v29[0]) = 1;
  v7 = (void *)objc_opt_self(CBUUID, v6);
  v8 = sub_10009061C((uint64_t *)&unk_10026E5E0);
  v9 = swift_allocObject(v8, 72, 7);
  v26 = xmmword_1001DE690;
  *(_OWORD *)(v9 + 16) = xmmword_1001DE690;
  *(_QWORD *)(v9 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 258;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v7, "UUIDWithString:", v12);

  v14 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v14 + 16) = v26;
  *(_QWORD *)(v14 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v14 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v14 + 32) = 256;
  String.init(format:_:)(0xD000000000000020, 0x80000001001FD670, v14);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  v18 = v16;
  v19 = v27;
  swift_bridgeObjectRelease(v18);
  v20 = objc_msgSend(v7, "UUIDWithString:", v17);

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
  v21 = *(unsigned __int8 *)(v3 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = swift_allocObject(&unk_10023DC38, v22 + v4, v21 | 7);
  v24 = v28;
  *(_QWORD *)(v23 + 16) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v23 + v22, v5, v2);
  swift_retain(v24);
  sub_10017E3F0(v29, v13, v20, (uint64_t)sub_1001856F4, (uint8_t *)v23);
  swift_release(v23);

  return sub_100090E88(v29);
}

uint64_t sub_10017F938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _BYTE v42[8];
  uint64_t v43;

  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v36 - v16;
  v18 = a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  if (a2)
  {
    v19((char *)&v36 - v16, v18, v11);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v39 = a4;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v38 = a5;
      v26 = v25;
      v43 = v25;
      *(_DWORD *)v24 = 136315138;
      v37 = v24 + 4;
      swift_getErrorValue(a2, v42, v41);
      v27 = Error.localizedDescription.getter(v41[1], v41[2]);
      v29 = v28;
      v40 = sub_1000906BC(v27, v28, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v37, v24 + 12);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v38, v24, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  else
  {
    v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v15, v18, v11);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, a6, v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  LOBYTE(v43) = a2 == 0;
  v34 = sub_10009061C(&qword_1002706D0);
  return CheckedContinuation.resume(returning:)(&v43, v34);
}

uint64_t sub_10017FC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback + 8);
  *v3 = a2;
  v3[1] = a3;
  sub_1000BC8F4(a2, a3);
  return sub_1000B1410(v4, v5);
}

uint64_t sub_10017FC60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  v3 = v1[1];
  *v1 = 0;
  v1[1] = 0;
  return sub_1000B1410(v2, v3);
}

uint64_t sub_10017FC98(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, _QWORD *, _QWORD *);
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v14[24];
  uint64_t v15;

  if (a3)
  {
    v8 = swift_allocObject(&unk_10023DBC0, 32, 7);
    *(_QWORD *)(v8 + 16) = a3;
    *(_QWORD *)(v8 + 24) = a4;
    v9 = sub_1001855AC;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks);
  swift_beginAccess(v10, v14, 33, 0);
  sub_1000BC8F4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v15 = *v10;
  *v10 = 0x8000000000000000;
  sub_1001BC404((uint64_t)v9, v8, a2, isUniquelyReferenced_nonNull_native);
  v12 = *v10;
  *v10 = v15;
  swift_bridgeObjectRelease(v12);
  return swift_endAccess(v14);
}

void sub_10017FD90(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _BYTE v19[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  swift_beginAccess(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks, v19, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v8 + 16))
  {
    sub_1001452C8(a2);
    if ((v9 & 1) != 0)
    {
      v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v13 = 67109120;
        v17 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4, v13 + 8);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "De-registering feedback callback for pid %d", v13, 8u);
        swift_slowDealloc(v13, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_beginAccess(v8, &v17, 33, 0);
      v14 = sub_1001B48A8(a2);
      v16 = v15;
      swift_endAccess(&v17);
      if (v14 >= 2)
        sub_1001779F8(v14, v16);
    }
  }
}

uint64_t sub_10017FF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v6);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    v20 = a2;
    v14 = v13;
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Registering trajectory progress feedback", v13, 2u);
    a2 = v20;
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback + 8);
  *v15 = a2;
  v15[1] = a3;
  sub_1000BC8F4(a2, a3);
  return sub_1000B1410(v16, v17);
}

id *sub_1001800BC()
{
  id *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = (char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager));
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager));
  sub_1000D4DE4(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8), *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16), (char)*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32), *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber + 8));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap));
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock));
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks));
  sub_1000B1410(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback + 8));
  sub_1000B1410(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback + 8));
  v3 = (char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100180240()
{
  uint64_t v0;

  sub_1001800BC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100180264()
{
  return type metadata accessor for DaemonAccessory(0);
}

uint64_t type metadata accessor for DaemonAccessory(uint64_t a1)
{
  uint64_t result;

  result = qword_100270208;
  if (!qword_100270208)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonAccessory);
  return result;
}

uint64_t sub_1001802A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[25];

  v5[0] = "\b";
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[2] = "\b";
  v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    v5[5] = "\b";
    v5[6] = "\b";
    v5[7] = "\b";
    v5[8] = &unk_1001E06D0;
    v5[9] = &unk_1001E06E8;
    v5[10] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[11] = &unk_1001E0700;
    v5[12] = &unk_1001E0700;
    v5[13] = &unk_1001E0700;
    v5[14] = &unk_1001E0700;
    v5[15] = &unk_1001E0718;
    v5[16] = &unk_1001E0718;
    v5[17] = &unk_1001E0718;
    v5[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[21] = &unk_1001E0700;
    v5[22] = &unk_1001E0700;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[23] = *(_QWORD *)(result - 8) + 64;
      v5[24] = &unk_1001E0718;
      return swift_updateClassMetadata2(a1, 256, 25, v5, a1 + 80);
    }
  }
  return result;
}

void destroy for SensorInfo(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s14dockaccessoryd10SensorInfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for SensorInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  return a1;
}

_QWORD *assignWithTake for SensorInfo(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for SensorInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SensorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SensorInfo()
{
  return &type metadata for SensorInfo;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10018059C + 4 * byte_1001E0669[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001805D0 + 4 * byte_1001E0664[v4]))();
}

uint64_t sub_1001805D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001805D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001805E0);
  return result;
}

uint64_t sub_1001805EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001805F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001805F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100180600(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingState()
{
  return &type metadata for AccessoryPairingState;
}

unint64_t sub_100180620()
{
  unint64_t result;

  result = qword_1002706C0;
  if (!qword_1002706C0)
  {
    result = swift_getWitnessTable(&unk_1001E07D0, &type metadata for AccessoryPairingState);
    atomic_store(result, (unint64_t *)&qword_1002706C0);
  }
  return result;
}

Swift::Int sub_100180664()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  v2 = *(id *)(v1 + 24);
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

void sub_1001806B4(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(*(_QWORD *)v1 + 24);
  NSObject.hash(into:)(a1);

}

Swift::Int sub_1001806FC()
{
  uint64_t v0;
  id v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v1 = *(id *)(*(_QWORD *)v0 + 24);
  NSObject.hash(into:)(v3);

  return Hasher._finalize()();
}

uint64_t sub_100180748(uint64_t *a1, uint64_t *a2)
{
  return sub_100180DEC(*a1, *a2);
}

uint64_t sub_100180754()
{
  return sub_100090E1C(&qword_1002706C8, type metadata accessor for DaemonAccessory, (uint64_t)&unk_1001E07F8);
}

uint64_t sub_100180780(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_BYTE *sub_1001807A0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_100180E74(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100180F34((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_100180FAC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_100180814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100180874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100180A58);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_100180A7C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100180AD8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_100180814((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_10009B2FC(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100180CA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x100180D00);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_100180CB8 + dword_100180D04[a4 >> 62]))(v5);
}

uint64_t sub_100180D14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_100180D24 + dword_100180DCC[a4 >> 62]))();
}

uint64_t sub_100180D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x100180DC4);
  }
  return ((uint64_t (*)(void))((char *)&loc_100180D74 + dword_100180DDC[a3]))();
}

uint64_t sub_100180DEC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[4];

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a2 + 24);
  v7[3] = type metadata accessor for DockCoreInfo(0);
  v7[0] = v3;
  v4 = v2;
  v5 = v3;
  LOBYTE(v2) = DockCoreInfo.isEqual(_:)(v7);

  sub_10009B2C0((uint64_t)v7, &qword_10026E5F0);
  return v2 & 1;
}

uint64_t sub_100180E60(uint64_t a1, uint64_t a2)
{
  return sub_1001855F0(a1, a2, "Unable to send trajectory %s", "Sent trajectory command to accessory");
}

uint64_t sub_100180E74(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_100180F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_100180FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10018102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100180814(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1001810E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100181124()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100181158 + *((int *)qword_100181218 + (v0 >> 62))))();
}

uint64_t sub_100181168@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_10009B27C(v2, v1);
      sub_100180A7C(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_100181228(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD);
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v53;
  void (**v54)(_QWORD, _QWORD);
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  dispatch_group_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  Class isa;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  id v84;
  id v85;
  NSObject *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD, uint8_t *);
  uint8_t *v91;
  char *v92;
  void (*v93)(_QWORD *, uint8_t *);
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  dispatch_group_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t aBlock[5];
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;

  v115 = a1;
  v112 = (uint8_t *)type metadata accessor for DispatchTimeInterval(0);
  v109 = *((_QWORD *)v112 - 1);
  __chkstk_darwin(v112);
  v106 = (uint64_t *)((char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v108 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v107 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v110 = (char *)&v98 - v14;
  __chkstk_darwin(v13);
  v111 = (char *)&v98 - v15;
  v114 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v114 - 8);
  v17 = __chkstk_darwin(v114);
  v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v98 - v20;
  v23 = swift_allocObject(&unk_10023D800, 32, 7);
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  v113 = a3;
  v24 = *(void **)(a3 + 32);
  if (v24
    && (v25 = objc_opt_self(HAPAccessoryServerBTLE, v22), (v26 = swift_dynamicCastObjCClass(v24, v25)) != 0))
  {
    v105 = v23;
    v27 = (void *)v26;
    swift_retain(a4);
    swift_retain(a5);
    v28 = v24;
    v103 = v27;
    v104 = v28;
    v29 = objc_msgSend(v27, "primaryAccessory");
    if (!v29)
      goto LABEL_12;
    v30 = v29;
    v31 = objc_msgSend(v115, "UUIDString");
    v102 = v10;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v33 = v32;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
    }
    v34 = objc_msgSend(a2, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = objc_msgSend(v30, "characteristicOfType:serviceType:", v31, v34);

    v101 = v37;
    if (v37)
    {
      v100 = dispatch_group_create();
      v38 = v114;
      v39 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v40 = v115;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v99 = v43 + 4;
        v45 = objc_msgSend(v40, "UUIDString");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v115 = v39;
        v48 = v47;

        v118 = sub_1000906BC(v46, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99, v43 + 12);

        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Reading characteristic %s...", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v19, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v39)[1](v19, v38);
      }
      v71 = v105;
      v72 = v100;
      dispatch_group_enter(v100);
      v73 = sub_10009061C(&qword_10026C340);
      v74 = swift_allocObject(v73, 40, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1001DE6A0;
      v75 = v101;
      *(_QWORD *)(v74 + 32) = v101;
      aBlock[0] = v74;
      specialized Array._endMutation()(v74);
      v76 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v77 = v75;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v76);
      v79 = v113;
      v80 = *(void **)(v113 + 40);
      v81 = (_QWORD *)swift_allocObject(&unk_10023D828, 56, 7);
      v81[2] = v79;
      v81[3] = v40;
      v81[4] = sub_100183728;
      v81[5] = v71;
      v81[6] = v72;
      aBlock[4] = (uint64_t)sub_100183734;
      v117 = v81;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023D840;
      v82 = _Block_copy(aBlock);
      v83 = v117;
      v84 = v40;
      v85 = v80;
      swift_retain(v79);
      swift_retain(v71);
      v86 = v72;
      swift_release(v83);
      objc_msgSend(v103, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v85, v82, 10.0);
      _Block_release(v82);

      v87 = v107;
      static DispatchTime.now()();
      v88 = v106;
      *v106 = 10;
      v89 = v109;
      v90 = *(void (**)(_QWORD *, _QWORD, uint8_t *))(v109 + 104);
      v91 = v112;
      v90(v88, enum case for DispatchTimeInterval.seconds(_:), v112);
      v92 = v110;
      + infix(_:_:)(v87, v88);
      v93 = *(void (**)(_QWORD *, uint8_t *))(v89 + 8);
      v93(v88, v91);
      v94 = *(void (**)(char *, uint64_t))(v108 + 8);
      v95 = v87;
      v96 = v102;
      v94(v95, v102);
      *v88 = 500;
      v90(v88, enum case for DispatchTimeInterval.milliseconds(_:), v91);
      v97 = v111;
      + infix(_:_:)(v92, v88);
      v93(v88, v91);
      v94(v92, v96);
      OS_dispatch_group.wait(timeout:)(v97);

      v94(v97, v96);
      v70 = v71;
    }
    else
    {
LABEL_12:
      v53 = v114;
      v54 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v55 = v115;
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v115 = v54;
        aBlock[0] = v113;
        *(_DWORD *)v58 = 136315138;
        v59 = v58 + 12;
        v111 = (char *)(v58 + 4);
        v112 = v58;
        v60 = objc_msgSend(v55, "UUIDString");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v118 = sub_1000906BC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v111, v59);

        swift_bridgeObjectRelease(v63);
        v64 = v112;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory does not contain characteristic %s!", v112, 0xCu);
        v65 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v21, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v54)[1](v21, v53);
      }
      v66 = v105;
      v67 = sub_1000ABB30();
      v68 = swift_allocError(&type metadata for DockdError, v67, 0, 0);
      *v69 = 1;
      sub_10017DEE0(0, v68, a4, a5);

      swift_errorRelease(v68);
      v70 = v66;
    }
    return swift_release(v70);
  }
  else
  {
    v49 = sub_1000ABB30();
    v50 = swift_allocError(&type metadata for DockdError, v49, 0, 0);
    *v51 = 1;
    swift_retain(a4);
    swift_retain(a5);
    sub_10017DEE0(0, v50, a4, a5);
    swift_errorRelease(v50);
    return swift_release(v23);
  }
}

uint64_t sub_100181B1C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD);
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v53;
  void (**v54)(_QWORD, _QWORD);
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  dispatch_group_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  Class isa;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  id v84;
  id v85;
  NSObject *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD, uint8_t *);
  uint8_t *v91;
  char *v92;
  void (*v93)(_QWORD *, uint8_t *);
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  dispatch_group_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t aBlock[5];
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;

  v115 = a1;
  v112 = (uint8_t *)type metadata accessor for DispatchTimeInterval(0);
  v109 = *((_QWORD *)v112 - 1);
  __chkstk_darwin(v112);
  v106 = (uint64_t *)((char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v108 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v107 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v110 = (char *)&v98 - v14;
  __chkstk_darwin(v13);
  v111 = (char *)&v98 - v15;
  v114 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v114 - 8);
  v17 = __chkstk_darwin(v114);
  v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v98 - v20;
  v23 = swift_allocObject(&unk_10023DAD0, 32, 7);
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  v113 = a3;
  v24 = *(void **)(a3 + 32);
  if (v24
    && (v25 = objc_opt_self(HAPAccessoryServerBTLE, v22), (v26 = swift_dynamicCastObjCClass(v24, v25)) != 0))
  {
    v105 = v23;
    v27 = (void *)v26;
    swift_retain(a4);
    swift_retain(a5);
    v28 = v24;
    v103 = v27;
    v104 = v28;
    v29 = objc_msgSend(v27, "primaryAccessory");
    if (!v29)
      goto LABEL_12;
    v30 = v29;
    v31 = objc_msgSend(v115, "UUIDString");
    v102 = v10;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v33 = v32;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
    }
    v34 = objc_msgSend(a2, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = objc_msgSend(v30, "characteristicOfType:serviceType:", v31, v34);

    v101 = v37;
    if (v37)
    {
      v100 = dispatch_group_create();
      v38 = v114;
      v39 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v40 = v115;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v99 = v43 + 4;
        v45 = objc_msgSend(v40, "UUIDString");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v115 = v39;
        v48 = v47;

        v118 = sub_1000906BC(v46, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99, v43 + 12);

        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Reading characteristic %s...", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v19, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v39)[1](v19, v38);
      }
      v71 = v105;
      v72 = v100;
      dispatch_group_enter(v100);
      v73 = sub_10009061C(&qword_10026C340);
      v74 = swift_allocObject(v73, 40, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1001DE6A0;
      v75 = v101;
      *(_QWORD *)(v74 + 32) = v101;
      aBlock[0] = v74;
      specialized Array._endMutation()(v74);
      v76 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v77 = v75;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v76);
      v79 = v113;
      v80 = *(void **)(v113 + 40);
      v81 = (_QWORD *)swift_allocObject(&unk_10023DAF8, 56, 7);
      v81[2] = v79;
      v81[3] = v40;
      v81[4] = sub_1001854D0;
      v81[5] = v71;
      v81[6] = v72;
      aBlock[4] = (uint64_t)sub_100183734;
      v117 = v81;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023DB10;
      v82 = _Block_copy(aBlock);
      v83 = v117;
      v84 = v40;
      v85 = v80;
      swift_retain(v79);
      swift_retain(v71);
      v86 = v72;
      swift_release(v83);
      objc_msgSend(v103, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v85, v82, 10.0);
      _Block_release(v82);

      v87 = v107;
      static DispatchTime.now()();
      v88 = v106;
      *v106 = 10;
      v89 = v109;
      v90 = *(void (**)(_QWORD *, _QWORD, uint8_t *))(v109 + 104);
      v91 = v112;
      v90(v88, enum case for DispatchTimeInterval.seconds(_:), v112);
      v92 = v110;
      + infix(_:_:)(v87, v88);
      v93 = *(void (**)(_QWORD *, uint8_t *))(v89 + 8);
      v93(v88, v91);
      v94 = *(void (**)(char *, uint64_t))(v108 + 8);
      v95 = v87;
      v96 = v102;
      v94(v95, v102);
      *v88 = 500;
      v90(v88, enum case for DispatchTimeInterval.milliseconds(_:), v91);
      v97 = v111;
      + infix(_:_:)(v92, v88);
      v93(v88, v91);
      v94(v92, v96);
      OS_dispatch_group.wait(timeout:)(v97);

      v94(v97, v96);
      v70 = v71;
    }
    else
    {
LABEL_12:
      v53 = v114;
      v54 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v55 = v115;
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v115 = v54;
        aBlock[0] = v113;
        *(_DWORD *)v58 = 136315138;
        v59 = v58 + 12;
        v111 = (char *)(v58 + 4);
        v112 = v58;
        v60 = objc_msgSend(v55, "UUIDString");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v118 = sub_1000906BC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v111, v59);

        swift_bridgeObjectRelease(v63);
        v64 = v112;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory does not contain characteristic %s!", v112, 0xCu);
        v65 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v21, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v54)[1](v21, v53);
      }
      v66 = v105;
      v67 = sub_1000ABB30();
      v68 = swift_allocError(&type metadata for DockdError, v67, 0, 0);
      *v69 = 1;
      sub_1001786A0(0, v68, a4, a5);

      swift_errorRelease(v68);
      v70 = v66;
    }
    return swift_release(v70);
  }
  else
  {
    v49 = sub_1000ABB30();
    v50 = swift_allocError(&type metadata for DockdError, v49, 0, 0);
    *v51 = 1;
    swift_retain(a4);
    swift_retain(a5);
    sub_1001786A0(0, v50, a4, a5);
    swift_errorRelease(v50);
    return swift_release(v23);
  }
}

uint64_t sub_100182410(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD);
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v53;
  void (**v54)(_QWORD, _QWORD);
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  dispatch_group_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  Class isa;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  id v84;
  id v85;
  NSObject *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD, uint8_t *);
  uint8_t *v91;
  char *v92;
  void (*v93)(_QWORD *, uint8_t *);
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  dispatch_group_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t aBlock[5];
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;

  v115 = a1;
  v112 = (uint8_t *)type metadata accessor for DispatchTimeInterval(0);
  v109 = *((_QWORD *)v112 - 1);
  __chkstk_darwin(v112);
  v106 = (uint64_t *)((char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v108 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v107 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v110 = (char *)&v98 - v14;
  __chkstk_darwin(v13);
  v111 = (char *)&v98 - v15;
  v114 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v114 - 8);
  v17 = __chkstk_darwin(v114);
  v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v98 - v20;
  v23 = swift_allocObject(&unk_10023DA58, 32, 7);
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  v113 = a3;
  v24 = *(void **)(a3 + 32);
  if (v24
    && (v25 = objc_opt_self(HAPAccessoryServerBTLE, v22), (v26 = swift_dynamicCastObjCClass(v24, v25)) != 0))
  {
    v105 = v23;
    v27 = (void *)v26;
    swift_retain(a4);
    swift_retain(a5);
    v28 = v24;
    v103 = v27;
    v104 = v28;
    v29 = objc_msgSend(v27, "primaryAccessory");
    if (!v29)
      goto LABEL_12;
    v30 = v29;
    v31 = objc_msgSend(v115, "UUIDString");
    v102 = v10;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v33 = v32;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
    }
    v34 = objc_msgSend(a2, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = objc_msgSend(v30, "characteristicOfType:serviceType:", v31, v34);

    v101 = v37;
    if (v37)
    {
      v100 = dispatch_group_create();
      v38 = v114;
      v39 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v40 = v115;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v99 = v43 + 4;
        v45 = objc_msgSend(v40, "UUIDString");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v115 = v39;
        v48 = v47;

        v118 = sub_1000906BC(v46, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99, v43 + 12);

        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Reading characteristic %s...", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v19, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v39)[1](v19, v38);
      }
      v71 = v105;
      v72 = v100;
      dispatch_group_enter(v100);
      v73 = sub_10009061C(&qword_10026C340);
      v74 = swift_allocObject(v73, 40, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1001DE6A0;
      v75 = v101;
      *(_QWORD *)(v74 + 32) = v101;
      aBlock[0] = v74;
      specialized Array._endMutation()(v74);
      v76 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v77 = v75;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v76);
      v79 = v113;
      v80 = *(void **)(v113 + 40);
      v81 = (_QWORD *)swift_allocObject(&unk_10023DA80, 56, 7);
      v81[2] = v79;
      v81[3] = v40;
      v81[4] = sub_1001854C0;
      v81[5] = v71;
      v81[6] = v72;
      aBlock[4] = (uint64_t)sub_100183734;
      v117 = v81;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023DA98;
      v82 = _Block_copy(aBlock);
      v83 = v117;
      v84 = v40;
      v85 = v80;
      swift_retain(v79);
      swift_retain(v71);
      v86 = v72;
      swift_release(v83);
      objc_msgSend(v103, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v85, v82, 10.0);
      _Block_release(v82);

      v87 = v107;
      static DispatchTime.now()();
      v88 = v106;
      *v106 = 10;
      v89 = v109;
      v90 = *(void (**)(_QWORD *, _QWORD, uint8_t *))(v109 + 104);
      v91 = v112;
      v90(v88, enum case for DispatchTimeInterval.seconds(_:), v112);
      v92 = v110;
      + infix(_:_:)(v87, v88);
      v93 = *(void (**)(_QWORD *, uint8_t *))(v89 + 8);
      v93(v88, v91);
      v94 = *(void (**)(char *, uint64_t))(v108 + 8);
      v95 = v87;
      v96 = v102;
      v94(v95, v102);
      *v88 = 500;
      v90(v88, enum case for DispatchTimeInterval.milliseconds(_:), v91);
      v97 = v111;
      + infix(_:_:)(v92, v88);
      v93(v88, v91);
      v94(v92, v96);
      OS_dispatch_group.wait(timeout:)(v97);

      v94(v97, v96);
      v70 = v71;
    }
    else
    {
LABEL_12:
      v53 = v114;
      v54 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v55 = v115;
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v115 = v54;
        aBlock[0] = v113;
        *(_DWORD *)v58 = 136315138;
        v59 = v58 + 12;
        v111 = (char *)(v58 + 4);
        v112 = v58;
        v60 = objc_msgSend(v55, "UUIDString");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v118 = sub_1000906BC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v111, v59);

        swift_bridgeObjectRelease(v63);
        v64 = v112;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory does not contain characteristic %s!", v112, 0xCu);
        v65 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v21, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v54)[1](v21, v53);
      }
      v66 = v105;
      v67 = sub_1000ABB30();
      v68 = swift_allocError(&type metadata for DockdError, v67, 0, 0);
      *v69 = 1;
      sub_1001AAED8(0, v68, a4, a5);

      swift_errorRelease(v68);
      v70 = v66;
    }
    return swift_release(v70);
  }
  else
  {
    v49 = sub_1000ABB30();
    v50 = swift_allocError(&type metadata for DockdError, v49, 0, 0);
    *v51 = 1;
    swift_retain(a4);
    swift_retain(a5);
    sub_1001AAED8(0, v50, a4, a5);
    swift_errorRelease(v50);
    return swift_release(v23);
  }
}

uint64_t sub_100182D04(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD);
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v53;
  void (**v54)(_QWORD, _QWORD);
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  dispatch_group_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  Class isa;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  id v84;
  id v85;
  NSObject *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD, uint8_t *);
  uint8_t *v91;
  char *v92;
  void (*v93)(_QWORD *, uint8_t *);
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  dispatch_group_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t aBlock[5];
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;

  v115 = a1;
  v112 = (uint8_t *)type metadata accessor for DispatchTimeInterval(0);
  v109 = *((_QWORD *)v112 - 1);
  __chkstk_darwin(v112);
  v106 = (uint64_t *)((char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v108 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v107 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v110 = (char *)&v98 - v14;
  __chkstk_darwin(v13);
  v111 = (char *)&v98 - v15;
  v114 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v114 - 8);
  v17 = __chkstk_darwin(v114);
  v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v98 - v20;
  v23 = swift_allocObject(&unk_10023D9E0, 32, 7);
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  v113 = a3;
  v24 = *(void **)(a3 + 32);
  if (v24
    && (v25 = objc_opt_self(HAPAccessoryServerBTLE, v22), (v26 = swift_dynamicCastObjCClass(v24, v25)) != 0))
  {
    v105 = v23;
    v27 = (void *)v26;
    swift_retain(a4);
    swift_retain(a5);
    v28 = v24;
    v103 = v27;
    v104 = v28;
    v29 = objc_msgSend(v27, "primaryAccessory");
    if (!v29)
      goto LABEL_12;
    v30 = v29;
    v31 = objc_msgSend(v115, "UUIDString");
    v102 = v10;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v33 = v32;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
    }
    v34 = objc_msgSend(a2, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = objc_msgSend(v30, "characteristicOfType:serviceType:", v31, v34);

    v101 = v37;
    if (v37)
    {
      v100 = dispatch_group_create();
      v38 = v114;
      v39 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v40 = v115;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v99 = v43 + 4;
        v45 = objc_msgSend(v40, "UUIDString");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v115 = v39;
        v48 = v47;

        v118 = sub_1000906BC(v46, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99, v43 + 12);

        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Reading characteristic %s...", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v19, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v39)[1](v19, v38);
      }
      v71 = v105;
      v72 = v100;
      dispatch_group_enter(v100);
      v73 = sub_10009061C(&qword_10026C340);
      v74 = swift_allocObject(v73, 40, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1001DE6A0;
      v75 = v101;
      *(_QWORD *)(v74 + 32) = v101;
      aBlock[0] = v74;
      specialized Array._endMutation()(v74);
      v76 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v77 = v75;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v76);
      v79 = v113;
      v80 = *(void **)(v113 + 40);
      v81 = (_QWORD *)swift_allocObject(&unk_10023DA08, 56, 7);
      v81[2] = v79;
      v81[3] = v40;
      v81[4] = sub_1001854B0;
      v81[5] = v71;
      v81[6] = v72;
      aBlock[4] = (uint64_t)sub_100183734;
      v117 = v81;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023DA20;
      v82 = _Block_copy(aBlock);
      v83 = v117;
      v84 = v40;
      v85 = v80;
      swift_retain(v79);
      swift_retain(v71);
      v86 = v72;
      swift_release(v83);
      objc_msgSend(v103, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v85, v82, 10.0);
      _Block_release(v82);

      v87 = v107;
      static DispatchTime.now()();
      v88 = v106;
      *v106 = 10;
      v89 = v109;
      v90 = *(void (**)(_QWORD *, _QWORD, uint8_t *))(v109 + 104);
      v91 = v112;
      v90(v88, enum case for DispatchTimeInterval.seconds(_:), v112);
      v92 = v110;
      + infix(_:_:)(v87, v88);
      v93 = *(void (**)(_QWORD *, uint8_t *))(v89 + 8);
      v93(v88, v91);
      v94 = *(void (**)(char *, uint64_t))(v108 + 8);
      v95 = v87;
      v96 = v102;
      v94(v95, v102);
      *v88 = 500;
      v90(v88, enum case for DispatchTimeInterval.milliseconds(_:), v91);
      v97 = v111;
      + infix(_:_:)(v92, v88);
      v93(v88, v91);
      v94(v92, v96);
      OS_dispatch_group.wait(timeout:)(v97);

      v94(v97, v96);
      v70 = v71;
    }
    else
    {
LABEL_12:
      v53 = v114;
      v54 = (void (**)(_QWORD, _QWORD))v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v113 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v114);
      v55 = v115;
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v115 = v54;
        aBlock[0] = v113;
        *(_DWORD *)v58 = 136315138;
        v59 = v58 + 12;
        v111 = (char *)(v58 + 4);
        v112 = v58;
        v60 = objc_msgSend(v55, "UUIDString");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v118 = sub_1000906BC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v111, v59);

        swift_bridgeObjectRelease(v63);
        v64 = v112;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory does not contain characteristic %s!", v112, 0xCu);
        v65 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        (*((void (**)(char *, uint64_t))v115 + 1))(v21, v114);
      }
      else
      {

        ((void (**)(char *, uint64_t))v54)[1](v21, v53);
      }
      v66 = v105;
      v67 = sub_1000ABB30();
      v68 = swift_allocError(&type metadata for DockdError, v67, 0, 0);
      *v69 = 1;
      sub_1001AB3F0(0, v68, a4, a5);

      swift_errorRelease(v68);
      v70 = v66;
    }
    return swift_release(v70);
  }
  else
  {
    v49 = sub_1000ABB30();
    v50 = swift_allocError(&type metadata for DockdError, v49, 0, 0);
    *v51 = 1;
    swift_retain(a4);
    swift_retain(a5);
    sub_1001AB3F0(0, v50, a4, a5);
    swift_errorRelease(v50);
    return swift_release(v23);
  }
}

_QWORD *sub_1001835F8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1001A50E4(0, v1, 0);
    v3 = (_QWORD *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      v6 = dispatch thunk of DockCoreAccessory.getActuator(name:)(v4);
      if (v6)
      {
        v8 = (void *)v6;
        v9 = dispatch thunk of Component.id.getter(v7);
        swift_bridgeObjectRelease(v5);

      }
      else
      {
        swift_bridgeObjectRelease(v5);
        v9 = 0;
      }
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_1001A50E4(v10 > 1, v11 + 1, 1);
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v9;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10018370C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10018371C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100183728(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10017DEE0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100183738()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018375C(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  dispatch_group_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint8_t *v65;
  uint8_t *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  os_log_t v72;
  uint8_t *v73;
  dispatch_group_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  Class isa;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  _QWORD *v87;
  NSObject *v88;
  id v89;
  NSObject *v90;
  char *v91;
  uint8_t *v92;
  _QWORD *v93;
  uint64_t v94;
  void (*v95)(_QWORD *, _QWORD, uint8_t *);
  char *v96;
  void (*v97)(_QWORD *, uint8_t *);
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  os_log_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  id v107;
  id v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  os_log_t v113;
  _QWORD *v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  dispatch_group_t v119;
  uint64_t aBlock[5];
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;

  v119 = a1;
  v115 = (uint8_t *)type metadata accessor for DispatchTimeInterval(0);
  v111 = *((_QWORD *)v115 - 1);
  __chkstk_darwin(v115);
  v114 = (uint64_t *)((char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v110 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v109 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v112 = (char *)&v102 - v18;
  __chkstk_darwin(v17);
  v113 = (os_log_t)((char *)&v102 - v19);
  v20 = type metadata accessor for Logger(0);
  v117 = *(_QWORD *)(v20 - 8);
  v118 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v102 - v24;
  v27 = (_QWORD *)swift_allocObject(&unk_10023D8A0, 48, 7);
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = a7;
  v116 = a3;
  v28 = *(void **)(a3 + 32);
  if (v28
    && (v29 = objc_opt_self(HAPAccessoryServerBTLE, v26), (v30 = swift_dynamicCastObjCClass(v28, v29)) != 0))
  {
    v106 = v14;
    v31 = (void *)v30;
    swift_retain(a4);
    swift_retain(a5);
    swift_retain(a6);
    v107 = a7;
    v108 = v28;
    v105 = v31;
    v32 = objc_msgSend(v31, "primaryAccessory");
    if (!v32)
      goto LABEL_12;
    v33 = v32;
    v34 = -[NSObject UUIDString](v119, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = objc_msgSend(a2, "UUIDString");
    if (!v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v39 = v38;
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
    }
    v40 = objc_msgSend(v33, "characteristicOfType:serviceType:", v34, v37);

    if (v40)
    {
      v107 = v40;
      v41 = dispatch_group_create();
      v42 = v117;
      v43 = v118;
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v23, v116 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v118);
      v44 = v119;
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        v104 = swift_slowAlloc(32, -1);
        aBlock[0] = v104;
        *(_DWORD *)v47 = 136315138;
        v103 = v47 + 4;
        v48 = -[NSObject UUIDString](v44, "UUIDString");
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v119 = v41;
        v51 = v50;

        v122 = sub_1000906BC(v49, v51, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v103, v47 + 12);

        v52 = v51;
        v41 = v119;
        swift_bridgeObjectRelease(v52);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Reading characteristic %s...", v47, 0xCu);
        v53 = v104;
        swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v47, -1, -1);

        (*(void (**)(char *, uint64_t))(v117 + 8))(v23, v118);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v43);
      }
      dispatch_group_enter(v41);
      v78 = sub_10009061C(&qword_10026C340);
      v79 = swift_allocObject(v78, 40, 7);
      *(_OWORD *)(v79 + 16) = xmmword_1001DE6A0;
      v80 = v107;
      *(_QWORD *)(v79 + 32) = v107;
      aBlock[0] = v79;
      specialized Array._endMutation()(v79);
      v81 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v119 = v80;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v81);
      v83 = v116;
      v84 = *(void **)(v116 + 40);
      v85 = (_QWORD *)swift_allocObject(&unk_10023D8C8, 56, 7);
      v85[2] = v83;
      v85[3] = v44;
      v85[4] = sub_1001840C4;
      v85[5] = v27;
      v85[6] = v41;
      aBlock[4] = (uint64_t)sub_100183734;
      v121 = v85;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023D8E0;
      v86 = _Block_copy(aBlock);
      v87 = v121;
      v88 = v44;
      v89 = v84;
      swift_retain(v83);
      swift_retain(v27);
      v90 = v41;
      swift_release(v87);
      objc_msgSend(v105, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v89, v86, 10.0);
      _Block_release(v86);

      v91 = v109;
      static DispatchTime.now()();
      v93 = v114;
      v92 = v115;
      *v114 = 10;
      v94 = v111;
      v95 = *(void (**)(_QWORD *, _QWORD, uint8_t *))(v111 + 104);
      v95(v93, enum case for DispatchTimeInterval.seconds(_:), v92);
      v96 = v112;
      + infix(_:_:)(v91, v93);
      v97 = *(void (**)(_QWORD *, uint8_t *))(v94 + 8);
      v97(v93, v92);
      v98 = *(void (**)(char *, uint64_t))(v110 + 8);
      v99 = v91;
      v100 = v106;
      v98(v99, v106);
      *v93 = 500;
      v95(v93, enum case for DispatchTimeInterval.milliseconds(_:), v92);
      v101 = v113;
      + infix(_:_:)(v96, v93);
      v97(v93, v92);
      v98(v96, v100);
      OS_dispatch_group.wait(timeout:)(v101);

      v98((char *)v101, v100);
    }
    else
    {
LABEL_12:
      v58 = v117;
      v59 = v118;
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v25, v116 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v118);
      v60 = v119;
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter();
      v63 = v62;
      if (os_log_type_enabled(v61, v62))
      {
        v64 = swift_slowAlloc(12, -1);
        LODWORD(v116) = v63;
        v65 = (uint8_t *)v64;
        v119 = (dispatch_group_t)swift_slowAlloc(32, -1);
        aBlock[0] = (uint64_t)v119;
        *(_DWORD *)v65 = 136315138;
        v66 = v65 + 12;
        v114 = v65 + 4;
        v115 = v65;
        v67 = -[NSObject UUIDString](v60, "UUIDString");
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v113 = v61;
        v69 = v68;
        v71 = v70;

        v122 = sub_1000906BC(v69, v71, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v114, v66);

        swift_bridgeObjectRelease(v71);
        v72 = v113;
        v73 = v115;
        _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v116, "Accessory does not contain characteristic %s!", v115, 0xCu);
        v74 = v119;
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v73, -1, -1);

        (*(void (**)(char *, uint64_t))(v117 + 8))(v25, v118);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v59);
      }
      v75 = sub_1000ABB30();
      v76 = swift_allocError(&type metadata for DockdError, v75, 0, 0);
      *v77 = 1;
      sub_10017CC84(0, v76, a4, a5, a6, v107);

      swift_errorRelease(v76);
    }
    return swift_release(v27);
  }
  else
  {
    v54 = sub_1000ABB30();
    v55 = swift_allocError(&type metadata for DockdError, v54, 0, 0);
    *v56 = 1;
    swift_retain(a4);
    swift_retain(a5);
    swift_retain(a6);
    sub_10017CC84(0, v55, a4, a5, a6, a7);
    swift_errorRelease(v55);
    return swift_release(v27);
  }
}

uint64_t sub_100184088()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1001840C4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10017CC84(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1001840D4()
{
  return sub_1001854F0((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001840E8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1002706EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10009B0EC;
  v2 = (_QWORD *)swift_task_alloc(dword_100270224);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10009B0EC;
  return sub_100179530();
}

uint64_t sub_100184150(void *a1)
{
  uint64_t v1;

  return sub_10017AF7C(a1, v1);
}

uint64_t sub_100184158(uint64_t a1)
{
  uint64_t v1;

  return sub_10017A208(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100184160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009061C(&qword_1002706F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001841C4(uint64_t a1, uint64_t a2)
{
  sub_10009061C(&qword_1002706F8);
  return sub_10017A474(a1, a2);
}

uint64_t sub_100184214(uint8_t *a1, uint8_t *a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint8_t *v31;
  id v32;
  void *v33;
  NSString v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  NSObject *v66;
  os_log_type_t v67;
  int v68;
  uint64_t v69;
  uint8_t *v70;
  uint8_t *v71;
  id v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  os_log_t v80;
  uint8_t *v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  dispatch_group_t v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  Class isa;
  uint64_t v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  uint8_t *v96;
  id v97;
  NSObject *v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void (*v103)(_QWORD *, _QWORD, uint64_t);
  uint64_t v104;
  char *v105;
  void (*v106)(_QWORD *, uint64_t);
  void (*v107)(char *, uint64_t);
  char *v108;
  uint64_t v109;
  os_log_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  os_log_t v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  dispatch_group_t v128;
  uint64_t aBlock[5];
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;

  v123 = a2;
  v127 = a1;
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v120 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v119 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v118 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v121 = (char *)&v111 - v17;
  __chkstk_darwin(v16);
  v122 = (os_log_t)((char *)&v111 - v18);
  v19 = type metadata accessor for Logger(0);
  v125 = *(_QWORD *)(v19 - 8);
  v126 = v19;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v111 - v23;
  v26 = (_QWORD *)swift_allocObject(&unk_10023DB48, 40, 7);
  v26[2] = a4;
  v26[3] = a5;
  v128 = a5;
  v26[4] = a6;
  v124 = a3;
  v27 = *(void **)(a3 + 32);
  if (v27
    && (v28 = objc_opt_self(HAPAccessoryServerBTLE, v25), (v29 = swift_dynamicCastObjCClass(v27, v28)) != 0))
  {
    v30 = (void *)v29;
    v114 = v12;
    v115 = v10;
    v116 = v13;
    swift_retain(a4);
    swift_bridgeObjectRetain(a6);
    v31 = v27;
    v32 = objc_msgSend(v30, "primaryAccessory");
    if (!v32)
      goto LABEL_12;
    v33 = v32;
    v117 = v30;
    v34 = -[uint8_t UUIDString](v127, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v35 = v31;
      v37 = v36;
      v34 = String._bridgeToObjectiveC()();
      v38 = v37;
      v31 = v35;
      swift_bridgeObjectRelease(v38);
    }
    v39 = -[uint8_t UUIDString](v123, "UUIDString");
    if (!v39)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v40 = v31;
      v42 = v41;
      v39 = String._bridgeToObjectiveC()();
      v43 = v42;
      v31 = v40;
      swift_bridgeObjectRelease(v43);
    }
    v44 = (uint8_t *)objc_msgSend(v33, "characteristicOfType:serviceType:", v34, v39);

    v45 = v117;
    if (v44)
    {
      v123 = v44;
      v128 = dispatch_group_create();
      v46 = v125;
      v47 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v22, v124 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v126);
      v48 = v127;
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        aBlock[0] = v113;
        *(_DWORD *)v51 = 136315138;
        v112 = v51 + 4;
        v52 = -[uint8_t UUIDString](v48, "UUIDString");
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v127 = v31;
        v55 = v54;

        v56 = v53;
        v45 = v117;
        v131 = sub_1000906BC(v56, v55, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v112, v51 + 12);

        v57 = v55;
        v31 = v127;
        swift_bridgeObjectRelease(v57);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Reading characteristic %s...", v51, 0xCu);
        v58 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v51, -1, -1);

        (*(void (**)(char *, uint64_t))(v125 + 8))(v22, v126);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v47);
      }
      v85 = v128;
      dispatch_group_enter(v128);
      v86 = sub_10009061C(&qword_10026C340);
      v87 = swift_allocObject(v86, 40, 7);
      *(_OWORD *)(v87 + 16) = xmmword_1001DE6A0;
      v88 = v123;
      *(_QWORD *)(v87 + 32) = v123;
      aBlock[0] = v87;
      specialized Array._endMutation()(v87);
      v89 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v127 = v88;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v89);
      v91 = v124;
      v92 = *(void **)(v124 + 40);
      v93 = (_QWORD *)swift_allocObject(&unk_10023DB70, 56, 7);
      v93[2] = v91;
      v93[3] = v48;
      v93[4] = sub_10018552C;
      v93[5] = v26;
      v93[6] = v85;
      aBlock[4] = (uint64_t)sub_100183734;
      v130 = v93;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023DB88;
      v94 = _Block_copy(aBlock);
      v95 = v130;
      v96 = v48;
      v97 = v92;
      swift_retain(v91);
      swift_retain(v26);
      v98 = v85;
      swift_release(v95);
      objc_msgSend(v45, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v97, v94, 10.0);
      _Block_release(v94);

      v99 = v118;
      static DispatchTime.now()(v100);
      v101 = v114;
      *v114 = 10;
      v102 = v120;
      v103 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v120 + 104);
      v104 = v115;
      v103(v101, enum case for DispatchTimeInterval.seconds(_:), v115);
      v105 = v121;
      + infix(_:_:)(v99, v101);
      v106 = *(void (**)(_QWORD *, uint64_t))(v102 + 8);
      v106(v101, v104);
      v107 = *(void (**)(char *, uint64_t))(v119 + 8);
      v108 = v99;
      v109 = v116;
      v107(v108, v116);
      *v101 = 500;
      v103(v101, enum case for DispatchTimeInterval.milliseconds(_:), v104);
      v110 = v122;
      + infix(_:_:)(v105, v101);
      v106(v101, v104);
      v107(v105, v109);
      OS_dispatch_group.wait(timeout:)(v110);

      v107((char *)v110, v109);
    }
    else
    {
LABEL_12:
      v63 = v125;
      v64 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v24, v124 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v126);
      v65 = v127;
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter();
      v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        v69 = swift_slowAlloc(12, -1);
        LODWORD(v124) = v68;
        v70 = (uint8_t *)v69;
        v127 = (uint8_t *)swift_slowAlloc(32, -1);
        aBlock[0] = (uint64_t)v127;
        v123 = v70;
        *(_DWORD *)v70 = 136315138;
        v71 = v70 + 12;
        v121 = (char *)(v70 + 4);
        v72 = -[uint8_t UUIDString](v65, "UUIDString");
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v122 = v66;
        v74 = v31;
        v75 = v73;
        v77 = v76;

        v78 = v75;
        v31 = v74;
        v131 = sub_1000906BC(v78, v77, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v121, v71);

        swift_bridgeObjectRelease(v77);
        v80 = v122;
        v79 = v123;
        _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v124, "Accessory does not contain characteristic %s!", v123, 0xCu);
        v81 = v127;
        swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v79, -1, -1);

        (*(void (**)(char *, uint64_t))(v125 + 8))(v24, v126);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v63 + 8))(v24, v64);
      }
      v82 = sub_1000ABB30();
      v83 = swift_allocError(&type metadata for DockdError, v82, 0, 0);
      *v84 = 1;
      sub_1000F6AC0(0, v83, a4, (uint64_t)v128, a6);

      swift_errorRelease(v83);
    }
    return swift_release(v26);
  }
  else
  {
    v59 = sub_1000ABB30();
    v60 = swift_allocError(&type metadata for DockdError, v59, 0, 0);
    *v61 = 1;
    swift_retain(a4);
    swift_bridgeObjectRetain(a6);
    sub_1000F6AC0(0, v60, a4, (uint64_t)v128, a6);
    swift_errorRelease(v60);
    return swift_release(v26);
  }
}

uint64_t sub_100184B3C(NSObject *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  dispatch_group_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  uint8_t *v66;
  uint8_t *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  NSObject *v72;
  uint8_t *v73;
  dispatch_group_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  Class isa;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  _QWORD *v87;
  NSObject *v88;
  id v89;
  NSObject *v90;
  char *v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  void (*v95)(uint8_t *, _QWORD, uint64_t);
  uint64_t v96;
  char *v97;
  void (*v98)(uint8_t *, uint64_t);
  void (*v99)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  uint8_t *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  dispatch_group_t v117;
  id v118;
  uint64_t aBlock[5];
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;

  v113 = a2;
  v117 = a1;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  v109 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v112 = (uint8_t *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime(0);
  v108 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v107 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v110 = (char *)&v101 - v18;
  __chkstk_darwin(v17);
  v111 = (char *)&v101 - v19;
  v20 = type metadata accessor for Logger(0);
  v115 = *(_QWORD *)(v20 - 8);
  v116 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v101 - v24;
  v27 = (_QWORD *)swift_allocObject(&unk_10023D968, 48, 7);
  v27[2] = a4;
  v27[3] = a5;
  v118 = a6;
  v27[4] = a6;
  v27[5] = a7;
  v114 = a3;
  v28 = *(void **)(a3 + 32);
  if (v28
    && (v29 = objc_opt_self(HAPAccessoryServerBTLE, v26), (v30 = swift_dynamicCastObjCClass(v28, v29)) != 0))
  {
    v31 = (void *)v30;
    v104 = v12;
    swift_retain(a4);
    swift_retain(a5);
    swift_bridgeObjectRetain(a7);
    v106 = v28;
    v103 = v31;
    v32 = objc_msgSend(v31, "primaryAccessory");
    if (!v32)
      goto LABEL_12;
    v33 = v32;
    v105 = v14;
    v34 = -[NSObject UUIDString](v117, "UUIDString");
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v37 = -[NSObject UUIDString](v113, "UUIDString");
    if (!v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v39 = v38;
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
    }
    v40 = objc_msgSend(v33, "characteristicOfType:serviceType:", v34, v37);

    v41 = v105;
    if (v40)
    {
      v118 = v40;
      v42 = dispatch_group_create();
      v43 = v115;
      v44 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v23, v114 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v116);
      v45 = v117;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        aBlock[0] = (uint64_t)v113;
        v117 = v42;
        *(_DWORD *)v48 = 136315138;
        v102 = v48 + 4;
        v49 = -[NSObject UUIDString](v45, "UUIDString");
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v52 = v51;

        v53 = v50;
        v41 = v105;
        v121 = sub_1000906BC(v53, v52, aBlock);
        v42 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v102, v48 + 12);

        swift_bridgeObjectRelease(v52);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Reading characteristic %s...", v48, 0xCu);
        v54 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        (*(void (**)(char *, uint64_t))(v115 + 8))(v23, v116);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v44);
      }
      dispatch_group_enter(v42);
      v78 = sub_10009061C(&qword_10026C340);
      v79 = swift_allocObject(v78, 40, 7);
      *(_OWORD *)(v79 + 16) = xmmword_1001DE6A0;
      v80 = v118;
      *(_QWORD *)(v79 + 32) = v118;
      aBlock[0] = v79;
      specialized Array._endMutation()(v79);
      v81 = aBlock[0];
      sub_100090EE8(0, (unint64_t *)&qword_10026EA60, off_100235E50);
      v118 = v80;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v81);
      v83 = v114;
      v84 = *(void **)(v114 + 40);
      v85 = (_QWORD *)swift_allocObject(&unk_10023D990, 56, 7);
      v85[2] = v83;
      v85[3] = v45;
      v85[4] = sub_10018549C;
      v85[5] = v27;
      v85[6] = v42;
      aBlock[4] = (uint64_t)sub_100183734;
      v120 = v85;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100177F4C;
      aBlock[3] = (uint64_t)&unk_10023D9A8;
      v86 = _Block_copy(aBlock);
      v87 = v120;
      v88 = v45;
      v89 = v84;
      swift_retain(v83);
      swift_retain(v27);
      v90 = v42;
      swift_release(v87);
      objc_msgSend(v103, "readCharacteristicValues:timeout:completionQueue:completionHandler:", isa, v89, v86, 10.0);
      _Block_release(v86);

      v91 = v107;
      static DispatchTime.now()(v92);
      v93 = v112;
      *(_QWORD *)v112 = 10;
      v94 = v109;
      v95 = *(void (**)(uint8_t *, _QWORD, uint64_t))(v109 + 104);
      v96 = v104;
      v95(v93, enum case for DispatchTimeInterval.seconds(_:), v104);
      v97 = v110;
      + infix(_:_:)(v91, v93);
      v98 = *(void (**)(uint8_t *, uint64_t))(v94 + 8);
      v98(v93, v96);
      v99 = *(void (**)(char *, uint64_t))(v108 + 8);
      v99(v91, v41);
      *(_QWORD *)v93 = 500;
      v95(v93, enum case for DispatchTimeInterval.milliseconds(_:), v96);
      v100 = v111;
      + infix(_:_:)(v97, v93);
      v98(v93, v96);
      v99(v97, v41);
      OS_dispatch_group.wait(timeout:)(v100);

      v99(v100, v41);
    }
    else
    {
LABEL_12:
      v59 = v115;
      v60 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v25, v114 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v116);
      v61 = v117;
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter();
      v64 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        v65 = swift_slowAlloc(12, -1);
        LODWORD(v114) = v64;
        v66 = (uint8_t *)v65;
        v117 = (dispatch_group_t)swift_slowAlloc(32, -1);
        aBlock[0] = (uint64_t)v117;
        v112 = v66;
        v113 = v62;
        *(_DWORD *)v66 = 136315138;
        v67 = v66 + 12;
        v111 = (char *)(v66 + 4);
        v68 = -[NSObject UUIDString](v61, "UUIDString");
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

        v121 = sub_1000906BC(v69, v71, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v111, v67);

        swift_bridgeObjectRelease(v71);
        v73 = v112;
        v72 = v113;
        _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v114, "Accessory does not contain characteristic %s!", v112, 0xCu);
        v74 = v117;
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v73, -1, -1);

        (*(void (**)(char *, uint64_t))(v115 + 8))(v25, v116);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v60);
      }
      v75 = sub_1000ABB30();
      v76 = swift_allocError(&type metadata for DockdError, v75, 0, 0);
      *v77 = 1;
      sub_10016B978(0, v76, a4, a5, (uint64_t)v118, a7);

      swift_errorRelease(v76);
    }
    return swift_release(v27);
  }
  else
  {
    v55 = sub_1000ABB30();
    v56 = swift_allocError(&type metadata for DockdError, v55, 0, 0);
    *v57 = 1;
    swift_retain(a4);
    swift_retain(a5);
    swift_bridgeObjectRetain(a7);
    sub_10016B978(0, v56, a4, a5, (uint64_t)v118, a7);
    swift_errorRelease(v56);
    return swift_release(v27);
  }
}

uint64_t sub_100185468()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10018549C(void *a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10016B978(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void sub_1001854B0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001AB3F0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001854C0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001AAED8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1001854D0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001786A0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001854DC()
{
  return sub_1001854F0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001854F0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

void sub_10018552C(void *a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000F6AC0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10018553C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100185578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100178A2C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void (**)(void))(v2 + 32), *(_QWORD *)(v2 + 40), *(NSObject **)(v2 + 48));
}

uint64_t sub_100185588()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001855AC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, *a2, *a3);
}

uint64_t sub_1001855DC(uint64_t a1, uint64_t a2)
{
  return sub_1001855F0(a1, a2, "Unable to issue accessory return to base: %s", "Issued accessory return to base!");
}

uint64_t sub_1001855F0(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009061C(&qword_1002706D0) - 8) + 80);
  return sub_10017F938(a1, a2, *(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9), a3, a4);
}

uint64_t sub_100185664(uint64_t a1, uint64_t a2)
{
  return sub_1001855F0(a1, a2, "Unable to issue accessory reboot: %s", "Issued accessory reboot!");
}

uint64_t sub_10018567C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009061C(&qword_1002706D0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001856F4(uint64_t a1, uint64_t a2)
{
  return sub_1001855F0(a1, a2, "Unable to halt accessory: %s", "Accessory halted!");
}

uint64_t sub_100185748()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_100270710);
  sub_10008EA50(v0, (uint64_t)qword_100270710);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 0x73636974706168, 0xE700000000000000);
}

uint64_t sub_1001857BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  void **v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void **v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  void ***v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;

  v3 = v2;
  v4 = objc_msgSend((id)objc_opt_self(CHHapticEngine, a2), "capabilitiesForHardware");
  v5 = objc_msgSend(v4, "supportsHaptics");
  swift_unknownObjectRelease(v4);
  *(_BYTE *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 32) = 0;
  if (!v5)
  {
    if (qword_10026BC08 != -1)
      swift_once(&qword_10026BC08, sub_100185748);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10008EA50(v25, (uint64_t)qword_100270710);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Device does not support haptics!", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    goto LABEL_15;
  }
  if (qword_10026BC08 != -1)
    swift_once(&qword_10026BC08, sub_100185748);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10008EA50(v6, (uint64_t)qword_100270710);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting to enable haptic engine...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v43 = 0;
  v11 = objc_msgSend(objc_allocWithZone((Class)CHHapticEngine), "initAndReturnError:", &v43);
  v12 = v43;
  if (!v11)
  {
    v30 = v43;
    v31 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v32);
    swift_errorRetain(v31);
    v33 = swift_errorRetain(v31);
    v27 = Logger.logObject.getter(v33);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      swift_errorRetain(v31);
      v37 = (void **)_swift_stdlib_bridgeErrorToNSError(v31);
      v43 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v35 + 4, v35 + 12);
      *v36 = v37;
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v34, "Unable to create haptic engine, haptics will be disallowed: %@", v35, 0xCu);
      v38 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      swift_errorRelease(v31);
LABEL_16:
      v39 = swift_unknownObjectRelease(*(_QWORD *)(v3 + 32));
      v41 = type metadata accessor for DKHaptics(v39, v40);
      swift_deallocPartialClassInstance(v3, v41, 40, 7);
      return 0;
    }
    swift_errorRelease(v31);
    swift_errorRelease(v31);
    swift_errorRelease(v31);
LABEL_15:

    goto LABEL_16;
  }
  v13 = v11;
  *(_QWORD *)(v3 + 24) = v11;
  v14 = swift_allocObject(&unk_10023DCC0, 24, 7);
  swift_weakInit(v14 + 16, v3);
  v47 = sub_10018670C;
  v48 = v14;
  v43 = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_10012357C;
  v46 = &unk_10023DCD8;
  v15 = _Block_copy(&v43);
  v16 = v48;
  v17 = v12;
  v18 = v13;
  swift_release(v16);
  objc_msgSend(v18, "setResetHandler:", v15);
  _Block_release(v15);

  v19 = *(void **)(v3 + 24);
  v47 = MotionFeedback.init(positions:velocities:);
  v48 = 0;
  v43 = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_10011EE80;
  v46 = &unk_10023DD00;
  v20 = _Block_copy(&v43);
  v21 = v19;
  objc_msgSend(v21, "setStoppedHandler:", v20);
  _Block_release(v20);

  v22 = *(void **)(v3 + 24);
  v47 = sub_100185FFC;
  v48 = 0;
  v43 = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_100186004;
  v46 = &unk_10023DD28;
  v23 = _Block_copy(&v43);
  v24 = v22;
  objc_msgSend(v24, "notifyWhenPlayersFinished:", v23);
  _Block_release(v23);

  objc_msgSend(*(id *)(v3 + 24), "setAutoShutdownEnabled:", 1);
  return v3;
}

void sub_100185CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  __n128 v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  unsigned int v11;
  id v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29[3];
  _BYTE v30[24];

  v1 = a1 + 16;
  if (qword_10026BC08 != -1)
    swift_once(&qword_10026BC08, sub_100185748);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10008EA50(v2, (uint64_t)qword_100270710);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset Handler: Restarting the engine.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_beginAccess(v1, v30, 0, 0);
  Strong = swift_weakLoadStrong(v1, v7);
  if (!Strong)
    goto LABEL_8;
  v9 = Strong;
  v10 = *(id *)(Strong + 24);
  swift_release(v9);
  v29[0] = 0;
  v11 = objc_msgSend(v10, "startAndReturnError:", v29);

  v12 = v29[0];
  if (v11)
  {
    v13 = v29[0];
LABEL_8:
    v14 = swift_beginAccess(v1, v29, 0, 0);
    v15 = swift_weakLoadStrong(v1, v14);
    if (v15)
    {
      v16 = v15;
      sub_100186058();
      swift_release(v16);
    }
    return;
  }
  v17 = v29[0];
  v18 = _convertNSErrorToError(_:)(v12);

  swift_willThrow(v19);
  swift_errorRetain(v18);
  v20 = swift_errorRetain(v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v23 = 138412290;
    swift_errorRetain(v18);
    v25 = _swift_stdlib_bridgeErrorToNSError(v18);
    v27 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
    *v24 = v25;
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to restart the engine: %@", v23, 0xCu);
    v26 = sub_10009061C(&qword_10026BC40);
    swift_arrayDestroy(v24, 1, v26);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    swift_errorRelease(v18);
  }
  else
  {
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    swift_errorRelease(v18);

  }
}

uint64_t sub_100185FFC()
{
  return 1;
}

uint64_t sub_100186004(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void *);
  id v5;
  uint64_t v6;

  v4 = *(uint64_t (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = v4(a2);
  swift_release(v3);

  return v6;
}

void sub_100186058()
{
  uint64_t v0;
  CHHapticPatternKey v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CHHapticPatternKey v5;
  uint64_t v6;
  CHHapticPatternKey v7;
  CHHapticEventType v8;
  CHHapticPatternKey v9;
  uint64_t v10;
  CHHapticPatternKey v11;
  NSString *v12;
  NSString *v13;
  NSString *v14;
  NSString *v15;
  NSString *v16;
  NSString *v17;
  uint64_t v18;
  CHHapticPatternKey v19;
  uint64_t v20;
  CHHapticPatternKey v21;
  CHHapticDynamicParameterID v22;
  uint64_t v23;
  uint64_t v24;
  CHHapticPatternKey v25;
  CHHapticPatternKey v26;
  NSString *v27;
  NSString *v28;
  NSString *v29;
  NSString *v30;
  NSString *v31;
  uint64_t v32;
  CHHapticPatternKey v33;
  uint64_t v34;
  CHHapticPatternKey v35;
  CHHapticDynamicParameterID v36;
  CHHapticPatternKey v37;
  CHHapticPatternKey v38;
  NSString *v39;
  NSString *v40;
  NSString *v41;
  NSString *v42;
  NSString *v43;
  unint64_t v44;
  _OWORD *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _BYTE v61[152];
  _BYTE v62[48];
  _BYTE v63[152];
  _BYTE v64[48];
  _BYTE v65[152];
  _BYTE v66[48];
  _BYTE v67[48];

  v0 = sub_10009061C(&qword_100270818);
  inited = swift_initStackObject(v0, v67);
  *(_OWORD *)(inited + 16) = xmmword_1001DE690;
  v1 = CHHapticPatternKeyPattern;
  *(_QWORD *)(inited + 32) = CHHapticPatternKeyPattern;
  v2 = sub_10009061C(&qword_100270820);
  v3 = swift_allocObject(v2, 56, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001DEEB0;
  v59 = sub_10009061C(&qword_100270828);
  v4 = swift_initStackObject(v59, v66);
  *(_OWORD *)(v4 + 16) = xmmword_1001DE690;
  v5 = CHHapticPatternKeyEvent;
  *(_QWORD *)(v4 + 32) = CHHapticPatternKeyEvent;
  v58 = sub_10009061C(&qword_100270830);
  v6 = swift_initStackObject(v58, v65);
  *(_OWORD *)(v6 + 16) = xmmword_1001DEEB0;
  v7 = CHHapticPatternKeyEventType;
  *(_QWORD *)(v6 + 32) = CHHapticPatternKeyEventType;
  v8 = CHHapticEventTypeHapticContinuous;
  type metadata accessor for EventType(0);
  *(_QWORD *)(v6 + 40) = v8;
  v9 = CHHapticPatternKeyTime;
  *(_QWORD *)(v6 + 64) = v10;
  *(_QWORD *)(v6 + 72) = v9;
  *(_QWORD *)(v6 + 80) = 0;
  v11 = CHHapticPatternKeyEventDuration;
  *(_QWORD *)(v6 + 104) = &type metadata for Double;
  *(_QWORD *)(v6 + 112) = v11;
  *(_QWORD *)(v6 + 144) = &type metadata for Double;
  *(_QWORD *)(v6 + 120) = 0x3FC3333333333333;
  v12 = v1;
  v13 = v5;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v11;
  *(_QWORD *)(v4 + 40) = sub_1001B16A0(v6);
  *(_QWORD *)(v3 + 32) = sub_1001B17CC(v4);
  v18 = swift_initStackObject(v59, v64);
  *(_OWORD *)(v18 + 16) = xmmword_1001DE690;
  v19 = CHHapticPatternKeyParameter;
  *(_QWORD *)(v18 + 32) = CHHapticPatternKeyParameter;
  v20 = swift_initStackObject(v58, v63);
  *(_OWORD *)(v20 + 16) = xmmword_1001DEEB0;
  v21 = CHHapticPatternKeyParameterID;
  *(_QWORD *)(v20 + 32) = CHHapticPatternKeyParameterID;
  v22 = CHHapticDynamicParameterIDHapticIntensityControl;
  type metadata accessor for ID(0);
  v24 = v23;
  *(_QWORD *)(v20 + 40) = v22;
  v25 = CHHapticPatternKeyTime;
  *(_QWORD *)(v20 + 64) = v23;
  *(_QWORD *)(v20 + 72) = v25;
  *(_QWORD *)(v20 + 80) = 0x3FB999999999999ALL;
  v26 = CHHapticPatternKeyParameterValue;
  *(_QWORD *)(v20 + 104) = &type metadata for Double;
  *(_QWORD *)(v20 + 112) = v26;
  *(_QWORD *)(v20 + 144) = &type metadata for Double;
  *(_QWORD *)(v20 + 120) = 0x3FF3333333333333;
  v27 = v19;
  v28 = v21;
  v29 = v22;
  v30 = v25;
  v31 = v26;
  *(_QWORD *)(v18 + 40) = sub_1001B16A0(v20);
  *(_QWORD *)(v3 + 40) = sub_1001B17CC(v18);
  v32 = swift_initStackObject(v59, v62);
  *(_OWORD *)(v32 + 16) = xmmword_1001DE690;
  v33 = CHHapticPatternKeyParameter;
  *(_QWORD *)(v32 + 32) = CHHapticPatternKeyParameter;
  v34 = swift_initStackObject(v58, v61);
  *(_OWORD *)(v34 + 16) = xmmword_1001DEEB0;
  v35 = CHHapticPatternKeyParameterID;
  v36 = CHHapticDynamicParameterIDHapticSharpnessControl;
  *(_QWORD *)(v34 + 32) = CHHapticPatternKeyParameterID;
  *(_QWORD *)(v34 + 40) = v36;
  v37 = CHHapticPatternKeyTime;
  *(_QWORD *)(v34 + 64) = v24;
  *(_QWORD *)(v34 + 72) = v37;
  *(_QWORD *)(v34 + 80) = 0;
  v38 = CHHapticPatternKeyParameterValue;
  *(_QWORD *)(v34 + 104) = &type metadata for Double;
  *(_QWORD *)(v34 + 112) = v38;
  *(_QWORD *)(v34 + 144) = &type metadata for Double;
  *(_QWORD *)(v34 + 120) = 0x3FF3333333333333;
  v39 = v33;
  v40 = v35;
  v41 = v36;
  v42 = v37;
  v43 = v38;
  *(_QWORD *)(v32 + 40) = sub_1001B16A0(v34);
  *(_QWORD *)(v3 + 48) = sub_1001B17CC(v32);
  *(_QWORD *)(inited + 40) = v3;
  v44 = sub_1001B17D8(inited);
  v45 = sub_1001A9958(v44);
  swift_bridgeObjectRelease(v44);
  v46 = objc_allocWithZone((Class)CHHapticPattern);
  v47 = sub_1001865B0((uint64_t)v45);
  if (!v57)
  {
    v48 = v47;
    v49 = *(void **)(v55 + 24);
    v60 = 0;
    v50 = objc_msgSend(v49, "createPlayerWithPattern:error:", v48, &v60);
    v51 = v60;
    if (v50)
    {

      v52 = *(_QWORD *)(v55 + 32);
      *(_QWORD *)(v55 + 32) = v50;
      swift_unknownObjectRelease(v52);
    }
    else
    {
      v53 = v51;
      _convertNSErrorToError(_:)(v51);

      swift_willThrow(v54);
    }
  }
}

void sub_100186474()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;

  if (*(_QWORD *)(v0 + 32) || (sub_100186058(), !v1))
  {
    v2 = *(void **)(v0 + 24);
    v11 = 0;
    v3 = objc_msgSend(v2, "startAndReturnError:", &v11);
    v4 = v11;
    if (v3
      && ((v5 = *(void **)(v0 + 32)) == 0
       || (v11 = 0,
           v6 = v4,
           v7 = objc_msgSend(v5, "startAtTime:error:", &v11, 0.0),
           v4 = v11,
           v7)))
    {
      v8 = v4;
    }
    else
    {
      v9 = v4;
      _convertNSErrorToError(_:)(v4);

      swift_willThrow(v10);
    }
  }
}

uint64_t sub_100186564()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DKHaptics(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(_TtC14dockaccessoryd9DKHaptics, a2);
}

id sub_1001865B0(uint64_t a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v10;

  type metadata accessor for Key(0);
  sub_1001866A0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v10 = 0;
  v4 = objc_msgSend(v1, "initWithDictionary:error:", isa, &v10);

  v5 = v10;
  if (v4)
  {
    v6 = v10;
  }
  else
  {
    v7 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
  }
  return v4;
}

unint64_t sub_1001866A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10026C160;
  if (!qword_10026C160)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1001DE510, v1);
    atomic_store(result, (unint64_t *)&qword_10026C160);
  }
  return result;
}

uint64_t sub_1001866E8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10018670C()
{
  uint64_t v0;

  sub_100185CE4(v0);
}

uint64_t sub_100186714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100186724(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for AccessoryAdvData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  return sub_10009B2FC(a1[4], a1[5]);
}

uint64_t initializeWithCopy for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  sub_10009B27C(v5, v6);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v6;
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v8 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  sub_10009B27C(v8, v7);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  sub_10009B2FC(v9, v10);
  return a1;
}

__n128 initializeWithTake for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10009B2FC(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryAdvData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryAdvData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryAdvData()
{
  return &type metadata for AccessoryAdvData;
}

void sub_100186960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

unsigned __int8 *sub_1001869A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **v4;
  const void *v5;
  unsigned __int8 **v6;
  CC_LONG v7;
  unsigned __int8 *v8;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 *result;

  v7 = BYTE6(a4);
  v8 = *v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  *v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v8 = (unsigned __int8 *)sub_1000E97B0(0, *((_QWORD *)v8 + 2), 0, v8);
  *v6 = v8;
  result = CC_SHA512(v5, v7, v8 + 32);
  *v4 = result;
  return result;
}

void sub_100186AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_100186960(v9, v16, a4, a5);
}

uint64_t sub_100186B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011CAC4(a1, a2);
  v13 = v12;
  v15 = v14;
  v25 = a3;
  v26 = a4;
  swift_bridgeObjectRetain(a4);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  v17 = swift_bridgeObjectRelease(v15);
  v18 = v25;
  v19 = v26;
  static String.Encoding.utf8.getter(v17);
  String.data(using:allowLossyConversion:)(v11, 0, v18, v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  result = 0;
  if (v21 >> 60 != 15)
  {
    v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(64, &type metadata for UInt8);
    *(_QWORD *)(v23 + 16) = 64;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(_OWORD *)(v23 + 80) = 0u;
    v24[1] = v23;
    __asm { BR              X10 }
  }
  return result;
}

void sub_100186EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_100186F6C@<X0>(int a1@<W8>)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  if (BYTE6(v2) != 8)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v20) = HIDWORD(v3) - v3;
        if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
        {
          v20 = (int)v20;
LABEL_10:
          if (v20 != 12)
          {
            result = sub_10009B2FC(v3, v2);
            v10 = 0;
            v12 = 0;
LABEL_16:
            v35 = 0;
            v36 = 0;
            v3 = 0;
            v2 = 0;
            goto LABEL_17;
          }
          sub_10009B27C(v3, v2);
          sub_10012E07C(4, v3, v2);
          v24 = *(_QWORD *)(v5 - 96);
          v25 = *(_QWORD *)(v5 - 88);
          *(_QWORD *)(v5 - 112) = v24;
          *(_QWORD *)(v5 - 104) = v25;
          static String.Encoding.utf8.getter(v26);
          v27 = sub_100155460();
          v10 = ((uint64_t (*)(uint64_t, uint64_t, void *, unint64_t))String.init<A>(bytes:encoding:))(v5 - 112, v4, &type metadata for Data, v27);
          v12 = v28;
          sub_10009B2FC(v24, v25);
          if (v12)
          {
            v29 = Data.subscript.getter(4, v3, v2);
            *(_QWORD *)(v5 - 128) = Data.subscript.getter(5, v3, v2);
            v30 = Data.subscript.getter(6, v3, v2);
            v31 = Data.subscript.getter(7, v3, v2);
            *(_DWORD *)(v5 - 116) = Data.subscript.getter(9, v3, v2);
            v32 = Data.subscript.getter(9, v3, v2);
            v33 = Data.subscript.getter(9, v3, v2);
            v18 = ((unint64_t)v29 << 24) | ((unint64_t)*(_QWORD *)(v5 - 128) << 16) | ((unint64_t)v30 << 8) | v31;
            v34 = Data.subscript.getter(11, v3, v2);
            result = Data.subscript.getter(10, v3, v2);
            v19 = (v34 << 40) | ((unint64_t)result << 32) | (v33 >> 5) & 1 | ((unint64_t)((v32 >> 4) & 1) << 8) | ((unint64_t)((*(_DWORD *)(v5 - 116) >> 3) & 1) << 16);
            v17 = 0x10000;
            goto LABEL_13;
          }
LABEL_15:
          result = sub_10009B2FC(v3, v2);
          v10 = 0;
          goto LABEL_16;
        }
        __break(1u);
      }
      else
      {
        v22 = *(_QWORD *)(v3 + 16);
        v21 = *(_QWORD *)(v3 + 24);
        v23 = __OFSUB__(v21, v22);
        v20 = v21 - v22;
        if (!v23)
          goto LABEL_10;
      }
      __break(1u);
      JUMPOUT(0x100187274);
    }
    v20 = BYTE6(v2);
    goto LABEL_10;
  }
  sub_10009B27C(v3, v2);
  sub_10012E07C(4, v3, v2);
  v6 = *(_QWORD *)(v5 - 96);
  v7 = *(_QWORD *)(v5 - 88);
  *(_QWORD *)(v5 - 112) = v6;
  *(_QWORD *)(v5 - 104) = v7;
  static String.Encoding.utf8.getter(v8);
  v9 = sub_100155460();
  v10 = ((uint64_t (*)(uint64_t, uint64_t, void *, unint64_t))String.init<A>(bytes:encoding:))(v5 - 112, v4, &type metadata for Data, v9);
  v12 = v11;
  sub_10009B2FC(v6, v7);
  if (!v12)
    goto LABEL_15;
  v13 = (unint64_t)Data.subscript.getter(4, v3, v2) << 24;
  v14 = v13 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)Data.subscript.getter(5, v3, v2) << 16);
  v15 = v14 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)Data.subscript.getter(6, v3, v2) << 8);
  result = Data.subscript.getter(7, v3, v2);
  v17 = 0;
  v18 = v15 & 0xFFFFFFFFFFFFFF00 | result;
  v19 = 2;
LABEL_13:
  v35 = v18 | (v19 << 32);
  v36 = v17 | HIDWORD(v19);
LABEL_17:
  *v1 = v10;
  v1[1] = v12;
  v1[2] = v35;
  v1[3] = v36;
  v1[4] = v3;
  v1[5] = v2;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryAdvData.AdvState(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryAdvData.AdvState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[6])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryAdvData.AdvState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryAdvData.AdvState()
{
  return &type metadata for AccessoryAdvData.AdvState;
}

uint64_t sub_100187340(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void (*v6)(void *, unint64_t, void *);
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = a2;
  v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    v7 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;

  }
  else
  {
    swift_retain(v5);
    v9 = 0xF000000000000000;
  }
  v10 = a3;
  v6(v4, v9, a3);

  sub_10009E3A0((uint64_t)v4, v9);
  return swift_release(v5);
}

void sub_1001873D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100187428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ED080();
  *(_BYTE *)(v0 + 16) = 0;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0xE000000000000000;
  v6 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  v7 = v1 + *(int *)(v6 + 40);
  v8 = sub_10009B2FC(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  *(_OWORD *)v7 = xmmword_1001DE7B0;
  UUID.init()(v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v1 + *(int *)(v6 + 36), v5, v2);
  result = swift_errorRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100187504()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v0;
  if (*(_QWORD *)(v11 + 16))
  {
    v12 = *(void **)(v11 + 24);
    if (v12)
    {
      aBlock[4] = sub_1000B145C;
      v25 = v11;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10012357C;
      aBlock[3] = &unk_10023DE80;
      v13 = _Block_copy(aBlock);
      v22 = v12;
      v14 = swift_retain(v11);
      static DispatchQoS.unspecified.getter(v14);
      v23 = _swiftEmptyArrayStorage;
      v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
      v17 = sub_100090F20();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v2, v15);
      v18 = v22;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v13);
      _Block_release(v13);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      result = swift_release(v25);
    }
  }
  else
  {
    result = sub_1000ECBEC();
  }
  v19 = v1[5];
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    v1[5] = v21;
  return result;
}

void sub_1001876F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  Class isa;
  Class v42;
  NSString v43;
  void *v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, __n128);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t aBlock[5];
  uint64_t v59;
  char v60[32];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  v50 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  v14 = v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  v15 = swift_beginAccess(v14, v60, 0, 0);
  v53 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v54 = v14;
  v53(v11, v14, v8, v15);
  v16 = v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, aBlock, 33, 0);
  v17 = *(_QWORD *)(v16 + 8);
  sub_10009B27C(v13, v12);
  swift_errorRelease(v17);
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 1;
  v18 = *(_QWORD *)(v16 + 32);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v18);
  v51 = a1;
  v52 = a2;
  *(_QWORD *)(v16 + 24) = a1;
  *(_QWORD *)(v16 + 32) = a2;
  v19 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 24))(v16 + *(int *)(v19 + 36), v11, v8);
  v20 = (uint64_t *)(v16 + *(int *)(v19 + 40));
  v21 = *v20;
  v22 = v20[1];
  sub_10009B27C(v13, v12);
  sub_10009B2FC(v21, v22);
  *v20 = v13;
  v20[1] = v12;
  v23 = v8;
  sub_100187504();
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v11, v8);
  swift_endAccess(aBlock);
  sub_10009B2FC(v13, v12);
  v25 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v49, v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v56);
  v26 = swift_retain_n(v3, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v48 = v24;
    v30 = (uint8_t *)v29;
    v31 = swift_slowAlloc(32, -1);
    aBlock[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v46 = v30 + 4;
    v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v53)(v11, v54, v23);
    v33 = UUID.uuidString.getter(v32);
    v34 = v23;
    v47 = v23;
    v36 = v35;
    v48(v11, v34);
    v57 = sub_1000906BC(v33, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, aBlock, v46, v30 + 12);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Requesting metadata for token: %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v37 = v30;
    v24 = v48;
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v56);
    v23 = v47;
  }
  else
  {

    swift_release_n(v3, 2);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v56);
  }
  v38 = *v50;
  v39 = v50[1];
  v40 = *(id *)(v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_authManager);
  sub_10009B27C(v38, v39);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v38, v39);
  ((void (*)(char *, uint64_t, uint64_t))v53)(v11, v54, v23);
  v42 = UUID._bridgeToObjectiveC()().super.isa;
  v24(v11, v23);
  v43 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_10018A6E4;
  v59 = v3;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10018856C;
  aBlock[3] = (uint64_t)&unk_10023DEF8;
  v44 = _Block_copy(aBlock);
  v45 = v59;
  swift_retain(v3);
  swift_release(v45);
  objc_msgSend(v40, "requestTokenMetadata:tokenUUID:model:completionHandler:", isa, v42, v43, v44);
  _Block_release(v44);

}

void sub_100187B84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  int v50;
  unint64_t v51;
  char v52;
  int v53;
  unint64_t v54;
  char v55;
  int v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  char v71[8];
  _QWORD v72[5];
  char v73[24];
  __int128 v74;
  __int128 v75;
  char v76[24];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v66 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v66 - v16;
  if (a4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v66 - v16, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    swift_errorRetain(a4);
    v18 = swift_errorRetain(a4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v67 = a5;
      v23 = v22;
      v77 = v22;
      v66 = v8;
      *(_DWORD *)v21 = 136315138;
      swift_getErrorValue(a4, v71, v68);
      v24 = Error.localizedDescription.getter(v69, v70);
      v26 = v25;
      *(_QWORD *)&v74 = sub_1000906BC(v24, v25, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 8, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Auth metadata request failed: %s", v21, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v66);
    }
    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
    sub_10018988C(a4);
    return;
  }
  v27 = a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  v28 = swift_beginAccess(a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v76, 0, 0);
  if (*(_BYTE *)(v27 + 16) == 1)
  {
    swift_beginAccess(v27, &v77, 33, 0);
    sub_100187428();
    swift_endAccess(&v77);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Auth metadata received.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v67 = a5;
    if (a3)
    {
      strcpy((char *)v72, "accessory_name");
      HIBYTE(v72[1]) = -18;
      AnyHashable.init<A>(_:)(v72, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a3 + 16) && (v33 = sub_1001453C8((uint64_t)&v77), (v34 & 1) != 0))
      {
        sub_100090EA8(*(_QWORD *)(a3 + 56) + 32 * v33, (uint64_t)&v74);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      sub_100146C48((uint64_t)&v77);
      if (*((_QWORD *)&v75 + 1))
      {
        v39 = swift_dynamicCast(&v77, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v39)
          v40 = v77;
        else
          v40 = 0;
        if (v39)
          v41 = v78;
        else
          v41 = 0;
        v66 = v41;
      }
      else
      {
        sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
        v66 = 0;
        v40 = 0;
      }
      v72[0] = 0x646E617262;
      v72[1] = 0xE500000000000000;
      AnyHashable.init<A>(_:)(v72, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a3 + 16) && (v48 = sub_1001453C8((uint64_t)&v77), (v49 & 1) != 0))
      {
        sub_100090EA8(*(_QWORD *)(a3 + 56) + 32 * v48, (uint64_t)&v74);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      sub_100146C48((uint64_t)&v77);
      if (*((_QWORD *)&v75 + 1))
      {
        v50 = swift_dynamicCast(&v77, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v50)
          v45 = v77;
        else
          v45 = 0;
        if (v50)
          v44 = v78;
        else
          v44 = 0;
      }
      else
      {
        sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
        v44 = 0;
        v45 = 0;
      }
      v72[0] = 0x6C65646F6DLL;
      v72[1] = 0xE500000000000000;
      AnyHashable.init<A>(_:)(v72, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a3 + 16) && (v51 = sub_1001453C8((uint64_t)&v77), (v52 & 1) != 0))
      {
        sub_100090EA8(*(_QWORD *)(a3 + 56) + 32 * v51, (uint64_t)&v74);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      sub_100146C48((uint64_t)&v77);
      if (*((_QWORD *)&v75 + 1))
      {
        v53 = swift_dynamicCast(&v77, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v53)
          v46 = v77;
        else
          v46 = 0;
        if (v53)
          v47 = v78;
        else
          v47 = 0;
      }
      else
      {
        sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
        v47 = 0;
        v46 = 0;
      }
      v72[0] = 0xD000000000000014;
      v72[1] = 0x80000001002022E0;
      AnyHashable.init<A>(_:)(v72, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a3 + 16) && (v54 = sub_1001453C8((uint64_t)&v77), (v55 & 1) != 0))
      {
        sub_100090EA8(*(_QWORD *)(a3 + 56) + 32 * v54, (uint64_t)&v74);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      sub_100146C48((uint64_t)&v77);
      if (*((_QWORD *)&v75 + 1))
      {
        v56 = swift_dynamicCast(&v77, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v56)
          v43 = v77;
        else
          v43 = 0;
        if (v56)
          v42 = v78;
        else
          v42 = 0;
      }
      else
      {
        sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
        v42 = 0;
        v43 = 0;
      }
      v72[0] = 0xD000000000000012;
      v72[1] = 0x80000001002022C0;
      AnyHashable.init<A>(_:)(v72, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a3 + 16) && (v57 = sub_1001453C8((uint64_t)&v77), (v58 & 1) != 0))
      {
        sub_100090EA8(*(_QWORD *)(a3 + 56) + 32 * v57, (uint64_t)&v74);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      sub_100146C48((uint64_t)&v77);
      if (*((_QWORD *)&v75 + 1))
      {
        v59 = swift_dynamicCast(&v77, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        v60 = v77;
        if (v59)
        {
          v61 = v78;
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
        goto LABEL_72;
      }
    }
    else
    {
      v74 = 0u;
      v75 = 0u;
      sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
      v74 = 0u;
      v75 = 0u;
      sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
      v74 = 0u;
      v75 = 0u;
      sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
      v74 = 0u;
      v75 = 0u;
      sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v40 = 0;
      v66 = 0;
      v46 = 0;
      v47 = 0;
      v74 = 0u;
      v75 = 0u;
    }
    sub_10009B2C0((uint64_t)&v74, &qword_10026E5F0);
    v60 = 0;
    v61 = 0;
LABEL_72:
    v77 = v40;
    v62 = v66;
    v78 = v66;
    v79 = v45;
    v80 = v44;
    v81 = v46;
    v82 = v47;
    v83 = v43;
    v84 = v42;
    v85 = v60;
    v86 = v61;
    v63 = v67;
    v64 = v67 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
    swift_beginAccess(v67 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, v73, 0, 0);
    sub_10018A638(v64, (uint64_t)&v74);
    if (*((_QWORD *)&v75 + 1))
    {
      sub_10009AFF4((uint64_t)&v74, (uint64_t)v72);
      sub_10009B2C0((uint64_t)&v74, &qword_10026EA28);
      sub_10009B038(v72, v72[3]);
      v65 = *(id *)(v63 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
      sub_100141B10(v65, &v77, 0);

      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v61);
      sub_100090E88(v72);
    }
    else
    {
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v61);
      sub_10009B2C0((uint64_t)&v74, &qword_10026EA28);
    }
    return;
  }
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8, v28);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Ignoring metadata response, accessory not requesting metadata or metadata already requested.", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10018856C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, void *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v6);
  v11 = a4;
  v7(v8, v10, a3, a4);
  swift_release(v6);
  swift_bridgeObjectRelease(v10);

  return swift_bridgeObjectRelease(a3);
}

void sub_100188620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  void *v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t, __n128);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t aBlock[5];
  uint64_t v52;
  char v53[32];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  v44 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  v10 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  v11 = swift_beginAccess(v10, v53, 0, 0);
  v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v47 = v10;
  v46(v7, v10, v4, v11);
  v12 = v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, aBlock, 33, 0);
  v13 = *(_QWORD *)(v12 + 8);
  sub_10009B27C(v8, v9);
  swift_errorRelease(v13);
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 2;
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 32));
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0xE000000000000000;
  v14 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v12 + *(int *)(v14 + 36), v7, v4);
  v15 = (uint64_t *)(v12 + *(int *)(v14 + 40));
  v16 = *v15;
  v17 = v15[1];
  sub_10009B27C(v8, v9);
  sub_10009B2FC(v16, v17);
  *v15 = v8;
  v15[1] = v9;
  v18 = v4;
  sub_100187504();
  v45 = *(void (**)(char *, uint64_t))(v5 + 8);
  v45(v7, v4);
  swift_endAccess(aBlock);
  sub_10009B2FC(v8, v9);
  v19 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v43, v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v49);
  v20 = swift_retain_n(v1, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v41 = v23 + 4;
    v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v7, v47, v18);
    v26 = UUID.uuidString.getter(v25);
    v27 = v18;
    v42 = v18;
    v29 = v28;
    v45(v7, v27);
    v50 = sub_1000906BC(v26, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v41, v23 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Activating token for %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v49);
    v30 = v42;
  }
  else
  {

    swift_release_n(v1, 2);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v49);
    v30 = v18;
  }
  v31 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager);
  v32 = *v44;
  v33 = v44[1];
  sub_10009B27C(*v44, v33);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009B2FC(v32, v33);
  v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v7, v47, v30);
  UUID.uuidString.getter(v35);
  v37 = v36;
  v45(v7, v30);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  aBlock[4] = (uint64_t)sub_10018A6DC;
  v52 = v1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100187340;
  aBlock[3] = (uint64_t)&unk_10023DED0;
  v39 = _Block_copy(aBlock);
  v40 = v52;
  swift_retain(v1);
  swift_release(v40);
  objc_msgSend(v31, "requestActivationForAuthToken:withUUID:completionHandler:", isa, v38, v39);
  _Block_release(v39);

}

void sub_100188AA0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint8_t *v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59[4];
  _BYTE v60[24];
  uint64_t v61[5];
  _BYTE v62[32];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v53 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v53 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v53 - v19;
  if (a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v53 - v19, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    swift_errorRetain(a3);
    v21 = swift_errorRetain(a3);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v55 = v9;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v61[0] = v25;
      v54 = v8;
      *(_DWORD *)v24 = 136315138;
      swift_getErrorValue(a3, v57, v56);
      v26 = Error.localizedDescription.getter(v56[1], v56[2]);
      v28 = v27;
      v58 = sub_1000906BC(v26, v27, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Auth activation request failed: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v54);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v8);
    }
    sub_10018988C(a3);
  }
  else if (a2 >> 60 == 15)
  {
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v9;
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Auth activation request failed: No data returned", v33, 2u);
      v34 = v33;
      v9 = v32;
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    v35 = sub_1000ABB30();
    v36 = swift_allocError(&type metadata for DockdError, v35, 0, 0);
    *v37 = 2;
    sub_10018988C(v36);
    swift_errorRelease(v36);
  }
  else
  {
    v38 = a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
    v39 = swift_beginAccess(a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v62, 0, 0);
    if (*(_BYTE *)(v38 + 16) == 2)
    {
      swift_beginAccess(v38, v61, 33, 0);
      sub_100187428();
      swift_endAccess(v61);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.default.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = v9;
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Auth activation successful.", v44, 2u);
        v45 = v44;
        v9 = v43;
        swift_slowDealloc(v45, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      v46 = a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
      swift_beginAccess(a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, v60, 0, 0);
      sub_10018A638(v46, (uint64_t)v61);
      if (v61[3])
      {
        sub_10009AFF4((uint64_t)v61, (uint64_t)&v58);
        sub_10009B2C0((uint64_t)v61, &qword_10026EA28);
        sub_10009B038(&v58, v59[2]);
        v47 = *(id *)(a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
        sub_10013A9AC(v47, a1, a2, 0);

        sub_100090E88(&v58);
      }
      else
      {
        sub_10009B2C0((uint64_t)v61, &qword_10026EA28);
      }
    }
    else
    {
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8, v39);
      v49 = v9;
      v50 = Logger.logObject.getter(v48);
      v51 = static os_log_type_t.default.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Ignoring auth response, accessory not activating or already activated.", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v8);
    }
  }
}

void sub_10018904C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t aBlock[5];
  uint64_t v57;

  v53 = a3;
  v7 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v7 - 8);
  v8 = v46;
  __chkstk_darwin(v7);
  v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v47 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess(v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, aBlock, 33, 0);
  swift_errorRelease(*(_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = 3;
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 32));
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0xE000000000000000;
  v14 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v16 = v7;
  v15(v13 + *(int *)(v14 + 36), a3, v7);
  v17 = (uint64_t *)(v13 + *(int *)(v14 + 40));
  v18 = *v17;
  v19 = v17[1];
  sub_10009B27C(a1, a2);
  sub_10009B2FC(v18, v19);
  v51 = a1;
  v52 = a2;
  *v17 = a1;
  v17[1] = a2;
  sub_100187504();
  swift_endAccess(aBlock);
  v20 = v54;
  v49 = v11;
  v50 = v10;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22 = v47;
  v23 = v10;
  v24 = v46;
  v25 = v16;
  v21(v47, v54 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v23);
  v26 = v48;
  v27 = (*(uint64_t (**)(void))(v24 + 16))();
  v28 = v22;
  v29 = Logger.logObject.getter(v27);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    aBlock[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v45 = v31 + 4;
    v33 = UUID.uuidString.getter(v32);
    v35 = v34;
    v55 = sub_1000906BC(v33, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v45, v31 + 12);
    swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v25);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Confirming token for %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v20 = v54;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v16);
  }

  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v50);
  v36 = v20;
  v37 = *(void **)(v20 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager);
  isa = Data._bridgeToObjectiveC()().super.isa;
  UUID.uuidString.getter(isa);
  v40 = v39;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  aBlock[4] = (uint64_t)sub_10018A6D4;
  v57 = v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001873D4;
  aBlock[3] = (uint64_t)&unk_10023DEA8;
  v42 = _Block_copy(aBlock);
  v43 = v57;
  swift_retain(v36);
  swift_release(v43);
  objc_msgSend(v37, "confirmActivationForAuthToken:withUUID:completionHandler:", isa, v41, v42);
  _Block_release(v42);

}

void sub_100189408(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43[4];
  _BYTE v44[24];
  uint64_t v45[5];
  _BYTE v46[32];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v37 - v12, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
    swift_errorRetain(a1);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v38 = v4;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v39 = a2;
      v20 = v19;
      v45[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_getErrorValue(a1, v41, v40);
      v21 = Error.localizedDescription.getter(v40[1], v40[2]);
      v23 = v22;
      v42 = sub_1000906BC(v21, v22, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Auth confirmation request failed: %s", v18, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v38);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    }
    sub_10018988C(a1);
  }
  else
  {
    v24 = a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
    v25 = swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v46, 0, 0);
    if (*(_BYTE *)(v24 + 16) == 3)
    {
      swift_beginAccess(v24, v45, 33, 0);
      sub_100187428();
      swift_endAccess(v45);
      v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Auth token confirmed.", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      v30 = a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
      swift_beginAccess(a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, v44, 0, 0);
      sub_10018A638(v30, (uint64_t)v45);
      if (v45[3])
      {
        sub_10009AFF4((uint64_t)v45, (uint64_t)&v42);
        sub_10009B2C0((uint64_t)v45, &qword_10026EA28);
        sub_10009B038(&v42, v43[2]);
        v31 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
        v32 = v31;
        sub_10013A13C(v31, 0);

        sub_100090E88(&v42);
      }
      else
      {
        sub_10009B2C0((uint64_t)v45, &qword_10026EA28);
      }
    }
    else
    {
      v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4, v25);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Ignoring confirmation response, accessory not confirming or already confirmed.", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

void sub_10018988C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  _BYTE v22[24];
  _QWORD v23[5];
  _BYTE v24[24];
  _QWORD v25[5];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
    return;
  v25[0] = a1;
  swift_errorRetain(a1);
  v8 = sub_10009061C(&qword_10026CF70);
  type metadata accessor for MFAAError(0);
  v10 = v9;
  if ((swift_dynamicCast(v23, v25, v8, v9, 6) & 1) != 0)
  {
    v11 = (void *)v23[0];
    v25[0] = v23[0];
    v12 = sub_100090E1C(&qword_10026C118, (uint64_t (*)(uint64_t))type metadata accessor for MFAAError, (uint64_t)&unk_1001DE550);
    if (_BridgedStoredNSError.errorCode.getter(v10, v12) == -5)
    {
      v13 = v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
      v14 = swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v22, 0, 0);
      if (*(uint64_t *)(v13 + 40) <= 2)
      {
        v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4, v14);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.default.getter(v16);
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Network error occurred, attempting retry.", v18, 2u);
          swift_slowDealloc(v18, -1, -1);
        }

        (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
        swift_beginAccess(v13, v25, 33, 0);
        sub_1000ED080();
        sub_100187504();
        swift_endAccess(v25);

        return;
      }
    }

  }
  v19 = v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, v24, 0, 0);
  sub_10018A638(v19, (uint64_t)v25);
  if (v25[3])
  {
    sub_10009AFF4((uint64_t)v25, (uint64_t)v23);
    sub_10009B2C0((uint64_t)v25, &qword_10026EA28);
    sub_10009B038(v23, v23[3]);
    v20 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
    v21 = v20;
    sub_10013A13C(v20, a1);

    sub_100090E88(v23);
  }
  else
  {
    sub_10009B2C0((uint64_t)v25, &qword_10026EA28);
  }
  swift_beginAccess(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v25, 33, 0);
  sub_100187428();
  swift_endAccess(v25);
}

uint64_t sub_100189B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_10009B2FC(*(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token), *(_QWORD *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8));
  sub_10018A680(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry);

  sub_10009B2C0(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, &qword_10026EA28);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100189C3C()
{
  return type metadata accessor for DockAccessorySWAuth(0);
}

uint64_t type metadata accessor for DockAccessorySWAuth(uint64_t a1)
{
  return sub_10014877C(a1, qword_100270868, (uint64_t)&nominal type descriptor for DockAccessorySWAuth);
}

uint64_t sub_100189C58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      v6[4] = &unk_1001E0918;
      result = type metadata accessor for DockAccessorySWAuth.AuthRetry(319);
      if (v5 <= 0x3F)
      {
        v6[5] = *(_QWORD *)(result - 8) + 64;
        v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v6[7] = &unk_1001E0930;
        return swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for DockAccessorySWAuth.AuthRetry(uint64_t a1)
{
  return sub_10014877C(a1, qword_100270A60, (uint64_t)&nominal type descriptor for DockAccessorySWAuth.AuthRetry);
}

uint64_t sub_100189D34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    swift_retain(v5);
    swift_errorRetain(v8);
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = a2[5];
    v10 = *(int *)(a3 + 36);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v15 = swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13, v15);
    v16 = *(int *)(a3 + 40);
    v17 = (uint64_t *)(a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_10009B27C(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
  }
  return a1;
}

uint64_t sub_100189E24(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  swift_errorRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_10009B2FC(*(_QWORD *)((char *)a1 + *(int *)(a2 + 40)), *(_QWORD *)((char *)a1 + *(int *)(a2 + 40) + 8));
}

uint64_t sub_100189E94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  swift_retain(v6);
  swift_errorRetain(v7);
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = a2[5];
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
  v14 = swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12, v14);
  v15 = *(int *)(a3 + 40);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_10009B27C(*v17, v19);
  *v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t *sub_100189F5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  swift_errorRetain(v9);
  a1[1] = v9;
  swift_errorRelease(v8);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[5] = a2[5];
  v12 = *(int *)(a3 + 36);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(a3 + 40);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *v18;
  v20 = v18[1];
  sub_10009B27C(*v18, v20);
  v21 = *v17;
  v22 = v17[1];
  *v17 = v19;
  v17[1] = v20;
  sub_10009B2FC(v21, v22);
  return a1;
}

uint64_t sub_10018A04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_10018A0DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_errorRelease(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[4];
  v9 = a1[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = *(int *)(a3 + 36);
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 40);
  v15 = *(uint64_t *)((char *)a1 + v14);
  v16 = *(uint64_t *)((char *)a1 + v14 + 8);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  sub_10009B2FC(v15, v16);
  return a1;
}

uint64_t sub_10018A198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018A1A4);
}

uint64_t sub_10018A1A4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_10018A220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018A22C);
}

char *sub_10018A22C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10018A2A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_1001E0970;
  v4[3] = &unk_1001E0988;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_1001E0918;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10018A350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  id v10;
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[24];

  v1 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  __chkstk_darwin(v1);
  v3 = (_QWORD *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry, v16, 0, 0);
  sub_10018A5F4(v4, (uint64_t)v3);
  if (v3[5] <= 2)
    __asm { BR              X10 }
  v5 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, v13, 0, 0);
  sub_10018A638(v5, (uint64_t)v14);
  if (v15)
  {
    sub_10009AFF4((uint64_t)v14, (uint64_t)v12);
    sub_10009B2C0((uint64_t)v14, &qword_10026EA28);
    sub_10009B038(v12, v12[3]);
    v6 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
    v7 = sub_1000ABB30();
    v8 = swift_allocError(&type metadata for DockdError, v7, 0, 0);
    *v9 = 4;
    v10 = v6;
    sub_10013A13C(v6, v8);
    swift_errorRelease(v8);

    sub_100090E88(v12);
  }
  else
  {
    sub_10009B2C0((uint64_t)v14, &qword_10026EA28);
  }
  swift_beginAccess(v4, v14, 33, 0);
  sub_100187428();
  swift_endAccess(v14);
  return sub_10018A680((uint64_t)v3);
}

uint64_t sub_10018A5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018A638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009061C(&qword_10026EA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018A680(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018A6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10018A6CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10018A6D4(unint64_t a1)
{
  uint64_t v1;

  sub_100189408(a1, v1);
}

void sub_10018A6DC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  sub_100188AA0(a1, a2, a3, v3);
}

void sub_10018A6E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  sub_100187B84(a1, a2, a3, a4, v4);
}

uint64_t getEnumTagSinglePayload for DockAccessorySWAuth.AuthRetryStep(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DockAccessorySWAuth.AuthRetryStep(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10018A7C8 + 4 * byte_1001E08D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10018A7FC + 4 * aHj[v4 + 2]))();
}

uint64_t sub_10018A7FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018A804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018A80CLL);
  return result;
}

uint64_t sub_10018A818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018A820);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10018A824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018A82C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DockAccessorySWAuth.AuthRetryStep()
{
  return &type metadata for DockAccessorySWAuth.AuthRetryStep;
}

unint64_t sub_10018A84C()
{
  unint64_t result;

  result = qword_100270AB0;
  if (!qword_100270AB0)
  {
    result = swift_getWitnessTable(&unk_1001E0A00, &type metadata for DockAccessorySWAuth.AuthRetryStep);
    atomic_store(result, (unint64_t *)&qword_100270AB0);
  }
  return result;
}

uint64_t type metadata accessor for DockIDSServer(uint64_t a1)
{
  uint64_t result;

  result = qword_100270B20;
  if (!qword_100270B20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DockIDSServer);
  return result;
}

void sub_10018A8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v2 = qword_100275778;
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = "\b";
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100199618(319);
  if (v4 <= 0x3F)
  {
    v5[5] = *(_QWORD *)(v3 - 8) + 64;
    v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0, 7, v5, a1 + v2);
  }
}

uint64_t sub_10018A990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10018A9CC(a1, a2, a3, (uint64_t)&unk_10023E0F0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_10026D658);
}

uint64_t sub_10018A9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10018A9CC(a1, a2, a3, (uint64_t)&unk_10023E320, (uint64_t)&type metadata for Bool, (uint64_t)&unk_100270C58);
}

uint64_t sub_10018A9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_10009B2C0(a1, &qword_10026C800);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0;
    v25[1] = 0;
    v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    v23 = 0;
  }
  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_10018AB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10009B2C0(a1, &qword_10026C800);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

void sub_10018AC50(char *a1, void **a2)
{
  sub_10019A2D0(*a1, *a2, "Subject Selection request failed: %s", "Subject Selection request completed successfully: %{BOOL}d");
}

void sub_10018AC7C(char *a1, void **a2)
{
  sub_10019A2D0(*a1, *a2, "Region of Interest request failed: %s", "Region of Interest request completed successfully: %{BOOL}d");
}

void sub_10018ACA8(uint64_t (*a1)(char *, __n128)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t (*v36)(char *, __n128);
  uint64_t v37;

  v36 = a1;
  v33 = a3;
  v37 = sub_10009061C(&qword_100270B90);
  v32 = *(_QWORD *)(v37 - 8);
  v5 = __chkstk_darwin(v37);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = *(_QWORD *)(a2 + 64);
  v34 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v35 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v14 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = *(_QWORD *)(a2 + 48);
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * i, v21);
    v22 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * i);
    v23 = *v22;
    v24 = v22[1];
    v25 = &v9[*(int *)(v37 + 48)];
    *(_QWORD *)v25 = v23;
    *((_QWORD *)v25 + 1) = v24;
    sub_1000D55A0((uint64_t)v9, (uint64_t)v7, &qword_100270B90);
    v26 = swift_bridgeObjectRetain(v24);
    v27 = v36(v7, v26);
    if (v3)
    {
      sub_10009B2C0((uint64_t)v7, &qword_100270B90);
      swift_release(a2);
      return;
    }
    if ((v27 & 1) != 0)
    {
      swift_release(a2);
      v28 = v33;
      sub_1000D55A0((uint64_t)v7, v33, &qword_100270B90);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v37);
      return;
    }
    sub_10009B2C0((uint64_t)v7, &qword_100270B90);
    if (v13)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v35)
      goto LABEL_28;
    v18 = *(_QWORD *)(v34 + 8 * v14);
    if (!v18)
      break;
LABEL_17:
    v13 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v35)
    goto LABEL_28;
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 2;
  if (v14 + 2 >= v35)
    goto LABEL_28;
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 3;
  if (v14 + 3 >= v35)
    goto LABEL_28;
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 4;
  if (v14 + 4 >= v35)
  {
LABEL_28:
    v30 = v32;
    v29 = v33;
    swift_release(a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, 1, 1, v37);
    return;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v35)
      goto LABEL_28;
    v18 = *(_QWORD *)(v34 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_10018AF9C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10008EA10(v0, qword_100270AB8);
  sub_10008EA50(v0, (uint64_t)qword_100270AB8);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001001FC480, 7562345, 0xE300000000000000);
}

uint64_t sub_10018B008()
{
  uint64_t result;

  result = getpid();
  dword_100270AD0 = result;
  qword_100270AD8 = 0xD000000000000018;
  unk_100270AE0 = 0x80000001001FC480;
  return result;
}

uint64_t sub_10018B044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for DockKitIDSMessageType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DockKitIDSMessageType.register(_:))
    return 0x7265747369676572;
  v8 = v6;
  if (v6 == enum case for DockKitIDSMessageType.deRegister(_:))
    return 0x7473696765526564;
  if (v6 == enum case for DockKitIDSMessageType.ack(_:))
    return 7037793;
  if (v6 == enum case for DockKitIDSMessageType.info(_:))
    return 1868983913;
  if (v6 == enum case for DockKitIDSMessageType.select(_:))
    return 0x7463656C6573;
  if (v6 == enum case for DockKitIDSMessageType.offset(_:))
    return 0x74657366666FLL;
  if (v6 == enum case for DockKitIDSMessageType.region(_:))
    return 0x6E6F69676572;
  if (v6 == enum case for DockKitIDSMessageType.frame(_:))
    return 0x656D617266;
  if (v6 == enum case for DockKitIDSMessageType.velocity(_:))
    return 0x797469636F6C6576;
  if (v6 == enum case for DockKitIDSMessageType.objects(_:))
    return 0x737463656A626FLL;
  if (v6 == enum case for DockKitIDSMessageType.debug(_:))
    return 0x6775626564;
  if (v6 == enum case for DockKitIDSMessageType.trajectory(_:))
    return 0x6F7463656A617274;
  if (v6 == enum case for DockKitIDSMessageType.diagnostics(_:))
    return 0x74736F6E67616964;
  if (v6 == enum case for DockKitIDSMessageType.systemTracking(_:))
    return 0x72546D6574737973;
  if (v6 == enum case for DockKitIDSMessageType.camera(_:))
    return 0x6172656D6163;
  result = 0x76696C417065656BLL;
  if (v8 != enum case for DockKitIDSMessageType.keepAlive(_:)
    && v8 != enum case for DockKitIDSMessageType.keepAliveResp(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0x6E776F6E6B6E75;
  }
  return result;
}

char *sub_10018B3CC(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  id v34;
  char *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD aBlock[5];
  uint64_t v69;
  objc_super v70;

  v59 = a1;
  v60 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  __chkstk_darwin(v3);
  v64 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v58 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v6 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = qword_100270AE8;
  v56[0] = sub_100090EE8(0, (unint64_t *)&qword_10026BF50, OS_dispatch_queue_ptr);
  v13 = v2;
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_100090E1C((unint64_t *)&qword_10026C530, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10009061C(&qword_10026D000);
  v16 = sub_1000ACD50((unint64_t *)&qword_10026C540, &qword_10026D000);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v7, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v61);
  v61 = (uint64_t)v12;
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x80000001002023E0, v12, v9, v6, 0);
  *(_QWORD *)(v56[1] + v57) = v17;
  *(_QWORD *)&v13[qword_100270AF0] = 0;
  v18 = qword_100270AF8;
  *(_QWORD *)&v13[v18] = sub_1001B10EC((uint64_t)_swiftEmptyArrayStorage);
  v19 = qword_100270B00;
  *(_QWORD *)&v13[v19] = sub_1001B12A4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v13[qword_100270B08] = _swiftEmptyArrayStorage;
  v20 = &v13[qword_100270B10];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = qword_100270B18;
  v23 = type metadata accessor for DKIDSKeepAlive(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)&v13[v22] = DKIDSKeepAlive.init(_:)(0);

  v24 = (objc_class *)type metadata accessor for DockIDSServer(0);
  v70.receiver = v13;
  v70.super_class = v24;
  v25 = objc_msgSendSuper2(&v70, "init");
  v26 = qword_10026BC10;
  v27 = (char *)v25;
  if (v26 != -1)
    swift_once(&qword_10026BC10, sub_10018AF9C);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10008EA50(v28, (uint64_t)qword_100270AB8);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Initializing IDS...", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = *(void **)&v27[qword_100270AE8];
  v34 = objc_allocWithZone((Class)type metadata accessor for DKIDSMessagingCenter(0));
  v35 = v27;
  v36 = v33;
  v37 = DKIDSMessagingCenter.init(serviceName:delegate:queue:)(v59, v60, v27, v36);
  v38 = *(void **)&v35[qword_100270AF0];
  *(_QWORD *)&v35[qword_100270AF0] = v37;

  v39 = qword_100270B18;
  v40 = *(_QWORD *)&v35[qword_100270B18];
  v41 = sub_100090E1C(&qword_100270C68, type metadata accessor for DockIDSServer, (uint64_t)&unk_1001E0A68);
  v42 = v35;
  swift_retain(v40);
  dispatch thunk of DKIDSKeepAlive.setDelegate(delegate:)(v42, v41);
  swift_release(v40);

  v43 = swift_allocObject(&unk_10023E348, 24, 7);
  *(_QWORD *)(v43 + 16) = v42;
  aBlock[4] = sub_10019FC00;
  v69 = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023E360;
  v44 = _Block_copy(aBlock);
  v45 = v42;
  v46 = v61;
  static DispatchQoS.unspecified.getter(v45);
  v67 = _swiftEmptyArrayStorage;
  v47 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v49 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  v50 = v64;
  v51 = v48;
  v52 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v51, v49, v66, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v44);
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v52);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v46, v63);
  swift_release(v69);
  v53 = *(_QWORD *)&v35[v39];
  v54 = swift_retain(v53);
  dispatch thunk of DKIDSKeepAlive.startKeepAlive()(v54);
  swift_release(v53);

  return v45;
}

void sub_10018B964(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + qword_100270AF0);
  if (v1)
  {
    v2 = v1;
    v3 = (id)DKIDSMessagingCenter.service.getter();

    sub_10018BB98(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10018B9C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100270AF8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100270B00));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100270B08));
  sub_10009B2C0(v0 + qword_100270B10, &qword_10026E6A0);
  return swift_release(*(_QWORD *)(v0 + qword_100270B18));
}

id sub_10018BA44()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = v0;
  v2 = *(_QWORD *)&v0[qword_100270B18];
  v3 = swift_retain(v2);
  dispatch thunk of DKIDSKeepAlive.stopKeepAlive()(v3);
  swift_release(v2);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for DockIDSServer(0);
  return objc_msgSendSuper2(&v5, "dealloc");
}

id sub_10018BAA4(char *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  objc_super v5;

  v1 = *(_QWORD *)&a1[qword_100270B18];
  v2 = a1;
  v3 = swift_retain(v1);
  dispatch thunk of DKIDSKeepAlive.stopKeepAlive()(v3);
  swift_release(v1);
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for DockIDSServer(0);
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_10018BB08(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100270AF8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100270B00));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100270B08));
  sub_10009B2C0(a1 + qword_100270B10, &qword_10026E6A0);
  return swift_release(*(_QWORD *)(a1 + qword_100270B18));
}

void sub_10018BB98(void *a1)
{
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t *v10;
  __n128 v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  __n128 v69;
  uint64_t v70;
  char *v71;
  __n128 v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  char v82[32];

  v80 = type metadata accessor for Logger(0);
  v76 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v3 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(a1, "devices");
  if (!v4)
    goto LABEL_43;
  v5 = v4;
  v6 = sub_100090EE8(0, &qword_100270C30, IDSDevice_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
LABEL_32:
    if (v7 < 0)
      v65 = v7;
    else
      v65 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v7);
    v9 = &off_100270000;
    if (v8)
      goto LABEL_4;
LABEL_36:
    swift_bridgeObjectRelease(v7);
    v66 = v67 + qword_100270B00;
    swift_beginAccess(v67 + qword_100270B00, v81, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)v66 + 16))
    {
      if (qword_10026BC00 != -1)
        swift_once(&qword_10026BC00, sub_100158DF8);
      sub_10015EF84();
    }
    return;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = &off_100270000;
  if (!v8)
    goto LABEL_36;
LABEL_4:
  v10 = (uint64_t *)((char *)v9[352] + v67);
  v75 = v7 & 0xC000000000000001;
  v68 = v10;
  v11 = swift_beginAccess(v10, v82, 1, 0);
  v70 = 0;
  v12 = 4;
  v11.n128_u64[0] = 136315138;
  v72 = v11;
  v71 = (char *)&type metadata for Any + 8;
  v11.n128_u64[0] = 136315650;
  v69 = v11;
  v13 = &selRef_authSession_authComplete_;
  v73 = v7;
  v74 = v3;
  v77 = v8;
  while (1)
  {
    if (v75)
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v7);
    else
      v15 = *(id *)(v7 + 8 * v12);
    v16 = v15;
    v17 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v18 = sub_10008EA50(v80, (uint64_t)qword_100270AB8);
    v19 = v16;
    v79 = v18;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v81[0] = v23;
      *(_DWORD *)v22 = v72.n128_u32[0];
      v24 = v19;
      v78 = v12 - 3;
      v25 = v24;
      v26 = objc_msgSend(v24, "description");
      v27 = v12;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      v31 = &selRef_authSession_authComplete_;
      v32 = v28;
      v12 = v27;
      *(_QWORD *)(v22 + 4) = sub_1000906BC(v32, v30, v81);

      v17 = v78;
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy(v23, 1, v71);
      v3 = v74;
      swift_slowDealloc(v23, -1, -1);
      v33 = v22;
      v7 = v73;
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {
      v31 = v13;

    }
    if (objc_msgSend(v19, "isDefaultPairedDevice"))
      break;

    v13 = v31;
    v14 = v77;
LABEL_6:
    ++v12;
    if (v17 == v14)
      goto LABEL_36;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v3, v79, v80);
  v34 = v19;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v35, v36))
  {
    v13 = v31;

    (*(void (**)(char *, uint64_t))(v76 + 8))(v3, v80);
    v14 = v77;
LABEL_28:
    if ((objc_msgSend(v34, v13[468]) & 1) != 0)
    {

    }
    else
    {
      v55 = v68;
      v56 = *v68;
      v57 = v34;
      swift_bridgeObjectRetain(v56);
      v58 = v13;
      v59 = v70;
      v61 = v17;
      v62 = v12;
      v63 = sub_10019E518(v60, v57);
      v70 = v59;
      v13 = v58;
      v14 = v77;
      swift_bridgeObjectRelease(v56);

      v64 = *v55;
      *v55 = v63;
      v12 = v62;
      v17 = v61;

      swift_bridgeObjectRelease(v64);
    }
    goto LABEL_6;
  }
  v78 = v17;
  v37 = v12;
  v38 = swift_slowAlloc(32, -1);
  v39 = swift_slowAlloc(96, -1);
  v81[0] = v39;
  *(_DWORD *)v38 = v69.n128_u32[0];
  v40 = objc_msgSend(v34, "uniqueIDOverride");
  if (v40)
  {
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    *(_QWORD *)(v38 + 4) = sub_1000906BC(v42, v44, v81);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v38 + 12) = 2080;
    v45 = objc_msgSend(v34, "name");
    if (!v45)
      goto LABEL_42;
    v46 = v45;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v49 = v48;

    *(_QWORD *)(v38 + 14) = sub_1000906BC(v47, v49, v81);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v38 + 22) = 2080;
    v50 = objc_msgSend(v34, "isConnected");
    v51 = v50 == 0;
    if (v50)
      v52 = 0x657463656E6E6F63;
    else
      v52 = 0x656E6E6F63736964;
    if (v51)
      v53 = 0xEC00000064657463;
    else
      v53 = 0xE900000000000064;
    *(_QWORD *)(v38 + 24) = sub_1000906BC(v52, v53, v81);

    v54 = v53;
    v13 = &selRef_authSession_authComplete_;
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Device %s (%s) %s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy(v39, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    v3 = v74;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v80);
    v7 = v73;
    v12 = v37;
    v14 = v77;
    v17 = v78;
    goto LABEL_28;
  }

  __break(1u);
LABEL_42:

  __break(1u);
LABEL_43:
  __break(1u);
}

void sub_10018C284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  char *v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[32];

  v47 = a1;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v44 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DockKitIDSMessageType(0);
  v45 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DockKitIDSMessage(0);
  v7 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v46 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DockKitIDSInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + qword_100270B00;
  swift_beginAccess(v1 + qword_100270B00, v50, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v13 + 16))
  {
    v39 = v4;
    v41 = v1;
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10008EA50(v14, (uint64_t)qword_100270AB8);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v47, v9);
    v42 = v15;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    v19 = os_log_type_enabled(v17, v18);
    v40 = v6;
    if (v19)
    {
      v20 = swift_slowAlloc(12, -1);
      v38 = v7;
      v21 = (uint8_t *)v20;
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v23 = DockKitIDSInfo.info.getter();
      v48 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v21 + 4, v21 + 12);
      *v22 = v23;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending INFO for accessory %@", v21, 0xCu);
      v24 = sub_10009061C(&qword_10026BC40);
      swift_arrayDestroy(v22, 1, v24);
      swift_slowDealloc(v22, -1, -1);
      v25 = v21;
      v7 = v38;
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }

    v26 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v27 = PropertyListEncoder.init()();
    v28 = sub_100090E1C(&qword_100270C40, (uint64_t (*)(uint64_t))&type metadata accessor for DockKitIDSInfo, (uint64_t)&protocol conformance descriptor for DockKitIDSInfo);
    v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v47, v9, v28);
    v31 = v30;
    swift_release(v27);
    v32 = *(void **)(v41 + qword_100270AF0);
    if (v32)
    {
      v33 = v40;
      (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v40, enum case for DockKitIDSMessageType.info(_:), v39);
      type metadata accessor for DockKitIDSClient(0);
      v34 = v32;
      v35 = v44;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      sub_10009B27C(v29, v31);
      v36 = v46;
      DockKitIDSMessage.init(type:token:payload:)(v33, v35, v29, v31);
      DKIDSMessagingCenter.send(_:)(v36);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v46, v43);
      sub_10009B2FC(v29, v31);

    }
    else
    {
      sub_10009B2FC(v29, v31);
    }
  }
}

uint64_t sub_10018C7FC(void *a1, uint64_t a2)
{
  return sub_10018C834(a1, a2, (uint64_t)&unk_10023E2D0, (uint64_t)sub_10019FAF4, (uint64_t)&unk_10023E2E8);
}

uint64_t sub_10018C818(void *a1, uint64_t a2)
{
  return sub_10018C834(a1, a2, (uint64_t)&unk_10023E280, (uint64_t)sub_10019FA80, (uint64_t)&unk_10023E298);
}

uint64_t sub_10018C834(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v27 = a5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v5 + qword_100270AE8);
  v16 = swift_allocObject(&unk_10023E168, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v5);
  v17 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v17[2] = a1;
  v17[3] = v16;
  v17[4] = a2;
  aBlock[4] = a4;
  v33 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = v27;
  v18 = _Block_copy(aBlock);
  v19 = a1;
  v20 = swift_retain(v16);
  static DispatchQoS.unspecified.getter(v20);
  v31 = _swiftEmptyArrayStorage;
  v21 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v23 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v29);
  v24 = v33;
  swift_release(v16);
  return swift_release(v24);
}

uint64_t sub_10018CA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t (*a6)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t Strong;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(uint64_t);
  void (*v52)(uint64_t);
  uint64_t (*v53)(_QWORD);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  char v58[24];
  char v59[24];
  char v60[32];

  v52 = a5;
  v53 = a6;
  v51 = a4;
  v55 = a3;
  v7 = sub_10009061C((uint64_t *)&unk_100271360);
  v8 = __chkstk_darwin(v7);
  v50 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - v10;
  v12 = type metadata accessor for DockKitIDSInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v54 = (char *)&v48 - v17;
  v18 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v48 - v23;
  v25 = a2 + 16;
  v26 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v22);
  DockCoreInfo.identifier.getter();

  swift_beginAccess(v25, v60, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v18);
    return sub_10009B2C0((uint64_t)v11, (uint64_t *)&unk_100271360);
  }
  v28 = (void *)Strong;
  v29 = (uint64_t *)(Strong + qword_100270AF8);
  swift_beginAccess(Strong + qword_100270AF8, v59, 0, 0);
  v30 = *v29;
  swift_bridgeObjectRetain(v30);

  if (*(_QWORD *)(v30 + 16) && (v31 = sub_100145330((uint64_t)v24), (v32 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v30 + 56) + *(_QWORD *)(v13 + 72) * v31, v12);
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v33(v11, 0, 1, v12);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v33(v11, 1, 1, v12);
  }
  swift_bridgeObjectRelease(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    goto LABEL_14;
  v49 = v18;
  v34 = v54;
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v54, v11, v12);
  v51 = (uint64_t (*)(uint64_t))v51(v35);
  v36 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v36(v16, v34, v12);
  v52(v55);
  swift_beginAccess(v25, v58, 0, 0);
  v37 = swift_unknownObjectWeakLoadStrong(v25);
  if (v37)
  {
    v38 = (char *)v37;
    v39 = v33;
    v40 = (uint64_t)v21;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v21, v24, v49);
    v41 = (uint64_t)v50;
    v36(v50, v16, v12);
    v39((char *)v41, 0, 1, v12);
    swift_beginAccess(&v38[qword_100270AF8], v57, 33, 0);
    sub_1001A9438(v41, v40);
    swift_endAccess(v57);

  }
  v42 = v53;
  v43 = v53(v55);
  if (v43 != v42(v51))
  {
    swift_beginAccess(v25, v57, 0, 0);
    v44 = swift_unknownObjectWeakLoadStrong(v25);
    if (v44)
    {
      v45 = (void *)v44;
      sub_10018C284((uint64_t)v16);

    }
  }
  v46 = *(void (**)(char *, uint64_t))(v13 + 8);
  v46(v16, v12);
  v46(v54, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v24, v49);
}

uint64_t sub_10018CE58(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v1 + qword_100270AE8);
  v10 = swift_allocObject(&unk_10023E168, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_10023E230, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_10019FA70;
  v24 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012357C;
  aBlock[3] = &unk_10023E248;
  v12 = _Block_copy(aBlock);
  v13 = a1;
  v14 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100090E1C((unint64_t *)&qword_10026C570, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10009061C((uint64_t *)&unk_10026BF60);
  v17 = sub_1000ACD50((unint64_t *)&qword_10026C580, (uint64_t *)&unk_10026BF60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = v24;
  swift_release(v10);
  return swift_release(v18);
}

uint64_t sub_10018D084(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  void *v35;
  uint64_t Strong;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  void *v112;
  void *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t result;
  void *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  __n128 v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  char v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  void (*v154)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char v161[24];
  char v162[24];
  char v163[24];
  _BYTE v164[24];
  _BYTE v165[24];
  char v166[16];
  char v167[8];

  v3 = sub_10009061C((uint64_t *)&unk_100271360);
  v4 = __chkstk_darwin(v3);
  v150 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v152 = (char *)&v145 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v145 - v8;
  v10 = type metadata accessor for DockKitIDSInfo(0);
  v160 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v148 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v149 = (char *)&v145 - v14;
  v15 = __chkstk_darwin(v13);
  v147 = (char *)&v145 - v16;
  v17 = __chkstk_darwin(v15);
  v146 = (char *)&v145 - v18;
  v19 = __chkstk_darwin(v17);
  v153 = (char *)&v145 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v145 - v22;
  __chkstk_darwin(v21);
  v157 = (char *)&v145 - v24;
  v159 = type metadata accessor for UUID(0);
  v156 = *(_QWORD *)(v159 - 8);
  v25 = __chkstk_darwin(v159);
  v151 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v145 - v27;
  v29 = a2 + 16;
  if (qword_10026BC00 != -1)
    swift_once(&qword_10026BC00, sub_100158DF8);
  v30 = qword_100275638;
  v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  v32 = *(os_unfair_lock_s **)(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain(v32);
  os_unfair_lock_lock(v32 + 4);
  swift_release(v32);
  v155 = *(_QWORD *)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
  v33 = *(os_unfair_lock_s **)(v30 + v31);
  swift_retain(v33);
  os_unfair_lock_unlock(v33 + 4);
  v34 = swift_release(v33);
  v35 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v34);
  v158 = v28;
  DockCoreInfo.identifier.getter(v35);

  swift_beginAccess(v29, v167, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29);
  if (Strong)
  {
    v37 = (void *)Strong;
    v38 = (uint64_t *)(Strong + qword_100270AF8);
    swift_beginAccess(Strong + qword_100270AF8, v166, 0, 0);
    v39 = *v38;
    swift_bridgeObjectRetain(v39);

    v40 = v160;
    if (*(_QWORD *)(v39 + 16) && (v41 = sub_100145330((uint64_t)v158), (v42 & 1) != 0))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v9, *(_QWORD *)(v39 + 56) + *(_QWORD *)(v40 + 72) * v41, v10);
      v43 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56);
      v44 = v9;
      v45 = 0;
    }
    else
    {
      v43 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56);
      v44 = v9;
      v45 = 1;
    }
    v154 = v43;
    v43((uint64_t)v44, v45, 1, v10);
    swift_bridgeObjectRelease(v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v9, 1, v10) != 1)
    {
      v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(v157, v9, v10);
      v47 = qword_100275638;
      v48 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v46);
      v49 = v48;
      v50 = *(void **)(v47 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
      if (v50)
      {
        sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
        v51 = v50;
        v52 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v51);
        v53 = static NSObject.== infix(_:_:)(v49, v52);

        v55 = 0;
        v56 = v153;
        if ((v53 & 1) != 0)
        {
LABEL_35:
          v83 = dispatch thunk of DockCoreAccessory.info.getter(v54);
          v84 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
          if (v85)
            v86 = v84;
          else
            v86 = 0;
          if (v85)
            v87 = v85;
          else
            v87 = 0xE000000000000000;
          v88 = dispatch thunk of DockCoreAccessory.serialNumber.getter(v84);
          if (v89)
            v90 = v88;
          else
            v90 = 0;
          if (v89)
            v91 = v89;
          else
            v91 = 0xE000000000000000;
          DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)(v83, v55, v155, v86, v87, v90, v91);
          swift_beginAccess(v29, v165, 0, 0);
          v92 = swift_unknownObjectWeakLoadStrong(v29);
          v93 = v160;
          if (v92)
          {
            v94 = v56;
            v95 = (char *)v92;
            v96 = (uint64_t)v151;
            (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v151, v158, v159);
            v97 = (uint64_t)v152;
            (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v152, v94, v10);
            v154(v97, 0, 1, v10);
            swift_beginAccess(&v95[qword_100270AF8], v164, 33, 0);
            sub_1001A9438(v97, v96);
            swift_endAccess(v164);

          }
          v98 = v157;
          v99 = DockKitIDSInfo.dockState.getter();
          v100 = DockState.rawValue.getter(v99);
          v101 = DockState.rawValue.getter(v55);
          v102 = *(uint64_t (**)(char *, char *, uint64_t))(v93 + 16);
          v103 = v146;
          v104 = v102(v146, v98, v10);
          if (v100 == v101)
          {
            v105 = DockKitIDSInfo.trackingState.getter(v104);
            v106 = TrackingButtonState.rawValue.getter(v105);
            v107 = v106 != TrackingButtonState.rawValue.getter(v155);
          }
          else
          {
            v107 = 1;
          }
          v79 = (uint64_t)v158;
          v82 = *(void (**)(char *, uint64_t))(v93 + 8);
          v82(v103, v10);
          v108 = v147;
          v109 = v157;
          v110 = v102(v147, v157, v10);
          if (v107)
          {
            v82(v108, v10);
            v111 = v149;
            v102(v149, v109, v10);
          }
          else
          {
            v112 = (void *)DockKitIDSInfo.info.getter(v110);
            v113 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v112);
            type metadata accessor for DockCoreInfo(0);
            v114 = static NSObject.== infix(_:_:)(v112, v113);
            v82(v108, v10);

            v109 = v157;
            v111 = v149;
            v115 = v102(v149, v157, v10);
            if ((v114 & 1) != 0)
            {
              v116 = DockKitIDSInfo.firmwareVersion.getter(v115);
              v118 = v117;
              v119 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
              if (v120)
              {
                v121 = v120;
                if (v116 == v119 && v120 == v118)
                {
                  swift_bridgeObjectRetain(v118);
                  swift_bridgeObjectRelease(v121);
                  v82(v149, v10);
                  swift_bridgeObjectRelease_n(v118, 2);
                  v122 = v148;
                  v123 = v102(v148, v157, v10);
                }
                else
                {
                  v136 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v118, v119, v120, 0);
                  swift_bridgeObjectRetain(v118);
                  swift_bridgeObjectRelease(v121);
                  v82(v149, v10);
                  swift_bridgeObjectRelease_n(v118, 2);
                  v122 = v148;
                  v109 = v157;
                  v123 = v102(v148, v157, v10);
                  if ((v136 & 1) == 0)
                    goto LABEL_61;
                }
                v137 = DockKitIDSInfo.serialNumber.getter(v123);
                v139 = v138;
                v140 = dispatch thunk of DockCoreAccessory.serialNumber.getter(v137);
                if (v141)
                {
                  v142 = v141;
                  v77 = v156;
                  if (v137 == v140 && v141 == v139)
                  {
                    swift_bridgeObjectRetain(v139);
                    swift_bridgeObjectRelease(v142);
                    v82(v148, v10);
                    v82(v153, v10);
                    v82(v157, v10);
                    swift_bridgeObjectRelease_n(v139, 2);
                  }
                  else
                  {
                    v144 = _stringCompareWithSmolCheck(_:_:expecting:)(v137, v139, v140, v141, 0);
                    swift_bridgeObjectRetain(v139);
                    swift_bridgeObjectRelease(v142);
                    v82(v148, v10);
                    v82(v153, v10);
                    v82(v157, v10);
                    swift_bridgeObjectRelease_n(v139, 2);
                    if ((v144 & 1) == 0)
                      goto LABEL_63;
                  }
                  return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v79, v159);
                }
                v143 = swift_bridgeObjectRetain(v139);
                ((void (*)(char *, uint64_t, __n128))v82)(v122, v10, v143);
                v82(v153, v10);
                v82(v157, v10);
                swift_bridgeObjectRelease_n(v139, 2);
                goto LABEL_62;
              }
              v135 = swift_bridgeObjectRetain(v118);
              ((void (*)(char *, uint64_t, __n128))v82)(v111, v10, v135);
              swift_bridgeObjectRelease_n(v118, 2);
              v122 = v148;
              v109 = v157;
LABEL_60:
              v102(v122, v109, v10);
LABEL_61:
              v82(v122, v10);
              v82(v153, v10);
              v82(v109, v10);
LABEL_62:
              v77 = v156;
              goto LABEL_63;
            }
          }
          v82(v111, v10);
          v122 = v148;
          goto LABEL_60;
        }
      }
      else
      {

        v56 = v153;
      }
      v55 = 1;
      goto LABEL_35;
    }
  }
  else
  {
    v154 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56);
    v154((uint64_t)v9, 1, 1, v10);
  }
  v57 = sub_10009B2C0((uint64_t)v9, (uint64_t *)&unk_100271360);
  v58 = dispatch thunk of DockCoreAccessory.info.getter(v57);
  v59 = qword_100275638;
  v60 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v58);
  v61 = v60;
  v62 = *(void **)(v59 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  if (v62)
  {
    sub_100090EE8(0, (unint64_t *)&qword_10026C690, NSObject_ptr);
    v63 = v62;
    v64 = (void *)dispatch thunk of DockCoreAccessory.info.getter(v63);
    v65 = static NSObject.== infix(_:_:)(v61, v64);

    v66 = 0;
    if ((v65 & 1) != 0)
      goto LABEL_18;
  }
  else
  {

  }
  v66 = 1;
LABEL_18:
  v67 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
  if (v68)
    v69 = v67;
  else
    v69 = 0;
  if (v68)
    v70 = v68;
  else
    v70 = 0xE000000000000000;
  v71 = dispatch thunk of DockCoreAccessory.serialNumber.getter(v67);
  if (v72)
    v73 = v71;
  else
    v73 = 0;
  if (v72)
    v74 = v72;
  else
    v74 = 0xE000000000000000;
  DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)(v58, v66, v155, v69, v70, v73, v74);
  swift_beginAccess(v29, v165, 0, 0);
  v75 = swift_unknownObjectWeakLoadStrong(v29);
  if (v75)
  {
    v76 = (char *)v75;
    v77 = v156;
    v78 = (uint64_t)v151;
    v79 = (uint64_t)v158;
    (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v151, v158, v159);
    v80 = v160;
    v81 = (uint64_t)v152;
    (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v152, v23, v10);
    v154(v81, 0, 1, v10);
    swift_beginAccess(&v76[qword_100270AF8], v164, 33, 0);
    sub_1001A9438(v81, v78);
    swift_endAccess(v164);

    v82 = *(void (**)(char *, uint64_t))(v80 + 8);
    v82(v23, v10);
  }
  else
  {
    v82 = *(void (**)(char *, uint64_t))(v160 + 8);
    v82(v23, v10);
    v77 = v156;
    v79 = (uint64_t)v158;
  }
LABEL_63:
  swift_beginAccess(v29, v164, 0, 0);
  v124 = (void *)swift_unknownObjectWeakLoadStrong(v29);

  if (!v124)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v79, v159);
  swift_beginAccess(v29, v163, 0, 0);
  v125 = swift_unknownObjectWeakLoadStrong(v29);
  if (!v125)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v79, v159);
  v126 = (void *)v125;
  swift_beginAccess(v29, v162, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v29);
  if (result)
  {
    v128 = (void *)result;
    v129 = (uint64_t *)(result + qword_100270AF8);
    swift_beginAccess(result + qword_100270AF8, v161, 0, 0);
    v130 = *v129;
    swift_bridgeObjectRetain(v130);

    if (*(_QWORD *)(v130 + 16))
    {
      v131 = sub_100145330(v79);
      v132 = (uint64_t)v150;
      if ((v133 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v160 + 16))(v150, *(_QWORD *)(v130 + 56) + *(_QWORD *)(v160 + 72) * v131, v10);
        v134 = 0;
      }
      else
      {
        v134 = 1;
      }
    }
    else
    {
      v134 = 1;
      v132 = (uint64_t)v150;
    }
    v154(v132, v134, 1, v10);
    swift_bridgeObjectRelease(v130);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v132, 1, v10);
    if ((_DWORD)result != 1)
    {
      sub_10018C284(v132);

      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v159);
      return ((uint64_t (*)(uint64_t, uint64_t))v82)(v132, v10);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018DDC4(uint64_t a1)
{
  return sub_10018ECE8(a1, (uint64_t)&unk_10023E1E0, (uint64_t)sub_10019FA60, (uint64_t)&unk_10023E1F8);
}

void sub_10018DDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t Strong;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  BOOL v85;
  char *v86;
  uint64_t v87;
  char *v88;
  double v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  char *v134;
  id v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char v161[8];
  uint64_t v162;
  uint64_t v163;
  char v164[8];
  uint64_t v165[3];
  _QWORD v166[2];
  char v167[8];
  char v168[8];
  uint64_t v169;

  v155 = a2;
  v2 = type metadata accessor for DockKitIDSMessageType(0);
  v146 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DockKitIDSMessage(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for Date(0);
  v157 = *(_QWORD *)(v154 - 8);
  v9 = __chkstk_darwin(v154);
  v148 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v147 = (char *)&v138 - v11;
  v12 = sub_10009061C(&qword_10026E6A0);
  v13 = __chkstk_darwin(v12);
  v149 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v150 = (uint64_t)&v138 - v16;
  __chkstk_darwin(v15);
  v156 = (char *)&v138 - v17;
  v153 = sub_10009061C(&qword_10026E0A0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v151 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  __chkstk_darwin(v19);
  v158 = (char *)&v138 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for DockKitBoundingBox(0);
  v21 = *(_QWORD *)(v159 - 8);
  v22 = __chkstk_darwin(v159);
  v24 = (char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter(v22);
  if (v25)
  {
    v26 = v25;
    v140 = v8;
    v143 = v25 >> 62;
    v139 = v4;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain(v25);
      v27 = (uint64_t)sub_1001BFDE8(v62);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v27 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
    }
    v138 = v2;
    v169 = v27;
    v28 = 0;
    sub_10019BC58(&v169, sub_1001A9120, sub_10019BCE0);
    v29 = v169;
    v30 = v169 < 0 || (v169 & 0x4000000000000000) != 0;
    v142 = v5;
    v141 = v6;
    v144 = 0;
    if (v30)
    {
      swift_bridgeObjectRetain(v169);
      v64 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_release(v29);
      swift_bridgeObjectRetain(v29);
      v66 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_release(v29);
      if (v66 < 0)
      {
        __break(1u);
        swift_release(v29);
        __break(1u);
        return;
      }
      if (v64 >= 10)
        v67 = 10;
      else
        v67 = v64;
      if (v64 >= 0)
        v31 = v67;
      else
        v31 = 10;
      swift_bridgeObjectRetain(v29);
      v39 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_release(v29);
      if (v39 < (uint64_t)v31)
      {
        __break(1u);
        goto LABEL_48;
      }
    }
    else if (*(uint64_t *)(v169 + 16) >= 10)
    {
      v31 = 10;
    }
    else
    {
      v31 = *(_QWORD *)(v169 + 16);
    }
    if ((v29 & 0xC000000000000001) != 0 && v31)
    {
      type metadata accessor for DKPersonTrackerState(0);
      v32 = 0;
      do
      {
        v33 = v32 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v32);
        v32 = v33;
      }
      while (v31 != v33);
    }
    if (v30)
    {
      v34 = swift_bridgeObjectRetain(v29);
      v35 = _CocoaArrayWrapper.subscript.getter(0, v31, v29, v34);
      v37 = v36;
      v39 = v38;
      v31 = v40;
      swift_release_n(v29, 2);
      v29 = v35;
      if ((v31 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v39 = 0;
      v37 = v29 + 32;
      v31 = (2 * v31) | 1;
      if ((v31 & 1) == 0)
        goto LABEL_19;
    }
    v28 = v26;
    v41 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v42 = swift_unknownObjectRetain_n(v29, 2);
    v43 = (_QWORD *)swift_dynamicCastClass(v42, v41);
    if (!v43)
    {
      swift_unknownObjectRelease(v29);
      v43 = _swiftEmptyArrayStorage;
    }
    v44 = v43[2];
    v45 = swift_release(v43);
    if (__OFSUB__(v31 >> 1, v39))
      goto LABEL_85;
    v45 = v29;
    if (v44 != (v31 >> 1) - v39)
      goto LABEL_86;
    v39 = swift_dynamicCastClass(v29, v41);
    v26 = v28;
    if (!v39)
    {
      swift_unknownObjectRelease(v29);
      v39 = (uint64_t)_swiftEmptyArrayStorage;
    }
    while (1)
    {
      swift_unknownObjectRelease(v29);
      if (v39 < 0 || (v39 & 0x4000000000000000) != 0)
      {
LABEL_48:
        v37 = _CocoaArrayWrapper.endIndex.getter(v39);
        if (!v37)
        {
LABEL_49:
          swift_release(v39);
          v47 = _swiftEmptyArrayStorage;
          goto LABEL_50;
        }
      }
      else
      {
        v37 = *(_QWORD *)(v39 + 16);
        if (!v37)
          goto LABEL_49;
      }
      v169 = (uint64_t)_swiftEmptyArrayStorage;
      v29 = (uint64_t)&v169;
      v45 = sub_1001A5100(0, v37 & ~(v37 >> 63), 0);
      if ((v37 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      swift_unknownObjectRelease(v45);
      v26 = v28;
LABEL_19:
      v39 = (uint64_t)sub_1001BFDDC(v29, v37, v39, v31);
    }
    v145 = v26;
    v46 = 0;
    v47 = (_QWORD *)v169;
    do
    {
      if ((v39 & 0xC000000000000001) != 0)
      {
        v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v39);
        v49 = v48;
      }
      else
      {
        v49 = *(_QWORD *)(v39 + 8 * v46 + 32);
        v48 = swift_retain(v49);
      }
      v50 = dispatch thunk of DKPersonTrackerState.rect.getter(v48);
      v52 = v51;
      v54 = v53;
      v56 = v55;
      v57 = v158;
      dispatch thunk of DKPersonTrackerState.uuid.getter(v58);
      DockKitBoundingBox.init(_:id:)(v57, v50, v52, v54, v56);
      swift_release(v49);
      v169 = (uint64_t)v47;
      v59 = v24;
      v61 = v47[2];
      v60 = v47[3];
      if (v61 >= v60 >> 1)
      {
        sub_1001A5100(v60 > 1, v61 + 1, 1);
        v47 = (_QWORD *)v169;
      }
      ++v46;
      v47[2] = v61 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v61, v59, v159);
      v24 = v59;
    }
    while (v37 != v46);
    swift_release(v39);
    v26 = v145;
LABEL_50:
    v69 = v155 + 16;
    swift_beginAccess(v155 + 16, &v169, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v69);
    v71 = v157;
    v72 = (uint64_t)v156;
    if (!Strong)
    {
      swift_bridgeObjectRelease(v26);
      v81 = v47;
LABEL_57:
      swift_bridgeObjectRelease(v81);
      return;
    }
    v73 = (char *)Strong;
    v74 = Strong + qword_100270B00;
    swift_beginAccess(Strong + qword_100270B00, v168, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)v74 + 16))
      goto LABEL_55;
    if (qword_10026BC00 != -1)
      swift_once(&qword_10026BC00, sub_100158DF8);
    v75 = qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
    v76 = swift_beginAccess(qword_100275638 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled, v167, 0, 0);
    v77 = v152;
    v78 = v151;
    v79 = v75;
    v80 = v153;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v152 + 16))(v151, v79, v153, v76);
    DKThreadSafe.wrappedValue.getter(v166, v80);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v80);
    if ((v166[0] & 1) != 0)
    {
LABEL_55:
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v47);

      return;
    }
    v82 = (uint64_t)&v73[qword_100270B10];
    swift_beginAccess(&v73[qword_100270B10], v166, 0, 0);
    sub_10019F9CC(v82, v72);
    v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    v84 = v154;
    if (v83(v72, 1, v154))
    {
      sub_10009B2C0(v72, &qword_10026E6A0);
      v85 = 0;
    }
    else
    {
      v86 = v147;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v147, v72, v84);
      v87 = sub_10009B2C0(v72, &qword_10026E6A0);
      v88 = v148;
      static Date.now.getter(v87);
      v89 = Date.distance(to:)(v88);
      v90 = *(void (**)(char *, uint64_t))(v71 + 8);
      v90(v88, v154);
      v90(v86, v154);
      v84 = v154;
      v85 = v89 > 0.1;
    }
    v91 = v150;
    sub_10019F9CC(v82, v150);
    v92 = v83(v91, 1, v84);
    v93 = sub_10009B2C0(v91, &qword_10026E6A0);
    if (v92 != 1 && !v85 && v47[2])
    {

      swift_bridgeObjectRelease(v47);
      v81 = (_QWORD *)v26;
      goto LABEL_57;
    }
    v94 = (uint64_t)v149;
    static Date.now.getter(v93);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v94, 0, 1, v154);
    swift_beginAccess(v82, v165, 33, 0);
    sub_10019FA14(v94, v82);
    swift_endAccess(v165);
    v95 = qword_100270B08;
    v96 = *(_QWORD *)&v73[qword_100270B08];
    *(_QWORD *)&v73[qword_100270B08] = v47;
    swift_bridgeObjectRelease(v96);
    if (qword_10026BC10 != -1)
      swift_once(&qword_10026BC10, sub_10018AF9C);
    v97 = type metadata accessor for Logger(0);
    v98 = sub_10008EA50(v97, (uint64_t)qword_100270AB8);
    v99 = v73;
    swift_bridgeObjectRetain(v26);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v101, (os_log_type_t)v102))
    {
      v157 = v98;
      v103 = swift_slowAlloc(32, -1);
      v155 = swift_slowAlloc(32, -1);
      v165[0] = v155;
      *(_DWORD *)v103 = 134218498;
      v160 = *(_QWORD *)(*(_QWORD *)&v73[v95] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v103 + 4, v103 + 12);
      *(_WORD *)(v103 + 12) = 2048;
      LODWORD(v156) = v102;
      v104 = v99;
      if (v143)
      {
        if (v26 >= 0)
          v106 = v26 & 0xFFFFFFFFFFFFFF8;
        else
          v106 = v26;
        swift_bridgeObjectRetain(v26);
        v105 = _CocoaArrayWrapper.endIndex.getter(v106);
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        v105 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v26);
      v160 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v103 + 14, v103 + 22);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v103 + 22) = 2080;
      v107 = v95;
      v108 = *(_QWORD *)&v73[v95];
      swift_bridgeObjectRetain(v108);
      v110 = Array.description.getter(v109, v159);
      v112 = v111;
      v113 = v108;
      v95 = v107;
      swift_bridgeObjectRelease(v113);
      v160 = sub_1000906BC(v110, v112, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v103 + 24, v103 + 32);
      v99 = v104;

      swift_bridgeObjectRelease(v112);
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v156, "Sending bounding box information %ld of %ld: %s", (uint8_t *)v103, 0x20u);
      v114 = v155;
      swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v103, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v26, 2);
    }
    v115 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v115, *(unsigned int *)(v115 + 48), *(unsigned __int16 *)(v115 + 52));
    v116 = PropertyListEncoder.init()();
    v117 = *(_QWORD *)&v73[v95];
    v165[0] = v117;
    swift_bridgeObjectRetain(v117);
    v118 = sub_10009061C(&qword_100270C18);
    v119 = sub_10019F920();
    v120 = v144;
    v121 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v165, v118, v119);
    if (v120)
    {
      swift_release(v116);
      swift_bridgeObjectRelease(v117);
      swift_errorRetain(v120);
      v123 = swift_errorRetain(v120);
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = (uint8_t *)swift_slowAlloc(12, -1);
        v127 = swift_slowAlloc(32, -1);
        v165[0] = v127;
        *(_DWORD *)v126 = 136315138;
        swift_getErrorValue(v120, v164, v161);
        v128 = Error.localizedDescription.getter(v162, v163);
        v130 = v129;
        v160 = sub_1000906BC(v128, v129, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v126 + 4, v126 + 12);
        swift_bridgeObjectRelease(v130);
        swift_errorRelease(v120);
        swift_errorRelease(v120);
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "Unable to broadcast bounding boxes: %s", v126, 0xCu);
        swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        swift_errorRelease(v120);
      }
      else
      {

        swift_errorRelease(v120);
        swift_errorRelease(v120);
        swift_errorRelease(v120);

      }
    }
    else
    {
      v131 = v121;
      v132 = v122;
      swift_release(v116);
      swift_bridgeObjectRelease(v117);
      v133 = *(void **)&v99[qword_100270AF0];
      if (v133)
      {
        v134 = v139;
        (*(void (**)(char *, _QWORD, uint64_t))(v146 + 104))(v139, enum case for DockKitIDSMessageType.objects(_:), v138);
        type metadata accessor for DockKitIDSClient(0);
        v135 = v133;
        v136 = v158;
        static DockKitIDSClient.DockKitBroadcastToken.getter();
        sub_10009B27C(v131, v132);
        v137 = v140;
        DockKitIDSMessage.init(type:token:payload:)(v134, v136, v131, v132);
        DKIDSMessagingCenter.send(_:)(v137);
        (*(void (**)(char *, uint64_t))(v141 + 8))(v137, v142);
        sub_10009B2FC(v131, v132);

      }
      else
      {
        sub_10009B2FC(v131, v132);

      }
    }
  }
}

