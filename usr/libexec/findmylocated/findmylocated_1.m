uint64_t sub_1000833F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1376);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1368);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1328);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1384));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100083468, v3, 0);
}

uint64_t sub_100083468()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 1360));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100083498(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v6 + 104) = a6;
  *(double *)(v6 + 96) = a1;
  *(_QWORD *)(v6 + 80) = a4;
  *(_QWORD *)(v6 + 88) = a5;
  *(_QWORD *)(v6 + 72) = a3;
  v8 = type metadata accessor for Handle(0);
  *(_QWORD *)(v6 + 112) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 120) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v6 + 128) = v10;
  *(_QWORD *)(v6 + 136) = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 144) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 152) = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100261960) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 160) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 168) = swift_task_alloc(v12);
  return swift_task_switch(sub_100083574, a5, 0);
}

void sub_100083574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v62 = *(_QWORD *)(v0 + 168);
  v60 = *(_QWORD *)(v0 + 160);
  v64 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 80);
  v57 = v1 + 64;
  v2 = -1;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(v1 + 64);
  v61 = *(_QWORD *)(v0 + 128) + 7;
  v58 = (unint64_t)(63 - v3) >> 6;
  v59 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(v1);
  v63 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v8 = (v4 - 1) & v4;
      v9 = v7 | (v63 << 6);
LABEL_7:
      v10 = *(char **)(v0 + 160);
      v11 = *(_QWORD *)(v0 + 112);
      v12 = (_QWORD *)(*(_QWORD *)(v59 + 48) + 16 * v9);
      v13 = v12[1];
      *(_QWORD *)v10 = *v12;
      *(_QWORD *)(v60 + 8) = v13;
      v14 = *(_QWORD *)(v59 + 56) + *(_QWORD *)(v64 + 72) * v9;
      v15 = sub_100037A5C(&qword_100261968);
      (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(&v10[*(int *)(v15 + 48)], v14, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
      swift_bridgeObjectRetain(v13);
      goto LABEL_26;
    }
    v16 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v16 < v58)
    {
      v17 = *(_QWORD *)(v57 + 8 * v16);
      if (v17)
        goto LABEL_11;
      v18 = v63 + 2;
      ++v63;
      if (v16 + 1 < v58)
      {
        v17 = *(_QWORD *)(v57 + 8 * v18);
        if (v17)
          goto LABEL_14;
        v63 = v16 + 1;
        if (v16 + 2 < v58)
        {
          v17 = *(_QWORD *)(v57 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
            goto LABEL_11;
          }
          v18 = v16 + 3;
          v63 = v16 + 2;
          if (v16 + 3 < v58)
            break;
        }
      }
    }
LABEL_25:
    v19 = *(_QWORD *)(v0 + 160);
    v20 = sub_100037A5C(&qword_100261968);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    v8 = 0;
LABEL_26:
    v21 = *(_QWORD *)(v0 + 168);
    sub_10000EF6C(*(_QWORD *)(v0 + 160), v21, &qword_100261960);
    v22 = sub_100037A5C(&qword_100261968);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
    v24 = *(uint64_t **)(v0 + 168);
    if (v23 == 1)
    {
      v53 = *(_QWORD *)(v0 + 152);
      v54 = *(_QWORD *)(v0 + 160);
      v56 = *(_QWORD *)(v0 + 136);
      v55 = *(_QWORD *)(v0 + 144);
      swift_release(*(_QWORD *)(v0 + 80));
      swift_task_dealloc(v24);
      swift_task_dealloc(v54);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v73 = v8;
    v25 = *(_QWORD *)(v0 + 152);
    v67 = v25;
    v72 = *(_QWORD *)(v0 + 144);
    v26 = *(char **)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 112);
    v65 = v27;
    v66 = v26;
    v28 = *(_QWORD *)(v0 + 96);
    v70 = *(_QWORD *)(v0 + 88);
    v71 = *(_QWORD *)(v0 + 104);
    v68 = *(_QWORD *)(v62 + 8);
    v69 = *v24;
    v29 = (char *)v24 + *(int *)(v22 + 48);
    v30 = type metadata accessor for TaskPriority(0);
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v25, 1, 1, v30);
    v32 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
    v32((uint64_t)v26, v29, v27);
    v33 = *(unsigned __int8 *)(v64 + 80);
    v34 = (v33 + 48) & ~v33;
    v35 = (v61 + v34) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v38 = (_QWORD *)swift_allocObject(&unk_100251200, v37 + 8, v33 | 7);
    v38[2] = 0;
    v39 = v38 + 2;
    v38[3] = 0;
    v38[4] = v69;
    v38[5] = v68;
    v32((uint64_t)v38 + v34, v66, v65);
    *(_QWORD *)((char *)v38 + v35) = v70;
    *(_QWORD *)((char *)v38 + v36) = v28;
    *(_QWORD *)((char *)v38 + v37) = v71;
    sub_100044264(v67, v72);
    LODWORD(v37) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v72, 1, v30);
    swift_retain(v70);
    v41 = *(_QWORD *)(v0 + 144);
    if ((_DWORD)v37 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 144));
      v42 = 0;
      v43 = *v39;
      if (*v39)
        goto LABEL_29;
    }
    else
    {
      v49 = TaskPriority.rawValue.getter(v40);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v41, v30);
      v42 = v49;
      v43 = *v39;
      if (*v39)
      {
LABEL_29:
        v44 = v38[3];
        ObjectType = swift_getObjectType(v43);
        swift_unknownObjectRetain(v43);
        v46 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v44);
        v48 = v47;
        swift_unknownObjectRelease(v43);
        goto LABEL_32;
      }
    }
    v46 = 0;
    v48 = 0;
LABEL_32:
    v4 = v73;
    v50 = **(_QWORD **)(v0 + 72);
    v51 = swift_allocObject(&unk_100251228, 32, 7);
    *(_QWORD *)(v51 + 16) = &unk_100261978;
    *(_QWORD *)(v51 + 24) = v38;
    v52 = v48 | v46;
    if (v48 | v46)
    {
      v52 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v46;
      *(_QWORD *)(v0 + 40) = v48;
    }
    v5 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 56) = v52;
    *(_QWORD *)(v0 + 64) = v50;
    v6 = swift_task_create(v42 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_100260180, v51);
    swift_release(v6);
    sub_1000442AC(v5);
  }
  v17 = *(_QWORD *)(v57 + 8 * v18);
  if (v17)
  {
LABEL_14:
    v16 = v18;
LABEL_11:
    v8 = (v17 - 1) & v17;
    v9 = __clz(__rbit64(v17)) + (v16 << 6);
    v63 = v16;
    goto LABEL_7;
  }
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v16 >= v58)
    {
      v63 = v58 - 1;
      goto LABEL_25;
    }
    v17 = *(_QWORD *)(v57 + 8 * v16);
    ++v18;
    if (v17)
      goto LABEL_11;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_100083AC0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(double *)(v8 + 104) = a1;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 72) = a5;
  *(_QWORD *)(v8 + 80) = a6;
  v9 = type metadata accessor for Handle(0);
  *(_QWORD *)(v8 + 112) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 120) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 136) = swift_task_alloc(v11);
  return swift_task_switch(sub_100083B38, 0, 0);
}

uint64_t sub_100083B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 144) = sub_100037A9C(v6, (uint64_t)qword_10027AB38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 152) = v7;
  v7(v1, v4, v2);
  v8 = swift_bridgeObjectRetain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 80);
  if (v11)
  {
    v27 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 112);
    v16 = swift_slowAlloc(42, -1);
    v26 = swift_slowAlloc(64, -1);
    v28 = v26;
    *(_DWORD *)v16 = 141558787;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v24, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v15, 3);
    *(_WORD *)(v16 + 22) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v16 + 24, v16 + 32);
    *(_WORD *)(v16 + 32) = 2081;
    v18 = Handle.identifier.getter(v17);
    v20 = v19;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v16 + 34, v16 + 42);
    swift_bridgeObjectRelease(v20);
    v21 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v21(v12, v25);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "CommandManager server response contains mapping packet with token %{private,mask.hash}s for handleId:%{private,mask.hash}s", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 80), 2);
    v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v12, v14);
  }

  *(_QWORD *)(v0 + 160) = v21;
  v22 = (_QWORD *)swift_task_alloc(dword_10026198C);
  *(_QWORD *)(v0 + 168) = v22;
  *v22 = v0;
  v22[1] = sub_100083E10;
  return sub_100084124(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(double *)(v0 + 104));
}

uint64_t sub_100083E10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100083E8C, 0, 0);
  v5 = *(_QWORD *)(v3 + 128);
  swift_task_dealloc(*(_QWORD *)(v3 + 136));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100083E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *log;
  void (*v22)(uint64_t, uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 176);
    log = v3;
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
    v6 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 112);
    v7 = swift_slowAlloc(32, -1);
    v23 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v25 = v24;
    *(_QWORD *)(v0 + 16) = 1752392040;
    *(_DWORD *)v7 = 141558531;
    v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v9 = Handle.identifier.getter(v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v11);
    v22(v6, v20);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 24, v7 + 32);
    *v23 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "Unable to send IDS Mapping packet for handleId:%{private,mask.hash}s due to %{public}@", (uint8_t *)v7, 0x20u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v23, 1, v13);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 176);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 112);
    swift_errorRelease(v14);
    v15(v16, v17);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

  }
  v18 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084124(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(v5 + 144) = v4;
  *(double *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 120) = a2;
  *(_QWORD *)(v5 + 128) = a3;
  *(_QWORD *)(v5 + 112) = a1;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 152) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 160) = v7;
  *(_QWORD *)(v5 + 168) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  *(_QWORD *)(v5 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MessagingOptions(0);
  *(_QWORD *)(v5 + 184) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 192) = v10;
  *(_QWORD *)(v5 + 200) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Destination(0);
  *(_QWORD *)(v5 + 208) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 216) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 232) = swift_task_alloc(v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v5 + 240) = v14;
  *v14 = v5;
  v14[1] = sub_100084228;
  return daemon.getter();
}

uint64_t sub_100084228(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 240);
  v5 = *v1;
  *(_QWORD *)(*v1 + 248) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 256) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_100084310;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100084310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 256);
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[18];
    v6 = sub_100084B0C;
  }
  else
  {
    v7 = v3[18];
    swift_release(v3[31]);
    v6 = sub_10008438C;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10008438C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *log;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 64) = 1;
  swift_bridgeObjectRetain(v1);
  v3 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v1;
  strcpy((char *)(v0 + 32), "mappingPacket");
  *(_WORD *)(v0 + 46) = -4864;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v4;
  v6 = Handle.isPhoneNumber.getter();
  LOBYTE(v1) = v6;
  v7 = Handle.identifier.getter(v6);
  if ((v1 & 1) != 0)
    Destination.init(phoneNumber:)(v7);
  else
    Destination.init(email:)(v7);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_10027AB38);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v52(v9, v8, v11);
  swift_bridgeObjectRetain_n(v12, 2);
  v14 = swift_bridgeObjectRetain_n(v5, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v19 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 120);
  v51 = v5;
  if (v17)
  {
    type = v16;
    log = v15;
    v22 = v5;
    v23 = swift_slowAlloc(52, -1);
    v47 = swift_slowAlloc(96, -1);
    v53 = v47;
    *(_DWORD *)v23 = 136447235;
    *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD00000000000002CLL, 0x80000001001FD8D0, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2160;
    *(_QWORD *)(v0 + 80) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v23 + 14, v23 + 22);
    *(_WORD *)(v23 + 22) = 2081;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v24 = sub_100153CC4();
    v26 = v25;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(v0 + 88) = sub_10002BA84(v24, v26, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease_n(v22, 2);
    *(_WORD *)(v23 + 32) = 2160;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v23 + 34, v23 + 42);
    *(_WORD *)(v23 + 42) = 2081;
    v27 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v20, v27);
    v30 = v29;
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v28, v29, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v23 + 44, v23 + 52);
    swift_bridgeObjectRelease(v30);
    v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(v18, v20);
    v15 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "CommandManager %{public}s with\npayload: %{private,mask.hash}s\nto destination: %{private,mask.hash}s", (uint8_t *)v23, 0x34u);
    swift_arrayDestroy(v47, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(v18, v20);
  }

  *(_QWORD *)(v0 + 280) = v31;
  v32 = *(_QWORD *)(v0 + 232);
  v34 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 176);
  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 160);
  v38 = *(_QWORD *)(v0 + 136);
  v48 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 264);
  v39 = sub_100037A5C(&qword_100261990);
  v40 = *(unsigned __int8 *)(v33 + 80);
  v41 = (v40 + 32) & ~v40;
  v42 = swift_allocObject(v39, v41 + *(_QWORD *)(v33 + 72), v40 | 7);
  *(_OWORD *)(v42 + 16) = xmmword_1001F35F0;
  v52(v42 + v41, v32, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1, v36);
  v43 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
  v44 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v42, 0, v35, v38, 0, 0, v43, v44, 0, 0);
  *(_QWORD *)(v0 + 288) = sub_100153940();
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v51);
  return swift_task_switch(sub_10008489C, *(_QWORD *)typea, 0);
}

uint64_t sub_10008489C()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to InternetMessaging.send(dictionary:messageOptions:)
                                  + 1));
  v0[37] = v1;
  *v1 = v0;
  v1[1] = sub_1000848FC;
  return InternetMessaging.send(dictionary:messageOptions:)(v0[21], v0[36], v0[25]);
}

uint64_t sub_1000848FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[33];
    v5 = sub_100084A2C;
  }
  else
  {
    v6 = v2[36];
    v8 = v2[20];
    v7 = v2[21];
    v10 = v2 + 18;
    v9 = v2[18];
    (*(void (**)(uint64_t, _QWORD))(v8 + 8))(v7, v10[1]);
    swift_bridgeObjectRelease(v6);
    v5 = sub_100084980;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100084980()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v1(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084A2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  return swift_task_switch(sub_100084A6C, v1, 0);
}

uint64_t sub_100084A6C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_100084B98, v1, 0);
}

uint64_t sub_100084B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  NSObject *log;
  uint64_t v18;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 96) = sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v3);
  sub_100028DAC(v0 + 16);
  sub_100028DAC(v0 + 32);
  swift_bridgeObjectRetain(v3);
  sub_100028DAC(v0 + 16);
  v5 = sub_100028DAC(v0 + 32);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    v8 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v18 = v16;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    swift_bridgeObjectRetain(v3);
    sub_100028DAC(v0 + 16);
    sub_100028DAC(v0 + 32);
    v9 = sub_100153CC4();
    v10 = v4;
    v12 = v11;
    swift_bridgeObjectRelease(v3);
    sub_100017F44(v0 + 16);
    sub_100017F44(v0 + 32);
    *(_QWORD *)(v0 + 72) = sub_10002BA84(v9, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 14, v8 + 22);
    v13 = v12;
    v4 = v10;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v3);
    sub_100017F44(v0 + 16);
    sub_100017F44(v0 + 32);
    swift_bridgeObjectRelease(v3);
    sub_100017F44(v0 + 16);
    sub_100017F44(v0 + 32);
    v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v7, "CommandManager IDS messageReceived payload extract:%{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    sub_100017F44(v0 + 16);
    sub_100017F44(v0 + 32);
    swift_bridgeObjectRelease(v3);
    sub_100017F44(v0 + 16);
    sub_100017F44(v0 + 32);
  }

  v14 = (_QWORD *)swift_task_alloc(dword_1002662EC);
  *(_QWORD *)(v0 + 104) = v14;
  *v14 = v0;
  v14[1] = sub_100084E74;
  return sub_10019A870(v4, v3);
}

uint64_t sub_100084E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 104);
  v5 = *v3;
  *(_QWORD *)(v5 + 112) = a1;
  *(_QWORD *)(v5 + 120) = a2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return swift_task_switch(sub_100084EE8, *(_QWORD *)(v5 + 88), 0);
}

uint64_t sub_100084EE8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 120);
  if (v1)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = *(_QWORD *)(v0 + 112);
      v6 = swift_slowAlloc(22, -1);
      v7 = swift_slowAlloc(32, -1);
      v9 = v7;
      *(_DWORD *)v6 = 141558275;
      *(_QWORD *)(v0 + 48) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
      *(_WORD *)(v6 + 12) = 2081;
      swift_bridgeObjectRetain(v1);
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v5, v1, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 14, v6 + 22);
      swift_bridgeObjectRelease_n(v1, 3);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CommandManager send import packet to server and get reponse ID: %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v1, 2);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008507C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[10] = a2;
  v4[11] = a3;
  v4[9] = a1;
  v5 = type metadata accessor for Destination(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Account(0);
  v4[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v11);
  v4[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_100085140, v3, 0);
}

uint64_t sub_100085140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v45 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v53 = *(_QWORD *)(v0 + 112);
  v47 = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);
  v49 = *(_QWORD *)(v0 + 88);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AB38);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v45, v7, v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v53, v49, v51);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 168);
  if (v13)
  {
    v39 = v9;
    v15 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 152);
    v52 = v12;
    v16 = *(_QWORD *)(v0 + 144);
    v43 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 120);
    v42 = *(_QWORD *)(v0 + 136);
    v46 = *(_QWORD *)(v0 + 112);
    v48 = *(_QWORD *)(v0 + 104);
    v44 = *(_QWORD *)(v0 + 96);
    v17 = swift_slowAlloc(72, -1);
    v50 = swift_slowAlloc(128, -1);
    v54 = v50;
    *(_DWORD *)v17 = 136447747;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000002CLL, 0x80000001001FD980, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v39(v15, v14, v16);
    v18 = String.init<A>(describing:)(v15, v16);
    v20 = v19;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v18, v19, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v14, v16);
    *(_WORD *)(v17 + 32) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    v21 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v41, v21);
    v24 = v23;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v22, v23, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v41);
    *(_WORD *)(v17 + 52) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 54, v17 + 62);
    *(_WORD *)(v17 + 62) = 2081;
    v25 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v44, v25);
    v28 = v27;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v26, v27, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 64, v17 + 72);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v44);
    _os_log_impl((void *)&_mh_execute_header, v11, v52, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\nid: %{private,mask.hash}s\nfrom: %{private,mask.hash}s", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy(v50, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v30 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);

  }
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000855E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[44] = a3;
  v4[45] = v3;
  v4[42] = a1;
  v4[43] = a2;
  v5 = type metadata accessor for Destination(0);
  v4[46] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[47] = v6;
  v4[48] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Account(0);
  v4[49] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[50] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v9);
  v4[52] = swift_task_alloc(v9);
  return swift_task_switch(sub_10008567C, v3, 0);
}

uint64_t sub_10008567C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t type;
  uint64_t v52;
  _OWORD *v53;
  unint64_t *v54;
  uint64_t v55;

  v54 = (unint64_t *)(v0 + 112);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v53 = (_OWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 344);
  v52 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 424) = sub_100037A9C(v9, (uint64_t)qword_10027AB38);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v10(v1, v8, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v11 = swift_bridgeObjectRetain_n(v52, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 416);
  if (v14)
  {
    type = v13;
    v16 = *(_QWORD *)(v0 + 408);
    v45 = *(_QWORD *)(v0 + 400);
    v17 = *(_QWORD *)(v0 + 392);
    v47 = *(_QWORD *)(v0 + 384);
    v48 = *(_QWORD *)(v0 + 376);
    v46 = *(_QWORD *)(v0 + 368);
    v49 = *(_QWORD *)(v0 + 352);
    v18 = swift_slowAlloc(72, -1);
    v50 = swift_slowAlloc(128, -1);
    v55 = v50;
    *(_DWORD *)v18 = 136447747;
    *(_QWORD *)(v0 + 280) = sub_10002BA84(0xD00000000000003BLL, 0x80000001001FD900, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2160;
    *(_QWORD *)(v0 + 288) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2081;
    v10(v16, v15, v17);
    v19 = String.init<A>(describing:)(v16, v17);
    v21 = v20;
    *(_QWORD *)(v0 + 296) = sub_10002BA84(v19, v20, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v17);
    *(_WORD *)(v18 + 32) = 2160;
    *(_QWORD *)(v0 + 304) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v18 + 34, v18 + 42);
    *(_WORD *)(v18 + 42) = 2081;
    v22 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v46, v22);
    v25 = v24;
    *(_QWORD *)(v0 + 312) = sub_10002BA84(v23, v24, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v18 + 44, v18 + 52);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v46);
    *(_WORD *)(v18 + 52) = 2160;
    *(_QWORD *)(v0 + 320) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v18 + 54, v18 + 62);
    *(_WORD *)(v18 + 62) = 2081;
    swift_bridgeObjectRetain(v49);
    sub_100037A5C(&qword_1002619D8);
    v27 = Dictionary.description.getter(v26);
    v29 = v28;
    swift_bridgeObjectRelease(v49);
    *(_QWORD *)(v0 + 328) = sub_10002BA84(v27, v29, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v18 + 64, v18 + 72);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease_n(v49, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\ndictionary: %{private,mask.hash}s", (uint8_t *)v18, 0x48u);
    swift_arrayDestroy(v50, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {
    v31 = *(_QWORD *)(v0 + 376);
    v30 = *(_QWORD *)(v0 + 384);
    v32 = *(_QWORD *)(v0 + 368);
    v33 = *(_QWORD *)(v0 + 352);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 392));
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_bridgeObjectRelease_n(v33, 2);

  }
  v34 = sub_1000827C0(*(_QWORD *)(v0 + 352));
  sub_100153F54(v34, v54);
  v35 = sub_10000EF6C((uint64_t)v54, (uint64_t)v53, &qword_1002619C8);
  if (*(_QWORD *)(v0 + 72))
  {
    v36 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *v53;
    *(_OWORD *)(v0 + 32) = v36;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    v37 = (_QWORD *)swift_task_alloc(dword_1002619D4);
    *(_QWORD *)(v0 + 432) = v37;
    *v37 = v0;
    v37[1] = sub_100085C04;
    v38 = *(_QWORD *)(v0 + 360);
    v37[10] = v0 + 16;
    v37[11] = v38;
    return swift_task_switch(sub_100084B98, v38, 0);
  }
  else
  {
    v40 = Logger.logObject.getter(v35);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      swift_slowDealloc(v42, -1, -1);
    }

    v43 = *(_QWORD *)(v0 + 408);
    v44 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100085C04()
{
  uint64_t v0;
  uint64_t *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = (_OWORD *)(*v1 + 16);
  v3 = *(_QWORD *)(*v1 + 432);
  v4 = *v1;
  *(_QWORD *)(v4 + 440) = v0;
  swift_task_dealloc(v3);
  v5 = (_OWORD *)(v4 + 32);
  v6 = (_OWORD *)(v4 + 48);
  if (v0)
  {
    v7 = *(_QWORD *)(v4 + 360);
    *(_OWORD *)(v4 + 192) = *v2;
    sub_100017F44(v4 + 192);
    *(_OWORD *)(v4 + 176) = *v5;
    sub_100017F44(v4 + 176);
    *(_OWORD *)(v4 + 160) = *v6;
    sub_100017F44(v4 + 160);
    return swift_task_switch(sub_100085D24, v7, 0);
  }
  else
  {
    *(_OWORD *)(v4 + 240) = *v2;
    sub_100017F44(v4 + 240);
    *(_OWORD *)(v4 + 224) = *v5;
    sub_100017F44(v4 + 224);
    *(_OWORD *)(v4 + 208) = *v6;
    sub_100017F44(v4 + 208);
    v9 = *(_QWORD *)(v4 + 408);
    v10 = *(_QWORD *)(v4 + 384);
    swift_task_dealloc(*(_QWORD *)(v4 + 416));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_100085D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 440);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 440);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 256) = sub_10002BA84(0xD00000000000003BLL, 0x80000001001FD900, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 264) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 264, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 272) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 440);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v13 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100085F4C, v1, 0);
}

uint64_t sub_100085F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = type metadata accessor for Account(0);
    v11 = sub_100004EA8(&qword_1002619B8, (uint64_t (*)(uint64_t))&type metadata accessor for Account, (uint64_t)&protocol conformance descriptor for Account);
    swift_bridgeObjectRetain(v7);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging accounts changed. Accounts: %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100086188, v1, 0);
}

uint64_t sub_100086188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = type metadata accessor for Device(0);
    v11 = sub_100004EA8(&qword_1002619A8, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    swift_bridgeObjectRetain(v7);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging devices changed. Devices: %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000863AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1002619FC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return sub_10008507C(a1, a2, a3);
}

uint64_t sub_100086414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002619E8 + dword_1002619E8);
  v7 = (_QWORD *)swift_task_alloc(unk_1002619EC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return v9(a1, a2, a3);
}

uint64_t sub_1000864A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1002619C4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return sub_1000855E0(a1, a2, a3);
}

uint64_t sub_100086508(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1002619B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  v5[3] = a1;
  return swift_task_switch(sub_100085F4C, v4, 0);
}

uint64_t sub_10008656C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1002619A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  v5[3] = a1;
  return swift_task_switch(sub_100086188, v4, 0);
}

uint64_t sub_1000865D0(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v8 = v2[4];
  v9 = *((_QWORD *)v2 + 5);
  v10 = (_QWORD *)swift_task_alloc(dword_100261954);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_1000087DC;
  return sub_100083498(v8, a1, a2, v6, v7, v9);
}

uint64_t sub_100086654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000866FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(double *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_100261974);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_100083AC0(v13, a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000867DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100086800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[10] = a2;
  v4[11] = a3;
  v4[9] = a1;
  v5 = sub_100037A5C(&qword_1002601E8);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Destination(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v4[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Account(0);
  v4[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v11);
  v4[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000868C8, v3, 0);
}

uint64_t sub_1000868C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v45 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v53 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)type = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);
  v49 = *(_QWORD *)(v0 + 88);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AB38);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v45, v7, v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)type + 16))(v53, v49, v51);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 168);
  if (v13)
  {
    v39 = v9;
    v15 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 152);
    v54 = v11;
    v16 = *(_QWORD *)(v0 + 144);
    v43 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 120);
    v42 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 104);
    v44 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 112);
    v17 = swift_slowAlloc(72, -1);
    v52 = swift_slowAlloc(128, -1);
    v55 = v52;
    *(_DWORD *)v17 = 136447747;
    typea = v12;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000003ELL, 0x80000001001FD940, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v39(v15, v14, v16);
    v18 = String.init<A>(describing:)(v15, v16);
    v20 = v19;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v18, v19, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v14, v16);
    *(_WORD *)(v17 + 32) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    v21 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v41, v21);
    v24 = v23;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v22, v23, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v41);
    *(_WORD *)(v17 + 52) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 54, v17 + 62);
    *(_WORD *)(v17 + 62) = 2081;
    v25 = sub_100086D58();
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v44, v25);
    v28 = v27;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v26, v27, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 64, v17 + 72);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v46, v44);
    _os_log_impl((void *)&_mh_execute_header, v54, typea, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy(v52, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v30 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);

  }
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086D50(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100086D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002619F0;
  if (!qword_1002619F0)
  {
    v1 = sub_10003C1FC(&qword_1002601E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Message<A>, v1);
    atomic_store(result, &qword_1002619F0);
  }
  return result;
}

uint64_t sub_100086DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch(sub_100086DC8, 0, 0);
}

uint64_t sub_100086DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 40) = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v5;
  v6 = sub_100037A5C(&qword_100261018);
  *v5 = v0;
  v5[1] = sub_100058C2C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000015, 0x80000001001FDA10, sub_100097FF8, v3, v6);
}

uint64_t sub_100086E80()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[14] = v0;
  v1[15] = *v0;
  v2 = sub_100037A5C(&qword_100260A48);
  v1[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v1[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[18] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v5);
  v1[20] = swift_task_alloc(v5);
  v1[21] = swift_task_alloc(v5);
  return swift_task_switch(sub_100086F5C, v0, 0);
}

uint64_t sub_100086F5C()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_13;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v19 = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000011, 0x80000001001FD9B0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Feature.FindMy.redStripe FF disabled.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    v11 = v10;
    goto LABEL_12;
  }
  if ((sub_1001C30A4() & 1) != 0)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 176) = v3;
    *v3 = v0;
    v3[1] = sub_100087328;
    return daemon.getter();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
  v7 = Logger.logObject.getter(v13);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v14))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v19 = v15;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000011, 0x80000001001FD9B0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v14, "%{public}s isFindingCapable == false.", v9, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v11 = v15;
LABEL_12:
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
LABEL_13:

  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100087328(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = *v1;
  *(_QWORD *)(*v1 + 184) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 192) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100087444;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100087444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v5 = *(_QWORD **)v2;
  v5[25] = a1;
  v5[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100087E5C, v5[14], 0);
  swift_release(v5[23]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002606B4);
  v5[27] = v7;
  *v7 = v5;
  v7[1] = sub_100087534;
  return sub_100056F84(v5[16]);
}

uint64_t sub_100087534()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100087EF8;
  else
    v4 = sub_1000875E4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), 0);
}

uint64_t sub_1000875E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;

  v1 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[18] + 48))(v1, 1, v0[17]) == 1)
  {
    sub_1000087A0(v1, &qword_100260A48);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100037A9C(v2, (uint64_t)qword_10027B330);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No OwnerSharedSecretRecord!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_100097FB4();
    v0[32] = v7;
    v8 = swift_allocError(&type metadata for NITokenService.Error, v7, 0, 0);
    v0[33] = v8;
    *v9 = 17;
    v10 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    v0[34] = v10;
    v11 = (_QWORD *)swift_task_alloc(dword_100264B54);
    v0[35] = v11;
    *v11 = v0;
    v11[1] = sub_100087CF8;
    v12 = v8;
  }
  else
  {
    sub_1000321F4(v1, v0[21], type metadata accessor for OwnerSharedSecretsRecord);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v14 = v0[20];
    v13 = v0[21];
    v15 = type metadata accessor for Logger(0);
    sub_100037A9C(v15, (uint64_t)qword_10027B330);
    v16 = sub_100025C70(v13, v14, type metadata accessor for OwnerSharedSecretsRecord);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = v0[20];
    if (v19)
    {
      v21 = v0[19];
      v42 = v0[17];
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v43 = v23;
      *(_DWORD *)v22 = 136446466;
      v0[12] = sub_10002BA84(0xD000000000000011, 0x80000001001FD9B0, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2080;
      sub_100025C70(v20, v21, type metadata accessor for OwnerSharedSecretsRecord);
      v24 = String.init<A>(describing:)(v21, v42);
      v26 = v25;
      v0[13] = sub_10002BA84(v24, v25, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v26);
      sub_100024990(v20, type metadata accessor for OwnerSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s found existing owner record: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_100024990(v0[20], type metadata accessor for OwnerSharedSecretsRecord);
    }

    v27 = (uint64_t *)(v0[21] + *(int *)(v0[17] + 24));
    v28 = *v27;
    v29 = v27[1];
    sub_10001A484(*v27, v29);
    v30 = sub_1001D3C50(v28, v29, 0, 1);
    v0[29] = v30;
    sub_100037AB4(v28, v29);
    v31 = v30;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 141558275;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2113;
      if (v30)
      {
        v0[11] = v31;
        v36 = v31;
        v37 = v0 + 11;
        v38 = v0 + 12;
      }
      else
      {
        v0[10] = 0;
        v37 = v0 + 10;
        v38 = v0 + 11;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v34 + 14, v34 + 22);
      *v35 = v30;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "ownerToken: %{private,mask.hash}@.", (uint8_t *)v34, 0x16u);
      v39 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v35, 1, v39);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {

      v32 = v31;
    }

    v10 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    v0[30] = v10;
    v40 = (_QWORD *)swift_task_alloc(dword_100264B54);
    v0[31] = v40;
    *v40 = v0;
    v40[1] = sub_100087BB0;
    v12 = 0;
  }
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FD9D0, v12, v10);
}

uint64_t sub_100087BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100087C44, v2, 0);
}

uint64_t sub_100087C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  sub_100024990(v1, type metadata accessor for OwnerSharedSecretsRecord);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100087CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_100087D98, v3, 0);
}

uint64_t sub_100087D98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = swift_allocError(&type metadata for NITokenService.Error, *(_QWORD *)(v0 + 256), 0, 0);
  *v2 = 17;
  swift_willThrow(v1);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087F94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[3] = v0;
  v2 = sub_100037A5C(&qword_100260538);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[5] = v3;
  *v3 = v1;
  v3[1] = sub_100088004;
  return daemon.getter();
}

uint64_t sub_100088004(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *v1;
  *(_QWORD *)(*v1 + 48) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 56) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000880EC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000880EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v5 = *(_QWORD **)v2;
  v5[8] = a1;
  v5[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000885E8, v5[3], 0);
  swift_release(v5[6]);
  v7 = (_QWORD *)swift_task_alloc(dword_100262D8C);
  v5[10] = v7;
  *v7 = v5;
  v7[1] = sub_100088198;
  return sub_100006C00(v5[4]);
}

uint64_t sub_100088198()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_1000881F0, v1, 0);
}

uint64_t sub_1000881F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Device(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 24);
  if ((_DWORD)v4 == 1)
  {
    sub_1000087A0(v1, &qword_100260538);
    v6 = sub_10008844C;
  }
  else
  {
    *(_BYTE *)(v0 + 88) = Device.isThisDevice.getter(v4) & 1;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v6 = sub_100088298;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100088298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(unsigned __int8 *)(v0 + 88);
  if ((_DWORD)v1 == 1)
  {
    swift_release(*(_QWORD *)(v0 + 64));
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100037A9C(v2, (uint64_t)qword_10027B330);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 64);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v11 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x80000001001FDB40, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s not Me device.", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    swift_release(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10008844C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 64);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v10 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x80000001001FDB40, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s not Me device.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_release(v6);

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000885E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10008862C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Friend(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[8] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000886C8, v1, 0);
}

uint64_t sub_1000886C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v24 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 16);
  v21 = v6;
  v22 = *(_QWORD *)(v0 + 72);
  v25 = *(_QWORD *)(v0 + 32);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v23 = v1;
  v20(v1, v6, v4);
  v7 = *(unsigned __int8 *)(v2 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = v3 + 7;
  v10 = (v8 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_100251398, v10 + 8, v7 | 7);
  *(_QWORD *)(v11 + 16) = v5;
  v12 = v11 + v8;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v13(v12, v1, v4);
  *(_QWORD *)(v11 + v10) = v25;
  v20(v22, v21, v4);
  v14 = (v7 + 16) & ~v7;
  v15 = (v14 + v9) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_1002513C0, v15 + 8, v7 | 7);
  v13(v16 + v14, v22, v4);
  *(_QWORD *)(v16 + v15) = v25;
  v17 = swift_retain(v5);
  UUID.init()(v17);
  v18 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v24, &unk_100261AF0, v11, &unk_100261B00, v16);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v18);
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008886C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v3[35] = a2;
  v3[36] = a3;
  v3[34] = a1;
  v4 = type metadata accessor for MessagingOptions(0);
  v3[37] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[38] = v5;
  v3[39] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002601E8);
  v3[40] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[41] = v7;
  v3[42] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v3[43] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[44] = swift_task_alloc(v9);
  v3[45] = swift_task_alloc(v9);
  v10 = sub_100037A5C(&qword_100260F80);
  v3[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FriendSharedSecretsRecord(0);
  v3[47] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[48] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[49] = swift_task_alloc(v13);
  v3[50] = swift_task_alloc(v13);
  v3[51] = swift_task_alloc(v13);
  v14 = type metadata accessor for Friend(0);
  v3[52] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[53] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[54] = swift_task_alloc(v16);
  v3[55] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v17);
  v3[57] = swift_task_alloc(v17);
  v3[58] = swift_task_alloc(v17);
  v3[59] = swift_task_alloc(v17);
  v3[60] = swift_task_alloc(v17);
  v3[61] = swift_task_alloc(v17);
  v3[62] = swift_task_alloc(v17);
  v18 = type metadata accessor for Date(0);
  v3[63] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[64] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[65] = swift_task_alloc(v20);
  v3[66] = swift_task_alloc(v20);
  v3[67] = swift_task_alloc(v20);
  v3[68] = swift_task_alloc(v20);
  v3[69] = swift_task_alloc(v20);
  v21 = sub_100037A5C(&qword_100260580);
  v3[70] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Account(0);
  v3[71] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v3[72] = v23;
  v3[73] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_1002675F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[74] = swift_task_alloc(v24);
  v3[75] = swift_task_alloc(v24);
  v25 = type metadata accessor for UUID(0);
  v3[76] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v3[77] = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[78] = swift_task_alloc(v27);
  v3[79] = swift_task_alloc(v27);
  v3[80] = swift_task_alloc(v27);
  v28 = type metadata accessor for Handle(0);
  v3[81] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v3[82] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[83] = swift_task_alloc(v30);
  v3[84] = swift_task_alloc(v30);
  v3[85] = swift_task_alloc(v30);
  v3[86] = swift_task_alloc(v30);
  v3[87] = swift_task_alloc(v30);
  v3[88] = swift_task_alloc(v30);
  v3[89] = swift_task_alloc(v30);
  return swift_task_switch(sub_100088BD4, 0, 0);
}

uint64_t sub_100088BD4()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_13;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v51[0] = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Feature.FindMy.redStripe FF disabled.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    v11 = v10;
    goto LABEL_12;
  }
  if ((sub_1001C30A4() & 1) != 0)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100261B0C);
    *(_QWORD *)(v0 + 720) = v3;
    *v3 = v0;
    v3[1] = sub_100089114;
    return sub_100087F94();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
  v7 = Logger.logObject.getter(v13);
  v14 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v14))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v51[0] = v15;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v14, "%{public}s isFindingCapable == false.", v9, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v11 = v15;
LABEL_12:
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
LABEL_13:

  v16 = *(_QWORD *)(v0 + 704);
  v17 = *(_QWORD *)(v0 + 696);
  v18 = *(_QWORD *)(v0 + 688);
  v19 = *(_QWORD *)(v0 + 680);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 640);
  v23 = *(_QWORD *)(v0 + 632);
  v24 = *(_QWORD *)(v0 + 624);
  v25 = *(_QWORD *)(v0 + 600);
  v26 = *(_QWORD *)(v0 + 592);
  v27 = *(_QWORD *)(v0 + 584);
  v28 = *(_QWORD *)(v0 + 560);
  v29 = *(_QWORD *)(v0 + 552);
  v30 = *(_QWORD *)(v0 + 544);
  v31 = *(_QWORD *)(v0 + 536);
  v32 = *(_QWORD *)(v0 + 528);
  v33 = *(_QWORD *)(v0 + 520);
  v34 = *(_QWORD *)(v0 + 496);
  v35 = *(_QWORD *)(v0 + 488);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 464);
  v39 = *(_QWORD *)(v0 + 456);
  v40 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 440);
  v42 = *(_QWORD *)(v0 + 432);
  v43 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v45 = *(_QWORD *)(v0 + 392);
  v46 = *(_QWORD *)(v0 + 368);
  v47 = *(_QWORD *)(v0 + 360);
  v48 = *(_QWORD *)(v0 + 352);
  v49 = *(_QWORD *)(v0 + 336);
  v50 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089114(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 720);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 712);
    v8 = *(_QWORD *)(v4 + 704);
    v9 = *(_QWORD *)(v4 + 696);
    v10 = *(_QWORD *)(v4 + 688);
    v11 = *(_QWORD *)(v4 + 680);
    v12 = *(_QWORD *)(v4 + 672);
    v13 = *(_QWORD *)(v4 + 664);
    v14 = *(_QWORD *)(v4 + 640);
    v15 = *(_QWORD *)(v4 + 632);
    v18 = *(_QWORD *)(v4 + 624);
    v19 = *(_QWORD *)(v4 + 600);
    v20 = *(_QWORD *)(v4 + 592);
    v21 = *(_QWORD *)(v4 + 584);
    v22 = *(_QWORD *)(v4 + 560);
    v23 = *(_QWORD *)(v4 + 552);
    v24 = *(_QWORD *)(v4 + 544);
    v25 = *(_QWORD *)(v4 + 536);
    v26 = *(_QWORD *)(v4 + 528);
    v27 = *(_QWORD *)(v4 + 520);
    v28 = *(_QWORD *)(v4 + 496);
    v29 = *(_QWORD *)(v4 + 488);
    v30 = *(_QWORD *)(v4 + 480);
    v31 = *(_QWORD *)(v4 + 472);
    v32 = *(_QWORD *)(v4 + 464);
    v33 = *(_QWORD *)(v4 + 456);
    v34 = *(_QWORD *)(v4 + 448);
    v35 = *(_QWORD *)(v4 + 440);
    v36 = *(_QWORD *)(v4 + 432);
    v37 = *(_QWORD *)(v4 + 408);
    v38 = *(_QWORD *)(v4 + 400);
    v39 = *(_QWORD *)(v4 + 392);
    v40 = *(_QWORD *)(v4 + 368);
    v41 = *(_QWORD *)(v4 + 360);
    v42 = *(_QWORD *)(v4 + 352);
    v43 = *(_QWORD *)(v4 + 336);
    v16 = *(_QWORD *)(v4 + 312);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(_BYTE *)(v4 + 1049) = a1 & 1;
    return swift_task_switch(sub_1000893A4, 0, 0);
  }
}

uint64_t sub_1000893A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];

  if (*(_BYTE *)(v1 + 1049) == 1)
  {
    v2 = *(_QWORD *)(v1 + 616);
    v3 = *(_QWORD *)(v1 + 608);
    v4 = *(_QWORD *)(v1 + 600);
    v5 = Friend.handle.getter(a1);
    Handle.peerID.getter(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 616) + 32))(*(_QWORD *)(v1 + 640), *(_QWORD *)(v1 + 600), *(_QWORD *)(v1 + 608));
      v33 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
      *(_QWORD *)(v1 + 728) = v33;
      *v33 = v1;
      v33[1] = sub_100089A34;
      return daemon.getter();
    }
    sub_1000087A0(*(_QWORD *)(v1 + 600), (uint64_t *)&unk_1002675F0);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v6 = *(_QWORD *)(v1 + 712);
    v7 = *(_QWORD *)(v1 + 704);
    v8 = *(_QWORD *)(v1 + 656);
    v9 = *(_QWORD *)(v1 + 648);
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027B330);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v1 + 704);
    v16 = *(_QWORD *)(v1 + 656);
    if (v14)
    {
      v75 = *(_QWORD *)(v1 + 648);
      v17 = swift_slowAlloc(32, -1);
      v18 = swift_slowAlloc(64, -1);
      v76[0] = v18;
      *(_DWORD *)v17 = 136446723;
      *(_QWORD *)(v1 + 80) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2160;
      *(_QWORD *)(v1 + 88) = 1752392040;
      v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v17 + 14, v17 + 22);
      *(_WORD *)(v17 + 22) = 2081;
      v20 = Handle.identifier.getter(v19);
      v22 = v21;
      *(_QWORD *)(v1 + 96) = sub_10002BA84(v20, v21, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v17 + 24, v17 + 32);
      swift_bridgeObjectRelease(v22);
      v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v23(v15, v75);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Missing peerID for handle %{private,mask.hash}s!", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v23(*(_QWORD *)(v1 + 704), *(_QWORD *)(v1 + 648));
    }

    v35 = *(_QWORD *)(v1 + 712);
    v36 = *(_QWORD *)(v1 + 648);
    v37 = sub_100097FB4();
    v38 = swift_allocError(&type metadata for NITokenService.Error, v37, 0, 0);
    *v39 = 15;
    swift_willThrow(v38);
    v23(v35, v36);
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100037A9C(v24, (uint64_t)qword_10027B330);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v76[0] = v29;
      *(_DWORD *)v28 = 136446210;
      *(_QWORD *)(v1 + 72) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v28 + 4, v28 + 12);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s this device is NOT eligible to generate finding tokens.", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }

    v30 = sub_100097FB4();
    v31 = swift_allocError(&type metadata for NITokenService.Error, v30, 0, 0);
    *v32 = 20;
    swift_willThrow(v31);
  }
  v40 = *(_QWORD *)(v1 + 704);
  v41 = *(_QWORD *)(v1 + 696);
  v42 = *(_QWORD *)(v1 + 688);
  v43 = *(_QWORD *)(v1 + 680);
  v44 = *(_QWORD *)(v1 + 672);
  v45 = *(_QWORD *)(v1 + 664);
  v46 = *(_QWORD *)(v1 + 640);
  v47 = *(_QWORD *)(v1 + 632);
  v48 = *(_QWORD *)(v1 + 624);
  v49 = *(_QWORD *)(v1 + 600);
  v50 = *(_QWORD *)(v1 + 592);
  v51 = *(_QWORD *)(v1 + 584);
  v52 = *(_QWORD *)(v1 + 560);
  v53 = *(_QWORD *)(v1 + 552);
  v54 = *(_QWORD *)(v1 + 544);
  v55 = *(_QWORD *)(v1 + 536);
  v56 = *(_QWORD *)(v1 + 528);
  v57 = *(_QWORD *)(v1 + 520);
  v58 = *(_QWORD *)(v1 + 496);
  v59 = *(_QWORD *)(v1 + 488);
  v60 = *(_QWORD *)(v1 + 480);
  v61 = *(_QWORD *)(v1 + 472);
  v62 = *(_QWORD *)(v1 + 464);
  v63 = *(_QWORD *)(v1 + 456);
  v64 = *(_QWORD *)(v1 + 448);
  v65 = *(_QWORD *)(v1 + 440);
  v66 = *(_QWORD *)(v1 + 432);
  v67 = *(_QWORD *)(v1 + 408);
  v68 = *(_QWORD *)(v1 + 400);
  v69 = *(_QWORD *)(v1 + 392);
  v70 = *(_QWORD *)(v1 + 368);
  v71 = *(_QWORD *)(v1 + 360);
  v72 = *(_QWORD *)(v1 + 352);
  v73 = *(_QWORD *)(v1 + 336);
  v74 = *(_QWORD *)(v1 + 312);
  swift_task_dealloc(*(_QWORD *)(v1 + 712));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100089A34(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 728);
  v5 = *v1;
  *(_QWORD *)(*v1 + 736) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[93] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[94] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[95] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_100089B2C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100089B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[93];
  v5 = *v2;
  v5[96] = a1;
  v5[97] = v1;
  swift_task_dealloc(v4);
  swift_release(v5[92]);
  if (v1)
    return swift_task_switch(sub_10008CC6C, 0, 0);
  v7 = (uint64_t **)swift_task_alloc(dword_1002612E4);
  v5[98] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100089BDC;
  return sub_1000069E8(v5[70]);
}

uint64_t sub_100089BDC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 784));
  return swift_task_switch(sub_100089C30, 0, 0);
}

uint64_t sub_100089C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  os_log_type_t v151;
  uint64_t v152[3];

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027B330);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v152[0] = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 104) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing primary account to send friend token!", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = *(_QWORD *)(v0 + 768);
    v11 = *(_QWORD *)(v0 + 712);
    v12 = *(_QWORD *)(v0 + 656);
    v13 = *(_QWORD *)(v0 + 648);
    v14 = *(_QWORD *)(v0 + 640);
    v15 = *(_QWORD *)(v0 + 616);
    v16 = *(_QWORD *)(v0 + 608);
    v17 = sub_100097FB4();
    v18 = swift_allocError(&type metadata for NITokenService.Error, v17, 0, 0);
    *v19 = 16;
    swift_willThrow(v18);
    swift_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
LABEL_18:
    v91 = *(_QWORD *)(v0 + 704);
    v92 = *(_QWORD *)(v0 + 696);
    v93 = *(_QWORD *)(v0 + 688);
    v94 = *(_QWORD *)(v0 + 680);
    v95 = *(_QWORD *)(v0 + 672);
    v96 = *(_QWORD *)(v0 + 664);
    v97 = *(_QWORD *)(v0 + 640);
    v98 = *(_QWORD *)(v0 + 632);
    v99 = *(_QWORD *)(v0 + 624);
    v108 = *(_QWORD *)(v0 + 600);
    v109 = *(_QWORD *)(v0 + 592);
    v110 = *(_QWORD *)(v0 + 584);
    v111 = *(_QWORD *)(v0 + 560);
    v112 = *(_QWORD *)(v0 + 552);
    v113 = *(_QWORD *)(v0 + 544);
    v114 = *(_QWORD *)(v0 + 536);
    v115 = *(_QWORD *)(v0 + 528);
    v116 = *(_QWORD *)(v0 + 520);
    v117 = *(_QWORD *)(v0 + 496);
    v118 = *(_QWORD *)(v0 + 488);
    v119 = *(_QWORD *)(v0 + 480);
    v120 = *(_QWORD *)(v0 + 472);
    v121 = *(_QWORD *)(v0 + 464);
    v123 = *(_QWORD *)(v0 + 456);
    v124 = *(_QWORD *)(v0 + 448);
    v126 = *(_QWORD *)(v0 + 440);
    v128 = *(_QWORD *)(v0 + 432);
    v130 = *(_QWORD *)(v0 + 408);
    v132 = *(_QWORD *)(v0 + 400);
    v134 = *(_QWORD *)(v0 + 392);
    v136 = *(_QWORD *)(v0 + 368);
    v138 = *(_QWORD *)(v0 + 360);
    v141 = *(_QWORD *)(v0 + 352);
    v145 = *(_QWORD *)(v0 + 336);
    v148 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 712));
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v141);
    swift_task_dealloc(v145);
    swift_task_dealloc(v148);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v20 = *(_QWORD *)(v0 + 504);
  v21 = *(_QWORD *)(v0 + 512);
  v22 = *(_QWORD *)(v0 + 496);
  v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 584), v3, v2);
  Friend.createdAt.getter(v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  *(_QWORD *)(v0 + 792) = v24;
  if (v24(v22, 1, v20) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 496), (uint64_t *)&unk_100262930);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v25 = *(_QWORD *)(v0 + 712);
    v26 = *(_QWORD *)(v0 + 696);
    v27 = *(_QWORD *)(v0 + 656);
    v28 = *(_QWORD *)(v0 + 648);
    v29 = type metadata accessor for Logger(0);
    sub_100037A9C(v29, (uint64_t)qword_10027B330);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v25, v28);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 696);
    v35 = *(_QWORD *)(v0 + 656);
    if (v33)
    {
      v149 = *(_QWORD *)(v0 + 648);
      v36 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(64, -1);
      v152[0] = v37;
      *(_DWORD *)v36 = 136446723;
      *(_QWORD *)(v0 + 112) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2160;
      *(_QWORD *)(v0 + 120) = 1752392040;
      v38 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2081;
      v39 = Handle.identifier.getter(v38);
      v41 = v40;
      *(_QWORD *)(v0 + 128) = sub_10002BA84(v39, v40, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease(v41);
      v146 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v146(v34, v149);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s Missing relationship date: %{private,mask.hash}s!", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      v146 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v146(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 648));
    }

    v80 = *(_QWORD *)(v0 + 768);
    v144 = *(_QWORD *)(v0 + 712);
    v81 = *(_QWORD *)(v0 + 648);
    v82 = *(_QWORD *)(v0 + 640);
    v83 = *(_QWORD *)(v0 + 616);
    v84 = *(_QWORD *)(v0 + 608);
    v85 = *(_QWORD *)(v0 + 584);
    v86 = *(_QWORD *)(v0 + 576);
    v87 = *(_QWORD *)(v0 + 568);
    v88 = sub_100097FB4();
    v89 = swift_allocError(&type metadata for NITokenService.Error, v88, 0, 0);
    *v90 = 15;
    swift_willThrow(v89);
    swift_release(v80);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    v146(v144, v81);
    goto LABEL_18;
  }
  v42 = *(_QWORD *)(v0 + 552);
  v43 = *(_QWORD *)(v0 + 504);
  v44 = *(_QWORD *)(v0 + 496);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 512) + 32);
  *(_QWORD *)(v0 + 800) = v45;
  v45(v42, v44, v43);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v46 = *(_QWORD *)(v0 + 640);
  v47 = *(_QWORD *)(v0 + 632);
  v48 = *(_QWORD *)(v0 + 616);
  v49 = *(_QWORD *)(v0 + 608);
  v147 = *(_QWORD *)(v0 + 544);
  v150 = *(_QWORD *)(v0 + 552);
  v139 = *(_QWORD *)(v0 + 512);
  v142 = *(_QWORD *)(v0 + 504);
  v50 = *(_QWORD *)(v0 + 440);
  v52 = *(_QWORD *)(v0 + 416);
  v51 = *(_QWORD *)(v0 + 424);
  v53 = *(_QWORD *)(v0 + 280);
  v54 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 808) = sub_100037A9C(v54, (uint64_t)qword_10027B330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v46, v49);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  *(_QWORD *)(v0 + 816) = v55;
  v55(v50, v53, v52);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 16);
  *(_QWORD *)(v0 + 824) = v56;
  v57 = v56(v147, v150, v142);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = *(_QWORD *)(v0 + 688);
    v127 = *(_QWORD *)(v0 + 656);
    v129 = *(_QWORD *)(v0 + 648);
    v151 = v59;
    v61 = *(_QWORD *)(v0 + 632);
    v122 = *(_QWORD *)(v0 + 616);
    v62 = *(_QWORD *)(v0 + 608);
    v143 = *(_QWORD *)(v0 + 512);
    v135 = *(_QWORD *)(v0 + 504);
    v137 = *(_QWORD *)(v0 + 544);
    v125 = *(_QWORD *)(v0 + 440);
    v131 = *(_QWORD *)(v0 + 424);
    v133 = *(_QWORD *)(v0 + 416);
    v63 = swift_slowAlloc(42, -1);
    v140 = swift_slowAlloc(96, -1);
    v152[0] = v140;
    *(_DWORD *)v63 = 136446979;
    v64 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v62, v64);
    v67 = v66;
    *(_QWORD *)(v0 + 248) = sub_10002BA84(v65, v66, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease(v67);
    v68 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
    v68(v61, v62);
    *(_WORD *)(v63 + 12) = 2160;
    *(_QWORD *)(v0 + 256) = 1752392040;
    v69 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v63 + 14, v63 + 22);
    *(_WORD *)(v63 + 22) = 2081;
    v70 = Friend.handle.getter(v69);
    v71 = Handle.identifier.getter(v70);
    v73 = v72;
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v60, v129);
    *(_QWORD *)(v0 + 264) = sub_10002BA84(v71, v73, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v63 + 24, v63 + 32);
    swift_bridgeObjectRelease(v73);
    v74 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v74(v125, v133);
    *(_WORD *)(v63 + 32) = 2082;
    v75 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v76 = dispatch thunk of CustomStringConvertible.description.getter(v135, v75);
    v78 = v77;
    *(_QWORD *)(v0 + 208) = sub_10002BA84(v76, v77, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v63 + 34, v63 + 42);
    swift_bridgeObjectRelease(v78);
    v79 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
    v79(v137, v135);
    _os_log_impl((void *)&_mh_execute_header, v58, v151, "Adding peer %{public}s %{private,mask.hash}s baseDate: %{public}s", (uint8_t *)v63, 0x2Au);
    swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1, -1);
    swift_slowDealloc(v63, -1, -1);
  }
  else
  {
    v101 = *(_QWORD *)(v0 + 544);
    v102 = *(_QWORD *)(v0 + 504);
    v103 = *(_QWORD *)(v0 + 512);
    v104 = *(_QWORD *)(v0 + 440);
    v105 = *(_QWORD *)(v0 + 416);
    v106 = *(_QWORD *)(v0 + 424);
    v68 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 616) + 8);
    v68(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 608));
    v74 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v74(v104, v105);
    v79 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    v79(v101, v102);
  }

  *(_QWORD *)(v0 + 848) = v79;
  *(_QWORD *)(v0 + 840) = v68;
  *(_QWORD *)(v0 + 832) = v74;
  v107 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 856) = v107;
  *v107 = v0;
  v107[1] = sub_10008A738;
  return daemon.getter();
}

uint64_t sub_10008A738(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 856);
  v5 = *v1;
  *(_QWORD *)(*v1 + 864) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[109] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10008A7E4;
  return ActorServiceDaemon.getService<A>()(v3[94], v7, v3[95], v8);
}

uint64_t sub_10008A7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 872);
  v3[110] = a1;
  v3[111] = v1;
  swift_task_dealloc(v4);
  swift_release(v3[108]);
  if (v1)
    v5 = sub_10008CED4;
  else
    v5 = sub_10008A85C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008A85C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[110];
  v2 = v0[36];
  v3 = swift_allocObject(&unk_1002513E8, 32, 7);
  v0[112] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[113] = v5;
  *v5 = v0;
  v5[1] = sub_10008A908;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_10008A908()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 904);
  *(_QWORD *)(*v1 + 912) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 896));
  if (v0)
    v4 = sub_10008D184;
  else
    v4 = sub_10008A974;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008A974()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[115] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10008A9CC;
  return sub_1001CA618(v0[46], v0[80]);
}

uint64_t sub_10008A9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 920);
  *(_QWORD *)(*(_QWORD *)v1 + 928) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10008B4D4;
  else
    v3 = sub_10008AA30;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008AA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100[3];

  v1 = *(_QWORD *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 48))(v1, 1, *(_QWORD *)(v0 + 376)) == 1)
  {
    v2 = &qword_100260F80;
    v3 = v1;
LABEL_3:
    sub_1000087A0(v3, v2);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  sub_1000321F4(v1, v4, type metadata accessor for FriendSharedSecretsRecord);
  v6 = sub_100025C70(v4, v5, type metadata accessor for FriendSharedSecretsRecord);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 400);
  if (v9)
  {
    v11 = *(_QWORD *)(v0 + 392);
    v96 = *(_QWORD *)(v0 + 376);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v100[0] = v13;
    *(_DWORD *)v12 = 136446466;
    *(_QWORD *)(v0 + 232) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    sub_100025C70(v10, v11, type metadata accessor for FriendSharedSecretsRecord);
    v14 = String.init<A>(describing:)(v11, v96);
    v16 = v15;
    *(_QWORD *)(v0 + 240) = sub_10002BA84(v14, v15, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    sub_100024990(v10, type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s found existing peer record %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_100024990(v10, type metadata accessor for FriendSharedSecretsRecord);
  }

  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
  v18 = *(_QWORD *)(v0 + 504);
  v19 = *(_QWORD *)(v0 + 488);
  v20 = *(_QWORD *)(v0 + 408) + *(int *)(*(_QWORD *)(v0 + 376) + 36);
  sub_10000E37C(v20, v19, (uint64_t *)&unk_100262930);
  LODWORD(v18) = v17(v19, 1, v18);
  sub_1000087A0(v19, (uint64_t *)&unk_100262930);
  if ((_DWORD)v18 == 1)
  {
    v21 = *(_QWORD *)(v0 + 408);
LABEL_9:
    sub_100024990(v21, type metadata accessor for FriendSharedSecretsRecord);
LABEL_10:
    *(_QWORD *)(v0 + 936) = static Data.randomBytes(count:)(32);
    *(_QWORD *)(v0 + 944) = v22;
    __asm { BR              X10 }
  }
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
  v24 = *(_QWORD *)(v0 + 504);
  v25 = *(_QWORD *)(v0 + 480);
  sub_10000E37C(v20, v25, (uint64_t *)&unk_100262930);
  if (v23(v25, 1, v24) == 1)
  {
    v26 = *(_QWORD *)(v0 + 480);
    sub_100024990(*(_QWORD *)(v0 + 408), type metadata accessor for FriendSharedSecretsRecord);
    v2 = (uint64_t *)&unk_100262930;
    v3 = v26;
    goto LABEL_3;
  }
  v37 = *(_QWORD *)(v0 + 552);
  v38 = *(_QWORD *)(v0 + 536);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 800))(v38, *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 504));
  if ((static Date.> infix(_:_:)(v37, v38) & 1) != 0)
  {
    v39 = *(_QWORD *)(v0 + 408);
    (*(void (**)(_QWORD, _QWORD))(v0 + 848))(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 504));
    v21 = v39;
    goto LABEL_9;
  }
  v40 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 656) + 16))(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 648));
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  v43 = os_log_type_enabled(v41, v42);
  v44 = *(_QWORD *)(v0 + 680);
  v45 = *(_QWORD *)(v0 + 656);
  if (v43)
  {
    v98 = *(_QWORD *)(v0 + 648);
    v46 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v100[0] = v47;
    *(_DWORD *)v46 = 136446723;
    *(_QWORD *)(v0 + 200) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2160;
    *(_QWORD *)(v0 + 216) = 1752392040;
    v48 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v46 + 14, v46 + 22);
    *(_WORD *)(v46 + 22) = 2081;
    v49 = Handle.identifier.getter(v48);
    v51 = v50;
    *(_QWORD *)(v0 + 224) = sub_10002BA84(v49, v50, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease(v51);
    v52 = v98;
    v99 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v99(v44, v52);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s Peer already exists: %{private,mask.hash}s!", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    v99 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v99(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 648));
  }

  v53 = *(_QWORD *)(v0 + 880);
  v54 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v55 = *(_QWORD *)(v0 + 768);
  v95 = *(_QWORD *)(v0 + 712);
  v91 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v93 = *(_QWORD *)(v0 + 648);
  v87 = *(_QWORD *)(v0 + 608);
  v89 = *(_QWORD *)(v0 + 640);
  v56 = *(_QWORD *)(v0 + 576);
  v83 = *(_QWORD *)(v0 + 568);
  v85 = *(_QWORD *)(v0 + 584);
  v57 = *(_QWORD *)(v0 + 552);
  v58 = *(_QWORD *)(v0 + 536);
  v59 = *(_QWORD *)(v0 + 504);
  v60 = *(_QWORD *)(v0 + 408);
  v61 = sub_100097FB4();
  v62 = swift_allocError(&type metadata for NITokenService.Error, v61, 0, 0);
  *v63 = 0;
  swift_willThrow(v62);
  swift_release(v55);
  swift_release(v53);
  v54(v58, v59);
  sub_100024990(v60, type metadata accessor for FriendSharedSecretsRecord);
  v54(v57, v59);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v85, v83);
  v91(v89, v87);
  v99(v95, v93);
  v27 = *(_QWORD *)(v0 + 704);
  v28 = *(_QWORD *)(v0 + 696);
  v29 = *(_QWORD *)(v0 + 688);
  v30 = *(_QWORD *)(v0 + 680);
  v31 = *(_QWORD *)(v0 + 672);
  v32 = *(_QWORD *)(v0 + 664);
  v33 = *(_QWORD *)(v0 + 640);
  v34 = *(_QWORD *)(v0 + 632);
  v35 = *(_QWORD *)(v0 + 624);
  v64 = *(_QWORD *)(v0 + 600);
  v65 = *(_QWORD *)(v0 + 592);
  v66 = *(_QWORD *)(v0 + 584);
  v67 = *(_QWORD *)(v0 + 560);
  v68 = *(_QWORD *)(v0 + 552);
  v69 = *(_QWORD *)(v0 + 544);
  v70 = *(_QWORD *)(v0 + 536);
  v71 = *(_QWORD *)(v0 + 528);
  v72 = *(_QWORD *)(v0 + 520);
  v73 = *(_QWORD *)(v0 + 496);
  v74 = *(_QWORD *)(v0 + 488);
  v75 = *(_QWORD *)(v0 + 480);
  v76 = *(_QWORD *)(v0 + 472);
  v77 = *(_QWORD *)(v0 + 464);
  v78 = *(_QWORD *)(v0 + 456);
  v79 = *(_QWORD *)(v0 + 448);
  v80 = *(_QWORD *)(v0 + 440);
  v81 = *(_QWORD *)(v0 + 432);
  v82 = *(_QWORD *)(v0 + 408);
  v84 = *(_QWORD *)(v0 + 400);
  v86 = *(_QWORD *)(v0 + 392);
  v88 = *(_QWORD *)(v0 + 368);
  v90 = *(_QWORD *)(v0 + 360);
  v92 = *(_QWORD *)(v0 + 352);
  v94 = *(_QWORD *)(v0 + 336);
  v97 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B4D4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v43 = *(_QWORD *)(v0 + 656);
  v45 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v47 = *(_QWORD *)(v0 + 648);
  v49 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 768));
  swift_release(v1);
  v2(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v45(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v47);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 432);
  v38 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 400);
  v40 = *(_QWORD *)(v0 + 392);
  v41 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 360);
  v44 = *(_QWORD *)(v0 + 352);
  v46 = *(_QWORD *)(v0 + 336);
  v48 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 952);
  v3 = *(_QWORD **)v1;
  v3[120] = v0;
  swift_task_dealloc(v2);
  v5 = v3[58];
  v4 = v3[59];
  sub_100037AB4(v3[117], v3[118]);
  sub_1000087A0(v5, (uint64_t *)&unk_100262930);
  sub_1000087A0(v4, (uint64_t *)&unk_100262930);
  if (v0)
    return swift_task_switch(sub_10008D444, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[121] = v7;
  *v7 = v3;
  v7[1] = sub_10008B868;
  return daemon.getter();
}

uint64_t sub_10008B868(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 968);
  v5 = *v1;
  *(_QWORD *)(*v1 + 976) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[123] = v6;
  v7 = type metadata accessor for IDSTransportServiceFMF();
  v8 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_10008B914;
  return ActorServiceDaemon.getService<A>()(v3[94], v7, v3[95], v8);
}

uint64_t sub_10008B914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 984);
  v3[124] = a1;
  v3[125] = v1;
  swift_task_dealloc(v4);
  swift_release(v3[122]);
  if (v1)
    v5 = sub_10008D718;
  else
    v5 = sub_10008B98C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008B98C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void *object;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  double v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  os_log_type_t v132;
  void (*v133)(uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135[3];

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 280);
  v9 = Account.dsidBase64EncodedString()();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 1008) = v10;
  v10(v3, v2, v5);
  v1(v6, v8, v7);
  object = v9._object;
  v12 = swift_bridgeObjectRetain_n(v9._object, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v132 = v14;
    v109 = v0 + 184;
    v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
    v124 = v0 + 192;
    v15 = *(_QWORD *)(v0 + 672);
    v111 = *(_QWORD *)(v0 + 656);
    v113 = *(_QWORD *)(v0 + 648);
    v16 = *(_QWORD *)(v0 + 456);
    v118 = *(_QWORD *)(v0 + 504);
    v17 = swift_slowAlloc(52, -1);
    v18 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 160) = 1752392040;
    v127 = v18;
    v135[0] = v18;
    *(_DWORD *)v17 = 141559043;
    v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v20 = Handle.identifier.getter(v19);
    v22 = v21;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v20, v21, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v22);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8);
    v24 = v23(v15, v113);
    *(_WORD *)(v17 + 22) = 2050;
    Friend.expiry.getter(v24);
    if (v121(v16, 1, v118) == 1)
    {
      v25 = 2592000.0;
    }
    else
    {
      v30 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
      v31 = *(_QWORD *)(v0 + 528);
      v32 = *(_QWORD *)(v0 + 520);
      v33 = *(_QWORD *)(v0 + 504);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 800))(v31, *(_QWORD *)(v0 + 456), v33);
      static Date.trustedNow.getter(v32);
      v25 = Date.timeIntervalSince(_:)(v32);
      v30(v32, v33);
      v30(v31, v33);
    }
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v35 = *(_QWORD *)(v0 + 432);
    v36 = *(_QWORD *)(v0 + 416);
    *(double *)(v0 + 176) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v109, v17 + 24, v17 + 32);
    v34(v35, v36);
    *(_WORD *)(v17 + 32) = 2160;
    *(_QWORD *)(v0 + 184) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, v124, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    object = v9._object;
    swift_bridgeObjectRetain(v9._object);
    *(_QWORD *)(v0 + 192) = sub_10002BA84(v9._countAndFlagsBits, (unint64_t)v9._object, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v0 + 200, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease_n(v9._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v132, "Sending shared secret to %{private,mask.hash}s. TTL: %{public}f\nfrom my serverID: %{private,mask.hash}s over IDS.", (uint8_t *)v17, 0x34u);
    swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v29 = v0 + 1048;
  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v27 = *(_QWORD *)(v0 + 432);
    v28 = *(_QWORD *)(v0 + 416);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 656) + 8);
    v23(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 648));
    v26(v27, v28);
    swift_bridgeObjectRelease_n(v9._object, 2);

    v29 = v0 + 1048;
  }
  v133 = (void (*)(uint64_t, uint64_t))v23;
  *(_QWORD *)(v0 + 1016) = v23;
  v37 = *(_QWORD *)(v0 + 1000);
  v38 = *(_QWORD *)(v0 + 944);
  v39 = *(_QWORD *)(v0 + 936);
  v40 = *(_QWORD *)(v0 + 352);
  v41 = *(uint64_t **)(v0 + 360);
  v42 = *(_QWORD *)(v0 + 344);
  (*(void (**)(char *, _QWORD, _QWORD))(v0 + 824))((char *)v41 + *(int *)(v42 + 20), *(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 504));
  *v41 = v9._countAndFlagsBits;
  v41[1] = (uint64_t)object;
  v43 = (uint64_t *)((char *)v41 + *(int *)(v42 + 24));
  *v43 = v39;
  v43[1] = v38;
  *(_BYTE *)(v0 + 1048) = 1;
  sub_100025C70((uint64_t)v41, v40, type metadata accessor for FindingTokenEnvelopeV1);
  sub_10001A484(v39, v38);
  v44 = sub_10008277C();
  v45 = sub_100004EA8(&qword_100261B20, type metadata accessor for FindingTokenEnvelopeV1, (uint64_t)&unk_1001F3820);
  v46 = sub_100004EA8(&qword_100261B28, type metadata accessor for FindingTokenEnvelopeV1, (uint64_t)&unk_1001F37F8);
  Message.init<A>(type:version:payload:)(v29, 1, v40, &type metadata for FriendSharingMessageType, v42, v44, v45, v46);
  if (v37)
  {
    v47 = *(_QWORD *)(v0 + 992);
    v48 = *(_QWORD *)(v0 + 944);
    v49 = *(_QWORD *)(v0 + 936);
    v50 = *(_QWORD *)(v0 + 880);
    v116 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    v130 = *(_QWORD *)(v0 + 712);
    v125 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v128 = *(_QWORD *)(v0 + 648);
    v122 = *(_QWORD *)(v0 + 640);
    v119 = *(_QWORD *)(v0 + 608);
    v114 = *(_QWORD *)(v0 + 584);
    v51 = *(_QWORD *)(v0 + 576);
    v52 = *(_QWORD *)(v0 + 568);
    v53 = *(_QWORD *)(v0 + 552);
    v54 = *(_QWORD *)(v0 + 504);
    v55 = *(_QWORD *)(v0 + 360);
    swift_release(*(_QWORD *)(v0 + 768));
    swift_release(v47);
    sub_100037AB4(v49, v48);
    swift_release(v50);
    sub_100024990(v55, type metadata accessor for FindingTokenEnvelopeV1);
    v116(v53, v54);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v114, v52);
    v125(v122, v119);
    v133(v130, v128);
    v56 = *(_QWORD *)(v0 + 704);
    v57 = *(_QWORD *)(v0 + 696);
    v58 = *(_QWORD *)(v0 + 688);
    v59 = *(_QWORD *)(v0 + 680);
    v60 = *(_QWORD *)(v0 + 672);
    v61 = *(_QWORD *)(v0 + 664);
    v62 = *(_QWORD *)(v0 + 640);
    v63 = *(_QWORD *)(v0 + 632);
    v64 = *(_QWORD *)(v0 + 624);
    v93 = *(_QWORD *)(v0 + 600);
    v94 = *(_QWORD *)(v0 + 592);
    v95 = *(_QWORD *)(v0 + 584);
    v96 = *(_QWORD *)(v0 + 560);
    v97 = *(_QWORD *)(v0 + 552);
    v98 = *(_QWORD *)(v0 + 544);
    v99 = *(_QWORD *)(v0 + 536);
    v100 = *(_QWORD *)(v0 + 528);
    v101 = *(_QWORD *)(v0 + 520);
    v102 = *(_QWORD *)(v0 + 496);
    v103 = *(_QWORD *)(v0 + 488);
    v104 = *(_QWORD *)(v0 + 480);
    v105 = *(_QWORD *)(v0 + 472);
    v106 = *(_QWORD *)(v0 + 464);
    v107 = *(_QWORD *)(v0 + 456);
    v108 = *(_QWORD *)(v0 + 448);
    v110 = *(_QWORD *)(v0 + 440);
    v112 = *(_QWORD *)(v0 + 432);
    v115 = *(_QWORD *)(v0 + 408);
    v117 = *(_QWORD *)(v0 + 400);
    v120 = *(_QWORD *)(v0 + 392);
    v123 = *(_QWORD *)(v0 + 368);
    v126 = *(_QWORD *)(v0 + 360);
    v129 = *(_QWORD *)(v0 + 352);
    v131 = *(_QWORD *)(v0 + 336);
    v134 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 712));
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v66 = sub_100037A5C(&qword_100261990);
    v67 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
    v68 = swift_allocObject(v66, ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(_QWORD *)(v67 + 72), *(unsigned __int8 *)(v67 + 80) | 7);
    *(_OWORD *)(v68 + 16) = xmmword_1001F35F0;
    v69 = Handle.isPhoneNumber.getter();
    v70 = v69;
    v71 = Handle.identifier.getter(v69);
    if ((v70 & 1) != 0)
      Destination.init(phoneNumber:)(v71);
    else
      Destination.init(email:)(v71);
    v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
    v73 = *(_QWORD *)(v0 + 504);
    v74 = *(_QWORD *)(v0 + 448);
    v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 616) + 56))(*(_QWORD *)(v0 + 592), 1, 1, *(_QWORD *)(v0 + 608));
    Friend.expiry.getter(v75);
    if (v72(v74, 1, v73) == 1)
    {
      v76 = 0x4143C68000000000;
    }
    else
    {
      v77 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
      v78 = *(_QWORD *)(v0 + 528);
      v79 = *(_QWORD *)(v0 + 520);
      v80 = *(_QWORD *)(v0 + 504);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 800))(v78, *(_QWORD *)(v0 + 448), v80);
      static Date.trustedNow.getter(v79);
      v81 = Date.timeIntervalSince(_:)(v79);
      v77(v79, v80);
      v77(v78, v80);
      v76 = *(_QWORD *)&v81;
    }
    v82 = *(_QWORD *)(v0 + 992);
    v83 = *(_QWORD *)(v0 + 592);
    v84 = sub_100037A5C(&qword_100261B30);
    v85 = type metadata accessor for MessagingCapability(0);
    v86 = *(_QWORD *)(v85 - 8);
    v87 = *(unsigned __int8 *)(v86 + 80);
    v88 = (v87 + 32) & ~v87;
    v89 = swift_allocObject(v84, v88 + *(_QWORD *)(v86 + 72), v87 | 7);
    *(_OWORD *)(v89 + 16) = xmmword_1001F35F0;
    v90 = v89 + v88;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(v90, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v85);
    v91 = sub_10018C498(v89);
    swift_setDeallocating(v89);
    swift_arrayDestroy(v90, 1, v85);
    swift_deallocClassInstance(v89, 32, 7);
    v92 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v68, 0, v83, v76, 0, 0, v91, v92, 0, 0);
    return swift_task_switch(sub_10008C31C, v82, 0);
  }
}

uint64_t sub_10008C31C()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to InternetMessaging.send(message:messageOptions:)
                                  + 1));
  v0[128] = v1;
  *v1 = v0;
  v1[1] = sub_10008C37C;
  return InternetMessaging.send(message:messageOptions:)(v0[78], v0[42], v0[39]);
}

uint64_t sub_10008C37C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1024);
  *(_QWORD *)(*v1 + 1032) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008C5B4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 840))(*(_QWORD *)(v2 + 624), *(_QWORD *)(v2 + 608));
    v4 = sub_10008C3F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008C3F0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1008))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 648));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 664);
    v13 = *(_QWORD *)(v0 + 648);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 144) = 1752392040;
    v15 = v6;
    *(_DWORD *)v5 = 141558275;
    v7 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v8 = Handle.identifier.getter(v7);
    v10 = v9;
    *(_QWORD *)(v0 + 152) = sub_10002BA84(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    v14(v4, v13);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent finding token over IDS for %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 1016))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 648));
  }

  v11 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 1040) = v11;
  *v11 = v0;
  v11[1] = sub_10008C8EC;
  return sub_10010A454();
}

uint64_t sub_10008C5B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);

  v59 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v0 + 944);
  v3 = *(_QWORD *)(v0 + 936);
  v33 = *(_QWORD *)(v0 + 880);
  v57 = *(_QWORD *)(v0 + 712);
  v53 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v55 = *(_QWORD *)(v0 + 648);
  v51 = *(_QWORD *)(v0 + 640);
  v47 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v49 = *(_QWORD *)(v0 + 608);
  v45 = *(_QWORD *)(v0 + 584);
  v41 = *(_QWORD *)(v0 + 576);
  v43 = *(_QWORD *)(v0 + 568);
  v37 = *(_QWORD *)(v0 + 504);
  v39 = *(_QWORD *)(v0 + 552);
  v35 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 304);
  swift_release(*(_QWORD *)(v0 + 768));
  swift_release(v1);
  sub_100037AB4(v3, v2);
  swift_release(v33);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  sub_100024990(v35, type metadata accessor for FindingTokenEnvelopeV1);
  v47(v39, v37);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
  v53(v51, v49);
  v59(v57, v55);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v34 = *(_QWORD *)(v0 + 464);
  v36 = *(_QWORD *)(v0 + 456);
  v38 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 440);
  v42 = *(_QWORD *)(v0 + 432);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 400);
  v48 = *(_QWORD *)(v0 + 392);
  v50 = *(_QWORD *)(v0 + 368);
  v52 = *(_QWORD *)(v0 + 360);
  v54 = *(_QWORD *)(v0 + 352);
  v56 = *(_QWORD *)(v0 + 336);
  v58 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C8EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1040));
  return swift_task_switch(sub_10008C940, 0, 0);
}

uint64_t sub_10008C940()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;

  v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v0 + 944);
  v3 = *(_QWORD *)(v0 + 936);
  v32 = *(_QWORD *)(v0 + 880);
  v56 = *(_QWORD *)(v0 + 712);
  v52 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v54 = *(_QWORD *)(v0 + 648);
  v50 = *(_QWORD *)(v0 + 640);
  v46 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v48 = *(_QWORD *)(v0 + 608);
  v44 = *(_QWORD *)(v0 + 584);
  v40 = *(_QWORD *)(v0 + 576);
  v42 = *(_QWORD *)(v0 + 568);
  v36 = *(_QWORD *)(v0 + 504);
  v38 = *(_QWORD *)(v0 + 552);
  v34 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 304);
  swift_release(*(_QWORD *)(v0 + 768));
  swift_release(v1);
  sub_100037AB4(v3, v2);
  swift_release(v32);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  sub_100024990(v34, type metadata accessor for FindingTokenEnvelopeV1);
  v46(v38, v36);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v42);
  v52(v50, v48);
  v58(v56, v54);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v33 = *(_QWORD *)(v0 + 472);
  v35 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 456);
  v39 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 440);
  v43 = *(_QWORD *)(v0 + 432);
  v45 = *(_QWORD *)(v0 + 408);
  v47 = *(_QWORD *)(v0 + 400);
  v49 = *(_QWORD *)(v0 + 392);
  v51 = *(_QWORD *)(v0 + 368);
  v53 = *(_QWORD *)(v0 + 360);
  v55 = *(_QWORD *)(v0 + 352);
  v57 = *(_QWORD *)(v0 + 336);
  v59 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008CC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 648);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 8))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 608));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 696);
  v6 = *(_QWORD *)(v0 + 688);
  v7 = *(_QWORD *)(v0 + 680);
  v8 = *(_QWORD *)(v0 + 672);
  v9 = *(_QWORD *)(v0 + 664);
  v10 = *(_QWORD *)(v0 + 640);
  v11 = *(_QWORD *)(v0 + 632);
  v12 = *(_QWORD *)(v0 + 624);
  v14 = *(_QWORD *)(v0 + 600);
  v15 = *(_QWORD *)(v0 + 592);
  v16 = *(_QWORD *)(v0 + 584);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 552);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 536);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 496);
  v24 = *(_QWORD *)(v0 + 488);
  v25 = *(_QWORD *)(v0 + 480);
  v26 = *(_QWORD *)(v0 + 472);
  v27 = *(_QWORD *)(v0 + 464);
  v28 = *(_QWORD *)(v0 + 456);
  v29 = *(_QWORD *)(v0 + 448);
  v30 = *(_QWORD *)(v0 + 440);
  v31 = *(_QWORD *)(v0 + 432);
  v32 = *(_QWORD *)(v0 + 408);
  v33 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 368);
  v36 = *(_QWORD *)(v0 + 360);
  v37 = *(_QWORD *)(v0 + 352);
  v38 = *(_QWORD *)(v0 + 336);
  v39 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008CED4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v48 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 656);
  v44 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v46 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 768));
  v1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v44(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v48, v46);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 432);
  v38 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 400);
  v40 = *(_QWORD *)(v0 + 392);
  v41 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 360);
  v43 = *(_QWORD *)(v0 + 352);
  v45 = *(_QWORD *)(v0 + 336);
  v47 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D184()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v43 = *(_QWORD *)(v0 + 656);
  v45 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v47 = *(_QWORD *)(v0 + 648);
  v49 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 768));
  swift_release(v1);
  v2(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v45(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v47);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 432);
  v38 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 400);
  v40 = *(_QWORD *)(v0 + 392);
  v41 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 360);
  v44 = *(_QWORD *)(v0 + 352);
  v46 = *(_QWORD *)(v0 + 336);
  v48 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D444()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v45 = *(_QWORD *)(v0 + 656);
  v47 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v49 = *(_QWORD *)(v0 + 648);
  v51 = *(_QWORD *)(v0 + 712);
  v41 = *(_QWORD *)(v0 + 608);
  v43 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 768));
  sub_100037AB4(v2, v1);
  swift_release(v3);
  v4(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v47(v43, v41);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v49);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 432);
  v38 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 400);
  v40 = *(_QWORD *)(v0 + 392);
  v42 = *(_QWORD *)(v0 + 368);
  v44 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 352);
  v48 = *(_QWORD *)(v0 + 336);
  v50 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D718()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v45 = *(_QWORD *)(v0 + 656);
  v47 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v49 = *(_QWORD *)(v0 + 648);
  v51 = *(_QWORD *)(v0 + 712);
  v41 = *(_QWORD *)(v0 + 608);
  v43 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 768));
  sub_100037AB4(v2, v1);
  swift_release(v3);
  v4(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v47(v43, v41);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v49);
  v10 = *(_QWORD *)(v0 + 704);
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 680);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 584);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 536);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 432);
  v38 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 400);
  v40 = *(_QWORD *)(v0 + 392);
  v42 = *(_QWORD *)(v0 + 368);
  v44 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 352);
  v48 = *(_QWORD *)(v0 + 336);
  v50 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 712));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D9EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008DA4C, 0, 0);
}

uint64_t sub_10008DA4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_10008DBF0, v7, 0);
}

uint64_t sub_10008DBF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_10008DC58;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10008DC58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006A990;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_10008DCD0;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10008DCD0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10008DE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  v8[15] = *v7;
  v9 = type metadata accessor for CloudKitCoordinator.Database(0);
  v8[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[17] = v10;
  v8[18] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v8[19] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[20] = v12;
  v8[21] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100260F80);
  v8[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendSharedSecretsRecord(0);
  v8[23] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[24] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[25] = swift_task_alloc(v16);
  v8[26] = swift_task_alloc(v16);
  v8[27] = swift_task_alloc(v16);
  v8[28] = swift_task_alloc(v16);
  v8[29] = swift_task_alloc(v16);
  v8[30] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260F78) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[31] = swift_task_alloc(v17);
  v8[32] = swift_task_alloc(v17);
  v8[33] = swift_task_alloc(v17);
  v18 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v8[34] = v18;
  *v18 = v8;
  v18[1] = sub_10008DF94;
  return daemon.getter();
}

uint64_t sub_10008DF94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 272);
  v5 = *v1;
  *(_QWORD *)(*v1 + 280) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 288) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10008E07C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10008E07C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 288);
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[14];
    v6 = sub_10008F398;
  }
  else
  {
    v7 = v3[14];
    swift_release(v3[35]);
    v6 = sub_10008E0F8;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10008E0F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[37];
  v2 = v0[15];
  v3 = swift_allocObject(&unk_100251370, 32, 7);
  v0[39] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[40] = v5;
  *v5 = v0;
  v5[1] = sub_10008E1A4;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_10008E1A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_10008F470;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 112);
    swift_release(*(_QWORD *)(v2 + 312));
    v5 = sub_10008E218;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10008E218()
{
  return swift_task_switch(sub_10008E22C, 0, 0);
}

uint64_t sub_10008E22C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[42] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10008E284;
  return sub_1001CA618(v0[22], v0[7]);
}

uint64_t sub_10008E284()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008E704;
  else
    v4 = sub_10008E2E8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), 0);
}

uint64_t sub_10008E2E8()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  v1 = (int *)v0[23];
  v2 = v0[22];
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v0[24] + 48))(v2, 1, v1) == 1)
  {
    v55 = v0[37];
    v3 = v0[27];
    v5 = v0[19];
    v4 = v0[20];
    v52 = v0[12];
    v6 = v0[10];
    v48 = v0[13];
    v50 = v0[11];
    v8 = v0[8];
    v7 = v0[9];
    v9 = v0[7];
    sub_1000087A0(v2, &qword_100260F80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v9, v5);
    sub_10000E37C(v6, v3 + v1[7], (uint64_t *)&unk_100262930);
    sub_10000E37C(v48, v3 + v1[9], (uint64_t *)&unk_100262930);
    *(_BYTE *)(v3 + v1[5]) = 1;
    v10 = (uint64_t *)(v3 + v1[6]);
    *v10 = v8;
    v10[1] = v7;
    v11 = (uint64_t *)(v3 + v1[8]);
    *v11 = v50;
    v11[1] = v52;
    v12 = swift_task_alloc(32);
    v0[47] = v12;
    *(_QWORD *)(v12 + 16) = v3;
    sub_10001F728(v8, v7);
    sub_10001F728(v50, v52);
    v13 = sub_10008EA70;
    v14 = v55;
  }
  else
  {
    sub_1000321F4(v2, v0[30], type metadata accessor for FriendSharedSecretsRecord);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v15 = v0[7];
    v17 = v0[29];
    v16 = v0[30];
    v19 = v0[20];
    v18 = v0[21];
    v20 = v0[19];
    v21 = type metadata accessor for Logger(0);
    sub_100037A9C(v21, (uint64_t)qword_10027B330);
    sub_100025C70(v16, v17, type metadata accessor for FriendSharedSecretsRecord);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v15, v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = v0[29];
    if (v25)
    {
      v27 = v0[28];
      v28 = v0[23];
      v51 = v0[21];
      v56 = v0[20];
      v49 = v0[19];
      v29 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v58 = v53;
      *(_DWORD *)v29 = 136315394;
      sub_100025C70(v26, v27, type metadata accessor for FriendSharedSecretsRecord);
      v30 = String.init<A>(describing:)(v27, v28);
      v32 = v31;
      v0[5] = sub_10002BA84(v30, v31, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v32);
      sub_100024990(v26, type metadata accessor for FriendSharedSecretsRecord);
      *(_WORD *)(v29 + 12) = 2082;
      v33 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v49, v33);
      v36 = v35;
      v0[6] = sub_10002BA84(v34, v35, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v51, v49);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found existing %s for %{public}s.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      v38 = v0[20];
      v37 = v0[21];
      v39 = v0[19];
      sub_100024990(v0[29], type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    }

    v40 = v0[37];
    v41 = v0[30];
    v42 = v0[15];
    v43 = v0[11];
    v54 = *(_OWORD *)(v0 + 9);
    v57 = *((_OWORD *)v0 + 6);
    v45 = v0[7];
    v44 = v0[8];
    v46 = swift_task_alloc(96);
    v0[44] = v46;
    *(_QWORD *)(v46 + 16) = v41;
    *(_QWORD *)(v46 + 24) = v44;
    *(_OWORD *)(v46 + 32) = v54;
    *(_QWORD *)(v46 + 48) = v45;
    *(_QWORD *)(v46 + 56) = v43;
    *(_OWORD *)(v46 + 64) = v57;
    *(_QWORD *)(v46 + 80) = v42;
    v13 = sub_10008E7DC;
    v14 = v40;
  }
  return swift_task_switch(v13, v14, 0);
}

uint64_t sub_10008E704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E7DC()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[45] = v1;
  *v1 = v0;
  v1[1] = sub_10008E850;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[32], &unk_100261AD8, v0[44]);
}

uint64_t sub_10008E850()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[37];
    v5 = sub_10008E944;
  }
  else
  {
    v6 = v2[14];
    swift_task_dealloc(v2[44]);
    v5 = sub_10008E8C4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10008E8C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[32];
  v2 = v0[33];
  sub_100024990(v0[30], type metadata accessor for FriendSharedSecretsRecord);
  sub_10000EF6C(v1, v2, &qword_100260F78);
  v3 = v0[37];
  v0[50] = v3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 104))(v0[18], enum case for CloudKitCoordinator.Database.private(_:), v0[16]);
  return swift_task_switch(sub_10008EF5C, v3, 0);
}

uint64_t sub_10008E944()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  return swift_task_switch(sub_10008E984, v1, 0);
}

uint64_t sub_10008E984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 296));
  sub_100024990(v1, type metadata accessor for FriendSharedSecretsRecord);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EA70()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[48] = v1;
  *v1 = v0;
  v1[1] = sub_10008EAE4;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[31], &unk_100261AC8, v0[47]);
}

uint64_t sub_10008EAE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[37];
    v5 = sub_10008EB58;
  }
  else
  {
    v6 = v2[14];
    swift_task_dealloc(v2[47]);
    v5 = sub_10008EC84;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10008EB58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return swift_task_switch(sub_10008EB98, v1, 0);
}

uint64_t sub_10008EB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 296));
  sub_100024990(v1, type metadata accessor for FriendSharedSecretsRecord);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EC84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_10000EF6C(v0[31], v0[33], &qword_100260F78);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[26];
  v2 = v0[27];
  v3 = v0[25];
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027B330);
  sub_100025C70(v2, v1, type metadata accessor for FriendSharedSecretsRecord);
  v5 = sub_100025C70(v2, v3, type metadata accessor for FriendSharedSecretsRecord);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v0[28];
    v9 = v0[26];
    v10 = v0[23];
    v23 = v0[19];
    v24 = v0[25];
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v25 = v12;
    *(_DWORD *)v11 = 136315394;
    sub_100025C70(v9, v8, type metadata accessor for FriendSharedSecretsRecord);
    v13 = String.init<A>(describing:)(v8, v10);
    v15 = v14;
    v0[3] = sub_10002BA84(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_100024990(v9, type metadata accessor for FriendSharedSecretsRecord);
    *(_WORD *)(v11 + 12) = 2082;
    v16 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v23, v16);
    v19 = v18;
    v0[4] = sub_10002BA84(v17, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v19);
    sub_100024990(v24, type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Saving new %s %{public}s to CK.", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    v20 = v0[25];
    sub_100024990(v0[26], type metadata accessor for FriendSharedSecretsRecord);
    sub_100024990(v20, type metadata accessor for FriendSharedSecretsRecord);
  }

  sub_100024990(v0[27], type metadata accessor for FriendSharedSecretsRecord);
  v21 = v0[37];
  v0[50] = v21;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 104))(v0[18], enum case for CloudKitCoordinator.Database.private(_:), v0[16]);
  return swift_task_switch(sub_10008EF5C, v21, 0);
}

uint64_t sub_10008EF5C()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[51] = v1;
  *v1 = v0;
  v1[1] = sub_10008EFC8;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[33], v0[18]);
}

uint64_t sub_10008EFC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[50];
    v5 = sub_10008F044;
  }
  else
  {
    v6 = v2[14];
    (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
    v5 = sub_10008F178;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10008F044()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[14];
  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
  return swift_task_switch(sub_10008F08C, v1, 0);
}

uint64_t sub_10008F08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 264);
  swift_release(*(_QWORD *)(v0 + 296));
  sub_1000087A0(v1, &qword_100260F78);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 264);
  if (v5)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000060, 0x80000001001FDA70, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s completed!", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_release(v6);
  sub_1000087A0(v7, &qword_100260F78);
  v10 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 280));
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 296));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F554(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 192) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = type metadata accessor for Handle(0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Friend(0);
  *(_QWORD *)(v4 + 120) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 128) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 136) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 144) = swift_task_alloc(v9);
  return swift_task_switch(sub_10008F5F4, 0, 0);
}

uint64_t sub_10008F5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_t log;
  NSObject *loga;
  uint64_t v57;
  uint64_t v58;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v61;
  uint64_t v62;

  if ((*(_BYTE *)(v0 + 192) & 1) != 0)
  {
    v18 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v18);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v20 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_100037A9C(v23, (uint64_t)qword_10027B330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
    swift_errorRetain(v18);
    v24 = swift_errorRetain(v18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 136);
    if (v27)
    {
      typea = v26;
      v51 = *(_QWORD *)(v0 + 120);
      v30 = *(_QWORD *)(v0 + 112);
      v49 = *(_QWORD *)(v0 + 104);
      v50 = *(_QWORD *)(v0 + 96);
      v54 = *(_QWORD *)(v0 + 72);
      loga = v25;
      v31 = swift_slowAlloc(42, -1);
      v52 = (uint64_t *)swift_slowAlloc(8, -1);
      v58 = swift_slowAlloc(64, -1);
      v62 = v58;
      *(_DWORD *)v31 = 136446979;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      v33 = Friend.handle.getter(v32);
      v34 = Handle.identifier.getter(v33);
      v36 = v35;
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v30, v50);
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v34, v36, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v51);
      *(_WORD *)(v31 + 32) = 2114;
      swift_errorRetain(v18);
      v37 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(_QWORD *)(v0 + 40) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 34, v31 + 42);
      *v52 = v37;
      sub_10007E9BC(v54, 1);
      sub_10007E9BC(v54, 1);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v31, 0x2Au);
      v38 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v52, 1, v38);
      swift_slowDealloc(v52, -1, -1);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {
      v42 = *(_QWORD *)(v0 + 72);
      (*(void (**)(_QWORD, _QWORD))(v28 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
      sub_10007E9BC(v42, 1);
      sub_10007E9BC(v42, 1);

    }
    v43 = *(_QWORD *)(v0 + 72);
    v44 = sub_100097FB4();
    v45 = swift_allocError(&type metadata for NITokenService.Error, v44, 0, 0);
    *(_QWORD *)(v0 + 168) = v45;
    *v46 = v43;
    swift_errorRetain(v18);
    v39 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 176) = v39;
    v47 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 184) = v47;
    *v47 = v0;
    v47[1] = sub_10008FCF4;
    v41 = v45;
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 144);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 112);
      v53 = *(_QWORD *)(v0 + 104);
      log = *(os_log_t *)(v0 + 96);
      v61 = *(_QWORD *)(v0 + 120);
      v57 = *(_QWORD *)(v0 + 128);
      v12 = swift_slowAlloc(32, -1);
      type = swift_slowAlloc(64, -1);
      v62 = type;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000010, 0x80000001001FDB20, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 56) = 1752392040;
      v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v14 = Friend.handle.getter(v13);
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      (*(void (**)(uint64_t, os_log_t))(v53 + 8))(v11, log);
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v15, v17, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v10, v61);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(type, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(type, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    }

    v39 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 152) = v39;
    v40 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 160) = v40;
    *v40 = v0;
    v40[1] = sub_10008FC8C;
    v41 = 0;
  }
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FDAE0, v41, v39);
}

uint64_t sub_10008FC8C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 152);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_bridgeObjectRelease(v2);
  v4 = v1[17];
  v3 = v1[18];
  v5 = v1[14];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10008FCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_10008FD5C, 0, 0);
}

uint64_t sub_10008FD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10007E9BC(*(_QWORD *)(v0 + 72), 1);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  v5 = type metadata accessor for CloudKitCoordinator.Database(0);
  v4[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[21] = v6;
  v4[22] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260F78);
  v4[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260F80);
  v4[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FriendSharedSecretsRecord(0);
  v4[25] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[26] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v11);
  v4[28] = swift_task_alloc(v11);
  v4[29] = swift_task_alloc(v11);
  v4[30] = swift_task_alloc(v11);
  v12 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v4[32] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[33] = v14;
  v4[34] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Handle(0);
  v4[35] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[36] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v17);
  v4[38] = swift_task_alloc(v17);
  return swift_task_switch(sub_10008FF2C, 0, 0);
}

uint64_t sub_10008FF2C()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  os_log_type_t type;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 304);
    v5 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 288);
    v7 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 312) = sub_100037A9C(v7, (uint64_t)qword_10027B330);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    *(_QWORD *)(v0 + 320) = v8;
    v9 = v8(v4, v3, v5);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 304);
    v15 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 288);
    if (v12)
    {
      v42 = *(_QWORD *)(v0 + 136);
      type = v11;
      v16 = swift_slowAlloc(32, -1);
      v44 = swift_slowAlloc(64, -1);
      v46 = v44;
      *(_DWORD *)v16 = 141558531;
      *(_QWORD *)(v0 + 104) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v17 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
      v20 = v19;
      *(_QWORD *)(v0 + 112) = sub_10002BA84(v18, v19, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v20);
      v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v21(v13, v15);
      *(_WORD *)(v16 + 22) = 2082;
      v22 = sub_10018EB24(v42);
      v24 = v23;
      *(_QWORD *)(v0 + 120) = sub_10002BA84(v22, v23, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v16 + 24, v16 + 32);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v10, type, "Removing peer %{private,mask.hash}s. Options: %{public}s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v21(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280));
    }

    *(_QWORD *)(v0 + 328) = v21;
    v41 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 336) = v41;
    *v41 = v0;
    v41[1] = sub_1000903F8;
    return daemon.getter();
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100037A9C(v25, (uint64_t)qword_10027B330);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v46 = v30;
      *(_DWORD *)v29 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FDB60, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v29 + 4, v29 + 12);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s Feature.FindMy.redStripe FF disabled.", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 272);
    v34 = *(_QWORD *)(v0 + 240);
    v33 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 232);
    v37 = *(_QWORD *)(v0 + 216);
    v39 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 192);
    v45 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000903F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 336);
  v5 = *v1;
  *(_QWORD *)(*v1 + 344) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 352) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1000904E0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000904E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000915C0;
  }
  else
  {
    swift_release(v3[43]);
    v5 = sub_100090554;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100090554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(v1 + 256);
  v3 = *(_QWORD *)(v1 + 264);
  v4 = *(_QWORD *)(v1 + 248);
  Handle.peerID.getter(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v1 + 248), (uint64_t *)&unk_1002675F0);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 320))(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 280));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v1 + 296);
    v10 = *(_QWORD *)(v1 + 280);
    if (v8)
    {
      v32 = *(void (**)(uint64_t, uint64_t))(v1 + 328);
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v34 = v12;
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v1 + 64) = 1752392040;
      v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v14 = Handle.identifier.getter(v13);
      v16 = v15;
      *(_QWORD *)(v1 + 72) = sub_10002BA84(v14, v15, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease(v16);
      v32(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No peer record for %{private,mask.hash}s!", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v1 + 328))(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 280));
    }

    v19 = *(_QWORD *)(v1 + 360);
    v20 = sub_100097FB4();
    v33 = swift_allocError(&type metadata for NITokenService.Error, v20, 0, 0);
    *v21 = 15;
    swift_willThrow(v33);
    swift_release(v19);
    v22 = *(_QWORD *)(v1 + 296);
    v23 = *(_QWORD *)(v1 + 272);
    v25 = *(_QWORD *)(v1 + 240);
    v24 = *(_QWORD *)(v1 + 248);
    v27 = *(_QWORD *)(v1 + 224);
    v26 = *(_QWORD *)(v1 + 232);
    v28 = *(_QWORD *)(v1 + 216);
    v29 = *(_QWORD *)(v1 + 184);
    v30 = *(_QWORD *)(v1 + 192);
    v31 = *(_QWORD *)(v1 + 176);
    swift_task_dealloc(*(_QWORD *)(v1 + 304));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 264) + 32))(*(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256));
    v17 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v1 + 376) = v17;
    *v17 = v1;
    v17[1] = sub_10009084C;
    return sub_1001CA618(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 272));
  }
}

uint64_t sub_10009084C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100090D48;
  else
    v3 = sub_1000908B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000908B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];

  v1 = *(_QWORD *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 48))(v1, 1, *(_QWORD *)(v0 + 200)) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
    sub_1000087A0(v1, &qword_100260F80);
    v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 280));
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 280);
    if (v5)
    {
      v47 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(32, -1);
      v50[0] = v9;
      *(_DWORD *)v8 = 141558275;
      *(_QWORD *)(v0 + 64) = 1752392040;
      v10 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v11 = Handle.identifier.getter(v10);
      v13 = v12;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(v11, v12, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v13);
      v47(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No peer record for %{private,mask.hash}s!", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 328))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
    }

    v27 = *(_QWORD *)(v0 + 360);
    v28 = sub_100097FB4();
    v49 = swift_allocError(&type metadata for NITokenService.Error, v28, 0, 0);
    *v29 = 15;
    swift_willThrow(v49);
    swift_release(v27);
    v30 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 232);
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 192);
    v46 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 240);
    sub_1000321F4(v1, v14, type metadata accessor for FriendSharedSecretsRecord);
    v16 = sub_100025C70(v14, v15, type metadata accessor for FriendSharedSecretsRecord);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v0 + 232);
    if (v19)
    {
      v21 = *(_QWORD *)(v0 + 224);
      v48 = *(_QWORD *)(v0 + 200);
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v50[0] = v23;
      *(_DWORD *)v22 = 136446466;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FDB60, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2080;
      sub_100025C70(v20, v21, type metadata accessor for FriendSharedSecretsRecord);
      v24 = String.init<A>(describing:)(v21, v48);
      v26 = v25;
      *(_QWORD *)(v0 + 96) = sub_10002BA84(v24, v25, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v26);
      sub_100024990(v20, type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s record %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_100024990(*(_QWORD *)(v0 + 232), type metadata accessor for FriendSharedSecretsRecord);
    }

    v40 = *(_QWORD *)(v0 + 360);
    v41 = *(_QWORD *)(v0 + 240);
    v42 = *(_QWORD *)(v0 + 152);
    v44 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 136);
    v45 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 392) = v45;
    v45[2] = v43;
    v45[3] = v41;
    v45[4] = v44;
    v45[5] = v42;
    return swift_task_switch(sub_100090E2C, v40, 0);
  }
}

uint64_t sub_100090D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090E2C()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[50] = v1;
  *v1 = v0;
  v1[1] = sub_100090EA0;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[23], &unk_100261B50, v0[49]);
}

uint64_t sub_100090EA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 400);
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 360);
    v5 = sub_100090F10;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 392));
    v5 = sub_100091044;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100090F10()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  return swift_task_switch(sub_100090F4C, 0, 0);
}

uint64_t sub_100090F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100024990(v4, type metadata accessor for FriendSharedSecretsRecord);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091044()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_100025C70(v0[30], v0[27], type metadata accessor for FriendSharedSecretsRecord);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[32];
    v5 = v0[27];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v4, v8);
    v11 = v10;
    v0[10] = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100024990(v5, type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Updating peer record %s from CK.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_100024990(v0[27], type metadata accessor for FriendSharedSecretsRecord);
  }

  v12 = v0[45];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[21] + 104))(v0[22], enum case for CloudKitCoordinator.Database.private(_:), v0[20]);
  return swift_task_switch(sub_100091210, v12, 0);
}

uint64_t sub_100091210()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[52] = v1;
  *v1 = v0;
  v1[1] = sub_100091278;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[23], v0[22]);
}

uint64_t sub_100091278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  v3 = *(_QWORD **)v1;
  v3[53] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100091470, v3[45], 0);
  (*(void (**)(_QWORD, _QWORD))(v3[21] + 8))(v3[22], v3[20]);
  v5 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  v3[54] = v5;
  *v5 = v3;
  v5[1] = sub_100091314;
  return sub_10010A454();
}

uint64_t sub_100091314()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 432));
  return swift_task_switch(sub_100091368, 0, 0);
}

uint64_t sub_100091368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 360));
  sub_1000087A0(v5, &qword_100260F78);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100024990(v4, type metadata accessor for FriendSharedSecretsRecord);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091470()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[22], v0[20]);
  return swift_task_switch(sub_1000914B4, 0, 0);
}

uint64_t sub_1000914B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 360));
  sub_1000087A0(v5, &qword_100260F78);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100024990(v4, type metadata accessor for FriendSharedSecretsRecord);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000915C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 344));
  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009168C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for Handle(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_10009170C, 0, 0);
}

uint64_t sub_10009170C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 72);
  if ((~*(_DWORD *)(v0 + 72) & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = type metadata accessor for FriendSharedSecretsRecord(0);
    if (*(_QWORD *)(v5 + *(int *)(v6 + 24) + 8) >> 60 != 15)
    {
      v7 = v6;
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v8 = *(_QWORD *)(v0 + 128);
      v9 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 104);
      v11 = *(_QWORD *)(v0 + 88);
      v12 = type metadata accessor for Logger(0);
      sub_100037A9C(v12, (uint64_t)qword_10027B330);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v11, v9);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      v16 = os_log_type_enabled(v14, v15);
      v17 = *(_QWORD *)(v0 + 128);
      v18 = *(_QWORD *)(v0 + 104);
      if (v16)
      {
        v70 = *(_QWORD *)(v0 + 96);
        v19 = swift_slowAlloc(22, -1);
        v68 = swift_slowAlloc(32, -1);
        v72 = v68;
        *(_DWORD *)v19 = 141558275;
        *(_QWORD *)(v0 + 48) = 1752392040;
        v20 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 4, v19 + 12);
        *(_WORD *)(v19 + 12) = 2081;
        v21 = Handle.identifier.getter(v20);
        v23 = v22;
        *(_QWORD *)(v0 + 56) = sub_10002BA84(v21, v22, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 14, v19 + 22);
        swift_bridgeObjectRelease(v23);
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v70);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing incomingSharedSecret for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v19, -1, -1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v18 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
      }

      v46 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)[1]);
      *(_QWORD *)(v0 + 136) = v46;
      v47 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
      *v46 = v0;
      v46[1] = sub_100091E38;
      return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(*(_QWORD *)(v0 + 80), sub_100091F70, 0, v7, v47);
    }
LABEL_11:
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    v30 = type metadata accessor for Logger(0);
    sub_100037A9C(v30, (uint64_t)qword_10027B330);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    v34 = os_log_type_enabled(v32, v33);
    v36 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 112);
    if (v34)
    {
      v71 = *(_QWORD *)(v0 + 96);
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v72 = v38;
      *(_DWORD *)v37 = 141558275;
      *(_QWORD *)(v0 + 32) = 1752392040;
      v39 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      v40 = Handle.identifier.getter(v39);
      v42 = v41;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v40, v41, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v71);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing FriendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v36 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    }

    v43 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.delete<A>(record:)[1]);
    *(_QWORD *)(v0 + 152) = v43;
    v44 = type metadata accessor for FriendSharedSecretsRecord(0);
    v45 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
    *v43 = v0;
    v43[1] = sub_100091F08;
    return CloudKitChangeSet.Adaptor.delete<A>(record:)(*(_QWORD *)(v0 + 80), v44, v45);
  }
  if ((v1 & 2) == 0)
  {
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(_QWORD *)(v0 + 80);
  v25 = type metadata accessor for FriendSharedSecretsRecord(0);
  if (*(_QWORD *)(v24 + *(int *)(v25 + 32) + 8) >> 60 == 15)
    goto LABEL_11;
  v48 = v25;
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v49 = *(_QWORD *)(v0 + 120);
  v50 = *(_QWORD *)(v0 + 96);
  v51 = *(_QWORD *)(v0 + 104);
  v52 = *(_QWORD *)(v0 + 88);
  v53 = type metadata accessor for Logger(0);
  sub_100037A9C(v53, (uint64_t)qword_10027B330);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v49, v52, v50);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  v57 = os_log_type_enabled(v55, v56);
  v58 = *(_QWORD *)(v0 + 120);
  v59 = *(_QWORD *)(v0 + 104);
  if (v57)
  {
    v67 = *(_QWORD *)(v0 + 96);
    v60 = swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(32, -1);
    v72 = v69;
    *(_DWORD *)v60 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    v61 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v60 + 4, v60 + 12);
    *(_WORD *)(v60 + 12) = 2081;
    v62 = Handle.identifier.getter(v61);
    v64 = v63;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v62, v63, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v60 + 14, v60 + 22);
    swift_bridgeObjectRelease(v64);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v67);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Removing outgoingSharedSecret for %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v59 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  }

  v65 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)[1]);
  *(_QWORD *)(v0 + 144) = v65;
  v66 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v65 = v0;
  v65[1] = sub_100091EA0;
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(*(_QWORD *)(v0 + 80), sub_100091FB0, 0, v48, v66);
}

uint64_t sub_100091E38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[14];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_100091EA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[14];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_100091F08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[14];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

double sub_100091F70(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 + *(int *)(type metadata accessor for FriendSharedSecretsRecord(0) + 32);
  sub_100037AF8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  result = 0.0;
  *(_OWORD *)v1 = xmmword_1001F48A0;
  return result;
}

double sub_100091FB0(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 + *(int *)(type metadata accessor for FriendSharedSecretsRecord(0) + 24);
  sub_100037AF8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  result = 0.0;
  *(_OWORD *)v1 = xmmword_1001F48A0;
  return result;
}

uint64_t sub_100091FF0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 120) = a2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a3;
  v4 = type metadata accessor for Handle(0);
  *(_QWORD *)(v3 + 88) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 96) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 104) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 112) = swift_task_alloc(v6);
  return swift_task_switch(sub_100092064, 0, 0);
}

uint64_t sub_100092064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  NSObject *log;
  os_log_type_t type;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    v18 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v18);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v23 = type metadata accessor for Logger(0);
    sub_100037A9C(v23, (uint64_t)qword_10027B330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
    swift_errorRetain(v18);
    v24 = swift_errorRetain(v18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 96);
    v28 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      type = v26;
      v41 = *(_QWORD *)(v0 + 88);
      v32 = swift_slowAlloc(42, -1);
      v42 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(64, -1);
      v47 = v46;
      *(_DWORD *)v32 = 136446979;
      log = v25;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FDB60, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v33 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2081;
      v34 = Handle.identifier.getter(v33);
      v36 = v35;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v34, v35, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 24, v32 + 32);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v41);
      *(_WORD *)(v32 + 32) = 2114;
      swift_errorRetain(v18);
      v37 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(_QWORD *)(v0 + 40) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 34, v32 + 42);
      *v42 = v37;
      sub_10007E9BC(v31, 1);
      sub_10007E9BC(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v32, 0x2Au);
      v38 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v42, 1, v38);
      swift_slowDealloc(v42, -1, -1);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      sub_10007E9BC(v31, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 72), 1);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10007E9BC(v31, 1);
      sub_10007E9BC(v31, 1);

    }
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = *(_QWORD *)(v0 + 112);
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 96);
    if (v9)
    {
      v45 = *(_QWORD *)(v0 + 88);
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(64, -1);
      v47 = v13;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FDB60, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 56) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v15, v16, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v45);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88));

    }
  }
  v39 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000925B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v36 = a2;
  v37 = a5;
  v34 = a3;
  v35 = a4;
  v33 = a1;
  v40 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v40 - 8);
  v5 = *(_QWORD *)(v38 + 64);
  __chkstk_darwin(v40);
  v39 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Handle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100261A20);
  v10 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v6);
  v17 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v35, v40);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v11 + v20 + v19) & ~v20;
  v22 = *(unsigned __int8 *)(v17 + 80);
  v23 = (v8 + v22 + v21) & ~v22;
  v24 = (v5 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (char *)swift_allocObject(&unk_100251258, v24 + 8, v18 | v20 | v22 | 7);
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  v26 = v36;
  *((_QWORD *)v25 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v19], v12, v30);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v25[v21], v32, v31);
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v25[v23], v39, v40);
  *(_QWORD *)&v25[v24] = v37;
  swift_retain(v26);
  v27 = sub_10005582C((uint64_t)v15, (uint64_t)&unk_100261A30, (uint64_t)v25);
  return swift_release(v27);
}

uint64_t sub_10009281C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v8[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[9] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v8[10] = v12;
  v8[11] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Handle(0);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v8[14] = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[15] = swift_task_alloc(v16);
  v8[16] = swift_task_alloc(v16);
  v17 = sub_100037A5C(&qword_100261A20);
  v8[17] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[18] = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v8[19] = v19;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[20] = swift_task_alloc(v20);
  v8[21] = swift_task_alloc(v20);
  return swift_task_switch(sub_100092924, 0, 0);
}

uint64_t sub_100092924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 168);
  v48 = v1;
  v39 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v46 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v27 = v4;
  v49 = v3;
  v38 = *(_QWORD *)(v0 + 120);
  v45 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v42 = *(_QWORD *)(v0 + 104);
  v44 = v5;
  v6 = *(_QWORD *)(v0 + 88);
  v50 = v6;
  v7 = *(_QWORD *)(v0 + 64);
  v41 = *(_QWORD *)(v0 + 72);
  v28 = v7;
  v29 = *(_QWORD *)(v0 + 80);
  v40 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v31 = *(_QWORD *)(v0 + 40);
  v34 = v8;
  v9 = *(_QWORD *)(v0 + 24);
  v36 = v9;
  v37 = *(_QWORD *)(v0 + 48);
  v47 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v35(v1, v9, v4);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v33(v3, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v6, v31, v7);
  v10 = *(unsigned __int8 *)(v2 + 80);
  v11 = v2;
  v12 = (v10 + 16) & ~v10;
  v13 = *(unsigned __int8 *)(v42 + 80);
  v14 = (v46 + v13 + v12) & ~v13;
  v15 = (v45 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(unsigned __int8 *)(v41 + 80);
  v17 = (v16 + v15 + 8) & ~v16;
  v32 = v13 | v10 | 7;
  v18 = (v29 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100251280, v18 + 8, v32 | v16);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v30(v19 + v12, v48, v27);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  v43(v19 + v14, v49, v44);
  *(_QWORD *)(v19 + v15) = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v19 + v17, v50, v28);
  *(_QWORD *)(v19 + v18) = v37;
  v33(v38, v34, v44);
  v35(v39, v36, v27);
  v20 = (v13 + 16) & ~v13;
  v21 = (v45 + v10 + v20) & ~v10;
  v22 = (v46 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1002512A8, v22 + 8, v32);
  v43(v23 + v20, v38, v44);
  v30(v23 + v21, v39, v27);
  *(_QWORD *)(v23 + v22) = v37;
  v24 = swift_retain(v47);
  UUID.init()(v24);
  v25 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v40, &unk_100261A40, v19, &unk_100261A50, v23);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v25);
  swift_task_dealloc(v48);
  swift_task_dealloc(v39);
  swift_task_dealloc(v49);
  swift_task_dealloc(v38);
  swift_task_dealloc(v50);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5[25] = a4;
  v5[26] = a5;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  v6 = sub_100037A5C((uint64_t *)&unk_100265180);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(sub_100037A5C(&qword_100261018) - 8);
  v5[28] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[29] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v9);
  v5[31] = swift_task_alloc(v9);
  v5[32] = swift_task_alloc(v9);
  v5[33] = swift_task_alloc(v9);
  v10 = type metadata accessor for Handle(0);
  v5[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[35] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v5[36] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[37] = swift_task_alloc(v13);
  v5[38] = swift_task_alloc(v13);
  v5[39] = swift_task_alloc(v13);
  v5[40] = swift_task_alloc(v13);
  v5[41] = swift_task_alloc(v13);
  v5[42] = swift_task_alloc(v13);
  v14 = sub_100037A5C((uint64_t *)&unk_100262930);
  v5[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v5[44] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[45] = v16;
  v5[46] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100037A5C(&qword_100260F80);
  v5[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FriendSharedSecretsRecord(0);
  v5[48] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[49] = v19;
  v5[50] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v5[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v5[52] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[53] = v22;
  v5[54] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100092E24, 0, 0);
}

uint64_t sub_100092E24()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_13;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v35 = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Feature.FindMy.redStripe FF disabled.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    v11 = v10;
    goto LABEL_12;
  }
  if ((sub_1001C30A4() & 1) != 0)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 440) = v3;
    *v3 = v0;
    v3[1] = sub_100093288;
    return daemon.getter();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
  v7 = Logger.logObject.getter(v13);
  v14 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v14))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v35 = v15;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v14, "%{public}s isFindingCapable == false.", v9, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v11 = v15;
LABEL_12:
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
LABEL_13:

  v16 = *(_QWORD *)(v0 + 240);
  v17 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = sub_100037A5C(&qword_100261A20);
  CheckedContinuation.resume(returning:)(v16, v18);
  v20 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 344);
  v25 = *(_QWORD *)(v0 + 320);
  v26 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 312);
  v28 = *(_QWORD *)(v0 + 304);
  v29 = *(_QWORD *)(v0 + 296);
  v30 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 240);
  v34 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093288(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 440);
  v5 = *v1;
  *(_QWORD *)(*v1 + 448) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 456) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100093370;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100093370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  v3[58] = a1;
  v3[59] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100094A34;
  }
  else
  {
    swift_release(v3[56]);
    v5 = sub_1000933E4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000933E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[58];
  v2 = v0[26];
  v3 = swift_allocObject(&unk_1002512D0, 32, 7);
  v0[60] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[61] = v5;
  *v5 = v0;
  v5[1] = sub_100093490;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100093490()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 488);
  *(_QWORD *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100094B54;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 480));
    v4 = sub_1000934FC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000934FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 424);
  v4 = *(_QWORD *)(v1 + 408);
  Handle.peerID.getter(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v1 + 408), (uint64_t *)&unk_1002675F0);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = *(_QWORD *)(v1 + 296);
    v6 = *(_QWORD *)(v1 + 272);
    v7 = *(_QWORD *)(v1 + 280);
    v8 = *(_QWORD *)(v1 + 184);
    v9 = type metadata accessor for Logger(0);
    sub_100037A9C(v9, (uint64_t)qword_10027B330);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v1 + 296);
    v15 = *(_QWORD *)(v1 + 280);
    if (v13)
    {
      v48 = *(_QWORD *)(v1 + 272);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v50 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v1 + 72) = 1752392040;
      v18 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v19 = Handle.identifier.getter(v18);
      v21 = v20;
      *(_QWORD *)(v1 + 80) = sub_10002BA84(v19, v20, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v48);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No peer record for %{private,mask.hash}s!", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v15 + 8))(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 272));
    }

    v24 = *(_QWORD *)(v1 + 464);
    v25 = *(_QWORD *)(v1 + 216);
    v26 = *(_QWORD *)(v1 + 192);
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 1, 1, v27);
    v28 = (_QWORD *)swift_allocObject(&unk_1002512F8, 40, 7);
    v28[2] = 0;
    v28[3] = 0;
    v28[4] = v26;
    swift_retain(v26);
    v29 = sub_10005582C(v25, (uint64_t)&unk_100261A70, (uint64_t)v28);
    swift_release(v29);
    v30 = sub_100097FB4();
    v49 = swift_allocError(&type metadata for NITokenService.Error, v30, 0, 0);
    *v31 = 15;
    swift_willThrow(v49);
    swift_release(v24);
    v33 = *(_QWORD *)(v1 + 400);
    v32 = *(_QWORD *)(v1 + 408);
    v35 = *(_QWORD *)(v1 + 368);
    v34 = *(_QWORD *)(v1 + 376);
    v36 = *(_QWORD *)(v1 + 336);
    v37 = *(_QWORD *)(v1 + 344);
    v39 = *(_QWORD *)(v1 + 320);
    v38 = *(_QWORD *)(v1 + 328);
    v40 = *(_QWORD *)(v1 + 312);
    v41 = *(_QWORD *)(v1 + 304);
    v42 = *(_QWORD *)(v1 + 296);
    v43 = *(_QWORD *)(v1 + 264);
    v44 = *(_QWORD *)(v1 + 256);
    v45 = *(_QWORD *)(v1 + 248);
    v46 = *(_QWORD *)(v1 + 240);
    v47 = *(_QWORD *)(v1 + 216);
    swift_task_dealloc(*(_QWORD *)(v1 + 432));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 424) + 32))(*(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 416));
    v22 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v1 + 504) = v22;
    *v22 = v1;
    v22[1] = sub_1000938FC;
    return sub_1001CA618(*(_QWORD *)(v1 + 376), *(_QWORD *)(v1 + 432));
  }
}

uint64_t sub_1000938FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  *(_QWORD *)(*(_QWORD *)v1 + 512) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000948FC;
  else
    v3 = sub_100093960;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100093960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(void);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  os_log_t log;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  os_log_type_t typea[8];
  os_log_type_t typeb;
  os_log_type_t type[8];
  os_log_type_t typec[8];
  os_log_type_t typed[8];
  uint64_t v182;
  uint64_t v183;
  os_log_type_t v184;
  uint64_t v185;
  uint64_t v186;
  os_log_t v187;
  NSObject *v188;
  os_log_t v189;
  os_log_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206[2];

  v203 = (_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416));
    sub_1000087A0(v2, &qword_100260F80);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_10027B330);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    if (v11)
    {
      v199 = *(_QWORD *)(v0 + 272);
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(32, -1);
      v206[0] = v15;
      *(_DWORD *)v14 = 141558275;
      *(_QWORD *)(v0 + 72) = 1752392040;
      v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v17 = Handle.identifier.getter(v16);
      v19 = v18;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(v17, v18, v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v203, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v199);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No peer record for %{private,mask.hash}s!", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
    }

    v44 = *(_QWORD *)(v0 + 464);
    v45 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 192);
    v47 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v45, 1, 1, v47);
    v48 = (_QWORD *)swift_allocObject(&unk_1002512F8, 40, 7);
    v48[2] = 0;
    v48[3] = 0;
    v48[4] = v46;
    swift_retain(v46);
    v49 = sub_10005582C(v45, (uint64_t)&unk_100261A70, (uint64_t)v48);
    swift_release(v49);
    v50 = sub_100097FB4();
    v51 = swift_allocError(&type metadata for NITokenService.Error, v50, 0, 0);
    *v52 = 15;
    swift_willThrow(v51);
    swift_release(v44);
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(v0 + 400);
  sub_1000321F4(v2, v20, type metadata accessor for FriendSharedSecretsRecord);
  v21 = (uint64_t *)(v20 + *(int *)(v1 + 24));
  v22 = v21[1];
  if (v22 >> 60 == 15)
  {
LABEL_9:
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v27 = *(_QWORD *)(v0 + 304);
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = type metadata accessor for Logger(0);
    sub_100037A9C(v31, (uint64_t)qword_10027B330);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v30, v28);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 280);
    if (v35)
    {
      v195 = *(_QWORD *)(v0 + 272);
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      v206[0] = v39;
      *(_DWORD *)v38 = 141558275;
      *v203 = 1752392040;
      v40 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v203, v0 + 96, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v41 = Handle.identifier.getter(v40);
      v43 = v42;
      *(_QWORD *)(v0 + 96) = sub_10002BA84(v41, v42, v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease(v43);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v195);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing outgoingSharedSecret for %{private,mask.hash}s!", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v37 + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 272));
    }

    v53 = *(_QWORD *)(v0 + 464);
    v55 = *(_QWORD *)(v0 + 424);
    v54 = *(_QWORD *)(v0 + 432);
    v56 = *(_QWORD *)(v0 + 416);
    v57 = *(_QWORD *)(v0 + 400);
    v58 = *(_QWORD *)(v0 + 216);
    v59 = *(_QWORD *)(v0 + 192);
    v60 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v58, 1, 1, v60);
    v61 = (_QWORD *)swift_allocObject(&unk_100251320, 40, 7);
    v61[2] = 0;
    v61[3] = 0;
    v61[4] = v59;
    swift_retain(v59);
    v62 = sub_10005582C(v58, (uint64_t)&unk_100261A80, (uint64_t)v61);
    swift_release(v62);
    v63 = sub_100097FB4();
    v64 = swift_allocError(&type metadata for NITokenService.Error, v63, 0, 0);
    *v65 = 15;
    swift_willThrow(v64);
    swift_release(v53);
    sub_100024990(v57, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    goto LABEL_17;
  }
  v23 = *v21;
  v24 = *(_QWORD *)(v0 + 352);
  v25 = *(_QWORD *)(v0 + 360);
  v26 = *(_QWORD *)(v0 + 344);
  sub_10000E37C(*(_QWORD *)(v0 + 400) + *(int *)(*(_QWORD *)(v0 + 384) + 28), v26, (uint64_t *)&unk_100262930);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 344), (uint64_t *)&unk_100262930);
    goto LABEL_9;
  }
  v192 = v0 + 136;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 32))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  sub_10001A484(v23, v22);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v78 = *(_QWORD *)(v0 + 328);
  v77 = *(_QWORD *)(v0 + 336);
  v79 = *(_QWORD *)(v0 + 272);
  v80 = *(_QWORD *)(v0 + 280);
  v81 = *(_QWORD *)(v0 + 184);
  v82 = type metadata accessor for Logger(0);
  sub_100037A9C(v82, (uint64_t)qword_10027B330);
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16);
  v83(v77, v81, v79);
  v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v83;
  v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v83)(v78, v81, v79);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.default.getter(v85);
  v87 = os_log_type_enabled(v85, v86);
  v89 = *(_QWORD *)(v0 + 328);
  v88 = *(_QWORD *)(v0 + 336);
  v90 = *(_QWORD *)(v0 + 272);
  v91 = *(_QWORD *)(v0 + 280);
  if (v87)
  {
    v170 = *(_QWORD *)(v0 + 328);
    typeb = v86;
    v92 = swift_slowAlloc(52, -1);
    v183 = swift_slowAlloc(96, -1);
    v206[0] = v183;
    *(_DWORD *)v92 = 136447235;
    *(_QWORD *)(v0 + 136) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v192, v0 + 144, v92 + 4, v92 + 12);
    *(_WORD *)(v92 + 12) = 2160;
    *(_QWORD *)(v0 + 144) = 1752392040;
    v93 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v92 + 14, v92 + 22);
    *(_WORD *)(v92 + 22) = 2081;
    v94 = Handle.identifier.getter(v93);
    v96 = v95;
    *(_QWORD *)(v0 + 152) = sub_10002BA84(v94, v95, v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v92 + 24, v92 + 32);
    swift_bridgeObjectRelease(v96);
    v174 = v22;
    v97 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v97(v88, v90);
    *(_WORD *)(v92 + 32) = 2160;
    *(_QWORD *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v92 + 34, v92 + 42);
    *(_WORD *)(v92 + 42) = 2081;
    v98 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v99 = dispatch thunk of CustomStringConvertible.description.getter(v90, v98);
    v101 = v100;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v99, v100, v206);
    v102 = v97;
    v22 = v174;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v92 + 44, v92 + 52);
    swift_bridgeObjectRelease(v101);
    v102(v170, v90);
    _os_log_impl((void *)&_mh_execute_header, v85, typeb, "%{public}s found existing peerID: %{private,mask.hash}s for handle %{private,mask.hash}s.", (uint8_t *)v92, 0x34u);
    swift_arrayDestroy(v183, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v183, -1, -1);
    swift_slowDealloc(v92, -1, -1);
  }
  else
  {
    v102 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v102(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 272));
    v102(v89, v90);
  }

  v103 = *(_QWORD *)(v0 + 512);
  sub_1001D2EE8(v23, v22, *(char **)(v0 + 368), *(char **)(v0 + 200), *(_QWORD **)(v0 + 264));
  if (v103)
  {
    v104 = *(_QWORD *)(v0 + 464);
    v105 = *(_QWORD *)(v0 + 424);
    v106 = *(_QWORD *)(v0 + 432);
    v107 = *(_QWORD *)(v0 + 416);
    v108 = *(_QWORD *)(v0 + 400);
    v109 = v23;
    v111 = *(_QWORD *)(v0 + 360);
    v110 = *(_QWORD *)(v0 + 368);
    v112 = *(_QWORD *)(v0 + 352);
    sub_100037AF8(v109, v22);
    swift_release(v104);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
    sub_100024990(v108, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v106, v107);
LABEL_17:
    v67 = *(_QWORD *)(v0 + 400);
    v66 = *(_QWORD *)(v0 + 408);
    v69 = *(_QWORD *)(v0 + 368);
    v68 = *(_QWORD *)(v0 + 376);
    v70 = *(_QWORD *)(v0 + 336);
    v71 = *(_QWORD *)(v0 + 344);
    v73 = *(_QWORD *)(v0 + 320);
    v72 = *(_QWORD *)(v0 + 328);
    v74 = *(_QWORD *)(v0 + 312);
    v173 = *(_QWORD *)(v0 + 304);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 296);
    v182 = *(_QWORD *)(v0 + 264);
    v187 = *(os_log_t *)(v0 + 256);
    v191 = *(_QWORD *)(v0 + 248);
    v196 = *(_QWORD *)(v0 + 240);
    v200 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v173);
    swift_task_dealloc(*(_QWORD *)typea);
    swift_task_dealloc(v182);
    swift_task_dealloc(v187);
    swift_task_dealloc(v191);
    swift_task_dealloc(v196);
    swift_task_dealloc(v200);
    v75 = *(uint64_t (**)(void))(v0 + 8);
    return v75();
  }
  v204 = v23;
  v113 = *(_QWORD *)(v0 + 320);
  v114 = *(_QWORD *)(v0 + 272);
  v115 = *(_QWORD *)(v0 + 184);
  sub_10000E37C(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), &qword_100261018);
  v116 = v197(v113, v115, v114);
  v117 = Logger.logObject.getter(v116);
  v118 = static os_log_type_t.default.getter(v117);
  if (os_log_type_enabled(v117, v118))
  {
    v171 = v0 + 120;
    v175 = v0 + 128;
    v120 = *(_QWORD *)(v0 + 248);
    v119 = *(_QWORD *)(v0 + 256);
    v121 = swift_slowAlloc(42, -1);
    v122 = swift_slowAlloc(64, -1);
    v206[0] = v122;
    *(_DWORD *)v121 = 141558787;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v121 + 4, v121 + 12);
    *(_WORD *)(v121 + 12) = 2081;
    sub_10000E37C(v119, v120, &qword_100261018);
    v123 = type metadata accessor for DiscoveryToken(0);
    v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 48))(v120, 1, v123);
    v125 = *(_QWORD *)(v0 + 248);
    v188 = v117;
    v184 = v118;
    *(_QWORD *)type = v122;
    if (v124 == 1)
    {
      sub_1000087A0(v125, &qword_100261018);
      v126 = 0;
      v127 = 0xE000000000000000;
    }
    else
    {
      v126 = sub_1001D3010();
      v127 = v130;
      sub_100024990(v125, type metadata accessor for DiscoveryToken);
    }
    v131 = *(_QWORD *)(v0 + 320);
    v132 = *(_QWORD *)(v0 + 272);
    v133 = *(_QWORD *)(v0 + 256);
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v126, v127, v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v171, v121 + 14, v121 + 22);
    swift_bridgeObjectRelease(v127);
    sub_1000087A0(v133, &qword_100261018);
    *(_WORD *)(v121 + 22) = 2160;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v171, v175, v121 + 24, v121 + 32);
    *(_WORD *)(v121 + 32) = 2081;
    v134 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v135 = dispatch thunk of CustomStringConvertible.description.getter(v132, v134);
    v137 = v136;
    *(_QWORD *)(v0 + 128) = sub_10002BA84(v135, v136, v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v175, v192, v121 + 34, v121 + 42);
    swift_bridgeObjectRelease(v137);
    v102(v131, v132);
    _os_log_impl((void *)&_mh_execute_header, v188, v184, "peerToken: %{private,mask.hash}s for handle %{private,mask.hash}s.", (uint8_t *)v121, 0x2Au);
    swift_arrayDestroy(*(_QWORD *)type, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)type, -1, -1);
    swift_slowDealloc(v121, -1, -1);

  }
  else
  {
    v128 = *(_QWORD *)(v0 + 320);
    v129 = *(_QWORD *)(v0 + 272);
    sub_1000087A0(*(_QWORD *)(v0 + 256), &qword_100261018);
    v102(v128, v129);

  }
  log = *(os_log_t *)(v0 + 464);
  v201 = *(_QWORD *)(v0 + 432);
  v189 = *(os_log_t *)(v0 + 424);
  v193 = *(_QWORD *)(v0 + 416);
  *(_QWORD *)typec = *(_QWORD *)(v0 + 368);
  v185 = *(_QWORD *)(v0 + 400);
  v172 = *(_QWORD *)(v0 + 360);
  v176 = *(_QWORD *)(v0 + 352);
  v138 = *(_QWORD *)(v0 + 312);
  v139 = *(_QWORD *)(v0 + 280);
  v140 = *(_QWORD *)(v0 + 264);
  v141 = *(_QWORD *)(v0 + 272);
  v165 = *(_QWORD *)(v0 + 288);
  v166 = v140;
  v142 = *(_QWORD *)(v0 + 240);
  v164 = *(_QWORD *)(v0 + 232);
  v144 = *(_QWORD *)(v0 + 216);
  v143 = *(_QWORD *)(v0 + 224);
  v167 = v144;
  v168 = *(_QWORD *)(v0 + 208);
  v145 = *(_QWORD *)(v0 + 184);
  v146 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v144, 1, 1, v146);
  v197(v138, v145, v141);
  sub_10000E37C(v140, v142, &qword_100261018);
  v147 = *(unsigned __int8 *)(v139 + 80);
  v148 = (v147 + 32) & ~v147;
  v149 = *(unsigned __int8 *)(v143 + 80);
  v150 = (v165 + v149 + v148) & ~v149;
  v151 = (v164 + v150 + 7) & 0xFFFFFFFFFFFFFFF8;
  v152 = swift_allocObject(&unk_100251348, v151 + 8, v147 | v149 | 7);
  *(_QWORD *)(v152 + 16) = 0;
  *(_QWORD *)(v152 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v152 + v148, v138, v141);
  sub_10000EF6C(v142, v152 + v150, &qword_100261018);
  *(_QWORD *)(v152 + v151) = v168;
  v153 = sub_10005582C(v167, (uint64_t)&unk_100261A90, v152);
  swift_release(v153);
  sub_10000E37C(v166, v142, &qword_100261018);
  v154 = sub_100037A5C(&qword_100261A20);
  CheckedContinuation.resume(returning:)(v142, v154);
  sub_100037AF8(v204, v22);
  swift_release(log);
  sub_1000087A0(v166, &qword_100261018);
  (*(void (**)(os_log_type_t *, uint64_t))(v172 + 8))(*(os_log_type_t **)typec, v176);
  sub_100024990(v185, type metadata accessor for FriendSharedSecretsRecord);
  ((void (*)(uint64_t, uint64_t))v189[1].isa)(v201, v193);
  v156 = *(_QWORD *)(v0 + 400);
  v155 = *(_QWORD *)(v0 + 408);
  v158 = *(_QWORD *)(v0 + 368);
  v157 = *(_QWORD *)(v0 + 376);
  v160 = *(_QWORD *)(v0 + 336);
  v159 = *(_QWORD *)(v0 + 344);
  v161 = *(_QWORD *)(v0 + 320);
  v162 = *(_QWORD *)(v0 + 328);
  v163 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)typed = *(_QWORD *)(v0 + 304);
  v186 = *(_QWORD *)(v0 + 296);
  v190 = *(os_log_t *)(v0 + 264);
  v194 = *(_QWORD *)(v0 + 256);
  v198 = *(_QWORD *)(v0 + 248);
  v202 = *(_QWORD *)(v0 + 240);
  v205 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v155);
  swift_task_dealloc(v156);
  swift_task_dealloc(v157);
  swift_task_dealloc(v158);
  swift_task_dealloc(v159);
  swift_task_dealloc(v160);
  swift_task_dealloc(v162);
  swift_task_dealloc(v161);
  swift_task_dealloc(v163);
  swift_task_dealloc(*(_QWORD *)typed);
  swift_task_dealloc(v186);
  swift_task_dealloc(v190);
  swift_task_dealloc(v194);
  swift_task_dealloc(v198);
  swift_task_dealloc(v202);
  swift_task_dealloc(v205);
  v75 = *(uint64_t (**)(void))(v0 + 8);
  return v75();
}

uint64_t sub_1000948FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  swift_release(*(_QWORD *)(v0 + 464));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 448));
  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 480);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094C80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100094CE0, 0, 0);
}

uint64_t sub_100094CE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_100094E84, v7, 0);
}

uint64_t sub_100094E84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100094EEC;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_100094EEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006A990;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_100094F64;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100094F64(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000950AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263D2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_10011529C(3600.0);
}

uint64_t sub_100095100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v5[14] = a4;
  v5[15] = a5;
  v6 = sub_100037A5C(&qword_1002650A0);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100261018);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DiscoveryToken(0);
  v5[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[19] = v9;
  v5[20] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v5[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[22] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v12);
  v5[24] = swift_task_alloc(v12);
  v5[25] = swift_task_alloc(v12);
  v5[26] = swift_task_alloc(v12);
  v13 = sub_100037A5C(&qword_100260950);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Friend(0);
  v5[28] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[29] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v16);
  v5[31] = swift_task_alloc(v16);
  v5[32] = swift_task_alloc(v16);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v5[33] = v17;
  *v17 = v5;
  v17[1] = sub_100095274;
  return daemon.getter();
}

uint64_t sub_100095274(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = *v1;
  *(_QWORD *)(*v1 + 272) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[35] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[36] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[37] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10009536C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10009536C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 280);
  v4[38] = a1;
  v4[39] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100096494;
    v7 = 0;
  }
  else
  {
    swift_release(v4[34]);
    v6 = sub_1000953E8;
    v7 = a1;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_1000953E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 320) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 328) = v7;
  *v7 = v0;
  v7[1] = sub_1000954B8;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000954B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10009551C, 0, 0);
}

uint64_t sub_10009551C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  os_log_type_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[2];

  v1 = v0[42];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[29];
    v131 = v0[22];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v0[26];
      v9 = v0[21];
      v10 = v0[14];
      v11 = v6(v0[31], v4, v0[28], v7);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v8, v9);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(v0[31], v0[28]);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(v0[42]);
        goto LABEL_6;
      }
    }
    v14 = v0[31];
    v15 = v0[28];
    v16 = v0[29];
    v17 = v0[27];
    swift_bridgeObjectRelease(v0[42]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v14, v15);
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 1;
  }
  v18 = v0[42];
  v19 = v0[28];
  v20 = v0[29];
  v21 = v0[27];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v13, 1, v19);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    sub_1000087A0(v0[27], &qword_100260950);
    v22 = &selRef_integerValue;
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v23 = v0[25];
    v24 = v0[21];
    v25 = v0[22];
    v26 = v0[14];
    v132 = type metadata accessor for Logger(0);
    sub_100037A9C(v132, (uint64_t)qword_10027B330);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = v0[25];
    v32 = v0[22];
    if (v30)
    {
      v124 = v0[21];
      v33 = swift_slowAlloc(32, -1);
      v125 = swift_slowAlloc(64, -1);
      v136[0] = v125;
      *(_DWORD *)v33 = 136446723;
      v0[4] = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v33 + 4, v33 + 12);
      *(_WORD *)(v33 + 12) = 2160;
      v0[5] = 1752392040;
      v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v33 + 14, v33 + 22);
      *(_WORD *)(v33 + 22) = 2081;
      v35 = Handle.identifier.getter(v34);
      v37 = v36;
      v0[6] = sub_10002BA84(v35, v36, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v33 + 24, v33 + 32);
      swift_bridgeObjectRelease(v37);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v124);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, " %{public}s missing following\nfor %{private,mask.hash}s!", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy(v125, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      v38 = v33;
      v22 = &selRef_integerValue;
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v32 + 8))(v31, v0[21]);
    }

    v57 = v0[38];
    v58 = sub_10006F520();
    v59 = swift_allocError(&type metadata for FriendshipServiceError, v58, 0, 0);
    *v60 = 7;
    swift_willThrow(v59);
    swift_release(v57);
    if (v22[366] != (char *)-1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    sub_100037A9C(v132, (uint64_t)qword_10027B330);
    swift_errorRetain(v59);
    v61 = swift_errorRetain(v59);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v136[0] = v65;
      *(_DWORD *)v64 = 136446210;
      v0[2] = v59;
      swift_errorRetain(v59);
      v66 = sub_100037A5C(&qword_100265260);
      v67 = String.init<A>(describing:)(v0 + 2, v66);
      v69 = v68;
      v0[3] = sub_10002BA84(v67, v68, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease(v69);
      swift_errorRelease(v59);
      swift_errorRelease(v59);
      v70 = v63;
      v71 = v0;
      _os_log_impl((void *)&_mh_execute_header, v62, v70, "PeerToken trigger sending configData error: %{public}s", v64, 0xCu);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);

      swift_errorRelease(v59);
    }
    else
    {
      swift_errorRelease(v59);
      swift_errorRelease(v59);
      swift_errorRelease(v59);

      v71 = v0;
    }
    goto LABEL_32;
  }
  v129 = v0 + 7;
  v133 = v0 + 11;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[29] + 32))(v0[32], v0[27], v0[28]);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v39 = v0[32];
  v41 = v0[29];
  v40 = v0[30];
  v42 = v0[28];
  v43 = type metadata accessor for Logger(0);
  sub_100037A9C(v43, (uint64_t)qword_10027B330);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v42);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v48 = v0[30];
  v49 = v0[28];
  if (v47)
  {
    v126 = v0[29];
    v50 = swift_slowAlloc(32, -1);
    v51 = swift_slowAlloc(64, -1);
    v136[0] = v51;
    *(_DWORD *)v50 = 136446723;
    v0[11] = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v133, v0 + 12, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v50 + 14, v50 + 22);
    *(_WORD *)(v50 + 22) = 2081;
    v52 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v49, v52);
    v55 = v54;
    v0[13] = sub_10002BA84(v53, v54, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v50 + 24, v50 + 32);
    swift_bridgeObjectRelease(v55);
    v56 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
    v56(v48, v49);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s Found Following: %{private,mask.hash}s", (uint8_t *)v50, 0x20u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    v56 = *(void (**)(uint64_t, uint64_t))(v0[29] + 8);
    v56(v0[30], v0[28]);
  }

  v72 = v0 + 8;
  v0[43] = v56;
  v73 = v0[18];
  v74 = v0[19];
  v75 = v0[17];
  sub_10000E37C(v0[15], v75, &qword_100261018);
  v71 = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v75, 1, v73) == 1)
  {
    v76 = v0[17];
    v77 = &qword_100261018;
LABEL_28:
    v83 = sub_1000087A0(v76, v77);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.default.getter(v84);
    v86 = os_log_type_enabled(v84, v85);
    v87 = v71[38];
    v88 = v71[32];
    v89 = v71[28];
    if (v86)
    {
      v134 = v71[32];
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v127 = v89;
      v91 = v72;
      v92 = swift_slowAlloc(32, -1);
      v136[0] = v92;
      *(_DWORD *)v90 = 136446210;
      *v129 = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, v91, v90 + 4, v90 + 12);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "%{public}s no token to trigger sending configData session", v90, 0xCu);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v90, -1, -1);
      swift_release(v87);

      v93 = v134;
      v94 = v127;
    }
    else
    {
      swift_release(v71[38]);

      v93 = v88;
      v94 = v89;
    }
    v56(v93, v94);
LABEL_32:
    v96 = v71[31];
    v95 = v71[32];
    v97 = v71[30];
    v99 = v71[26];
    v98 = v71[27];
    v100 = v71;
    v101 = v71[25];
    v103 = v100[23];
    v102 = v100[24];
    v104 = v100[20];
    v105 = v100[17];
    v135 = v100[16];
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v135);
    return ((uint64_t (*)(void))v100[1])();
  }
  v78 = v0[21];
  v79 = v0[22];
  v80 = v71[16];
  v81 = sub_1000321F4(v71[17], v71[20], type metadata accessor for DiscoveryToken);
  Friend.ownerHandle.getter(v81);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v80, 1, v78) == 1)
  {
    v82 = v71[16];
    sub_100024990(v71[20], type metadata accessor for DiscoveryToken);
    v77 = &qword_1002650A0;
    v76 = v82;
    goto LABEL_28;
  }
  v107 = v71[23];
  v108 = v71[21];
  v109 = v71[22];
  v110 = v71[14];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v109 + 32))(v71[24], v71[16], v108);
  v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 16))(v107, v110, v108);
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.default.getter(v112);
  v114 = os_log_type_enabled(v112, v113);
  v115 = v71[23];
  v116 = v71[21];
  if (v114)
  {
    v128 = v71[22];
    v117 = swift_slowAlloc(32, -1);
    v130 = swift_slowAlloc(64, -1);
    v136[0] = v130;
    *(_DWORD *)v117 = 136446723;
    *v72 = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v71 + 9, v117 + 4, v117 + 12);
    *(_WORD *)(v117 + 12) = 2160;
    v71[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 9, v71 + 10, v117 + 14, v117 + 22);
    *(_WORD *)(v117 + 22) = 2081;
    v118 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v119 = dispatch thunk of CustomStringConvertible.description.getter(v116, v118);
    v121 = v120;
    v71[10] = sub_10002BA84(v119, v120, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 10, v133, v117 + 24, v117 + 32);
    swift_bridgeObjectRelease(v121);
    v122 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    v122(v115, v116);
    _os_log_impl((void *)&_mh_execute_header, v112, v113, "%{public}s Trigger start addtional configData NISession\nwith handle: %{private,mask.hash}s", (uint8_t *)v117, 0x20u);
    swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v130, -1, -1);
    swift_slowDealloc(v117, -1, -1);
  }
  else
  {
    v122 = *(void (**)(uint64_t, uint64_t))(v71[22] + 8);
    v122(v71[23], v71[21]);
  }

  v71[44] = v122;
  v123 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v71[45] = v123;
  *v123 = v71;
  v123[1] = sub_10009616C;
  return daemon.getter();
}

uint64_t sub_10009616C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 360);
  v5 = *v1;
  *(_QWORD *)(*v1 + 368) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[47] = v6;
  v7 = type metadata accessor for NIRangingService(0);
  v8 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_100096214;
  return ActorServiceDaemon.getService<A>()(v3[36], v7, v3[37], v8);
}

uint64_t sub_100096214(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 376);
  *(_QWORD *)(*v2 + 384) = v1;
  swift_task_dealloc(v5);
  swift_release(*(_QWORD *)(v4 + 368));
  if (v1)
  {
    v6 = sub_1000966F8;
  }
  else
  {
    *(_QWORD *)(v4 + 392) = a1;
    v6 = sub_100096290;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100096290()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;

  v1 = **(void ***)(v0 + 160);
  *(_QWORD *)(v0 + 400) = v1;
  v2 = v1;
  Friend.handle.getter(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10026439C);
  *(_QWORD *)(v0 + 408) = v3;
  *v3 = v0;
  v3[1] = sub_100096310;
  return sub_100127CB8((uint64_t)v2, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
}

uint64_t sub_100096310()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 400);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 352);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 408));

  v2(v3, v4);
  return swift_task_switch(sub_100096388, 0, 0);
}

uint64_t sub_100096388()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 392));
  swift_release(v3);
  v1(v6, v7);
  sub_100024990(v8, type metadata accessor for DiscoveryToken);
  v2(v4, v5);
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  swift_release(*(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 312);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v23 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PeerToken trigger sending configData error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000966F8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 304));
  v1(v5, v6);
  sub_100024990(v7, type metadata accessor for DiscoveryToken);
  v2(v3, v4);
  v8 = *(_QWORD *)(v0 + 384);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v9 = type metadata accessor for Logger(0);
  sub_100037A9C(v9, (uint64_t)qword_10027B330);
  swift_errorRetain(v8);
  v10 = swift_errorRetain(v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v30 = v14;
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v0 + 16) = v8;
    swift_errorRetain(v8);
    v15 = sub_100037A5C(&qword_100265260);
    v16 = String.init<A>(describing:)(v0 + 16, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PeerToken trigger sending configData error: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 136);
  v29 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096998(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v5 + 96) = a4;
  *(_QWORD *)(v5 + 104) = a5;
  *(_BYTE *)(v5 + 184) = a2;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = a3;
  v6 = type metadata accessor for Handle(0);
  *(_QWORD *)(v5 + 112) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v8);
  return swift_task_switch(sub_100096A10, 0, 0);
}

uint64_t sub_100096A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t *v48;
  NSObject *log;
  os_log_type_t type;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if ((*(_BYTE *)(v0 + 184) & 1) != 0)
  {
    v18 = *(_QWORD *)(v0 + 80);
    swift_errorRetain(v18);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v20 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 112);
    v22 = *(_QWORD *)(v0 + 88);
    v23 = type metadata accessor for Logger(0);
    sub_100037A9C(v23, (uint64_t)qword_10027B330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
    swift_errorRetain(v18);
    v24 = swift_errorRetain(v18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 128);
    v30 = *(_QWORD *)(v0 + 80);
    if (v27)
    {
      type = v26;
      v47 = *(_QWORD *)(v0 + 112);
      v31 = swift_slowAlloc(42, -1);
      v48 = (uint64_t *)swift_slowAlloc(8, -1);
      v51 = swift_slowAlloc(64, -1);
      v53 = v51;
      *(_DWORD *)v31 = 136446979;
      log = v25;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      v33 = Handle.identifier.getter(v32);
      v35 = v34;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v33, v34, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v47);
      *(_WORD *)(v31 + 32) = 2114;
      swift_errorRetain(v18);
      v36 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v31 + 34, v31 + 42);
      *v48 = v36;
      sub_10007E9BC(v30, 1);
      sub_10007E9BC(v30, 1);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v31, 0x2Au);
      v37 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v48, 1, v37);
      swift_slowDealloc(v48, -1, -1);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v29 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      sub_10007E9BC(v30, 1);
      sub_10007E9BC(v30, 1);

    }
    v41 = *(_QWORD *)(v0 + 80);
    v42 = sub_100097FB4();
    v43 = swift_allocError(&type metadata for NITokenService.Error, v42, 0, 0);
    *(_QWORD *)(v0 + 160) = v43;
    *v44 = v41;
    swift_errorRetain(v18);
    v38 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 168) = v38;
    v45 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 176) = v45;
    *v45 = v0;
    v45[1] = sub_100097084;
    v40 = v43;
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = *(_QWORD *)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027B330);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 120);
    if (v9)
    {
      v52 = *(_QWORD *)(v0 + 112);
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(64, -1);
      v53 = v13;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000015, 0x80000001001FDA10, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 64) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(v15, v16, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v52);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
    }

    v38 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 144) = v38;
    v39 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 152) = v39;
    *v39 = v0;
    v39[1] = sub_100097028;
    v40 = 0;
  }
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FDA30, v40, v38);
}

uint64_t sub_100097028()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 144);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100097084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_1000970EC, 0, 0);
}

uint64_t sub_1000970EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 80);
  v1 = sub_100037A5C(&qword_100261A20);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  v2 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009714C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000971AC, 0, 0);
}

uint64_t sub_1000971AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000060, 0x80000001001FDA70, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_100097350, v7, 0);
}

uint64_t sub_100097350()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1000973B8;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1000973B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006CDAC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_100097430;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100097430(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000060, 0x80000001001FDA70, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100097578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_1000975A8, 0, 0);
}

uint64_t sub_1000975A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 96) = v5;
  v6 = *(_OWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 80);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 48) = v1;
  *(_QWORD *)(v5 + 56) = v2;
  *(_OWORD *)(v5 + 64) = v7;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)[1]);
  *(_QWORD *)(v0 + 104) = v8;
  v9 = type metadata accessor for FriendSharedSecretsRecord(0);
  v10 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v8 = v0;
  v8[1] = sub_100097674;
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(*(_QWORD *)(v0 + 24), sub_100098AB0, v5, v9, v10);
}

uint64_t sub_100097674()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 104);
  v3 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000976E8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 96));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000976E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009771C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), unint64_t a3, uint64_t a4, uint8_t *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint8_t *v76;
  uint64_t v77;
  os_log_t v78;
  void (*v79)(char *, char *, uint64_t);
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;

  v82 = a8;
  v85 = a1;
  v86 = a6;
  v84 = a5;
  v88 = a2;
  v11 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v81 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v75 - v14;
  v16 = sub_100037A5C((uint64_t *)&unk_100262930);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v75 - v20;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v83 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v75 - v26;
  if (a3 >> 60 != 15)
  {
    sub_10000E37C(a4, (uint64_t)v21, (uint64_t *)&unk_100262930);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    {
      sub_10001A484((uint64_t)v88, a3);
      sub_1000087A0((uint64_t)v21, (uint64_t *)&unk_100262930);
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_100037A9C(v28, (uint64_t)qword_10027B330);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "outgoingBaseDate cannot be nil!", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }
      v33 = v88;
      v34 = a3;
LABEL_21:
      sub_100037AF8((uint64_t)v33, v34);

      return;
    }
    v79 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v80 = a7;
    v79(v27, v21, v22);
    sub_10001A484((uint64_t)v88, a3);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v35 = type metadata accessor for Logger(0);
    sub_100037A9C(v35, (uint64_t)qword_10027B330);
    v36 = v87;
    v37 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v87 + 16))(v15, v84, v11);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v78 = v38;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      v90 = v77;
      *(_DWORD *)v40 = 136446210;
      v41 = v40 + 12;
      v75 = v40 + 4;
      v76 = v40;
      v42 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
      v45 = v44;
      v89 = sub_10002BA84(v43, v44, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v75, v41);
      swift_bridgeObjectRelease(v45);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v15, v11);
      v38 = v78;
      v46 = v76;
      _os_log_impl((void *)&_mh_execute_header, v78, v39, "Updating outgoingSharedSecret for %{public}s", v76, 0xCu);
      v47 = v77;
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v11);
    }

    a7 = v80;
    v48 = type metadata accessor for FriendSharedSecretsRecord(0);
    v49 = v85;
    v50 = v85 + *(int *)(v48 + 24);
    sub_100037AF8(*(_QWORD *)v50, *(_QWORD *)(v50 + 8));
    *(_QWORD *)v50 = v88;
    *(_QWORD *)(v50 + 8) = a3;
    v51 = v49 + *(int *)(v48 + 28);
    sub_1000087A0(v51, (uint64_t *)&unk_100262930);
    v79((char *)v51, v27, v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v51, 0, 1, v22);
  }
  if (a7 >> 60 == 15)
    return;
  sub_10000E37C(v82, (uint64_t)v19, (uint64_t *)&unk_100262930);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22) == 1)
  {
    v52 = v86;
    sub_10001A484(v86, a7);
    sub_1000087A0((uint64_t)v19, (uint64_t *)&unk_100262930);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100037A9C(v53, (uint64_t)qword_10027B330);
    v30 = Logger.logObject.getter(v54);
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v55, "outgoingBaseDate cannot be nil!", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }
    v33 = (void (*)(_QWORD, _QWORD, _QWORD))v52;
    v34 = a7;
    goto LABEL_21;
  }
  v88 = *(void (**)(_QWORD, _QWORD, _QWORD))(v23 + 32);
  v88(v83, v19, v22);
  v57 = v86;
  sub_10001A484(v86, a7);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v58 = type metadata accessor for Logger(0);
  sub_100037A9C(v58, (uint64_t)qword_10027B330);
  v59 = v87;
  v60 = v81;
  v61 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v87 + 16))(v81, v84, v11);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v90 = v65;
    v80 = a7;
    *(_DWORD *)v64 = 136446210;
    v84 = v64 + 4;
    v66 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v11, v66);
    v69 = v68;
    v89 = sub_10002BA84(v67, v68, &v90);
    a7 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v84, v64 + 12);
    swift_bridgeObjectRelease(v69);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v60, v11);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Updating incomingSharedSecret for %{public}s", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    v70 = v65;
    v57 = v86;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v11);
  }

  v71 = type metadata accessor for FriendSharedSecretsRecord(0);
  v72 = v85;
  v73 = v85 + *(int *)(v71 + 32);
  sub_100037AF8(*(_QWORD *)v73, *(_QWORD *)(v73 + 8));
  *(_QWORD *)v73 = v57;
  *(_QWORD *)(v73 + 8) = a7;
  v74 = v72 + *(int *)(v71 + 36);
  sub_1000087A0(v74, (uint64_t *)&unk_100262930);
  v88(v74, v83, v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v74, 0, 1, v22);
}

uint64_t sub_100097F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.create<A>(record:)[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for FriendSharedSecretsRecord(0);
  v6 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return CloudKitChangeSet.Adaptor.create<A>(record:)(a2, v5, v6);
}

unint64_t sub_100097FB4()
{
  unint64_t result;

  result = qword_100261A10;
  if (!qword_100261A10)
  {
    result = swift_getWitnessTable(&unk_1001FA4A0, &type metadata for NITokenService.Error);
    atomic_store(result, &qword_100261A10);
  }
  return result;
}

uint64_t sub_100097FF8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000925B4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100098004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = sub_100037A5C(&qword_100261A20);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for Handle(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v13 = v2 | v6 | v11 | 7;
  v14 = ((*(_QWORD *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v14, v13);
}

uint64_t sub_100098118(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100261A20) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v5;
  v16 = (uint64_t)v1 + v8;
  v17 = (uint64_t)v1 + v11;
  v18 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8));
  v19 = (_QWORD *)swift_task_alloc(dword_100261A2C);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_10003BF7C;
  return sub_10009281C(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_100098220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = sub_100037A5C(&qword_100261A20);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for Handle(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v15 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 + v10 + 8) & ~v10;
  v12 = v2 | v6 | v10 | 7;
  v13 = ((*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  swift_release(*(_QWORD *)(v0 + v8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v15);
  return swift_deallocObject(v0, v13, v12);
}

uint64_t sub_100098338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(sub_100037A5C(&qword_100261A20) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v0 + v3;
  v11 = *(_QWORD *)(v0 + v7);
  v12 = v0 + v6;
  v13 = v0 + v9;
  v14 = *(_QWORD *)(v0 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_100261A3C);
  *(_QWORD *)(v1 + 16) = v15;
  *v15 = v1;
  v15[1] = sub_10003BF7C;
  return sub_100092C1C(v10, v12, v11, v13, v14);
}

uint64_t sub_10009842C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100037A5C(&qword_100261A20);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1000984F0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_100037A5C(&qword_100261A20) - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v2 + v7;
  v12 = v2 + v10;
  v13 = *(_QWORD *)(v2 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_100261A4C);
  *(_QWORD *)(v3 + 16) = v14;
  *v14 = v3;
  v14[1] = sub_10003BF7C;
  return sub_100096998(a1, v5, v11, v12, v13);
}

uint64_t sub_1000985B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000985DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261A5C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100094C80(a1, v4);
}

uint64_t sub_100098644()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100261A6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100263D2C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_10011529C(3600.0);
}

uint64_t sub_1000986BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000986E8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100261A7C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100263D2C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_10011529C(3600.0);
}

uint64_t sub_10009875C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_100037A5C(&qword_100261018) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v10 = (id *)(v0 + v8);
  v11 = type metadata accessor for DiscoveryToken(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v0 + v8, 1, v11))
  {

    v12 = (char *)v10 + *(int *)(v11 + 20);
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = &v12[*(int *)(type metadata accessor for DiscoveryToken.Bucket(0) + 24)];
    v15 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  return swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v7 | 7);
}

uint64_t sub_100098888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_100037A5C(&qword_100261018) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v8;
  v12 = (_QWORD *)swift_task_alloc(dword_100261A8C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003BF7C;
  return sub_100095100(a1, v9, v10, v1 + v5, v11);
}

uint64_t sub_100098958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261AB4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10009714C(a1, v4);
}

uint64_t sub_1000989BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261AC4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100097F20(a1, v4);
}

uint64_t sub_100098A10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;

  v11 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = swift_task_alloc(dword_100261AD4);
  v8 = *(_OWORD *)(v1 + 40);
  v9 = *(_OWORD *)(v1 + 72);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_10003BF7C;
  *(_OWORD *)(v7 + 80) = v9;
  *(_QWORD *)(v7 + 64) = v5;
  *(_QWORD *)(v7 + 72) = v6;
  *(_OWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 40) = v4;
  *(_OWORD *)(v7 + 24) = v11;
  *(_QWORD *)(v7 + 16) = a1;
  return swift_task_switch(sub_1000975A8, 0, 0);
}

void sub_100098AB0(uint64_t a1)
{
  uint64_t v1;

  sub_10009771C(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint8_t **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100098AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100098B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_100261AEC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_10008886C(v4, v5, v6);
}

uint64_t sub_100098BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100098C58(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100261AFC);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_1000087DC;
  return sub_10008F554(a1, v5, v8, v9);
}

uint64_t sub_100098CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261B14);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10008D9EC(a1, v4);
}

uint64_t sub_100098D50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100261B4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000087DC;
  return sub_10009168C(a1, v4, v5, v6);
}

uint64_t sub_100098DCC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AB20);
  sub_100037A9C(v0, (uint64_t)qword_10027AB20);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x4D646E616D6D6F43, 0xEE00726567616E61);
}

uint64_t sub_100098E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AB38);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027AB38);
  if (qword_10025F8B8 != -1)
    swift_once(&qword_10025F8B8, sub_100098DCC);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AB20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100098EDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 1608) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1616) = v2;
  *v2 = v1;
  v2[1] = sub_100098F28;
  return daemon.getter();
}

uint64_t sub_100098F28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1616);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1624) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1632) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100099010;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100099010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1632);
  v5 = *(_QWORD **)v2;
  v5[205] = a1;
  v5[206] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000992B8, v5[201], 0);
  swift_release(v5[203]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[207] = v7;
  *v7 = v5;
  v7[1] = sub_1000990C4;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_1000990C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1640);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1656));
  return swift_task_switch(sub_10009911C, v1, 0);
}

uint64_t sub_10009911C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;

  sub_10000EF6C((uint64_t)(v0 + 110), (uint64_t)(v0 + 56), &qword_1002603A8);
  if (sub_100049214((uint64_t)(v0 + 56)) == 1)
  {
    v1 = v0[201];
    v2 = sub_100099260;
  }
  else
  {
    v3 = v0[201];
    memcpy(v0 + 2, v0 + 56, 0x1B0uLL);
    sub_10000AF28((uint64_t)(v0 + 110));
    sub_10000EF6C((uint64_t)(v0 + 34), (uint64_t)(v0 + 182), &qword_100260858);
    v2 = sub_1000991C8;
    v1 = v3;
  }
  return swift_task_switch(v2, v1, 0);
}

uint64_t sub_1000991C8()
{
  uint64_t v0;
  int v1;
  double v2;
  BOOL v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000EF6C(v0 + 1456, v0 + 1312, &qword_100260858);
  v1 = sub_10005EFC4(v0 + 1312);
  v2 = *(double *)(v0 + 1312);
  v3 = v2 <= 0.0 || v1 == 1;
  v4 = v2 / 1000.0;
  v5 = *(_QWORD *)(v0 + 1640);
  if (v3)
    v4 = 0.2;
  v6 = static Duration.seconds(_:)(v4);
  v8 = v7;
  swift_release(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
}

uint64_t sub_100099260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 1640);
  v2 = static Duration.seconds(_:)(0.2);
  v4 = v3;
  swift_release(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v4);
}

uint64_t sub_1000992B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 1624));
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = *(_QWORD *)(v0 + 1648);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 1648);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 1600) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1600, v0 + 1608, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ERROR: %{public}@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 1648));
  }
  swift_errorRelease(v7);

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(5000000000000000000, 0);
}

uint64_t sub_100099470()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000994D0, v0, 0);
}

uint64_t sub_1000994D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    swift_task_dealloc(*(_QWORD *)(v1 + 80));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v1 + 88) = v3;
    *v3 = v1;
    v3[1] = sub_100099540;
    return daemon.getter();
  }
}

uint64_t sub_100099540(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(*v1 + 96) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 104) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_100099628;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100099628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[7];
    v6 = sub_100099804;
  }
  else
  {
    v7 = v3[7];
    swift_release(v3[12]);
    v6 = sub_1000996A4;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000996A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  v0[5] = type metadata accessor for CommandManager(0);
  v0[6] = sub_100004EA8(&qword_100261D10, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4868);
  v0[2] = v1;
  v2 = dword_10025FF8C;
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[16] = v3;
  *v3 = v0;
  v3[1] = sub_100099744;
  return sub_1000417FC(v0[10], (uint64_t)(v0 + 2));
}

uint64_t sub_100099744()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[7];
    v5 = sub_100099840;
  }
  else
  {
    v6 = v2 + 2;
    v8 = v2[9];
    v7 = v2[10];
    v10 = v2 + 7;
    v9 = v2[7];
    (*(void (**)(uint64_t, _QWORD))(v8 + 8))(v7, v10[1]);
    sub_10002BB90(v6);
    v5 = sub_1000997C8;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000997C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099804()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099840()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  sub_10002BB90((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Priority;
  uint64_t v5;
  uint64_t refreshed;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  v1 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  Priority = type metadata accessor for LocatePriority(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(Priority - 8) + 8))(v3, Priority);
  v5 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 8))(v5, refreshed);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalesceTaskList));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10009994C()
{
  return type metadata accessor for CommandManager(0);
}

uint64_t sub_100099954(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[1] = &unk_1001F4910;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LocatePriority(319);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for LegacyRefreshSchedule(319);
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
        return swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_100099A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CommandManager(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_100099A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for CommandManager(0);
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_100099B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CommandManager(0);
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100099B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CommandManager(0);
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_100099BD0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100099BE8, v0, 0);
}

uint64_t sub_100099BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AB38);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CommandManager: run", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_100261B9C);
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = sub_100099CE4;
  return sub_100099470();
}

uint64_t sub_100099CE4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100099D2C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CommandManager(0);
  v1 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_100099D7C()
{
  return sub_100004EA8(qword_100261CE0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4928);
}

uint64_t sub_100099DA8()
{
  return sub_100004EA8(&qword_100261848, type metadata accessor for CommandManager, (uint64_t)&unk_1001F49B0);
}

ValueMetadata *type metadata accessor for CommandManagerError()
{
  return &type metadata for CommandManagerError;
}

uint64_t getEnumTagSinglePayload for FriendSharingMessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13findmylocated19CommandManagerErrorV8CategoryOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100099EC8 + 4 * byte_1001F48C5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100099EFC + 4 * byte_1001F48C0[v4]))();
}

uint64_t sub_100099EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100099F0CLL);
  return result;
}

uint64_t sub_100099F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100099F20);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100099F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommandManagerError.Category()
{
  return &type metadata for CommandManagerError.Category;
}

unint64_t sub_100099F4C()
{
  unint64_t result;

  result = qword_100261D18;
  if (!qword_100261D18)
  {
    result = swift_getWitnessTable(&unk_1001F4A80, &type metadata for CommandManagerError.Category);
    atomic_store(result, (unint64_t *)&qword_100261D18);
  }
  return result;
}

uint64_t sub_100099F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v41 = a1;
  v3 = sub_100037A5C(&qword_100261D28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = v5;
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v7);
  v43 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - v14;
  a2 += 16;
  swift_beginAccess(a2, v44, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v17 = result;
    UUID.init()(result);
    v38 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v38(v13, v15, v9);
    v18 = v3;
    v19 = *(unsigned __int8 *)(v10 + 80);
    v36 = v6;
    v20 = (v19 + 24) & ~v19;
    v37 = v19 | 7;
    v21 = swift_allocObject(&unk_1002515F0, v20 + v11, v19 | 7);
    v22 = v10;
    v40 = v10;
    v23 = v4;
    v24 = v21;
    *(_QWORD *)(v21 + 16) = v17;
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    v39(v21 + v20, v13, v9);
    swift_retain(v17);
    v25 = v24;
    v26 = v18;
    v35 = v18;
    v27 = v41;
    AsyncStream.Continuation.onTermination.setter(sub_10009AEB0, v25, v18);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v43, 1, 1, v28);
    v29 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v36, v27, v26);
    v38(v13, v15, v9);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v42 + v19 + v31) & ~v19;
    v33 = (char *)swift_allocObject(&unk_100251618, v32 + v11, v37 | v30);
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = v17;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v33[v31], v29, v35);
    v39((uint64_t)&v33[v32], v13, v9);
    swift_retain(v17);
    v34 = sub_10005582C(v43, (uint64_t)&unk_100261D40, (uint64_t)v33);
    swift_release(v17);
    swift_release(v34);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_10009A26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_100251640, v13 + v7, v12 | 7);
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain(a2);
  v15 = sub_10005582C((uint64_t)v10, (uint64_t)&unk_100261D58, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_10009A3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10009A3C8, a4, 0);
}

uint64_t sub_10009A3C8()
{
  uint64_t v0;

  sub_10009A3F8(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A3F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37[3];

  v2 = v1;
  v4 = sub_100037A5C(&qword_100261D48);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027ACA0);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = v35(v13, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v32 = v11;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v34 = v1;
    v21 = v20;
    v37[0] = v20;
    v31 = a1;
    *(_DWORD *)v19 = 136446210;
    v33 = v6;
    v22 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v25 = v24;
    v36 = sub_10002BA84(v23, v24, v37);
    v6 = v33;
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing stateContinuation for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    v2 = v34;
    swift_slowDealloc(v26, -1, -1);
    v27 = v19;
    v11 = v32;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  v35(v11, a1, v7);
  v28 = sub_100037A5C(&qword_100261D28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
  swift_beginAccess(v2 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations, v37, 33, 0);
  sub_1000DE290((uint64_t)v6, (uint64_t)v11);
  return swift_endAccess(v37);
}

uint64_t sub_10009A6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v8 = sub_100037A5C(&qword_100261D20);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DataManager.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_10009A790, a4, 0);
}

uint64_t sub_10009A790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[12];
  v2 = v0[5];
  sub_10009A8B0(v0[6], v0[7]);
  v3 = v2 + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess(v3, v0 + 2, 0, 0);
  sub_10003E7A8(v3, v1);
  return swift_task_switch(sub_10009A810, 0, 0);
}

uint64_t sub_10009A810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  sub_10003E7A8(v1, v2);
  v6 = sub_100037A5C(&qword_100261D28);
  AsyncStream.Continuation.yield(_:)(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10003E76C(v1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v3 = v2;
  v6 = sub_100037A5C(&qword_100261D48);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v16 = type metadata accessor for Logger(0);
  sub_100037A9C(v16, (uint64_t)qword_10027ACA0);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38 = a2;
  v17 = v37(v15, a2, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v35 = a1;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v36 = v2;
    v23 = v22;
    v40[0] = v22;
    v34 = v13;
    *(_DWORD *)v21 = 136446210;
    v33 = v21 + 4;
    v24 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    v27 = v26;
    v39 = sub_10002BA84(v25, v26, v40);
    v13 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33, v21 + 12);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Storing stateContinuation for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v36;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    a1 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  v37(v13, v38, v9);
  v30 = sub_100037A5C(&qword_100261D28);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, a1, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v30);
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations, v40, 33, 0);
  sub_1000DE290((uint64_t)v8, (uint64_t)v13);
  return swift_endAccess(v40);
}

uint64_t sub_10009ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_10009AC20(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __CFNotificationCenter *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ACA0);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(a2);
    v12 = sub_10002BA84(a1, a2, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Posting notification: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v10 = CFNotificationCenterGetDarwinNotifyCenter();
  v11 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(v10, v11, 0, 0, 1u);

}

uint64_t sub_10009ADFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_100260538);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009AE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009AEB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10009A26C(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_10009AEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100037A5C(&qword_100261D28);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10009AFB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100261D28) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_100261D3C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_10009A6F4(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10009B078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009B0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100261D54);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000087DC;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_10009A3C8, v3, 0);
}

uint64_t sub_10009B170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v29[3];
  _QWORD v30[4];

  v4 = v3;
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v8);
  v10 = (char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044264(a1, (uint64_t)v10);
  v11 = type metadata accessor for TaskPriority(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_100265180);
    v14 = 12544;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    v14 = v21 | 0x3100;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = *v4;
  v23 = swift_allocObject(&unk_1002516B8, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = sub_100037A5C(&qword_100261858);
  v25 = (_QWORD *)(v20 | v18);
  if (v20 | v18)
  {
    v30[0] = 0;
    v30[1] = 0;
    v25 = v30;
    v30[2] = v18;
    v30[3] = v20;
  }
  v29[0] = 1;
  v29[1] = v25;
  v29[2] = v22;
  v26 = swift_task_create(v14, v29, v24, &unk_100261DE8, v23);
  return swift_release(v26);
}

uint64_t sub_10009B31C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for Handle(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Friend(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  v3[17] = swift_task_alloc(v8);
  v9 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v3[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[20] = v11;
  v3[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009B410, v2, 0);
}

uint64_t sub_10009B410()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[7];
  v2 = type metadata accessor for Logger(0);
  v0[22] = sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[7];
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v9 = swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    v0[6] = sub_10002BA84(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "stopRefreshingLocation for: %{private,mask.hash}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[7], 2);
  }

  v13 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[23] = v13;
  *v13 = v0;
  v13[1] = sub_10009B630;
  return daemon.getter();
}

uint64_t sub_10009B630(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *v1;
  *(_QWORD *)(*v1 + 192) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 200) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10009B718;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10009B718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  v4[26] = a1;
  v4[27] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[9];
    v7 = sub_10009C0A4;
  }
  else
  {
    swift_release(v4[24]);
    v7 = sub_10009B794;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10009B794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 224) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 232) = v7;
  *v7 = v0;
  v7[1] = sub_10009B864;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10009B864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10009B8CC, v4, 0);
}

uint64_t sub_10009B8CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = v0[30];
  v2 = v0[7];
  swift_bridgeObjectRetain(v1);
  v0[31] = sub_10001A4E4(v2, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  type metadata accessor for Transaction(0);
  v3 = static Transaction.currentNSXPCConnection.getter();
  v4 = v0[19];
  v5 = v0[20];
  v6 = v0[18];
  if (v3)
  {
    v7 = (void *)v3;
    NSXPCConnection.id.getter();

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 32))(v0[21], v0[18], v0[19]);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v5 + 56))(v0[18], 1, 1, v0[19]);
  }
  v8 = v0[18];
  v9 = type metadata accessor for LocationService(0);
  v10 = sub_100004EA8(&qword_100261E08, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
  v11 = CustomStringConvertible<>.addressDescription.getter(v9, v10);
  v13 = v12;
  v14 = String.utf8Data.getter(v11);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  v0[2] = v14;
  v0[3] = v16;
  v17 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v17);
  sub_100037AB4(v14, v16);
  sub_1000087A0(v8, (uint64_t *)&unk_1002675F0);
LABEL_6:
  v18 = v0[9];
  sub_10009C1BC(v0[21], v0[7], v0[8]);
  v19 = swift_retain_n(v18, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = v0[9];
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v24 = 134217984;
    sub_100020530();
    v26 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRelease(v25);
    swift_release(v23);
    v0[4] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v24 + 4, v24 + 12);
    swift_release(v23);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "stopRefreshingLocation LegacyRefresh handle count: %ld", v24, 0xCu);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_release_n(v0[9], 2);
  }

  v27 = (_QWORD *)swift_task_alloc(dword_10026060C);
  v0[32] = v27;
  *v27 = v0;
  v27[1] = sub_10009BB74;
  return sub_100010E38();
}

uint64_t sub_10009BB74(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_BYTE *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10009BBD4, v3, 0);
}

void sub_10009BBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;

  if ((*(_BYTE *)(v0 + 288) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask);
    if (v3)
    {
      swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask));
      Task.cancel()();
      swift_release(v3);
      v4 = *(_QWORD *)(v1 + v2);
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(v1 + v2) = 0;
    v5 = swift_release(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cancel next legacy location refresh task", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  v9 = *(_QWORD *)(v0 + 248);
  v40 = (char *)_swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v0 + 112);
    v13 = (char *)_swiftEmptyArrayStorage;
    v36 = *(_QWORD *)(v9 + 16);
    v38 = *(_QWORD *)(v0 + 248);
    while (v11 < *(_QWORD *)(v9 + 16))
    {
      v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v15 = *(_QWORD *)(v12 + 72);
      v16 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v12 + 16))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 248) + v14 + v15 * v11, *(_QWORD *)(v0 + 104));
      if ((Friend.isSecureLocationCapable.getter(v16) & 1) != 0)
      {
        v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
        v17(*(char **)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v13 + 2) + 1, 1);
          v13 = v40;
        }
        v19 = *((_QWORD *)v13 + 2);
        v18 = *((_QWORD *)v13 + 3);
        if (v19 >= v18 >> 1)
        {
          sub_1000303C0(v18 > 1, v19 + 1, 1);
          v13 = v40;
        }
        v20 = *(_QWORD *)(v0 + 128);
        v21 = *(_QWORD *)(v0 + 104);
        *((_QWORD *)v13 + 2) = v19 + 1;
        v17(&v13[v14 + v19 * v15], v20, v21);
        v40 = v13;
        v10 = v36;
        v9 = v38;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
      }
      if (v10 == ++v11)
      {
        v9 = *(_QWORD *)(v0 + 248);
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    v22 = *((_QWORD *)v13 + 2);
    if (v22)
    {
      v23 = *(_QWORD *)(v0 + 112);
      v24 = *(_QWORD *)(v0 + 88);
      v41 = _swiftEmptyArrayStorage;
      sub_100018EBC(0, v22, 0);
      v25 = &v13[(*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)];
      v26 = v23;
      v37 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 16);
      v39 = *(_QWORD *)(v23 + 72);
      v27 = _swiftEmptyArrayStorage;
      do
      {
        v28 = *(_QWORD *)(v0 + 120);
        v29 = *(_QWORD *)(v0 + 104);
        v30 = v37(v28, v25, v29);
        Friend.handle.getter(v30);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v29);
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
        {
          sub_100018EBC(0, v27[2] + 1, 1);
          v27 = v41;
        }
        v32 = v27[2];
        v31 = v27[3];
        if (v32 >= v31 >> 1)
        {
          sub_100018EBC(v31 > 1, v32 + 1, 1);
          v27 = v41;
        }
        v33 = *(_QWORD *)(v0 + 96);
        v34 = *(_QWORD *)(v0 + 80);
        v27[2] = v32 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v32, v33, v34);
        v41 = v27;
        v25 += v39;
        --v22;
      }
      while (v22);
      swift_release(v13);
    }
    else
    {
      swift_release(v13);
      v27 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v0 + 264) = v27;
    v35 = (_QWORD *)swift_task_alloc(dword_1002620BC);
    *(_QWORD *)(v0 + 272) = v35;
    *v35 = v0;
    v35[1] = sub_10009BF94;
    sub_1000B21FC((uint64_t)v27, *(_QWORD *)(v0 + 64));
  }
}

uint64_t sub_10009BF94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 264);
  v5 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v6 = sub_10009C124;
  else
    v6 = sub_10009C004;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10009C004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 192));
  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Priority;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  os_log_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(unint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(unint64_t, uint64_t, uint64_t);
  uint64_t *v110;
  unint64_t v111;
  char v112[24];
  _QWORD *v113;
  uint64_t v114[3];
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[16];
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v6);
  v106 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v9 = *(_QWORD *)(Priority - 8);
  v10 = __chkstk_darwin(Priority);
  v111 = (unint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (unint64_t)&v99 - v12;
  v14 = (uint64_t *)type metadata accessor for UUID(0);
  v15 = *(v14 - 1);
  __chkstk_darwin(v14);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
LABEL_38:
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100037A9C(v18, (uint64_t)qword_10027ABA8);
  (*(void (**)(char *, uint64_t, uint64_t *))(v15 + 16))(v17, a1, v14);
  v109 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16);
  v109(v13, a3, Priority);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v102 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  LODWORD(v103) = v22;
  v23 = os_log_type_enabled(v21, v22);
  v107 = a1;
  v108 = Priority;
  v104 = v9;
  if (v23)
  {
    v24 = swift_slowAlloc(32, -1);
    v100 = swift_slowAlloc(96, -1);
    v118 = (_QWORD *)v100;
    *(_DWORD *)v24 = 136315650;
    v25 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v99 = v21;
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v14, v25);
    v28 = v27;
    v116 = sub_10002BA84(v26, v27, (uint64_t *)&v118);
    v101 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t *))(v15 + 8))(v17, v14);
    *(_WORD *)(v24 + 12) = 2080;
    v29 = sub_100004EA8(&qword_100261E20, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v29);
    v32 = v31;
    v116 = sub_10002BA84(v30, v31, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease(v32);
    v105 = *(void (**)(unint64_t, uint64_t))(v104 + 8);
    v105(v13, Priority);
    *(_WORD *)(v24 + 22) = 2080;
    type metadata accessor for Handle(0);
    v33 = swift_bridgeObjectRetain(a2);
    v34 = Array.description.getter(v33);
    v36 = v35;
    swift_bridgeObjectRelease(a2);
    v116 = sub_10002BA84(v34, v36, (uint64_t *)&v118);
    a3 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v24 + 24, v24 + 32);
    v37 = a2;
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v36);
    v38 = v99;
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v103, "Remove legacyLocationSubscriptions: client: %s priority: %s handles: %s", (uint8_t *)v24, 0x20u);
    v39 = v100;
    swift_arrayDestroy(v100, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t *))(v15 + 8))(v17, v14);
    v105 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
    v105(v13, Priority);

    v37 = a2;
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v40 = (uint64_t *)((char *)v110 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
  result = swift_beginAccess((char *)v110 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions, &v116, 0, 0);
  v110 = v40;
  v42 = *v40;
  if (!*(_QWORD *)(*v40 + 16))
    return result;
  swift_bridgeObjectRetain(*v40);
  v43 = sub_10001BE14(a3);
  if ((v44 & 1) == 0)
    return swift_bridgeObjectRelease(v42);
  v45 = (uint64_t *)(*(_QWORD *)(v42 + 56) + 24 * v43);
  v46 = *v45;
  v47 = v45[1];
  v48 = v45[2];
  swift_retain(v47);
  swift_bridgeObjectRetain(v46);
  v49 = swift_bridgeObjectRelease(v42);
  v118 = (_QWORD *)v46;
  v119 = v47;
  v120 = v48;
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v103 = swift_slowAlloc(32, -1);
    v114[0] = v103;
    *(_DWORD *)v52 = 136315138;
    v102 = (uint64_t)(v52 + 4);
    swift_beginAccess(&v118, v112, 0, 0);
    v53 = (uint64_t)v118;
    v54 = v119;
    v55 = a3;
    v56 = v120;
    swift_retain(v119);
    swift_bridgeObjectRetain(v53);
    v58 = sub_1000A77FC(v57, v54, v56);
    v60 = v59;
    swift_release(v54);
    swift_bridgeObjectRelease(v53);
    v61 = v58;
    a3 = v55;
    v115 = sub_10002BA84(v61, v60, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v102, v52 + 12);
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "remove legacyLocationSubscriptions: %s", v52, 0xCu);
    v62 = v103;
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }

  v63 = v108;
  v17 = *(char **)(v37 + 16);
  if (!v17)
  {
LABEL_35:
    swift_bridgeObjectRelease(v118);
    return swift_release(v119);
  }
  v102 = type metadata accessor for Handle(0);
  v64 = *(_QWORD *)(v102 - 8);
  Priority = v37 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
  v101 = v64;
  v65 = *(_QWORD *)(v64 + 72);
  v100 = v37;
  swift_bridgeObjectRetain(v37);
  v103 = v65;
  while (1)
  {
    swift_beginAccess(&v118, v114, 32, 0);
    v66 = (uint64_t)v118;
    if (v118[2])
    {
      v67 = sub_10001CBC8(Priority);
      if ((v68 & 1) != 0)
        break;
    }
    swift_endAccess(v114);
LABEL_12:
    Priority += v65;
    if (!--v17)
    {
      swift_bridgeObjectRelease(v100);
      goto LABEL_35;
    }
  }
  v115 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67);
  v69 = v115;
  swift_endAccess(v114);
  swift_bridgeObjectRetain(v69);
  v70 = v106;
  sub_1000FF3C8(v107, v106);
  sub_1000087A0(v70, (uint64_t *)&unk_1002675F0);
  v71 = *(_QWORD *)(v115 + 16);
  swift_bridgeObjectRelease(v115);
  if (!v71)
  {
    swift_beginAccess(&v118, v114, 33, 0);
    v72 = (uint64_t)v118;
    swift_bridgeObjectRetain(v118);
    v73 = sub_10001CBC8(Priority);
    v75 = v74;
    swift_bridgeObjectRelease(v72);
    v76 = 0;
    if ((v75 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v118);
      v78 = (uint64_t)v118;
      v113 = v118;
      v118 = (_QWORD *)0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1000F6918();
        v78 = (uint64_t)v113;
      }
      (*(void (**)(unint64_t, uint64_t))(v101 + 8))(*(_QWORD *)(v78 + 48) + v73 * v65, v102);
      v79 = (uint64_t)v113;
      v76 = *(_QWORD *)(v113[7] + 8 * v73);
      sub_1000F4D8C(v73, (uint64_t)v113);
      v80 = (uint64_t)v118;
      v118 = (_QWORD *)v79;
      swift_bridgeObjectRelease(v80);
    }
    swift_endAccess(v114);
    swift_bridgeObjectRelease(v76);
  }
  v81 = v111;
  a2 = a3;
  v109(v111, a3, v63);
  v9 = (uint64_t)v118;
  a1 = v119;
  v15 = v120;
  v14 = v110;
  swift_beginAccess(v110, v114, 33, 0);
  swift_retain(a1);
  v82 = *v14;
  swift_bridgeObjectRetain(v9);
  a3 = swift_isUniquelyReferenced_nonNull_native(v82);
  v113 = (_QWORD *)*v14;
  v83 = (uint64_t)v113;
  *v14 = 0x8000000000000000;
  v13 = sub_10001BE14(v81);
  v85 = *(_QWORD *)(v83 + 16);
  v86 = (v84 & 1) == 0;
  v87 = v85 + v86;
  if (__OFADD__(v85, v86))
  {
    __break(1u);
    goto LABEL_38;
  }
  v88 = v84;
  if (*(_QWORD *)(v83 + 24) >= v87)
  {
    if ((a3 & 1) != 0)
    {
      v91 = v113;
      if ((v84 & 1) == 0)
        goto LABEL_30;
    }
    else
    {
      sub_1000F66C4();
      v91 = v113;
      if ((v88 & 1) == 0)
        goto LABEL_30;
    }
LABEL_28:
    v92 = (uint64_t *)(v91[7] + 24 * v13);
    v93 = v92[1];
    swift_bridgeObjectRelease(*v92);
    swift_release(v93);
    *v92 = v9;
    v92[1] = a1;
    v92[2] = v15;
    v63 = v108;
LABEL_32:
    v98 = *v110;
    *v110 = (uint64_t)v91;
    swift_bridgeObjectRelease(v98);
    v105(v111, v63);
    swift_endAccess(v114);
    a3 = a2;
    v65 = v103;
    goto LABEL_12;
  }
  sub_1000075A4(v87, a3);
  v89 = sub_10001BE14(v111);
  if ((v88 & 1) != (v90 & 1))
    goto LABEL_40;
  v13 = v89;
  v91 = v113;
  if ((v88 & 1) != 0)
    goto LABEL_28;
LABEL_30:
  v91[(v13 >> 6) + 8] |= 1 << v13;
  v63 = v108;
  v109(v91[6] + *(_QWORD *)(v104 + 72) * v13, v111, v108);
  v94 = (uint64_t *)(v91[7] + 24 * v13);
  *v94 = v9;
  v94[1] = a1;
  v94[2] = v15;
  v95 = v91[2];
  v96 = __OFADD__(v95, 1);
  v97 = v95 + 1;
  if (!v96)
  {
    v91[2] = v97;
    goto LABEL_32;
  }
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v108);
  __break(1u);
  return result;
}

uint64_t sub_10009CB6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[5] = v0;
  v2 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v5);
  v1[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_10009CC00, v0, 0);
}

uint64_t sub_10009CC00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;

  type metadata accessor for Transaction(0);
  v1 = static Transaction.currentNSXPCConnection.getter();
  v2 = v0[7];
  v3 = v0[8];
  v4 = v0[6];
  if (v1)
  {
    v5 = (void *)v1;
    NSXPCConnection.id.getter();

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[8] + 32))(v0[10], v0[6], v0[7]);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(v0[6], 1, 1, v0[7]);
  }
  v6 = v0[6];
  v7 = type metadata accessor for LocationService(0);
  v8 = sub_100004EA8(&qword_100261E08, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
  v9 = CustomStringConvertible<>.addressDescription.getter(v7, v8);
  v11 = v10;
  v12 = String.utf8Data.getter(v9);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  v0[2] = v12;
  v0[3] = v14;
  v15 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v15);
  sub_100037AB4(v12, v14);
  sub_1000087A0(v6, (uint64_t *)&unk_1002675F0);
LABEL_6:
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v16 = v0[9];
  v17 = v0[10];
  v18 = v0[7];
  v19 = v0[8];
  v20 = type metadata accessor for Logger(0);
  sub_100037A9C(v20, (uint64_t)qword_10027ABA8);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v17, v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v26 = v0[8];
  v25 = v0[9];
  v27 = v0[7];
  if (v24)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v38 = v29;
    *(_DWORD *)v28 = 136446210;
    v30 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v27, v30);
    v33 = v32;
    v0[4] = sub_10002BA84(v31, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v34(v25, v27);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "stopRefreshingLocation for all, clientID: %{public}s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v34(v0[9], v0[7]);
  }

  v0[11] = v34;
  v35 = sub_1000A53FC();
  v0[12] = v35;
  v36 = (_QWORD *)swift_task_alloc(dword_1002620DC);
  v0[13] = v36;
  *v36 = v0;
  v36[1] = sub_10009CF4C;
  return sub_1000B6B4C(v0[10], (uint64_t)v35);
}

uint64_t sub_10009CF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10009CFAC, v2, 0);
}

uint64_t sub_10009CFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(v0 + 88))(v1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 456);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10009D06C, v2, 0);
}

uint64_t sub_10009D06C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 416));
  v1(v2, v4);
  v1(v3, v4);
  v28 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v28);
}

uint64_t sub_10009D208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 136);
  v23 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_10009D398, 0, 0);
}

uint64_t sub_10009D398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v8;

  v2 = LocationRequest.toHandles.getter(a1);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease(v2);
  if (v3)
  {
    v4 = (int8x16_t *)swift_task_alloc(32);
    *(_QWORD *)(v1 + 40) = v4;
    v4[1] = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 48) = v5;
    v6 = sub_100037A5C(&qword_100261858);
    *v5 = v1;
    v5[1] = sub_10009D47C;
    return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v1 + 16), 0, 0, 0xD00000000000001BLL, 0x80000001001FDC90, sub_1000A1C90, v4, v6);
  }
  else
  {
    v8 = *(unint64_t **)(v1 + 16);
    *v8 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10009D47C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10009D4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v4 = sub_100037A5C(&qword_100261E48);
  v5 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v26, v4);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v10 + v18 + v17) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100251730, v19 + v6, v16 | v18 | 7);
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  v21 = v27;
  *((_QWORD *)v20 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v17], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v7, v25);
  swift_retain(v21);
  v22 = sub_10005582C((uint64_t)v14, (uint64_t)&unk_100261E58, (uint64_t)v20);
  return swift_release(v22);
}

uint64_t sub_10009D69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100261E48);
  v6[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[7] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[8] = v10;
  v6[9] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationRequest(0);
  v6[10] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[11] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v6[12] = v13;
  v6[13] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009D754, 0, 0);
}

uint64_t sub_10009D754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v18 = v1;
  v19 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v8, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v10 = *(unsigned __int8 *)(v2 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v20 + v12 + v11) & ~v12;
  v14 = swift_allocObject(&unk_100251758, v13 + v19, v10 | v12 | 7);
  *(_QWORD *)(v14 + 16) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v14 + v11, v18, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v4, v6);
  v15 = swift_retain(v9);
  UUID.init()(v15);
  v16 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v21, &unk_100261E68, v14, &unk_100261E70, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v4);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 24) = a3;
  v5 = (_QWORD *)swift_task_alloc(dword_10026062C);
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = sub_10009D934;
  return sub_1000099EC(a2);
}

uint64_t sub_10009D934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10009D990, 0, 0);
}

uint64_t sub_10009D990()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  v1 = sub_100037A5C(&qword_100261E48);
  CheckedContinuation.resume(returning:)(v0 + 16, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[4] = a1;
  return swift_task_switch(sub_10009DA00, 0, 0);
}

uint64_t sub_10009DA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = LocationRequest.toHandles.getter(a1);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease(v2);
  if (v3)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1002620AC);
    *(_QWORD *)(v1 + 56) = v4;
    *v4 = v1;
    v4[1] = sub_10009DA88;
    return sub_1000AE880(*(_QWORD *)(v1 + 40));
  }
  else
  {
    **(_QWORD **)(v1 + 32) = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10009DA88(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10009DB10;
  }
  else
  {
    *(_QWORD *)(v4 + 72) = a1;
    v6 = sub_10009DAFC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10009DAFC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Encrypted location refresh failed with %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    swift_errorRelease(v7);
  }

  v14 = *(_QWORD *)(v0 + 64);
  v15 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v14);
  **(_QWORD **)(v0 + 32) = v15;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DD10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Priority;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1[8] = v0;
  v2 = type metadata accessor for ClientOrigin(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RequestOrigin(0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_1002605D0);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v1[14] = Priority;
  v7 = *(_QWORD *)(Priority - 8);
  v1[15] = v7;
  v1[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationRequest(0);
  v1[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[18] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v10);
  v1[20] = swift_task_alloc(v10);
  v11 = type metadata accessor for Friend(0);
  v1[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[22] = v12;
  v1[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Handle(0);
  v1[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[25] = v14;
  v1[26] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009DE64, v0, 0);
}

uint64_t sub_10009DE64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  v0[27] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[7] = sub_10002BA84(0xD000000000000029, 0x80000001001FDC60, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[28] = v7;
  *v7 = v0;
  v7[1] = sub_10009E000;
  return daemon.getter();
}

uint64_t sub_10009E000(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 224);
  v5 = *v1;
  *(_QWORD *)(*v1 + 232) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 240) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10009E0E8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10009E0E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 240);
  v4[31] = a1;
  v4[32] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[8];
    v7 = sub_10009E93C;
  }
  else
  {
    swift_release(v4[29]);
    v7 = sub_10009E164;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10009E164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 264) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 272) = v7;
  *v7 = v0;
  v7[1] = sub_10009E234;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10009E234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10009E29C, v4, 0);
}

uint64_t sub_10009E29C()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t refreshed;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v56 = v0 + 48;
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 176);
    v59 = _swiftEmptyArrayStorage;
    sub_100018EBC(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v57 = *(_QWORD *)(v4 + 72);
    v6 = v4;
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 184);
      v10 = *(_QWORD *)(v0 + 168);
      v11 = v7(v9, v5, v10);
      Friend.handle.getter(v11);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_100018EBC(0, v8[2] + 1, 1);
        v8 = v59;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_100018EBC(v12 > 1, v13 + 1, 1);
        v8 = v59;
      }
      v14 = *(_QWORD *)(v0 + 208);
      v15 = *(_QWORD *)(v0 + 192);
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v14, v15);
      v59 = v8;
      v5 += v57;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    v8 = _swiftEmptyArrayStorage;
  }
  if (v8[2])
  {
    v16 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 128);
    v54 = *(_QWORD *)(v0 + 144);
    v55 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(v17, enum case for LocatePriority.backgroundProactive(_:), *(_QWORD *)(v0 + 112));
    refreshed = type metadata accessor for LegacyRefreshCommandReason(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 56))(v18, 1, 1, refreshed);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v20, enum case for ClientOrigin.other(_:), v22);
    RequestOrigin.init(_:)(v20);
    LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v17, v19, v8, v18, 1, 0);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v58, v16, v55);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 136);
    if (v27)
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (_QWORD *)swift_slowAlloc(32, -1);
      v59 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = sub_100004EA8(&qword_100260660, (uint64_t (*)(uint64_t))&type metadata accessor for LocationRequest, (uint64_t)&protocol conformance descriptor for LocationRequest);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      v36 = v35;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v34, v35, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v56, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v36);
      v37 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v37(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Location Service subscribeToBackgroundProactiveLocations: %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v37 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v37(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    }

    *(_QWORD *)(v0 + 288) = v37;
    v53 = (_QWORD *)swift_task_alloc(dword_100261DFC);
    *(_QWORD *)(v0 + 296) = v53;
    *v53 = v0;
    v53[1] = sub_10009E808;
    return sub_10001593C(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v38 = swift_bridgeObjectRelease(v8);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (_QWORD *)swift_slowAlloc(32, -1);
      v59 = v42;
      *(_DWORD *)v41 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000029, 0x80000001001FDC60, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v0 + 56, v41 + 4, v41 + 12);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to %{public}s with empty followings", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }

    v43 = *(_QWORD *)(v0 + 248);
    v44 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v43);
    v45 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 152);
    v46 = *(_QWORD *)(v0 + 160);
    v48 = *(_QWORD *)(v0 + 128);
    v50 = *(_QWORD *)(v0 + 96);
    v49 = *(_QWORD *)(v0 + 104);
    v51 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v44);
  }
}

uint64_t sub_10009E808(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(*v2 + 304) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 64);
  if (v1)
  {
    v7 = sub_10009E9E0;
  }
  else
  {
    *(_QWORD *)(v4 + 312) = a1;
    v7 = sub_10009E87C;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10009E87C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 248));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_10009E93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009E9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 304);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 304);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v27 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000029, 0x80000001001FDC60, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s failed with %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 304);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  v13 = *(_QWORD *)(v0 + 304);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_release(v15);
  swift_errorRelease(v13);
  v14(v16, v17);
  v19 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v18);
}

uint64_t sub_10009EC5C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = *v1;
  v3 = type metadata accessor for Handle(0);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v5);
  v2[18] = swift_task_alloc(v5);
  v6 = type metadata accessor for Friend(0);
  v2[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[20] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v8);
  v2[22] = swift_task_alloc(v8);
  v2[23] = swift_task_alloc(v8);
  v2[24] = swift_task_alloc(v8);
  v2[25] = swift_task_alloc(v8);
  return swift_task_switch(sub_10009ED30, v1, 0);
}

uint64_t sub_10009ED30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[12];
  v2 = type metadata accessor for Logger(0);
  v0[26] = sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[12];
    v7 = swift_slowAlloc(32, -1);
    v14 = swift_slowAlloc(64, -1);
    v15 = v14;
    *(_DWORD *)v7 = 136446723;
    v0[9] = sub_10002BA84(0xD000000000000015, 0x80000001001FDC40, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2160;
    v0[10] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2081;
    v8 = swift_bridgeObjectRetain(v6);
    v9 = Array.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(v6);
    v0[11] = sub_10002BA84(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s handles: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[12], 2);
  }

  v12 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[27] = v12;
  *v12 = v0;
  v12[1] = sub_10009EF98;
  return daemon.getter();
}

uint64_t sub_10009EF98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 216);
  v5 = *v1;
  *(_QWORD *)(*v1 + 224) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 232) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10009F080;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10009F080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v4[30] = a1;
  v4[31] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[13];
    v7 = sub_10009FD1C;
  }
  else
  {
    swift_release(v4[28]);
    v7 = sub_10009F0FC;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10009F0FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 256) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 264) = v7;
  *v7 = v0;
  v7[1] = sub_10009F1CC;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10009F1CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10009F234, v4, 0);
}

void sub_10009F234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t (*v88)(uint64_t, char *, uint64_t);
  uint64_t v89;
  uint64_t v90[14];

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(v1);
  v3 = sub_10001A4E4(v2, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  v4 = v3[2];
  if (v4)
  {
    v78 = v0 + 32;
    v79 = v0 + 40;
    v80 = v0 + 48;
    v81 = v0 + 56;
    v5 = *(_QWORD *)(v0 + 160);
    v6 = (char *)_swiftEmptyArrayStorage;
    v90[0] = (uint64_t)_swiftEmptyArrayStorage;
    v7 = swift_bridgeObjectRetain(v3);
    v8 = 0;
    v83 = v4;
    v84 = v3;
    do
    {
      if (v8 >= v3[2])
      {
        __break(1u);
        goto LABEL_48;
      }
      v9 = *(_QWORD *)(v5 + 72);
      v87 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v88 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 16);
      v10 = ((uint64_t (*)(_QWORD, char *, _QWORD, __n128))v88)(*(_QWORD *)(v0 + 200), (char *)v3 + v87 + v9 * v8, *(_QWORD *)(v0 + 152), v7);
      if ((Friend.isSecureLocationCapable.getter(v10) & 1) != 0)
      {
        v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        v11(*(char **)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v6 + 2) + 1, 1);
          v6 = (char *)v90[0];
        }
        v13 = *((_QWORD *)v6 + 2);
        v12 = *((_QWORD *)v6 + 3);
        if (v13 >= v12 >> 1)
        {
          sub_1000303C0(v12 > 1, v13 + 1, 1);
          v6 = (char *)v90[0];
        }
        v14 = *(_QWORD *)(v0 + 192);
        v15 = *(_QWORD *)(v0 + 152);
        *((_QWORD *)v6 + 2) = v13 + 1;
        v11(&v6[v87 + v13 * v9], v14, v15);
        v90[0] = (uint64_t)v6;
        v4 = v83;
        v3 = v84;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v5 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
      }
      ++v8;
    }
    while (v4 != v8);
    swift_bridgeObjectRelease(v3);
    v16 = *((_QWORD *)v6 + 2);
    if (v16)
    {
      v85 = v9;
      v17 = *(_QWORD *)(v0 + 128);
      v90[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100018EBC(0, v16, 0);
      v18 = &v6[v87];
      v19 = _swiftEmptyArrayStorage;
      do
      {
        v20 = *(_QWORD *)(v0 + 184);
        v21 = *(_QWORD *)(v0 + 152);
        v22 = v88(v20, v18, v21);
        Friend.handle.getter(v22);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v20, v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_100018EBC(0, v19[2] + 1, 1);
          v19 = (_QWORD *)v90[0];
        }
        v24 = v19[2];
        v23 = v19[3];
        if (v24 >= v23 >> 1)
        {
          sub_100018EBC(v23 > 1, v24 + 1, 1);
          v19 = (_QWORD *)v90[0];
        }
        v25 = *(_QWORD *)(v0 + 144);
        v26 = *(_QWORD *)(v0 + 120);
        v19[2] = v24 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v24, v25, v26);
        v90[0] = (uint64_t)v19;
        v18 += v85;
        --v16;
      }
      while (v16);
      swift_release(v6);
      v3 = v84;
      v9 = v85;
      v4 = v83;
    }
    else
    {
      swift_release(v6);
      v19 = _swiftEmptyArrayStorage;
    }
    v40 = 0;
    *(_QWORD *)(v0 + 280) = v19;
    v41 = (char *)_swiftEmptyArrayStorage;
    v90[0] = (uint64_t)_swiftEmptyArrayStorage;
    v42 = (char *)v3 + v87;
    v82 = v19;
    while (v40 < v3[2])
    {
      v43 = v88(*(_QWORD *)(v0 + 176), v42, *(_QWORD *)(v0 + 152));
      if ((Friend.isLegacyLocationCapable.getter(v43) & 1) != 0)
      {
        v44 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        v44(*(char **)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v41 + 2) + 1, 1);
          v41 = (char *)v90[0];
        }
        v46 = *((_QWORD *)v41 + 2);
        v45 = *((_QWORD *)v41 + 3);
        if (v46 >= v45 >> 1)
        {
          sub_1000303C0(v45 > 1, v46 + 1, 1);
          v41 = (char *)v90[0];
        }
        v47 = *(_QWORD *)(v0 + 168);
        v48 = *(_QWORD *)(v0 + 152);
        *((_QWORD *)v41 + 2) = v46 + 1;
        v44(&v41[v87 + v46 * v9], v47, v48);
        v90[0] = (uint64_t)v41;
        v19 = v82;
        v4 = v83;
        v3 = v84;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v5 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
      }
      ++v40;
      v42 += v9;
      if (v4 == v40)
      {
        swift_bridgeObjectRelease(v3);
        v49 = *((_QWORD *)v41 + 2);
        if (v49)
        {
          v86 = v9;
          v50 = *(_QWORD *)(v0 + 128);
          v90[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_100018EBC(0, v49, 0);
          v51 = &v41[v87];
          v52 = _swiftEmptyArrayStorage;
          do
          {
            v53 = *(_QWORD *)(v0 + 184);
            v54 = *(_QWORD *)(v0 + 152);
            v55 = v88(v53, v51, v54);
            Friend.handle.getter(v55);
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v53, v54);
            if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
            {
              sub_100018EBC(0, v52[2] + 1, 1);
              v52 = (_QWORD *)v90[0];
            }
            v57 = v52[2];
            v56 = v52[3];
            if (v57 >= v56 >> 1)
            {
              sub_100018EBC(v56 > 1, v57 + 1, 1);
              v52 = (_QWORD *)v90[0];
            }
            v58 = *(_QWORD *)(v0 + 136);
            v59 = *(_QWORD *)(v0 + 120);
            v52[2] = v57 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v50 + 32))((unint64_t)v52+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v57, v58, v59);
            v90[0] = (uint64_t)v52;
            v51 += v86;
            --v49;
          }
          while (v49);
          swift_release(v41);
          v19 = v82;
        }
        else
        {
          swift_release(v41);
          v52 = _swiftEmptyArrayStorage;
        }
        *(_QWORD *)(v0 + 288) = v52;
        swift_bridgeObjectRetain_n(v52, 2);
        v60 = swift_bridgeObjectRetain_n(v19, 2);
        v61 = Logger.logObject.getter(v60);
        v62 = static os_log_type_t.default.getter(v61);
        if (os_log_type_enabled(v61, v62))
        {
          v63 = swift_slowAlloc(52, -1);
          v89 = swift_slowAlloc(96, -1);
          v90[0] = v89;
          *(_DWORD *)v63 = 136447235;
          *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000015, 0x80000001001FDC40, v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v78, v63 + 4, v63 + 12);
          *(_WORD *)(v63 + 12) = 2160;
          *(_QWORD *)(v0 + 32) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v79, v63 + 14, v63 + 22);
          *(_WORD *)(v63 + 22) = 2081;
          v64 = swift_bridgeObjectRetain(v52);
          v65 = Array.description.getter(v64);
          v67 = v66;
          swift_bridgeObjectRelease(v52);
          *(_QWORD *)(v0 + 40) = sub_10002BA84(v65, v67, v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v80, v63 + 24, v63 + 32);
          swift_bridgeObjectRelease(v67);
          swift_bridgeObjectRelease_n(v52, 2);
          *(_WORD *)(v63 + 32) = 2160;
          *(_QWORD *)(v0 + 48) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v81, v63 + 34, v63 + 42);
          *(_WORD *)(v63 + 42) = 2081;
          v68 = swift_bridgeObjectRetain(v82);
          v69 = Array.description.getter(v68);
          v71 = v70;
          swift_bridgeObjectRelease(v82);
          *(_QWORD *)(v0 + 56) = sub_10002BA84(v69, v71, v90);
          v19 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v81, v0 + 64, v63 + 44, v63 + 52);
          swift_bridgeObjectRelease(v71);
          swift_bridgeObjectRelease_n(v82, 2);
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}s\nlegacy location handles: %{private,mask.hash}s\nsecure location request: %{private,mask.hash}s", (uint8_t *)v63, 0x34u);
          swift_arrayDestroy(v89, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v89, -1, -1);
          swift_slowDealloc(v63, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v52, 2);
          swift_bridgeObjectRelease_n(v19, 2);
        }

        v72 = *(_QWORD *)(v0 + 104);
        v73 = *(_QWORD *)(v0 + 112);
        v74 = sub_100037A5C(&qword_100261858);
        v75 = sub_100004EA8(&qword_100260638, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
        v76 = (_QWORD *)swift_task_alloc(48);
        *(_QWORD *)(v0 + 296) = v76;
        v76[2] = v52;
        v76[3] = v72;
        v76[4] = v19;
        v76[5] = v73;
        v77 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
        *(_QWORD *)(v0 + 304) = v77;
        *v77 = v0;
        v77[1] = sub_10009FC08;
        v90[12] = v74;
        withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v74, v74, v72, v75, &unk_100261DA0, v76, v74);
        return;
      }
    }
LABEL_48:
    __break(1u);
  }
  else
  {
    v27 = swift_bridgeObjectRelease(v3);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v90[0] = v31;
      *(_DWORD *)v30 = 136446210;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000015, 0x80000001001FDC40, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v30 + 4, v30 + 12);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s no valid friend currently sharing locations with me yet", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

    v32 = *(_QWORD *)(v0 + 240);
    v33 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v32);
    v34 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    (*(void (**)(unint64_t))(v0 + 8))(v33);
  }
}

uint64_t sub_10009FC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 288);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10009FC84, v4, 0);
}

uint64_t sub_10009FC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 240));
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10009FD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009FDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v8 = sub_100037A5C(&qword_100261DA8);
  v6[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[11] = v9;
  v6[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C((uint64_t *)&unk_100265180);
  v6[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009FE44, a4, 0);
}

uint64_t sub_10009FE44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[13];
  v3 = v0[8];
  v2 = v0[9];
  v5 = v0[6];
  v4 = v0[7];
  v6 = (uint64_t *)v0[5];
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v1, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_100251668, 56, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v5;
  v9[5] = v4;
  v9[6] = v2;
  swift_bridgeObjectRetain(v5);
  swift_retain(v4);
  sub_10009B170(v1, (uint64_t)&unk_100261DB8, (uint64_t)v9);
  sub_1000087A0(v1, (uint64_t *)&unk_100265180);
  v8(v1, 1, 1, v7);
  v10 = (_QWORD *)swift_allocObject(&unk_100251690, 56, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v10[5] = v4;
  v10[6] = v2;
  swift_retain(v4);
  swift_bridgeObjectRetain(v3);
  sub_10009B170(v1, (uint64_t)&unk_100261DC8, (uint64_t)v10);
  sub_1000087A0(v1, (uint64_t *)&unk_100265180);
  v11 = *v6;
  v12 = sub_100037A5C(&qword_100261858);
  TaskGroup.makeAsyncIterator()(v11, v12);
  v13 = sub_100004EA8(&qword_100260638, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v0[15] = 0;
  v0[16] = _swiftEmptyDictionarySingleton;
  v0[14] = v13;
  v14 = v0[7];
  v15 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  v0[17] = v15;
  *v15 = v0;
  v15[1] = sub_1000A001C;
  return TaskGroup.Iterator.next(isolation:)(v0 + 2, v14, v13, v0[10]);
}

uint64_t sub_1000A001C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1000A0074, v1, 0);
}

uint64_t sub_1000A0074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 120);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 128));
    *(_QWORD *)(v0 + 24) = v2;
    sub_10000FC08(v1, (uint64_t)sub_1000A1314, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)(v0 + 24));
    if (v3)
    {
      return swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 24);
      swift_bridgeObjectRelease(0x8000000000000000);
      *(_QWORD *)(v0 + 120) = 0;
      *(_QWORD *)(v0 + 128) = v9;
      v10 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 56);
      v12 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 136) = v12;
      *v12 = v0;
      v12[1] = sub_1000A001C;
      return TaskGroup.Iterator.next(isolation:)(v0 + 16, v11, v10, *(_QWORD *)(v0 + 80));
    }
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD **)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v7, *(_QWORD *)(v0 + 80));
    *v8 = v2;
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000A01B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[4] = a1;
  v6 = type metadata accessor for Handle(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v8);
  v5[10] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002605C8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v9);
  v5[12] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A025C, 0, 0);
}

uint64_t sub_1000A025C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_1002605C4);
    *(_QWORD *)(v0 + 104) = v1;
    *v1 = v0;
    v1[1] = sub_1000A0310;
    return sub_100051228(*(_QWORD *)(v0 + 40));
  }
  else
  {
    v3 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    v5 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    **(_QWORD **)(v0 + 32) = v3;
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000A0310(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A0840;
  else
    v5 = sub_1000A037C;
  return swift_task_switch(v5, 0, 0);
}

void sub_1000A037C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  v47 = v1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 64);
  v48 = (unint64_t)(63 - v4) >> 6;
  v49 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(v1);
  v52 = 0;
  v6 = &qword_1002605E8;
  v51 = v2;
  while (1)
  {
    if (v5)
    {
      v53 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v52 << 6);
LABEL_8:
      v12 = *(_QWORD *)(v0 + 88);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(v2 + 16))(v12, *(_QWORD *)(v49 + 48) + *(_QWORD *)(v2 + 72) * v11, *(_QWORD *)(v0 + 56));
      v13 = *(_QWORD *)(v49 + 56);
      v14 = type metadata accessor for Location(0);
      v15 = *(_QWORD *)(v14 - 8);
      v16 = v13 + *(_QWORD *)(v15 + 72) * v11;
      v17 = sub_100037A5C(v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v12 + *(int *)(v17 + 48), v16, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 0, 1, v17);
      goto LABEL_27;
    }
    v18 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 < v48)
    {
      v19 = *(_QWORD *)(v47 + 8 * v18);
      if (v19)
        goto LABEL_12;
      v20 = v52 + 2;
      ++v52;
      if (v18 + 1 < v48)
      {
        v19 = *(_QWORD *)(v47 + 8 * v20);
        if (v19)
          goto LABEL_15;
        v52 = v18 + 1;
        if (v18 + 2 < v48)
        {
          v19 = *(_QWORD *)(v47 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_12;
          }
          v20 = v18 + 3;
          v52 = v18 + 2;
          if (v18 + 3 < v48)
            break;
        }
      }
    }
LABEL_26:
    v21 = *(_QWORD *)(v0 + 88);
    v22 = sub_100037A5C(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    v53 = 0;
LABEL_27:
    v23 = *(_QWORD *)(v0 + 96);
    sub_10000EF6C(*(_QWORD *)(v0 + 88), v23, &qword_1002605C8);
    v24 = v6;
    v25 = sub_100037A5C(v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v23, 1, v25) == 1)
    {
      swift_release(*(_QWORD *)(v0 + 112));
      v44 = *(_QWORD *)(v0 + 88);
      v43 = *(_QWORD *)(v0 + 96);
      v46 = *(_QWORD *)(v0 + 72);
      v45 = *(_QWORD *)(v0 + 80);
      **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 112);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v27 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 56);
    v29 = type metadata accessor for Logger(0);
    sub_100037A9C(v29, (uint64_t)qword_10027ABA8);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v27, v26, v28);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 72);
    v35 = *(_QWORD *)(v0 + 80);
    v36 = *(_QWORD *)(v0 + 56);
    if (v33)
    {
      v37 = swift_slowAlloc(22, -1);
      v50 = v35;
      v38 = swift_slowAlloc(32, -1);
      v54 = v38;
      *(_DWORD *)v37 = 141558275;
      *(_QWORD *)(v37 + 4) = 1752392040;
      *(_WORD *)(v37 + 12) = 2081;
      v39 = Handle.identifier.getter(v38);
      v41 = v40;
      *(_QWORD *)(v37 + 14) = sub_10002BA84(v39, v40, &v54);
      swift_bridgeObjectRelease(v41);
      v7 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v7(v34, v36);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Get legacy latest location for handle: %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      v42 = v37;
      v2 = v51;
      swift_slowDealloc(v42, -1, -1);

      v8 = v50;
    }
    else
    {

      v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v7(v34, v36);
      v8 = v35;
    }
    v7(v8, v36);
    v9 = *(_QWORD *)(v0 + 96) + *(int *)(v25 + 48);
    v10 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v6 = v24;
    v5 = v53;
  }
  v19 = *(_QWORD *)(v47 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v18 = v20;
LABEL_12:
    v52 = v18;
    v53 = (v19 - 1) & v19;
    v11 = __clz(__rbit64(v19)) + (v18 << 6);
    goto LABEL_8;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v48)
    {
      v52 = v48 - 1;
      goto LABEL_26;
    }
    v19 = *(_QWORD *)(v47 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_12;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_1000A0840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Legacy location refresh failed with %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_errorRelease(v7);
  }

  v14 = *(_QWORD *)(v0 + 120);
  v15 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v14);
  v17 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  **(_QWORD **)(v0 + 32) = v15;
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A0A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  return swift_task_switch(sub_1000A0A80, 0, 0);
}

uint64_t sub_1000A0A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 104) = sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = swift_slowAlloc(32, -1);
    v9 = swift_slowAlloc(64, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446723;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000015, 0x80000001001FDC40, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    type metadata accessor for Handle(0);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 72) = sub_10002BA84(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s subscribing shallow locations\nfor: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 88), 2);
  }

  if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
  {
    v14 = (_QWORD *)swift_task_alloc(dword_1002620B4);
    *(_QWORD *)(v0 + 112) = v14;
    *v14 = v0;
    v14[1] = sub_1000A0D30;
    return sub_1000AF76C(*(_QWORD *)(v0 + 88));
  }
  else
  {
    **(_QWORD **)(v0 + 80) = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000A0D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A0F9C;
  else
    v5 = sub_1000A0D9C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A0D9C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 120), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 120);
    v5 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v12 = v11;
    *(_QWORD *)(v0 + 40) = 1752392040;
    *(_DWORD *)v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    type metadata accessor for Handle(0);
    type metadata accessor for Location(0);
    sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v6 = swift_bridgeObjectRetain(v4);
    v7 = Dictionary.description.getter(v6);
    v9 = v8;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v7, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Encrypted latest location: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);
  }

  **(_QWORD **)(v0 + 80) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A0F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 128);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000015, 0x80000001001FDC40, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s failed with %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  v13 = *(_QWORD *)(v0 + 128);
  v14 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v13);
  **(_QWORD **)(v0 + 80) = v14;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A1198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100261E94);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000087DC;
  return sub_10009B31C(a1, a2);
}

uint64_t sub_1000A11F4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100261E8C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_10009CB6C();
}

uint64_t sub_1000A1238(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1002620C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10006F708;
  return sub_1000B35C4(a1);
}

uint64_t sub_1000A1284()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100261DF4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10006F708;
  return sub_10009DD10();
}

uint64_t sub_1000A12C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100261D94);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10006F708;
  return sub_10009EC5C(a1);
}

uint64_t sub_1000A1314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(sub_100037A5C(&qword_1002605E8) + 48);
  v5 = a2 + *(int *)(sub_100037A5C(&qword_100261DD0) + 48);
  v6 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  v7 = type metadata accessor for Location(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v4, v7);
}

uint64_t sub_1000A13A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_100037A5C(&qword_1002605E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_1002605C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  v14 = *v1;
  v15 = v1[1];
  v16 = v1[2];
  v17 = v1[3];
  v18 = v1[4];
  v37 = v6;
  v40 = v16;
  if (v18)
  {
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v18 - 1) & v18;
    v22 = __clz(__rbit64(v18)) | (v17 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v14 + 48);
    v24 = type metadata accessor for Handle(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v13, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v24);
    v25 = *(_QWORD *)(v14 + 56);
    v26 = type metadata accessor for Location(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(&v13[*(int *)(v3 + 48)], v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, v26);
    v27 = 0;
    a1 = v20;
    v4 = v19;
    v10 = v38;
    v15 = v39;
    goto LABEL_4;
  }
  v32 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    return result;
  }
  v33 = (unint64_t)(v16 + 64) >> 6;
  if (v32 >= v33)
  {
    v21 = 0;
    v27 = 1;
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(v15 + 8 * v32);
  if (v34)
  {
LABEL_11:
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v34 - 1) & v34;
    v22 = __clz(__rbit64(v34)) + (v32 << 6);
    v17 = v32;
    goto LABEL_3;
  }
  v35 = v17 + 2;
  if (v17 + 2 >= v33)
    goto LABEL_27;
  v34 = *(_QWORD *)(v15 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v32 = v35;
    goto LABEL_11;
  }
  if (v17 + 3 >= v33)
    goto LABEL_28;
  v34 = *(_QWORD *)(v15 + 8 * (v17 + 3));
  if (v34)
  {
    v32 = v17 + 3;
    goto LABEL_11;
  }
  v35 = v17 + 4;
  if (v17 + 4 < v33)
  {
    v34 = *(_QWORD *)(v15 + 8 * v35);
    if (v34)
      goto LABEL_15;
    v32 = v17 + 5;
    if (v17 + 5 < v33)
    {
      v34 = *(_QWORD *)(v15 + 8 * v32);
      if (v34)
        goto LABEL_11;
      v32 = v33 - 1;
      v36 = v17 + 6;
      while (v33 != v36)
      {
        v34 = *(_QWORD *)(v15 + 8 * v36++);
        if (v34)
        {
          v32 = v36 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v21 = 0;
      v27 = 1;
      v17 = v32;
      goto LABEL_4;
    }
LABEL_28:
    v21 = 0;
    v27 = 1;
    v17 = v35;
    goto LABEL_4;
  }
  v21 = 0;
  v27 = 1;
  v17 += 3;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v27, 1, v3);
  *v1 = v14;
  v1[1] = v15;
  v1[2] = v40;
  v1[3] = v17;
  v1[4] = v21;
  v28 = (void (*)(uint64_t))v1[5];
  sub_10000EF6C((uint64_t)v13, (uint64_t)v10, &qword_1002605C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v29 = sub_100037A5C(&qword_100261DD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 1, 1, v29);
  }
  else
  {
    v30 = (uint64_t)v37;
    sub_10000EF6C((uint64_t)v10, (uint64_t)v37, &qword_1002605E8);
    v28(v30);
    sub_1000087A0(v30, &qword_1002605E8);
    v31 = sub_100037A5C(&qword_100261DD0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a1, 0, 1, v31);
  }
}

uint64_t sub_1000A16F4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_1000A175C;
  return v5(v2 + 16);
}

uint64_t sub_1000A175C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000A17AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100261D9C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_10009FDB0(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1000A1830(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100261DB4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003BF7C;
  return sub_1000A01B4(a1, v4, v5, v6, v7);
}

uint64_t sub_1000A18B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_100261DC4);
  v5 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_OWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch(sub_1000A0A80, 0, 0);
}

uint64_t sub_1000A191C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A1940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261DE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100261DE0 + dword_100261DE0))(a1, v4);
}

uint64_t sub_1000A19B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100261E14);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_10000D460(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1000A1A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000A1AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for LocationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_100261E2C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003BF7C;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_10009D398, 0, 0);
}

uint64_t sub_1000A1B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000A1BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for LocationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_100261E3C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000087DC;
  v8[5] = v6;
  v8[6] = v7;
  v8[4] = a1;
  return swift_task_switch(sub_10009DA00, 0, 0);
}

uint64_t sub_1000A1C90(uint64_t a1)
{
  uint64_t v1;

  return sub_10009D4CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000A1C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100037A5C(&qword_100261E48);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1000A1D60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for LocationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100261E48) - 8) + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = (_QWORD *)swift_task_alloc(dword_100261E54);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_10009D69C(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1000A1E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100037A5C(&qword_100261E48);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1000A1EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for LocationRequest(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100261E48) - 8) + 80);
  v6 = v0 + v3;
  v7 = v0 + ((v4 + v5) & ~v5);
  v8 = (_QWORD *)swift_task_alloc(dword_100261E64);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1000087DC;
  v8[3] = v7;
  v9 = (_QWORD *)swift_task_alloc(dword_10026062C);
  v8[4] = v9;
  *v9 = v8;
  v9[1] = sub_10009D934;
  return sub_1000099EC(v6);
}

uint64_t sub_1000A1FA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v14(v11, v13, v2);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v11, 0, 1, v2);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100164FF0((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v18;
      if (!--v12)
        return v15(v11, 1, 1, v2);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    return v15(v11, 1, 1, v2);
  }
  return result;
}

uint64_t sub_1000A2134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[3] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[4] = v2;
  v0[5] = v3;
  return swift_task_switch(sub_1000A219C, v2, v3);
}

uint64_t sub_1000A219C()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 48) = type metadata accessor for Daemon(0);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Daemon.__allocating_init(identifier:profile:registerAlarmEvent:services:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1000A223C;
  return Daemon.__allocating_init(identifier:profile:registerAlarmEvent:services:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x6F6C796D646E6966, 0xED00006465746163, 1, &unk_100261EB0, 0);
}

uint64_t sub_1000A223C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v5 = *(_QWORD **)v2;
  v5[8] = a1;
  v5[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000A239C, v5[4], v5[5]);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.run()[1]);
  v5[10] = v7;
  v8 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  *v7 = v5;
  v7[1] = sub_1000A2300;
  return ActorServiceDaemon.run()(v5[6], v8);
}

uint64_t sub_1000A2300()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000A2580;
  else
    v4 = sub_1000A2360;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000A2360()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A239C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error creating Daemon instance: %@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001001FDCE0, "findmylocated/DaemonEntryPoint.swift", 36, 2, 24, 0);
}

uint64_t sub_1000A2580()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(v0[8]);
  v1 = v0[11];
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    v0[2] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error creating Daemon instance: %@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001001FDCE0, "findmylocated/DaemonEntryPoint.swift", 36, 2, 24, 0);
}

uint64_t sub_1000A276C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_100261EB8 + dword_100261EB8);
  v1 = (_QWORD *)swift_task_alloc(unk_100261EBC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000A4218;
  return v3();
}

uint64_t sub_1000A27C4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AB78);
  sub_100037A9C(v0, (uint64_t)qword_10027AB78);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 95, 0xE100000000000000);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t MainExecutor;
  uint64_t v5;
  uint64_t v6;
  int result;

  v3 = swift_task_create(2048, 0, (char *)&type metadata for () + 8, &unk_100261E98, 0);
  MainExecutor = swift_task_getMainExecutor();
  v6 = swift_job_run(v3, MainExecutor, v5);
  result = swift_task_asyncMainDrainQueue(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000A2884()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[2] = type metadata accessor for MainActor(0);
  v0[3] = static MainActor.shared.getter();
  v1 = (_QWORD *)swift_task_alloc(dword_100261EA4);
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_1000A28E0;
  return sub_1000A2134();
}

uint64_t sub_1000A28E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000A2950, v2, v3);
}

void sub_1000A2950()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  exit(0);
}

uint64_t sub_1000A2974()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  v1 = (_QWORD *)swift_task_alloc(dword_100261EAC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003D330;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100261EB8 + dword_100261EB8);
  v2 = (_QWORD *)swift_task_alloc(unk_100261EBC);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1000A4218;
  return v4();
}

uint64_t sub_1000A29EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ServerInteractionController(0);
  v21 = &protocol witness table for ServerInteractionController;
  *(_QWORD *)&v19 = a3;
  swift_defaultActor_initialize(a4);
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_BYTE *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 144) = 0x616E614D61746144;
  *(_QWORD *)(a4 + 152) = 0xEB00000000726567;
  v11 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v11);
  *(_QWORD *)(a4 + 160) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000015, 0x80000001001FDE10, v10);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  *(_QWORD *)(a4 + 184) = _swiftEmptyArrayStorage;
  v12 = a4 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  v13 = sub_100037A5C(&qword_100261F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp) = 0;
  *(_OWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken) = xmmword_1001F48A0;
  v14 = a4 + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  v15 = type metadata accessor for DataManager.State(0);
  swift_storeEnumTagMultiPayload(v14, v15, 5);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_handlesSharingLocation) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles) = _swiftEmptyDictionarySingleton;
  v16 = *(_QWORD *)(a4 + 168);
  *(_QWORD *)(a4 + 168) = a1;
  *(_QWORD *)(a4 + 176) = a2;
  swift_unknownObjectRelease(v16);
  sub_10001A4CC(&v19, a4 + OBJC_IVAR____TtC13findmylocated11DataManager_sic);
  return a4;
}

uint64_t sub_1000A2BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 32) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for CloudStorageService();
  swift_allocObject(v2, 144, 15);
  v3 = (_QWORD *)swift_task_alloc(dword_10026783C);
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = sub_1000A2C68;
  return sub_1001D8C6C();
}

uint64_t sub_1000A2C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A3D4C;
  else
    v5 = sub_1000A2CD4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A2CD4()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = sub_100161358(0, 1, 1, _swiftEmptyArrayStorage);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  v4 = v0[6];
  v5 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v0[8] = v1;
  v7 = type metadata accessor for LocalStorageService();
  swift_allocObject(v7, 168, 15);
  v8 = (_QWORD *)swift_task_alloc(dword_100260A94);
  v0[9] = v8;
  *v8 = v0;
  v8[1] = sub_1000A2DB4;
  return sub_100055B9C();
}

uint64_t sub_1000A2DB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 72);
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A3F38;
  else
    v5 = sub_1000A2E20;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A2E20()
{
  _QWORD *v0;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t Unlock;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0[8]);
  v2 = (_QWORD *)v0[8];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_100161358(0, v2[2] + 1, 1, (_QWORD *)v0[8]);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_100161358((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v5 = v0[10];
  v6 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  v2[2] = v4 + 1;
  v7 = &v2[2 * v4];
  v7[4] = v5;
  v7[5] = v6;
  type metadata accessor for FirstUnlockService(0);
  Unlock = FirstUnlockService.__allocating_init()();
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100161358(0, v2[2] + 1, 1, v2);
  v10 = v2[2];
  v9 = v2[3];
  if (v10 >= v9 >> 1)
    v2 = sub_100161358((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
  v0[12] = v2;
  v11 = sub_100004EA8(&qword_100260A88, (uint64_t (*)(uint64_t))&type metadata accessor for FirstUnlockService, (uint64_t)&protocol conformance descriptor for FirstUnlockService);
  v2[2] = v10 + 1;
  v12 = &v2[2 * v10];
  v12[4] = Unlock;
  v12[5] = v11;
  v13 = type metadata accessor for IDSTransportServiceFMF();
  v14 = (_QWORD *)swift_allocObject(v13, 160, 15);
  v0[13] = v14;
  swift_defaultActor_initialize(v14);
  v14[14] = 0xD000000000000016;
  v14[15] = 0x80000001001FDD00;
  v14[18] = _swiftEmptyDictionarySingleton;
  v14[19] = _swiftEmptyDictionarySingleton;
  sub_100037A5C(&qword_1002600E0);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.__allocating_init(serviceName:crossAccount:)[1]);
  v0[14] = v15;
  *v15 = v0;
  v15[1] = sub_1000A300C;
  return InternetMessaging.__allocating_init(serviceName:crossAccount:)(0xD00000000000001BLL, 0x80000001001FDD20, 1);
}

uint64_t sub_1000A300C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 112));
  *(_QWORD *)(v3 + 128) = a1;
  type metadata accessor for QueryController(0);
  *(_QWORD *)(v3 + 136) = QueryController.__allocating_init(serviceName:)(0xD00000000000001BLL, 0x80000001001FDD20);
  return swift_task_switch(sub_1000A3094, 0, 0);
}

uint64_t sub_1000A3094()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_QWORD *)v0[12];
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, (_QWORD *)v0[12]);
  v0[15] = v1;
  v4 = v0[13];
  v5 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v7 = type metadata accessor for LocalMessagingService();
  v8 = (_QWORD *)swift_allocObject(v7, 152, 15);
  v0[16] = v8;
  swift_defaultActor_initialize(v8);
  v8[14] = 0xD000000000000015;
  v8[15] = 0x80000001001FDD40;
  v8[17] = _swiftEmptyDictionarySingleton;
  v8[18] = _swiftEmptyDictionarySingleton;
  sub_100037A5C(&qword_100261EC0);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to LocalMessaging.__allocating_init(serviceName:)[1]);
  v0[17] = v9;
  *v9 = v0;
  v9[1] = sub_1000A31B8;
  return LocalMessaging.__allocating_init(serviceName:)(0xD000000000000021, 0x80000001001FDD60);
}

uint64_t sub_1000A31B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 136));
  *(_QWORD *)(v3 + 128) = a1;
  return swift_task_switch(sub_1000A3214, 0, 0);
}

uint64_t sub_1000A3214()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Priority;
  uint64_t v14;
  uint64_t v15;
  uint64_t refreshed;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = (_QWORD *)v0[15];
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, (_QWORD *)v0[15]);
  v4 = v0[16];
  v5 = v0[4];
  v6 = sub_100004EA8(&qword_100261EC8, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  v1[2] = v3 + 1;
  v7 = &v1[2 * v3];
  v7[4] = v4;
  v7[5] = v6;
  v8 = type metadata accessor for CommandManager(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = swift_defaultActor_initialize(v9);
  strcpy((char *)(v9 + 112), "CommandManager");
  *(_BYTE *)(v9 + 127) = -18;
  static Date.now.getter(v10);
  v11 = v9 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  v12 = enum case for LocatePriority.shallow(_:);
  Priority = type metadata accessor for LocatePriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Priority - 8) + 104))(v11, v12, Priority);
  v14 = v9 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  v15 = enum case for LegacyRefreshSchedule.notScheduled(_:);
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 104))(v14, v15, refreshed);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands) = _swiftEmptyArrayStorage;
  v17 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalesceTaskList;
  v18 = type metadata accessor for WorkItemQueue(0);
  v0[18] = v18;
  UUID.init()(v18);
  *(_QWORD *)(v9 + v17) = WorkItemQueue.__allocating_init(identifier:)(v5);
  v20 = v1[2];
  v19 = v1[3];
  if (v20 >= v19 >> 1)
    v1 = sub_100161358((_QWORD *)(v19 > 1), v20 + 1, 1, v1);
  v0[19] = v1;
  v21 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  v1[2] = v20 + 1;
  v22 = &v1[2 * v20];
  v22[4] = v9;
  v22[5] = v21;
  v23 = type metadata accessor for AccountService(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = (_QWORD *)swift_task_alloc(dword_10026169C);
  v0[20] = v24;
  *v24 = v0;
  v24[1] = sub_1000A3458;
  return sub_1000762E4();
}

uint64_t sub_1000A3458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000A34B4, 0, 0);
}

uint64_t sub_1000A34B4()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (_QWORD *)v0[19];
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, (_QWORD *)v0[19]);
  v0[22] = v1;
  v4 = v0[21];
  v5 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v7 = type metadata accessor for SettingsService(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = (_QWORD *)swift_task_alloc(dword_1002667AC);
  v0[23] = v8;
  *v8 = v0;
  v8[1] = sub_1000A357C;
  return sub_10019F7C4();
}

uint64_t sub_1000A357C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000A35D8, 0, 0);
}

uint64_t sub_1000A35D8()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = (_QWORD *)v0[22];
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, (_QWORD *)v0[22]);
  v4 = v0[24];
  v5 = sub_100004EA8(&qword_100261ED0, type metadata accessor for SettingsService, (uint64_t)&unk_1001FA0D8);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for ServerInteractionController(0);
  sub_10000F014(3);
  v7 = ServerInteractionController.__allocating_init(bundleIdentifier:)();
  v8 = type metadata accessor for DataManager(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = sub_1000A29EC(0, 0, v7, v9);
  v12 = v1[2];
  v11 = v1[3];
  if (v12 >= v11 >> 1)
    v1 = sub_100161358((_QWORD *)(v11 > 1), v12 + 1, 1, v1);
  v0[25] = v1;
  v13 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  v1[2] = v12 + 1;
  v14 = &v1[2 * v12];
  v14[4] = v10;
  v14[5] = v13;
  v15 = type metadata accessor for FriendshipService(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = (_QWORD *)swift_task_alloc(dword_1002649E4);
  v0[26] = v16;
  *v16 = v0;
  v16[1] = sub_1000A3740;
  return sub_100139B24();
}

uint64_t sub_1000A3740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000A379C, 0, 0);
}

uint64_t sub_1000A379C()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (_QWORD *)v0[25];
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, (_QWORD *)v0[25]);
  v0[28] = v1;
  v4 = v0[27];
  v5 = sub_100004EA8(&qword_100261ED8, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DC8);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v7 = type metadata accessor for LocationService(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = (_QWORD *)swift_task_alloc(dword_100262754);
  v0[29] = v8;
  *v8 = v0;
  v8[1] = sub_1000A3864;
  return sub_1000A8324();
}

uint64_t sub_1000A3864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000A38C0, 0, 0);
}

uint64_t sub_1000A38C0()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = *(_QWORD **)(v0 + 224);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_100161358((_QWORD *)(v2 > 1), v3 + 1, 1, *(_QWORD **)(v0 + 224));
  v4 = *(_QWORD *)(v0 + 240);
  v5 = sub_100004EA8(&qword_100261868, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E44);
  v1[2] = v3 + 1;
  v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v7 = type metadata accessor for UserNotificationService();
  v8 = swift_allocObject(v7, 128, 15);
  swift_defaultActor_initialize(v8);
  *(_QWORD *)(v8 + 112) = 0xD000000000000017;
  *(_QWORD *)(v8 + 120) = 0x80000001001FDD90;
  v10 = v1[2];
  v9 = v1[3];
  if (v10 >= v9 >> 1)
    v1 = sub_100161358((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
  v11 = sub_100004EA8(&qword_100261EE0, (uint64_t (*)(uint64_t))type metadata accessor for UserNotificationService, (uint64_t)&unk_1001F7080);
  v1[2] = v10 + 1;
  v12 = &v1[2 * v10];
  v12[4] = v8;
  v12[5] = v11;
  v13 = type metadata accessor for LocationMonitor();
  v14 = swift_allocObject(v13, 137, 15);
  swift_defaultActor_initialize(v14);
  *(_QWORD *)(v14 + 112) = 0x6E6F697461636F4CLL;
  *(_QWORD *)(v14 + 120) = 0xEF726F74696E6F4DLL;
  *(_QWORD *)(v14 + 128) = _swiftEmptyDictionarySingleton;
  *(_BYTE *)(v14 + 136) = 2;
  v16 = v1[2];
  v15 = v1[3];
  if (v16 >= v15 >> 1)
    v1 = sub_100161358((_QWORD *)(v15 > 1), v16 + 1, 1, v1);
  v17 = sub_100004EA8(&qword_100261EE8, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9D6C);
  v1[2] = v16 + 1;
  v18 = &v1[2 * v16];
  v18[4] = v14;
  v18[5] = v17;
  v19 = type metadata accessor for AppDeletionService();
  v20 = swift_allocObject(v19, 138, 15);
  swift_defaultActor_initialize(v20);
  *(_QWORD *)(v20 + 112) = 0xD000000000000012;
  *(_QWORD *)(v20 + 120) = 0x80000001001FDDB0;
  *(_QWORD *)(v20 + 128) = _swiftEmptyDictionarySingleton;
  *(_WORD *)(v20 + 136) = 2;
  v22 = v1[2];
  v21 = v1[3];
  if (v22 >= v21 >> 1)
    v1 = sub_100161358((_QWORD *)(v21 > 1), v22 + 1, 1, v1);
  v23 = sub_100004EA8(&qword_100261EF0, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC2D4);
  v1[2] = v22 + 1;
  v24 = &v1[2 * v22];
  v24[4] = v20;
  v24[5] = v23;
  v25 = type metadata accessor for NITokenService(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = sub_1001BE6F4();
  v28 = v1[2];
  v27 = v1[3];
  if (v28 >= v27 >> 1)
    v1 = sub_100161358((_QWORD *)(v27 > 1), v28 + 1, 1, v1);
  v29 = *(_QWORD *)(v0 + 32);
  v30 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  v1[2] = v28 + 1;
  v31 = &v1[2 * v28];
  v31[4] = v26;
  v31[5] = v30;
  v32 = type metadata accessor for NITokenService_LocalMessaging();
  v33 = (_QWORD *)swift_allocObject(v32, 136, 15);
  v34 = swift_defaultActor_initialize(v33);
  v33[14] = 0xD00000000000001DLL;
  v33[15] = 0x80000001001FDDD0;
  UUID.init()(v34);
  v33[16] = WorkItemQueue.__allocating_init(identifier:)(v29);
  v36 = v1[2];
  v35 = v1[3];
  if (v36 >= v35 >> 1)
    v1 = sub_100161358((_QWORD *)(v35 > 1), v36 + 1, 1, v1);
  v37 = sub_100004EA8(&qword_100260F68, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E84);
  v1[2] = v36 + 1;
  v38 = &v1[2 * v36];
  v38[4] = v33;
  v38[5] = v37;
  v39 = type metadata accessor for NIRangingService(0);
  v40 = (char *)swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  swift_defaultActor_initialize(v40);
  *((_QWORD *)v40 + 14) = 0xD000000000000010;
  *((_QWORD *)v40 + 15) = 0x80000001001FDDF0;
  *((_QWORD *)v40 + 16) = 0;
  v41 = &v40[OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation];
  v42 = sub_100037A5C(&qword_100261EF8);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v43(v41, 1, 1, v42);
  v43(&v40[OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation], 1, 1, v42);
  v45 = v1[2];
  v44 = v1[3];
  if (v45 >= v44 >> 1)
    v1 = sub_100161358((_QWORD *)(v44 > 1), v45 + 1, 1, v1);
  v46 = *(_QWORD *)(v0 + 32);
  v47 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  v1[2] = v45 + 1;
  v48 = &v1[2 * v45];
  v48[4] = v40;
  v48[5] = v47;
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v1);
}

uint64_t sub_1000A3D4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v1 = v0[7];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[7];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v7);
    v0[3] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error creating CloudStorageService: %@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v0[7]);
    swift_errorRelease(v7);

  }
  v0[8] = _swiftEmptyArrayStorage;
  v12 = type metadata accessor for LocalStorageService();
  swift_allocObject(v12, 168, 15);
  v13 = (_QWORD *)swift_task_alloc(dword_100260A94);
  v0[9] = v13;
  *v13 = v0;
  v13[1] = sub_1000A2DB4;
  return sub_100055B9C();
}

uint64_t sub_1000A3F38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t Unlock;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v1 = v0[11];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[11];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v7);
    v0[2] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error creating LocalStorageService: %@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v0[11]);
    swift_errorRelease(v7);

  }
  v12 = (_QWORD *)v0[8];
  type metadata accessor for FirstUnlockService(0);
  Unlock = FirstUnlockService.__allocating_init()();
  if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
    v12 = sub_100161358(0, v12[2] + 1, 1, v12);
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
    v12 = sub_100161358((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
  v0[12] = v12;
  v16 = sub_100004EA8(&qword_100260A88, (uint64_t (*)(uint64_t))&type metadata accessor for FirstUnlockService, (uint64_t)&protocol conformance descriptor for FirstUnlockService);
  v12[2] = v15 + 1;
  v17 = &v12[2 * v15];
  v17[4] = Unlock;
  v17[5] = v16;
  v18 = type metadata accessor for IDSTransportServiceFMF();
  v19 = (_QWORD *)swift_allocObject(v18, 160, 15);
  v0[13] = v19;
  swift_defaultActor_initialize(v19);
  v19[14] = 0xD000000000000016;
  v19[15] = 0x80000001001FDD00;
  v19[18] = _swiftEmptyDictionarySingleton;
  v19[19] = _swiftEmptyDictionarySingleton;
  sub_100037A5C(&qword_1002600E0);
  v20 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.__allocating_init(serviceName:crossAccount:)[1]);
  v0[14] = v20;
  *v20 = v0;
  v20[1] = sub_1000A300C;
  return InternetMessaging.__allocating_init(serviceName:crossAccount:)(0xD00000000000001BLL, 0x80000001001FDD20, 1);
}

uint64_t storeEnumTagSinglePayload for LocalMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A4268 + 4 * byte_1001F4B15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A429C + 4 * byte_1001F4B10[v4]))();
}

uint64_t sub_1000A429C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A42A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A42ACLL);
  return result;
}

uint64_t sub_1000A42B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A42C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A42C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A42CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalMessageType()
{
  return &type metadata for LocalMessageType;
}

Swift::Int sub_1000A42E8()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A432C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A4354(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A4394@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000A45F0(*a1);
  *a2 = result;
  return result;
}

void sub_1000A43BC(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_1000A43C8(_QWORD *a1@<X8>)
{
  *a1 = &off_10024ED98;
}

uint64_t sub_1000A43D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4514();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A4434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4514();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1000A4484()
{
  unint64_t result;

  result = qword_100261F08;
  if (!qword_100261F08)
  {
    result = swift_getWitnessTable(&unk_1001F4B5C, &type metadata for LocalMessageType);
    atomic_store(result, (unint64_t *)&qword_100261F08);
  }
  return result;
}

unint64_t sub_1000A44CC()
{
  unint64_t result;

  result = qword_100261F10;
  if (!qword_100261F10)
  {
    result = swift_getWitnessTable(&unk_1001F4B34, &type metadata for LocalMessageType);
    atomic_store(result, (unint64_t *)&qword_100261F10);
  }
  return result;
}

unint64_t sub_1000A4514()
{
  unint64_t result;

  result = qword_100261F18;
  if (!qword_100261F18)
  {
    result = swift_getWitnessTable(&unk_1001F4BF4, &type metadata for LocalMessageType);
    atomic_store(result, (unint64_t *)&qword_100261F18);
  }
  return result;
}

unint64_t sub_1000A455C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100261F20;
  if (!qword_100261F20)
  {
    v1 = sub_10003C1FC(&qword_100261F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100261F20);
  }
  return result;
}

unint64_t sub_1000A45AC()
{
  unint64_t result;

  result = qword_100261F30;
  if (!qword_100261F30)
  {
    result = swift_getWitnessTable(&unk_1001F4C6C, &type metadata for LocalMessageType);
    atomic_store(result, (unint64_t *)&qword_100261F30);
  }
  return result;
}

uint64_t sub_1000A45F0(uint64_t result)
{
  if (result >= 4)
    return 4;
  else
    return result;
}

void sub_1000A4600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  uint64_t v49;

  v2 = type metadata accessor for Handle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v48 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100037A5C(&qword_1002605E8);
  v5 = __chkstk_darwin(v45);
  v46 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v44 = (char *)&v38 - v7;
  v8 = *(_QWORD *)(a1 + 64);
  v42 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v43 = (unint64_t)(v9 + 63) >> 6;
  v12 = swift_bridgeObjectRetain(a1);
  v13 = 0;
  v12.n128_u64[0] = 141558275;
  v40 = v12;
  v39 = (char *)&type metadata for Any + 8;
  v41 = a1;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v47 = v13;
      v15 = v14 | (v13 << 6);
      goto LABEL_24;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v43)
      goto LABEL_28;
    v17 = *(_QWORD *)(v42 + 8 * v16);
    v18 = v13 + 1;
    if (!v17)
    {
      v18 = v13 + 2;
      if (v13 + 2 >= v43)
        goto LABEL_28;
      v17 = *(_QWORD *)(v42 + 8 * v18);
      if (!v17)
      {
        v18 = v13 + 3;
        if (v13 + 3 >= v43)
          goto LABEL_28;
        v17 = *(_QWORD *)(v42 + 8 * v18);
        if (!v17)
        {
          v18 = v13 + 4;
          if (v13 + 4 >= v43)
            goto LABEL_28;
          v17 = *(_QWORD *)(v42 + 8 * v18);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v47 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_24:
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v21 = (uint64_t)v44;
    v20(v44, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v15, v2);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21 + *(int *)(v45 + 48), v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v15, v23);
    v24 = v46;
    sub_10000EF6C(v21, v46, &qword_1002605E8);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v25 = type metadata accessor for Logger(0);
    sub_100037A9C(v25, (uint64_t)qword_10027ABA8);
    v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v48, v24, v2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = v48;
      v31 = v29;
      v32 = swift_slowAlloc(32, -1);
      v49 = v32;
      *(_DWORD *)v31 = v40.n128_u32[0];
      *(_QWORD *)(v31 + 4) = 1752392040;
      *(_WORD *)(v31 + 12) = 2081;
      v33 = Handle.identifier.getter();
      v35 = v34;
      *(_QWORD *)(v31 + 14) = sub_10002BA84(v33, v34, &v49);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "LocationService: send location update for handle: %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 1, v39);
      v36 = v32;
      v24 = v46;
      swift_slowDealloc(v36, -1, -1);
      v37 = v31;
      a1 = v41;
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v48, v2);
    }

    v13 = v47;
    sub_1000087A0(v24, &qword_1002605E8);
  }
  v19 = v13 + 5;
  if (v13 + 5 >= v43)
  {
LABEL_28:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v42 + 8 * v19);
  if (v17)
  {
    v18 = v13 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v43)
      goto LABEL_28;
    v17 = *(_QWORD *)(v42 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

_QWORD *sub_1000A4A30(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000312EC(0, v1, 0);
    v3 = type metadata accessor for Handle(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v3 = Handle.identifier.getter(v3);
      v7 = v3;
      v9 = v8;
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        v3 = sub_1000312EC(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000A4B2C(uint64_t a1)
{
  int64_t v1;
  void *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  sub_1001E78BC(0, v1, 0);
  result = (void *)sub_1000CA424(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v19 = v1;
  v20 = v4;
  v21 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * v5);
    v12 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
    v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
    result = (void *)swift_bridgeObjectRetain(v11);
    if (v12 >= v13 >> 1)
      result = (void *)sub_1001E78BC(v13 > 1, v12 + 1, 1);
    *((_QWORD *)&_swiftEmptyArrayStorage + 2) = v12 + 1;
    *((_QWORD *)&_swiftEmptyArrayStorage + v12 + 4) = v11;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v14 = *(_QWORD *)(v21 + 8 * v10);
    if ((v14 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20)
      goto LABEL_27;
    v15 = v14 & (-2 << (v5 & 0x3F));
    if (v15)
    {
      v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v19;
    }
    else
    {
      v16 = v10 + 1;
      v17 = (unint64_t)(v8 + 63) >> 6;
      v9 = v19;
      if (v10 + 1 < v17)
      {
        v18 = *(_QWORD *)(v21 + 8 * v16);
        if (v18)
        {
LABEL_20:
          v8 = __clz(__rbit64(v18)) + (v16 << 6);
        }
        else
        {
          while (v17 - 2 != v10)
          {
            v18 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v18)
            {
              v16 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v8;
    if (v6 == v9)
      return &_swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000A4D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;

  v73 = sub_100037A5C(&qword_1002605E8);
  v3 = __chkstk_darwin(v73);
  v64 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v63 = (char *)v54 - v6;
  v7 = __chkstk_darwin(v5);
  v62 = (uint64_t)v54 - v8;
  v9 = __chkstk_darwin(v7);
  v61 = (char *)v54 - v10;
  __chkstk_darwin(v9);
  v60 = (char *)v54 - v11;
  v12 = type metadata accessor for Handle(0);
  v72 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  if (!v15)
    return (uint64_t)v16;
  v54[1] = v1;
  v74 = _swiftEmptyArrayStorage;
  sub_100018EBC(0, v15, 0);
  result = sub_1000CA424(a1);
  v19 = result;
  v20 = 0;
  v21 = a1 + 64;
  v65 = a1 + 80;
  v58 = v14;
  v59 = a1;
  v55 = v15;
  v56 = v18;
  v57 = a1 + 64;
  while ((v19 & 0x8000000000000000) == 0 && (uint64_t)v19 < 1 << *(_BYTE *)(a1 + 32))
  {
    v23 = v19 >> 6;
    if ((*(_QWORD *)(v21 + 8 * (v19 >> 6)) & (1 << v19)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v18)
      goto LABEL_26;
    v66 = v20;
    v67 = 1 << v19;
    v24 = (uint64_t)v60;
    v25 = &v60[*(int *)(v73 + 48)];
    v26 = *(_QWORD *)(a1 + 48);
    v70 = *(_QWORD *)(v72 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
    v28 = v12;
    v27(v60, v26 + v70 * v19, v12);
    v29 = *(_QWORD *)(a1 + 56);
    v30 = type metadata accessor for Location(0);
    v69 = *(_QWORD *)(v30 - 8);
    v31 = *(_QWORD *)(v69 + 72);
    v71 = v19;
    v32 = v29 + v31 * v19;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
    v33(v25, v32, v30);
    v34 = v61;
    v27(v61, v24, v12);
    v68 = (void (*)(char *, uint64_t, uint64_t))v27;
    v35 = v73;
    v33(&v34[*(int *)(v73 + 48)], (uint64_t)v25, v30);
    v36 = (uint64_t)v34;
    v37 = v62;
    sub_10000EF6C(v36, v62, &qword_1002605E8);
    sub_1000087A0(v24, &qword_1002605E8);
    v38 = *(int *)(v35 + 48);
    v12 = v28;
    v39 = v63;
    v40 = &v63[v38];
    v41 = v37 + v38;
    v27(v63, v37, v12);
    v33(v40, v41, v30);
    v42 = (uint64_t)v64;
    v43 = &v64[*(int *)(v73 + 48)];
    v44 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v44(v64, v39, v12);
    v45 = v43;
    v46 = v58;
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v45, v40, v30);
    v68(v46, v42, v12);
    sub_1000087A0(v42, &qword_1002605E8);
    sub_1000087A0(v37, &qword_1002605E8);
    v16 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native(v74) & 1) == 0)
    {
      sub_100018EBC(0, v16[2] + 1, 1);
      v16 = v74;
    }
    v48 = v16[2];
    v47 = v16[3];
    if (v48 >= v47 >> 1)
    {
      sub_100018EBC(v47 > 1, v48 + 1, 1);
      v16 = v74;
    }
    v16[2] = v48 + 1;
    result = ((uint64_t (*)(char *, char *, uint64_t))v44)((char *)v16+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ v48 * v70, v46, v12);
    v74 = v16;
    a1 = v59;
    v19 = 1 << *(_BYTE *)(v59 + 32);
    if (v71 >= (uint64_t)v19)
      goto LABEL_27;
    v21 = v57;
    v49 = *(_QWORD *)(v57 + 8 * v23);
    if ((v49 & v67) == 0)
      goto LABEL_28;
    LODWORD(v18) = v56;
    if (*(_DWORD *)(v59 + 36) != (_DWORD)v56)
      goto LABEL_29;
    v50 = v49 & (-2 << (v71 & 0x3F));
    if (v50)
    {
      v19 = __clz(__rbit64(v50)) | v71 & 0xFFFFFFFFFFFFFFC0;
      v22 = v55;
    }
    else
    {
      v51 = v23 + 1;
      v52 = (v19 + 63) >> 6;
      v22 = v55;
      if (v23 + 1 < v52)
      {
        v53 = *(_QWORD *)(v57 + 8 * v51);
        if (v53)
        {
LABEL_22:
          v19 = __clz(__rbit64(v53)) + (v51 << 6);
        }
        else
        {
          while (v52 - 2 != v23)
          {
            v53 = *(_QWORD *)(v65 + 8 * v23++);
            if (v53)
            {
              v51 = v23 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v20 = v66 + 1;
    if (v66 + 1 == v22)
      return (uint64_t)v16;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1000A51F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for Handle(0);
  v22 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  v21 = v1;
  v6 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = *(_QWORD *)(v6 + 72);
  v20 = a1;
  swift_bridgeObjectRetain(a1);
  v10 = _swiftEmptyArrayStorage;
  do
  {
    v12 = Friend.handle.getter(isUniquelyReferenced_nonNull_native);
    v13 = Handle.serverID.getter(v12);
    v15 = v14;
    isUniquelyReferenced_nonNull_native = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v4, v23);
    if (v15)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10003C33C(0, v10[2] + 1, 1, v10);
        v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v17 = v10[2];
      v16 = v10[3];
      if (v17 >= v16 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10003C33C((_QWORD *)(v16 > 1), v17 + 1, 1, v10);
        v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v10[2] = v17 + 1;
      v11 = &v10[2 * v17];
      v11[4] = v13;
      v11[5] = v15;
    }
    v7 += v8;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease(v20);
  return v10;
}

uint64_t sub_1000A5380(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = sub_1000F3F4C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 24 * v3);
  v6 = *v5;
  v7 = v5[2];
  swift_retain(v5[1]);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  return v6;
}

_QWORD *sub_1000A53FC()
{
  uint64_t Priority;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  _QWORD *v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;

  Priority = type metadata accessor for LocatePriority(0);
  v1 = *(_QWORD *)(Priority - 8);
  v2 = __chkstk_darwin(Priority);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v24 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v24 - v9;
  v11 = static LocatePriority.allCases.getter(v8);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(unsigned __int8 *)(v1 + 80);
    v25 = v11;
    v28 = (v13 + 32) & ~v13;
    v14 = v11 + v28;
    v15 = *(_QWORD *)(v1 + 72);
    v32 = enum case for LocatePriority.backgroundAppRefresh(_:);
    v31 = enum case for LocatePriority.shallow(_:);
    v30 = enum case for LocatePriority.live(_:);
    v26 = enum case for LocatePriority.backgroundProactive(_:);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v17 = _swiftEmptyArrayStorage;
    v29 = v4;
    v27 = v15;
    v16(v10, v11 + v28, Priority);
    while (1)
    {
      v16(v7, (uint64_t)v10, Priority);
      v18 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v7, Priority);
      if (v18 != v32)
      {
        if (v18 == v31 || v18 == v30)
        {
          v16(v4, (uint64_t)v10, Priority);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = (_QWORD *)sub_100161344(0, v17[2] + 1, 1, (unint64_t)v17);
          v21 = v17[2];
          v20 = v17[3];
          if (v21 >= v20 >> 1)
            v17 = (_QWORD *)sub_100161344(v20 > 1, v21 + 1, 1, (unint64_t)v17);
          v17[2] = v21 + 1;
          v15 = v27;
          v22 = (char *)v17 + v28 + v21 * v27;
          v4 = v29;
          (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v22, v29, Priority);
        }
        else if (v18 != v26)
        {
          result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(Priority, Priority);
          __break(1u);
          return result;
        }
      }
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, Priority);
      v14 += v15;
      if (!--v12)
      {
        swift_bridgeObjectRelease(v25);
        return v17;
      }
      v16(v10, v14, Priority);
    }
  }
  swift_bridgeObjectRelease(v11);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A5664()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AB90);
  sub_100037A9C(v0, (uint64_t)qword_10027AB90);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x6E6F697461636F6CLL, 0xEF65636976726553);
}

uint64_t sub_1000A56E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

Swift::Int sub_1000A5708(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  v4 = type metadata accessor for LocationServiceClient();
  dispatch thunk of Hashable.hash(into:)(v6, v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000A5760(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  v4 = type metadata accessor for LocationServiceClient();
  v6 = sub_100018A7C(&qword_100262440, v5, (uint64_t (*)(uint64_t))type metadata accessor for LocationServiceClient, (uint64_t)&unk_1001F4F64);
  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_1000A57BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_1000A57D8, 0, 0);
}

uint64_t sub_1000A57D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[5];
  v4 = (_QWORD *)swift_allocObject(&unk_100251AB0, 40, 7);
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v3);
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[9] = v6;
  *v6 = v0;
  v6[1] = sub_1000A58A0;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000A58A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A590C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_10004101C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A590C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AB90);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000017, 0x80000001001FE080, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain(v8);
    v12 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A5B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return swift_task_switch(sub_1000A5B90, 0, 0);
}

uint64_t sub_1000A5B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  static Task<>.checkCancellation()(a1);
  v2 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v5 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v1 + 88));
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v1 + 104) = v3;
  *v3 = v1;
  v3[1] = sub_1000A5C40;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v5)(v1 + 64, sub_1000CA0A4, *(_QWORD *)(v1 + 88));
}

uint64_t sub_1000A5C40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A5E20;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_1000A5CAC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A5CAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;

  v1 = v0[14];
  v2 = v0[12];
  v3 = (void *)v0[8];
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v0[9] = v2;
  v6 = sub_100037A5C(&qword_100261858);
  v7 = sub_1000CA2CC();
  v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 9, v6, v7);
  if (v1)
  {
    swift_release(v5);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = v0[11];
    swift_release(v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1000CA370;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_100251AC8;
    v14 = _Block_copy(v0 + 2);
    v15 = v0[7];
    swift_retain(v12);
    swift_release(v15);
    objc_msgSend(v3, "locationsForHandles:completion:", isa, v14);
    _Block_release(v14);

    sub_100037AB4(v10, v11);
  }
  swift_unknownObjectRelease(v3);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000A5E20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A5E54(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000A5EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v10 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject(a4, 56, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = a1;
  v14[6] = a3;
  swift_retain(a2);
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  v15 = sub_10005582C((uint64_t)v12, a5, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_1000A5F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_1000A5FAC, 0, 0);
}

uint64_t sub_1000A5FAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[5];
  v4 = (_QWORD *)swift_allocObject(&unk_100251A38, 40, 7);
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v3);
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[9] = v6;
  *v6 = v0;
  v6[1] = sub_1000A6074;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000A6074()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A60E0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100044CD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A60E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AB90);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FE040, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain(v8);
    v12 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return swift_task_switch(sub_1000A6364, 0, 0);
}

uint64_t sub_1000A6364()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 88));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_1000A63EC;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_1000CA0A4, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1000A63EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CFCE8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_1000A6458;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A6458()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;

  v1 = v0[14];
  v2 = v0[12];
  v3 = (void *)v0[8];
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v0[9] = v2;
  v6 = sub_100037A5C(&qword_100262468);
  v7 = sub_1000CA0BC();
  v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 9, v6, v7);
  if (v1)
  {
    swift_release(v5);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = v0[11];
    swift_release(v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1000CA13C;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_100251A50;
    v14 = _Block_copy(v0 + 2);
    v15 = v0[7];
    swift_retain(v12);
    swift_release(v15);
    objc_msgSend(v3, "locationsUnavailableFor:completion:", isa, v14);
    _Block_release(v14);

    sub_100037AB4(v10, v11);
  }
  swift_unknownObjectRelease(v3);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000A65CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB90);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(a1);
    v8 = _swift_stdlib_bridgeErrorToNSError(a1);
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocationServiceClient proxy error: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v11 = a1;
  return OnceCheckedContinuation.resume(throwing:)(&v11);
}

uint64_t sub_1000A6788(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AB90);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136446466;
    v18 = sub_10002BA84(a3, a4, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    v18 = a1;
    swift_errorRetain(a1);
    v13 = sub_100037A5C(&qword_100262480);
    v14 = String.init<A>(describing:)(&v18, v13);
    v16 = v15;
    v18 = sub_10002BA84(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s error: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    if (a1)
    {
LABEL_5:
      v19 = a1;
      swift_errorRetain(a1);
      OnceCheckedContinuation.resume(throwing:)(&v19);
      return swift_errorRelease(a1);
    }
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if (a1)
      goto LABEL_5;
  }
  return OnceCheckedContinuation.resume<>()();
}

uint64_t sub_1000A69C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000A69D8, v1, 0);
}

uint64_t sub_1000A69D8()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(*((unsigned int *)&async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)
                                      + 1));
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6A6C;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1000A6A6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1000A6ADC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 32));
    v5 = sub_10003BF80;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000A6ADC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000A6B28, v1, 0);
}

uint64_t sub_1000A6B28()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6BBC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1000A6BBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1000CFCE4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 32));
    v5 = sub_10003BF78;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

void sub_1000A6C2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t, __n128);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  _QWORD v40[2];
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;
  _QWORD *v50;

  v4 = type metadata accessor for Handle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)v40 - v10;
  __chkstk_darwin(v9);
  v46 = (char *)v40 - v12;
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
    return;
  v14 = a1[2];
  if (!v14)
    return;
  if (v13 >= v14)
    v15 = (uint64_t)a1;
  else
    v15 = a2;
  if (v13 >= v14)
    a1 = (_QWORD *)a2;
  v16 = *(_QWORD *)(v15 + 56);
  v42 = v15 + 56;
  v17 = -1 << *(_BYTE *)(v15 + 32);
  v40[1] = ~v17;
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v41 = (unint64_t)(63 - v17) >> 6;
  v49 = a1 + 7;
  v45 = v15;
  swift_bridgeObjectRetain(v15);
  v50 = a1;
  v20 = swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v48)
  {
    v43 = v19;
    v44 = i;
    if (!v19)
      break;
    v47 = (v19 - 1) & v19;
    v48 = i;
    v22 = __clz(__rbit64(v19)) | (i << 6);
LABEL_29:
    v27 = v46;
    v28 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v29(v46, *(_QWORD *)(v45 + 48) + v28 * v22, v4, v20);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v27, v4);
    if (v50[2])
    {
      v30 = v50;
      v31 = v50[5];
      v32 = sub_100018A7C(&qword_1002605F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v4, v32);
      v34 = -1 << *((_BYTE *)v30 + 32);
      v35 = v33 & ~v34;
      if (((*(_QWORD *)((char *)v49 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
      {
        v36 = ~v34;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v29)(v8, v50[6] + v35 * v28, v4);
          v37 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
          v38 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v11, v4, v37);
          v39 = *(void (**)(char *, uint64_t))(v5 + 8);
          v39(v8, v4);
          if ((v38 & 1) != 0)
            break;
          v35 = (v35 + 1) & v36;
          if (((*(_QWORD *)((char *)v49 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease(v50);
        v39(v11, v4);
        goto LABEL_37;
      }
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v19 = v47;
  }
  v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v23 >= v41)
    goto LABEL_38;
  v24 = *(_QWORD *)(v42 + 8 * v23);
  v25 = i + 1;
  if (v24)
    goto LABEL_28;
  v25 = i + 2;
  if (i + 2 >= v41)
    goto LABEL_38;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_28;
  v25 = i + 3;
  if (i + 3 >= v41)
    goto LABEL_38;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
  {
LABEL_28:
    v47 = (v24 - 1) & v24;
    v48 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  v26 = i + 4;
  if (i + 4 >= v41)
  {
LABEL_38:
    swift_bridgeObjectRelease(v50);
LABEL_37:
    sub_100086D50(v45);
    return;
  }
  v24 = *(_QWORD *)(v42 + 8 * v26);
  if (v24)
  {
    v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v41)
      goto LABEL_38;
    v24 = *(_QWORD *)(v42 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_28;
  }
LABEL_40:
  __break(1u);
}

void sub_1000A6FEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, unint64_t, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v97 = type metadata accessor for Location(0);
  v3 = *(_QWORD *)(v97 - 8);
  v4 = __chkstk_darwin(v97);
  v80 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v75 - v6;
  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v79 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v92 = (char *)&v75 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v75 - v14;
  v16 = sub_100037A5C(&qword_1002605C8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v95 = (uint64_t)&v75 - v20;
  v21 = *(_QWORD *)(a1 + 64);
  v78 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v96 = v23 & v21;
  v24 = (unint64_t)(v22 + 63) >> 6;
  v75 = v24 - 1;
  v25 = swift_bridgeObjectRetain(a1);
  v89 = 0;
  v85 = 0;
  v81 = v24;
  v77 = v24 - 5;
  v76 = a1 + 104;
  v86 = a1;
  v87 = v7;
  v90 = v8;
  v91 = v3;
  v88 = v1;
  v84 = v9;
  v93 = v15;
  v82 = v19;
  v26 = v96;
  if (!v96)
    goto LABEL_13;
LABEL_8:
  v42 = v3;
  v96 = (v26 - 1) & v26;
  v43 = __clz(__rbit64(v26)) | (v89 << 6);
LABEL_9:
  v44 = v86;
  v45 = v90;
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v19, *(_QWORD *)(v86 + 48) + *(_QWORD *)(v9 + 72) * v43, v90, v25);
  v46 = *(_QWORD *)(v44 + 56);
  v3 = v42;
  v8 = v45;
  v47 = v46 + *(_QWORD *)(v3 + 72) * v43;
  v48 = sub_100037A5C(&qword_1002605E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(&v19[*(int *)(v48 + 48)], v47, v97);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v19, 0, 1, v48);
  while (1)
  {
    v55 = v95;
    sub_10000EF6C((uint64_t)v19, v95, &qword_1002605C8);
    v56 = sub_100037A5C(&qword_1002605E8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56) == 1)
    {
LABEL_48:
      swift_release(v86);
      return;
    }
    v57 = v95 + *(int *)(v56 + 48);
    (*(void (**)(char *))(v9 + 32))(v15);
    v58 = v57;
    v59 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v7, v58, v97);
    v60 = *v1;
    v61 = *(_QWORD *)(*v1 + 16);
    if (!v61)
    {
      v3 = v91;
      v7 = v87;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v59);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      v26 = v96;
      if (v96)
        goto LABEL_8;
      goto LABEL_13;
    }
    v62 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v63 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v64 = v15;
    v65 = v92;
    v63(v92, v60 + v62, v8);
    v66 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(v60);
    LOBYTE(v64) = dispatch thunk of static Equatable.== infix(_:_:)(v65, v64, v8, v66);
    v67 = *(void (**)(char *, uint64_t))(v9 + 8);
    v67(v65, v8);
    v94 = v67;
    if ((v64 & 1) == 0)
    {
      if (v61 == 1)
        goto LABEL_37;
      v83 = *(_QWORD *)(v84 + 72);
      v68 = v92;
      v63(v92, v60 + v62 + v83, v8);
      v69 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v93, v8, v66);
      v67(v68, v8);
      if ((v69 & 1) == 0)
        break;
    }
LABEL_5:
    swift_bridgeObjectRelease(v60);
    v7 = v87;
    v27 = v88;
    v28 = v97;
    v8 = v90;
    v29 = v91;
    v30 = v85;
    v31 = (uint64_t)v79;
    v32 = v93;
    v63(v79, (unint64_t)v93, v90);
    v33 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v80, v7, v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27[2]);
    v98 = v27[2];
    v27[2] = 0x8000000000000000;
    sub_100163B08(v33, v31, isUniquelyReferenced_nonNull_native);
    v35 = v27[2];
    v27[2] = v98;
    swift_bridgeObjectRelease(v35);
    v36 = v94;
    v37 = ((uint64_t (*)(uint64_t, uint64_t))v94)(v31, v8);
    v38 = *v27;
    __chkstk_darwin(v37);
    *(&v75 - 2) = (unint64_t)v32;
    swift_bridgeObjectRetain(v38);
    v39 = sub_1000DEF64((uint64_t (*)(_QWORD))sub_1000CC520, (uint64_t)(&v75 - 4), v38);
    v40 = swift_bridgeObjectRelease(*v27);
    *v27 = v39;
    v41 = *(_QWORD *)(v39 + 16);
    if (!v41)
    {
      v49 = v88;
      v50 = v88[1];
      if (v50)
      {
        OnceCheckedContinuation.resume<>()(v40);
        swift_release(v50);
      }
      v49[1] = 0;
      v41 = *(_QWORD *)(v39 + 16);
      v32 = v93;
      v36 = v94;
      v8 = v90;
    }
    v85 = v30;
    v3 = v91;
    (*(void (**)(char *, uint64_t))(v91 + 8))(v7, v28);
    v36(v32, v8);
    v9 = v84;
    v15 = v32;
    v19 = v82;
    v1 = v88;
    if (!v41)
      goto LABEL_48;
    v26 = v96;
    if (v96)
      goto LABEL_8;
LABEL_13:
    v51 = v89;
    v52 = v89 + 1;
    if (__OFADD__(v89, 1))
      goto LABEL_50;
    if (v52 < v81)
    {
      v53 = *(_QWORD *)(v78 + 8 * v52);
      if (v53)
        goto LABEL_16;
      if (v89 + 2 < v81)
      {
        v53 = *(_QWORD *)(v78 + 8 * (v89 + 2));
        if (v53)
        {
          v52 = v89 + 2;
LABEL_16:
          v42 = v3;
          v96 = (v53 - 1) & v53;
          v43 = __clz(__rbit64(v53)) + (v52 << 6);
          v89 = v52;
          goto LABEL_9;
        }
        if (v89 + 3 >= v81)
        {
          v89 += 2;
          goto LABEL_32;
        }
        v53 = *(_QWORD *)(v78 + 8 * (v89 + 3));
        if (v53)
        {
          v52 = v89 + 3;
          goto LABEL_16;
        }
        v52 = v89 + 4;
        if (v89 + 4 >= v81)
        {
          v89 += 3;
          goto LABEL_32;
        }
        v53 = *(_QWORD *)(v78 + 8 * v52);
        if (v53)
          goto LABEL_16;
        while (v77 != v51)
        {
          v53 = *(_QWORD *)(v76 + 8 * v51++);
          if (v53)
          {
            v52 = v51 + 4;
            goto LABEL_16;
          }
        }
        v52 = v75;
      }
      v89 = v52;
    }
LABEL_32:
    v54 = sub_100037A5C(&qword_1002605E8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v19, 1, 1, v54);
    v96 = 0;
  }
  if (v61 == 2)
  {
LABEL_37:
    swift_bridgeObjectRelease(v60);
    v7 = v87;
    v1 = v88;
    v59 = v97;
    v3 = v91;
    v9 = v84;
    v15 = v93;
    v19 = v82;
    goto LABEL_39;
  }
  v70 = v60 + v62 + 2 * v83;
  v71 = 2;
  while (1)
  {
    v72 = v92;
    v63(v92, v70, v8);
    v73 = v71 + 1;
    if (__OFADD__(v71, 1))
      break;
    v74 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v93, v8, v66);
    v94(v72, v8);
    if ((v74 & 1) != 0)
      goto LABEL_5;
    ++v71;
    v70 += v83;
    if (v73 == v61)
      goto LABEL_37;
  }
  __break(1u);
LABEL_50:
  __break(1u);
}

BOOL sub_1000A7780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Handle(0);
  v5 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1000A77FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  Swift::String v51;
  __n128 v52;
  Swift::String v53;
  void *object;
  Swift::String v55;
  Swift::String v56;
  void *v57;
  Swift::String v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;

  v70 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v68 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100037A5C(&qword_100262438);
  v8 = __chkstk_darwin(v79);
  v78 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v77 = (uint64_t)&v64 - v11;
  v12 = __chkstk_darwin(v10);
  v76 = (char *)&v64 - v13;
  __chkstk_darwin(v12);
  v75 = (char *)&v64 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  if (v15)
  {
    v65 = a2;
    v66 = v6;
    v67 = v5;
    v83 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    sub_1000312EC(0, v15, 0);
    result = sub_1000CA424(a1);
    v19 = result;
    v20 = 0;
    v21 = a1 + 64;
    v22 = *(_BYTE *)(a1 + 32);
    v69 = a1 + 80;
    v73 = a1 + 64;
    v74 = a1;
    v71 = v15;
    v72 = v18;
    v23 = v79;
    while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << v22)
    {
      v26 = (unint64_t)v19 >> 6;
      if ((*(_QWORD *)(v21 + 8 * ((unint64_t)v19 >> 6)) & (1 << v19)) == 0)
        goto LABEL_29;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v18)
        goto LABEL_30;
      v80 = v20;
      v81 = 1 << v19;
      v27 = *(int *)(v23 + 48);
      v28 = *(_QWORD *)(a1 + 48);
      v29 = type metadata accessor for Handle(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      v32 = (uint64_t)v75;
      v31(v75, v28 + *(_QWORD *)(v30 + 72) * v19, v29);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
      *(_QWORD *)(v32 + v27) = v33;
      v34 = (uint64_t)v76;
      v31(v76, v32, v29);
      *(_QWORD *)(v34 + *(int *)(v23 + 48)) = v33;
      v35 = v77;
      sub_10000EF6C(v34, v77, &qword_100262438);
      swift_bridgeObjectRetain_n(v33, 2);
      sub_1000087A0(v32, &qword_100262438);
      v36 = *(int *)(v23 + 48);
      v37 = v78;
      v38 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v78, v35, v29);
      *(_QWORD *)&v37[v36] = *(_QWORD *)(v35 + v36);
      v39 = Handle.identifier.getter(v38);
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
      sub_1000087A0(v35, &qword_100262438);
      v16 = v83;
      result = swift_isUniquelyReferenced_nonNull_native(v83);
      if ((result & 1) == 0)
      {
        result = sub_1000312EC(0, v16[2] + 1, 1);
        v16 = v83;
      }
      v43 = v16[2];
      v42 = v16[3];
      if (v43 >= v42 >> 1)
      {
        result = sub_1000312EC(v42 > 1, v43 + 1, 1);
        v16 = v83;
      }
      v16[2] = v43 + 1;
      v44 = &v16[2 * v43];
      v44[4] = v39;
      v44[5] = v41;
      a1 = v74;
      v22 = *(_BYTE *)(v74 + 32);
      v24 = 1 << v22;
      if (v19 >= 1 << v22)
        goto LABEL_31;
      v21 = v73;
      v45 = *(_QWORD *)(v73 + 8 * v26);
      if ((v45 & v81) == 0)
        goto LABEL_32;
      LODWORD(v18) = v72;
      if (*(_DWORD *)(v74 + 36) != (_DWORD)v72)
        goto LABEL_33;
      v46 = v45 & (-2 << (v19 & 0x3F));
      if (v46)
      {
        v24 = __clz(__rbit64(v46)) | v19 & 0xFFFFFFFFFFFFFFC0;
        v25 = v71;
      }
      else
      {
        v47 = v26 + 1;
        v48 = (v24 + 63) >> 6;
        v25 = v71;
        if (v26 + 1 < v48)
        {
          v49 = *(_QWORD *)(v73 + 8 * v47);
          if (v49)
          {
LABEL_22:
            v24 = __clz(__rbit64(v49)) + (v47 << 6);
          }
          else
          {
            while (v48 - 2 != v26)
            {
              v49 = *(_QWORD *)(v69 + 8 * v26++);
              if (v49)
              {
                v47 = v26 + 1;
                goto LABEL_22;
              }
            }
          }
        }
      }
      v20 = v80 + 1;
      v19 = v24;
      if (v80 + 1 == v25)
      {
        swift_bridgeObjectRelease(v74);
        v6 = v66;
        v5 = v67;
        a2 = v65;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
LABEL_24:
    v50 = (void *)0xE000000000000000;
    v83 = 0;
    v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v51._object = (void *)0x80000001001FE000;
    v51._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v51);
    v53._countAndFlagsBits = Array.description.getter(v52);
    object = v53._object;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(object);
    v55._countAndFlagsBits = 0xD00000000000001ALL;
    v55._object = (void *)0x80000001001FE020;
    String.append(_:)(v55);
    v82 = v70;
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v57 = v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v57);
    v58._countAndFlagsBits = 0x7469206B726F5720;
    v58._object = (void *)0xEC000000203A6D65;
    String.append(_:)(v58);
    if (a2)
    {
      v59 = v68;
      v60 = WorkItemQueue.WorkItem.id.getter();
      v61 = UUID.uuidString.getter(v60);
      v50 = v62;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v59, v5);
    }
    else
    {
      v61 = 0;
    }
    v63._countAndFlagsBits = v61;
    v63._object = v50;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v50);
    return (uint64_t)v83;
  }
  return result;
}

uint64_t sub_1000A7D28()
{
  uint64_t *v0;

  return sub_1000A77FC(*v0, v0[1], v0[2]);
}

uint64_t sub_1000A7D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027ABA8);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027ABA8);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AB90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void *sub_1000A7DC4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, a1, 33, 0);
  return &j__swift_endAccess;
}

_QWORD *sub_1000A7E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v17;
  int64_t v18;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= v6)
      goto LABEL_24;
    v17 = *(_QWORD *)(v2 + 8 * v8);
    if (!v17)
      break;
LABEL_19:
    v5 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_retain(v13);
    v14 = swift_bridgeObjectRetain(v12);
    v15 = sub_1000A7FB0(v14);
    swift_release(v13);
    swift_bridgeObjectRelease(v12);
    result = (_QWORD *)sub_10015D048((uint64_t)v15);
  }
  v18 = v8 + 1;
  if (v8 + 1 >= v6)
    goto LABEL_24;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v8 + 2;
  if (v8 + 2 >= v6)
    goto LABEL_24;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v8 + 3;
  if (v8 + 3 >= v6)
    goto LABEL_24;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v8 + 4;
  if (v8 + 4 >= v6)
  {
LABEL_24:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v8 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v6)
      goto LABEL_24;
    v17 = *(_QWORD *)(v2 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *sub_1000A7FB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10));
    result = (_QWORD *)sub_10015D05C(v11);
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000A811C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_10000FFD8, v0, 0);
}

unint64_t sub_1000A8134(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v8;
  _QWORD v9[2];

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
      result = 0x64696C61766E692ELL;
      break;
    case 4uLL:
      result = 0xD000000000000013;
      break;
    case 5uLL:
      result = 0xD000000000000013;
      break;
    case 6uLL:
    case 8uLL:
    case 0xAuLL:
      result = 0xD000000000000016;
      break;
    case 7uLL:
      result = 0xD000000000000012;
      break;
    case 9uLL:
      result = 0xD000000000000010;
      break;
    case 0xBuLL:
      result = 0xD00000000000001ELL;
      break;
    default:
      strcpy((char *)v9, ".underlying(");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v8 = a1;
      sub_1000CFAE4(a1);
      swift_errorRetain(a1);
      v4 = sub_100037A5C(&qword_100265260);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v8, v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      sub_1000CFAF4(a1);
      result = v9[0];
      break;
  }
  return result;
}

unint64_t sub_1000A831C()
{
  unint64_t *v0;

  return sub_1000A8134(*v0);
}

uint64_t sub_1000A8324()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = v0;
  v1[14] = v0;
  v1[15] = *v0;
  v3 = type metadata accessor for UUID(0);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[16] = v4;
  swift_defaultActor_initialize(v0);
  v0[14] = 0x6E6F697461636F4CLL;
  v0[15] = 0xEF65636976726553;
  v5 = (char *)v0 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription;
  v6 = type metadata accessor for XPCServiceDescription(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_trampoline) = 0;
  v7 = OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool;
  sub_100037A5C(&qword_100260610);
  *(_QWORD *)((char *)v2 + v7) = XPCClientConnectionPool.__allocating_init()();
  v8 = OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager;
  *(_QWORD *)((char *)v2 + v8) = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsManager), "init");
  *(_OWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptionFailureRetryInterval) = xmmword_1001F5120;
  v9 = OBJC_IVAR____TtC13findmylocated15LocationService_workItemQueue;
  v10 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v10);
  v11 = WorkItemQueue.__allocating_init(identifier:)(v4);
  *(_QWORD *)((char *)v2 + v9) = v11;
  v12 = OBJC_IVAR____TtC13findmylocated15LocationService_locationUpdateQueue;
  UUID.init()(v11);
  v13 = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000023, 0x80000001001FE400, v4);
  *(_QWORD *)((char *)v2 + v12) = v13;
  v14 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationWorkItemQueue;
  UUID.init()(v13);
  *(_QWORD *)((char *)v2 + v14) = WorkItemQueue.__allocating_init(identifier:)(v4);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask) = 0;
  v15 = (char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream;
  v16 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks) = _swiftEmptyDictionarySingleton;
  type metadata accessor for XPCSessionManager(0);
  v17 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to XPCSessionManager.__allocating_init(name:)
                                   + 1));
  v1[17] = v17;
  *v17 = v1;
  v17[1] = sub_1000A8578;
  return XPCSessionManager.__allocating_init(name:)(0x6E6F697461636F4CLL, 0xEF65636976726553);
}

uint64_t sub_1000A8578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 136));
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13findmylocated15LocationService_xpcSessionManager) = a1;
  return swift_task_switch(sub_1000A85E0, v3, 0);
}

uint64_t sub_1000A85E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager;
  v13 = *(_OWORD *)(v0 + 112);
  v3 = *(void **)(v13 + OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager);
  *(_QWORD *)(v0 + 48) = sub_1000CF8B4;
  *(_QWORD *)(v0 + 56) = v13;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1000A8840;
  *(_QWORD *)(v0 + 40) = &unk_100251F88;
  v4 = _Block_copy((const void *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 56);
  v6 = v3;
  swift_retain(v13);
  swift_release(v5);
  objc_msgSend(v6, "setLocationUpdateBlock:", v4);
  _Block_release(v4);

  v7 = *(void **)(v13 + v2);
  v8 = swift_allocObject(&unk_100251FC0, 32, 7);
  *(_OWORD *)(v8 + 16) = v13;
  *(_QWORD *)(v0 + 96) = sub_1000CF8BC;
  *(_QWORD *)(v0 + 104) = v8;
  *(_QWORD *)(v0 + 64) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 72) = 1107296256;
  *(_QWORD *)(v0 + 80) = sub_1000A8BBC;
  *(_QWORD *)(v0 + 88) = &unk_100251FD8;
  v9 = _Block_copy((const void *)(v0 + 64));
  v10 = *(_QWORD *)(v0 + 104);
  swift_retain(v13);
  v11 = v7;
  swift_release(v10);
  objc_msgSend(v11, "startMonitoringFailedSubscriptions:", v9);
  _Block_release(v9);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000A8764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Transaction(0);
  v4 = swift_allocObject(&unk_100252038, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  static Transaction.asyncTask(name:block:)("secureLocationsManager.setLocationUpdate", 40, 2, &unk_100262770, v4);
  return swift_release(v4);
}

uint64_t sub_1000A87EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100262114);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return sub_1000C4E38(a2);
}

uint64_t sub_1000A8840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  unint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000CE858();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000A889C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  type metadata accessor for Transaction(0);
  v6 = (_QWORD *)swift_allocObject(&unk_100252010, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a2);
  static Transaction.asyncTask(name:block:)("secureLocationsManager.startMonitoringFailedSubscriptions", 57, 2, &unk_100262760, v6);
  return swift_release(v6);
}

uint64_t sub_1000A8934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1000A894C, 0, 0);
}

uint64_t sub_1000A894C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[3];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[3];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[2] = sub_10002BA84(v11, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed subscription received from spd, no location for findMyIds: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[3], 2);
  }

  v14 = v0[3];
  swift_bridgeObjectRetain(v14);
  v16 = sub_10016B5B4(v15);
  v0[5] = v16;
  swift_bridgeObjectRelease(v14);
  v17 = (_QWORD *)swift_task_alloc(dword_10026210C);
  v0[6] = v17;
  *v17 = v0;
  v17[1] = sub_1000A8B6C;
  return sub_1000C4768(v16);
}

uint64_t sub_1000A8B6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000A8BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000A8C14()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[12] = v0;
  v1[13] = *v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v2);
  v1[15] = swift_task_alloc(v2);
  v3 = type metadata accessor for MachServiceName(0);
  v1[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[17] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[18] = swift_task_alloc(v5);
  v1[19] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000A8CC0, v0, 0);
}

uint64_t sub_1000A8CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocationService: startup", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 112);
  v33 = *(_OWORD *)(v0 + 96);

  MachServiceName.init(_:)(0xD00000000000002DLL, 0x80000001001FE3D0);
  v9 = (void *)objc_opt_self(NSXPCInterface);
  v10 = objc_msgSend(v9, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate18LocationXPCService_);
  *(_QWORD *)(v0 + 160) = v10;
  v11 = sub_100037A5C(&qword_1002626F0);
  v12 = swift_allocObject(v11, 120, 15);
  swift_retain(v33);
  swift_defaultActor_initialize(v12);
  v13 = swift_weakInit(v12 + 112, 0);
  swift_weakAssign(v13, v33);
  *(_QWORD *)(v0 + 80) = v12;
  *(_QWORD *)(v0 + 88) = v11;
  v14 = objc_msgSendSuper2((objc_super *)(v0 + 80), "init");
  *(_QWORD *)(v0 + 168) = v14;
  swift_release(v33);
  v15 = objc_msgSend(v9, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate24LocationServiceClientXPC_);
  *(_QWORD *)(v0 + 176) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v30, v6, v31);
  v16 = type metadata accessor for ServiceEntitlements(0);
  *(_QWORD *)(v0 + 40) = v16;
  *(_QWORD *)(v0 + 48) = sub_100018A7C(&qword_1002626F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceEntitlements, (uint64_t)&protocol conformance descriptor for ServiceEntitlements);
  v17 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v17, enum case for ServiceEntitlements.locationService(_:), v16);
  v18 = swift_allocObject(&unk_100251EF8, 24, 7);
  swift_weakInit(v18 + 16, v33);
  v19 = v14;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)(v30, v19, v10, v15, 4096, v0 + 16, &unk_100262708, v18);
  v20 = type metadata accessor for XPCServiceDescription(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 0, 1, v20);
  sub_10000EF6C(v8, v32, &qword_1002626D0);
  v21 = v33 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription;
  swift_beginAccess(v33 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription, v0 + 56, 33, 0);
  sub_10007E710(v32, v21, &qword_1002626D0);
  swift_endAccess(v0 + 56);
  v22 = *(_QWORD *)(v33 + OBJC_IVAR____TtC13findmylocated15LocationService_trampoline);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC13findmylocated15LocationService_trampoline) = v19;
  v23 = v19;
  swift_release(v22);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v33 + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool);
  v24 = swift_allocObject(&unk_100251F20, 32, 7);
  *(_QWORD *)(v0 + 192) = v24;
  *(_OWORD *)(v24 + 16) = v33;
  swift_retain(v33);
  v25 = sub_100037A5C(&qword_100260610);
  v26 = sub_10001013C((unint64_t *)&qword_100260618, &qword_100260610, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v27 = dispatch thunk of Actor.unownedExecutor.getter(v25, v26);
  *(_QWORD *)(v0 + 200) = v27;
  *(_QWORD *)(v0 + 208) = v28;
  return swift_task_switch(sub_1000A90BC, v27, v28);
}

uint64_t sub_1000A90BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 96);
  dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)(&unk_100262718, v1);
  swift_release(v1);
  return swift_task_switch(sub_1000A9118, v2, 0);
}

uint64_t sub_1000A9118()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[25];
  v2 = v0[26];
  swift_retain(v0[12]);
  return swift_task_switch(sub_1000A9158, v1, v2);
}

uint64_t sub_1000A9158()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)(&unk_100262728, v1);
  swift_release(v1);
  return swift_task_switch(sub_1000A91AC, v1, 0);
}

uint64_t sub_1000A91AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9240(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v3 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100006794, 0, 0);
}

uint64_t sub_1000A929C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A92F8, 0, 0);
}

uint64_t sub_1000A92F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "stopProcessing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);

  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject(&unk_100251F48, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v7;
  swift_retain(v7);
  v10 = sub_10005582C(v6, (uint64_t)&unk_100262738, (uint64_t)v9);
  swift_release(v10);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9444()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026209C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000A9F24();
}

uint64_t sub_1000A948C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1002620D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_1000B66A0(a1);
}

uint64_t sub_1000A94DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1[103] = v0;
  v2 = sub_100037A5C(&qword_1002626C8);
  v1[104] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[105] = v3;
  v1[106] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[107] = swift_task_alloc(v4);
  v1[108] = swift_task_alloc(v4);
  v5 = sub_100037A5C(&qword_1002626D0);
  v1[109] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A9598, v0, 0);
}

uint64_t sub_1000A9598()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[109];
  v2 = v0[103];
  v0[110] = *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_xpcSessionManager);
  v3 = v2 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription, v0 + 87, 0, 0);
  sub_10000E37C(v3, v1, &qword_1002626D0);
  v4 = type metadata accessor for XPCServiceDescription(0);
  v0[111] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[112] = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = type metadata accessor for XPCSessionManager(0);
    v8 = sub_100018A7C(&qword_1002626D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCSessionManager, (uint64_t)&protocol conformance descriptor for XPCSessionManager);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
    return swift_task_switch(sub_1000A9694, v9, v10);
  }
  return result;
}

uint64_t sub_1000A9694()
{
  _QWORD *v0;
  _QWORD *v1;

  dispatch thunk of XPCSessionManager.register(service:)(v0[109]);
  v0[113] = 0;
  (*(void (**)(_QWORD, _QWORD))(v0[112] + 8))(v0[109], v0[111]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[114] = v1;
  *v1 = v0;
  v1[1] = sub_1000A9734;
  return daemon.getter();
}

uint64_t sub_1000A9734(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 912);
  v5 = *v1;
  *(_QWORD *)(*v1 + 920) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 928) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000A9824;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000A9824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 928);
  v4[117] = a1;
  v4[118] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[103];
    v7 = sub_1000A9BC0;
  }
  else
  {
    swift_release(v4[115]);
    v7 = sub_1000A98A4;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000A98A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[117];
  v2 = v0[106];
  v3 = v0[105];
  v4 = v0[104];
  v5 = v0[103];
  v6 = swift_allocObject(&unk_100251ED0, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v7, v2, sub_1000CF604, v6, v7);
  swift_release(v6);
  return swift_task_switch(sub_1000A997C, v5, 0);
}

uint64_t sub_1000A997C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[108];
  v2 = v0[107];
  v3 = v0[103];
  v4 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_1002626C0);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream, v0 + 95, 33, 0);
  sub_10007E710(v2, v5, &qword_1002626C0);
  swift_endAccess(v0 + 95);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_1002626E8, v3);
  return swift_asyncLet_get_throwing(v0 + 2, v6, sub_1000A9A88, v0 + 82);
}

uint64_t sub_1000A9A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  *(_QWORD *)(v3 + 952) = v2;
  if (v2)
  {
    v4 = v3 + 720;
    v5 = sub_1000A9C28;
  }
  else
  {
    v4 = v3 + 784;
    v5 = sub_1000A9AB4;
  }
  return swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_1000A9AB4()
{
  uint64_t v0;

  return swift_task_switch(sub_1000A9AC8, *(_QWORD *)(v0 + 824), 0);
}

uint64_t sub_1000A9AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 848);
  v5 = *(_QWORD *)(v0 + 824);
  swift_release(*(_QWORD *)(v0 + 936));
  swift_release_n(v5, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 896) + 8))(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 888));
  v1 = *(_QWORD *)(v0 + 864);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(_QWORD *)(v0 + 848);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 920));
  v1 = *(_QWORD *)(v0 + 864);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(_QWORD *)(v0 + 848);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9C28()
{
  uint64_t v0;

  return swift_task_switch(sub_1000A9C3C, *(_QWORD *)(v0 + 824), 0);
}

uint64_t sub_1000A9C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 824);
  swift_release(*(_QWORD *)(v0 + 936));
  swift_release_n(v1, 2);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 848);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9CB4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002620A4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000AC108();
}

uint64_t sub_1000A9CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_100262094);
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = sub_10003BF7C;
  v8[3] = a5;
  v8[4] = a4;
  return swift_task_switch(sub_10003D9E4, a4, 0);
}

uint64_t sub_1000A9D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_10003D9E4, v1, 0);
}

uint64_t sub_1000A9D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error adding connection: %{public}@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9F24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Priority;
  uint64_t v7;
  unint64_t v8;

  v1[13] = v0;
  v2 = type metadata accessor for Handle(0);
  v1[14] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[15] = v3;
  v1[16] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[18] = v5;
  v1[19] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v1[20] = Priority;
  v7 = *(_QWORD *)(Priority - 8);
  v1[21] = v7;
  v1[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100262640) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v8);
  v1[24] = swift_task_alloc(v8);
  v1[25] = swift_task_alloc(v8);
  v1[26] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000AA020, v0, 0);
}

uint64_t sub_1000AA020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t (*v50)(void);

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "All client connections have been terminated. Invalidating...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 104);

  v7 = OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions;
  *(_QWORD *)(v0 + 224) = OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions;
  v8 = (uint64_t *)(v6 + v7);
  swift_beginAccess(v6 + v7, v0 + 56, 1, 0);
  v9 = *v8;
  *(_QWORD *)(v0 + 232) = v9;
  v10 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v0 + 400) = v10;
  v11 = -1;
  v12 = -1 << v10;
  if (-(-1 << v10) < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *(_QWORD *)(v9 + 64);
  v14 = swift_bridgeObjectRetain(v9);
  if (v13)
  {
    v15 = 0;
    v16 = __clz(__rbit64(v13));
    v17 = (v13 - 1) & v13;
LABEL_9:
    v18 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 168) + 16))(v18, *(_QWORD *)(v9 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v16, *(_QWORD *)(v0 + 160), v14);
    v19 = *(_QWORD *)(v9 + 56) + 24 * v16;
    v20 = sub_100037A5C(&qword_100262648);
    v21 = v18 + *(int *)(v20 + 48);
    v22 = *(_QWORD *)v19;
    v49 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v19;
    *(_OWORD *)(v21 + 8) = v49;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
    swift_retain(v49);
    swift_bridgeObjectRetain(v22);
    goto LABEL_16;
  }
  v23 = 63 - v12;
  if ((unint64_t)(63 - v12) <= 0x7F)
  {
    v15 = 0;
  }
  else
  {
    v24 = *(_QWORD *)(v9 + 72);
    if (v24)
    {
      v15 = 1;
LABEL_13:
      v17 = (v24 - 1) & v24;
      v16 = __clz(__rbit64(v24)) + (v15 << 6);
      goto LABEL_9;
    }
    if (v23 < 0xC0)
    {
      v15 = 1;
    }
    else
    {
      v24 = *(_QWORD *)(v9 + 80);
      if (v24)
      {
        v15 = 2;
        goto LABEL_13;
      }
      if (v23 < 0x100)
      {
        v15 = 2;
      }
      else
      {
        v24 = *(_QWORD *)(v9 + 88);
        if (v24)
        {
          v15 = 3;
          goto LABEL_13;
        }
        if (v23 < 0x140)
        {
          v15 = 3;
        }
        else
        {
          v24 = *(_QWORD *)(v9 + 96);
          if (v24)
          {
            v15 = 4;
            goto LABEL_13;
          }
          v48 = 0;
          v15 = (v23 >> 6) - 1;
          while ((v23 >> 6) - 5 != v48)
          {
            v24 = *(_QWORD *)(v9 + 104 + 8 * v48++);
            if (v24)
            {
              v15 = v48 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  v25 = *(_QWORD *)(v0 + 200);
  v26 = sub_100037A5C(&qword_100262648);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v17 = 0;
LABEL_16:
  *(_QWORD *)(v0 + 240) = v15;
  *(_QWORD *)(v0 + 248) = v17;
  v27 = *(_QWORD *)(v0 + 208);
  sub_10000EF6C(*(_QWORD *)(v0 + 200), v27, &qword_100262640);
  v28 = sub_100037A5C(&qword_100262648);
  *(_QWORD *)(v0 + 256) = v28;
  v29 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v0 + 264) = v29;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  *(_QWORD *)(v0 + 272) = v30;
  if (v30(v27, 1, v28) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    v50 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                            + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
    v31 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                     + 1));
    *(_QWORD *)(v0 + 328) = v31;
    *v31 = v0;
    v31[1] = sub_1000AAF6C;
    return v50();
  }
  v34 = *(_QWORD *)(v0 + 168);
  v33 = *(_QWORD *)(v0 + 176);
  v35 = (uint64_t *)(*(_QWORD *)(v0 + 208) + *(int *)(v28 + 48));
  v36 = *v35;
  *(_QWORD *)(v0 + 280) = *v35;
  *(_QWORD *)(v0 + 288) = v35[1];
  (*(void (**)(uint64_t))(v34 + 32))(v33);
  v37 = *(_QWORD *)(v36 + 16);
  if (!v37)
  {
    v43 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  v38 = *(_QWORD *)(v0 + 120);
  v39 = sub_100037A5C(&qword_100262658);
  v40 = *(_QWORD *)(v38 + 72);
  v41 = *(unsigned __int8 *)(v38 + 80);
  v42 = (v41 + 32) & ~v41;
  v43 = (_QWORD *)swift_allocObject(v39, v42 + v40 * v37, v41 | 7);
  result = j__malloc_size(v43);
  if (v40)
  {
    if (result - v42 == 0x8000000000000000 && v40 == -1)
      goto LABEL_46;
    v43[2] = v37;
    v43[3] = 2 * ((result - v42) / v40);
    v45 = sub_10016AF04((_QWORD *)(v0 + 16), (uint64_t)v43 + v42, v37, v36);
    v46 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain_n(v36, 2);
    result = sub_100086D50(v46);
    if (v45 == v37)
    {
      swift_bridgeObjectRelease(v36);
LABEL_27:
      *(_QWORD *)(v0 + 296) = v43;
      v47 = (_QWORD *)swift_task_alloc(dword_1002620E4);
      *(_QWORD *)(v0 + 304) = v47;
      *v47 = v0;
      v47[1] = sub_1000AA4FC;
      return sub_1000BCEB0((uint64_t)v43, *(_QWORD *)(v0 + 176));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_1000AA4FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_1000ABA94;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 296));
    v5 = sub_1000AA570;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000AA570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t (*v55)(void);
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 288);
  if (v1)
  {
    v2 = swift_retain_n(*(_QWORD *)(v0 + 288), 3);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = *(_QWORD *)(v0 + 152);
      v53 = *(_QWORD *)(v0 + 144);
      v6 = *(_QWORD *)(v0 + 136);
      v7 = swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v56 = v8;
      *(_DWORD *)v7 = 136315138;
      WorkItemQueue.WorkItem.id.getter();
      v9 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v10 = dispatch thunk of CustomStringConvertible.description.getter(v6, v9);
      v12 = v11;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v5, v6);
      *(_QWORD *)(v7 + 4) = sub_10002BA84(v10, v12, &v56);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Canceling %s.", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    v55 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                            + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
    v25 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                     + 1));
    *(_QWORD *)(v0 + 320) = v25;
    *v25 = v0;
    v25[1] = sub_1000AAB0C;
    return v55();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  v15 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 248);
  if (v14)
  {
    v16 = (v14 - 1) & v14;
    v17 = __clz(__rbit64(v14)) | (v15 << 6);
    v18 = *(_QWORD *)(v0 + 232);
LABEL_6:
    v19 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 16))(v19, *(_QWORD *)(v18 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v17, *(_QWORD *)(v0 + 160));
    v20 = *(_QWORD *)(v18 + 56) + 24 * v17;
    v21 = sub_100037A5C(&qword_100262648);
    v22 = v19 + *(int *)(v21 + 48);
    v23 = *(_QWORD *)v20;
    v54 = *(_OWORD *)(v20 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v20;
    *(_OWORD *)(v22 + 8) = v54;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 0, 1, v21);
    swift_retain(v54);
    swift_bridgeObjectRetain(v23);
    v24 = v15;
    goto LABEL_15;
  }
  v26 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v27 = (unint64_t)((1 << *(_BYTE *)(v0 + 400)) + 63) >> 6;
  if (v26 >= v27)
  {
    v24 = *(_QWORD *)(v0 + 240);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 232);
    v28 = v18 + 64;
    v29 = *(_QWORD *)(v18 + 64 + 8 * v26);
    if (v29)
    {
LABEL_12:
      v16 = (v29 - 1) & v29;
      v17 = __clz(__rbit64(v29)) + (v26 << 6);
      v15 = v26;
      goto LABEL_6;
    }
    v24 = v15 + 1;
    if (v15 + 2 < v27)
    {
      v29 = *(_QWORD *)(v28 + 8 * (v15 + 2));
      if (v29)
      {
        v26 = v15 + 2;
        goto LABEL_12;
      }
      v24 = v15 + 2;
      if (v15 + 3 < v27)
      {
        v29 = *(_QWORD *)(v28 + 8 * (v15 + 3));
        if (v29)
        {
          v26 = v15 + 3;
          goto LABEL_12;
        }
        v26 = v15 + 4;
        v24 = v15 + 3;
        if (v15 + 4 < v27)
        {
          v29 = *(_QWORD *)(v28 + 8 * v26);
          if (v29)
            goto LABEL_12;
          v24 = v27 - 1;
          v52 = v27 - 5;
          while (v52 != v15)
          {
            v29 = *(_QWORD *)(v18 + 104 + 8 * v15++);
            if (v29)
            {
              v26 = v15 + 4;
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  v30 = *(_QWORD *)(v0 + 200);
  v31 = sub_100037A5C(&qword_100262648);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v16 = 0;
LABEL_15:
  *(_QWORD *)(v0 + 240) = v24;
  *(_QWORD *)(v0 + 248) = v16;
  v32 = *(_QWORD *)(v0 + 208);
  sub_10000EF6C(*(_QWORD *)(v0 + 200), v32, &qword_100262640);
  v33 = sub_100037A5C(&qword_100262648);
  *(_QWORD *)(v0 + 256) = v33;
  v34 = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v0 + 264) = v34;
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  *(_QWORD *)(v0 + 272) = v35;
  if (v35(v32, 1, v33) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    v55 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                            + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
    v36 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                     + 1));
    *(_QWORD *)(v0 + 328) = v36;
    *v36 = v0;
    v36[1] = sub_1000AAF6C;
    return v55();
  }
  v38 = *(_QWORD *)(v0 + 168);
  v37 = *(_QWORD *)(v0 + 176);
  v39 = (uint64_t *)(*(_QWORD *)(v0 + 208) + *(int *)(v33 + 48));
  v40 = *v39;
  *(_QWORD *)(v0 + 280) = *v39;
  *(_QWORD *)(v0 + 288) = v39[1];
  (*(void (**)(uint64_t))(v38 + 32))(v37);
  v41 = *(_QWORD *)(v40 + 16);
  if (!v41)
  {
    v47 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  v42 = *(_QWORD *)(v0 + 120);
  v43 = sub_100037A5C(&qword_100262658);
  v44 = *(_QWORD *)(v42 + 72);
  v45 = *(unsigned __int8 *)(v42 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = (_QWORD *)swift_allocObject(v43, v46 + v44 * v41, v45 | 7);
  result = j__malloc_size(v47);
  if (!v44)
    goto LABEL_41;
  if (result - v46 == 0x8000000000000000 && v44 == -1)
    goto LABEL_43;
  v47[2] = v41;
  v47[3] = 2 * ((result - v46) / v44);
  v49 = sub_10016AF04((_QWORD *)(v0 + 16), (uint64_t)v47 + v46, v41, v40);
  v50 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n(v40, 2);
  result = sub_100086D50(v50);
  if (v49 == v41)
  {
    swift_bridgeObjectRelease(v40);
LABEL_27:
    *(_QWORD *)(v0 + 296) = v47;
    v51 = (_QWORD *)swift_task_alloc(dword_1002620E4);
    *(_QWORD *)(v0 + 304) = v51;
    *v51 = v0;
    v51[1] = sub_1000AA4FC;
    return sub_1000BCEB0((uint64_t)v47, *(_QWORD *)(v0 + 176));
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000AAB0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  return swift_task_switch(sub_1000AAB64, v1, 0);
}

uint64_t sub_1000AAB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  __int128 v41;
  uint64_t (*v42)(void);

  v1 = *(_QWORD *)(v0 + 288);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  swift_release_n(v1, 2);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v4 << 6);
    v7 = *(_QWORD *)(v0 + 232);
LABEL_3:
    v8 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 16))(v8, *(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v6, *(_QWORD *)(v0 + 160));
    v9 = *(_QWORD *)(v7 + 56) + 24 * v6;
    v10 = sub_100037A5C(&qword_100262648);
    v11 = v8 + *(int *)(v10 + 48);
    v12 = *(_QWORD *)v9;
    v41 = *(_OWORD *)(v9 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v9;
    *(_OWORD *)(v11 + 8) = v41;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
    swift_retain(v41);
    swift_bridgeObjectRetain(v12);
    v13 = v4;
    goto LABEL_10;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 400)) + 63) >> 6;
  if (v14 >= v15)
  {
    v13 = *(_QWORD *)(v0 + 240);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 232);
    v16 = v7 + 64;
    v17 = *(_QWORD *)(v7 + 64 + 8 * v14);
    if (v17)
    {
LABEL_7:
      v5 = (v17 - 1) & v17;
      v6 = __clz(__rbit64(v17)) + (v14 << 6);
      v4 = v14;
      goto LABEL_3;
    }
    v13 = v4 + 1;
    if (v4 + 2 < v15)
    {
      v17 = *(_QWORD *)(v16 + 8 * (v4 + 2));
      if (v17)
      {
        v14 = v4 + 2;
        goto LABEL_7;
      }
      v13 = v4 + 2;
      if (v4 + 3 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * (v4 + 3));
        if (v17)
        {
          v14 = v4 + 3;
          goto LABEL_7;
        }
        v14 = v4 + 4;
        v13 = v4 + 3;
        if (v4 + 4 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * v14);
          if (v17)
            goto LABEL_7;
          v13 = v15 - 1;
          v40 = v15 - 5;
          while (v40 != v4)
          {
            v17 = *(_QWORD *)(v7 + 104 + 8 * v4++);
            if (v17)
            {
              v14 = v4 + 4;
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
  v18 = *(_QWORD *)(v0 + 200);
  v19 = sub_100037A5C(&qword_100262648);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v5 = 0;
LABEL_10:
  *(_QWORD *)(v0 + 240) = v13;
  *(_QWORD *)(v0 + 248) = v5;
  v20 = *(_QWORD *)(v0 + 208);
  sub_10000EF6C(*(_QWORD *)(v0 + 200), v20, &qword_100262640);
  v21 = sub_100037A5C(&qword_100262648);
  *(_QWORD *)(v0 + 256) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v0 + 264) = v22;
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  *(_QWORD *)(v0 + 272) = v23;
  if (v23(v20, 1, v21) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    v42 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                            + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
    v24 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                     + 1));
    *(_QWORD *)(v0 + 328) = v24;
    *v24 = v0;
    v24[1] = sub_1000AAF6C;
    return v42();
  }
  v26 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 176);
  v27 = (uint64_t *)(*(_QWORD *)(v0 + 208) + *(int *)(v21 + 48));
  v28 = *v27;
  *(_QWORD *)(v0 + 280) = *v27;
  *(_QWORD *)(v0 + 288) = v27[1];
  (*(void (**)(uint64_t))(v26 + 32))(v25);
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    v35 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v30 = *(_QWORD *)(v0 + 120);
  v31 = sub_100037A5C(&qword_100262658);
  v32 = *(_QWORD *)(v30 + 72);
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = (_QWORD *)swift_allocObject(v31, v34 + v32 * v29, v33 | 7);
  result = j__malloc_size(v35);
  if (!v32)
    goto LABEL_35;
  if (result - v34 == 0x8000000000000000 && v32 == -1)
    goto LABEL_37;
  v35[2] = v29;
  v35[3] = 2 * ((result - v34) / v32);
  v37 = sub_10016AF04((_QWORD *)(v0 + 16), (uint64_t)v35 + v34, v29, v28);
  v38 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n(v28, 2);
  result = sub_100086D50(v38);
  if (v37 == v29)
  {
    swift_bridgeObjectRelease(v28);
LABEL_21:
    *(_QWORD *)(v0 + 296) = v35;
    v39 = (_QWORD *)swift_task_alloc(dword_1002620E4);
    *(_QWORD *)(v0 + 304) = v39;
    *v39 = v0;
    v39[1] = sub_1000AA4FC;
    return sub_1000BCEB0((uint64_t)v35, *(_QWORD *)(v0 + 176));
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000AAF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_1000AAFC4, v1, 0);
}

void sub_1000AAFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v3);
  v4 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions;
  *(_QWORD *)(v0 + 336) = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions;
  v5 = (uint64_t *)(v2 + v4);
  swift_beginAccess(v5, v0 + 80, 1, 0);
  v6 = *v5;
  *(_QWORD *)(v0 + 344) = *v5;
  v7 = *(_BYTE *)(v6 + 32);
  *(_BYTE *)(v0 + 401) = v7;
  v8 = 1 << v7;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = swift_bridgeObjectRetain(v6);
  v12 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_5:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v14 = v13 | (v12 << 6);
  v15 = *(_QWORD *)(v0 + 344);
LABEL_6:
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 168) + 16))(v18, *(_QWORD *)(v15 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v14, *(_QWORD *)(v0 + 160), v11);
  v19 = *(_QWORD *)(v15 + 56) + 24 * v14;
  v20 = v18 + *(int *)(v16 + 48);
  v21 = *(_QWORD *)v19;
  v50 = *(_OWORD *)(v19 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v19;
  *(_OWORD *)(v20 + 8) = v50;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
  swift_retain(v50);
  swift_bridgeObjectRetain(v21);
  while (1)
  {
    *(_QWORD *)(v0 + 352) = v12;
    *(_QWORD *)(v0 + 360) = v10;
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
    v28 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 192);
    sub_10000EF6C(*(_QWORD *)(v0 + 184), v29, &qword_100262640);
    if (v27(v29, 1, v28) == 1)
    {
      swift_release(*(_QWORD *)(v0 + 344));
      v51 = (void (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                           + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
      v37 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                       + 1));
      *(_QWORD *)(v0 + 392) = v37;
      *v37 = v0;
      v37[1] = sub_1000AB938;
LABEL_34:
      v51();
      return;
    }
    v30 = *(_QWORD *)(v0 + 192);
    v31 = (uint64_t *)(v30 + *(int *)(*(_QWORD *)(v0 + 256) + 48));
    v32 = *v31;
    *(_QWORD *)(v0 + 368) = *v31;
    v33 = v31[1];
    *(_QWORD *)(v0 + 376) = v33;
    if (v33)
    {
      v38 = swift_retain_n(v33, 3);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = *(_QWORD *)(v0 + 152);
        v52 = *(_QWORD *)(v0 + 144);
        v42 = *(_QWORD *)(v0 + 136);
        v43 = swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v53 = v44;
        *(_DWORD *)v43 = 136315138;
        WorkItemQueue.WorkItem.id.getter();
        v45 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        v48 = v47;
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v41, v42);
        *(_QWORD *)(v43 + 4) = sub_10002BA84(v46, v48, &v53);
        swift_release_n(v33, 2);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Canceling %s.", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_release_n(v33, 2);
      }
      v51 = (void (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                           + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
      v49 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                       + 1));
      *(_QWORD *)(v0 + 384) = v49;
      *v49 = v0;
      v49[1] = sub_1000AB478;
      goto LABEL_34;
    }
    v34 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v30, v34);
    if (v10)
      goto LABEL_5;
LABEL_7:
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 401)) + 63) >> 6;
    if (v22 >= v23)
    {
      v26 = v12;
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 344);
      v24 = v15 + 64;
      v25 = *(_QWORD *)(v15 + 64 + 8 * v22);
      if (v25)
        goto LABEL_10;
      v26 = v12 + 1;
      if (v12 + 2 < v23)
      {
        v25 = *(_QWORD *)(v24 + 8 * (v12 + 2));
        if (v25)
        {
          v22 = v12 + 2;
LABEL_10:
          v10 = (v25 - 1) & v25;
          v14 = __clz(__rbit64(v25)) + (v22 << 6);
          v12 = v22;
          goto LABEL_6;
        }
        v26 = v12 + 2;
        if (v12 + 3 < v23)
        {
          v25 = *(_QWORD *)(v24 + 8 * (v12 + 3));
          if (v25)
          {
            v22 = v12 + 3;
            goto LABEL_10;
          }
          v22 = v12 + 4;
          v26 = v12 + 3;
          if (v12 + 4 < v23)
          {
            v25 = *(_QWORD *)(v24 + 8 * v22);
            if (v25)
              goto LABEL_10;
            v26 = v23 - 1;
            v36 = v23 - 5;
            while (v36 != v12)
            {
              v25 = *(_QWORD *)(v15 + 104 + 8 * v12++);
              if (v25)
              {
                v22 = v12 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 264) + 56))(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 256), v11);
    v10 = 0;
    v12 = v26;
  }
  __break(1u);
}

uint64_t sub_1000AB478()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  return swift_task_switch(sub_1000AB4D0, v1, 0);
}

uint64_t sub_1000AB4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
  swift_release_n(v1, 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 360);
  if (!v7)
    goto LABEL_4;
LABEL_2:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v9 = v8 | (v6 << 6);
  v10 = *(_QWORD *)(v0 + 344);
LABEL_3:
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 16))(v13, *(_QWORD *)(v10 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v9, *(_QWORD *)(v0 + 160));
  v14 = *(_QWORD *)(v10 + 56) + 24 * v9;
  v15 = v13 + *(int *)(v11 + 48);
  v16 = *(_QWORD *)v14;
  v45 = *(_OWORD *)(v14 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v14;
  *(_OWORD *)(v15 + 8) = v45;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
  swift_retain(v45);
  swift_bridgeObjectRetain(v16);
  while (1)
  {
    *(_QWORD *)(v0 + 352) = v6;
    *(_QWORD *)(v0 + 360) = v7;
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
    v23 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 192);
    sub_10000EF6C(*(_QWORD *)(v0 + 184), v24, &qword_100262640);
    if (v22(v24, 1, v23) == 1)
    {
      swift_release(*(_QWORD *)(v0 + 344));
      v46 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                              + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
      v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                       + 1));
      *(_QWORD *)(v0 + 392) = v32;
      *v32 = v0;
      v32[1] = sub_1000AB938;
      return v46();
    }
    v25 = *(_QWORD *)(v0 + 192);
    v26 = (uint64_t *)(v25 + *(int *)(*(_QWORD *)(v0 + 256) + 48));
    v27 = *v26;
    *(_QWORD *)(v0 + 368) = *v26;
    v28 = v26[1];
    *(_QWORD *)(v0 + 376) = v28;
    if (v28)
    {
      v33 = swift_retain_n(v28, 3);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = *(_QWORD *)(v0 + 152);
        v47 = *(_QWORD *)(v0 + 144);
        v37 = *(_QWORD *)(v0 + 136);
        v38 = swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v48 = v39;
        *(_DWORD *)v38 = 136315138;
        WorkItemQueue.WorkItem.id.getter();
        v40 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
        v43 = v42;
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v36, v37);
        *(_QWORD *)(v38 + 4) = sub_10002BA84(v41, v43, &v48);
        swift_release_n(v28, 2);
        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Canceling %s.", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_release_n(v28, 2);
      }
      v46 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                              + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
      v44 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                       + 1));
      *(_QWORD *)(v0 + 384) = v44;
      *v44 = v0;
      v44[1] = sub_1000AB478;
      return v46();
    }
    v29 = *(_QWORD *)(v0 + 160);
    v30 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease(v27);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v25, v29);
    if (v7)
      goto LABEL_2;
LABEL_4:
    v17 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    v18 = (unint64_t)((1 << *(_BYTE *)(v0 + 401)) + 63) >> 6;
    if (v17 >= v18)
    {
      v21 = v6;
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 344);
      v19 = v10 + 64;
      v20 = *(_QWORD *)(v10 + 64 + 8 * v17);
      if (v20)
        goto LABEL_7;
      v21 = v6 + 1;
      if (v6 + 2 < v18)
      {
        v20 = *(_QWORD *)(v19 + 8 * (v6 + 2));
        if (v20)
        {
          v17 = v6 + 2;
LABEL_7:
          v7 = (v20 - 1) & v20;
          v9 = __clz(__rbit64(v20)) + (v17 << 6);
          v6 = v17;
          goto LABEL_3;
        }
        v21 = v6 + 2;
        if (v6 + 3 < v18)
        {
          v20 = *(_QWORD *)(v19 + 8 * (v6 + 3));
          if (v20)
          {
            v17 = v6 + 3;
            goto LABEL_7;
          }
          v17 = v6 + 4;
          v21 = v6 + 3;
          if (v6 + 4 < v18)
          {
            v20 = *(_QWORD *)(v19 + 8 * v17);
            if (v20)
              goto LABEL_7;
            v21 = v18 - 1;
            v31 = v18 - 5;
            while (v31 != v6)
            {
              v20 = *(_QWORD *)(v10 + 104 + 8 * v6++);
              if (v20)
              {
                v17 = v6 + 4;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 56))(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 256));
    v7 = 0;
    v6 = v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AB938()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  return swift_task_switch(sub_1000AB990, v1, 0);
}

uint64_t sub_1000AB990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v3);
  v4 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask);
  if (v5)
  {
    swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask));
    Task.cancel()();
    swift_release(v5);
    v6 = *(_QWORD *)(v2 + v4);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v2 + v4) = 0;
  swift_release(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ABA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t (*v65)(void);
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16);
    swift_retain(*(_QWORD *)(v0 + 296));
    do
    {
      v7 = *(_QWORD *)(v0 + 312);
      v8 = *(_QWORD *)(v0 + 128);
      v6(v8, v4, *(_QWORD *)(v0 + 112));
      sub_1000CF2BC(v8, v7);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      v4 += v5;
      --v2;
    }
    while (v2);
    v9 = *(_QWORD *)(v0 + 312);
    v1 = *(_QWORD *)(v0 + 296);
    swift_release(v1);
    v10 = v9;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 312);
  }
  swift_errorRelease(v10);
  swift_release(v1);
  v11 = *(_QWORD *)(v0 + 288);
  if (v11)
  {
    v12 = swift_retain_n(*(_QWORD *)(v0 + 288), 3);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *(_QWORD *)(v0 + 152);
      v63 = *(_QWORD *)(v0 + 144);
      v16 = *(_QWORD *)(v0 + 136);
      v17 = swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v66 = v18;
      *(_DWORD *)v17 = 136315138;
      WorkItemQueue.WorkItem.id.getter();
      v19 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      v22 = v21;
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v15, v16);
      *(_QWORD *)(v17 + 4) = sub_10002BA84(v20, v22, &v66);
      swift_release_n(v11, 2);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Canceling %s.", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_release_n(v11, 2);
    }
    v65 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                            + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
    v35 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                     + 1));
    *(_QWORD *)(v0 + 320) = v35;
    *v35 = v0;
    v35[1] = sub_1000AAB0C;
    return v65();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  v25 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 248);
  if (v24)
  {
    v26 = (v24 - 1) & v24;
    v27 = __clz(__rbit64(v24)) | (v25 << 6);
    v28 = *(_QWORD *)(v0 + 232);
LABEL_11:
    v29 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 16))(v29, *(_QWORD *)(v28 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * v27, *(_QWORD *)(v0 + 160));
    v30 = *(_QWORD *)(v28 + 56) + 24 * v27;
    v31 = sub_100037A5C(&qword_100262648);
    v32 = v29 + *(int *)(v31 + 48);
    v33 = *(_QWORD *)v30;
    v64 = *(_OWORD *)(v30 + 8);
    *(_QWORD *)v32 = *(_QWORD *)v30;
    *(_OWORD *)(v32 + 8) = v64;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, 0, 1, v31);
    swift_retain(v64);
    swift_bridgeObjectRetain(v33);
    v34 = v25;
    goto LABEL_20;
  }
  v36 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v37 = (unint64_t)((1 << *(_BYTE *)(v0 + 400)) + 63) >> 6;
  if (v36 >= v37)
  {
    v34 = *(_QWORD *)(v0 + 240);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 232);
    v38 = v28 + 64;
    v39 = *(_QWORD *)(v28 + 64 + 8 * v36);
    if (v39)
    {
LABEL_17:
      v26 = (v39 - 1) & v39;
      v27 = __clz(__rbit64(v39)) + (v36 << 6);
      v25 = v36;
      goto LABEL_11;
    }
    v34 = v25 + 1;
    if (v25 + 2 < v37)
    {
      v39 = *(_QWORD *)(v38 + 8 * (v25 + 2));
      if (v39)
      {
        v36 = v25 + 2;
        goto LABEL_17;
      }
      v34 = v25 + 2;
      if (v25 + 3 < v37)
      {
        v39 = *(_QWORD *)(v38 + 8 * (v25 + 3));
        if (v39)
        {
          v36 = v25 + 3;
          goto LABEL_17;
        }
        v36 = v25 + 4;
        v34 = v25 + 3;
        if (v25 + 4 < v37)
        {
          v39 = *(_QWORD *)(v38 + 8 * v36);
          if (v39)
            goto LABEL_17;
          v34 = v37 - 1;
          v62 = v37 - 5;
          while (v62 != v25)
          {
            v39 = *(_QWORD *)(v28 + 104 + 8 * v25++);
            if (v39)
            {
              v36 = v25 + 4;
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
  v40 = *(_QWORD *)(v0 + 200);
  v41 = sub_100037A5C(&qword_100262648);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v26 = 0;
LABEL_20:
  *(_QWORD *)(v0 + 240) = v34;
  *(_QWORD *)(v0 + 248) = v26;
  v42 = *(_QWORD *)(v0 + 208);
  sub_10000EF6C(*(_QWORD *)(v0 + 200), v42, &qword_100262640);
  v43 = sub_100037A5C(&qword_100262648);
  *(_QWORD *)(v0 + 256) = v43;
  v44 = *(_QWORD *)(v43 - 8);
  *(_QWORD *)(v0 + 264) = v44;
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  *(_QWORD *)(v0 + 272) = v45;
  if (v45(v42, 1, v43) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    v65 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                            + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
    v46 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                     + 1));
    *(_QWORD *)(v0 + 328) = v46;
    *v46 = v0;
    v46[1] = sub_1000AAF6C;
    return v65();
  }
  v48 = *(_QWORD *)(v0 + 168);
  v47 = *(_QWORD *)(v0 + 176);
  v49 = (uint64_t *)(*(_QWORD *)(v0 + 208) + *(int *)(v43 + 48));
  v50 = *v49;
  *(_QWORD *)(v0 + 280) = *v49;
  *(_QWORD *)(v0 + 288) = v49[1];
  (*(void (**)(uint64_t))(v48 + 32))(v47);
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51)
  {
    v57 = _swiftEmptyArrayStorage;
    goto LABEL_32;
  }
  v52 = *(_QWORD *)(v0 + 120);
  v53 = sub_100037A5C(&qword_100262658);
  v54 = *(_QWORD *)(v52 + 72);
  v55 = *(unsigned __int8 *)(v52 + 80);
  v56 = (v55 + 32) & ~v55;
  v57 = (_QWORD *)swift_allocObject(v53, v56 + v54 * v51, v55 | 7);
  result = j__malloc_size(v57);
  if (!v54)
    goto LABEL_46;
  if (result - v56 == 0x8000000000000000 && v54 == -1)
    goto LABEL_48;
  v57[2] = v51;
  v57[3] = 2 * ((result - v56) / v54);
  v59 = sub_10016AF04((_QWORD *)(v0 + 16), (uint64_t)v57 + v56, v51, v50);
  v60 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n(v50, 2);
  result = sub_100086D50(v60);
  if (v59 == v51)
  {
    swift_bridgeObjectRelease(v50);
LABEL_32:
    *(_QWORD *)(v0 + 296) = v57;
    v61 = (_QWORD *)swift_task_alloc(dword_1002620E4);
    *(_QWORD *)(v0 + 304) = v61;
    *v61 = v0;
    v61[1] = sub_1000AA4FC;
    return sub_1000BCEB0((uint64_t)v57, *(_QWORD *)(v0 + 176));
  }
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1000AC108()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[29] = v0;
  v2 = type metadata accessor for Device(0);
  v1[30] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[31] = v3;
  v1[32] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_100260538);
  v1[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Handle(0);
  v1[34] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[35] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[36] = swift_task_alloc(v7);
  v1[37] = swift_task_alloc(v7);
  v8 = type metadata accessor for HandleType(0);
  v1[38] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[39] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[40] = swift_task_alloc(v10);
  v1[41] = swift_task_alloc(v10);
  v11 = type metadata accessor for Friend(0);
  v1[42] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[43] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[44] = swift_task_alloc(v13);
  v1[45] = swift_task_alloc(v13);
  v1[46] = swift_task_alloc(v13);
  v1[47] = swift_task_alloc(v13);
  v1[48] = swift_task_alloc(v13);
  v1[49] = swift_task_alloc(v13);
  v14 = type metadata accessor for DataManager.State(0);
  v1[50] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[51] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[52] = swift_task_alloc(v16);
  v1[53] = swift_task_alloc(v16);
  v1[54] = swift_task_alloc(v16);
  v1[55] = swift_task_alloc(v16);
  v17 = sub_100037A5C(&qword_1002626B0);
  v1[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100037A5C(&qword_1002626B8);
  v1[57] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v1[58] = v19;
  v1[59] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100037A5C(&qword_1002626C0);
  v1[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100037A5C((uint64_t *)&unk_100262140);
  v1[61] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v1[62] = v22;
  v1[63] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AC354, v0, 0);
}

uint64_t sub_1000AC354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 472);
    v2 = *(_QWORD *)(v1 + 480);
    v4 = *(_QWORD *)(v1 + 440);
    v5 = *(_QWORD *)(v1 + 448);
    v7 = *(_QWORD *)(v1 + 424);
    v6 = *(_QWORD *)(v1 + 432);
    v8 = *(_QWORD *)(v1 + 416);
    v10 = *(_QWORD *)(v1 + 384);
    v9 = *(_QWORD *)(v1 + 392);
    v43 = *(_QWORD *)(v1 + 376);
    v45 = *(_QWORD *)(v1 + 368);
    v47 = *(_QWORD *)(v1 + 360);
    v49 = *(_QWORD *)(v1 + 352);
    v51 = *(_QWORD *)(v1 + 328);
    v53 = *(_QWORD *)(v1 + 320);
    v55 = *(_QWORD *)(v1 + 296);
    v57 = *(_QWORD *)(v1 + 288);
    v59 = *(_QWORD *)(v1 + 264);
    v61 = *(_QWORD *)(v1 + 256);
    swift_task_dealloc(*(_QWORD *)(v1 + 504));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027ABA8);
  *(_QWORD *)(v1 + 512) = v13;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Monitoring DataManager stream", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v1 + 488);
  v18 = *(_QWORD *)(v1 + 496);
  v19 = *(_QWORD *)(v1 + 480);
  v20 = *(_QWORD *)(v1 + 232);

  v21 = v20 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream;
  swift_beginAccess(v20 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream, v1 + 120, 0, 0);
  sub_10000E37C(v21, v19, &qword_1002626C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
  {
    v22 = sub_1000087A0(*(_QWORD *)(v1 + 480), &qword_1002626C0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "dataManagerStateStream should be available by now!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_1000CEF10();
    v62 = swift_allocError(&type metadata for LocationService.Error, v26, 0, 0);
    *v27 = 11;
    swift_willThrow(v62);
    v28 = *(_QWORD *)(v1 + 472);
    v29 = *(_QWORD *)(v1 + 480);
    v31 = *(_QWORD *)(v1 + 440);
    v30 = *(_QWORD *)(v1 + 448);
    v32 = *(_QWORD *)(v1 + 424);
    v33 = *(_QWORD *)(v1 + 432);
    v34 = *(_QWORD *)(v1 + 416);
    v36 = *(_QWORD *)(v1 + 384);
    v35 = *(_QWORD *)(v1 + 392);
    v42 = *(_QWORD *)(v1 + 376);
    v44 = *(_QWORD *)(v1 + 368);
    v46 = *(_QWORD *)(v1 + 360);
    v48 = *(_QWORD *)(v1 + 352);
    v50 = *(_QWORD *)(v1 + 328);
    v52 = *(_QWORD *)(v1 + 320);
    v54 = *(_QWORD *)(v1 + 296);
    v56 = *(_QWORD *)(v1 + 288);
    v58 = *(_QWORD *)(v1 + 264);
    v60 = *(_QWORD *)(v1 + 256);
    swift_task_dealloc(*(_QWORD *)(v1 + 504));
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  v38 = *(_QWORD *)(v1 + 488);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 496) + 32))(*(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 480), v38);
  AsyncStream.makeAsyncIterator()(v38);
  v39 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  *(_QWORD *)(v1 + 520) = v39;
  *(_QWORD *)(v1 + 528) = OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager;
  *(_DWORD *)(v1 + 704) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v1 + 708) = enum case for HandleType.following(_:);
  *(_DWORD *)(v1 + 712) = enum case for HandleType.futureFollower(_:);
  *(_DWORD *)(v1 + 716) = enum case for HandleType.futureFollowing(_:);
  *(_DWORD *)(v1 + 720) = enum case for HandleType.pendingOffer(_:);
  *(_QWORD *)(v1 + 536) = 0;
  v40 = *(_QWORD *)(v1 + 232);
  v41 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 544) = v41;
  *v41 = v1;
  v41[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 448), v40, v39, *(_QWORD *)(v1 + 456));
}

uint64_t sub_1000AC85C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  return swift_task_switch(sub_1000AC8B4, v1, 0);
}

uint64_t sub_1000AC8B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = v0[56];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[51] + 48))(v1, 1, v0[50]) == 1)
  {
    v3 = v0[62];
    v2 = v0[63];
    v4 = v0[61];
    (*(void (**)(_QWORD, _QWORD))(v0[58] + 8))(v0[59], v0[57]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v6 = v0[59];
    v5 = v0[60];
    v7 = v0[55];
    v8 = v0[56];
    v10 = v0[53];
    v9 = v0[54];
    v11 = v0[52];
    v13 = v0[48];
    v12 = v0[49];
    v47 = v0[47];
    v49 = v0[46];
    v51 = v0[45];
    v53 = v0[44];
    v55 = v0[41];
    v57 = v0[40];
    v59 = v0[37];
    v61 = v0[36];
    v63 = v0[33];
    v65 = v0[32];
    swift_task_dealloc(v0[63]);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    v14 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[67];
    v16 = sub_1000CF278(v1, v0[55]);
    static Task<>.checkCancellation()(v16);
    if (!v15)
    {
      v33 = sub_10003E7A8(v0[55], v0[54]);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      v36 = os_log_type_enabled(v34, v35);
      v37 = v0[54];
      if (v36)
      {
        v38 = swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v66 = v39;
        *(_DWORD *)v38 = 136315138;
        sub_1000DF70C();
        v41 = v40;
        *(_QWORD *)(v38 + 4) = sub_10002BA84(v42, v40, &v66);
        swift_bridgeObjectRelease(v41);
        sub_10003E76C(v37);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "dataManagerStateStream event: %s", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        sub_10003E76C(v0[54]);
      }

      v43 = v0[53];
      v44 = v0[50];
      sub_10003E7A8(v0[55], v43);
      v45 = (char *)sub_1000ACCBC + 4 * byte_1001F4CFC[swift_getEnumCaseMultiPayload(v43, v44)];
      __asm { BR              X10 }
    }
    v18 = v0[62];
    v17 = v0[63];
    v19 = v0[61];
    v21 = v0[58];
    v20 = v0[59];
    v22 = v0[57];
    sub_10003E76C(v0[55]);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v23 = v0[59];
    v24 = v0[60];
    v26 = v0[55];
    v25 = v0[56];
    v28 = v0[53];
    v27 = v0[54];
    v29 = v0[52];
    v30 = v0[48];
    v31 = v0[49];
    v46 = v0[47];
    v48 = v0[46];
    v50 = v0[45];
    v52 = v0[44];
    v54 = v0[41];
    v56 = v0[40];
    v58 = v0[37];
    v60 = v0[36];
    v62 = v0[33];
    v64 = v0[32];
    swift_task_dealloc(v0[63]);
    swift_task_dealloc(v24);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    v14 = (uint64_t (*)(void))v0[1];
  }
  return v14();
}

uint64_t sub_1000ACCBC()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = sub_10003E7A8(v0[55], v0[52]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[55];
  v6 = v0[52];
  if (v4)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_1000DF70C();
    v10 = v9;
    *(_QWORD *)(v7 + 4) = sub_10002BA84(v11, v9, &v16);
    swift_bridgeObjectRelease(v10);
    sub_10003E76C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ignoring %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    sub_10003E76C(v6);
  }
  sub_10003E76C(v5);
  v0[67] = 0;
  v12 = v0[65];
  v13 = v0[29];
  v14 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[68] = v14;
  *v14 = v0;
  v14[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(v0[56], v13, v12, v0[57]);
}

uint64_t sub_1000ACE24()
{
  uint64_t v0;

  sub_1000087A0(*(_QWORD *)(v0 + 424), &qword_100260538);
  return sub_1000ACCBC();
}

uint64_t sub_1000ACE38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_log_type_t type, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  _QWORD *v68;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(_QWORD, _QWORD, _QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[13];

  v112 = v33;
  v114 = v32;
  v36 = *(_QWORD *)(v34 + 384);
  v35 = *(_QWORD *)(v34 + 392);
  v38 = *(_QWORD *)(v34 + 336);
  v37 = *(_QWORD *)(v34 + 344);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 32))(v35, *(_QWORD *)(v34 + 424), v38);
  v39 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v37 + 16);
  *(_QWORD *)(v34 + 552) = v39;
  v116 = v39;
  v40 = v39(v36, v35, v38);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v44 = *(_QWORD *)(v34 + 384);
  v45 = *(_QWORD *)(v34 + 344);
  if (v43)
  {
    v46 = *(_QWORD *)(v34 + 328);
    v47 = *(_QWORD *)(v34 + 304);
    v105 = *(_QWORD *)(v34 + 312);
    v107 = *(_QWORD *)(v34 + 336);
    v48 = swift_slowAlloc(12, -1);
    v109 = swift_slowAlloc(32, -1);
    v119[0] = v109;
    *(_DWORD *)v48 = 136315138;
    Friend.type.getter(v109);
    v49 = sub_100018A7C(&qword_100261D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v47, v49);
    v52 = v51;
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v46, v47);
    *(_QWORD *)(v48 + 4) = sub_10002BA84(v50, v52, v119);
    swift_bridgeObjectRelease(v52);
    v53 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v53(v44, v107);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "dataManagerStateStream added friend of type: %s", (uint8_t *)v48, 0xCu);
    swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v109, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v53 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v53(*(_QWORD *)(v34 + 384), *(_QWORD *)(v34 + 336));
  }

  *(_QWORD *)(v34 + 560) = v53;
  v54 = *(_DWORD *)(v34 + 704);
  v56 = *(_QWORD *)(v34 + 312);
  v55 = *(_QWORD *)(v34 + 320);
  v57 = *(_QWORD *)(v34 + 304);
  Friend.type.getter(v58);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 88))(v55, v57);
  if ((_DWORD)v59 == v54)
  {
    v60 = *(_QWORD *)(v34 + 296);
    v61 = *(_QWORD *)(v34 + 272);
    v62 = *(_QWORD *)(v34 + 280);
    v63 = Friend.handle.getter(v59);
    v64 = Handle.serverID.getter(v63);
    v66 = v65;
    *(_QWORD *)(v34 + 568) = v64;
    *(_QWORD *)(v34 + 576) = v65;
    v67 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    *(_QWORD *)(v34 + 584) = v67;
    v67(v60, v61);
    if (v66)
    {
      v68 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
      *(_QWORD *)(v34 + 592) = v68;
      *v68 = v34;
      v68[1] = sub_1000AD4BC;
      return daemon.getter();
    }
    v100 = *(_QWORD *)(v34 + 392);
    v101 = *(_QWORD *)(v34 + 336);
LABEL_19:
    v53(v100, v101);
    JUMPOUT(0x1000ACDBCLL);
  }
  if ((_DWORD)v59 != *(_DWORD *)(v34 + 708))
  {
    if ((_DWORD)v59 != *(_DWORD *)(v34 + 712)
      && (_DWORD)v59 != *(_DWORD *)(v34 + 716)
      && (_DWORD)v59 != *(_DWORD *)(v34 + 720))
    {
      v82 = v116(*(_QWORD *)(v34 + 352), *(_QWORD *)(v34 + 392), *(_QWORD *)(v34 + 336));
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.error.getter(v83);
      v85 = os_log_type_enabled(v83, v84);
      v86 = *(_QWORD *)(v34 + 440);
      v87 = *(_QWORD *)(v34 + 392);
      v88 = *(_QWORD *)(v34 + 352);
      v89 = *(_QWORD *)(v34 + 336);
      if (v85)
      {
        v115 = *(_QWORD *)(v34 + 336);
        v118 = *(_QWORD *)(v34 + 440);
        v90 = *(_QWORD *)(v34 + 328);
        v92 = *(_QWORD *)(v34 + 304);
        v91 = *(_QWORD *)(v34 + 312);
        v93 = swift_slowAlloc(22, -1);
        v113 = swift_slowAlloc(64, -1);
        v119[0] = v113;
        *(_DWORD *)v93 = 136446466;
        v94 = sub_10002BA84(0xD000000000000019, 0x80000001001FE3B0, v119);
        *(_QWORD *)(v93 + 4) = v94;
        *(_WORD *)(v93 + 12) = 2080;
        v108 = v84;
        Friend.type.getter(v94);
        v95 = sub_100018A7C(&qword_100261D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
        v96 = dispatch thunk of CustomStringConvertible.description.getter(v92, v95);
        v111 = v87;
        v98 = v97;
        v99 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
        v99(v90, v92);
        *(_QWORD *)(v93 + 14) = sub_10002BA84(v96, v98, v119);
        swift_bridgeObjectRelease(v98);
        v53(v88, v115);
        _os_log_impl((void *)&_mh_execute_header, v83, v108, "%{public}s Unexpected friend.type %s!", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy(v113, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v93, -1, -1);

        v53(v111, v115);
        sub_10003E76C(v118);
      }
      else
      {
        v103 = *(_QWORD *)(v34 + 312);

        v53(v88, v89);
        v53(v87, v89);
        sub_10003E76C(v86);
        v99 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
      }
      v99(*(_QWORD *)(v34 + 320), *(_QWORD *)(v34 + 304));
      JUMPOUT(0x1000ACDC0);
    }
    v101 = *(_QWORD *)(v34 + 336);
    v100 = *(_QWORD *)(v34 + 392);
    goto LABEL_19;
  }
  v70 = v116(*(_QWORD *)(v34 + 360), *(_QWORD *)(v34 + 392), *(_QWORD *)(v34 + 336));
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter(v71);
  v73 = os_log_type_enabled(v71, v72);
  v74 = *(_QWORD *)(v34 + 360);
  if (v73)
  {
    v75 = *(_QWORD *)(v34 + 288);
    v104 = *(_QWORD *)(v34 + 280);
    v106 = *(_QWORD *)(v34 + 272);
    v110 = *(_QWORD *)(v34 + 336);
    v76 = swift_slowAlloc(22, -1);
    v117 = swift_slowAlloc(32, -1);
    v119[0] = v117;
    *(_DWORD *)v76 = 141558275;
    *(_QWORD *)(v34 + 144) = 1752392040;
    v77 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v114, v76 + 4, v76 + 12);
    *(_WORD *)(v76 + 12) = 2081;
    v78 = Friend.handle.getter(v77);
    v79 = Handle.identifier.getter(v78);
    v81 = v80;
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v75, v106);
    *(_QWORD *)(v34 + 152) = sub_10002BA84(v79, v81, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v34 + 160, v76 + 14, v76 + 22);
    swift_bridgeObjectRelease(v81);
    v53(v74, v110);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Added a following: %{private,mask.hash}s", (uint8_t *)v76, 0x16u);
    swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v117, -1, -1);
    swift_slowDealloc(v76, -1, -1);
  }
  else
  {
    v53(*(_QWORD *)(v34 + 360), *(_QWORD *)(v34 + 336));
  }

  v102 = (_QWORD *)swift_task_alloc(dword_100261DF4);
  *(_QWORD *)(v34 + 672) = v102;
  *v102 = v34;
  v102[1] = sub_1000AE004;
  return sub_10009DD10();
}

uint64_t sub_1000AD4BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 592);
  v5 = *v1;
  *(_QWORD *)(*v1 + 600) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 608) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000AD5AC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000AD5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 608);
  v5 = *(_QWORD **)v2;
  v5[77] = a1;
  v5[78] = v1;
  swift_task_dealloc(v4);
  v6 = v5[75];
  if (v1)
  {
    v7 = v5[72];
    v8 = v5[29];
    swift_release(v6);
    swift_bridgeObjectRelease(v7);
    return swift_task_switch(sub_1000AE248, v8, 0);
  }
  else
  {
    swift_release(v6);
    v10 = (_QWORD *)swift_task_alloc(dword_10026599C);
    v5[79] = v10;
    *v10 = v5;
    v10[1] = sub_1000AD668;
    return sub_1000059F0();
  }
}

uint64_t sub_1000AD668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000AD6C8, v3, 0);
}

uint64_t sub_1000AD6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 248);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v6(*(_QWORD *)(v0 + 256), v4, *(_QWORD *)(v0 + 240), v7);
      if ((Device.isActive.getter(v8) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v10, v12);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v14 = *(_QWORD *)(v0 + 640);
  v15 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v9, 1, v16);
  swift_bridgeObjectRelease(v14);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  v19 = *(_QWORD *)(v0 + 264);
  if ((_DWORD)v18 == 1)
  {
    v20 = *(_QWORD *)(v0 + 232);
    sub_1000087A0(*(_QWORD *)(v0 + 264), &qword_100260538);
    v21 = sub_1000ADDE0;
    v22 = v20;
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 248);
    v25 = *(_QWORD *)(v0 + 232);
    *(_BYTE *)(v0 + 724) = Device.isThisDevice.getter(v18) & 1;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v19, v23);
    v21 = sub_1000AD838;
    v22 = v25;
  }
  return swift_task_switch(v21, v22, 0);
}

uint64_t sub_1000AD838()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  double (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSString v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Class isa;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(uint64_t, uint64_t);
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *log;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;

  if ((*(_BYTE *)(v0 + 724) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 576);
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 552);
    v3 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 376);
    v6 = *(_QWORD *)(v0 + 336);
    swift_release(*(_QWORD *)(v0 + 616));
    v2(v4, v3, v6);
    v2(v5, v3, v6);
    v7 = swift_bridgeObjectRetain_n(v1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v63 = v9;
      v10 = *(double (**)(uint64_t, uint64_t))(v0 + 584);
      log = v8;
      v58 = *(_QWORD *)(v0 + 576);
      v59 = *(_QWORD *)(v0 + 568);
      v57 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
      v11 = *(_QWORD *)(v0 + 376);
      v60 = *(_QWORD *)(v0 + 368);
      v64 = *(_QWORD *)(v0 + 336);
      v12 = *(_QWORD *)(v0 + 288);
      v13 = *(_QWORD *)(v0 + 272);
      v14 = swift_slowAlloc(62, -1);
      v61 = swift_slowAlloc(96, -1);
      v65 = v61;
      *(_DWORD *)v14 = 141559299;
      *(_QWORD *)(v0 + 184) = 1752392040;
      v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v16 = Friend.handle.getter(v15);
      v17 = Handle.identifier.getter(v16);
      v19 = v18;
      v10(v12, v13);
      *(_QWORD *)(v0 + 192) = sub_10002BA84(v17, v19, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      v57(v11, v64);
      *(_WORD *)(v14 + 22) = 2160;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v14 + 24, v14 + 32);
      *(_WORD *)(v14 + 32) = 2081;
      swift_bridgeObjectRetain(v58);
      *(_QWORD *)(v0 + 208) = sub_10002BA84(v59, v58, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v14 + 34, v14 + 42);
      swift_bridgeObjectRelease_n(v58, 3);
      *(_WORD *)(v14 + 42) = 2160;
      *(_QWORD *)(v0 + 216) = 1752392040;
      v20 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v14 + 44, v14 + 52);
      *(_WORD *)(v14 + 52) = 2081;
      v21 = Friend.handle.getter(v20);
      v22 = Handle.siblingIdentifiers.getter(v21);
      v23.n128_f64[0] = v10(v12, v13);
      v24 = Array.description.getter(v23);
      v26 = v25;
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)(v0 + 224) = sub_10002BA84(v24, v26, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v14 + 54, v14 + 62);
      swift_bridgeObjectRelease(v26);
      v57(v60, v64);
      _os_log_impl((void *)&_mh_execute_header, log, v63, "dataManagerStateStream: sharing current secure locations key with new follower,\nhandleId: %{private,mask.hash}s\nserverID: %{private,mask.hash}s,\nidsHandles: %{private,mask.hash}s", (uint8_t *)v14, 0x3Eu);
      swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {
      v40 = *(_QWORD *)(v0 + 576);
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
      v42 = *(_QWORD *)(v0 + 368);
      v43 = *(_QWORD *)(v0 + 336);
      v41(*(_QWORD *)(v0 + 376), v43);
      swift_bridgeObjectRelease_n(v40, 2);
      v41(v42, v43);

    }
    v44 = v0 + 16;
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    v46 = *(_QWORD *)(v0 + 576);
    v47 = *(_QWORD *)(v0 + 288);
    v48 = *(_QWORD *)(v0 + 272);
    v49 = *(void **)(*(_QWORD *)(v0 + 232) + *(_QWORD *)(v0 + 528));
    v50 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 648) = v50;
    v51 = swift_bridgeObjectRelease(v46);
    v52 = Friend.handle.getter(v51);
    v53 = Handle.siblingIdentifiers.getter(v52);
    v45(v47, v48);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 656) = isa;
    swift_bridgeObjectRelease(v53);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000ADF04;
    v55 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v56 = (_QWORD *)(v0 + 80);
    v56[1] = 0x40000000;
    v56[2] = sub_10010A918;
    v56[3] = &unk_100251EA8;
    v56[4] = v55;
    objc_msgSend(v49, "shareCurrentKeyWithId:idsHandles:completion:", v50, isa, v56);
    return swift_continuation_await(v44);
  }
  else
  {
    v27 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Non Me device should not share current key", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
    v31 = *(_QWORD *)(v0 + 616);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    v33 = *(_QWORD *)(v0 + 440);
    v34 = *(_QWORD *)(v0 + 392);
    v35 = *(_QWORD *)(v0 + 336);

    swift_release(v31);
    v32(v34, v35);
    sub_10003E76C(v33);
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 624);
    v36 = *(_QWORD *)(v0 + 520);
    v37 = *(_QWORD *)(v0 + 232);
    v38 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 544) = v38;
    *v38 = v0;
    v38[1] = sub_1000AC85C;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), v37, v36, *(_QWORD *)(v0 + 456));
  }
}

uint64_t sub_1000ADDE0()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = swift_bridgeObjectRelease(v0[72]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Non Me device should not share current key", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v0[77];
  v6 = (void (*)(uint64_t, uint64_t))v0[70];
  v7 = v0[55];
  v8 = v0[49];
  v9 = v0[42];

  swift_release(v5);
  v6(v8, v9);
  sub_10003E76C(v7);
  v0[67] = v0[78];
  v10 = v0[65];
  v11 = v0[29];
  v12 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[68] = v12;
  *v12 = v0;
  v12[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(v0[56], v11, v10, v0[57]);
}

uint64_t sub_1000ADF04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 664) = v2;
  if (v2)
    v3 = sub_1000AE460;
  else
    v3 = sub_1000ADF64;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_1000ADF64()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (void *)v0[82];
  v2 = (void *)v0[81];
  v3 = v0[55];
  (*(void (**)(_QWORD, _QWORD))(v0[43] + 8))(v0[49], v0[42]);
  sub_10003E76C(v3);

  v0[67] = v0[78];
  v4 = v0[65];
  v5 = v0[29];
  v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[68] = v6;
  *v6 = v0;
  v6[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(v0[56], v5, v4, v0[57]);
}

uint64_t sub_1000AE004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 672);
  v3[85] = a1;
  v3[86] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000AE680;
  else
    v5 = sub_1000AE074;
  return swift_task_switch(v5, v3[29], 0);
}

uint64_t sub_1000AE074()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 680);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100262124);
    *(_QWORD *)(v0 + 696) = v2;
    *v2 = v0;
    v2[1] = sub_1000AE154;
    return sub_100009814(*(_QWORD *)(v0 + 680));
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v4 = *(_QWORD *)(v0 + 440);
    (*(void (**)(_QWORD, _QWORD))(v0 + 560))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 336));
    sub_10003E76C(v4);
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 688);
    v5 = *(_QWORD *)(v0 + 520);
    v6 = *(_QWORD *)(v0 + 232);
    v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 544) = v7;
    *v7 = v0;
    v7[1] = sub_1000AC85C;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), v6, v5, *(_QWORD *)(v0 + 456));
  }
}

uint64_t sub_1000AE154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 680);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 696));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000AE1B8, v2, 0);
}

uint64_t sub_1000AE1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 440);
  (*(void (**)(_QWORD, _QWORD))(v0 + 560))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 336));
  sub_10003E76C(v1);
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 544) = v4;
  *v4 = v0;
  v4[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), v3, v2, *(_QWORD *)(v0 + 456));
}

uint64_t sub_1000AE248()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[78];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[78];
    v6 = (void (*)(uint64_t, uint64_t))v0[70];
    v25 = v0[55];
    v7 = v0[49];
    v8 = v0[42];
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v26 = v10;
    *(_DWORD *)v9 = 136446210;
    v0[20] = v5;
    swift_errorRetain(v5);
    v11 = sub_100037A5C(&qword_100265260);
    v12 = String.init<A>(describing:)(v0 + 20, v11);
    v14 = v13;
    *(_QWORD *)(v9 + 4) = sub_10002BA84(v12, v13, &v26);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Share Key: unable to get DataManager: %{public}s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v5);
    v6(v7, v8);
    v15 = v25;
  }
  else
  {
    v16 = v0[78];
    v17 = (void (*)(uint64_t, uint64_t))v0[70];
    v18 = v0[55];
    v19 = v0[49];
    v20 = v0[42];

    swift_errorRelease(v16);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    v17(v19, v20);
    v15 = v18;
  }
  sub_10003E76C(v15);
  v0[67] = 0;
  v21 = v0[65];
  v22 = v0[29];
  v23 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[68] = v23;
  *v23 = v0;
  v23[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(v0[56], v22, v21, v0[57]);
}

uint64_t sub_1000AE460(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v2 = (void *)v1[82];
  v3 = (void *)v1[81];
  v4 = v1[49];
  v5 = v1[42];
  v6 = v1[43];
  swift_willThrow(a1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

  v7 = v1[83];
  swift_errorRetain(v7);
  v8 = swift_errorRetain(v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v1[55];
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v22 = v13;
    *(_DWORD *)v12 = 136446210;
    v1[21] = v7;
    swift_errorRetain(v7);
    v14 = sub_100037A5C(&qword_100265260);
    v15 = String.init<A>(describing:)(v1 + 21, v14);
    v17 = v16;
    v1[22] = sub_10002BA84(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 22, v1 + 23, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "dataManagerStateStream event error: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    v11 = v1[55];

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  swift_errorRelease(v7);
  sub_10003E76C(v11);
  v1[67] = 0;
  v18 = v1[65];
  v19 = v1[29];
  v20 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[68] = v20;
  *v20 = v1;
  v20[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(v1[56], v19, v18, v1[57]);
}

uint64_t sub_1000AE680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  (*(void (**)(_QWORD, _QWORD))(v0 + 560))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 336));
  v1 = *(_QWORD *)(v0 + 688);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 440);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 168) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 168, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 176) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "dataManagerStateStream event error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v5 = *(_QWORD *)(v0 + 440);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  swift_errorRelease(v1);
  sub_10003E76C(v5);
  *(_QWORD *)(v0 + 536) = 0;
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 232);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 544) = v14;
  *v14 = v0;
  v14[1] = sub_1000AC85C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), v13, v12, *(_QWORD *)(v0 + 456));
}

uint64_t sub_1000AE880(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t Priority;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[15] = a1;
  v2[16] = v1;
  Priority = type metadata accessor for LocatePriority(0);
  v2[17] = Priority;
  v4 = *(_QWORD *)(Priority - 8);
  v2[18] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  v2[21] = swift_task_alloc(v5);
  v2[22] = swift_task_alloc(v5);
  v6 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v2[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[25] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v9);
  v2[27] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000AE964, v1, 0);
}

uint64_t sub_1000AE964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void (*v86)(uint64_t, uint64_t);
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[2];

  v2 = LocationRequest.toHandles.getter(a1);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease(v2);
  if (!v3)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100037A9C(v9, (uint64_t)qword_10027ABA8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "startRefreshing called with empty handles!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = sub_1000CEF10();
    v15 = swift_allocError(&type metadata for LocationService.Error, v14, 0, 0);
    *v16 = 3;
    swift_willThrow(v15);
    goto LABEL_10;
  }
  type metadata accessor for Transaction(0);
  v4 = static Transaction.currentNSXPCConnection.getter();
  v5 = *(_QWORD *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 184);
  if (v4)
  {
    v8 = (void *)v4;
    NSXPCConnection.id.getter();

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 200) + 32))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192));
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v6 + 56))(*(_QWORD *)(v1 + 184), 1, 1, *(_QWORD *)(v1 + 192));
  }
  v24 = *(_QWORD *)(v1 + 184);
  v25 = type metadata accessor for LocationService(0);
  v26 = sub_100018A7C(&qword_100261E08, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
  v27 = CustomStringConvertible<>.addressDescription.getter(v25, v26);
  v29 = v28;
  v30 = String.utf8Data.getter(v27);
  v32 = v31;
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(v1 + 88) = v30;
  *(_QWORD *)(v1 + 96) = v32;
  v33 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v33);
  sub_100037AB4(v30, v32);
  sub_1000087A0(v24, (uint64_t *)&unk_1002675F0);
LABEL_13:
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v35 = *(_QWORD *)(v1 + 208);
  v34 = *(_QWORD *)(v1 + 216);
  v36 = *(_QWORD *)(v1 + 192);
  v37 = *(_QWORD *)(v1 + 200);
  v38 = *(_QWORD *)(v1 + 128);
  v39 = type metadata accessor for Logger(0);
  sub_100037A9C(v39, (uint64_t)qword_10027ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v34, v36);
  v40 = swift_retain_n(v38, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter();
  v43 = os_log_type_enabled(v41, v42);
  v45 = *(_QWORD *)(v1 + 200);
  v44 = *(_QWORD *)(v1 + 208);
  v46 = *(_QWORD *)(v1 + 192);
  if (v43)
  {
    v98 = *(_QWORD *)(v1 + 128);
    v47 = swift_slowAlloc(22, -1);
    v99 = swift_slowAlloc(64, -1);
    v102[0] = v99;
    *(_DWORD *)v47 = 136446466;
    v48 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v46, v48);
    v51 = v50;
    *(_QWORD *)(v1 + 104) = sub_10002BA84(v49, v50, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease(v51);
    v52 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v52(v44, v46);
    *(_WORD *)(v47 + 12) = 2080;
    v53 = (uint64_t *)(v98 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
    swift_beginAccess(v98 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v1 + 16, 0, 0);
    v54 = *v53;
    sub_100018A7C(&qword_1002625C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v55 = swift_bridgeObjectRetain(v54);
    v56 = Dictionary.description.getter(v55);
    v58 = v57;
    swift_bridgeObjectRelease(v54);
    *(_QWORD *)(v1 + 112) = sub_10002BA84(v56, v58, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v47 + 14, v47 + 22);
    swift_release_n(v98, 2);
    swift_bridgeObjectRelease(v58);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "startRefreshing for %{public}s: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {
    v60 = *(_QWORD *)(v1 + 128);
    v52 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v52(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 192));

    v59 = swift_release_n(v60, 2);
  }
  *(_QWORD *)(v1 + 224) = v52;
  v61 = *(_QWORD *)(v1 + 176);
  v62 = *(_QWORD *)(v1 + 136);
  v63 = *(_QWORD *)(v1 + 144);
  LocationRequest.priority.getter(v59);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 88))(v61, v62);
  if ((_DWORD)v64 == enum case for LocatePriority.backgroundAppRefresh(_:))
    goto LABEL_23;
  v65 = enum case for LocatePriority.shallow(_:);
  if ((_DWORD)v64 == enum case for LocatePriority.shallow(_:))
    goto LABEL_23;
  if ((_DWORD)v64 != enum case for LocatePriority.live(_:))
  {
    if ((_DWORD)v64 == enum case for LocatePriority.backgroundProactive(_:))
    {
LABEL_23:
      v77 = *(_QWORD *)(v1 + 216);
      v78 = *(_QWORD *)(v1 + 168);
      v79 = *(_QWORD *)(v1 + 144);
      v80 = *(_QWORD *)(v1 + 136);
      v81 = LocationRequest.toHandles.getter(v64);
      LocationRequest.priority.getter(v81);
      sub_1000BBC94(v77, v81, v78);
      swift_bridgeObjectRelease(v81);
      v82 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
      *(_QWORD *)(v1 + 304) = v82;
      v83 = v82(v78, v80);
      v84 = LocationRequest.toHandles.getter(v83);
      *(_QWORD *)(v1 + 312) = v84;
      LocationRequest.priority.getter(v84);
      v85 = (_QWORD *)swift_task_alloc(dword_1002620EC);
      *(_QWORD *)(v1 + 320) = v85;
      *v85 = v1;
      v85[1] = sub_1000AF484;
      v75 = *(_QWORD *)(v1 + 152);
      v76 = v84;
      return sub_1000BE754(v76, v75, 1);
    }
    v86 = v52;
    v87 = Logger.logObject.getter(v64);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      swift_slowDealloc(v89, -1, -1);
    }
    v90 = *(_QWORD *)(v1 + 216);
    v91 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 176);
    v93 = *(_QWORD *)(v1 + 136);
    v94 = *(_QWORD *)(v1 + 144);

    v95 = sub_1000CEF10();
    v96 = swift_allocError(&type metadata for LocationService.Error, v95, 0, 0);
    *v97 = 2;
    swift_willThrow(v96);
    v86(v90, v91);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
LABEL_10:
    v17 = *(_QWORD *)(v1 + 208);
    v19 = *(_QWORD *)(v1 + 176);
    v18 = *(_QWORD *)(v1 + 184);
    v21 = *(_QWORD *)(v1 + 160);
    v20 = *(_QWORD *)(v1 + 168);
    v22 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 216));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v66 = *(_QWORD *)(v1 + 168);
  v100 = *(_QWORD *)(v1 + 216);
  v101 = *(_QWORD *)(v1 + 160);
  v68 = *(_QWORD *)(v1 + 136);
  v67 = *(_QWORD *)(v1 + 144);
  v69 = LocationRequest.toHandles.getter(v64);
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 104);
  v70(v66, v65, v68);
  sub_1000BBC94(v100, v69, v66);
  swift_bridgeObjectRelease(v69);
  v71 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8);
  *(_QWORD *)(v1 + 232) = v71;
  v72 = v71(v66, v68);
  v73 = LocationRequest.toHandles.getter(v72);
  *(_QWORD *)(v1 + 240) = v73;
  v70(v101, v65, v68);
  v74 = (_QWORD *)swift_task_alloc(dword_1002620EC);
  *(_QWORD *)(v1 + 248) = v74;
  *v74 = v1;
  v74[1] = sub_1000AF178;
  v75 = *(_QWORD *)(v1 + 160);
  v76 = v73;
  return sub_1000BE754(v76, v75, 1);
}

uint64_t sub_1000AF178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 248);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  v5 = (void (*)(uint64_t, _QWORD))v3[29];
  v6 = v3[30];
  v7 = v3[20];
  v9 = v3 + 16;
  v8 = v3[16];
  v5(v7, v9[1]);
  swift_bridgeObjectRelease(v6);
  if (v1)
    v10 = sub_1000AF5B0;
  else
    v10 = sub_1000AF204;
  return swift_task_switch(v10, v8, 0);
}

uint64_t sub_1000AF204()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = v0[32];
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (uint64_t **)swift_task_alloc(dword_100262124);
    v0[34] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = (uint64_t *)sub_1000AF2AC;
    return sub_100009814(v0[32]);
  }
  else
  {
    v4 = swift_bridgeObjectRelease(v1);
    v5 = LocationRequest.toHandles.getter(v4);
    v0[35] = v5;
    v6 = (uint64_t **)swift_task_alloc(dword_1002620CC);
    v0[36] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_1000AF36C;
    return sub_1000B4AB8(v5);
  }
}

uint64_t sub_1000AF2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000AF310, v2, 0);
}

uint64_t sub_1000AF310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = LocationRequest.toHandles.getter(a1);
  *(_QWORD *)(v1 + 280) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1002620CC);
  *(_QWORD *)(v1 + 288) = v3;
  *v3 = v1;
  v3[1] = sub_1000AF36C;
  return sub_1000B4AB8(v2);
}

uint64_t sub_1000AF36C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (_QWORD *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v4 = v3[36];
  v3[37] = v1;
  swift_task_dealloc(v4);
  v5 = v3[35];
  v6 = v3[16];
  swift_bridgeObjectRelease(v5);
  if (v1)
    v7 = sub_1000AF644;
  else
    v7 = sub_1000AF3E4;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000AF3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(v0 + 224))(v2, *(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000AF484(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v3 = (_QWORD *)*v2;
  v3[8] = v2;
  v3[9] = a1;
  v3[10] = v1;
  v4 = v3[40];
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = (void (*)(uint64_t, _QWORD))v3[38];
  v6 = v3[39];
  v7 = v3[19];
  v9 = v3 + 16;
  v8 = v3[16];
  v5(v7, v9[1]);
  swift_bridgeObjectRelease(v6);
  if (v1)
    v10 = sub_1000AF6D8;
  else
    v10 = sub_1000AF510;
  return swift_task_switch(v10, v8, 0);
}

uint64_t sub_1000AF510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(v0 + 224))(v2, *(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000AF5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF76C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Priority;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2[26] = a1;
  v2[27] = v1;
  v2[28] = *v1;
  v3 = type metadata accessor for Handle(0);
  v2[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[30] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v5);
  v2[32] = swift_task_alloc(v5);
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  v6 = type metadata accessor for Date(0);
  v2[35] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[36] = v7;
  v2[37] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v2[38] = Priority;
  v9 = *(_QWORD *)(Priority - 8);
  v2[39] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v10);
  v2[41] = swift_task_alloc(v10);
  v11 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v2[43] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[44] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v2[45] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[46] = swift_task_alloc(v15);
  v2[47] = swift_task_alloc(v15);
  v2[48] = swift_task_alloc(v15);
  v2[49] = swift_task_alloc(v15);
  v2[50] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000AF8E0, v1, 0);
}

uint64_t sub_1000AF8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[2];

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 208);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 408) = sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 208);
    v7 = swift_slowAlloc(32, -1);
    v71 = swift_slowAlloc(64, -1);
    v78[0] = v71;
    *(_DWORD *)v7 = 136446723;
    *(_QWORD *)(v0 + 184) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FE360, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2160;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2081;
    v8 = swift_bridgeObjectRetain(v6);
    v9 = Array.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 200) = sub_10002BA84(v9, v11, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s handles: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 208);

    v12 = swift_bridgeObjectRelease_n(v13, 2);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 16);
  *(_QWORD *)(v0 + 416) = v14;
  if (v14)
  {
    type metadata accessor for Transaction(0);
    v15 = static Transaction.currentNSXPCConnection.getter();
    v16 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 352);
    v18 = *(_QWORD *)(v0 + 336);
    if (v15)
    {
      v19 = (void *)v15;
      NSXPCConnection.id.getter();

      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));
LABEL_15:
        v44 = swift_retain_n(*(_QWORD *)(v0 + 216), 2);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = *(_QWORD *)(v0 + 216);
          v48 = swift_slowAlloc(22, -1);
          v49 = swift_slowAlloc(64, -1);
          v78[0] = v49;
          *(_DWORD *)v48 = 136446466;
          *(_QWORD *)(v0 + 160) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FE360, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v48 + 4, v48 + 12);
          *(_WORD *)(v48 + 12) = 2080;
          v50 = (uint64_t *)(v47 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
          swift_beginAccess(v47 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v0 + 16, 0, 0);
          v51 = *v50;
          sub_100018A7C(&qword_1002625C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
          v52 = swift_bridgeObjectRetain(v51);
          v53 = Dictionary.description.getter(v52);
          v55 = v54;
          swift_bridgeObjectRelease(v51);
          *(_QWORD *)(v0 + 176) = sub_10002BA84(v53, v55, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v48 + 14, v48 + 22);
          swift_release_n(v47, 2);
          swift_bridgeObjectRelease(v55);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s: %s", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1, -1);
          swift_slowDealloc(v48, -1, -1);

        }
        else
        {
          v56 = *(_QWORD *)(v0 + 216);

          swift_release_n(v56, 2);
        }
        v57 = *(_QWORD *)(v0 + 400);
        v58 = *(_QWORD *)(v0 + 328);
        v60 = *(_QWORD *)(v0 + 304);
        v59 = *(_QWORD *)(v0 + 312);
        v61 = *(_QWORD *)(v0 + 296);
        v73 = *(_QWORD *)(v0 + 288);
        v75 = *(_QWORD *)(v0 + 280);
        v77 = *(_QWORD *)(v0 + 320);
        v62 = *(_QWORD *)(v0 + 208);
        *(_QWORD *)(v0 + 168) = _swiftEmptyDictionarySingleton;
        v63 = enum case for LocatePriority.shallow(_:);
        v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104);
        v64(v58, enum case for LocatePriority.shallow(_:), v60);
        sub_1000BBC94(v57, v62, v58);
        v65 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        *(_QWORD *)(v0 + 424) = v65;
        v65(v58, v60);
        v66 = static Date.trustedNow.getter(v61);
        *(double *)(v0 + 432) = Date.timeIntervalSince1970.getter(v66);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v61, v75);
        v64(v77, v63, v60);
        v67 = (_QWORD *)swift_task_alloc(dword_1002620EC);
        *(_QWORD *)(v0 + 440) = v67;
        *v67 = v0;
        v67[1] = sub_1000B0094;
        return sub_1000BE754(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 320), 0);
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v17 + 56))(*(_QWORD *)(v0 + 336), 1, 1, *(_QWORD *)(v0 + 344));
    }
    v34 = *(_QWORD *)(v0 + 336);
    v35 = type metadata accessor for LocationService(0);
    v36 = sub_100018A7C(&qword_100261E08, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
    v37 = CustomStringConvertible<>.addressDescription.getter(v35, v36);
    v39 = v38;
    v40 = String.utf8Data.getter(v37);
    v42 = v41;
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)(v0 + 88) = v40;
    *(_QWORD *)(v0 + 96) = v42;
    v43 = sub_10003EC14();
    DataProtocol.stableUUID.getter(&type metadata for Data, v43);
    sub_100037AB4(v40, v42);
    sub_1000087A0(v34, (uint64_t *)&unk_1002675F0);
    goto LABEL_15;
  }
  v20 = Logger.logObject.getter(v12);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "start shallow Refreshing called with empty handles!", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
  v23 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 376);
  v25 = *(_QWORD *)(v0 + 384);
  v27 = *(_QWORD *)(v0 + 368);
  v29 = *(_QWORD *)(v0 + 328);
  v28 = *(_QWORD *)(v0 + 336);
  v68 = *(_QWORD *)(v0 + 320);
  v69 = *(_QWORD *)(v0 + 296);
  v70 = *(_QWORD *)(v0 + 272);
  v72 = *(_QWORD *)(v0 + 264);
  v74 = *(_QWORD *)(v0 + 256);
  v76 = *(_QWORD *)(v0 + 248);

  v30 = sub_1000CEF10();
  v31 = swift_allocError(&type metadata for LocationService.Error, v30, 0, 0);
  *v32 = 3;
  swift_willThrow(v31);
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 440);
  *(_QWORD *)(*(_QWORD *)v2 + 448) = v1;
  swift_task_dealloc(v5);
  v6 = (void (*)(uint64_t, uint64_t))v4[53];
  v7 = v4[40];
  v8 = v4[38];
  v9 = v4[27];
  if (v1)
  {
    v6(v7, v8);
    v10 = sub_1000B0CD0;
  }
  else
  {
    v4[57] = a1;
    v6(v7, v8);
    v10 = sub_1000B0120;
  }
  return swift_task_switch(v10, v9, 0);
}

uint64_t sub_1000B0120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char **v32;
  char isUniquelyReferenced_nonNull_native;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = (_QWORD *)swift_task_alloc(48);
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v0 + 168;
  v5[5] = v3;
  swift_bridgeObjectRetain(v1);
  sub_1000552D0(v6, (void (*)(char *, char *))sub_1000CF0DC);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v5);
  v79 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 464) = v79;
  v7 = (char *)_swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(v0 + 208);
  v87 = *(_QWORD *)(v0 + 240);
  v90 = (char *)_swiftEmptyArrayStorage;
  v9 = *(_DWORD *)(v87 + 80);
  *(_DWORD *)(v0 + 552) = v9;
  v10 = *(_QWORD *)(v87 + 72);
  *(_QWORD *)(v0 + 472) = v10;
  v83 = (v9 + 32) & ~(unint64_t)v9;
  v11 = v8 + v83;
  v12 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v87 + 16);
  *(_QWORD *)(v0 + 480) = v12;
  v13 = swift_bridgeObjectRetain(v8);
  v14 = 0;
  do
  {
    v12(*(_QWORD *)(v0 + 272), v11, *(_QWORD *)(v0 + 232), v13);
    v15 = *(_QWORD *)(v0 + 168);
    if (*(_QWORD *)(v15 + 16)
      && (v16 = *(_QWORD *)(v0 + 272),
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168)),
          sub_10001CBC8(v16),
          LOBYTE(v16) = v17,
          swift_bridgeObjectRelease(v15),
          (v16 & 1) != 0))
    {
      (*(void (**)(_QWORD, _QWORD))(v87 + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 232));
    }
    else
    {
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 32);
      v18(*(char **)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 232));
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100018EBC(0, *((_QWORD *)v7 + 2) + 1, 1);
        v7 = v90;
      }
      v20 = *((_QWORD *)v7 + 2);
      v19 = *((_QWORD *)v7 + 3);
      if (v20 >= v19 >> 1)
      {
        sub_100018EBC(v19 > 1, v20 + 1, 1);
        v7 = v90;
      }
      v21 = *(_QWORD *)(v0 + 264);
      v22 = *(_QWORD *)(v0 + 232);
      *((_QWORD *)v7 + 2) = v20 + 1;
      v18(&v7[v83 + v20 * v10], v21, v22);
      v90 = v7;
    }
    ++v14;
    v11 += v10;
  }
  while (v14 != *(_QWORD *)(v0 + 416));
  v23 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  *(_QWORD *)(v0 + 488) = v7;
  if (*((_QWORD *)v7 + 2))
  {
    v24 = *(_QWORD *)(v0 + 384);
    v25 = *(_QWORD *)(v0 + 392);
    v84 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 344);
    v26 = *(_QWORD *)(v0 + 352);
    v77 = v26;
    v28 = *(_QWORD *)(v0 + 216);
    UUID.init()(v23);
    v29 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 496) = v29;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    *(_QWORD *)(v0 + 504) = v30;
    v30(v24, v25, v27);
    v31 = OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks;
    *(_QWORD *)(v0 + 512) = OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks;
    v32 = (char **)(v28 + v31);
    swift_beginAccess(v28 + v31, v0 + 40, 33, 0);
    swift_retain(v7);
    swift_bridgeObjectRetain(v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    v88 = v29;
    v90 = *v32;
    *v32 = (char *)0x8000000000000000;
    sub_100163E78((uint64_t)v7, 0, v29, v24, isUniquelyReferenced_nonNull_native);
    v34 = *v32;
    *v32 = v90;
    swift_bridgeObjectRelease(v34);
    v35 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    *(_QWORD *)(v0 + 520) = v35;
    v35(v24, v27);
    swift_endAccess(v0 + 40);
    v36 = v84;
    v85 = v30;
    v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v30)(v36, v25, v27);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(_QWORD *)(v0 + 376);
    v42 = *(_QWORD *)(v0 + 344);
    if (v40)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = (char *)swift_slowAlloc(32, -1);
      v90 = v80;
      *(_DWORD *)v43 = 136446210;
      v44 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v42, v44);
      v47 = v46;
      *(_QWORD *)(v0 + 128) = sub_10002BA84(v45, v46, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v47);
      v35(v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Start latestLocation Task:%{public}s", v43, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v35(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 344));
    }

    v65 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 352);
    v66 = *(_QWORD *)(v0 + 360);
    v68 = *(_QWORD *)(v0 + 344);
    v69 = *(_QWORD *)(v0 + 216);
    v82 = *(_QWORD *)(v0 + 224);
    v85(v65, *(_QWORD *)(v0 + 392), v68);
    v70 = *(unsigned __int8 *)(v67 + 80);
    v71 = (v70 + 48) & ~v70;
    v72 = (v66 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
    v73 = (char *)swift_allocObject(&unk_100251E68, v72 + 8, v70 | 7);
    *(_QWORD *)(v0 + 528) = v73;
    *((_QWORD *)v73 + 2) = v69;
    *((_QWORD *)v73 + 3) = v7;
    *((_QWORD *)v73 + 4) = 0;
    *((_QWORD *)v73 + 5) = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(&v73[v71], v65, v68);
    *(_QWORD *)&v73[v72] = v82;
    v74 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain(v69);
    swift_retain(v7);
    swift_bridgeObjectRetain(v88);
    v75 = (_QWORD *)swift_task_alloc(v74);
    *(_QWORD *)(v0 + 536) = v75;
    *v75 = v0;
    v75[1] = sub_1000B07F4;
    return withTimeout<A>(_:block:)();
  }
  else
  {
    swift_release(v7);
    v48 = swift_bridgeObjectRelease(v79);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v51 = 134217984;
      *(_QWORD *)(v0 + 136) = 0x404E000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v51 + 4, v51 + 12);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "All server cached locations are under %fs. Stop shallowRefresh and return", v51, 0xCu);
      swift_slowDealloc(v51, -1, -1);
    }
    v52 = *(_QWORD *)(v0 + 352);
    v53 = *(_QWORD *)(v0 + 208);

    sub_1000C2990(v53);
    v54 = *(void (**)(uint64_t, _QWORD))(v52 + 8);
    v55 = *(_QWORD *)(v0 + 392);
    v56 = *(_QWORD *)(v0 + 400);
    v58 = *(_QWORD *)(v0 + 376);
    v57 = *(_QWORD *)(v0 + 384);
    v59 = *(_QWORD *)(v0 + 368);
    v60 = *(_QWORD *)(v0 + 336);
    v62 = *(_QWORD *)(v0 + 320);
    v61 = *(_QWORD *)(v0 + 328);
    v63 = *(_QWORD *)(v0 + 296);
    v76 = *(_QWORD *)(v0 + 272);
    v78 = *(_QWORD *)(v0 + 264);
    v81 = *(_QWORD *)(v0 + 256);
    v86 = *(_QWORD *)(v0 + 248);
    v54(v56, *(_QWORD *)(v0 + 344));
    v89 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(v56);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v81);
    swift_task_dealloc(v86);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v89);
  }
}

uint64_t sub_1000B07F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 216);
    v5 = sub_1000B14B4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 216);
    swift_release(*(_QWORD *)(v2 + 528));
    v5 = sub_1000B0868;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000B0868()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v1 = (_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + *(_QWORD *)(v0 + 512));
  swift_bridgeObjectRetain(v4);
  v5 = sub_1000A5380(v3, v4);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  if (v5)
  {
    swift_bridgeObjectRetain(v9);
    sub_1000CF0A4(v5, v7, v9);
  }
  else
  {
    v9 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v63[0] = *v1;
  *v1 = 0x8000000000000000;
  sub_10000FC08(v9, (uint64_t)sub_1000A1314, 0, isUniquelyReferenced_nonNull_native, v63);
  v11 = *v1;
  *v1 = v63[0];
  result = swift_bridgeObjectRelease(v11);
  if (!v2)
  {
    v13 = *(_QWORD *)(v0 + 392);
    v14 = *(_QWORD *)(v0 + 208);
    swift_beginAccess(*(_QWORD *)(v0 + 216) + *(_QWORD *)(v0 + 512), v0 + 64, 33, 0);
    v15 = sub_1000F4500(v13);
    v17 = v16;
    v19 = v18;
    swift_endAccess(v0 + 64);
    sub_1000CF0A4(v15, v17, v19);
    v20 = (char *)_swiftEmptyArrayStorage;
    v63[0] = (uint64_t)_swiftEmptyArrayStorage;
    v21 = swift_bridgeObjectRetain(v14);
    v22 = 0;
    do
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD, __n128))(v0 + 480))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 552) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 552))+ *(_QWORD *)(v0 + 472) * v22, *(_QWORD *)(v0 + 232), v21);
      v23 = *(_QWORD *)(v0 + 168);
      if (*(_QWORD *)(v23 + 16)
        && (v24 = *(_QWORD *)(v0 + 256),
            swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168)),
            sub_10001CBC8(v24),
            LOBYTE(v24) = v25,
            swift_bridgeObjectRelease(v23),
            (v24 & 1) != 0))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
      }
      else
      {
        v26 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 32);
        v26(*(char **)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        {
          sub_100018EBC(0, *((_QWORD *)v20 + 2) + 1, 1);
          v20 = (char *)v63[0];
        }
        v28 = *((_QWORD *)v20 + 2);
        v27 = *((_QWORD *)v20 + 3);
        if (v28 >= v27 >> 1)
        {
          sub_100018EBC(v27 > 1, v28 + 1, 1);
          v20 = (char *)v63[0];
        }
        v29 = *(_QWORD *)(v0 + 472);
        v30 = *(unsigned __int8 *)(v0 + 552);
        v31 = *(_QWORD *)(v0 + 248);
        v32 = *(_QWORD *)(v0 + 232);
        *((_QWORD *)v20 + 2) = v28 + 1;
        v26(&v20[((v30 + 32) & ~v30) + v29 * v28], v31, v32);
        v63[0] = (uint64_t)v20;
      }
      ++v22;
    }
    while (v22 != *(_QWORD *)(v0 + 416));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
    if (*((_QWORD *)v20 + 2))
    {
      v33 = *(_QWORD *)(v0 + 464);
      swift_retain(v20);
      v34 = sub_1000CE120(v33, (uint64_t)v20);
      swift_bridgeObjectRelease(v33);
      swift_release_n(v20, 2);
      v35 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 168));
      v63[0] = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 168) = 0x8000000000000000;
      sub_10000FC08(v34, (uint64_t)sub_1000A1314, 0, v35, v63);
      v36 = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 168) = v63[0];
      swift_bridgeObjectRelease(v36);
      v37 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
      v39 = *(_QWORD *)(v0 + 488);
      v38 = *(_QWORD *)(v0 + 496);
      v40 = *(_QWORD *)(v0 + 392);
      v41 = *(_QWORD *)(v0 + 344);
      sub_1000C2990(*(_QWORD *)(v0 + 208));
      swift_bridgeObjectRelease(v38);
      swift_release(v39);
      v37(v40, v41);
    }
    else
    {
      v42 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
      v44 = *(_QWORD *)(v0 + 488);
      v43 = *(_QWORD *)(v0 + 496);
      v45 = *(_QWORD *)(v0 + 464);
      v46 = *(_QWORD *)(v0 + 392);
      v47 = *(_QWORD *)(v0 + 344);
      v48 = *(_QWORD *)(v0 + 208);
      swift_release(v20);
      swift_bridgeObjectRelease(v45);
      sub_1000C2990(v48);
      swift_bridgeObjectRelease(v43);
      swift_release(v44);
      v42(v46, v47);
    }
    v49 = *(_QWORD *)(v0 + 392);
    v50 = *(_QWORD *)(v0 + 400);
    v52 = *(_QWORD *)(v0 + 376);
    v51 = *(_QWORD *)(v0 + 384);
    v53 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 336);
    v56 = *(_QWORD *)(v0 + 320);
    v55 = *(_QWORD *)(v0 + 328);
    v57 = *(_QWORD *)(v0 + 296);
    v58 = *(_QWORD *)(v0 + 272);
    v59 = *(_QWORD *)(v0 + 264);
    v60 = *(_QWORD *)(v0 + 256);
    v61 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, _QWORD))(v0 + 520))(v50, *(_QWORD *)(v0 + 344));
    v62 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(v50);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v62);
  }
  return result;
}

uint64_t sub_1000B0CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char **v38;
  char isUniquelyReferenced_nonNull_native;
  char *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;

  v1 = *(_QWORD *)(v0 + 448);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v85 = v0 + 136;
  v87 = v0 + 40;
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 448);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (char *)swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v98 = v7;
    *(_QWORD *)(v0 + 144) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 144, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 152) = sub_10002BA84(v9, v10, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch cached server location failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 448);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v83 = (uint64_t *)(v0 + 128);
  *(_QWORD *)(v0 + 464) = _swiftEmptyDictionarySingleton;
  v13 = (char *)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(v0 + 208);
  v95 = *(_QWORD *)(v0 + 240);
  v98 = (char *)_swiftEmptyArrayStorage;
  v15 = *(_DWORD *)(v95 + 80);
  *(_DWORD *)(v0 + 552) = v15;
  v16 = *(_QWORD *)(v95 + 72);
  *(_QWORD *)(v0 + 472) = v16;
  v91 = (v15 + 32) & ~(unint64_t)v15;
  v17 = v14 + v91;
  v18 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v95 + 16);
  *(_QWORD *)(v0 + 480) = v18;
  v19 = swift_bridgeObjectRetain(v14);
  v20 = 0;
  do
  {
    v18(*(_QWORD *)(v0 + 272), v17, *(_QWORD *)(v0 + 232), v19);
    v21 = *(_QWORD *)(v0 + 168);
    if (*(_QWORD *)(v21 + 16)
      && (v22 = *(_QWORD *)(v0 + 272),
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168)),
          sub_10001CBC8(v22),
          LOBYTE(v22) = v23,
          swift_bridgeObjectRelease(v21),
          (v22 & 1) != 0))
    {
      (*(void (**)(_QWORD, _QWORD))(v95 + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 232));
    }
    else
    {
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 32);
      v24(*(char **)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 232));
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      {
        sub_100018EBC(0, *((_QWORD *)v13 + 2) + 1, 1);
        v13 = v98;
      }
      v26 = *((_QWORD *)v13 + 2);
      v25 = *((_QWORD *)v13 + 3);
      if (v26 >= v25 >> 1)
      {
        sub_100018EBC(v25 > 1, v26 + 1, 1);
        v13 = v98;
      }
      v27 = *(_QWORD *)(v0 + 264);
      v28 = *(_QWORD *)(v0 + 232);
      *((_QWORD *)v13 + 2) = v26 + 1;
      v24(&v13[v91 + v26 * v16], v27, v28);
      v98 = v13;
    }
    ++v20;
    v17 += v16;
  }
  while (v20 != *(_QWORD *)(v0 + 416));
  v29 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  *(_QWORD *)(v0 + 488) = v13;
  if (*((_QWORD *)v13 + 2))
  {
    v30 = *(_QWORD *)(v0 + 384);
    v31 = *(_QWORD *)(v0 + 392);
    v92 = *(_QWORD *)(v0 + 376);
    v32 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 352);
    v82 = v33;
    v34 = *(_QWORD *)(v0 + 216);
    UUID.init()(v29);
    v35 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 496) = v35;
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    *(_QWORD *)(v0 + 504) = v36;
    v36(v30, v31, v32);
    v37 = OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks;
    *(_QWORD *)(v0 + 512) = OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks;
    v38 = (char **)(v34 + v37);
    swift_beginAccess(v34 + v37, v87, 33, 0);
    swift_retain(v13);
    swift_bridgeObjectRetain(v35);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v96 = v35;
    v98 = *v38;
    *v38 = (char *)0x8000000000000000;
    sub_100163E78((uint64_t)v13, 0, v35, v30, isUniquelyReferenced_nonNull_native);
    v40 = *v38;
    *v38 = v98;
    swift_bridgeObjectRelease(v40);
    v41 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    *(_QWORD *)(v0 + 520) = v41;
    v41(v30, v32);
    swift_endAccess(v87);
    v42 = v92;
    v93 = v36;
    v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36)(v42, v31, v32);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    v46 = os_log_type_enabled(v44, v45);
    v47 = *(_QWORD *)(v0 + 376);
    v48 = *(_QWORD *)(v0 + 344);
    if (v46)
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = (char *)swift_slowAlloc(32, -1);
      v98 = v88;
      *(_DWORD *)v49 = 136446210;
      v50 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v48, v50);
      v53 = v52;
      *v83 = sub_10002BA84(v51, v52, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v83, v85, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v53);
      v41(v47, v48);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Start latestLocation Task:%{public}s", v49, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      v41(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 344));
    }

    v71 = *(_QWORD *)(v0 + 384);
    v73 = *(_QWORD *)(v0 + 352);
    v72 = *(_QWORD *)(v0 + 360);
    v74 = *(_QWORD *)(v0 + 344);
    v75 = *(_QWORD *)(v0 + 216);
    v90 = *(_QWORD *)(v0 + 224);
    v93(v71, *(_QWORD *)(v0 + 392), v74);
    v76 = *(unsigned __int8 *)(v73 + 80);
    v77 = (v76 + 48) & ~v76;
    v78 = (v72 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    v79 = (char *)swift_allocObject(&unk_100251E68, v78 + 8, v76 | 7);
    *(_QWORD *)(v0 + 528) = v79;
    *((_QWORD *)v79 + 2) = v75;
    *((_QWORD *)v79 + 3) = v13;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 5) = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(&v79[v77], v71, v74);
    *(_QWORD *)&v79[v78] = v90;
    v80 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain(v75);
    swift_retain(v13);
    swift_bridgeObjectRetain(v96);
    v81 = (_QWORD *)swift_task_alloc(v80);
    *(_QWORD *)(v0 + 536) = v81;
    *v81 = v0;
    v81[1] = sub_1000B07F4;
    return withTimeout<A>(_:block:)();
  }
  else
  {
    swift_release(v13);
    v54 = swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v57 = 134217984;
      *(_QWORD *)(v0 + 136) = 0x404E000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v85, v0 + 144, v57 + 4, v57 + 12);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "All server cached locations are under %fs. Stop shallowRefresh and return", v57, 0xCu);
      swift_slowDealloc(v57, -1, -1);
    }
    v58 = *(_QWORD *)(v0 + 352);
    v59 = *(_QWORD *)(v0 + 208);

    sub_1000C2990(v59);
    v60 = *(void (**)(uint64_t, _QWORD))(v58 + 8);
    v61 = *(_QWORD *)(v0 + 392);
    v62 = *(_QWORD *)(v0 + 400);
    v64 = *(_QWORD *)(v0 + 376);
    v63 = *(_QWORD *)(v0 + 384);
    v65 = *(_QWORD *)(v0 + 368);
    v66 = *(_QWORD *)(v0 + 336);
    v68 = *(_QWORD *)(v0 + 320);
    v67 = *(_QWORD *)(v0 + 328);
    v69 = *(_QWORD *)(v0 + 296);
    v84 = *(_QWORD *)(v0 + 272);
    v86 = *(_QWORD *)(v0 + 264);
    v89 = *(_QWORD *)(v0 + 256);
    v94 = *(_QWORD *)(v0 + 248);
    v60(v62, *(_QWORD *)(v0 + 344));
    v97 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(v62);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v97);
  }
}

uint64_t sub_1000B14B4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 504);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 344);
  swift_release(*(_QWORD *)(v0 + 528));
  v2(v4, v3, v5);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 544);
    v84 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    v10 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 344);
    v12 = swift_slowAlloc(22, -1);
    v86 = swift_slowAlloc(64, -1);
    v88[0] = v86;
    *(_DWORD *)v12 = 136446466;
    v13 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v14, v15, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    v84(v10, v11);
    *(_WORD *)(v12 + 12) = 2082;
    *(_QWORD *)(v0 + 112) = v9;
    swift_errorRetain(v9);
    v17 = sub_100037A5C(&qword_100265260);
    v18 = String.init<A>(describing:)(v0 + 112, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 120) = sub_10002BA84(v18, v19, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LatestLocation Task:%{public}s failed with error: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 544);
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    v23 = *(_QWORD *)(v0 + 368);
    v24 = *(_QWORD *)(v0 + 344);
    swift_errorRelease(v21);
    v22(v23, v24);
    swift_errorRelease(v21);
    swift_errorRelease(v21);

  }
  v25 = (_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + *(_QWORD *)(v0 + 512));
  swift_bridgeObjectRetain(v27);
  v28 = sub_1000A5380(v26, v27);
  v30 = v29;
  v32 = v31;
  swift_bridgeObjectRelease(v27);
  if (v28)
  {
    swift_bridgeObjectRetain(v32);
    sub_1000CF0A4(v28, v30, v32);
  }
  else
  {
    v32 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
  v88[0] = *v25;
  *v25 = 0x8000000000000000;
  sub_10000FC08(v32, (uint64_t)sub_1000A1314, 0, isUniquelyReferenced_nonNull_native, v88);
  v34 = *v25;
  *v25 = v88[0];
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(v0 + 392);
  v36 = *(_QWORD *)(v0 + 208);
  swift_beginAccess(*(_QWORD *)(v0 + 216) + *(_QWORD *)(v0 + 512), v0 + 64, 33, 0);
  v37 = sub_1000F4500(v35);
  v39 = v38;
  v41 = v40;
  swift_endAccess(v0 + 64);
  sub_1000CF0A4(v37, v39, v41);
  v42 = (char *)_swiftEmptyArrayStorage;
  v88[0] = (uint64_t)_swiftEmptyArrayStorage;
  v43 = swift_bridgeObjectRetain(v36);
  v44 = 0;
  do
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD, __n128))(v0 + 480))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 552) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 552))+ *(_QWORD *)(v0 + 472) * v44, *(_QWORD *)(v0 + 232), v43);
    v45 = *(_QWORD *)(v0 + 168);
    if (*(_QWORD *)(v45 + 16)
      && (v46 = *(_QWORD *)(v0 + 256),
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168)),
          sub_10001CBC8(v46),
          LOBYTE(v46) = v47,
          swift_bridgeObjectRelease(v45),
          (v46 & 1) != 0))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 32);
      v48(*(char **)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
      {
        sub_100018EBC(0, *((_QWORD *)v42 + 2) + 1, 1);
        v42 = (char *)v88[0];
      }
      v50 = *((_QWORD *)v42 + 2);
      v49 = *((_QWORD *)v42 + 3);
      if (v50 >= v49 >> 1)
      {
        sub_100018EBC(v49 > 1, v50 + 1, 1);
        v42 = (char *)v88[0];
      }
      v51 = *(_QWORD *)(v0 + 472);
      v52 = *(unsigned __int8 *)(v0 + 552);
      v53 = *(_QWORD *)(v0 + 248);
      v54 = *(_QWORD *)(v0 + 232);
      *((_QWORD *)v42 + 2) = v50 + 1;
      v48(&v42[((v52 + 32) & ~v52) + v51 * v50], v53, v54);
      v88[0] = (uint64_t)v42;
    }
    ++v44;
  }
  while (v44 != *(_QWORD *)(v0 + 416));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  if (*((_QWORD *)v42 + 2))
  {
    v55 = *(_QWORD *)(v0 + 464);
    swift_retain(v42);
    v56 = sub_1000CE120(v55, (uint64_t)v42);
    swift_bridgeObjectRelease(v55);
    swift_release_n(v42, 2);
    v57 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 168));
    v88[0] = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = 0x8000000000000000;
    sub_10000FC08(v56, (uint64_t)sub_1000A1314, 0, v57, v88);
    v58 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = v88[0];
    swift_bridgeObjectRelease(v58);
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    v61 = *(_QWORD *)(v0 + 488);
    v60 = *(_QWORD *)(v0 + 496);
    v62 = *(_QWORD *)(v0 + 392);
    v63 = *(_QWORD *)(v0 + 344);
    sub_1000C2990(*(_QWORD *)(v0 + 208));
    swift_bridgeObjectRelease(v60);
    swift_release(v61);
    v59(v62, v63);
  }
  else
  {
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    v66 = *(_QWORD *)(v0 + 488);
    v65 = *(_QWORD *)(v0 + 496);
    v67 = *(_QWORD *)(v0 + 464);
    v68 = *(_QWORD *)(v0 + 392);
    v69 = *(_QWORD *)(v0 + 344);
    v70 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_bridgeObjectRelease(v67);
    sub_1000C2990(v70);
    swift_bridgeObjectRelease(v65);
    swift_release(v66);
    v64(v68, v69);
  }
  v71 = *(_QWORD *)(v0 + 392);
  v72 = *(_QWORD *)(v0 + 400);
  v74 = *(_QWORD *)(v0 + 376);
  v73 = *(_QWORD *)(v0 + 384);
  v75 = *(_QWORD *)(v0 + 368);
  v76 = *(_QWORD *)(v0 + 336);
  v78 = *(_QWORD *)(v0 + 320);
  v77 = *(_QWORD *)(v0 + 328);
  v79 = *(_QWORD *)(v0 + 296);
  v81 = *(_QWORD *)(v0 + 272);
  v82 = *(_QWORD *)(v0 + 264);
  v83 = *(_QWORD *)(v0 + 256);
  v85 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD))(v0 + 520))(v72, *(_QWORD *)(v0 + 344));
  v87 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(v72);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v87);
}

void sub_1000B1B48(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;

  v10 = sub_100037A5C(&qword_100260600);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Handle(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v41 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v36 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  if (v19)
  {
    v38 = v12;
    v39 = a2;
    v40 = a4;
    v20 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v42 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v42((char *)&v36 - v17, a3 + v20, v13);
    v21 = a1;
    v22 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(a3);
    v43 = v21;
    LOBYTE(v21) = dispatch thunk of static Equatable.== infix(_:_:)(v18, v21, v13, v22);
    v23 = *(void (**)(char *, uint64_t))(v14 + 8);
    v23(v18, v13);
    if ((v21 & 1) != 0)
      goto LABEL_5;
    if (v19 == 1)
      goto LABEL_12;
    v37 = *(_QWORD *)(v14 + 72);
    v42(v18, a3 + v20 + v37, v13);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v43, v13, v22);
    v23(v18, v13);
    if ((v24 & 1) != 0)
    {
LABEL_5:
      v25 = swift_bridgeObjectRelease(a3);
      v26 = v39;
      v27 = Location.timestamp.getter(v25);
      v28 = (uint64_t)v38;
      if (a5 - v27 < 60.0)
      {
        v29 = (uint64_t)v41;
        v42(v41, v43, v13);
        v30 = type metadata accessor for Location(0);
        v31 = *(_QWORD *)(v30 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v28, v26, v30);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        sub_1000DE0E0(v28, v29);
      }
      return;
    }
    if (v19 == 2)
    {
LABEL_12:
      swift_bridgeObjectRelease(a3);
      return;
    }
    v32 = a3 + v20 + 2 * v37;
    v33 = 2;
    while (1)
    {
      v42(v18, v32, v13);
      v34 = v33 + 1;
      if (__OFADD__(v33, 1))
        break;
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v43, v13, v22);
      v23(v18, v13);
      if ((v35 & 1) != 0)
        goto LABEL_5;
      ++v33;
      v32 += v37;
      if (v34 == v19)
        goto LABEL_12;
    }
    __break(1u);
  }
}

uint64_t sub_1000B1E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[3] = a2;
  v8 = type metadata accessor for UUID(0);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B1E9C, a2, 0);
}

uint64_t sub_1000B1E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 88) = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_1000B1F3C;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1000B1F3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1000B21C0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v5 = sub_1000B1FB0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000B1FB0()
{
  return swift_task_switch(sub_1000B1FC4, 0, 0);
}

uint64_t sub_1000B1FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027ABA8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 64);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LatestLocation task:%{public}s resumed", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B21C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B21FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t Priority;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  Priority = type metadata accessor for LocatePriority(0);
  v3[20] = Priority;
  v5 = *(_QWORD *)(Priority - 8);
  v3[21] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v6);
  v3[23] = swift_task_alloc(v6);
  v3[24] = swift_task_alloc(v6);
  v7 = type metadata accessor for Handle(0);
  v3[25] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[26] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v9);
  v3[28] = swift_task_alloc(v9);
  v10 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v3[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v3[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[31] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v13);
  v3[33] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000B2310, v2, 0);
}

uint64_t sub_1000B2310()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int16x8_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  __n128 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int16x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  NSObject *v82;
  Class isa;
  uint64_t v84;
  char *v85;
  uint64_t (*v86)(_QWORD, char *, _QWORD);
  void (*v87)(uint64_t, _QWORD, uint64_t);
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(_QWORD, char *, _QWORD);
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v138;
  uint64_t v139;
  os_log_type_t v140;
  uint8_t *v141;
  NSObject *log;
  os_log_t loga;
  uint64_t *v144;
  unsigned int v145;
  void (*v146)(uint64_t, uint64_t);
  void (*v147)(uint64_t, uint64_t);
  uint64_t *v148;
  uint64_t *v149;
  void (*v150)(_QWORD);
  _QWORD *v151;
  uint64_t *v152;
  uint64_t (*v153)(uint64_t, uint64_t, uint64_t);
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160[2];

  v2 = v0 + 17;
  v1 = v0[17];
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v0[26];
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    v7 = (int16x8_t)swift_bridgeObjectRetain(v1);
    v8 = v3;
    do
    {
      v7.i64[0] = 0x8002200030003;
      sub_1000CCD04(v5, v0[18], "stopRefresh priority: %{public}s for %{private,mask.hash}s", v7);
      v5 += v6;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(*v2);
  }
  type metadata accessor for Transaction(0);
  v9 = static Transaction.currentNSXPCConnection.getter();
  v10 = v0[30];
  v11 = v0[31];
  v12 = v0[29];
  if (v9)
  {
    v13 = (void *)v9;
    NSXPCConnection.id.getter();

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[31] + 32))(v0[33], v0[29], v0[30]);
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v11 + 56))(v0[29], 1, 1, v0[30]);
  }
  v14 = v0[29];
  v15 = type metadata accessor for LocationService(0);
  v16 = sub_100018A7C(&qword_100261E08, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
  v17 = CustomStringConvertible<>.addressDescription.getter(v15, v16);
  v19 = v18;
  v20 = String.utf8Data.getter(v17);
  v22 = v21;
  swift_bridgeObjectRelease(v19);
  v0[5] = v20;
  v0[6] = v22;
  v23 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v23);
  sub_100037AB4(v20, v22);
  sub_1000087A0(v14, (uint64_t *)&unk_1002675F0);
LABEL_10:
  v149 = v0 + 14;
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v25 = v0[32];
  v24 = v0[33];
  v27 = v0[30];
  v26 = v0[31];
  v28 = v0[17];
  v29 = type metadata accessor for Logger(0);
  v0[34] = sub_100037A9C(v29, (uint64_t)qword_10027ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
  v30 = swift_bridgeObjectRetain_n(v28, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v34 = v0[31];
  v35 = v0[32];
  v36 = v0[30];
  if (v33)
  {
    v140 = v32;
    log = v31;
    v144 = v0 + 17;
    v148 = v0 + 16;
    v37 = swift_slowAlloc(32, -1);
    v139 = swift_slowAlloc(96, -1);
    v159 = v139;
    *(_DWORD *)v37 = 136446722;
    *v149 = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FE340, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v149, v0 + 15, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2082;
    v38 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v38);
    v41 = v40;
    v0[15] = sub_10002BA84(v39, v40, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease(v41);
    v42 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v42(v35, v36);
    v141 = (uint8_t *)v37;
    *(_WORD *)(v37 + 22) = 2080;
    v44 = _swiftEmptyArrayStorage;
    if (v3)
    {
      v146 = v42;
      v45 = v0[26];
      v46 = v0[17];
      v160[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000312EC(0, v3, 0);
      v47 = v46 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
      v48 = v45;
      v153 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
      v156 = *(_QWORD *)(v45 + 72);
      do
      {
        v49 = v0[28];
        v50 = v0[25];
        v51 = v153(v49, v47, v50);
        v52 = Handle.identifier.getter(v51);
        v54 = v53;
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
        v44 = (_QWORD *)v160[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v160[0]) & 1) == 0)
        {
          sub_1000312EC(0, v44[2] + 1, 1);
          v44 = (_QWORD *)v160[0];
        }
        v56 = v44[2];
        v55 = v44[3];
        if (v56 >= v55 >> 1)
        {
          sub_1000312EC(v55 > 1, v56 + 1, 1);
          v44 = (_QWORD *)v160[0];
        }
        v44[2] = v56 + 1;
        v57 = &v44[2 * v56];
        v57[4] = v52;
        v57[5] = v54;
        v47 += v156;
        --v3;
      }
      while (v3);
      v42 = v146;
    }
    v2 = v0 + 17;
    v59 = *v144;
    v60 = Array.description.getter(v43);
    v62 = v61;
    swift_bridgeObjectRelease(v44);
    *v148 = sub_10002BA84(v60, v62, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v148, v144, v141 + 24, v141 + 32);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease(v62);
    _os_log_impl((void *)&_mh_execute_header, log, v140, "%{public}s for client %{public}s %s", v141, 0x20u);
    swift_arrayDestroy(v139, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v139, -1, -1);
    swift_slowDealloc(v141, -1, -1);

  }
  else
  {
    v58 = *v2;
    v42 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v42(v0[32], v0[30]);

    swift_bridgeObjectRelease_n(v58, 2);
  }
  v0[35] = v42;
  sub_1000BB030(v0[33], (_QWORD *)v0[17], v0[18]);
  v0[36] = v63;
  v65 = *(_QWORD *)(v63 + 16);
  if (v65)
  {
    v66 = v0[26];
    v154 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    v67 = v63 + v154;
    v68 = *(_QWORD *)(v66 + 72);
    do
    {
      v64.i64[0] = 0x8002000030003;
      sub_1000CCD04(v67, v0[18], "Unsubscribe %s for handle: %{private,mask.hash}s", v64);
      v67 += v68;
      --v65;
    }
    while (v65);
    v69 = v0[24];
    v70 = v0[20];
    v71 = v0[21];
    v72 = *(void (**)(_QWORD))(v71 + 104);
    ((void (*)(uint64_t, _QWORD, uint64_t))v72)(v69, enum case for LocatePriority.live(_:), v70);
    v73 = sub_100018A7C(&qword_100261878, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    dispatch thunk of RawRepresentable.rawValue.getter(v70, v73);
    dispatch thunk of RawRepresentable.rawValue.getter(v70, v73);
    v74 = v0[9];
    v75 = v0[7];
    v76 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v0[37] = v76;
    v76(v69, v70);
    if (v74 == v75)
    {
      v77 = v0[33];
      v78 = v0[24];
      v79 = v0[20];
      v80 = (_QWORD *)v0[17];
      v145 = enum case for LocatePriority.shallow(_:);
      v150 = v72;
      v72(v78);
      sub_1000BB030(v77, v80, v78);
      v82 = v81;
      v0[38] = v81;
      v76(v78, v79);
      isa = v82[2].isa;
      if (isa)
      {
        v84 = v0[26];
        v85 = (char *)v82 + v154;
        v86 = *(uint64_t (**)(_QWORD, char *, _QWORD))(v84 + 16);
        loga = v82;
        swift_bridgeObjectRetain(v82);
        v87 = (void (*)(uint64_t, _QWORD, uint64_t))v150;
        v157 = v68;
        v151 = v0;
        do
        {
          v88 = v86(v0[27], v85, v0[25]);
          v89 = Logger.logObject.getter(v88);
          v90 = static os_log_type_t.default.getter(v89);
          v91 = os_log_type_enabled(v89, v90);
          v92 = v0[27];
          v93 = v0[25];
          if (v91)
          {
            v94 = swift_slowAlloc(22, -1);
            v95 = swift_slowAlloc(32, -1);
            v160[0] = v95;
            *(_DWORD *)v94 = 141558275;
            *(_QWORD *)(v94 + 4) = 1752392040;
            *(_WORD *)(v94 + 12) = 2081;
            v96 = Handle.identifier.getter(v95);
            v155 = v93;
            v97 = v86;
            v98 = v84;
            v100 = v99;
            *(_QWORD *)(v94 + 14) = sub_10002BA84(v96, v99, v160);
            v101 = v100;
            v84 = v98;
            v86 = v97;
            swift_bridgeObjectRelease(v101);
            (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v92, v155);
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Unsubscribe Shallow along with live\nfor handle:%{private,mask.hash}s", (uint8_t *)v94, 0x16u);
            swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v95, -1, -1);
            v102 = v94;
            v87 = (void (*)(uint64_t, _QWORD, uint64_t))v150;
            swift_slowDealloc(v102, -1, -1);

          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v92, v93);
          }
          v85 += v157;
          isa = (Class)((char *)isa - 1);
          v0 = v151;
        }
        while (isa);
        v125 = v151[23];
        v126 = v151[20];
        swift_bridgeObjectRelease(loga);
        v87(v125, v145, v126);
        v127 = (_QWORD *)swift_task_alloc(dword_1002620E4);
        v151[39] = v127;
        *v127 = v151;
        v127[1] = sub_1000B2E58;
        v128 = v151[23];
        v129 = (uint64_t)loga;
        return sub_1000BCEB0(v129, v128);
      }
      swift_bridgeObjectRelease(v82);
    }
    v0[41] = 0;
    v138 = (_QWORD *)swift_task_alloc(dword_1002620E4);
    v0[42] = v138;
    *v138 = v0;
    v138[1] = sub_1000B2F18;
    v128 = v0[18];
    v129 = v0[36];
    return sub_1000BCEB0(v129, v128);
  }
  v147 = v42;
  v103 = v2;
  v105 = v0[21];
  v104 = v0[22];
  v106 = v0[20];
  v107 = v0[18];
  swift_bridgeObjectRelease(v63);
  v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v104, v107, v106);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.default.getter(v109);
  v111 = os_log_type_enabled(v109, v110);
  v112 = v0[33];
  v113 = v0[30];
  v115 = v0[21];
  v114 = v0[22];
  v116 = v0[20];
  if (v111)
  {
    v152 = v103 - 4;
    v158 = v0[33];
    v117 = (uint8_t *)swift_slowAlloc(12, -1);
    v118 = swift_slowAlloc(32, -1);
    v160[0] = v118;
    *(_DWORD *)v117 = 136446210;
    v119 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v120 = dispatch thunk of CustomStringConvertible.description.getter(v116, v119);
    v122 = v121;
    *v152 = sub_10002BA84(v120, v121, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v152, v149, v117 + 4, v117 + 12);
    swift_bridgeObjectRelease(v122);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "stopRefreshing: no handles to unsubscribe %{public}s", v117, 0xCu);
    swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v117, -1, -1);

    v124 = v113;
    v123 = v158;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
    v123 = v112;
    v124 = v113;
  }
  v147(v123, v124);
  v130 = v0[32];
  v132 = v0[28];
  v131 = v0[29];
  v133 = v0[27];
  v135 = v0[23];
  v134 = v0[24];
  v136 = v0[22];
  swift_task_dealloc(v0[33]);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000B2E58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*v1 + 312);
  v3 = *v1;
  *(_QWORD *)(v3 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = *(_QWORD *)(v3 + 152);
    (*(void (**)(_QWORD, _QWORD))(v3 + 296))(*(_QWORD *)(v3 + 184), *(_QWORD *)(v3 + 160));
    return swift_task_switch(sub_1000B3270, v4, 0);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 304);
    (*(void (**)(_QWORD, _QWORD))(v3 + 296))(*(_QWORD *)(v3 + 184), *(_QWORD *)(v3 + 160));
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v3 + 328) = 0;
    v7 = (_QWORD *)swift_task_alloc(dword_1002620E4);
    *(_QWORD *)(v3 + 336) = v7;
    *v7 = v3;
    v7[1] = sub_1000B2F18;
    return sub_1000BCEB0(*(_QWORD *)(v3 + 288), *(_QWORD *)(v3 + 144));
  }
}

uint64_t sub_1000B2F18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 288);
  v5 = *(_QWORD *)(v2 + 152);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v6 = sub_1000B3510;
  else
    v6 = sub_1000B2F88;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000B2F88()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = swift_retain_n(*(_QWORD *)(v0 + 152), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (!os_log_type_enabled(v2, v3))
  {
    v23 = *(_QWORD *)(v0 + 152);

    v13 = swift_release_n(v23, 2);
    if (*(_QWORD *)(v0 + 328))
      goto LABEL_3;
LABEL_5:
    (*(void (**)(_QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
    v24 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 216);
    v29 = *(_QWORD *)(v0 + 184);
    v28 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  v4 = *(_QWORD *)(v0 + 152);
  v5 = swift_slowAlloc(22, -1);
  v6 = swift_slowAlloc(32, -1);
  v32 = v6;
  *(_DWORD *)v5 = 141558275;
  *(_QWORD *)(v0 + 64) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 4, v5 + 12);
  *(_WORD *)(v5 + 12) = 2081;
  v7 = (uint64_t *)(v4 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v4 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v0 + 16, 0, 0);
  v8 = *v7;
  sub_100018A7C(&qword_1002625C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
  v9 = swift_bridgeObjectRetain(v8);
  v10 = Dictionary.description.getter(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(v0 + 80) = sub_10002BA84(v10, v12, &v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 14, v5 + 22);
  swift_release_n(v4, 2);
  swift_bridgeObjectRelease(v12);
  _os_log_impl((void *)&_mh_execute_header, v2, v3, "After StopRefreshing current subscriptions: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
  swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v6, -1, -1);
  swift_slowDealloc(v5, -1, -1);

  if (!*(_QWORD *)(v0 + 328))
    goto LABEL_5;
LABEL_3:
  swift_willThrow(v13);
  v15 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(v0 + 280))(v14, *(_QWORD *)(v0 + 240));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_1000B3270()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = v0[40];
  v3 = v0[38];
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v3);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    type = v6;
    v7 = v0[40];
    v8 = v0[38];
    v9 = swift_slowAlloc(22, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v25 = v24;
    *(_DWORD *)v9 = 138543618;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    v0[11] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v9 + 4, v9 + 12);
    *v21 = v10;
    v22 = v7;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    *(_WORD *)(v9 + 12) = 2080;
    v11 = swift_bridgeObjectRetain(v8);
    v12 = v5;
    v13 = Array.description.getter(v11);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    v0[12] = sub_10002BA84(v13, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "Unsubscribing from .shallow failed with error: %{public}@, for handles: %s", (uint8_t *)v9, 0x16u);
    v16 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v21, 1, v16);
    swift_slowDealloc(v21, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v22);
  }
  else
  {
    v17 = v0[40];
    v18 = v0[38];
    swift_errorRelease(v1[40]);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

    swift_bridgeObjectRelease_n(v18, 2);
  }
  v1[41] = v2;
  v19 = (uint64_t **)swift_task_alloc(dword_1002620E4);
  v1[42] = (uint64_t)v19;
  *v19 = v1;
  v19[1] = (uint64_t *)sub_1000B2F18;
  return sub_1000BCEB0(v1[36], v1[18]);
}

uint64_t sub_1000B3510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_errorRelease(*(_QWORD *)(v0 + 328));
  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(v0 + 280))(v1, *(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B35C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  return swift_task_switch(sub_1000B35E4, v1, 0);
}

uint64_t sub_1000B35E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      sub_1000CE2D4(v4);
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  }
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_1000B3690;
  return daemon.getter();
}

uint64_t sub_1000B3690(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(*v1 + 64) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000B3780;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000B3780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  *(_QWORD *)(*(_QWORD *)v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[5];
    v7 = sub_1000B3B70;
  }
  else
  {
    v8 = v4[5];
    swift_release(v4[8]);
    v4[11] = a1;
    v7 = sub_1000B3804;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000B3804()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = v0[10];
  v1 = v0[11];
  v3 = sub_1000A4A30(v0[4]);
  v0[12] = v2;
  v0[13] = sub_10016B5B4((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000B3868, v1, 0);
}

uint64_t sub_1000B3868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 112) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 120) = v7;
  *v7 = v0;
  v7[1] = sub_1000B3938;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000B3938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000B39A0, v4, 0);
}

uint64_t sub_1000B39A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v10 = *(_OWORD *)(v0 + 40);
  v3 = sub_1000CAD48(v1, v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  v4 = sub_1000A51F0((uint64_t)v3);
  *(_QWORD *)(v0 + 136) = v4;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100037A5C(&qword_100261858);
  v6 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v7 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 144) = v7;
  *(_QWORD *)(v7 + 16) = v4;
  *(_OWORD *)(v7 + 24) = v10;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 152) = v8;
  *v8 = v0;
  v8[1] = sub_1000B3AC4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 24, v5, v5, v10, v6, &unk_100262668, v7, v5);
}

uint64_t sub_1000B3AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000B3B38, v3, 0);
}

uint64_t sub_1000B3B38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000B3B70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B3BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[23] = a4;
  v5[24] = a5;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  v7 = sub_100037A5C(&qword_100261DA8);
  v5[25] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[26] = v8;
  v5[27] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[28] = swift_task_alloc(v9);
  v5[29] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000B3C48, a4, 0);
}

uint64_t sub_1000B3C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 120) = _swiftEmptyDictionarySingleton;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = type metadata accessor for TaskPriority(0);
    v4 = *(_QWORD *)(v3 - 8);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    v5 = swift_bridgeObjectRetain(v1);
    v6 = (_QWORD *)(v1 + 40);
    while (1)
    {
      v38 = v6;
      v39 = v2;
      v10 = *(_QWORD *)(v0 + 224);
      v9 = *(_QWORD *)(v0 + 232);
      v11 = *(_QWORD *)(v0 + 184);
      v40 = *(_QWORD *)(v0 + 192);
      v12 = v4;
      v13 = *(v6 - 1);
      v14 = *v6;
      v37(v9, 1, 1, v3, v5);
      v15 = (_QWORD *)swift_allocObject(&unk_100251DC8, 64, 7);
      v15[2] = 0;
      v16 = v15 + 2;
      v15[3] = 0;
      v15[4] = v11;
      v15[5] = v13;
      v15[6] = v14;
      v4 = v12;
      v15[7] = v40;
      sub_10000E37C(v9, v10, (uint64_t *)&unk_100265180);
      LODWORD(v10) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v3);
      swift_bridgeObjectRetain(v14);
      swift_retain(v11);
      v18 = *(_QWORD *)(v0 + 224);
      if ((_DWORD)v10 == 1)
      {
        sub_1000087A0(*(_QWORD *)(v0 + 224), (uint64_t *)&unk_100265180);
        v19 = 0;
        v20 = *v16;
        if (!*v16)
          goto LABEL_8;
      }
      else
      {
        v26 = TaskPriority.rawValue.getter(v17);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, v3);
        v19 = v26;
        v20 = *v16;
        if (!*v16)
        {
LABEL_8:
          v23 = 0;
          v25 = 0;
          goto LABEL_9;
        }
      }
      v21 = v15[3];
      ObjectType = swift_getObjectType(v20);
      swift_unknownObjectRetain(v20);
      v23 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      v25 = v24;
      swift_unknownObjectRelease(v20);
LABEL_9:
      v27 = **(_QWORD **)(v0 + 168);
      v28 = swift_allocObject(&unk_100251DF0, 32, 7);
      *(_QWORD *)(v28 + 16) = &unk_100262678;
      *(_QWORD *)(v28 + 24) = v15;
      v29 = sub_100037A5C(&qword_100261858);
      v30 = v25 | v23;
      if (v25 | v23)
      {
        v30 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v23;
        *(_QWORD *)(v0 + 40) = v25;
      }
      v7 = *(_QWORD *)(v0 + 232);
      *(_QWORD *)(v0 + 72) = 1;
      *(_QWORD *)(v0 + 80) = v30;
      *(_QWORD *)(v0 + 88) = v27;
      v8 = swift_task_create(v19 | 0x3100, v0 + 72, v29, &unk_100261DE8, v28);
      swift_release(v8);
      sub_1000087A0(v7, (uint64_t *)&unk_100265180);
      v6 = v38 + 2;
      v2 = v39 - 1;
      if (v39 == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
        break;
      }
    }
  }
  v31 = **(_QWORD **)(v0 + 168);
  v32 = sub_100037A5C(&qword_100261858);
  TaskGroup.makeAsyncIterator()(v31, v32);
  v33 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  *(_QWORD *)(v0 + 240) = v33;
  *(_QWORD *)(v0 + 248) = 0;
  v34 = *(_QWORD *)(v0 + 184);
  v35 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v35;
  *v35 = v0;
  v35[1] = sub_1000B3F50;
  return TaskGroup.Iterator.next(isolation:)(v0 + 136, v34, v33, *(_QWORD *)(v0 + 200));
}

uint64_t sub_1000B3F50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_1000B3FA8, v1, 0);
}

uint64_t sub_1000B3FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26[2];

  v1 = *(_QWORD *)(v0 + 136);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 248);
    v3 = *(_QWORD *)(v0 + 120);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    *(_QWORD *)(v0 + 152) = v3;
    sub_10000FC08(v1, (uint64_t)sub_1000A1314, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)(v0 + 152));
    if (v2)
    {
      return swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 152);
      swift_bridgeObjectRelease(0x8000000000000000);
      *(_QWORD *)(v0 + 248) = 0;
      v23 = *(_QWORD *)(v0 + 240);
      v24 = *(_QWORD *)(v0 + 184);
      v25 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 256) = v25;
      *v25 = v0;
      v25[1] = sub_1000B3F50;
      return TaskGroup.Iterator.next(isolation:)(v0 + 136, v24, v23, *(_QWORD *)(v0 + 200));
    }
  }
  else
  {
    v6 = v0 + 120;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100037A9C(v7, (uint64_t)qword_10027ABA8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v26[0] = v12;
      *(_DWORD *)v11 = 136446466;
      *(_QWORD *)(v0 + 128) = sub_10002BA84(0x6E6F697461636F6CLL, 0xEF293A726F662873, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2080;
      swift_beginAccess(v0 + 120, v0 + 96, 0, 0);
      v13 = *(_QWORD *)(v0 + 120);
      type metadata accessor for Handle(0);
      type metadata accessor for Location(0);
      sub_100018A7C(&qword_1002605F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v14 = swift_bridgeObjectRetain(v13);
      v15 = Dictionary.description.getter(v14);
      v17 = v16;
      swift_bridgeObjectRelease(v13);
      *(_QWORD *)(v0 + 144) = sub_10002BA84(v15, v17, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "One-shot %{public}s result: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      v18 = v11;
      v6 = v0 + 120;
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD **)(v0 + 160);
    swift_beginAccess(v6, v0 + 48, 0, 0);
    *v22 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a1;
  v6[13] = a4;
  return swift_task_switch(sub_1000B4350, a4, 0);
}

uint64_t sub_1000B4350()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[13];
  v4 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v5 = (_QWORD *)swift_task_alloc(48);
  v0[16] = v5;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v6;
  v7 = sub_1000CE858();
  *v6 = v0;
  v6[1] = sub_1000B4430;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, v3, v4, 0xD000000000000024, 0x80000001001FE2E0, sub_1000CEE50, v5, v7);
}

uint64_t sub_1000B4430()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_1000B480C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    swift_task_dealloc(*(_QWORD *)(v2 + 128));
    v5 = sub_1000B44A4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000B44A4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 56);
  return swift_task_switch(sub_1000B44C0, 0, 0);
}

uint64_t sub_1000B44C0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = (void *)v0[19];
  v2 = sub_100037A5C(&qword_100265250);
  inited = swift_initStackObject(v2, v0 + 2);
  v0[20] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1001F5130;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()(inited);
  v0[21] = v9;
  v4 = dword_10026211C;
  v5 = v1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[22] = v6;
  *v6 = v0;
  v6[1] = sub_1000B4570;
  v7 = v0[13];
  v6[2] = v9;
  v6[3] = v7;
  return swift_task_switch(sub_1000C5BB0, v7, 0);
}

uint64_t sub_1000B4570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000B45D4, 0, 0);
}

uint64_t sub_1000B45D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v15;
  uint64_t v16;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  if (v6)
  {
    v15 = *(void **)(v0 + 152);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Handle(0);
    type metadata accessor for Location(0);
    sub_100018A7C(&qword_1002605F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Dictionary.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 88) = sub_10002BA84(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received cached location: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  **(_QWORD **)(v0 + 96) = *(_QWORD *)(v0 + 184);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B480C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return swift_task_switch(sub_1000B4848, 0, 0);
}

uint64_t sub_1000B4848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 120);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 112);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v20 = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v10, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2082;
    *(_QWORD *)(v0 + 72) = v8;
    swift_errorRetain(v8);
    v13 = sub_100037A5C(&qword_100265260);
    v14 = String.init<A>(describing:)(v0 + 72, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to retrieve cached location for %s. %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  v17 = *(_QWORD *)(v0 + 144);
  v18 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v17);
  **(_QWORD **)(v0 + 96) = v18;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B4AB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t Priority;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[35] = a1;
  v2[36] = v1;
  Priority = type metadata accessor for LocatePriority(0);
  v2[37] = Priority;
  v4 = *(_QWORD *)(Priority - 8);
  v2[38] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v5);
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  v2[42] = swift_task_alloc(v5);
  v2[43] = swift_task_alloc(v5);
  v2[44] = swift_task_alloc(v5);
  v6 = sub_100037A5C(&qword_1002650A0);
  v2[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v2[47] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[48] = v9;
  v2[49] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v2[50] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[51] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[52] = swift_task_alloc(v12);
  v2[53] = swift_task_alloc(v12);
  v2[54] = swift_task_alloc(v12);
  v2[55] = swift_task_alloc(v12);
  v2[56] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000B4C24, v1, 0);
}

uint64_t sub_1000B4C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void (*v42)(_QWORD);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void (*v110)(uint64_t, _QWORD);
  void (*v111)(_QWORD *);
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  _BOOL4 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(unint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, _QWORD, uint64_t);
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t, uint64_t);
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t);
  void (*v186)(uint64_t, uint64_t);
  void (*v187)(uint64_t, uint64_t);
  void (*v188)(unint64_t, uint64_t, uint64_t);
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027ABA8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "replaceOrKeepExistingLiveSubscription with no handle", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v189 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    v18 = *(_QWORD *)(v0 + 440);
    v20 = *(_QWORD *)(v0 + 424);
    v19 = *(_QWORD *)(v0 + 432);
    v21 = *(_QWORD *)(v0 + 416);
    v22 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 360);
    v23 = *(_QWORD *)(v0 + 368);
    v25 = *(_QWORD *)(v0 + 344);
    v26 = *(_QWORD *)(v0 + 352);
    v175 = *(_QWORD *)(v0 + 336);
    v178 = *(_QWORD *)(v0 + 328);
    v181 = *(_QWORD *)(v0 + 320);
    v184 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    swift_task_dealloc(v175);
    swift_task_dealloc(v178);
    swift_task_dealloc(v181);
    swift_task_dealloc(v184);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v189);
  }
  v165 = v0 + 224;
  v168 = v0 + 248;
  v170 = v0 + 256;
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 408);
  v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 592) = v5;
  v6 = v5;
  v177 = (v5 + 32) & ~(unint64_t)v5;
  v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 456) = v7;
  v188 = v7;
  ((void (*)(uint64_t))v7)(v3);
  type metadata accessor for Transaction(0);
  v8 = static Transaction.currentNSXPCConnection.getter();
  v9 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 368);
  v180 = v6;
  if (v8)
  {
    v12 = (void *)v8;
    NSXPCConnection.id.getter();

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v11, 0, 1, v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 32))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, 1, 1, v9);
  }
  v28 = *(_QWORD *)(v0 + 368);
  v29 = type metadata accessor for LocationService(0);
  v30 = sub_100018A7C(&qword_100261E08, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
  v31 = CustomStringConvertible<>.addressDescription.getter(v29, v30);
  v33 = v32;
  v34 = String.utf8Data.getter(v31);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(v0 + 200) = v34;
  *(_QWORD *)(v0 + 208) = v36;
  v37 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v37);
  sub_100037AB4(v34, v36);
  sub_1000087A0(v28, (uint64_t *)&unk_1002675F0);
LABEL_12:
  v38 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 304);
  v40 = *(_QWORD *)(v0 + 288);
  v41 = enum case for LocatePriority.live(_:);
  *(_DWORD *)(v0 + 596) = enum case for LocatePriority.live(_:);
  v42 = *(void (**)(_QWORD))(v39 + 104);
  *(_QWORD *)(v0 + 464) = v42;
  v176 = v41;
  v173 = (void (*)(uint64_t, _QWORD, uint64_t))v42;
  v42(v38);
  v43 = (uint64_t *)(v40 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v43, v0 + 152, 0, 0);
  v44 = *v43;
  if (!*(_QWORD *)(*v43 + 16))
  {
LABEL_18:
    v54 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 8);
    v54(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 296));
    goto LABEL_19;
  }
  v45 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRetain(v44);
  v46 = sub_10001BE14(v45);
  if ((v47 & 1) == 0)
  {
    swift_bridgeObjectRelease(v44);
    goto LABEL_18;
  }
  v48 = *(_QWORD *)(v0 + 352);
  v50 = *(_QWORD *)(v0 + 296);
  v49 = *(_QWORD *)(v0 + 304);
  v51 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 24 * v46);
  v52 = *v51;
  v53 = v51[1];
  swift_retain(v53);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v44);
  v54 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  *(_QWORD *)(v0 + 472) = v54;
  v54(v48, v50);
  if (!v52)
  {
LABEL_19:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 408) + 56))(*(_QWORD *)(v0 + 360), 1, 1, *(_QWORD *)(v0 + 400));
    goto LABEL_20;
  }
  v185 = v54;
  v56 = *(_QWORD *)(v0 + 400);
  v55 = *(_QWORD *)(v0 + 408);
  v57 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRetain(v52);
  sub_1000CECAC(v58, v53);
  sub_100183A4C(v52, v57);
  swift_bridgeObjectRelease(v52);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v57, 1, v56) == 1)
  {
    v54 = v185;
LABEL_20:
    *(_QWORD *)(v0 + 552) = v54;
    sub_1000087A0(*(_QWORD *)(v0 + 360), &qword_1002650A0);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v186 = v54;
    v59 = type metadata accessor for Logger(0);
    v60 = sub_100037A9C(v59, (uint64_t)qword_10027ABA8);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = *(_QWORD *)(v0 + 448);
      v64 = *(_QWORD *)(v0 + 400);
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(32, -1);
      v191 = v66;
      *(_DWORD *)v65 = 141558275;
      *(_QWORD *)(v0 + 248) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v168, v170, v65 + 4, v65 + 12);
      *(_WORD *)(v65 + 12) = 2081;
      swift_beginAccess(v63, v0 + 128, 0, 0);
      v67 = sub_100018A7C(&qword_100261A98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v64, v67);
      v70 = v69;
      *(_QWORD *)(v0 + 216) = sub_10002BA84(v68, v69, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v165, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "No current live subscription, new subscription for %{private,mask.hash}s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }

    v71 = *(_QWORD *)(v0 + 448);
    v73 = *(_QWORD *)(v0 + 400);
    v72 = *(_QWORD *)(v0 + 408);
    v163 = *(_QWORD *)(v0 + 392);
    v74 = *(_QWORD *)(v0 + 328);
    v171 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)type = *(_QWORD *)(v0 + 296);
    v169 = sub_100037A5C(&qword_100262658);
    v166 = *(_QWORD *)(v72 + 72) + v177;
    v182 = v180 | 7;
    v75 = swift_allocObject(v169, v166, v182);
    *(_OWORD *)(v75 + 16) = xmmword_1001F35F0;
    swift_beginAccess(v71, v0 + 80, 0, 0);
    v188(v75 + v177, v71, v73);
    v173(v74, v176, *(_QWORD *)type);
    sub_1000BBC94(v163, v75, v74);
    swift_bridgeObjectRelease(v75);
    v186(v74, *(_QWORD *)type);
    v76 = swift_allocObject(v169, v166, v182);
    *(_QWORD *)(v0 + 560) = v76;
    *(_OWORD *)(v76 + 16) = xmmword_1001F35F0;
    v188(v76 + v177, v71, v73);
    v173(v171, v176, *(_QWORD *)type);
    v77 = (_QWORD *)swift_task_alloc(dword_1002620EC);
    *(_QWORD *)(v0 + 568) = v77;
    *v77 = v0;
    v77[1] = sub_1000B609C;
    v78 = *(_QWORD *)(v0 + 312);
    return sub_1000BE754(v76, v78, 1);
  }
  v161 = (_QWORD *)(v0 + 264);
  v79 = v0 + 280;
  v81 = *(_QWORD *)(v0 + 432);
  v80 = *(_QWORD *)(v0 + 440);
  v83 = *(_QWORD *)(v0 + 400);
  v82 = *(_QWORD *)(v0 + 408);
  v84 = *(_QWORD *)(v0 + 280);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 32))(v80, *(_QWORD *)(v0 + 360), v83);
  v188(v81, v1 + v177, v83);
  v85 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  swift_bridgeObjectRetain(v84);
  LOBYTE(v80) = dispatch thunk of static Equatable.== infix(_:_:)(v81, v80, v83, v85);
  v86 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  *(_QWORD *)(v0 + 480) = v86;
  v164 = v86;
  v86(v81, v83);
  if ((v80 & 1) != 0)
  {
LABEL_42:
    swift_bridgeObjectRelease(*(_QWORD *)v79);
    v85 = v180;
    if (qword_10025F8D8 == -1)
    {
LABEL_43:
      v127 = *(_QWORD *)(v0 + 440);
      v128 = *(_QWORD *)(v0 + 424);
      v129 = *(_QWORD *)(v0 + 400);
      v130 = type metadata accessor for Logger(0);
      sub_100037A9C(v130, (uint64_t)qword_10027ABA8);
      v131 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v188)(v128, v127, v129);
      v132 = Logger.logObject.getter(v131);
      v133 = static os_log_type_t.debug.getter();
      v134 = os_log_type_enabled(v132, v133);
      v135 = *(_QWORD *)(v0 + 424);
      v136 = *(_QWORD *)(v0 + 400);
      if (v134)
      {
        v137 = swift_slowAlloc(22, -1);
        v138 = v79;
        v139 = swift_slowAlloc(32, -1);
        v191 = v139;
        *(_DWORD *)v137 = 141558275;
        *v161 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v161, v0 + 272, v137 + 4, v137 + 12);
        *(_WORD *)(v137 + 12) = 2081;
        v140 = sub_100018A7C(&qword_100261A98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
        v141 = dispatch thunk of CustomStringConvertible.description.getter(v136, v140);
        v143 = v142;
        *(_QWORD *)(v0 + 272) = sub_10002BA84(v141, v142, &v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v138, v137 + 14, v137 + 22);
        swift_bridgeObjectRelease(v143);
        v164(v135, v136);
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "Keep subscribing live for handle %{private,mask.hash}s", (uint8_t *)v137, 0x16u);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        v144 = v139;
        v85 = v180;
        swift_slowDealloc(v144, -1, -1);
        swift_slowDealloc(v137, -1, -1);
      }
      else
      {
        v164(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 400));
      }

      v145 = *(_QWORD *)(v0 + 408);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v145 + 24))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 400));
      v179 = *(_QWORD *)(v145 + 72) + v177;
      v146 = v85 | 7;
      v174 = v85 | 7;
      v147 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 456);
      v183 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      v187 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
      v148 = *(unsigned int *)(v0 + 596);
      v149 = *(_QWORD *)(v0 + 448);
      v150 = *(_QWORD *)(v0 + 400);
      v167 = *(_QWORD *)(v0 + 392);
      v151 = *(_QWORD *)(v0 + 328);
      v190 = *(_QWORD *)(v0 + 320);
      v152 = (*(unsigned __int8 *)(v0 + 592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 592);
      v153 = *(_QWORD *)(v0 + 296);
      v172 = sub_100037A5C(&qword_100262658);
      v154 = swift_allocObject(v172, v179, v146);
      *(_OWORD *)(v154 + 16) = xmmword_1001F35F0;
      v162 = v149;
      swift_beginAccess(v149, v0 + 104, 0, 0);
      v147(v154 + v152, v149, v150);
      v183(v151, v148, v153);
      sub_1000BBC94(v167, v154, v151);
      swift_bridgeObjectRelease(v154);
      v187(v151, v153);
      v76 = swift_allocObject(v172, v179, v174);
      *(_QWORD *)(v0 + 520) = v76;
      *(_OWORD *)(v76 + 16) = xmmword_1001F35F0;
      v147(v76 + v152, v162, v150);
      v183(v190, v148, v153);
      v155 = (_QWORD *)swift_task_alloc(dword_1002620EC);
      *(_QWORD *)(v0 + 528) = v155;
      *v155 = v0;
      v155[1] = sub_1000B5ED0;
      v78 = *(_QWORD *)(v0 + 320);
      return sub_1000BE754(v76, v78, 1);
    }
LABEL_48:
    swift_once(&qword_10025F8D8, sub_1000A7D34);
    goto LABEL_43;
  }
  if (v2 != 1)
  {
    v87 = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 72);
    v88 = v1 + v87 + v177;
    v79 = 1;
    while (1)
    {
      v188(*(_QWORD *)(v0 + 432), v88, *(_QWORD *)(v0 + 400));
      v89 = v79 + 1;
      if (__OFADD__(v79, 1))
        break;
      v90 = *(_QWORD *)(v0 + 432);
      v91 = *(_QWORD *)(v0 + 400);
      v92 = dispatch thunk of static Equatable.== infix(_:_:)(v90, *(_QWORD *)(v0 + 440), v91, v85);
      v164(v90, v91);
      if ((v92 & 1) != 0)
      {
        v79 = v0 + 280;
        goto LABEL_42;
      }
      ++v79;
      v88 += v87;
      if (v89 == v2)
        goto LABEL_32;
    }
    __break(1u);
    goto LABEL_48;
  }
LABEL_32:
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  v160 = v0 + 16;
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v93 = *(_QWORD *)(v0 + 440);
  v94 = *(_QWORD *)(v0 + 416);
  v95 = *(_QWORD *)(v0 + 400);
  v96 = type metadata accessor for Logger(0);
  sub_100037A9C(v96, (uint64_t)qword_10027ABA8);
  v97 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v188)(v94, v93, v95);
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v98, v99))
  {
    v156 = *(_QWORD *)(v0 + 448);
    typea = v99;
    v100 = *(_QWORD *)(v0 + 416);
    v101 = *(_QWORD *)(v0 + 400);
    v102 = swift_slowAlloc(42, -1);
    v157 = swift_slowAlloc(64, -1);
    v191 = v157;
    *(_DWORD *)v102 = 141558787;
    *(_QWORD *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v165, v0 + 232, v102 + 4, v102 + 12);
    *(_WORD *)(v102 + 12) = 2081;
    v103 = sub_100018A7C(&qword_100261A98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v104 = dispatch thunk of CustomStringConvertible.description.getter(v101, v103);
    v106 = v105;
    *(_QWORD *)(v0 + 232) = sub_10002BA84(v104, v105, &v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v102 + 14, v102 + 22);
    swift_bridgeObjectRelease(v106);
    v164(v100, v101);
    *(_WORD *)(v102 + 22) = 2160;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v168, v102 + 24, v102 + 32);
    *(_WORD *)(v102 + 32) = 2081;
    swift_beginAccess(v156, v0 + 176, 0, 0);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v101, v103);
    v109 = v108;
    *(_QWORD *)(v0 + 256) = sub_10002BA84(v107, v108, &v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, v161, v102 + 34, v102 + 42);
    swift_bridgeObjectRelease(v109);
    _os_log_impl((void *)&_mh_execute_header, v98, typea, "Replacing current live subscription for %{private,mask.hash}s with %{private,mask.hash}s", (uint8_t *)v102, 0x2Au);
    swift_arrayDestroy(v157, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v157, -1, -1);
    swift_slowDealloc(v102, -1, -1);
  }
  else
  {
    v164(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 400));
  }

  v173(*(_QWORD *)(v0 + 344), v176, *(_QWORD *)(v0 + 296));
  v110 = (void (*)(uint64_t, _QWORD))sub_1000A7DC4(v160);
  v111 = sub_1000B65BC((_QWORD *)(v0 + 48));
  if (*v112)
  {
    v113 = *(_QWORD *)(v0 + 344);
    v114 = *(_QWORD *)(v0 + 296);
    v115 = sub_1000F4428(*(_QWORD *)(v0 + 440));
    ((void (*)(uint64_t, _QWORD))v111)(v0 + 48, 0);
    v185(v113, v114);
    v110(v160, 0);
    swift_bridgeObjectRelease(v115);
  }
  else
  {
    v116 = *(_QWORD *)(v0 + 344);
    v117 = *(_QWORD *)(v0 + 296);
    ((void (*)(uint64_t, _QWORD))v111)(v0 + 48, 0);
    v185(v116, v117);
    v110(v160, 0);
  }
  v118 = *(_QWORD *)(v0 + 440);
  v120 = *(_QWORD *)(v0 + 400);
  v119 = *(_QWORD *)(v0 + 408);
  v121 = *(_QWORD *)(v0 + 336);
  v122 = *(_QWORD *)(v0 + 296);
  v123 = sub_100037A5C(&qword_100262658);
  v124 = *(_QWORD *)(v119 + 72);
  *(_QWORD *)(v0 + 488) = v124;
  v125 = swift_allocObject(v123, v124 + v177, v180 | 7);
  *(_QWORD *)(v0 + 496) = v125;
  *(_OWORD *)(v125 + 16) = xmmword_1001F35F0;
  v188(v125 + v177, v118, v120);
  v173(v121, v176, v122);
  v126 = (_QWORD *)swift_task_alloc(dword_1002620E4);
  *(_QWORD *)(v0 + 504) = v126;
  *v126 = v0;
  v126[1] = sub_1000B5C40;
  return sub_1000BCEB0(v125, *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000B5C40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  v4 = *(void (**)(uint64_t, uint64_t))(*v1 + 472);
  v5 = *(_QWORD *)(*v1 + 336);
  v6 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  v7 = *(_QWORD *)(v2 + 496);
  if (v0)
  {
    v8 = *(_QWORD *)(v2 + 288);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 496));
    v9 = sub_1000B6374;
    v10 = v8;
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 400);
    v12 = *(_QWORD *)(v2 + 288);
    v13 = v7 + ((*(unsigned __int8 *)(v2 + 592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 592));
    swift_setDeallocating(v7);
    swift_arrayDestroy(v13, *(_QWORD *)(v7 + 16), v11);
    swift_deallocClassInstance(v7, 32, 7);
    v9 = sub_1000B5D20;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1000B5D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  v1 = *(unsigned __int8 *)(v0 + 592);
  v2 = v1 | 7;
  v3 = (v1 + 32) & ~v1;
  v4 = v3 + *(_QWORD *)(v0 + 488);
  v19 = v1 | 7;
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  v6 = *(unsigned int *)(v0 + 596);
  v16 = *(_DWORD *)(v0 + 596);
  v7 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v9 = *(_QWORD *)(v0 + 328);
  v21 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 296);
  v10 = sub_100037A5C(&qword_100262658);
  v11 = swift_allocObject(v10, v4, v2);
  *(_OWORD *)(v11 + 16) = xmmword_1001F35F0;
  swift_beginAccess(v7, v0 + 104, 0, 0);
  v5(v11 + v3, v7, v8);
  v18(v9, v6, v15);
  sub_1000BBC94(v17, v11, v9);
  swift_bridgeObjectRelease(v11);
  v20(v9, v15);
  v12 = swift_allocObject(v10, v4, v19);
  *(_QWORD *)(v0 + 520) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_1001F35F0;
  v5(v12 + v3, v7, v8);
  v18(v21, v16, v15);
  v13 = (_QWORD *)swift_task_alloc(dword_1002620EC);
  *(_QWORD *)(v0 + 528) = v13;
  *v13 = v0;
  v13[1] = sub_1000B5ED0;
  return sub_1000BE754(v12, *(_QWORD *)(v0 + 320), 1);
}

uint64_t sub_1000B5ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 528);
  *(_QWORD *)(*(_QWORD *)v2 + 536) = v1;
  swift_task_dealloc(v5);
  v6 = v4[65];
  v7 = (void (*)(uint64_t, uint64_t))v4[59];
  v8 = v4[40];
  v10 = v4[36];
  v9 = v4[37];
  if (v1)
  {
    v7(v8, v9);
    swift_bridgeObjectRelease(v6);
    v11 = sub_1000B6498;
  }
  else
  {
    v4[68] = a1;
    v7(v8, v9);
    swift_bridgeObjectRelease(v6);
    v11 = sub_1000B5F74;
  }
  return swift_task_switch(v11, v10, 0);
}

uint64_t sub_1000B5F74()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 384);
  v1(*(_QWORD *)(v0 + 440), v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
}

uint64_t sub_1000B609C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 568);
  *(_QWORD *)(*(_QWORD *)v2 + 576) = v1;
  swift_task_dealloc(v5);
  v6 = v4[70];
  v7 = (void (*)(uint64_t, uint64_t))v4[69];
  v8 = v4[39];
  v10 = v4[36];
  v9 = v4[37];
  if (v1)
  {
    v7(v8, v9);
    swift_bridgeObjectRelease(v6);
    v11 = sub_1000B625C;
  }
  else
  {
    v4[73] = a1;
    v7(v8, v9);
    swift_bridgeObjectRelease(v6);
    v11 = sub_1000B6140;
  }
  return swift_task_switch(v11, v10, 0);
}

uint64_t sub_1000B6140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 584);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
}

uint64_t sub_1000B625C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6374()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 384);
  v1(*(_QWORD *)(v0 + 440), v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6498()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 384);
  v1(*(_QWORD *)(v0 + 440), v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (*sub_1000B65BC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t Priority;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  Priority = type metadata accessor for LocatePriority(0);
  v2[4] = Priority;
  v4 = *(_QWORD *)(Priority - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_1000C9BA0(v2, (uint64_t)v5);
  return sub_1000B664C;
}

void sub_1000B664C(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_1000B66A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000B6710, v1, 0);
}

uint64_t sub_1000B6710()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_1000B6778;
  return v3(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000B6778()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1000B67D0, v1, 0);
}

uint64_t sub_1000B67D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[5];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v5 = v0[8];
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = v0[8];
  v11 = v0[9];
  v13 = v0[7];
  v14 = v0[5];
  if (v10)
  {
    v30 = v0[9];
    v28 = v0[7];
    v15 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v15 = 136315394;
    type = v9;
    v0[2] = v14;
    v29 = v12;
    v16 = type metadata accessor for LocationServiceClient();
    swift_retain(v14);
    v17 = String.init<A>(describing:)(v0 + 2, v16);
    v19 = v18;
    v0[3] = sub_10002BA84(v17, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v15 + 4, v15 + 12);
    swift_release_n(v14, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2082;
    v20 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v28, v20);
    v23 = v22;
    v0[4] = sub_10002BA84(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v23);
    v24 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v24(v30, v28);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Location Service: removed connection: %s connectionIdentifier: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_release_n(v0[5], 2);
    v24 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v24(v11, v13);
  }

  v0[12] = v24;
  v25 = sub_1000A53FC();
  v0[13] = v25;
  v26 = (_QWORD *)swift_task_alloc(dword_1002620DC);
  v0[14] = v26;
  *v26 = v0;
  v26[1] = sub_1000B6AA0;
  return sub_1000B6B4C(v0[10], (uint64_t)v25);
}

uint64_t sub_1000B6AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000B6B00, v2, 0);
}

uint64_t sub_1000B6B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(v0 + 96))(v2, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t Priority;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = type metadata accessor for Handle(0);
  v3[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[19] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v6);
  v3[21] = swift_task_alloc(v6);
  v3[22] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100262650) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v7);
  v3[24] = swift_task_alloc(v7);
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  Priority = type metadata accessor for LocatePriority(0);
  v3[27] = Priority;
  v9 = *(_QWORD *)(Priority - 8);
  v3[28] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v10);
  v3[30] = swift_task_alloc(v10);
  v3[31] = swift_task_alloc(v10);
  v3[32] = swift_task_alloc(v10);
  v3[33] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100262640) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[34] = swift_task_alloc(v11);
  v3[35] = swift_task_alloc(v11);
  v3[36] = swift_task_alloc(v11);
  v3[37] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v3[38] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[39] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000B6CF8, v2, 0);
}

void sub_1000B6CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __n128 v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  unint64_t v182;
  int64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  void (*v226)(uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  void (*v231)(uint64_t, uint64_t);
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  unsigned int (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t *v247;
  _QWORD *v248;
  uint64_t *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  void (*v256)(uint64_t, unint64_t, uint64_t);
  void (*v257)(uint64_t, uint64_t);
  unint64_t v258;
  uint64_t v259;
  os_log_type_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int64_t v266;
  int64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  os_log_type_t v271;
  void (*v272)(uint64_t, unint64_t, uint64_t);
  int64_t v273;
  uint64_t v274;
  __int128 v275;
  unint64_t v276;
  __int128 v277;
  unint64_t v278;
  uint64_t v279[2];

  v1 = v0 + 16;
  if (qword_10025F8D8 != -1)
    goto LABEL_162;
LABEL_2:
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 336) = sub_100037A9C(v7, (uint64_t)qword_10027ABA8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 344) = v8;
  v8(v3, v2, v4);
  v9 = swift_bridgeObjectRetain_n(v6, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 312);
  if (v12)
  {
    v274 = v1;
    v16 = *(_QWORD *)(v0 + 128);
    v271 = v11;
    v17 = swift_slowAlloc(22, -1);
    v268 = swift_slowAlloc(64, -1);
    v279[0] = v268;
    *(_DWORD *)v17 = 136446466;
    v18 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v19, v20, v279);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v14);
    *(_WORD *)(v17 + 12) = 2082;
    v23 = swift_bridgeObjectRetain(v16);
    v24 = Array.description.getter(v23);
    v26 = v25;
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v24, v26, v279);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v17 + 14, v17 + 22);
    v27 = v16;
    v1 = v274;
    swift_bridgeObjectRelease_n(v27, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v271, "Removing all subscriptions for %{public}s with priorities: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v268, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v268, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v28 = *(_QWORD *)(v0 + 128);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v14);

    swift_bridgeObjectRelease_n(v28, 2);
  }
  v249 = (uint64_t *)(v0 + 72);
  v250 = (_QWORD *)(v0 + 64);
  v247 = (uint64_t *)(v0 + 88);
  v248 = (_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 352) = v22;
  v29 = (uint64_t *)(*(_QWORD *)(v0 + 136) + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v29, v1, 0, 0);
  v30 = *v29;
  *(_QWORD *)(v0 + 360) = *v29;
  v31 = *(_BYTE *)(v30 + 32);
  *(_BYTE *)(v0 + 456) = v31;
  v32 = 1 << v31;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  else
    v33 = -1;
  v34 = v33 & *(_QWORD *)(v30 + 64);
  v35 = swift_bridgeObjectRetain(v30);
  v36 = 0;
  while (2)
  {
    if (v34)
    {
LABEL_10:
      v37 = __clz(__rbit64(v34));
      v38 = (v34 - 1) & v34;
      v39 = v37 | (v36 << 6);
      v40 = *(_QWORD *)(v0 + 360);
LABEL_11:
      v41 = *(_QWORD *)(v0 + 288);
      (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 224) + 16))(v41, *(_QWORD *)(v40 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v39, *(_QWORD *)(v0 + 216), v35);
      v42 = *(_QWORD *)(v40 + 56) + 24 * v39;
      v43 = sub_100037A5C(&qword_100262648);
      v44 = v41 + *(int *)(v43 + 48);
      v45 = *(_QWORD *)v42;
      v275 = *(_OWORD *)(v42 + 8);
      *(_QWORD *)v44 = *(_QWORD *)v42;
      *(_OWORD *)(v44 + 8) = v275;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v41, 0, 1, v43);
      swift_retain(v275);
      swift_bridgeObjectRetain(v45);
      goto LABEL_18;
    }
    while (1)
    {
      v46 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
      v47 = (unint64_t)((1 << *(_BYTE *)(v0 + 456)) + 63) >> 6;
      if (v46 >= v47)
      {
        v50 = v36;
      }
      else
      {
        v40 = *(_QWORD *)(v0 + 360);
        v48 = v40 + 64;
        v49 = *(_QWORD *)(v40 + 64 + 8 * v46);
        if (v49)
          goto LABEL_15;
        v50 = v36 + 1;
        if (v36 + 2 < v47)
        {
          v49 = *(_QWORD *)(v48 + 8 * (v36 + 2));
          if (v49)
          {
            v46 = v36 + 2;
LABEL_15:
            v38 = (v49 - 1) & v49;
            v39 = __clz(__rbit64(v49)) + (v46 << 6);
            v36 = v46;
            goto LABEL_11;
          }
          v50 = v36 + 2;
          if (v36 + 3 < v47)
          {
            v49 = *(_QWORD *)(v48 + 8 * (v36 + 3));
            if (v49)
            {
              v46 = v36 + 3;
              goto LABEL_15;
            }
            v46 = v36 + 4;
            v50 = v36 + 3;
            if (v36 + 4 < v47)
            {
              v49 = *(_QWORD *)(v48 + 8 * v46);
              if (v49)
                goto LABEL_15;
              v50 = v47 - 1;
              v80 = v47 - 5;
              while (v80 != v36)
              {
                v49 = *(_QWORD *)(v40 + 104 + 8 * v36++);
                if (v49)
                {
                  v46 = v36 + 4;
                  goto LABEL_15;
                }
              }
            }
          }
        }
      }
      v51 = *(_QWORD *)(v0 + 288);
      v52 = sub_100037A5C(&qword_100262648);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
      v38 = 0;
      v36 = v50;
LABEL_18:
      *(_QWORD *)(v0 + 368) = v36;
      *(_QWORD *)(v0 + 376) = v38;
      v53 = *(_QWORD *)(v0 + 296);
      sub_10000EF6C(*(_QWORD *)(v0 + 288), v53, &qword_100262640);
      v54 = sub_100037A5C(&qword_100262648);
      v55 = *(_QWORD *)(v54 - 8);
      v56 = v53;
      v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
      if (v57(v56, 1, v54) == 1)
      {
        v245 = v57;
        v251 = v55;
        v133 = *(_QWORD *)(v0 + 136);
        swift_release(*(_QWORD *)(v0 + 360));
        v134 = (uint64_t *)(v133 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
        swift_beginAccess(v134, v0 + 40, 0, 0);
        v135 = *v134;
        v242 = *v134 + 64;
        v136 = -1 << *(_BYTE *)(*v134 + 32);
        if (-v136 < 64)
          v137 = ~(-1 << -(char)v136);
        else
          v137 = -1;
        v254 = v137 & *(_QWORD *)(*v134 + 64);
        v138 = (unint64_t)(63 - v136) >> 6;
        v239 = v138 - 1;
        swift_bridgeObjectRetain(v135);
        v139 = 0;
        v243 = v138;
        v244 = v140;
        v240 = v140 + 104;
        v241 = v138 - 5;
        v246 = v54;
LABEL_84:
        while (2)
        {
          if (v254)
          {
            v143 = __clz(__rbit64(v254));
            v253 = v139;
            v254 &= v254 - 1;
            v144 = v143 | (v139 << 6);
            goto LABEL_86;
          }
          v150 = v139 + 1;
          if (__OFADD__(v139, 1))
            goto LABEL_164;
          if (v150 >= v243)
          {
            v152 = v139;
LABEL_92:
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v251 + 56))(*(_QWORD *)(v0 + 272), 1, 1, v54);
            v253 = v152;
            v254 = 0;
            goto LABEL_93;
          }
          v151 = *(_QWORD *)(v242 + 8 * v150);
          if (!v151)
          {
            v152 = v139 + 1;
            if ((uint64_t)(v139 + 2) < v243)
            {
              v151 = *(_QWORD *)(v242 + 8 * (v139 + 2));
              if (v151)
              {
                v150 = v139 + 2;
                goto LABEL_90;
              }
              v152 = v139 + 2;
              if ((uint64_t)(v139 + 3) < v243)
              {
                v151 = *(_QWORD *)(v242 + 8 * (v139 + 3));
                if (v151)
                {
                  v150 = v139 + 3;
                  goto LABEL_90;
                }
                v150 = v139 + 4;
                v152 = v139 + 3;
                if ((uint64_t)(v139 + 4) < v243)
                {
                  v151 = *(_QWORD *)(v242 + 8 * v150);
                  if (v151)
                    goto LABEL_90;
                  while (v241 != v139)
                  {
                    v151 = *(_QWORD *)(v240 + 8 * v139++);
                    if (v151)
                    {
                      v150 = v139 + 4;
                      goto LABEL_90;
                    }
                  }
                  v152 = v239;
                }
              }
            }
            goto LABEL_92;
          }
LABEL_90:
          v253 = v150;
          v254 = (v151 - 1) & v151;
          v144 = __clz(__rbit64(v151)) + (v150 << 6);
LABEL_86:
          v145 = *(_QWORD *)(v0 + 272);
          (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 16))(v145, *(_QWORD *)(v244 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v144, *(_QWORD *)(v0 + 216));
          v146 = *(_QWORD *)(v244 + 56) + 24 * v144;
          v147 = v145 + *(int *)(v246 + 48);
          v148 = *(_QWORD *)v146;
          v277 = *(_OWORD *)(v146 + 8);
          *(_QWORD *)v147 = *(_QWORD *)v146;
          *(_OWORD *)(v147 + 8) = v277;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v251 + 56))(v145, 0, 1, v246);
          swift_retain(v277);
          v149 = v148;
          v54 = v246;
          swift_bridgeObjectRetain(v149);
LABEL_93:
          v153 = *(_QWORD *)(v0 + 280);
          sub_10000EF6C(*(_QWORD *)(v0 + 272), v153, &qword_100262640);
          if (v245(v153, 1, v54) == 1)
          {
            swift_release(v244);
            v238 = (_QWORD *)swift_task_alloc(dword_10026060C);
            *(_QWORD *)(v0 + 448) = v238;
            *v238 = v0;
            v238[1] = sub_1000B986C;
            sub_100010E38();
            return;
          }
          v154 = *(_QWORD *)(v0 + 128);
          v155 = (uint64_t *)(*(_QWORD *)(v0 + 280) + *(int *)(v54 + 48));
          v270 = *v155;
          v252 = v155[1];
          (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 248));
          v156 = *(_QWORD *)(v154 + 16);
          if (!v156)
          {
            v163 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
LABEL_99:
            v163(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
            goto LABEL_100;
          }
          v158 = *(_QWORD *)(v0 + 240);
          v157 = *(_QWORD *)(v0 + 248);
          v1 = *(_QWORD *)(v0 + 216);
          v159 = *(_QWORD *)(v0 + 224);
          v160 = *(_QWORD *)(v0 + 128);
          v161 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
          v256 = *(void (**)(uint64_t, unint64_t, uint64_t))(v159 + 16);
          v256(v158, v160 + v161, v1);
          v162 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
          swift_bridgeObjectRetain(v160);
          LOBYTE(v157) = dispatch thunk of static Equatable.== infix(_:_:)(v158, v157, v1, v162);
          v257 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
          v257(v158, v1);
          if ((v157 & 1) != 0)
            goto LABEL_102;
          if (v156 == 1)
          {
            swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
            v54 = v246;
            v257(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
LABEL_100:
            swift_bridgeObjectRelease(v270);
            swift_release(v252);
            v139 = v253;
            continue;
          }
          break;
        }
        v165 = *(_QWORD *)(v0 + 240);
        v164 = *(_QWORD *)(v0 + 248);
        v1 = *(_QWORD *)(v0 + 216);
        v166 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
        v256(v165, v160 + v161 + v166, v1);
        LOBYTE(v164) = dispatch thunk of static Equatable.== infix(_:_:)(v165, v164, v1, v162);
        v163 = v257;
        v257(v165, v1);
        if ((v164 & 1) != 0)
        {
LABEL_102:
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
          v255 = v270 + 64;
          v167 = -1 << *(_BYTE *)(v270 + 32);
          if (-v167 < 64)
            v168 = ~(-1 << -(char)v167);
          else
            v168 = -1;
          v169 = v168 & *(_QWORD *)(v270 + 64);
          v267 = (unint64_t)(63 - v167) >> 6;
          v170 = swift_bridgeObjectRetain(v270);
          v273 = 0;
          while (!v169)
          {
            v181 = v273 + 1;
            if (__OFADD__(v273, 1))
            {
              __break(1u);
LABEL_159:
              __break(1u);
              goto LABEL_160;
            }
            if (v181 < v267)
            {
              v182 = *(_QWORD *)(v255 + 8 * v181);
              if (v182)
                goto LABEL_114;
              v183 = v273 + 2;
              ++v273;
              if (v181 + 1 < v267)
              {
                v182 = *(_QWORD *)(v255 + 8 * v183);
                if (v182)
                  goto LABEL_117;
                v273 = v181 + 1;
                if (v181 + 2 < v267)
                {
                  v182 = *(_QWORD *)(v255 + 8 * (v181 + 2));
                  if (v182)
                  {
                    v181 += 2;
LABEL_114:
                    v175 = (v182 - 1) & v182;
                    v176 = __clz(__rbit64(v182)) + (v181 << 6);
                    v273 = v181;
LABEL_110:
                    v177 = *(_QWORD *)(v0 + 184);
                    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 152) + 16))(v177, *(_QWORD *)(v270 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v176, *(_QWORD *)(v0 + 144), v170);
                    v178 = *(_QWORD *)(v270 + 56);
                    v179 = sub_100037A5C(&qword_100262438);
                    v180 = *(_QWORD *)(v178 + 8 * v176);
                    *(_QWORD *)(v177 + *(int *)(v179 + 48)) = v180;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v177, 0, 1, v179);
                    swift_bridgeObjectRetain(v180);
                    goto LABEL_129;
                  }
                  v183 = v181 + 3;
                  v273 = v181 + 2;
                  if (v181 + 3 < v267)
                  {
                    v182 = *(_QWORD *)(v255 + 8 * v183);
                    if (v182)
                    {
LABEL_117:
                      v181 = v183;
                      goto LABEL_114;
                    }
                    while (1)
                    {
                      v181 = v183 + 1;
                      if (__OFADD__(v183, 1))
                        goto LABEL_165;
                      if (v181 >= v267)
                        break;
                      v182 = *(_QWORD *)(v255 + 8 * v181);
                      ++v183;
                      if (v182)
                        goto LABEL_114;
                    }
                    v273 = v267 - 1;
                  }
                }
              }
            }
            v184 = *(_QWORD *)(v0 + 184);
            v185 = sub_100037A5C(&qword_100262438);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 56))(v184, 1, 1, v185);
            v175 = 0;
LABEL_129:
            v186 = *(_QWORD *)(v0 + 192);
            sub_10000EF6C(*(_QWORD *)(v0 + 184), v186, &qword_100262650);
            v187 = sub_100037A5C(&qword_100262438);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 48))(v186, 1, v187) == 1)
            {
              v141 = *(_QWORD *)(v0 + 248);
              v142 = *(_QWORD *)(v0 + 216);
              swift_bridgeObjectRelease(v270);
              swift_release(v270);
              swift_release(v252);
              v257(v141, v142);
              v54 = v246;
              v139 = v253;
              goto LABEL_84;
            }
            v278 = v175;
            v188 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + *(int *)(v187 + 48));
            (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 168));
            if (*(_QWORD *)(v188 + 16)
              && (v189 = *(_QWORD *)(v0 + 304),
                  v190 = *(_QWORD *)(v188 + 40),
                  v191 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v192 = dispatch thunk of Hashable._rawHashValue(seed:)(v190, v189, v191), v193 = -1 << *(_BYTE *)(v188 + 32), v194 = v192 & ~v193, ((*(_QWORD *)(v188 + 56 + ((v194 >> 3) & 0xFFFFFFFFFFFFF8)) >> v194) & 1) != 0))
            {
              v1 = ~v193;
              v195 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
              while (1)
              {
                v196 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
                v197 = *(_QWORD *)(v0 + 320);
                v198 = *(_QWORD *)(v0 + 304);
                v199 = *(_QWORD *)(v0 + 120);
                (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v197, *(_QWORD *)(v188 + 48) + v194 * v195, v198);
                v200 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                LOBYTE(v199) = dispatch thunk of static Equatable.== infix(_:_:)(v197, v199, v198, v200);
                v196(v197, v198);
                if ((v199 & 1) != 0)
                  break;
                v194 = (v194 + 1) & v1;
                if (((*(_QWORD *)(v188 + 56 + ((v194 >> 3) & 0xFFFFFFFFFFFFF8)) >> v194) & 1) == 0)
                  goto LABEL_106;
              }
              v201 = *(_QWORD *)(v0 + 248);
              v259 = *(_QWORD *)(v0 + 232);
              v262 = *(_QWORD *)(v0 + 216);
              v202 = *(_QWORD *)(v0 + 160);
              v203 = *(_QWORD *)(v0 + 168);
              v204 = *(_QWORD *)(v0 + 144);
              v205 = *(_QWORD *)(v0 + 152);
              v206 = *(_QWORD *)(v0 + 120);
              swift_bridgeObjectRelease(v188);
              v207 = sub_100037A5C(&qword_100262658);
              v208 = *(unsigned __int8 *)(v205 + 80);
              v209 = (v208 + 32) & ~v208;
              v210 = swift_allocObject(v207, v209 + *(_QWORD *)(v205 + 72), v208 | 7);
              *(_OWORD *)(v210 + 16) = xmmword_1001F35F0;
              v211 = *(void (**)(uint64_t, uint64_t, uint64_t))(v205 + 16);
              v211(v210 + v209, v203, v204);
              sub_10009C1BC(v206, v210, v201);
              swift_bridgeObjectRelease(v210);
              v211(v202, v203, v204);
              v212 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v256)(v259, v201, v262);
              v213 = Logger.logObject.getter(v212);
              v214 = static os_log_type_t.default.getter(v213);
              v215 = os_log_type_enabled(v213, v214);
              v1 = *(_QWORD *)(v0 + 232);
              v216 = *(_QWORD *)(v0 + 216);
              v217 = *(_QWORD *)(v0 + 160);
              v218 = *(_QWORD *)(v0 + 168);
              v219 = *(_QWORD *)(v0 + 144);
              v220 = *(_QWORD *)(v0 + 152);
              if (v215)
              {
                v265 = *(_QWORD *)(v0 + 168);
                v221 = swift_slowAlloc(42, -1);
                v263 = swift_slowAlloc(64, -1);
                v279[0] = v263;
                *(_DWORD *)v221 = 141558787;
                *v250 = 1752392040;
                v222 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v250, v249, v221 + 4, v221 + 12);
                *(_WORD *)(v221 + 12) = 2081;
                v223 = Handle.identifier.getter(v222);
                v260 = v214;
                v225 = v224;
                *v249 = sub_10002BA84(v223, v224, v279);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v249, v248, v221 + 14, v221 + 22);
                swift_bridgeObjectRelease(v225);
                v226 = *(void (**)(uint64_t, uint64_t))(v220 + 8);
                v226(v217, v219);
                *(_WORD *)(v221 + 22) = 2160;
                *v248 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v248, v247, v221 + 24, v221 + 32);
                *(_WORD *)(v221 + 32) = 2081;
                v227 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
                v228 = dispatch thunk of CustomStringConvertible.description.getter(v216, v227);
                v230 = v229;
                *v247 = sub_10002BA84(v228, v229, v279);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v247, v0 + 96, v221 + 34, v221 + 42);
                swift_bridgeObjectRelease(v230);
                v257(v1, v216);
                _os_log_impl((void *)&_mh_execute_header, v213, v260, "remove legacy subscription for handle: %{private,mask.hash}s with priority: %{private,mask.hash}s", (uint8_t *)v221, 0x2Au);
                swift_arrayDestroy(v263, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v263, -1, -1);
                swift_slowDealloc(v221, -1, -1);

                v226(v265, v219);
              }
              else
              {

                v257(v1, v216);
                v231 = *(void (**)(uint64_t, uint64_t))(v220 + 8);
                v231(v217, v219);
                v231(v218, v219);
              }
            }
            else
            {
LABEL_106:
              v171 = *(_QWORD *)(v0 + 168);
              v172 = *(_QWORD *)(v0 + 144);
              v173 = *(_QWORD *)(v0 + 152);
              swift_bridgeObjectRelease(v188);
              (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v171, v172);
            }
            v169 = v278;
          }
          v174 = __clz(__rbit64(v169));
          v175 = (v169 - 1) & v169;
          v176 = v174 | (v273 << 6);
          goto LABEL_110;
        }
        if (v156 == 2)
        {
LABEL_144:
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
          v54 = v246;
          goto LABEL_99;
        }
        v232 = v160 + v161 + 2 * v166;
        v1 = 2;
        while (1)
        {
          v256(*(_QWORD *)(v0 + 240), v232, *(_QWORD *)(v0 + 216));
          v233 = v1 + 1;
          if (__OFADD__(v1, 1))
            break;
          v234 = *(_QWORD *)(v0 + 240);
          v235 = *(_QWORD *)(v0 + 216);
          v236 = dispatch thunk of static Equatable.== infix(_:_:)(v234, *(_QWORD *)(v0 + 248), v235, v162);
          v237 = v234;
          v163 = v257;
          v257(v237, v235);
          if ((v236 & 1) != 0)
            goto LABEL_102;
          ++v1;
          v232 += v166;
          if (v233 == v156)
            goto LABEL_144;
        }
LABEL_161:
        __break(1u);
LABEL_162:
        swift_once(&qword_10025F8D8, sub_1000A7D34);
        goto LABEL_2;
      }
      v276 = v38;
      v58 = *(_QWORD *)(v0 + 264);
      v59 = *(_QWORD *)(v0 + 224);
      v60 = *(_QWORD *)(v0 + 128);
      v61 = (uint64_t *)(*(_QWORD *)(v0 + 296) + *(int *)(v54 + 48));
      v62 = *v61;
      *(_QWORD *)(v0 + 384) = *v61;
      v63 = v61[1];
      *(_QWORD *)(v0 + 392) = v63;
      (*(void (**)(uint64_t))(v59 + 32))(v58);
      v1 = *(_QWORD *)(v60 + 16);
      if (!v1)
      {
        v70 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
        goto LABEL_30;
      }
      v264 = v63;
      v266 = v36;
      v64 = *(_QWORD *)(v0 + 256);
      v65 = *(_QWORD *)(v0 + 264);
      v66 = *(_QWORD *)(v0 + 216);
      v67 = *(_QWORD *)(v0 + 224);
      v68 = *(_QWORD *)(v0 + 128);
      v258 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
      v272 = *(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16);
      v272(v64, v68 + v258, v66);
      v69 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      swift_bridgeObjectRetain(v68);
      v269 = v69;
      LOBYTE(v65) = dispatch thunk of static Equatable.== infix(_:_:)(v64, v65, v66, v69);
      v70 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      *(_QWORD *)(v0 + 400) = v70;
      v70(v64, v66);
      if ((v65 & 1) != 0)
        goto LABEL_44;
      if (v1 != 1)
        break;
LABEL_28:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v63 = v264;
      v36 = v266;
LABEL_30:
      v70(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 216));
      swift_bridgeObjectRelease(v62);
      swift_release(v63);
      v34 = v276;
      if (v276)
        goto LABEL_10;
    }
    v72 = *(_QWORD *)(v0 + 256);
    v71 = *(_QWORD *)(v0 + 264);
    v73 = *(_QWORD *)(v0 + 216);
    v261 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
    v272(v72, v68 + v258 + v261, v73);
    LOBYTE(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v72, v71, v73, v69);
    v70(v72, v73);
    if ((v71 & 1) == 0)
    {
      if (v1 != 2)
      {
        v74 = v68 + v258 + 2 * v261;
        v75 = 2;
        while (1)
        {
          v272(*(_QWORD *)(v0 + 256), v74, *(_QWORD *)(v0 + 216));
          v76 = v75 + 1;
          if (__OFADD__(v75, 1))
            break;
          v77 = *(_QWORD *)(v0 + 256);
          v78 = *(_QWORD *)(v0 + 216);
          v79 = dispatch thunk of static Equatable.== infix(_:_:)(v77, *(_QWORD *)(v0 + 264), v78, v269);
          v70(v77, v78);
          if ((v79 & 1) != 0)
            goto LABEL_44;
          ++v75;
          v74 += v261;
          if (v76 == v1)
            goto LABEL_28;
        }
LABEL_160:
        __break(1u);
        goto LABEL_161;
      }
      goto LABEL_28;
    }
LABEL_44:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
    v81 = *(_BYTE *)(v62 + 32);
    *(_BYTE *)(v0 + 457) = v81;
    v82 = 1 << v81;
    if (v82 < 64)
      v83 = ~(-1 << v82);
    else
      v83 = -1;
    v84 = v83 & *(_QWORD *)(v62 + 64);
    v85 = swift_bridgeObjectRetain(v62);
    v86 = 0;
LABEL_49:
    if (v84)
    {
      v87 = (v84 - 1) & v84;
      v88 = __clz(__rbit64(v84)) | (v86 << 6);
      v89 = *(_QWORD *)(v0 + 384);
      goto LABEL_51;
    }
    v94 = v86 + 1;
    if (__OFADD__(v86, 1))
      goto LABEL_159;
    v95 = (unint64_t)((1 << *(_BYTE *)(v0 + 457)) + 63) >> 6;
    if (v94 >= v95)
      goto LABEL_69;
    v89 = *(_QWORD *)(v0 + 384);
    v96 = v89 + 64;
    v97 = *(_QWORD *)(v89 + 64 + 8 * v94);
    if (v97)
    {
LABEL_55:
      v87 = (v97 - 1) & v97;
      v88 = __clz(__rbit64(v97)) + (v94 << 6);
      v86 = v94;
LABEL_51:
      v90 = *(_QWORD *)(v0 + 200);
      (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 152) + 16))(v90, *(_QWORD *)(v89 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v88, *(_QWORD *)(v0 + 144), v85);
      v91 = *(_QWORD *)(v89 + 56);
      v92 = sub_100037A5C(&qword_100262438);
      v93 = *(_QWORD *)(v91 + 8 * v88);
      *(_QWORD *)(v90 + *(int *)(v92 + 48)) = v93;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v90, 0, 1, v92);
      swift_bridgeObjectRetain(v93);
LABEL_70:
      *(_QWORD *)(v0 + 408) = v86;
      *(_QWORD *)(v0 + 416) = v87;
      v101 = *(_QWORD *)(v0 + 208);
      sub_10000EF6C(*(_QWORD *)(v0 + 200), v101, &qword_100262650);
      v102 = sub_100037A5C(&qword_100262438);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 48))(v101, 1, v102) == 1)
      {
        v116 = *(_QWORD *)(v0 + 392);
        v117 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
        v118 = *(_QWORD *)(v0 + 384);
        v119 = *(_QWORD *)(v0 + 264);
        v120 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease(v118);
        swift_release(v118);
        swift_release(v116);
        v117(v119, v120);
        v36 = *(_QWORD *)(v0 + 368);
        v34 = *(_QWORD *)(v0 + 376);
        continue;
      }
      v103 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + *(int *)(v102 + 48));
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 176));
      if (*(_QWORD *)(v103 + 16))
      {
        v104 = *(_QWORD *)(v0 + 304);
        v105 = *(_QWORD *)(v103 + 40);
        v106 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v107 = dispatch thunk of Hashable._rawHashValue(seed:)(v105, v104, v106);
        v108 = -1 << *(_BYTE *)(v103 + 32);
        v109 = v107 & ~v108;
        if (((*(_QWORD *)(v103 + 56 + ((v109 >> 3) & 0xFFFFFFFFFFFFF8)) >> v109) & 1) != 0)
        {
          v110 = ~v108;
          v1 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
          while (1)
          {
            v111 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
            v112 = *(_QWORD *)(v0 + 320);
            v113 = *(_QWORD *)(v0 + 304);
            v114 = *(_QWORD *)(v0 + 120);
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v112, *(_QWORD *)(v103 + 48) + v109 * v1, v113);
            v115 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LOBYTE(v114) = dispatch thunk of static Equatable.== infix(_:_:)(v112, v114, v113, v115);
            v111(v112, v113);
            if ((v114 & 1) != 0)
              break;
            v109 = (v109 + 1) & v110;
            if (((*(_QWORD *)(v103 + 56 + ((v109 >> 3) & 0xFFFFFFFFFFFFF8)) >> v109) & 1) == 0)
              goto LABEL_48;
          }
          v121 = *(_QWORD *)(v0 + 264);
          v122 = *(_QWORD *)(v0 + 176);
          v123 = *(_QWORD *)(v0 + 144);
          v124 = *(_QWORD *)(v0 + 152);
          v125 = *(_QWORD *)(v0 + 120);
          swift_bridgeObjectRelease(v103);
          v126 = sub_100037A5C(&qword_100262658);
          v127 = *(unsigned __int8 *)(v124 + 80);
          v128 = (v127 + 32) & ~v127;
          v129 = swift_allocObject(v126, v128 + *(_QWORD *)(v124 + 72), v127 | 7);
          *(_OWORD *)(v129 + 16) = xmmword_1001F35F0;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v129 + v128, v122, v123);
          sub_1000BB030(v125, (_QWORD *)v129, v121);
          v131 = v130;
          *(_QWORD *)(v0 + 424) = v130;
          swift_bridgeObjectRelease(v129);
          v132 = (_QWORD *)swift_task_alloc(dword_1002620E4);
          *(_QWORD *)(v0 + 432) = v132;
          *v132 = v0;
          v132[1] = sub_1000B83B4;
          sub_1000BCEB0(v131, *(_QWORD *)(v0 + 264));
          return;
        }
      }
LABEL_48:
      swift_bridgeObjectRelease(v103);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
      v86 = *(_QWORD *)(v0 + 408);
      v84 = *(_QWORD *)(v0 + 416);
      goto LABEL_49;
    }
    break;
  }
  v98 = v86 + 2;
  ++v86;
  if (v94 + 1 >= v95)
    goto LABEL_69;
  v97 = *(_QWORD *)(v96 + 8 * v98);
  if (v97)
  {
LABEL_58:
    v94 = v98;
    goto LABEL_55;
  }
  v86 = v94 + 1;
  if (v94 + 2 >= v95)
    goto LABEL_69;
  v97 = *(_QWORD *)(v96 + 8 * (v94 + 2));
  if (v97)
  {
    v94 += 2;
    goto LABEL_55;
  }
  v98 = v94 + 3;
  v86 = v94 + 2;
  if (v94 + 3 >= v95)
  {
LABEL_69:
    v99 = *(_QWORD *)(v0 + 200);
    v100 = sub_100037A5C(&qword_100262438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v99, 1, 1, v100);
    v87 = 0;
    goto LABEL_70;
  }
  v97 = *(_QWORD *)(v96 + 8 * v98);
  if (v97)
    goto LABEL_58;
  while (1)
  {
    v94 = v98 + 1;
    if (__OFADD__(v98, 1))
      break;
    if (v94 >= v95)
    {
      v86 = v95 - 1;
      goto LABEL_69;
    }
    v97 = *(_QWORD *)(v96 + 8 * v94);
    ++v98;
    if (v97)
      goto LABEL_55;
  }
LABEL_166:
  __break(1u);
}

uint64_t sub_1000B83B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 424);
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000B9AB4;
  else
    v5 = sub_1000B8428;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 136), 0);
}

void sub_1000B8428()
{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  os_log_type_t v163;
  _BOOL4 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  int64_t v210;
  uint64_t v211;
  unsigned int (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t *v213;
  _QWORD *v214;
  uint64_t *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, unint64_t, uint64_t);
  void (*v224)(uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  int64_t v231;
  int64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(uint64_t, unint64_t, uint64_t);
  int64_t v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241[2];

  v215 = (uint64_t *)(v0 + 72);
  v216 = (_QWORD *)(v0 + 64);
  v213 = (uint64_t *)(v0 + 88);
  v214 = (_QWORD *)(v0 + 80);
  while (1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
    v2 = *(_QWORD *)(v0 + 408);
    v1 = *(_QWORD *)(v0 + 416);
    if (v1)
    {
LABEL_3:
      v3 = (v1 - 1) & v1;
      v4 = __clz(__rbit64(v1)) | (v2 << 6);
      v5 = *(_QWORD *)(v0 + 384);
LABEL_4:
      v6 = *(_QWORD *)(v0 + 200);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(v6, *(_QWORD *)(v5 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v4, *(_QWORD *)(v0 + 144));
      v7 = *(_QWORD *)(v5 + 56);
      v8 = sub_100037A5C(&qword_100262438);
      v9 = *(_QWORD *)(v7 + 8 * v4);
      *(_QWORD *)(v6 + *(int *)(v8 + 48)) = v9;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);
      swift_bridgeObjectRetain(v9);
      goto LABEL_23;
    }
LABEL_5:
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_155;
    v11 = (unint64_t)((1 << *(_BYTE *)(v0 + 457)) + 63) >> 6;
    if (v10 < v11)
    {
      v5 = *(_QWORD *)(v0 + 384);
      v12 = v5 + 64;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v10);
      if (v13)
        goto LABEL_8;
      v14 = v2 + 2;
      ++v2;
      if (v10 + 1 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * v14);
        if (v13)
          goto LABEL_11;
        v2 = v10 + 1;
        if (v10 + 2 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * (v10 + 2));
          if (v13)
          {
            v10 += 2;
LABEL_8:
            v3 = (v13 - 1) & v13;
            v4 = __clz(__rbit64(v13)) + (v10 << 6);
            v2 = v10;
            goto LABEL_4;
          }
          v14 = v10 + 3;
          v2 = v10 + 2;
          if (v10 + 3 < v11)
          {
            v13 = *(_QWORD *)(v12 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v10 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_156;
                if (v10 >= v11)
                {
                  v2 = v11 - 1;
                  goto LABEL_22;
                }
                v13 = *(_QWORD *)(v12 + 8 * v10);
                ++v14;
                if (v13)
                  goto LABEL_8;
              }
            }
LABEL_11:
            v10 = v14;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_22:
    v15 = *(_QWORD *)(v0 + 200);
    v16 = sub_100037A5C(&qword_100262438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v3 = 0;
LABEL_23:
    *(_QWORD *)(v0 + 408) = v2;
    *(_QWORD *)(v0 + 416) = v3;
    v17 = *(_QWORD *)(v0 + 208);
    sub_10000EF6C(*(_QWORD *)(v0 + 200), v17, &qword_100262650);
    v18 = sub_100037A5C(&qword_100262438);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18) == 1)
      break;
    v59 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + *(int *)(v18 + 48));
    (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 176));
    if (*(_QWORD *)(v59 + 16))
    {
      v74 = *(_QWORD *)(v0 + 304);
      v75 = *(_QWORD *)(v59 + 40);
      v76 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = dispatch thunk of Hashable._rawHashValue(seed:)(v75, v74, v76);
      v78 = -1 << *(_BYTE *)(v59 + 32);
      v79 = v77 & ~v78;
      if (((*(_QWORD *)(v59 + 56 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) != 0)
      {
        v80 = ~v78;
        v81 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
        do
        {
          v82 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
          v83 = *(_QWORD *)(v0 + 320);
          v84 = *(_QWORD *)(v0 + 304);
          v85 = *(_QWORD *)(v0 + 120);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v83, *(_QWORD *)(v59 + 48) + v79 * v81, v84);
          v86 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v85) = dispatch thunk of static Equatable.== infix(_:_:)(v83, v85, v84, v86);
          v82(v83, v84);
          if ((v85 & 1) != 0)
          {
LABEL_150:
            v194 = *(_QWORD *)(v0 + 264);
            v195 = *(_QWORD *)(v0 + 176);
            v196 = *(_QWORD *)(v0 + 144);
            v197 = *(_QWORD *)(v0 + 152);
            v198 = *(_QWORD *)(v0 + 120);
            swift_bridgeObjectRelease(v59);
            v199 = sub_100037A5C(&qword_100262658);
            v200 = *(unsigned __int8 *)(v197 + 80);
            v201 = (v200 + 32) & ~v200;
            v202 = swift_allocObject(v199, v201 + *(_QWORD *)(v197 + 72), v200 | 7);
            *(_OWORD *)(v202 + 16) = xmmword_1001F35F0;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v197 + 16))(v202 + v201, v195, v196);
            sub_1000BB030(v198, (_QWORD *)v202, v194);
            v204 = v203;
            *(_QWORD *)(v0 + 424) = v203;
            swift_bridgeObjectRelease(v202);
            v205 = (_QWORD *)swift_task_alloc(dword_1002620E4);
            *(_QWORD *)(v0 + 432) = v205;
            *v205 = v0;
            v205[1] = sub_1000B83B4;
            sub_1000BCEB0(v204, *(_QWORD *)(v0 + 264));
            return;
          }
          v79 = (v79 + 1) & v80;
        }
        while (((*(_QWORD *)(v59 + 56 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) != 0);
      }
    }
    swift_bridgeObjectRelease(v59);
  }
  v19 = *(_QWORD *)(v0 + 392);
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease(v21);
  swift_release(v21);
  swift_release(v19);
  v20(v22, v23);
  v24 = *(_QWORD *)(v0 + 368);
  v25 = *(_QWORD *)(v0 + 376);
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v28 = v27 | (v24 << 6);
      v29 = *(_QWORD *)(v0 + 360);
LABEL_29:
      v30 = *(_QWORD *)(v0 + 288);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 16))(v30, *(_QWORD *)(v29 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v28, *(_QWORD *)(v0 + 216));
      v31 = *(_QWORD *)(v29 + 56) + 24 * v28;
      v32 = sub_100037A5C(&qword_100262648);
      v33 = v30 + *(int *)(v32 + 48);
      v34 = *(_QWORD *)v31;
      v237 = *(_OWORD *)(v31 + 8);
      *(_QWORD *)v33 = *(_QWORD *)v31;
      *(_OWORD *)(v33 + 8) = v237;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v30, 0, 1, v32);
      swift_retain(v237);
      swift_bridgeObjectRetain(v34);
      goto LABEL_36;
    }
    v35 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    v36 = (unint64_t)((1 << *(_BYTE *)(v0 + 456)) + 63) >> 6;
    if (v35 >= v36)
    {
      v39 = v24;
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 360);
      v37 = v29 + 64;
      v38 = *(_QWORD *)(v29 + 64 + 8 * v35);
      if (v38)
        goto LABEL_33;
      v39 = v24 + 1;
      if (v24 + 2 < v36)
      {
        v38 = *(_QWORD *)(v37 + 8 * (v24 + 2));
        if (v38)
        {
          v35 = v24 + 2;
LABEL_33:
          v25 = (v38 - 1) & v38;
          v28 = __clz(__rbit64(v38)) + (v35 << 6);
          v24 = v35;
          goto LABEL_29;
        }
        v39 = v24 + 2;
        if (v24 + 3 < v36)
        {
          v38 = *(_QWORD *)(v37 + 8 * (v24 + 3));
          if (v38)
          {
            v35 = v24 + 3;
            goto LABEL_33;
          }
          v35 = v24 + 4;
          v39 = v24 + 3;
          if (v24 + 4 < v36)
          {
            v38 = *(_QWORD *)(v37 + 8 * v35);
            if (v38)
              goto LABEL_33;
            v39 = v36 - 1;
            v70 = v36 - 5;
            while (v70 != v24)
            {
              v38 = *(_QWORD *)(v29 + 104 + 8 * v24++);
              if (v38)
              {
                v35 = v24 + 4;
                goto LABEL_33;
              }
            }
          }
        }
      }
    }
    v40 = *(_QWORD *)(v0 + 288);
    v41 = sub_100037A5C(&qword_100262648);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    v25 = 0;
    v24 = v39;
LABEL_36:
    *(_QWORD *)(v0 + 368) = v24;
    *(_QWORD *)(v0 + 376) = v25;
    v42 = *(_QWORD *)(v0 + 296);
    sub_10000EF6C(*(_QWORD *)(v0 + 288), v42, &qword_100262640);
    v43 = sub_100037A5C(&qword_100262648);
    v44 = *(_QWORD *)(v43 - 8);
    v45 = v42;
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    if (v46(v45, 1, v43) == 1)
      break;
    v47 = *(_QWORD *)(v0 + 264);
    v48 = *(_QWORD *)(v0 + 224);
    v49 = *(_QWORD *)(v0 + 128);
    v50 = (uint64_t *)(*(_QWORD *)(v0 + 296) + *(int *)(v43 + 48));
    v51 = *v50;
    *(_QWORD *)(v0 + 384) = *v50;
    v52 = v50[1];
    *(_QWORD *)(v0 + 392) = v52;
    (*(void (**)(uint64_t))(v48 + 32))(v47);
    v238 = *(_QWORD *)(v49 + 16);
    if (v238)
    {
      v226 = v52;
      v229 = v25;
      v231 = v24;
      v233 = v51;
      v53 = *(_QWORD *)(v0 + 256);
      v54 = *(_QWORD *)(v0 + 264);
      v55 = *(_QWORD *)(v0 + 216);
      v56 = *(_QWORD *)(v0 + 224);
      v57 = *(_QWORD *)(v0 + 128);
      v58 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      v235 = *(void (**)(uint64_t, unint64_t, uint64_t))(v56 + 16);
      v235(v53, v57 + v58, v55);
      v59 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      swift_bridgeObjectRetain(v57);
      LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)(v53, v54, v55, v59);
      v26 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      *(_QWORD *)(v0 + 400) = v26;
      v26(v53, v55);
      if ((v54 & 1) != 0)
        goto LABEL_59;
      if (v238 != 1)
      {
        v60 = *(_QWORD *)(v0 + 256);
        v61 = *(_QWORD *)(v0 + 264);
        v62 = *(_QWORD *)(v0 + 216);
        v63 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
        v235(v60, v57 + v58 + v63, v62);
        LOBYTE(v61) = dispatch thunk of static Equatable.== infix(_:_:)(v60, v61, v62, v59);
        v26(v60, v62);
        if ((v61 & 1) != 0)
        {
LABEL_59:
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
          v71 = *(_BYTE *)(v233 + 32);
          *(_BYTE *)(v0 + 457) = v71;
          v72 = 1 << v71;
          if (v72 < 64)
            v73 = ~(-1 << v72);
          else
            v73 = -1;
          v1 = v73 & *(_QWORD *)(v233 + 64);
          swift_bridgeObjectRetain(v233);
          v2 = 0;
          if (v1)
            goto LABEL_3;
          goto LABEL_5;
        }
        if (v238 != 2)
        {
          v64 = v57 + v58 + 2 * v63;
          v65 = 2;
          while (1)
          {
            v235(*(_QWORD *)(v0 + 256), v64, *(_QWORD *)(v0 + 216));
            v66 = v65 + 1;
            if (__OFADD__(v65, 1))
              break;
            v67 = *(_QWORD *)(v0 + 256);
            v68 = *(_QWORD *)(v0 + 216);
            v69 = dispatch thunk of static Equatable.== infix(_:_:)(v67, *(_QWORD *)(v0 + 264), v68, v59);
            v26(v67, v68);
            if ((v69 & 1) != 0)
              goto LABEL_59;
            ++v65;
            v64 += v63;
            if (v66 == v238)
              goto LABEL_46;
          }
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
      }
LABEL_46:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v25 = v229;
      v24 = v231;
      v51 = v233;
      v52 = v226;
    }
    else
    {
      v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
    }
    v26(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 216));
    swift_bridgeObjectRelease(v51);
    swift_release(v52);
  }
  v212 = v46;
  v218 = v44;
  v87 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 360));
  v88 = (uint64_t *)(v87 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
  swift_beginAccess(v88, v0 + 40, 0, 0);
  v89 = *v88;
  v209 = *v88 + 64;
  v90 = -1 << *(_BYTE *)(*v88 + 32);
  if (-v90 < 64)
    v91 = ~(-1 << -(char)v90);
  else
    v91 = -1;
  v221 = v91 & *(_QWORD *)(*v88 + 64);
  v92 = (unint64_t)(63 - v90) >> 6;
  v206 = v92 - 1;
  swift_bridgeObjectRetain(v89);
  v93 = 0;
  v210 = v92;
  v211 = v94;
  v207 = v94 + 104;
  v208 = v92 - 5;
  v217 = v43;
  while (2)
  {
    while (2)
    {
      if (v221)
      {
        v97 = __clz(__rbit64(v221));
        v220 = v93;
        v221 &= v221 - 1;
        v98 = v97 | (v93 << 6);
        goto LABEL_77;
      }
      v104 = v93 + 1;
      if (__OFADD__(v93, 1))
        goto LABEL_153;
      if (v104 >= v210)
      {
        v106 = v93;
LABEL_83:
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v218 + 56))(*(_QWORD *)(v0 + 272), 1, 1, v43);
        v220 = v106;
        v221 = 0;
        goto LABEL_84;
      }
      v105 = *(_QWORD *)(v209 + 8 * v104);
      if (!v105)
      {
        v106 = v93 + 1;
        if ((uint64_t)(v93 + 2) < v210)
        {
          v105 = *(_QWORD *)(v209 + 8 * (v93 + 2));
          if (v105)
          {
            v104 = v93 + 2;
            goto LABEL_81;
          }
          v106 = v93 + 2;
          if ((uint64_t)(v93 + 3) < v210)
          {
            v105 = *(_QWORD *)(v209 + 8 * (v93 + 3));
            if (v105)
            {
              v104 = v93 + 3;
              goto LABEL_81;
            }
            v104 = v93 + 4;
            v106 = v93 + 3;
            if ((uint64_t)(v93 + 4) < v210)
            {
              v105 = *(_QWORD *)(v209 + 8 * v104);
              if (v105)
                goto LABEL_81;
              while (v208 != v93)
              {
                v105 = *(_QWORD *)(v207 + 8 * v93++);
                if (v105)
                {
                  v104 = v93 + 4;
                  goto LABEL_81;
                }
              }
              v106 = v206;
            }
          }
        }
        goto LABEL_83;
      }
LABEL_81:
      v220 = v104;
      v221 = (v105 - 1) & v105;
      v98 = __clz(__rbit64(v105)) + (v104 << 6);
LABEL_77:
      v99 = *(_QWORD *)(v0 + 272);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 16))(v99, *(_QWORD *)(v211 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v98, *(_QWORD *)(v0 + 216));
      v100 = *(_QWORD *)(v211 + 56) + 24 * v98;
      v101 = v99 + *(int *)(v217 + 48);
      v102 = *(_QWORD *)v100;
      v239 = *(_OWORD *)(v100 + 8);
      *(_QWORD *)v101 = *(_QWORD *)v100;
      *(_OWORD *)(v101 + 8) = v239;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v218 + 56))(v99, 0, 1, v217);
      swift_retain(v239);
      v103 = v102;
      v43 = v217;
      swift_bridgeObjectRetain(v103);
LABEL_84:
      v107 = *(_QWORD *)(v0 + 280);
      sub_10000EF6C(*(_QWORD *)(v0 + 272), v107, &qword_100262640);
      if (v212(v107, 1, v43) == 1)
      {
        swift_release(v211);
        v193 = (_QWORD *)swift_task_alloc(dword_10026060C);
        *(_QWORD *)(v0 + 448) = v193;
        *v193 = v0;
        v193[1] = sub_1000B986C;
        sub_100010E38();
        return;
      }
      v108 = *(_QWORD *)(v0 + 128);
      v109 = (uint64_t *)(*(_QWORD *)(v0 + 280) + *(int *)(v43 + 48));
      v234 = *v109;
      v219 = v109[1];
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 248));
      v110 = *(_QWORD *)(v108 + 16);
      if (!v110)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
LABEL_134:
        swift_bridgeObjectRelease(v234);
        swift_release(v219);
        v93 = v220;
        continue;
      }
      break;
    }
    v112 = *(_QWORD *)(v0 + 240);
    v111 = *(_QWORD *)(v0 + 248);
    v114 = *(_QWORD *)(v0 + 216);
    v113 = *(_QWORD *)(v0 + 224);
    v59 = *(_QWORD *)(v0 + 128);
    v115 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
    v223 = *(void (**)(uint64_t, unint64_t, uint64_t))(v113 + 16);
    v223(v112, v59 + v115, v114);
    v116 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    swift_bridgeObjectRetain(v59);
    LOBYTE(v111) = dispatch thunk of static Equatable.== infix(_:_:)(v112, v111, v114, v116);
    v224 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
    v224(v112, v114);
    if ((v111 & 1) != 0)
      goto LABEL_87;
    if (v110 == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v43 = v217;
      v224(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
      goto LABEL_134;
    }
    v183 = *(_QWORD *)(v0 + 240);
    v182 = *(_QWORD *)(v0 + 248);
    v184 = *(_QWORD *)(v0 + 216);
    v185 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
    v223(v183, v59 + v115 + v185, v184);
    LOBYTE(v182) = dispatch thunk of static Equatable.== infix(_:_:)(v183, v182, v184, v116);
    v186 = v224;
    v224(v183, v184);
    if ((v182 & 1) == 0)
    {
      if (v110 != 2)
      {
        v59 += v115 + 2 * v185;
        v187 = 2;
        while (1)
        {
          v223(*(_QWORD *)(v0 + 240), v59, *(_QWORD *)(v0 + 216));
          v188 = v187 + 1;
          if (__OFADD__(v187, 1))
            break;
          v189 = *(_QWORD *)(v0 + 240);
          v190 = *(_QWORD *)(v0 + 216);
          v191 = dispatch thunk of static Equatable.== infix(_:_:)(v189, *(_QWORD *)(v0 + 248), v190, v116);
          v192 = v189;
          v186 = v224;
          v224(v192, v190);
          if ((v191 & 1) != 0)
            goto LABEL_87;
          ++v187;
          v59 += v185;
          if (v188 == v110)
            goto LABEL_133;
        }
        __break(1u);
        goto LABEL_152;
      }
LABEL_133:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v43 = v217;
      v186(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
      goto LABEL_134;
    }
LABEL_87:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
    v222 = v234 + 64;
    v117 = -1 << *(_BYTE *)(v234 + 32);
    if (-v117 < 64)
      v118 = ~(-1 << -(char)v117);
    else
      v118 = -1;
    v119 = v118 & *(_QWORD *)(v234 + 64);
    v232 = (unint64_t)(63 - v117) >> 6;
    v120 = swift_bridgeObjectRetain(v234);
    v236 = 0;
LABEL_93:
    if (v119)
    {
      v123 = __clz(__rbit64(v119));
      v124 = (v119 - 1) & v119;
      v125 = v123 | (v236 << 6);
      goto LABEL_95;
    }
    v130 = v236 + 1;
    if (__OFADD__(v236, 1))
    {
      __break(1u);
      goto LABEL_149;
    }
    if (v130 >= v232)
      goto LABEL_113;
    v131 = *(_QWORD *)(v222 + 8 * v130);
    if (v131)
    {
LABEL_99:
      v124 = (v131 - 1) & v131;
      v125 = __clz(__rbit64(v131)) + (v130 << 6);
      v236 = v130;
LABEL_95:
      v126 = *(_QWORD *)(v0 + 184);
      (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 152) + 16))(v126, *(_QWORD *)(v234 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v125, *(_QWORD *)(v0 + 144), v120);
      v127 = *(_QWORD *)(v234 + 56);
      v128 = sub_100037A5C(&qword_100262438);
      v129 = *(_QWORD *)(v127 + 8 * v125);
      *(_QWORD *)(v126 + *(int *)(v128 + 48)) = v129;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v126, 0, 1, v128);
      swift_bridgeObjectRetain(v129);
LABEL_114:
      v135 = *(_QWORD *)(v0 + 192);
      sub_10000EF6C(*(_QWORD *)(v0 + 184), v135, &qword_100262650);
      v136 = sub_100037A5C(&qword_100262438);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 48))(v135, 1, v136) == 1)
      {
        v95 = *(_QWORD *)(v0 + 248);
        v96 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease(v234);
        swift_release(v234);
        swift_release(v219);
        v224(v95, v96);
        v43 = v217;
        v93 = v220;
        continue;
      }
      v240 = v124;
      v137 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + *(int *)(v136 + 48));
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 168));
      if (*(_QWORD *)(v137 + 16)
        && (v138 = *(_QWORD *)(v0 + 304),
            v139 = *(_QWORD *)(v137 + 40),
            v140 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v141 = dispatch thunk of Hashable._rawHashValue(seed:)(v139, v138, v140), v142 = -1 << *(_BYTE *)(v137 + 32), v143 = v141 & ~v142, ((*(_QWORD *)(v137 + 56 + ((v143 >> 3) & 0xFFFFFFFFFFFFF8)) >> v143) & 1) != 0))
      {
        v144 = ~v142;
        v145 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
        while (1)
        {
          v146 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
          v147 = *(_QWORD *)(v0 + 320);
          v148 = *(_QWORD *)(v0 + 304);
          v149 = *(_QWORD *)(v0 + 120);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v147, *(_QWORD *)(v137 + 48) + v143 * v145, v148);
          v150 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v149) = dispatch thunk of static Equatable.== infix(_:_:)(v147, v149, v148, v150);
          v146(v147, v148);
          if ((v149 & 1) != 0)
            break;
          v143 = (v143 + 1) & v144;
          if (((*(_QWORD *)(v137 + 56 + ((v143 >> 3) & 0xFFFFFFFFFFFFF8)) >> v143) & 1) == 0)
            goto LABEL_91;
        }
        v151 = *(_QWORD *)(v0 + 248);
        v225 = *(_QWORD *)(v0 + 232);
        v227 = *(_QWORD *)(v0 + 216);
        v152 = *(_QWORD *)(v0 + 160);
        v153 = *(_QWORD *)(v0 + 168);
        v155 = *(_QWORD *)(v0 + 144);
        v154 = *(_QWORD *)(v0 + 152);
        v156 = *(_QWORD *)(v0 + 120);
        swift_bridgeObjectRelease(v137);
        v157 = sub_100037A5C(&qword_100262658);
        v158 = *(unsigned __int8 *)(v154 + 80);
        v159 = (v158 + 32) & ~v158;
        v160 = swift_allocObject(v157, v159 + *(_QWORD *)(v154 + 72), v158 | 7);
        *(_OWORD *)(v160 + 16) = xmmword_1001F35F0;
        v161 = *(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 16);
        v161(v160 + v159, v153, v155);
        sub_10009C1BC(v156, v160, v151);
        swift_bridgeObjectRelease(v160);
        v161(v152, v153, v155);
        v162 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v223)(v225, v151, v227);
        v59 = Logger.logObject.getter(v162);
        v163 = static os_log_type_t.default.getter(v59);
        v164 = os_log_type_enabled((os_log_t)v59, v163);
        v165 = *(_QWORD *)(v0 + 232);
        v166 = *(_QWORD *)(v0 + 216);
        v167 = *(_QWORD *)(v0 + 160);
        v168 = *(_QWORD *)(v0 + 168);
        v169 = *(_QWORD *)(v0 + 144);
        v170 = *(_QWORD *)(v0 + 152);
        if (v164)
        {
          v230 = *(_QWORD *)(v0 + 168);
          v171 = swift_slowAlloc(42, -1);
          v228 = swift_slowAlloc(64, -1);
          v241[0] = v228;
          *(_DWORD *)v171 = 141558787;
          *v216 = 1752392040;
          v172 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v216, v215, v171 + 4, v171 + 12);
          *(_WORD *)(v171 + 12) = 2081;
          v173 = Handle.identifier.getter(v172);
          v175 = v174;
          *v215 = sub_10002BA84(v173, v174, v241);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, v214, v171 + 14, v171 + 22);
          swift_bridgeObjectRelease(v175);
          v176 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
          v176(v167, v169);
          *(_WORD *)(v171 + 22) = 2160;
          *v214 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v214, v213, v171 + 24, v171 + 32);
          *(_WORD *)(v171 + 32) = 2081;
          v177 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
          v178 = dispatch thunk of CustomStringConvertible.description.getter(v166, v177);
          v180 = v179;
          *v213 = sub_10002BA84(v178, v179, v241);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v0 + 96, v171 + 34, v171 + 42);
          swift_bridgeObjectRelease(v180);
          v224(v165, v166);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v59, v163, "remove legacy subscription for handle: %{private,mask.hash}s with priority: %{private,mask.hash}s", (uint8_t *)v171, 0x2Au);
          swift_arrayDestroy(v228, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v228, -1, -1);
          swift_slowDealloc(v171, -1, -1);

          v176(v230, v169);
        }
        else
        {

          v224(v165, v166);
          v181 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
          v181(v167, v169);
          v181(v168, v169);
        }
      }
      else
      {
LABEL_91:
        v121 = *(_QWORD *)(v0 + 168);
        v59 = *(_QWORD *)(v0 + 144);
        v122 = *(_QWORD *)(v0 + 152);
        swift_bridgeObjectRelease(v137);
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v59);
      }
      v119 = v240;
      goto LABEL_93;
    }
    break;
  }
  v132 = v236 + 2;
  ++v236;
  if (v130 + 1 >= v232)
    goto LABEL_113;
  v131 = *(_QWORD *)(v222 + 8 * v132);
  if (v131)
  {
LABEL_102:
    v130 = v132;
    goto LABEL_99;
  }
  v236 = v130 + 1;
  if (v130 + 2 >= v232)
    goto LABEL_113;
  v131 = *(_QWORD *)(v222 + 8 * (v130 + 2));
  if (v131)
  {
    v130 += 2;
    goto LABEL_99;
  }
  v132 = v130 + 3;
  v236 = v130 + 2;
  if (v130 + 3 >= v232)
  {
LABEL_113:
    v133 = *(_QWORD *)(v0 + 184);
    v134 = sub_100037A5C(&qword_100262438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v133, 1, 1, v134);
    v124 = 0;
    goto LABEL_114;
  }
  v131 = *(_QWORD *)(v222 + 8 * v132);
  if (v131)
    goto LABEL_102;
  while (1)
  {
    v130 = v132 + 1;
    if (__OFADD__(v132, 1))
      break;
    if (v130 >= v232)
    {
      v236 = v232 - 1;
      goto LABEL_113;
    }
    v131 = *(_QWORD *)(v222 + 8 * v130);
    ++v132;
    if (v131)
      goto LABEL_99;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
}

uint64_t sub_1000B986C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 458) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B98CC, v3, 0);
}

uint64_t sub_1000B98CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((*(_BYTE *)(v0 + 458) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 136);
    v2 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask);
    if (v3)
    {
      swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask));
      Task.cancel()();
      swift_release(v3);
      v4 = *(_QWORD *)(v1 + v2);
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(v1 + v2) = 0;
    v5 = swift_release(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cancel next legacy location refresh task", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 272);
  v12 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B9AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  os_log_type_t v172;
  _BOOL4 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  void (*v185)(uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  void (*v190)(uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  int64_t v219;
  uint64_t v220;
  unsigned int (*v221)(uint64_t, uint64_t, uint64_t);
  uint64_t *v222;
  _QWORD *v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  void (*v232)(uint64_t, unint64_t, uint64_t);
  void (*v233)(uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  int64_t v240;
  int64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, unint64_t, uint64_t);
  int64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  unint64_t v249;
  uint64_t v250[2];

  v1 = *(_QWORD *)(v0 + 440);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 440);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 96) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error from unsubscribe: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v5 = *(_QWORD *)(v0 + 440);

    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  v224 = (uint64_t *)(v0 + 72);
  v225 = (_QWORD *)(v0 + 64);
  v222 = (uint64_t *)(v0 + 88);
  v223 = (_QWORD *)(v0 + 80);
  swift_errorRelease(v5);
  while (1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
    v11 = *(_QWORD *)(v0 + 408);
    v10 = *(_QWORD *)(v0 + 416);
    if (v10)
    {
LABEL_6:
      v12 = (v10 - 1) & v10;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
      v14 = *(_QWORD *)(v0 + 384);
LABEL_7:
      v15 = *(_QWORD *)(v0 + 200);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(v15, *(_QWORD *)(v14 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v13, *(_QWORD *)(v0 + 144));
      v16 = *(_QWORD *)(v14 + 56);
      v17 = sub_100037A5C(&qword_100262438);
      v18 = *(_QWORD *)(v16 + 8 * v13);
      *(_QWORD *)(v15 + *(int *)(v17 + 48)) = v18;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
      swift_bridgeObjectRetain(v18);
      goto LABEL_26;
    }
LABEL_8:
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_158;
    v20 = (unint64_t)((1 << *(_BYTE *)(v0 + 457)) + 63) >> 6;
    if (v19 < v20)
    {
      v14 = *(_QWORD *)(v0 + 384);
      v21 = v14 + 64;
      v22 = *(_QWORD *)(v14 + 64 + 8 * v19);
      if (v22)
        goto LABEL_11;
      v23 = v11 + 2;
      ++v11;
      if (v19 + 1 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
          goto LABEL_14;
        v11 = v19 + 1;
        if (v19 + 2 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v19 + 2));
          if (v22)
          {
            v19 += 2;
LABEL_11:
            v12 = (v22 - 1) & v22;
            v13 = __clz(__rbit64(v22)) + (v19 << 6);
            v11 = v19;
            goto LABEL_7;
          }
          v23 = v19 + 3;
          v11 = v19 + 2;
          if (v19 + 3 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (!v22)
            {
              while (1)
              {
                v19 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_159;
                if (v19 >= v20)
                {
                  v11 = v20 - 1;
                  goto LABEL_25;
                }
                v22 = *(_QWORD *)(v21 + 8 * v19);
                ++v23;
                if (v22)
                  goto LABEL_11;
              }
            }
LABEL_14:
            v19 = v23;
            goto LABEL_11;
          }
        }
      }
    }
LABEL_25:
    v24 = *(_QWORD *)(v0 + 200);
    v25 = sub_100037A5C(&qword_100262438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    v12 = 0;
LABEL_26:
    *(_QWORD *)(v0 + 408) = v11;
    *(_QWORD *)(v0 + 416) = v12;
    v26 = *(_QWORD *)(v0 + 208);
    sub_10000EF6C(*(_QWORD *)(v0 + 200), v26, &qword_100262650);
    v27 = sub_100037A5C(&qword_100262438);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27) == 1)
      break;
    v68 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + *(int *)(v27 + 48));
    (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 176));
    if (*(_QWORD *)(v68 + 16))
    {
      v83 = *(_QWORD *)(v0 + 304);
      v84 = *(_QWORD *)(v68 + 40);
      v85 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v86 = dispatch thunk of Hashable._rawHashValue(seed:)(v84, v83, v85);
      v87 = -1 << *(_BYTE *)(v68 + 32);
      v88 = v86 & ~v87;
      if (((*(_QWORD *)(v68 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFF8)) >> v88) & 1) != 0)
      {
        v89 = ~v87;
        v90 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
        do
        {
          v91 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
          v92 = *(_QWORD *)(v0 + 320);
          v93 = *(_QWORD *)(v0 + 304);
          v94 = *(_QWORD *)(v0 + 120);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v92, *(_QWORD *)(v68 + 48) + v88 * v90, v93);
          v95 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v93, v95);
          v91(v92, v93);
          if ((v94 & 1) != 0)
          {
LABEL_153:
            v203 = *(_QWORD *)(v0 + 264);
            v204 = *(_QWORD *)(v0 + 176);
            v205 = *(_QWORD *)(v0 + 144);
            v206 = *(_QWORD *)(v0 + 152);
            v207 = *(_QWORD *)(v0 + 120);
            swift_bridgeObjectRelease(v68);
            v208 = sub_100037A5C(&qword_100262658);
            v209 = *(unsigned __int8 *)(v206 + 80);
            v210 = (v209 + 32) & ~v209;
            v211 = swift_allocObject(v208, v210 + *(_QWORD *)(v206 + 72), v209 | 7);
            *(_OWORD *)(v211 + 16) = xmmword_1001F35F0;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 16))(v211 + v210, v204, v205);
            sub_1000BB030(v207, (_QWORD *)v211, v203);
            v213 = v212;
            *(_QWORD *)(v0 + 424) = v212;
            swift_bridgeObjectRelease(v211);
            v214 = (_QWORD *)swift_task_alloc(dword_1002620E4);
            *(_QWORD *)(v0 + 432) = v214;
            *v214 = v0;
            v214[1] = sub_1000B83B4;
            sub_1000BCEB0(v213, *(_QWORD *)(v0 + 264));
            return;
          }
          v88 = (v88 + 1) & v89;
        }
        while (((*(_QWORD *)(v68 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFF8)) >> v88) & 1) != 0);
      }
    }
    swift_bridgeObjectRelease(v68);
  }
  v28 = *(_QWORD *)(v0 + 392);
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v30 = *(_QWORD *)(v0 + 384);
  v31 = *(_QWORD *)(v0 + 264);
  v32 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease(v30);
  swift_release(v30);
  swift_release(v28);
  v29(v31, v32);
  v33 = *(_QWORD *)(v0 + 368);
  v34 = *(_QWORD *)(v0 + 376);
  while (1)
  {
    if (v34)
    {
      v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v37 = v36 | (v33 << 6);
      v38 = *(_QWORD *)(v0 + 360);
LABEL_32:
      v39 = *(_QWORD *)(v0 + 288);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 16))(v39, *(_QWORD *)(v38 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v37, *(_QWORD *)(v0 + 216));
      v40 = *(_QWORD *)(v38 + 56) + 24 * v37;
      v41 = sub_100037A5C(&qword_100262648);
      v42 = v39 + *(int *)(v41 + 48);
      v43 = *(_QWORD *)v40;
      v246 = *(_OWORD *)(v40 + 8);
      *(_QWORD *)v42 = *(_QWORD *)v40;
      *(_OWORD *)(v42 + 8) = v246;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 0, 1, v41);
      swift_retain(v246);
      swift_bridgeObjectRetain(v43);
      goto LABEL_39;
    }
    v44 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    v45 = (unint64_t)((1 << *(_BYTE *)(v0 + 456)) + 63) >> 6;
    if (v44 >= v45)
    {
      v48 = v33;
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 360);
      v46 = v38 + 64;
      v47 = *(_QWORD *)(v38 + 64 + 8 * v44);
      if (v47)
        goto LABEL_36;
      v48 = v33 + 1;
      if (v33 + 2 < v45)
      {
        v47 = *(_QWORD *)(v46 + 8 * (v33 + 2));
        if (v47)
        {
          v44 = v33 + 2;
LABEL_36:
          v34 = (v47 - 1) & v47;
          v37 = __clz(__rbit64(v47)) + (v44 << 6);
          v33 = v44;
          goto LABEL_32;
        }
        v48 = v33 + 2;
        if (v33 + 3 < v45)
        {
          v47 = *(_QWORD *)(v46 + 8 * (v33 + 3));
          if (v47)
          {
            v44 = v33 + 3;
            goto LABEL_36;
          }
          v44 = v33 + 4;
          v48 = v33 + 3;
          if (v33 + 4 < v45)
          {
            v47 = *(_QWORD *)(v46 + 8 * v44);
            if (v47)
              goto LABEL_36;
            v48 = v45 - 1;
            v79 = v45 - 5;
            while (v79 != v33)
            {
              v47 = *(_QWORD *)(v38 + 104 + 8 * v33++);
              if (v47)
              {
                v44 = v33 + 4;
                goto LABEL_36;
              }
            }
          }
        }
      }
    }
    v49 = *(_QWORD *)(v0 + 288);
    v50 = sub_100037A5C(&qword_100262648);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
    v34 = 0;
    v33 = v48;
LABEL_39:
    *(_QWORD *)(v0 + 368) = v33;
    *(_QWORD *)(v0 + 376) = v34;
    v51 = *(_QWORD *)(v0 + 296);
    sub_10000EF6C(*(_QWORD *)(v0 + 288), v51, &qword_100262640);
    v52 = sub_100037A5C(&qword_100262648);
    v53 = *(_QWORD *)(v52 - 8);
    v54 = v51;
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    if (v55(v54, 1, v52) == 1)
      break;
    v56 = *(_QWORD *)(v0 + 264);
    v57 = *(_QWORD *)(v0 + 224);
    v58 = *(_QWORD *)(v0 + 128);
    v59 = (uint64_t *)(*(_QWORD *)(v0 + 296) + *(int *)(v52 + 48));
    v60 = *v59;
    *(_QWORD *)(v0 + 384) = *v59;
    v61 = v59[1];
    *(_QWORD *)(v0 + 392) = v61;
    (*(void (**)(uint64_t))(v57 + 32))(v56);
    v247 = *(_QWORD *)(v58 + 16);
    if (v247)
    {
      v235 = v61;
      v238 = v34;
      v240 = v33;
      v242 = v60;
      v62 = *(_QWORD *)(v0 + 256);
      v63 = *(_QWORD *)(v0 + 264);
      v64 = *(_QWORD *)(v0 + 216);
      v65 = *(_QWORD *)(v0 + 224);
      v66 = *(_QWORD *)(v0 + 128);
      v67 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
      v244 = *(void (**)(uint64_t, unint64_t, uint64_t))(v65 + 16);
      v244(v62, v66 + v67, v64);
      v68 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      swift_bridgeObjectRetain(v66);
      LOBYTE(v63) = dispatch thunk of static Equatable.== infix(_:_:)(v62, v63, v64, v68);
      v35 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      *(_QWORD *)(v0 + 400) = v35;
      v35(v62, v64);
      if ((v63 & 1) != 0)
        goto LABEL_62;
      if (v247 != 1)
      {
        v69 = *(_QWORD *)(v0 + 256);
        v70 = *(_QWORD *)(v0 + 264);
        v71 = *(_QWORD *)(v0 + 216);
        v72 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
        v244(v69, v66 + v67 + v72, v71);
        LOBYTE(v70) = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v71, v68);
        v35(v69, v71);
        if ((v70 & 1) != 0)
        {
LABEL_62:
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
          v80 = *(_BYTE *)(v242 + 32);
          *(_BYTE *)(v0 + 457) = v80;
          v81 = 1 << v80;
          if (v81 < 64)
            v82 = ~(-1 << v81);
          else
            v82 = -1;
          v10 = v82 & *(_QWORD *)(v242 + 64);
          swift_bridgeObjectRetain(v242);
          v11 = 0;
          if (v10)
            goto LABEL_6;
          goto LABEL_8;
        }
        if (v247 != 2)
        {
          v73 = v66 + v67 + 2 * v72;
          v74 = 2;
          while (1)
          {
            v244(*(_QWORD *)(v0 + 256), v73, *(_QWORD *)(v0 + 216));
            v75 = v74 + 1;
            if (__OFADD__(v74, 1))
              break;
            v76 = *(_QWORD *)(v0 + 256);
            v77 = *(_QWORD *)(v0 + 216);
            v78 = dispatch thunk of static Equatable.== infix(_:_:)(v76, *(_QWORD *)(v0 + 264), v77, v68);
            v35(v76, v77);
            if ((v78 & 1) != 0)
              goto LABEL_62;
            ++v74;
            v73 += v72;
            if (v75 == v247)
              goto LABEL_49;
          }
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
      }
LABEL_49:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v34 = v238;
      v33 = v240;
      v60 = v242;
      v61 = v235;
    }
    else
    {
      v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
    }
    v35(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 216));
    swift_bridgeObjectRelease(v60);
    swift_release(v61);
  }
  v221 = v55;
  v227 = v53;
  v96 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 360));
  v97 = (uint64_t *)(v96 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
  swift_beginAccess(v97, v0 + 40, 0, 0);
  v98 = *v97;
  v218 = *v97 + 64;
  v99 = -1 << *(_BYTE *)(*v97 + 32);
  if (-v99 < 64)
    v100 = ~(-1 << -(char)v99);
  else
    v100 = -1;
  v230 = v100 & *(_QWORD *)(*v97 + 64);
  v101 = (unint64_t)(63 - v99) >> 6;
  v215 = v101 - 1;
  swift_bridgeObjectRetain(v98);
  v102 = 0;
  v219 = v101;
  v220 = v103;
  v216 = v103 + 104;
  v217 = v101 - 5;
  v226 = v52;
  while (2)
  {
    while (2)
    {
      if (v230)
      {
        v106 = __clz(__rbit64(v230));
        v229 = v102;
        v230 &= v230 - 1;
        v107 = v106 | (v102 << 6);
        goto LABEL_80;
      }
      v113 = v102 + 1;
      if (__OFADD__(v102, 1))
        goto LABEL_156;
      if (v113 >= v219)
      {
        v115 = v102;
LABEL_86:
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v227 + 56))(*(_QWORD *)(v0 + 272), 1, 1, v52);
        v229 = v115;
        v230 = 0;
        goto LABEL_87;
      }
      v114 = *(_QWORD *)(v218 + 8 * v113);
      if (!v114)
      {
        v115 = v102 + 1;
        if ((uint64_t)(v102 + 2) < v219)
        {
          v114 = *(_QWORD *)(v218 + 8 * (v102 + 2));
          if (v114)
          {
            v113 = v102 + 2;
            goto LABEL_84;
          }
          v115 = v102 + 2;
          if ((uint64_t)(v102 + 3) < v219)
          {
            v114 = *(_QWORD *)(v218 + 8 * (v102 + 3));
            if (v114)
            {
              v113 = v102 + 3;
              goto LABEL_84;
            }
            v113 = v102 + 4;
            v115 = v102 + 3;
            if ((uint64_t)(v102 + 4) < v219)
            {
              v114 = *(_QWORD *)(v218 + 8 * v113);
              if (v114)
                goto LABEL_84;
              while (v217 != v102)
              {
                v114 = *(_QWORD *)(v216 + 8 * v102++);
                if (v114)
                {
                  v113 = v102 + 4;
                  goto LABEL_84;
                }
              }
              v115 = v215;
            }
          }
        }
        goto LABEL_86;
      }
LABEL_84:
      v229 = v113;
      v230 = (v114 - 1) & v114;
      v107 = __clz(__rbit64(v114)) + (v113 << 6);
LABEL_80:
      v108 = *(_QWORD *)(v0 + 272);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 16))(v108, *(_QWORD *)(v220 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72) * v107, *(_QWORD *)(v0 + 216));
      v109 = *(_QWORD *)(v220 + 56) + 24 * v107;
      v110 = v108 + *(int *)(v226 + 48);
      v111 = *(_QWORD *)v109;
      v248 = *(_OWORD *)(v109 + 8);
      *(_QWORD *)v110 = *(_QWORD *)v109;
      *(_OWORD *)(v110 + 8) = v248;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(v108, 0, 1, v226);
      swift_retain(v248);
      v112 = v111;
      v52 = v226;
      swift_bridgeObjectRetain(v112);
LABEL_87:
      v116 = *(_QWORD *)(v0 + 280);
      sub_10000EF6C(*(_QWORD *)(v0 + 272), v116, &qword_100262640);
      if (v221(v116, 1, v52) == 1)
      {
        swift_release(v220);
        v202 = (_QWORD *)swift_task_alloc(dword_10026060C);
        *(_QWORD *)(v0 + 448) = v202;
        *v202 = v0;
        v202[1] = sub_1000B986C;
        sub_100010E38();
        return;
      }
      v117 = *(_QWORD *)(v0 + 128);
      v118 = (uint64_t *)(*(_QWORD *)(v0 + 280) + *(int *)(v52 + 48));
      v243 = *v118;
      v228 = v118[1];
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 248));
      v119 = *(_QWORD *)(v117 + 16);
      if (!v119)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
LABEL_137:
        swift_bridgeObjectRelease(v243);
        swift_release(v228);
        v102 = v229;
        continue;
      }
      break;
    }
    v121 = *(_QWORD *)(v0 + 240);
    v120 = *(_QWORD *)(v0 + 248);
    v123 = *(_QWORD *)(v0 + 216);
    v122 = *(_QWORD *)(v0 + 224);
    v68 = *(_QWORD *)(v0 + 128);
    v124 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    v232 = *(void (**)(uint64_t, unint64_t, uint64_t))(v122 + 16);
    v232(v121, v68 + v124, v123);
    v125 = sub_100018A7C(&qword_100261E00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    swift_bridgeObjectRetain(v68);
    LOBYTE(v120) = dispatch thunk of static Equatable.== infix(_:_:)(v121, v120, v123, v125);
    v233 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
    v233(v121, v123);
    if ((v120 & 1) != 0)
      goto LABEL_90;
    if (v119 == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v52 = v226;
      v233(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
      goto LABEL_137;
    }
    v192 = *(_QWORD *)(v0 + 240);
    v191 = *(_QWORD *)(v0 + 248);
    v193 = *(_QWORD *)(v0 + 216);
    v194 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 72);
    v232(v192, v68 + v124 + v194, v193);
    LOBYTE(v191) = dispatch thunk of static Equatable.== infix(_:_:)(v192, v191, v193, v125);
    v195 = v233;
    v233(v192, v193);
    if ((v191 & 1) == 0)
    {
      if (v119 != 2)
      {
        v68 += v124 + 2 * v194;
        v196 = 2;
        while (1)
        {
          v232(*(_QWORD *)(v0 + 240), v68, *(_QWORD *)(v0 + 216));
          v197 = v196 + 1;
          if (__OFADD__(v196, 1))
            break;
          v198 = *(_QWORD *)(v0 + 240);
          v199 = *(_QWORD *)(v0 + 216);
          v200 = dispatch thunk of static Equatable.== infix(_:_:)(v198, *(_QWORD *)(v0 + 248), v199, v125);
          v201 = v198;
          v195 = v233;
          v233(v201, v199);
          if ((v200 & 1) != 0)
            goto LABEL_90;
          ++v196;
          v68 += v194;
          if (v197 == v119)
            goto LABEL_136;
        }
        __break(1u);
        goto LABEL_155;
      }
LABEL_136:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v52 = v226;
      v195(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
      goto LABEL_137;
    }
LABEL_90:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
    v231 = v243 + 64;
    v126 = -1 << *(_BYTE *)(v243 + 32);
    if (-v126 < 64)
      v127 = ~(-1 << -(char)v126);
    else
      v127 = -1;
    v128 = v127 & *(_QWORD *)(v243 + 64);
    v241 = (unint64_t)(63 - v126) >> 6;
    v129 = swift_bridgeObjectRetain(v243);
    v245 = 0;
LABEL_96:
    if (v128)
    {
      v132 = __clz(__rbit64(v128));
      v133 = (v128 - 1) & v128;
      v134 = v132 | (v245 << 6);
      goto LABEL_98;
    }
    v139 = v245 + 1;
    if (__OFADD__(v245, 1))
    {
      __break(1u);
      goto LABEL_152;
    }
    if (v139 >= v241)
      goto LABEL_116;
    v140 = *(_QWORD *)(v231 + 8 * v139);
    if (v140)
    {
LABEL_102:
      v133 = (v140 - 1) & v140;
      v134 = __clz(__rbit64(v140)) + (v139 << 6);
      v245 = v139;
LABEL_98:
      v135 = *(_QWORD *)(v0 + 184);
      (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 152) + 16))(v135, *(_QWORD *)(v243 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v134, *(_QWORD *)(v0 + 144), v129);
      v136 = *(_QWORD *)(v243 + 56);
      v137 = sub_100037A5C(&qword_100262438);
      v138 = *(_QWORD *)(v136 + 8 * v134);
      *(_QWORD *)(v135 + *(int *)(v137 + 48)) = v138;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v135, 0, 1, v137);
      swift_bridgeObjectRetain(v138);
LABEL_117:
      v144 = *(_QWORD *)(v0 + 192);
      sub_10000EF6C(*(_QWORD *)(v0 + 184), v144, &qword_100262650);
      v145 = sub_100037A5C(&qword_100262438);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 48))(v144, 1, v145) == 1)
      {
        v104 = *(_QWORD *)(v0 + 248);
        v105 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease(v243);
        swift_release(v243);
        swift_release(v228);
        v233(v104, v105);
        v52 = v226;
        v102 = v229;
        continue;
      }
      v249 = v133;
      v146 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + *(int *)(v145 + 48));
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 168));
      if (*(_QWORD *)(v146 + 16)
        && (v147 = *(_QWORD *)(v0 + 304),
            v148 = *(_QWORD *)(v146 + 40),
            v149 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v150 = dispatch thunk of Hashable._rawHashValue(seed:)(v148, v147, v149), v151 = -1 << *(_BYTE *)(v146 + 32), v152 = v150 & ~v151, ((*(_QWORD *)(v146 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFF8)) >> v152) & 1) != 0))
      {
        v153 = ~v151;
        v154 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 72);
        while (1)
        {
          v155 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
          v156 = *(_QWORD *)(v0 + 320);
          v157 = *(_QWORD *)(v0 + 304);
          v158 = *(_QWORD *)(v0 + 120);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 344))(v156, *(_QWORD *)(v146 + 48) + v152 * v154, v157);
          v159 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v158) = dispatch thunk of static Equatable.== infix(_:_:)(v156, v158, v157, v159);
          v155(v156, v157);
          if ((v158 & 1) != 0)
            break;
          v152 = (v152 + 1) & v153;
          if (((*(_QWORD *)(v146 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFF8)) >> v152) & 1) == 0)
            goto LABEL_94;
        }
        v160 = *(_QWORD *)(v0 + 248);
        v234 = *(_QWORD *)(v0 + 232);
        v236 = *(_QWORD *)(v0 + 216);
        v161 = *(_QWORD *)(v0 + 160);
        v162 = *(_QWORD *)(v0 + 168);
        v164 = *(_QWORD *)(v0 + 144);
        v163 = *(_QWORD *)(v0 + 152);
        v165 = *(_QWORD *)(v0 + 120);
        swift_bridgeObjectRelease(v146);
        v166 = sub_100037A5C(&qword_100262658);
        v167 = *(unsigned __int8 *)(v163 + 80);
        v168 = (v167 + 32) & ~v167;
        v169 = swift_allocObject(v166, v168 + *(_QWORD *)(v163 + 72), v167 | 7);
        *(_OWORD *)(v169 + 16) = xmmword_1001F35F0;
        v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 16);
        v170(v169 + v168, v162, v164);
        sub_10009C1BC(v165, v169, v160);
        swift_bridgeObjectRelease(v169);
        v170(v161, v162, v164);
        v171 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v232)(v234, v160, v236);
        v68 = Logger.logObject.getter(v171);
        v172 = static os_log_type_t.default.getter(v68);
        v173 = os_log_type_enabled((os_log_t)v68, v172);
        v174 = *(_QWORD *)(v0 + 232);
        v175 = *(_QWORD *)(v0 + 216);
        v176 = *(_QWORD *)(v0 + 160);
        v177 = *(_QWORD *)(v0 + 168);
        v178 = *(_QWORD *)(v0 + 144);
        v179 = *(_QWORD *)(v0 + 152);
        if (v173)
        {
          v239 = *(_QWORD *)(v0 + 168);
          v180 = swift_slowAlloc(42, -1);
          v237 = swift_slowAlloc(64, -1);
          v250[0] = v237;
          *(_DWORD *)v180 = 141558787;
          *v225 = 1752392040;
          v181 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v225, v224, v180 + 4, v180 + 12);
          *(_WORD *)(v180 + 12) = 2081;
          v182 = Handle.identifier.getter(v181);
          v184 = v183;
          *v224 = sub_10002BA84(v182, v183, v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, v223, v180 + 14, v180 + 22);
          swift_bridgeObjectRelease(v184);
          v185 = *(void (**)(uint64_t, uint64_t))(v179 + 8);
          v185(v176, v178);
          *(_WORD *)(v180 + 22) = 2160;
          *v223 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v223, v222, v180 + 24, v180 + 32);
          *(_WORD *)(v180 + 32) = 2081;
          v186 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
          v187 = dispatch thunk of CustomStringConvertible.description.getter(v175, v186);
          v189 = v188;
          *v222 = sub_10002BA84(v187, v188, v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v222, v0 + 96, v180 + 34, v180 + 42);
          swift_bridgeObjectRelease(v189);
          v233(v174, v175);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v68, v172, "remove legacy subscription for handle: %{private,mask.hash}s with priority: %{private,mask.hash}s", (uint8_t *)v180, 0x2Au);
          swift_arrayDestroy(v237, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v237, -1, -1);
          swift_slowDealloc(v180, -1, -1);

          v185(v239, v178);
        }
        else
        {

          v233(v174, v175);
          v190 = *(void (**)(uint64_t, uint64_t))(v179 + 8);
          v190(v176, v178);
          v190(v177, v178);
        }
      }
      else
      {
LABEL_94:
        v130 = *(_QWORD *)(v0 + 168);
        v68 = *(_QWORD *)(v0 + 144);
        v131 = *(_QWORD *)(v0 + 152);
        swift_bridgeObjectRelease(v146);
        (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v68);
      }
      v128 = v249;
      goto LABEL_96;
    }
    break;
  }
  v141 = v245 + 2;
  ++v245;
  if (v139 + 1 >= v241)
    goto LABEL_116;
  v140 = *(_QWORD *)(v231 + 8 * v141);
  if (v140)
  {
LABEL_105:
    v139 = v141;
    goto LABEL_102;
  }
  v245 = v139 + 1;
  if (v139 + 2 >= v241)
    goto LABEL_116;
  v140 = *(_QWORD *)(v231 + 8 * (v139 + 2));
  if (v140)
  {
    v139 += 2;
    goto LABEL_102;
  }
  v141 = v139 + 3;
  v245 = v139 + 2;
  if (v139 + 3 >= v241)
  {
LABEL_116:
    v142 = *(_QWORD *)(v0 + 184);
    v143 = sub_100037A5C(&qword_100262438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 56))(v142, 1, 1, v143);
    v133 = 0;
    goto LABEL_117;
  }
  v140 = *(_QWORD *)(v231 + 8 * v141);
  if (v140)
    goto LABEL_105;
  while (1)
  {
    v139 = v141 + 1;
    if (__OFADD__(v141, 1))
      break;
    if (v139 >= v241)
    {
      v245 = v241 - 1;
      goto LABEL_116;
    }
    v140 = *(_QWORD *)(v231 + 8 * v139);
    ++v141;
    if (v140)
      goto LABEL_102;
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
}

void sub_1000BB030(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8_t *v50;
  void (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  int64_t v76;
  void (*v77)(char *, _QWORD *);
  unint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  char *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  int64_t v111;
  char *v112;
  uint64_t v113;
  int64_t v114;
  char *v115;
  __n128 v116;
  _BYTE *v117;
  char *v118;
  uint8_t *v119;
  void (*v120)(_QWORD, _QWORD);
  os_log_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t Priority;
  char *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[24];
  uint64_t v131;
  _BYTE v132[24];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;

  v4 = v3;
  v8 = 0;
  Priority = type metadata accessor for LocatePriority(0);
  v123 = *(_QWORD *)(Priority - 8);
  v9 = __chkstk_darwin(Priority);
  v126 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v118 = (char *)&v110 - v11;
  v12 = sub_100037A5C(&qword_100262640);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v110 - v16;
  v136 = _swiftEmptyArrayStorage;
  v18 = a2[2];
  v124 = (char *)&v110 - v16;
  if (v18)
  {
    v128 = v3;
    v19 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
    v20 = (uint64_t)a2 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v21 = *(_QWORD *)(v19 + 72);
    v22 = a2;
    swift_bridgeObjectRetain(a2);
    v23 = v18;
    do
    {
      sub_1000CD4D0(v20, a1, a3, "TRACE: removeSubscription: client: %s\npriority: %{public}s handle: %{private,mask.hash}s");
      v20 += v21;
      --v23;
    }
    while (v23);
    a2 = v22;
    swift_bridgeObjectRelease(v22);
    v17 = v124;
    v4 = v128;
  }
  v24 = (uint64_t *)(v4 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v4 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v132, 0, 0);
  v128 = (uint64_t)v24;
  v25 = *v24;
  v26 = *(_QWORD *)(v25 + 16);
  v27 = &selRef_integerValue;
  v122 = v15;
  if (v26)
  {
    swift_bridgeObjectRetain(v25);
    v28 = sub_10001BE14(a3);
    if ((v29 & 1) != 0)
    {
      *(_QWORD *)&v127 = a2;
      v30 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 24 * v28);
      v32 = *v30;
      v31 = v30[1];
      v33 = v30[2];
      swift_retain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v25);
      v133 = v32;
      v134 = v31;
      v27 = &selRef_integerValue;
      v135 = v33;
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_100037A9C(v34, (uint64_t)qword_10027ABA8);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        v121 = v36;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v120 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
        v131 = (uint64_t)v120;
        v119 = v39;
        *(_DWORD *)v39 = 136315138;
        v40 = v39 + 12;
        v116.n128_u64[0] = (unint64_t)(v39 + 4);
        swift_beginAccess(&v133, v130, 0, 0);
        v112 = 0;
        LODWORD(v117) = v38;
        v42 = v133;
        v41 = v134;
        v43 = v135;
        swift_retain(v134);
        swift_bridgeObjectRetain(v42);
        v45 = sub_1000A77FC(v44, v41, v43);
        v47 = v46;
        v48 = v42;
        v15 = v122;
        v8 = v112;
        swift_bridgeObjectRelease(v48);
        swift_release(v41);
        v129 = sub_10002BA84(v45, v47, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v116.n128_u64[0], v40);
        v49 = v47;
        v27 = &selRef_integerValue;
        swift_bridgeObjectRelease(v49);
        v36 = v121;
        v50 = v119;
        _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v117, "removeSubscription: %s", v119, 0xCu);
        v51 = v120;
        swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }

      v17 = v124;
      a2 = (_QWORD *)v127;
      if (v18)
      {
        v52 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
        v53 = (uint64_t)a2
            + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
        v54 = *(_QWORD *)(v52 + 72);
        swift_bridgeObjectRetain(a2);
        do
        {
          sub_1000CC53C(v53, &v133, a1, a3, (unint64_t *)&v136, v4);
          v53 += v54;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v133);
        swift_release(v134);
        v27 = &selRef_integerValue;
      }
      else
      {
        swift_bridgeObjectRelease(v133);
        swift_release(v134);
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRelease(v25);
  }
  v136 = a2;
  swift_bridgeObjectRetain(a2);
LABEL_17:
  v55 = v126;
  if (v27[283] != (char *)-1)
LABEL_56:
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v56 = type metadata accessor for Logger(0);
  v57 = sub_100037A9C(v56, (uint64_t)qword_10027ABA8);
  v58 = swift_bridgeObjectRetain_n(a2, 2);
  v121 = v57;
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter(v59);
  v61 = os_log_type_enabled(v59, v60);
  v112 = v8;
  if (v61)
  {
    v62 = swift_slowAlloc(22, -1);
    v63 = swift_slowAlloc(32, -1);
    v133 = v63;
    *(_DWORD *)v62 = 141558275;
    v131 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v62 + 4, v62 + 12);
    *(_WORD *)(v62 + 12) = 2081;
    type metadata accessor for Handle(0);
    v64 = swift_bridgeObjectRetain(a2);
    v65 = Array.description.getter(v64);
    v67 = v66;
    swift_bridgeObjectRelease(a2);
    v131 = sub_10002BA84(v65, v67, &v133);
    v15 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "After removeSubscription for handles: %{private,mask.hash}s", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    v68 = v63;
    v17 = v124;
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  a2 = (_QWORD *)Priority;
  v69 = v123;
  v70 = *(uint8_t **)v128;
  v71 = *(_QWORD *)(*(_QWORD *)v128 + 64);
  v113 = *(_QWORD *)v128 + 64;
  v72 = 1 << v70[32];
  v73 = -1;
  if (v72 < 64)
    v73 = ~(-1 << v72);
  v74 = v73 & v71;
  v117 = v132;
  v114 = (unint64_t)(v72 + 63) >> 6;
  v111 = v114 - 1;
  v119 = v70;
  v75 = swift_bridgeObjectRetain(v70);
  v76 = 0;
  v75.n128_u64[0] = 141558787;
  v116 = v75;
  v115 = (char *)&type metadata for Any + 8;
  v8 = v118;
  while (1)
  {
    if (v74)
    {
      v128 = (v74 - 1) & v74;
      v78 = __clz(__rbit64(v74)) | (v76 << 6);
      goto LABEL_28;
    }
    v85 = v76 + 1;
    if (__OFADD__(v76, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v85 < v114)
    {
      v86 = *(_QWORD *)(v113 + 8 * v85);
      if (v86)
        goto LABEL_32;
      v76 += 2;
      if (v85 + 1 >= v114)
      {
        v76 = v85;
        goto LABEL_37;
      }
      v86 = *(_QWORD *)(v113 + 8 * v76);
      if (v86)
      {
        ++v85;
        goto LABEL_32;
      }
      if (v85 + 2 < v114)
        break;
    }
LABEL_37:
    v87 = sub_100037A5C(&qword_100262648);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v15, 1, 1, v87);
    v128 = 0;
LABEL_38:
    sub_10000EF6C((uint64_t)v15, (uint64_t)v17, &qword_100262640);
    v88 = sub_100037A5C(&qword_100262648);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v17, 1, v88) == 1)
    {
      swift_release(v119);
      return;
    }
    *(_QWORD *)&v127 = v76;
    v89 = (uint64_t *)&v17[*(int *)(v88 + 48)];
    v90 = *v89;
    v91 = v89[1];
    v92 = v89[2];
    (*(void (**)(char *, char *, _QWORD *))(v69 + 32))(v8, v17, a2);
    (*(void (**)(char *, char *, _QWORD *))(v69 + 16))(v55, v8, a2);
    swift_retain_n(v91, 2);
    v93 = swift_bridgeObjectRetain_n(v90, 2);
    v94 = Logger.logObject.getter(v93);
    v95 = v8;
    v96 = static os_log_type_t.default.getter(v94);
    if (os_log_type_enabled(v94, v96))
    {
      v97 = swift_slowAlloc(42, -1);
      v98 = swift_slowAlloc(64, -1);
      v133 = v98;
      *(_DWORD *)v97 = v116.n128_u32[0];
      v131 = 1752392040;
      v99 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v117, v97 + 4, v97 + 12);
      *(_WORD *)(v97 + 12) = 2081;
      v100 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v101 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v100);
      v103 = v102;
      v131 = sub_10002BA84(v101, v102, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v99, v97 + 14, v97 + 22);
      swift_bridgeObjectRelease(v103);
      v120 = *(void (**)(_QWORD, _QWORD))(v123 + 8);
      v120(v126, Priority);
      *(_WORD *)(v97 + 22) = 2160;
      v131 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v99, v97 + 24, v97 + 32);
      *(_WORD *)(v97 + 32) = 2081;
      swift_bridgeObjectRetain(v90);
      swift_retain(v91);
      v104 = sub_1000A77FC(v90, v91, v92);
      v106 = v105;
      swift_bridgeObjectRelease(v90);
      swift_release(v91);
      v131 = sub_10002BA84(v104, v106, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v99, v97 + 34, v97 + 42);
      v107 = v106;
      v55 = v126;
      swift_bridgeObjectRelease(v107);
      swift_bridgeObjectRelease_n(v90, 2);
      swift_release_n(v91, 2);
      _os_log_impl((void *)&_mh_execute_header, v94, v96, "priority: %{private,mask.hash}s: :%{private,mask.hash}s", (uint8_t *)v97, 0x2Au);
      swift_arrayDestroy(v98, 2, v115);
      swift_slowDealloc(v98, -1, -1);
      v108 = v97;
      v69 = v123;
      a2 = (_QWORD *)Priority;
      swift_slowDealloc(v108, -1, -1);

      swift_bridgeObjectRelease(v90);
      swift_release(v91);
      v8 = v118;
      v120(v118, a2);
    }
    else
    {

      swift_bridgeObjectRelease_n(v90, 2);
      swift_release_n(v91, 2);
      v77 = *(void (**)(char *, _QWORD *))(v69 + 8);
      v77(v55, a2);
      swift_bridgeObjectRelease(v90);
      swift_release(v91);
      v77(v95, a2);
      v8 = v95;
    }
    v15 = v122;
    v17 = v124;
    v76 = v127;
    v74 = v128;
  }
  v86 = *(_QWORD *)(v113 + 8 * (v85 + 2));
  if (v86)
  {
    v85 += 2;
    goto LABEL_32;
  }
  v109 = v85 + 3;
  if (v85 + 3 >= v114)
  {
    v76 = v85 + 2;
    goto LABEL_37;
  }
  v86 = *(_QWORD *)(v113 + 8 * v109);
  if (v86)
  {
    v85 += 3;
LABEL_32:
    v128 = (v86 - 1) & v86;
    v78 = __clz(__rbit64(v86)) + (v85 << 6);
    v76 = v85;
LABEL_28:
    v79 = v119;
    (*(void (**)(char *, unint64_t, _QWORD *))(v69 + 16))(v15, *((_QWORD *)v119 + 6) + *(_QWORD *)(v69 + 72) * v78, a2);
    v80 = *((_QWORD *)v79 + 7) + 24 * v78;
    v81 = sub_100037A5C(&qword_100262648);
    v82 = &v15[*(int *)(v81 + 48)];
    v83 = *(_QWORD *)v80;
    v127 = *(_OWORD *)(v80 + 8);
    v84 = v127;
    *(_QWORD *)v82 = v83;
    *(_OWORD *)(v82 + 8) = v84;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v15, 0, 1, v81);
    swift_retain(v127);
    swift_bridgeObjectRetain(v83);
    goto LABEL_38;
  }
  while (1)
  {
    v85 = v109 + 1;
    if (__OFADD__(v109, 1))
      break;
    if (v85 >= v114)
    {
      v76 = v111;
      goto LABEL_37;
    }
    v86 = *(_QWORD *)(v113 + 8 * v85);
    ++v109;
    if (v86)
      goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1000BBC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void (**v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __n128 v128;
  int64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  int64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int64_t v165;
  uint64_t result;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t Priority;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  void (*v178)(unint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v179;
  void (*v180)(uint64_t, uint64_t);
  int64_t v181;
  void (**v182)(uint64_t, uint64_t);
  __n128 v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  _QWORD *v196;
  char v197[8];

  v172 = a3;
  v5 = 0;
  v6 = sub_100037A5C(&qword_100262640);
  v7 = __chkstk_darwin(v6);
  v9 = (unint64_t)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v189 = (char *)&v167 - v10;
  Priority = type metadata accessor for LocatePriority(0);
  v192 = *(_QWORD *)(Priority - 8);
  v11 = __chkstk_darwin(Priority);
  v188 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v167 - v14;
  __chkstk_darwin(v13);
  v168 = (char *)&v167 - v16;
  v17 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v17);
  v183.n128_u64[0] = (unint64_t)&v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for Handle(0);
  v19 = *(void (***)(uint64_t, uint64_t))(v184 - 8);
  v20 = __chkstk_darwin(v184);
  v191 = (uint64_t *)((char *)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v190 = (uint64_t *)((char *)&v167 - v22);
  v23 = type metadata accessor for UUID(0);
  *(_QWORD *)&v194 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v193 = (char *)&v167 - v28;
  v29 = __chkstk_darwin(v27);
  v186 = (char *)&v167 - v30;
  __chkstk_darwin(v29);
  v181 = (int64_t)&v167 - v31;
  v32 = *(char **)(a2 + 16);
  v185 = v15;
  v173 = a2;
  v182 = v19;
  v187 = v32;
  v179 = a1;
  if (v32)
  {
    v33 = v9;
    v34 = v19;
    v35 = a2 + ((*((unsigned __int8 *)v19 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v19 + 80));
    v36 = a1;
    v37 = v34[9];
    swift_bridgeObjectRetain(a2);
    v38 = v172;
    do
    {
      sub_1000CD4D0(v35, v36, v38, "TRACE: trackNewSubscription: client: %s\npriority: %{public}s handle: %{private,mask.hash}s");
      v35 += (uint64_t)v37;
      --v32;
    }
    while (v32);
    a2 = v173;
    swift_bridgeObjectRelease(v173);
    v15 = v185;
    v9 = v33;
    v19 = v182;
  }
  v39 = (char *)v180 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions;
  swift_beginAccess((char *)v180 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v197, 0, 0);
  v171 = (uint64_t *)v39;
  v40 = *(_QWORD *)v39;
  v41 = *(_QWORD *)(*(_QWORD *)v39 + 16);
  v177 = v9;
  v42 = v172;
  if (v41)
  {
    swift_bridgeObjectRetain(v40);
    v43 = sub_10001BE14(v42);
    if ((v44 & 1) != 0)
    {
      v45 = *(_QWORD *)(v40 + 56) + 24 * v43;
      v46 = *(_QWORD **)v45;
      v178 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v45 + 8);
      swift_retain(v178);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v40);
      if (v187)
      {
        v169 = 0;
        v47 = v173 + ((*((unsigned __int8 *)v19 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v19 + 80));
        v15 = (char *)v19[9];
        v9 = (unint64_t)v19[2];
        v48 = swift_bridgeObjectRetain(v173);
        v49 = v184;
        v50 = v194;
        v51 = (uint64_t)v190;
        v52 = v186;
        v53 = v181;
        do
        {
          ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v9)(v51, v47, v49, v48);
          (*(void (**)(char *, int64_t, uint64_t))(v50 + 16))(v52, v179, v23);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
          v55 = v51;
          v56 = isUniquelyReferenced_nonNull_native;
          v196 = v46;
          v58 = sub_10001CBC8(v55);
          v59 = v46[2];
          v60 = (v57 & 1) == 0;
          v61 = v59 + v60;
          if (__OFADD__(v59, v60))
            goto LABEL_90;
          v62 = v57;
          if (v46[3] >= v61)
          {
            if ((v56 & 1) == 0)
            {
              sub_1000F6918();
              v46 = v196;
            }
            v51 = (uint64_t)v190;
          }
          else
          {
            sub_10001CFE4(v61, v56);
            v46 = v196;
            v51 = (uint64_t)v190;
            v63 = sub_10001CBC8((uint64_t)v190);
            if ((v62 & 1) != (v64 & 1))
              goto LABEL_94;
            v58 = v63;
          }
          swift_bridgeObjectRelease(0x8000000000000000);
          if ((v62 & 1) == 0)
          {
            v46[(v58 >> 6) + 8] |= 1 << v58;
            ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v46[6] + v58 * (_QWORD)v15, v51, v184);
            *(_QWORD *)(v46[7] + 8 * v58) = &_swiftEmptySetSingleton;
            v65 = v46[2];
            v66 = __OFADD__(v65, 1);
            v67 = v65 + 1;
            if (v66)
              goto LABEL_91;
            v46[2] = v67;
          }
          v52 = v186;
          sub_100164FF0(v53, v186);
          v50 = v194;
          (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v53, v23);
          v49 = v184;
          v182[1](v51, v184);
          v47 += (uint64_t)v15;
          --v187;
        }
        while (v187);
        v23 = Priority;
        v15 = v185;
        goto LABEL_49;
      }
LABEL_47:
      v23 = Priority;
      goto LABEL_50;
    }
    swift_bridgeObjectRelease(v40);
  }
  if (!v187)
  {
    v178 = 0;
    v46 = _swiftEmptyDictionarySingleton;
    goto LABEL_47;
  }
  v169 = 0;
  v176 = a2 + ((*((unsigned __int8 *)v19 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v19 + 80));
  v181 = (int64_t)v19[9];
  v180 = v19[2];
  swift_bridgeObjectRetain(a2);
  v68 = 0;
  v46 = _swiftEmptyDictionarySingleton;
  v175 = xmmword_1001F35F0;
  v69 = v184;
  v70 = v194;
  v71 = (void (*)(_QWORD, _QWORD, _QWORD))v191;
  while (1)
  {
    v186 = v68;
    ((void (*)(_QWORD, uint64_t, uint64_t))v180)(v71, v176 + (_QWORD)v68 * v181, v69);
    v73 = sub_100037A5C(&qword_100261E78);
    v74 = *(_QWORD *)(v70 + 72);
    v75 = *(unsigned __int8 *)(v70 + 80);
    v76 = (v75 + 32) & ~v75;
    v77 = swift_allocObject(v73, v76 + v74, v75 | 7);
    *(_OWORD *)(v77 + 16) = v175;
    v78 = v77 + v76;
    v79 = *(void (**)(void))(v70 + 16);
    ((void (*)(uint64_t, int64_t, uint64_t))v79)(v78, v179, v23);
    v9 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v80 = Set.init(minimumCapacity:)(1, v23, v9);
    v81 = v183.n128_u64[0];
    v79();
    v178 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
    v178(v81, 0, 1, v23);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v70 + 48))(v81, 1, v23) == 1)
    {
      swift_bridgeObjectRelease(v77);
      v15 = v185;
    }
    else
    {
      v174 = v77;
      v190 = v46;
      v82 = v193;
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 32))(v193, v81, v23);
      v83 = *(_QWORD *)(v80 + 40);
      swift_bridgeObjectRetain(v80);
      v84 = dispatch thunk of Hashable._rawHashValue(seed:)(v83, v23, v9);
      v85 = -1 << *(_BYTE *)(v80 + 32);
      v9 = v84 & ~v85;
      if (((*(_QWORD *)(v80 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
      {
        v86 = ~v85;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v79)(v26, *(_QWORD *)(v80 + 48) + v9 * v74, v23);
          v87 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v88 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v82, v23, v87);
          v89 = *(void (**)(char *, uint64_t))(v194 + 8);
          v89(v26, v23);
          if ((v88 & 1) != 0)
            break;
          v9 = (v9 + 1) & v86;
          v82 = v193;
          if (((*(_QWORD *)(v80 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
            goto LABEL_31;
        }
        swift_bridgeObjectRelease(v80);
        v89(v193, v23);
      }
      else
      {
LABEL_31:
        swift_bridgeObjectRelease(v80);
        v90 = swift_isUniquelyReferenced_nonNull_native(v80);
        ((void (*)(char *, char *, uint64_t))v79)(v26, v82, v23);
        v196 = (_QWORD *)v80;
        sub_10001CD90((uint64_t)v26, v9, v90);
        v80 = (uint64_t)v196;
        swift_bridgeObjectRelease(0x8000000000000000);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v82, v23);
      }
      v178(v183.n128_u64[0], 1, 1, v23);
      swift_bridgeObjectRelease(v174);
      v15 = v185;
      v46 = v190;
    }
    v91 = swift_isUniquelyReferenced_nonNull_native(v46);
    v196 = v46;
    v93 = sub_10001CBC8((uint64_t)v191);
    v94 = v46[2];
    v95 = (v92 & 1) == 0;
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
    {
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    v9 = v92;
    if (v46[3] < v96)
      break;
    if ((v91 & 1) != 0)
    {
      v71 = (void (*)(_QWORD, _QWORD, _QWORD))v191;
      if ((v92 & 1) == 0)
        goto LABEL_41;
    }
    else
    {
      sub_1000F6918();
      v46 = v196;
      v71 = (void (*)(_QWORD, _QWORD, _QWORD))v191;
      if ((v9 & 1) == 0)
      {
LABEL_41:
        v46[(v93 >> 6) + 8] |= 1 << v93;
        v69 = v184;
        ((void (*)(unint64_t, _QWORD, uint64_t))v180)(v46[6] + v93 * v181, v71, v184);
        *(_QWORD *)(v46[7] + 8 * v93) = v80;
        v99 = v46[2];
        v66 = __OFADD__(v99, 1);
        v100 = v99 + 1;
        if (v66)
          goto LABEL_89;
        v46[2] = v100;
        goto LABEL_24;
      }
    }
LABEL_23:
    v72 = v46[7];
    swift_bridgeObjectRelease(*(_QWORD *)(v72 + 8 * v93));
    *(_QWORD *)(v72 + 8 * v93) = v80;
    v69 = v184;
LABEL_24:
    swift_bridgeObjectRelease(0x8000000000000000);
    v68 = v186 + 1;
    v182[1]((uint64_t)v71, v69);
    v70 = v194;
    if (v68 == v187)
    {
      v178 = 0;
      v23 = Priority;
LABEL_49:
      v42 = v172;
      swift_bridgeObjectRelease(v173);
      v5 = v169;
      v9 = v177;
LABEL_50:
      v169 = v5;
      v101 = v192;
      v102 = (uint64_t)v168;
      v191 = *(_QWORD **)(v192 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v191)(v168, v42, v23);
      v103 = v171;
      swift_beginAccess(v171, &v196, 33, 0);
      v104 = (uint64_t)v178;
      swift_retain(v178);
      v105 = *v103;
      swift_bridgeObjectRetain(v46);
      v106 = swift_isUniquelyReferenced_nonNull_native(v105);
      v195 = *v103;
      *v103 = 0x8000000000000000;
      sub_10001BC94((uint64_t)v46, v104, 0, v102, v106);
      v107 = *v103;
      *v103 = v195;
      swift_bridgeObjectRelease(v107);
      v187 = *(char **)(v101 + 8);
      ((void (*)(uint64_t, uint64_t))v187)(v102, v23);
      swift_endAccess(&v196);
      if (qword_10025F8D8 == -1)
      {
LABEL_51:
        v108 = type metadata accessor for Logger(0);
        v109 = (char *)sub_100037A9C(v108, (uint64_t)qword_10027ABA8);
        v110 = v173;
        v111 = swift_bridgeObjectRetain_n(v173, 2);
        v186 = v109;
        v112 = Logger.logObject.getter(v111);
        v113 = static os_log_type_t.default.getter(v112);
        if (os_log_type_enabled(v112, v113))
        {
          v114 = swift_slowAlloc(22, -1);
          *(_QWORD *)&v194 = swift_slowAlloc(32, -1);
          v195 = 1752392040;
          v196 = (_QWORD *)v194;
          *(_DWORD *)v114 = 141558275;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196, v114 + 4, v114 + 12);
          *(_WORD *)(v114 + 12) = 2081;
          v115 = swift_bridgeObjectRetain(v110);
          v116 = Array.description.getter(v115);
          v118 = v117;
          swift_bridgeObjectRelease(v110);
          v119 = v116;
          v23 = Priority;
          v195 = sub_10002BA84(v119, v118, (uint64_t *)&v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196, v114 + 14, v114 + 22);
          v120 = v118;
          v9 = v177;
          swift_bridgeObjectRelease(v120);
          swift_bridgeObjectRelease_n(v110, 2);
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "After trackNewSubscription for handles: %{private,mask.hash}s", (uint8_t *)v114, 0x16u);
          v121 = v194;
          swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v121, -1, -1);
          swift_slowDealloc(v114, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v110, 2);
        }

        v122 = (uint64_t)v189;
        v123 = *v171;
        v124 = *(_QWORD *)(*v171 + 64);
        v180 = (void (*)(uint64_t, uint64_t))(*v171 + 64);
        v125 = 1 << *(_BYTE *)(v123 + 32);
        v126 = -1;
        if (v125 < 64)
          v126 = ~(-1 << v125);
        v127 = v126 & v124;
        v181 = (unint64_t)(v125 + 63) >> 6;
        v179 = v181 - 1;
        v184 = v123;
        v128 = swift_bridgeObjectRetain(v123);
        v129 = 0;
        v128.n128_u64[0] = 136446723;
        v183 = v128;
        v182 = (void (**)(uint64_t, uint64_t))((char *)&type metadata for Any + 8);
        v190 = v46;
        while (!v127)
        {
          v141 = v129 + 1;
          if (__OFADD__(v129, 1))
            goto LABEL_88;
          if (v141 < v181)
          {
            v142 = *((_QWORD *)v180 + v141);
            if (v142)
              goto LABEL_65;
            v129 += 2;
            if (v141 + 1 >= v181)
            {
              v129 = v141;
            }
            else
            {
              v142 = *((_QWORD *)v180 + v129);
              if (v142)
              {
                ++v141;
                goto LABEL_65;
              }
              if (v141 + 2 < v181)
              {
                v142 = *((_QWORD *)v180 + v141 + 2);
                if (v142)
                {
                  v141 += 2;
                  goto LABEL_65;
                }
                v165 = v141 + 3;
                if (v141 + 3 < v181)
                {
                  v142 = *((_QWORD *)v180 + v165);
                  if (!v142)
                  {
                    while (1)
                    {
                      v141 = v165 + 1;
                      if (__OFADD__(v165, 1))
                        break;
                      if (v141 >= v181)
                      {
                        v129 = v179;
                        goto LABEL_70;
                      }
                      v142 = *((_QWORD *)v180 + v141);
                      ++v165;
                      if (v142)
                        goto LABEL_65;
                    }
                    __break(1u);
                    goto LABEL_94;
                  }
                  v141 += 3;
LABEL_65:
                  v133 = (v142 - 1) & v142;
                  v134 = __clz(__rbit64(v142)) + (v141 << 6);
                  v129 = v141;
LABEL_61:
                  v135 = v184;
                  ((void (*)(unint64_t, unint64_t, uint64_t))v191)(v9, *(_QWORD *)(v184 + 48) + *(_QWORD *)(v192 + 72) * v134, v23);
                  v136 = *(_QWORD *)(v135 + 56) + 24 * v134;
                  v137 = sub_100037A5C(&qword_100262648);
                  v138 = v9 + *(int *)(v137 + 48);
                  v139 = *(_QWORD *)v136;
                  v194 = *(_OWORD *)(v136 + 8);
                  v140 = v194;
                  *(_QWORD *)v138 = v139;
                  *(_OWORD *)(v138 + 8) = v140;
                  (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v9, 0, 1, v137);
                  swift_retain(v194);
                  swift_bridgeObjectRetain(v139);
                  goto LABEL_71;
                }
                v129 = v141 + 2;
              }
            }
          }
LABEL_70:
          v143 = sub_100037A5C(&qword_100262648);
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 56))(v9, 1, 1, v143);
          v133 = 0;
LABEL_71:
          sub_10000EF6C(v9, v122, &qword_100262640);
          v144 = sub_100037A5C(&qword_100262648);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 48))(v122, 1, v144) == 1)
          {
            swift_release(v184);
            swift_bridgeObjectRelease(v46);
            return swift_release(v178);
          }
          v193 = (char *)v133;
          *(_QWORD *)&v194 = v129;
          v145 = (uint64_t *)(v122 + *(int *)(v144 + 48));
          v147 = *v145;
          v146 = v145[1];
          v148 = v145[2];
          (*(void (**)(char *, uint64_t, uint64_t))(v192 + 32))(v15, v122, v23);
          v149 = v188;
          ((void (*)(char *, char *, uint64_t))v191)(v188, v15, v23);
          swift_retain_n(v146, 2);
          v150 = swift_bridgeObjectRetain_n(v147, 2);
          v151 = Logger.logObject.getter(v150);
          v152 = static os_log_type_t.default.getter(v151);
          if (os_log_type_enabled(v151, v152))
          {
            v153 = swift_slowAlloc(32, -1);
            v154 = swift_slowAlloc(64, -1);
            v196 = (_QWORD *)v154;
            *(_DWORD *)v153 = v183.n128_u32[0];
            v155 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
            v156 = dispatch thunk of CustomStringConvertible.description.getter(v23, v155);
            v158 = v157;
            *(_QWORD *)(v153 + 4) = sub_10002BA84(v156, v157, (uint64_t *)&v196);
            swift_bridgeObjectRelease(v158);
            v159 = v149;
            v131 = v187;
            ((void (*)(char *, uint64_t))v187)(v159, v23);
            *(_WORD *)(v153 + 12) = 2160;
            *(_QWORD *)(v153 + 14) = 1752392040;
            *(_WORD *)(v153 + 22) = 2081;
            swift_bridgeObjectRetain(v147);
            swift_retain(v146);
            v160 = sub_1000A77FC(v147, v146, v148);
            v162 = v161;
            swift_bridgeObjectRelease(v147);
            swift_release(v146);
            *(_QWORD *)(v153 + 24) = sub_10002BA84(v160, v162, (uint64_t *)&v196);
            swift_bridgeObjectRelease(v162);
            swift_bridgeObjectRelease_n(v147, 2);
            swift_release_n(v146, 2);
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "priority: %{public}s): :%{private,mask.hash}s", (uint8_t *)v153, 0x20u);
            swift_arrayDestroy(v154, 2, v182);
            v163 = v154;
            v15 = v185;
            swift_slowDealloc(v163, -1, -1);
            v164 = v153;
            v9 = v177;
            swift_slowDealloc(v164, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v147, 2);
            swift_release_n(v146, 2);
            v130 = v149;
            v131 = v187;
            ((void (*)(char *, uint64_t))v187)(v130, v23);
          }
          swift_bridgeObjectRelease(v147);
          swift_release(v146);
          ((void (*)(char *, uint64_t))v131)(v15, v23);
          v122 = (uint64_t)v189;
          v46 = v190;
          v127 = (unint64_t)v193;
          v129 = v194;
        }
        v132 = __clz(__rbit64(v127));
        v133 = (v127 - 1) & v127;
        v134 = v132 | (v129 << 6);
        goto LABEL_61;
      }
LABEL_92:
      swift_once(&qword_10025F8D8, sub_1000A7D34);
      goto LABEL_51;
    }
  }
  sub_10001CFE4(v96, v91);
  v46 = v196;
  v71 = (void (*)(_QWORD, _QWORD, _QWORD))v191;
  v97 = sub_10001CBC8((uint64_t)v191);
  if ((v9 & 1) == (v98 & 1))
  {
    v93 = v97;
    if ((v9 & 1) == 0)
      goto LABEL_41;
    goto LABEL_23;
  }
LABEL_94:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v184);
  __break(1u);
  return result;
}

uint64_t sub_1000BCEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t Priority;
  uint64_t v5;
  unint64_t v6;

  v3[37] = a2;
  v3[38] = v2;
  v3[36] = a1;
  Priority = type metadata accessor for LocatePriority(0);
  v3[39] = Priority;
  v5 = *(_QWORD *)(Priority - 8);
  v3[40] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[41] = swift_task_alloc(v6);
  v3[42] = swift_task_alloc(v6);
  v3[43] = swift_task_alloc(v6);
  v3[44] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000BCF3C, v2, 0);
}

uint64_t sub_1000BCF3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 288) + 16))
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 360) = v1;
    *v1 = v0;
    v1[1] = sub_1000BD084;
    return daemon.getter();
  }
  else
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027ABA8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Not unsubscribing for empty friends", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 336);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000BD084(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 360);
  v5 = *v1;
  *(_QWORD *)(*v1 + 368) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 376) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000BD174;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000BD174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 376);
  v4[48] = a1;
  v4[49] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[38];
    v7 = sub_1000BE0A4;
  }
  else
  {
    swift_release(v4[46]);
    v7 = sub_1000BD1F0;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000BD1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 400) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 408) = v7;
  *v7 = v0;
  v7[1] = sub_1000BD2C0;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000BD2C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000BD328, v4, 0);
}

uint64_t sub_1000BD328()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  void *v64;
  Class isa;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Class v76;
  uint64_t v77;
  _QWORD *v78;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = sub_1000A4A30(*(_QWORD *)(v0 + 288));
  v3 = sub_10016B5B4((uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  v4 = sub_1000CAD48(v1, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  v5 = v4[2];
  if (!v5)
  {
    swift_bridgeObjectRelease(v4);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100037A9C(v32, (uint64_t)qword_10027ABA8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = *(_QWORD *)(v0 + 384);
    if (v36)
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Should not unsubscribing for empty friends", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    swift_release(v37);

LABEL_36:
    v82 = *(_QWORD *)(v0 + 344);
    v84 = *(_QWORD *)(v0 + 328);
    v83 = *(_QWORD *)(v0 + 336);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = (_QWORD *)(v0 + 264);
  v87 = (_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v8 = (uint64_t)v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v9 = *(_QWORD *)(v7 + 72);
  do
  {
    sub_1000CD020(v8, *(_QWORD *)(v0 + 296));
    v8 += v9;
    --v5;
  }
  while (v5);
  v10 = sub_1000A51F0((uint64_t)v4);
  swift_bridgeObjectRelease(v4);
  v11 = Array<A>.uniqued()(v10, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v0 + 424) = v11;
  v12 = v10[2];
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v0 + 432) = v13;
  swift_bridgeObjectRelease(v10);
  v88 = v13;
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v15 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 296);
    v19 = type metadata accessor for Logger(0);
    sub_100037A9C(v19, (uint64_t)qword_10027ABA8);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 312);
    if (v23)
    {
      v85 = *(_QWORD *)(v0 + 320);
      v26 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(32, -1);
      v89 = v86;
      *(_DWORD *)v26 = 134349314;
      *v87 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, v0 + 280, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2082;
      v27 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v25, v27);
      v30 = v29;
      *(_QWORD *)(v0 + 280) = sub_10002BA84(v28, v29, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v26 + 14, v26 + 22);
      v31 = v30;
      v6 = (_QWORD *)(v0 + 264);
      swift_bridgeObjectRelease(v31);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unsubscribe contains %{public}ld duplicates for %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 312));
    }

  }
  v39 = *(_QWORD *)(v0 + 344);
  v40 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 320);
  v42 = *(_QWORD *)(v0 + 296);
  v43 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  *(_QWORD *)(v0 + 440) = v43;
  sub_10000F014(3);
  v45 = v44;
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  objc_msgSend(v43, "setClientApp:", v46);

  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  *(_QWORD *)(v0 + 448) = v47;
  v47(v39, v42, v40);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 88))(v39, v40);
  if ((_DWORD)v48 == enum case for LocatePriority.backgroundAppRefresh(_:))
  {
    v49 = 0;
    v50 = enum case for LocatePriority.live(_:);
    goto LABEL_24;
  }
  v50 = enum case for LocatePriority.live(_:);
  if ((_DWORD)v48 == enum case for LocatePriority.shallow(_:))
  {
    v49 = 1;
    goto LABEL_24;
  }
  if ((_DWORD)v48 == enum case for LocatePriority.live(_:))
  {
    v49 = 2;
    v50 = v48;
    goto LABEL_24;
  }
  if ((_DWORD)v48 == enum case for LocatePriority.backgroundProactive(_:))
  {
    v49 = 5;
LABEL_24:
    v51 = *(_QWORD *)(v0 + 336);
    v52 = *(_QWORD *)(v0 + 312);
    v53 = *(_QWORD *)(v0 + 320);
    objc_msgSend(v43, "setSubscriptionMode:", v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 104))(v51, v50, v52);
    v54 = sub_100018A7C(&qword_100261878, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    dispatch thunk of RawRepresentable.rawValue.getter(v52, v54);
    dispatch thunk of RawRepresentable.rawValue.getter(v52, v54);
    v56 = *(_QWORD *)(v0 + 224);
    v55 = *(_QWORD *)(v0 + 232);
    v57 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    *(_QWORD *)(v0 + 456) = v57;
    v57(v51, v52);
    if (v55 != v56 || v88 == 1)
    {
      v63 = v0 + 80;
      v64 = *(void **)(*(_QWORD *)(v0 + 304) + OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager);
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 536) = isa;
      swift_bridgeObjectRelease(v11);
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = sub_1000BDFD0;
      v66 = swift_continuation_init(v0 + 80, 1);
      *(_QWORD *)(v0 + 184) = _NSConcreteStackBlock;
      v67 = (_QWORD *)(v0 + 184);
      v67[1] = 0x40000000;
      v67[2] = sub_10010A918;
      v67[3] = &unk_100251D88;
      v67[4] = v66;
      objc_msgSend(v64, "unsubscribeForIds:context:completion:", isa, v43, v67);
      return swift_continuation_await(v63);
    }
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v58 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 464) = sub_100037A9C(v58, (uint64_t)qword_10027ABA8);
    swift_bridgeObjectRetain(v11);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v62 = 134349056;
      *v6 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6, v87, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unsubscribing %{public}ld .live subscriptions at once", v62, 0xCu);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v11);
    }

    v68 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v0 + 472) = v68;
    if (v68)
    {
      v63 = v0 + 16;
      v69 = *(void **)(*(_QWORD *)(v0 + 304) + OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager);
      *(_QWORD *)(v0 + 488) = 0;
      *(_QWORD *)(v0 + 496) = 0;
      *(_QWORD *)(v0 + 480) = v69;
      v70 = *(_QWORD *)(v0 + 440);
      v71 = *(_QWORD *)(v0 + 424);
      v72 = *(_QWORD *)(v71 + 32);
      *(_QWORD *)(v0 + 504) = v72;
      v73 = *(_QWORD *)(v71 + 40);
      *(_QWORD *)(v0 + 512) = v73;
      swift_bridgeObjectRetain(v11);
      v74 = sub_100037A5C(&qword_100265230);
      v75 = swift_allocObject(v74, 48, 7);
      *(_OWORD *)(v75 + 16) = xmmword_1001F35F0;
      *(_QWORD *)(v75 + 32) = v72;
      *(_QWORD *)(v75 + 40) = v73;
      swift_bridgeObjectRetain_n(v73, 2);
      v76 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 520) = v76;
      swift_bridgeObjectRelease(v75);
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1000BDC08;
      v77 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
      v78 = (_QWORD *)(v0 + 144);
      v78[1] = 0x40000000;
      v78[2] = sub_10010A918;
      v78[3] = &unk_100251DA0;
      v78[4] = v77;
      objc_msgSend(v69, "unsubscribeForIds:context:completion:", v76, v70, v78);
      return swift_continuation_await(v63);
    }
    v80 = *(void **)(v0 + 440);
    v81 = *(_QWORD *)(v0 + 424);
    swift_release(*(_QWORD *)(v0 + 384));

    swift_bridgeObjectRelease(v81);
    goto LABEL_36;
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001001FE1A0, "findmylocated/SecureLocation+SPOwner.swift", 42, 2, 22, 0);
}

uint64_t sub_1000BDC08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 528) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 304);
    v4 = sub_1000BE104;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 304);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 512));
    v4 = sub_1000BDC78;
    v3 = v5;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000BDC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  uint64_t v28;
  _QWORD *v29;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v1 = *(_QWORD *)(v0 + 496) + 1;
  if (v1 == *(_QWORD *)(v0 + 472))
  {
    v2 = *(_QWORD *)(v0 + 488);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
    if (v2 < 1)
    {
      v31 = *(void **)(v0 + 440);
      v32 = *(_QWORD *)(v0 + 424);
      swift_release(*(_QWORD *)(v0 + 384));

      swift_bridgeObjectRelease(v32);
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 432);
      v34 = *(void **)(v0 + 440);
      v4 = *(_QWORD *)(v0 + 424);
      v33 = *(_QWORD *)(v0 + 384);
      v5 = type metadata accessor for GenericError(0);
      v6 = sub_100018A7C(&qword_100262638, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
      swift_allocError(v5, v6, 0, 0);
      v8 = v7;
      _StringGuts.grow(_:)(80);
      *(_QWORD *)(v0 + 248) = v2;
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v9._object;
      String.append(_:)(v9);
      swift_bridgeObjectRelease(object);
      v11._object = (void *)0x80000001001FE240;
      v11._countAndFlagsBits = 0xD000000000000026;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v4);
      *(_QWORD *)(v0 + 256) = v3;
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v13 = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(v13);
      v14._object = (void *)0x80000001001FE270;
      v14._countAndFlagsBits = 0xD000000000000026;
      String.append(_:)(v14);
      *v8 = 0;
      v8[1] = 0xE000000000000000;
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v8, enum case for GenericError.error(_:), v5);
      swift_willThrow(v15);

      swift_release(v33);
    }
    v16 = *(_QWORD *)(v0 + 344);
    v18 = *(_QWORD *)(v0 + 328);
    v17 = *(_QWORD *)(v0 + 336);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = v0 + 16;
    *(_QWORD *)(v0 + 496) = v1;
    v20 = *(void **)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 440);
    v22 = *(_QWORD *)(v0 + 424) + 16 * v1;
    v23 = *(_QWORD *)(v22 + 32);
    *(_QWORD *)(v0 + 504) = v23;
    v24 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v0 + 512) = v24;
    v25 = sub_100037A5C(&qword_100265230);
    v26 = swift_allocObject(v25, 48, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1001F35F0;
    *(_QWORD *)(v26 + 32) = v23;
    *(_QWORD *)(v26 + 40) = v24;
    swift_bridgeObjectRetain_n(v24, 2);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 520) = isa;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000BDC08;
    v28 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
    v29 = (_QWORD *)(v0 + 144);
    v29[1] = 0x40000000;
    v29[2] = sub_10010A918;
    v29[3] = &unk_100251DA0;
    v29[4] = v28;
    objc_msgSend(v20, "unsubscribeForIds:context:completion:", isa, v21, v29);
    return swift_continuation_await(v19);
  }
}

uint64_t sub_1000BDFD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 544) = v2;
  if (v2)
    v3 = sub_1000BE6D0;
  else
    v3 = sub_1000BE030;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 304), 0);
}

uint64_t sub_1000BE030()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 384);

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BE0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 368));
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BE104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Class isa;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;

  v2 = *(_QWORD *)(v1 + 528);
  v3 = *(void **)(v1 + 520);
  v4 = *(_QWORD *)(v1 + 512);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 448);
  v6 = *(_QWORD *)(v1 + 328);
  v7 = *(_QWORD *)(v1 + 312);
  v8 = *(_QWORD *)(v1 + 296);
  swift_willThrow(a1);

  v5(v6, v8, v7);
  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v4);
  v9 = swift_errorRetain(v2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v1 + 528);
  v14 = *(_QWORD *)(v1 + 512);
  if (v12)
  {
    v61 = *(void (**)(uint64_t, uint64_t))(v1 + 456);
    v62 = *(_QWORD *)(v1 + 504);
    v15 = *(_QWORD *)(v1 + 328);
    v16 = *(_QWORD *)(v1 + 312);
    v17 = swift_slowAlloc(42, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v64 = swift_slowAlloc(64, -1);
    v66 = v64;
    *(_DWORD *)v17 = 136446979;
    v19 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    v22 = v21;
    *(_QWORD *)(v17 + 4) = sub_10002BA84(v20, v21, &v66);
    swift_bridgeObjectRelease(v22);
    v61(v15, v16);
    *(_WORD *)(v17 + 12) = 2160;
    *(_QWORD *)(v17 + 14) = 1752392040;
    *(_WORD *)(v17 + 22) = 2081;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v17 + 24) = sub_10002BA84(v62, v14, &v66);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v17 + 32) = 2112;
    swift_errorRetain(v13);
    v23 = _swift_stdlib_bridgeErrorToNSError(v13);
    *(_QWORD *)(v17 + 34) = v23;
    *v18 = v23;
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to unsubscribe %{public}s %{private,mask.hash}s: %@", (uint8_t *)v17, 0x2Au);
    v24 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v18, 1, v24);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v13);
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 456);
    v26 = *(_QWORD *)(v1 + 328);
    v27 = *(_QWORD *)(v1 + 312);
    swift_errorRelease(*(_QWORD *)(v1 + 528));
    v25(v26, v27);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  v28 = *(_QWORD *)(v1 + 488);
  v29 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 496) + 1;
    if (v30 == *(_QWORD *)(v1 + 472))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 424));
      if (v29 < 1)
      {
        v59 = *(void **)(v1 + 440);
        v60 = *(_QWORD *)(v1 + 424);
        swift_release(*(_QWORD *)(v1 + 384));

        swift_bridgeObjectRelease(v60);
      }
      else
      {
        v31 = *(_QWORD *)(v1 + 432);
        v65 = *(void **)(v1 + 440);
        v32 = *(_QWORD *)(v1 + 424);
        v63 = *(_QWORD *)(v1 + 384);
        v33 = type metadata accessor for GenericError(0);
        v34 = sub_100018A7C(&qword_100262638, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
        swift_allocError(v33, v34, 0, 0);
        v36 = v35;
        v66 = 0;
        v67 = 0xE000000000000000;
        _StringGuts.grow(_:)(80);
        *(_QWORD *)(v1 + 248) = v29;
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v37._object;
        String.append(_:)(v37);
        swift_bridgeObjectRelease(object);
        v39._object = (void *)0x80000001001FE240;
        v39._countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v39);
        swift_bridgeObjectRelease(v32);
        *(_QWORD *)(v1 + 256) = v31;
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v41 = v40._object;
        String.append(_:)(v40);
        swift_bridgeObjectRelease(v41);
        v42._object = (void *)0x80000001001FE270;
        v42._countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v42);
        v43 = v67;
        *v36 = v66;
        v36[1] = v43;
        v44 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v36, enum case for GenericError.error(_:), v33);
        swift_willThrow(v44);

        swift_release(v63);
      }
      v45 = *(_QWORD *)(v1 + 344);
      v47 = *(_QWORD *)(v1 + 328);
      v46 = *(_QWORD *)(v1 + 336);
      swift_task_dealloc(*(_QWORD *)(v1 + 352));
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      (*(void (**)(void))(v1 + 8))();
    }
    else
    {
      v48 = v1 + 16;
      *(_QWORD *)(v1 + 488) = v29;
      *(_QWORD *)(v1 + 496) = v30;
      v49 = *(void **)(v1 + 480);
      v50 = *(_QWORD *)(v1 + 440);
      v51 = *(_QWORD *)(v1 + 424) + 16 * v30;
      v52 = *(_QWORD *)(v51 + 32);
      *(_QWORD *)(v1 + 504) = v52;
      v53 = *(_QWORD *)(v51 + 40);
      *(_QWORD *)(v1 + 512) = v53;
      v54 = sub_100037A5C(&qword_100265230);
      v55 = swift_allocObject(v54, 48, 7);
      *(_OWORD *)(v55 + 16) = xmmword_1001F35F0;
      *(_QWORD *)(v55 + 32) = v52;
      *(_QWORD *)(v55 + 40) = v53;
      swift_bridgeObjectRetain_n(v53, 2);
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v1 + 520) = isa;
      swift_bridgeObjectRelease(v55);
      *(_QWORD *)(v1 + 16) = v1;
      *(_QWORD *)(v1 + 24) = sub_1000BDC08;
      v57 = swift_continuation_init(v1 + 16, 1);
      *(_QWORD *)(v1 + 144) = _NSConcreteStackBlock;
      v58 = (_QWORD *)(v1 + 144);
      v58[1] = 0x40000000;
      v58[2] = sub_10010A918;
      v58[3] = &unk_100251DA0;
      v58[4] = v57;
      objc_msgSend(v49, "unsubscribeForIds:context:completion:", isa, v50, v58);
      swift_continuation_await(v48);
    }
  }
}

uint64_t sub_1000BE6D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)(v1 + 536);
  v3 = *(void **)(v1 + 440);
  v4 = *(_QWORD *)(v1 + 384);
  swift_willThrow(a1);

  swift_release(v4);
  v5 = *(_QWORD *)(v1 + 344);
  v7 = *(_QWORD *)(v1 + 328);
  v6 = *(_QWORD *)(v1 + 336);
  swift_task_dealloc(*(_QWORD *)(v1 + 352));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000BE754(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Priority;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  *(_QWORD *)(v4 + 344) = a2;
  *(_QWORD *)(v4 + 352) = v3;
  *(_BYTE *)(v4 + 628) = a3;
  *(_QWORD *)(v4 + 336) = a1;
  *(_QWORD *)(v4 + 360) = *v3;
  v5 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v4 + 368) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Handle(0);
  *(_QWORD *)(v4 + 376) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 384) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 392) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 400) = swift_task_alloc(v8);
  Priority = type metadata accessor for LocatePriority(0);
  *(_QWORD *)(v4 + 408) = Priority;
  v10 = *(_QWORD *)(Priority - 8);
  *(_QWORD *)(v4 + 416) = v10;
  v11 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v4 + 424) = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 432) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 440) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 448) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 456) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 464) = swift_task_alloc(v12);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v4 + 472) = v13;
  *v13 = v4;
  v13[1] = sub_1000BE86C;
  return daemon.getter();
}

uint64_t sub_1000BE86C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 472);
  v5 = *v1;
  *(_QWORD *)(*v1 + 480) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 488) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000BE95C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000BE95C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[44];
    v6 = sub_1000C0604;
  }
  else
  {
    v7 = v3[44];
    swift_release(v3[60]);
    v6 = sub_1000BE9D8;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000BE9D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[62];
  v2 = v0[63];
  v3 = sub_1000A4A30(v0[42]);
  v0[64] = v2;
  v0[65] = sub_10016B5B4((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000BEA3C, v1, 0);
}

uint64_t sub_1000BEA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 528) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 536) = v7;
  *v7 = v0;
  v7[1] = sub_1000BEB0C;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000BEB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000BEB78, v4, 0);
}

uint64_t sub_1000BEB78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t);
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  char v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Class isa;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  NSObject *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject **v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  id *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  unint64_t v107;
  Class v108;
  id v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  BOOL v113;
  uint64_t v114;
  SEL *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  id v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  _QWORD *v142;
  Class v143;
  uint64_t v144;
  id v145;
  double v146;
  uint64_t v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(void *, uint64_t, uint64_t);
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  unint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  uint64_t v181;
  _QWORD *v182;
  uint8_t *v183;
  id v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  NSObject **v190;
  _QWORD *v191;
  uint64_t v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  id *v206;
  id *v207;
  _QWORD *v208;
  uint64_t v209[2];

  v1 = v0[68];
  v2 = v0[65];
  v3 = v0[64];
  v4 = v0[58];
  v5 = v0[51];
  v6 = v0[52];
  v7 = v0[43];
  v191 = sub_1000CAD48(v1, v2);
  v189 = v3;
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  v8 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  v0[69] = v8;
  sub_10000F014(3);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v193 = v8;
  objc_msgSend(v8, "setClientApp:", v11);

  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[70] = v12;
  v12(v4, v7, v5);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 88);
  v14 = v13(v4, v5);
  v15 = enum case for LocatePriority.backgroundAppRefresh(_:);
  v16 = enum case for LocatePriority.shallow(_:);
  if (v14 == enum case for LocatePriority.backgroundAppRefresh(_:))
  {
    v17 = 0;
  }
  else if (v14 == enum case for LocatePriority.shallow(_:))
  {
    v17 = 1;
  }
  else if (v14 == enum case for LocatePriority.live(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v14 != enum case for LocatePriority.backgroundProactive(_:))
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001001FE1A0, "findmylocated/SecureLocation+SPOwner.swift", 42, 2, 22, 0);
    v17 = 5;
  }
  v190 = (NSObject **)(v0 + 37);
  v18 = v0[57];
  v19 = v0[51];
  v20 = v0[43];
  objc_msgSend(v193, "setSubscriptionMode:", v17);
  v12(v18, v20, v19);
  v21 = v13(v18, v19);
  v22 = &selRef_integerValue;
  v205 = v0 + 39;
  v208 = v0;
  if (v21 == v15 || v21 == v16)
    goto LABEL_44;
  if (v21 != enum case for LocatePriority.live(_:))
  {
    if (v21 == enum case for LocatePriority.backgroundProactive(_:))
      goto LABEL_44;
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001001FE1A0, "findmylocated/SecureLocation+SPOwner.swift", 42, 2, 22, 0);
  }
  v0[39] = _swiftEmptyDictionarySingleton;
  v23 = v191[2];
  if (!v23)
  {
LABEL_38:
    v65 = v0 + 15;
    v22 = &selRef_integerValue;
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v66 = type metadata accessor for Logger(0);
    v67 = sub_100037A9C(v66, (uint64_t)qword_10027ABA8);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v202 = v0 + 15;
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v209[0] = v71;
      *(_DWORD *)v70 = 136315138;
      v72 = v205;
      swift_beginAccess(v205, v208 + 21, 0, 0);
      v73 = *v205;
      swift_bridgeObjectRetain(*v205);
      sub_100037A5C(&qword_1002625F8);
      v75 = Dictionary.description.getter(v74);
      v77 = v76;
      v78 = v73;
      v65 = v202;
      swift_bridgeObjectRelease(v78);
      v208[36] = sub_10002BA84(v75, v77, v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v208 + 36, v190, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v77);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "pushIdentifiers: %s", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

      v72 = v205;
    }
    swift_beginAccess(v72, v65, 0, 0);
    v79 = *v72;
    swift_bridgeObjectRetain(*v72);
    sub_100037A5C(&qword_1002625F8);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v79);
    objc_msgSend(v193, "setPushIdentifiers:", isa);

    swift_bridgeObjectRelease(*v72);
    v0 = v208;
LABEL_44:
    if (v22[283] != (char *)-1)
      goto LABEL_78;
    goto LABEL_45;
  }
  v197 = v0[48];
  v24 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v25 = (char *)v191 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v195 = *(_QWORD *)(v24 + 72);
  swift_bridgeObjectRetain(v191);
  while (1)
  {
    v31 = v0[49];
    v30 = v0[50];
    v32 = v0[47];
    v33 = Friend.handle.getter(v26);
    v34 = Handle.identifier.getter(v33);
    v36 = v35;
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v197 + 8);
    v38 = v37(v30, v32);
    v39 = Friend.handle.getter(v38);
    v40 = Handle.pushIdentifiers.getter(v39);
    v37(v31, v32);
    v0 = v208;
    v41 = v208[39];
    if (!v40)
    {
      swift_bridgeObjectRetain(v208[39]);
      v52 = sub_10002FF38(v34, v36);
      v54 = v53;
      swift_bridgeObjectRelease(v41);
      if ((v54 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v205);
        v56 = *v205;
        v209[0] = *v205;
        *v205 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000F6DE8();
          v56 = v209[0];
        }
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v56 + 48) + 16 * v52 + 8));
        v57 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v52);
        sub_1000F52D8(v52, v56);
        v58 = *v205;
        *v205 = v56;
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v36);
        v59 = v58;
      }
      else
      {
        v59 = v36;
      }
      v26 = swift_bridgeObjectRelease(v59);
      goto LABEL_16;
    }
    v201 = v40;
    v42 = swift_isUniquelyReferenced_nonNull_native(v41);
    v209[0] = *v205;
    v43 = (_QWORD *)v209[0];
    *v205 = 0x8000000000000000;
    v45 = sub_10002FF38(v34, v36);
    v46 = v43[2];
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
      break;
    v49 = v44;
    if (v43[3] >= v48)
    {
      if ((v42 & 1) != 0)
      {
        if ((v44 & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        sub_1000F6DE8();
        v43 = (_QWORD *)v209[0];
        if ((v49 & 1) == 0)
          goto LABEL_29;
      }
    }
    else
    {
      sub_100162404(v48, v42);
      v43 = (_QWORD *)v209[0];
      v50 = sub_10002FF38(v34, v36);
      if ((v49 & 1) != (v51 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v45 = v50;
      if ((v49 & 1) == 0)
      {
LABEL_29:
        v43[(v45 >> 6) + 8] |= 1 << v45;
        v60 = (uint64_t *)(v43[6] + 16 * v45);
        *v60 = v34;
        v60[1] = v36;
        *(_QWORD *)(v43[7] + 8 * v45) = v201;
        v61 = v43[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_77;
        v43[2] = v63;
        swift_bridgeObjectRetain(v36);
        goto LABEL_15;
      }
    }
    v27 = v43[7];
    swift_bridgeObjectRelease(*(_QWORD *)(v27 + 8 * v45));
    *(_QWORD *)(v27 + 8 * v45) = v201;
    v28 = v36;
LABEL_15:
    v29 = *v205;
    *v205 = (uint64_t)v43;
    swift_bridgeObjectRelease(v28);
    v26 = swift_bridgeObjectRelease(v29);
LABEL_16:
    v25 += v195;
    if (!--v23)
    {
      swift_bridgeObjectRelease(v191);
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  swift_once(&qword_10025F8D8, sub_1000A7D34);
LABEL_45:
  v81 = v0 + 38;
  v82 = type metadata accessor for Logger(0);
  v0[71] = sub_100037A9C(v82, (uint64_t)qword_10027ABA8);
  v83 = (uint64_t)v191;
  v84 = swift_bridgeObjectRetain_n(v191, 2);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.debug.getter();
  v199 = v81;
  if (os_log_type_enabled(v85, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v88 = swift_slowAlloc(32, -1);
    v209[0] = v88;
    *(_DWORD *)v87 = 136315138;
    type metadata accessor for Friend(0);
    v89 = swift_bridgeObjectRetain(v191);
    v90 = Array.description.getter(v89);
    v92 = v91;
    swift_bridgeObjectRelease(v191);
    *v81 = sub_10002BA84(v90, v92, v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v81, v205, v87 + 4, v87 + 12);
    swift_bridgeObjectRelease_n(v191, 2);
    swift_bridgeObjectRelease(v92);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "handlesWithIds: %s", v87, 0xCu);
    swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v87, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v191, 2);
  }
  v93 = v193;
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(12, -1);
    v97 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v96 = 138412290;
    *v190 = v93;
    v98 = v93;
    v83 = (uint64_t)v191;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v199, v96 + 4, v96 + 12);
    *v97 = v93;

    _os_log_impl((void *)&_mh_execute_header, v94, v95, "context: %@", v96, 0xCu);
    v99 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v97, 1, v99);
    swift_slowDealloc(v97, -1, -1);
    swift_slowDealloc(v96, -1, -1);
  }
  else
  {

    v94 = v93;
  }

  if (!*(_QWORD *)(v83 + 16))
  {
    v128 = swift_bridgeObjectRelease(v83);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.default.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Not subscribing to location update due to empty handles with ids", v131, 2u);
      swift_slowDealloc(v131, -1, -1);
    }
    v132 = v208[62];

    v133 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v132);

    v134 = v208[57];
    v136 = v208[55];
    v135 = v208[56];
    v137 = v208[54];
    v139 = v208[49];
    v138 = v208[50];
    v140 = v208[46];
    swift_task_dealloc(v208[58]);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    return ((uint64_t (*)(unint64_t))v208[1])(v133);
  }
  if ((static SystemInfo.underTest.getter(v100) & 1) == 0)
  {
    v141 = *(void **)(v208[44] + OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager);
    v142 = sub_1000A51F0(v83);
    v208[72] = v189;
    swift_bridgeObjectRelease(v83);
    v143 = Array._bridgeToObjectiveC()().super.isa;
    v208[73] = v143;
    swift_bridgeObjectRelease(v142);
    v208[7] = v208 + 40;
    v208[2] = v208;
    v208[3] = sub_1000BFE50;
    v144 = swift_continuation_init(v208 + 2, 1);
    v208[10] = _NSConcreteStackBlock;
    v208[11] = 0x40000000;
    v208[12] = sub_1000C0B08;
    v208[13] = &unk_100251CA8;
    v208[14] = v144;
    objc_msgSend(v141, "subscribeAndFetchLocationForIds:context:completion:", v143, v93, v208 + 10);
    return swift_continuation_await(v208 + 2);
  }
  v101 = (id *)(v208 + 41);
  swift_bridgeObjectRelease(v83);
  v102 = sub_100037A5C(&qword_100265250);
  v103 = swift_allocObject(v102, 40, 7);
  *(_OWORD *)(v103 + 16) = xmmword_1001F5130;
  v104 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocation), "init");
  *(_QWORD *)(v103 + 32) = v104;
  v209[0] = v103;
  specialized Array._endMutation()(v104);
  v105 = v209[0];
  v106 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  v107 = sub_1000CE858();
  v108 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v105);
  v109 = objc_msgSend(v106, "initWithExpiryTime:locations:", v108, INFINITY);

  v208[41] = v109;
  v110 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v208[70])(v208[56], v208[43], v208[51]);
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.default.getter(v111);
  v113 = os_log_type_enabled(v111, v112);
  v114 = v208[56];
  v115 = (SEL *)&unk_10025E000;
  v116 = v208[52];
  v117 = v208[51];
  if (v113)
  {
    v118 = swift_slowAlloc(18, -1);
    v203 = swift_slowAlloc(32, -1);
    v209[0] = v203;
    *(_DWORD *)v118 = 136446466;
    v119 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v120 = dispatch thunk of CustomStringConvertible.description.getter(v117, v119);
    v122 = v121;
    v208[34] = sub_10002BA84(v120, v121, v209);
    v115 = (SEL *)&unk_10025E000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v208 + 34, v208 + 35, v118 + 4, v118 + 12);
    v123 = v122;
    v101 = (id *)(v208 + 41);
    swift_bridgeObjectRelease(v123);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v114, v117);
    *(_WORD *)(v118 + 12) = 1024;
    swift_beginAccess(v208 + 41, v208 + 24, 0, 0);
    v124 = objc_msgSend((id)v208[41], "locations");
    v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v124, v107);

    v126 = v208;
    if ((unint64_t)v125 >> 62)
    {
      if (v125 < 0)
        v188 = v125;
      else
        v188 = v125 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v125);
      v127 = _CocoaArrayWrapper.endIndex.getter(v188);
      swift_bridgeObjectRelease(v125);
    }
    else
    {
      v127 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v125);
    *((_DWORD *)v208 + 156) = v127 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v208 + 78, (char *)v208 + 628, v118 + 14, v118 + 18);
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "%{public}s subscription successful. With location? %{BOOL}d", (uint8_t *)v118, 0x12u);
    swift_arrayDestroy(v203, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v203, -1, -1);
    swift_slowDealloc(v118, -1, -1);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v116 + 8))(v114, v208[51]);

    v126 = v208;
  }
  if (*((_BYTE *)v126 + 628) != 1)
  {
    v174 = 0xD00000000000001FLL;
    v175 = "should not check Resubscription";
    goto LABEL_71;
  }
  swift_beginAccess(v101, v126 + 18, 0, 0);
  v145 = *v101;
  objc_msgSend(*v101, "expiresIn");
  if (v146 <= 0.0)
  {
    v174 = 0xD00000000000001ELL;
    v175 = "Subscription has no expiration";
LABEL_71:
    v176 = (unint64_t)(v175 - 32) | 0x8000000000000000;
    swift_bridgeObjectRetain(v176);
    v178 = Logger.logObject.getter(v177);
    v179 = static os_log_type_t.default.getter(v178);
    if (os_log_type_enabled(v178, v179))
    {
      v207 = v101;
      v180 = (uint8_t *)swift_slowAlloc(12, -1);
      v181 = swift_slowAlloc(32, -1);
      v209[0] = v181;
      *(_DWORD *)v180 = 136315138;
      swift_bridgeObjectRetain(v176);
      v208[32] = sub_10002BA84(v174, v176, v209);
      v182 = v126 + 32;
      v115 = (SEL *)&unk_10025E000;
      v126 = v208;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v182, v208 + 33, v180 + 4, v180 + 12);
      swift_bridgeObjectRelease_n(v176, 3);
      _os_log_impl((void *)&_mh_execute_header, v178, v179, "%s. No need to resubscribe.", v180, 0xCu);
      swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v181, -1, -1);
      v183 = v180;
      v101 = v207;
      swift_slowDealloc(v183, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v176, 2);
    }
    goto LABEL_74;
  }
  v204 = v107;
  v206 = v101;
  v147 = v126[42];
  objc_msgSend(v145, "expiresIn");
  v149 = static Duration.seconds(_:)(v148);
  v151 = v150;
  v152 = *(_QWORD *)(v147 + 16);
  if (v152)
  {
    v153 = v126[48];
    v154 = v126[42];
    v155 = v154 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    v156 = *(_QWORD *)(v153 + 72);
    swift_bridgeObjectRetain(v154);
    do
    {
      sub_1000CD8C4(v155, v149, v151, v126[43]);
      v155 += v156;
      --v152;
    }
    while (v152);
    swift_bridgeObjectRelease(v126[42]);
  }
  v157 = (void (*)(void *, uint64_t, uint64_t))v126[70];
  v158 = (void *)v126[55];
  v159 = v126[52];
  v160 = v126[53];
  v161 = v126[51];
  v192 = v161;
  v194 = v158;
  v162 = v126[46];
  v198 = v162;
  v200 = v126[45];
  v163 = v126[44];
  v164 = v208[43];
  v196 = v208[42];
  v165 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 56))(v162, 1, 1, v165);
  v157(v158, v164, v161);
  v166 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v167 = *(unsigned __int8 *)(v159 + 80);
  v168 = (v167 + 48) & ~v167;
  v169 = (v160 + v168 + 7) & 0xFFFFFFFFFFFFFFF8;
  v170 = (v169 + 23) & 0xFFFFFFFFFFFFFFF8;
  v171 = (char *)swift_allocObject(&unk_100251CF8, v170 + 8, v167 | 7);
  *((_QWORD *)v171 + 2) = v163;
  *((_QWORD *)v171 + 3) = v166;
  v126 = v208;
  *((_QWORD *)v171 + 4) = v163;
  *((_QWORD *)v171 + 5) = v196;
  (*(void (**)(char *, id, uint64_t))(v159 + 32))(&v171[v168], v194, v192);
  v172 = (uint64_t *)&v171[v169];
  *v172 = v149;
  v172[1] = v151;
  *(_QWORD *)&v171[v170] = v200;
  swift_retain_n(v163, 2);
  swift_bridgeObjectRetain(v196);
  v173 = sub_10005582C(v198, (uint64_t)&unk_1002625F0, (uint64_t)v171);
  swift_release(v173);
  v107 = v204;
  v101 = v206;
  v115 = (SEL *)&unk_10025E000;
LABEL_74:
  swift_beginAccess(v101, v126 + 27, 0, 0);
  v184 = objc_msgSend((id)v126[41], v115[434]);
  v185 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v184, v107);
  v126[75] = v185;

  v186 = (_QWORD *)swift_task_alloc(dword_10026211C);
  v126[76] = v186;
  *v186 = v126;
  v186[1] = sub_1000C04E0;
  v187 = v126[44];
  v186[2] = v185;
  v186[3] = v187;
  return swift_task_switch(sub_1000C5BB0, v187, 0);
}

uint64_t sub_1000BFE50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 592) = v2;
  if (v2)
    v3 = sub_1000C06A4;
  else
    v3 = sub_1000BFEB0;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 352), 0);
}

uint64_t sub_1000BFEB0()
{
  uint64_t v0;
  id *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  SEL *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id *v72;
  id *v73;
  uint64_t v74[2];

  v1 = (id *)(v0 + 328);
  v2 = *(void **)(v0 + 584);
  *(_QWORD *)(v0 + 328) = *(_QWORD *)(v0 + 320);

  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 560))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 408));
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = (SEL *)&unk_10025E000;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 408);
    v67 = *(_QWORD *)(v0 + 416);
    v9 = swift_slowAlloc(18, -1);
    v71 = swift_slowAlloc(32, -1);
    v74[0] = v71;
    *(_DWORD *)v9 = 136446466;
    v10 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 272) = sub_10002BA84(v11, v12, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v9 + 4, v9 + 12);
    v14 = v13;
    v1 = (id *)(v0 + 328);
    swift_bridgeObjectRelease(v14);
    v15 = v8;
    v6 = (SEL *)&unk_10025E000;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v7, v15);
    *(_WORD *)(v9 + 12) = 1024;
    swift_beginAccess(v0 + 328, v0 + 192, 0, 0);
    v16 = objc_msgSend(*(id *)(v0 + 328), "locations");
    v17 = sub_1000CE858();
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v63 = v18;
      else
        v63 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v19 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v18);
    *(_DWORD *)(v0 + 624) = v19 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 628, v9 + 14, v9 + 18);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s subscription successful. With location? %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 408));
  }

  v20 = 0xD00000000000001ELL;
  if (*(_BYTE *)(v0 + 628) != 1)
  {
    v20 = 0xD00000000000001FLL;
    v49 = "should not check Resubscription";
    goto LABEL_15;
  }
  swift_beginAccess(v1, v0 + 144, 0, 0);
  v21 = *v1;
  objc_msgSend(*v1, "expiresIn");
  if (v22 <= 0.0)
  {
    v49 = "Subscription has no expiration";
LABEL_15:
    v50 = (unint64_t)(v49 - 32) | 0x8000000000000000;
    swift_bridgeObjectRetain(v50);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = v1;
      v74[0] = swift_slowAlloc(32, -1);
      v55 = v74[0];
      *(_DWORD *)v54 = 136315138;
      swift_bridgeObjectRetain(v50);
      *(_QWORD *)(v0 + 256) = sub_10002BA84(v20, v50, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s. No need to resubscribe.", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      v56 = v55;
      v1 = v73;
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v50, 2);
    }
    goto LABEL_18;
  }
  v72 = v1;
  v23 = *(_QWORD *)(v0 + 336);
  objc_msgSend(v21, "expiresIn");
  v25 = static Duration.seconds(_:)(v24);
  v27 = v26;
  v28 = *(_QWORD *)(v23 + 16);
  if (v28)
  {
    v29 = *(_QWORD *)(v0 + 384);
    v30 = *(_QWORD *)(v0 + 336);
    v31 = v30 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    v32 = *(_QWORD *)(v29 + 72);
    swift_bridgeObjectRetain(v30);
    do
    {
      sub_1000CD8C4(v31, v25, v27, *(_QWORD *)(v0 + 344));
      v31 += v32;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
  }
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 560);
  v34 = *(_QWORD *)(v0 + 440);
  v35 = *(_QWORD *)(v0 + 416);
  v65 = v34;
  v66 = *(_QWORD *)(v0 + 424);
  v36 = *(_QWORD *)(v0 + 408);
  v64 = v36;
  v37 = *(_QWORD *)(v0 + 368);
  v69 = v37;
  v70 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 344);
  v39 = *(_QWORD *)(v0 + 352);
  v68 = *(_QWORD *)(v0 + 336);
  v40 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v37, 1, 1, v40);
  v33(v34, v38, v36);
  v41 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v42 = *(unsigned __int8 *)(v35 + 80);
  v43 = (v42 + 48) & ~v42;
  v44 = (v66 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  v46 = (char *)swift_allocObject(&unk_100251CF8, v45 + 8, v42 | 7);
  *((_QWORD *)v46 + 2) = v39;
  *((_QWORD *)v46 + 3) = v41;
  *((_QWORD *)v46 + 4) = v39;
  *((_QWORD *)v46 + 5) = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(&v46[v43], v65, v64);
  v47 = (uint64_t *)&v46[v44];
  *v47 = v25;
  v47[1] = v27;
  *(_QWORD *)&v46[v45] = v70;
  swift_retain_n(v39, 2);
  swift_bridgeObjectRetain(v68);
  v48 = sub_10005582C(v69, (uint64_t)&unk_1002625F0, (uint64_t)v46);
  swift_release(v48);
  v1 = v72;
  v6 = (SEL *)&unk_10025E000;
LABEL_18:
  swift_beginAccess(v1, v0 + 216, 0, 0);
  v57 = objc_msgSend(*(id *)(v0 + 328), v6[434]);
  v58 = sub_1000CE858();
  v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);
  *(_QWORD *)(v0 + 600) = v59;

  v60 = (_QWORD *)swift_task_alloc(dword_10026211C);
  *(_QWORD *)(v0 + 608) = v60;
  *v60 = v0;
  v60[1] = sub_1000C04E0;
  v61 = *(_QWORD *)(v0 + 352);
  v60[2] = v59;
  v60[3] = v61;
  return swift_task_switch(sub_1000C5BB0, v61, 0);
}

uint64_t sub_1000C04E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 616) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000C054C, v4, 0);
}

uint64_t sub_1000C054C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 496);

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000C0604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 368);
  swift_release(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C06A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62[2];

  v2 = *(_QWORD *)(v1 + 592);
  v3 = *(void **)(v1 + 584);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 560);
  v5 = *(_QWORD *)(v1 + 432);
  v6 = *(_QWORD *)(v1 + 408);
  v7 = *(_QWORD *)(v1 + 344);
  swift_willThrow(a1);

  v4(v5, v7, v6);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v1 + 592);
    v12 = *(_QWORD *)(v1 + 432);
    v13 = *(_QWORD *)(v1 + 408);
    v60 = *(_QWORD *)(v1 + 416);
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v62[0] = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v19 = v18;
    *(_QWORD *)(v1 + 280) = sub_10002BA84(v17, v18, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 280, v1 + 288, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v12, v13);
    *(_WORD *)(v14 + 12) = 2082;
    *(_QWORD *)(v1 + 248) = v11;
    swift_errorRetain(v11);
    v20 = sub_100037A5C(&qword_100265260);
    v21 = String.init<A>(describing:)(v1 + 248, v20);
    v23 = v22;
    *(_QWORD *)(v1 + 240) = sub_10002BA84(v21, v22, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v23);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Subscription failed due to %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v24 = *(_QWORD *)(v1 + 592);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 416) + 8))(*(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 408));
    swift_errorRelease(v24);
    swift_errorRelease(v24);
  }

  v25 = *(_QWORD *)(v1 + 336);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = *(_QWORD *)(v1 + 384);
    v28 = v25 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v29 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 336));
    do
    {
      sub_1000CD8C4(v28, 0xD02AB486CEDC0000, 0, *(_QWORD *)(v1 + 344));
      v28 += v29;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 336));
    v25 = *(_QWORD *)(v1 + 336);
  }
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 560);
  v61 = *(void **)(v1 + 552);
  v58 = *(_QWORD *)(v1 + 592);
  v59 = *(_QWORD *)(v1 + 496);
  v31 = *(_QWORD *)(v1 + 440);
  v33 = *(_QWORD *)(v1 + 416);
  v32 = *(_QWORD *)(v1 + 424);
  v34 = *(_QWORD *)(v1 + 408);
  v35 = *(_QWORD *)(v1 + 368);
  v55 = v31;
  v56 = v35;
  v57 = *(_QWORD *)(v1 + 360);
  v37 = *(_QWORD *)(v1 + 344);
  v36 = *(_QWORD *)(v1 + 352);
  v38 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v35, 1, 1, v38);
  v30(v31, v37, v34);
  v39 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v40 = *(unsigned __int8 *)(v33 + 80);
  v41 = (v40 + 48) & ~v40;
  v42 = (v32 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  v44 = (char *)swift_allocObject(&unk_100251CD0, v43 + 8, v40 | 7);
  *((_QWORD *)v44 + 2) = v36;
  *((_QWORD *)v44 + 3) = v39;
  *((_QWORD *)v44 + 4) = v36;
  *((_QWORD *)v44 + 5) = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(&v44[v41], v55, v34);
  *(_OWORD *)&v44[v42] = xmmword_1001F5120;
  *(_QWORD *)&v44[v43] = v57;
  swift_retain_n(v36, 2);
  swift_bridgeObjectRetain(v25);
  v45 = sub_10005582C(v56, (uint64_t)&unk_1002625E0, (uint64_t)v44);
  swift_release(v45);
  v46 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v58);
  swift_release(v59);

  v47 = *(_QWORD *)(v1 + 456);
  v49 = *(_QWORD *)(v1 + 440);
  v48 = *(_QWORD *)(v1 + 448);
  v50 = *(_QWORD *)(v1 + 432);
  v52 = *(_QWORD *)(v1 + 392);
  v51 = *(_QWORD *)(v1 + 400);
  v53 = *(_QWORD *)(v1 + 368);
  swift_task_dealloc(*(_QWORD *)(v1 + 464));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(unint64_t))(v1 + 8))(v46);
}

uint64_t sub_1000C0B08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100037A5C(&qword_100265260);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v10 = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000C0B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t Priority;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v8[6] = a8;
  v8[7] = v18;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v11 = type metadata accessor for UUID(0);
  v8[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v8[9] = Priority;
  v13 = *(_QWORD *)(Priority - 8);
  v8[10] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v8[11] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[12] = swift_task_alloc(v15);
  v8[13] = swift_task_alloc(v15);
  v16 = (_QWORD *)swift_task_alloc(dword_100262104);
  v8[14] = v16;
  *v16 = v8;
  v16[1] = sub_1000C0C60;
  return sub_1000C3EAC(a5, a6);
}

uint64_t sub_1000C0C60(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_BYTE *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C0CC0, v3, 0);
}

uint64_t sub_1000C0CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 120) == 1)
  {
    v1 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 72);
    v25 = v4;
    v34 = *(_QWORD *)(v0 + 64);
    v31 = *(_QWORD *)(v0 + 56);
    v32 = *(_QWORD *)(v0 + 96);
    v28 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 32);
    v26 = v3;
    v27 = *(_QWORD *)(v0 + 40);
    v35 = v5;
    v6 = *(_QWORD *)(v0 + 24);
    v30 = *(_QWORD *)(v0 + 16);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v37(v1, v5, v4);
    v7 = *(unsigned __int8 *)(v2 + 80);
    v8 = (v7 + 32) & ~v7;
    v33 = v8 + v3;
    v36 = v7 | 7;
    v9 = (v8 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject(&unk_100251D20, v11 + 8, v7 | 7);
    *(_QWORD *)(v12 + 16) = v27;
    *(_QWORD *)(v12 + 24) = v28;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v29(v12 + v8, v1, v25);
    *(_QWORD *)(v12 + v9) = v6;
    *(_QWORD *)(v12 + v10) = v30;
    *(_QWORD *)(v12 + v11) = v31;
    v37(v32, v35, v25);
    v13 = (v7 + 16) & ~v7;
    v14 = (v26 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = swift_allocObject(&unk_100251D48, v15 + 8, v36);
    v29(v16 + v13, v32, v25);
    *(_QWORD *)(v16 + v14) = v6;
    *(_QWORD *)(v16 + v15) = v31;
    swift_bridgeObjectRetain_n(v6, 2);
    v17 = swift_retain(v30);
    UUID.init()(v17);
    v18 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v34, &unk_100262608, v12, &unk_100262618, v16);
    v37(v1, v35, v25);
    v19 = swift_allocObject(&unk_100251D70, v33, v36);
    *(_QWORD *)(v19 + 16) = v30;
    *(_QWORD *)(v19 + 24) = v18;
    v29(v19 + v8, v1, v25);
    swift_retain(v30);
    v20 = swift_retain(v18);
    UUID.init()(v20);
    v21 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v34, &unk_100262628, v19, &unk_100262630, 0);
    ((void (*)(void))dispatch thunk of WorkItemQueue.enqueue(_:))();
    dispatch thunk of WorkItemQueue.enqueue(_:)(v18);
    swift_release(v18);
    swift_release(v21);
  }
  v22 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C0F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Priority;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for Handle(0);
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v5[16] = Priority;
  v9 = *(_QWORD *)(Priority - 8);
  v5[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[18] = swift_task_alloc(v10);
  v5[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for ContinuousClock(0);
  v5[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[21] = v12;
  v5[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C1040, 0, 0);
}

uint64_t sub_1000C1040(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1002618A0 + dword_1002618A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1002618A4);
  v1[23] = v2;
  *v2 = v1;
  v2[1] = sub_1000C10B8;
  return v4(v1[8], v1[9], 0, 0, 1);
}

uint64_t sub_1000C10B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_1000C1138;
  else
    v6 = sub_1000C1194;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000C1138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  NSObject *v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint8_t *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[19];
  v2 = v0[16];
  v3 = v0[17];
  v5 = v0[10];
  v4 = v0[11];
  v6 = type metadata accessor for Logger(0);
  v0[25] = sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[26] = v7;
  v7(v1, v5, v2);
  v8 = swift_bridgeObjectRetain_n(v4, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[19];
  v14 = v0[16];
  v13 = v0[17];
  v15 = v0[11];
  if (v11)
  {
    v49 = v10;
    v16 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    *(_DWORD *)v16 = 136315651;
    v51 = v47;
    v17 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    v20 = v19;
    v0[5] = sub_10002BA84(v18, v19, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    v46 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v46(v12, v14);
    *(_WORD *)(v16 + 12) = 2160;
    v0[6] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v16 + 14, v16 + 22);
    v48 = (uint8_t *)v16;
    *(_WORD *)(v16 + 22) = 2081;
    v22 = *(_QWORD *)(v15 + 16);
    v23 = _swiftEmptyArrayStorage;
    if (v22)
    {
      v45 = v9;
      v24 = v0[14];
      v25 = v0[11];
      v52 = _swiftEmptyArrayStorage;
      sub_1000312EC(0, v22, 0);
      v26 = v25 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      v50 = *(_QWORD *)(v24 + 72);
      v27 = v24;
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
      do
      {
        v29 = v0[15];
        v30 = v0[13];
        v31 = v28(v29, v26, v30);
        v32 = Handle.identifier.getter(v31);
        v34 = v33;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v30);
        v23 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        {
          sub_1000312EC(0, v23[2] + 1, 1);
          v23 = v52;
        }
        v36 = v23[2];
        v35 = v23[3];
        if (v36 >= v35 >> 1)
        {
          sub_1000312EC(v35 > 1, v36 + 1, 1);
          v23 = v52;
        }
        v23[2] = v36 + 1;
        v37 = &v23[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        v26 += v50;
        --v22;
      }
      while (v22);
      v9 = v45;
    }
    v39 = v0[11];
    v40 = Array.description.getter(v21);
    v42 = v41;
    swift_bridgeObjectRelease(v23);
    v0[7] = sub_10002BA84(v40, v42, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v48 + 24, v48 + 32);
    swift_bridgeObjectRelease_n(v39, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v9, v49, "Resubscription task fired for: %s for handles: %{private,mask.hash}s, checking if we need to resubscribe", v48, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    v38 = v46;
  }
  else
  {
    v38 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v38(v0[19], v0[16]);

    swift_bridgeObjectRelease_n(v15, 2);
  }
  v0[27] = v38;
  v43 = (_QWORD *)swift_task_alloc(dword_1002620F4);
  v0[28] = v43;
  *v43 = v0;
  v43[1] = sub_1000C1598;
  return sub_1000C3218(v0[10]);
}

uint64_t sub_1000C1598(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  v4 = *v1;
  *(_QWORD *)(*v1 + 232) = a1;
  swift_task_dealloc(v3);
  v5 = (_QWORD *)swift_task_alloc(dword_1002620FC);
  *(_QWORD *)(v2 + 240) = v5;
  *v5 = v4;
  v5[1] = sub_1000C1610;
  return sub_1000C3528(*(_QWORD *)(v2 + 80));
}

uint64_t sub_1000C1610()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1000C1664, 0, 0);
}

uint64_t sub_1000C1664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  uint64_t v47;
  uint8_t *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = *(_QWORD *)(v0 + 232);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 128));
    v3 = swift_bridgeObjectRetain_n(v2, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 88);
    if (v6)
    {
      v49 = v5;
      v11 = swift_slowAlloc(32, -1);
      v47 = swift_slowAlloc(64, -1);
      *(_DWORD *)v11 = 136315651;
      v51 = v47;
      v12 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
      v15 = v14;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v14, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      v7(v8, v9);
      *(_WORD *)(v11 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 14, v11 + 22);
      v48 = (uint8_t *)v11;
      *(_WORD *)(v11 + 22) = 2081;
      v17 = *(_QWORD *)(v10 + 16);
      v18 = _swiftEmptyArrayStorage;
      if (v17)
      {
        v46 = v4;
        v19 = *(_QWORD *)(v0 + 112);
        v20 = *(_QWORD *)(v0 + 88);
        v52 = _swiftEmptyArrayStorage;
        sub_1000312EC(0, v17, 0);
        v21 = v20 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
        v50 = *(_QWORD *)(v19 + 72);
        v22 = v19;
        v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
        do
        {
          v24 = *(_QWORD *)(v0 + 120);
          v25 = *(_QWORD *)(v0 + 104);
          v26 = v23(v24, v21, v25);
          v27 = Handle.identifier.getter(v26);
          v29 = v28;
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v25);
          v18 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          {
            sub_1000312EC(0, v18[2] + 1, 1);
            v18 = v52;
          }
          v31 = v18[2];
          v30 = v18[3];
          if (v31 >= v30 >> 1)
          {
            sub_1000312EC(v30 > 1, v31 + 1, 1);
            v18 = v52;
          }
          v18[2] = v31 + 1;
          v32 = &v18[2 * v31];
          v32[4] = v27;
          v32[5] = v29;
          v21 += v50;
          --v17;
        }
        while (v17);
        v4 = v46;
      }
      v41 = *(_QWORD *)(v0 + 88);
      v42 = Array.description.getter(v16);
      v44 = v43;
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v42, v44, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v48 + 24, v48 + 32);
      swift_bridgeObjectRelease_n(v41, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v4, v49, "Resubscribing %s for handles %{private,mask.hash}s", v48, 0x20u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {
      v7(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));

      swift_bridgeObjectRelease_n(v10, 2);
    }
    v45 = (_QWORD *)swift_task_alloc(dword_1002620EC);
    *(_QWORD *)(v0 + 248) = v45;
    *v45 = v0;
    v45[1] = sub_1000C1AD8;
    return sub_1000BE754(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 80), 1);
  }
  else
  {
    v33 = swift_bridgeObjectRelease(v1);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Resubscription task fired but handles clients are interested in is empty, not resubscribing. Clearing out and returning.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    v37 = *(_QWORD *)(v0 + 144);
    v38 = *(_QWORD *)(v0 + 152);
    v39 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C1AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 248);
  v6 = *(_QWORD *)(*v2 + 232);
  v7 = *v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  if (v1)
  {
    v8 = v4[22];
    v10 = v4[18];
    v9 = v4[19];
    v11 = v4[15];
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v12 = v4[18];
    v13 = v4[19];
    v14 = v4[15];
    swift_task_dealloc(v4[22]);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000C1B9C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Priority;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 128) = a4;
  *(_BYTE *)(v4 + 224) = a2;
  *(_QWORD *)(v4 + 112) = a1;
  v5 = type metadata accessor for CancellationError(0);
  *(_QWORD *)(v4 + 136) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Handle(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  *(_QWORD *)(v4 + 176) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  *(_QWORD *)(v4 + 184) = Priority;
  v10 = *(_QWORD *)(Priority - 8);
  *(_QWORD *)(v4 + 192) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 200) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 208) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 216) = swift_task_alloc(v11);
  return swift_task_switch(sub_1000C1C70, 0, 0);
}

uint64_t sub_1000C1C70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  int64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __n128 v102;
  int64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  NSObject *v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  os_log_type_t v146;
  os_log_t log;
  NSObject *loga;
  uint8_t *v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  os_log_t v153;
  NSObject *v154;
  os_log_t v155;
  uint8_t *v156;
  uint64_t v157;
  os_log_type_t v158;
  uint64_t (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;

  v1 = (uint64_t *)(v0 + 88);
  if ((*(_BYTE *)(v0 + 224) & 1) != 0)
  {
    v40 = (uint64_t *)(v0 + 64);
    v41 = *(_QWORD *)(v0 + 152);
    v42 = *(_QWORD *)(v0 + 136);
    v43 = *(NSObject **)(v0 + 112);
    *(_QWORD *)(v0 + 16) = v43;
    swift_errorRetain(v43);
    swift_errorRetain(v43);
    v44 = sub_100037A5C(&qword_100265260);
    if ((swift_dynamicCast(v41, v0 + 16, v44, v42, 6) & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v45 = *(_QWORD *)(v0 + 208);
      v46 = v164[24];
      v47 = v164[23];
      v48 = v164[16];
      v49 = v164[15];
      v50 = type metadata accessor for Logger(0);
      sub_100037A9C(v50, (uint64_t)qword_10027ABA8);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
      v9 = v164;
      v51(v45, v49, v47);
      v52 = swift_bridgeObjectRetain_n(v48, 2);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      v55 = os_log_type_enabled(v53, v54);
      v56 = v164[26];
      v58 = v164[23];
      v57 = v164[24];
      v59 = v164[16];
      if (!v55)
      {
        sub_10007E9BC(v164[14], 1);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
        swift_bridgeObjectRelease_n(v59, 2);

        goto LABEL_43;
      }
      v151 = v54;
      v154 = v53;
      v60 = swift_slowAlloc(32, -1);
      log = (os_log_t)swift_slowAlloc(64, -1);
      v165 = (uint64_t)log;
      *(_DWORD *)v60 = 136315651;
      v61 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v58, v61);
      v161 = v59;
      v64 = v63;
      *v40 = sub_10002BA84(v62, v63, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v164 + 9, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease(v64);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      *(_WORD *)(v60 + 12) = 2160;
      v164[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 9, v164 + 10, v60 + 14, v60 + 22);
      v149 = (uint8_t *)v60;
      *(_WORD *)(v60 + 22) = 2081;
      v66 = *(_QWORD *)(v161 + 16);
      v67 = _swiftEmptyArrayStorage;
      if (v66)
      {
        v145 = v1;
        v68 = v164[21];
        v69 = v164[16];
        v166 = _swiftEmptyArrayStorage;
        sub_1000312EC(0, v66, 0);
        v70 = v69 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
        v9 = v164;
        v71 = v68;
        v159 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
        v162 = *(_QWORD *)(v68 + 72);
        do
        {
          v72 = v164[22];
          v73 = v164[20];
          v74 = v159(v72, v70, v73);
          v75 = Handle.identifier.getter(v74);
          v77 = v76;
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v73);
          v67 = v166;
          if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
          {
            sub_1000312EC(0, v67[2] + 1, 1);
            v67 = v166;
          }
          v79 = v67[2];
          v78 = v67[3];
          if (v79 >= v78 >> 1)
          {
            sub_1000312EC(v78 > 1, v79 + 1, 1);
            v67 = v166;
          }
          v67[2] = v79 + 1;
          v80 = &v67[2 * v79];
          v80[4] = v75;
          v80[5] = v77;
          v70 += v162;
          --v66;
        }
        while (v66);
        v1 = v145;
      }
      v133 = v9[16];
      v124 = v9[14];
      v134 = Array.description.getter(v65);
      v136 = v135;
      swift_bridgeObjectRelease(v67);
      v9[10] = sub_10002BA84(v134, v136, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 10, v1, v149 + 24, v149 + 32);
      swift_bridgeObjectRelease(v136);
      swift_bridgeObjectRelease_n(v133, 2);
      v131 = v154;
      _os_log_impl((void *)&_mh_execute_header, v154, v151, "%s resubscription canceled for %{private,mask.hash}s.", v149, 0x20u);
      swift_arrayDestroy(log, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      v132 = v149;
    }
    else
    {
      v152 = v44;
      v155 = v43;
      v157 = v0 + 64;
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v81 = *(_QWORD *)(v0 + 200);
      v82 = v164[24];
      v83 = v164[23];
      v84 = v164[16];
      v85 = v164[15];
      v86 = v164[14];
      v87 = type metadata accessor for Logger(0);
      sub_100037A9C(v87, (uint64_t)qword_10027ABA8);
      v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16);
      v9 = v164;
      v88(v81, v85, v83);
      swift_bridgeObjectRetain(v84);
      sub_1000CECA0(v86, 1);
      swift_bridgeObjectRetain(v84);
      v89 = sub_1000CECA0(v86, 1);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter(v90);
      v92 = os_log_type_enabled(v90, v91);
      v94 = v164[24];
      v93 = v164[25];
      v95 = v164[23];
      v96 = v164[16];
      if (!v92)
      {
        v122 = v164[14];
        sub_10007E9BC(v122, 1);
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
        swift_bridgeObjectRelease_n(v96, 2);
        sub_10007E9BC(v122, 1);
        sub_10007E9BC(v122, 1);

        goto LABEL_43;
      }
      v146 = v91;
      loga = v90;
      v142 = v164 + 6;
      v97 = swift_slowAlloc(42, -1);
      v143 = swift_slowAlloc(96, -1);
      v165 = v143;
      *(_DWORD *)v97 = 136315907;
      v98 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v99 = dispatch thunk of CustomStringConvertible.description.getter(v95, v98);
      v101 = v100;
      v164[3] = sub_10002BA84(v99, v100, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 3, v164 + 4, v97 + 4, v97 + 12);
      swift_bridgeObjectRelease(v101);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
      *(_WORD *)(v97 + 12) = 2160;
      v164[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 4, v164 + 5, v97 + 14, v97 + 22);
      v144 = v97;
      *(_WORD *)(v97 + 22) = 2081;
      v103 = *(_QWORD *)(v96 + 16);
      v104 = _swiftEmptyArrayStorage;
      if (v103)
      {
        v105 = v164[21];
        v106 = v164[16];
        v166 = _swiftEmptyArrayStorage;
        sub_1000312EC(0, v103, 0);
        v107 = v106 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
        v9 = v164;
        v108 = v105;
        v160 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 16);
        v163 = *(_QWORD *)(v105 + 72);
        do
        {
          v109 = v164[22];
          v110 = v164[20];
          v111 = v160(v109, v107, v110);
          v112 = Handle.identifier.getter(v111);
          v114 = v113;
          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v110);
          v104 = v166;
          if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
          {
            sub_1000312EC(0, v104[2] + 1, 1);
            v104 = v166;
          }
          v116 = v104[2];
          v115 = v104[3];
          if (v116 >= v115 >> 1)
          {
            sub_1000312EC(v115 > 1, v116 + 1, 1);
            v104 = v166;
          }
          v104[2] = v116 + 1;
          v117 = &v104[2 * v116];
          v117[4] = v112;
          v117[5] = v114;
          v107 += v163;
          --v103;
        }
        while (v103);
      }
      v123 = v9[16];
      v124 = v9[14];
      v125 = Array.description.getter(v102);
      v127 = v126;
      swift_bridgeObjectRelease(v104);
      v9[5] = sub_10002BA84(v125, v127, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 5, v142, v144 + 24, v144 + 32);
      swift_bridgeObjectRelease(v127);
      swift_bridgeObjectRelease_n(v123, 2);
      *(_WORD *)(v144 + 32) = 2082;
      v9[6] = v155;
      sub_1000CECA0(v124, 1);
      v128 = String.init<A>(describing:)(v142, v152);
      v130 = v129;
      v9[7] = sub_10002BA84(v128, v129, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 7, v157, v144 + 34, v144 + 42);
      swift_bridgeObjectRelease(v130);
      sub_10007E9BC(v124, 1);
      sub_10007E9BC(v124, 1);
      v131 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, v146, "%s resubscription failed for %{private,mask.hash}s. Error %{public}s", (uint8_t *)v144, 0x2Au);
      swift_arrayDestroy(v143, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      v132 = (uint8_t *)v144;
    }
    swift_slowDealloc(v132, -1, -1);

    sub_10007E9BC(v124, 1);
    goto LABEL_43;
  }
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = v164[24];
  v4 = v164[23];
  v5 = v164[16];
  v6 = v164[15];
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027ABA8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v9 = v164;
  v8(v2, v6, v4);
  v10 = swift_bridgeObjectRetain_n(v5, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = v164[27];
  v16 = v164[23];
  v15 = v164[24];
  v17 = v164[16];
  if (v13)
  {
    v158 = v12;
    v18 = swift_slowAlloc(32, -1);
    v153 = (os_log_t)swift_slowAlloc(64, -1);
    v165 = (uint64_t)v153;
    *(_DWORD *)v18 = 136315651;
    v19 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    v22 = v21;
    *v1 = sub_10002BA84(v20, v21, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v164 + 12, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    *(_WORD *)(v18 + 12) = 2160;
    v164[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 12, v164 + 13, v18 + 14, v18 + 22);
    v156 = (uint8_t *)v18;
    *(_WORD *)(v18 + 22) = 2081;
    v24 = *(_QWORD *)(v17 + 16);
    v25 = _swiftEmptyArrayStorage;
    if (v24)
    {
      v150 = v11;
      v26 = v164[21];
      v27 = v164[16];
      v166 = _swiftEmptyArrayStorage;
      sub_1000312EC(0, v24, 0);
      v28 = v27 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      v29 = *(_QWORD *)(v26 + 72);
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      do
      {
        v31 = v164[22];
        v32 = v164[20];
        v33 = v30(v31, v28, v32);
        v34 = Handle.identifier.getter(v33);
        v36 = v35;
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v32);
        v25 = v166;
        if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
        {
          sub_1000312EC(0, v25[2] + 1, 1);
          v25 = v166;
        }
        v38 = v25[2];
        v37 = v25[3];
        if (v38 >= v37 >> 1)
        {
          sub_1000312EC(v37 > 1, v38 + 1, 1);
          v25 = v166;
        }
        v25[2] = v38 + 1;
        v39 = &v25[2 * v38];
        v39[4] = v34;
        v39[5] = v36;
        v28 += v29;
        --v24;
      }
      while (v24);
      v9 = v164;
      v11 = v150;
    }
    v118 = v9[16];
    v119 = Array.description.getter(v23);
    v121 = v120;
    swift_bridgeObjectRelease(v25);
    v9[13] = sub_10002BA84(v119, v121, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164 + 13, v9 + 14, v156 + 24, v156 + 32);
    swift_bridgeObjectRelease(v121);
    swift_bridgeObjectRelease_n(v118, 2);
    _os_log_impl((void *)&_mh_execute_header, v11, v158, "%s resubscription succeeded for %{private,mask.hash}s.", v156, 0x20u);
    swift_arrayDestroy(v153, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v153, -1, -1);
    swift_slowDealloc(v156, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v15 + 8))(v164[27], v164[23]);
    swift_bridgeObjectRelease_n(v17, 2);

  }
LABEL_43:
  v137 = v9[26];
  v138 = v9[25];
  v139 = v9[22];
  v140 = v9[19];
  swift_task_dealloc(v9[27]);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v140);
  return ((uint64_t (*)(void))v9[1])();
}

uint64_t sub_1000C2938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000C2958, a1, 0);
}

uint64_t sub_1000C2958()
{
  uint64_t v0;

  sub_1000C3B58(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2990(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  NSObject *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = v1;
  v4 = *v1;
  v5 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  v53 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v12 = type metadata accessor for Logger(0);
  sub_100037A9C(v12, (uint64_t)qword_10027ABA8);
  v13 = swift_bridgeObjectRetain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    v50 = v15;
    v16 = swift_slowAlloc(32, -1);
    v49 = swift_slowAlloc(64, -1);
    v55 = v49;
    *(_DWORD *)v16 = 136446723;
    v54 = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FE150, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2160;
    v54 = 1752392040;
    v48 = &v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v16 + 14, v16 + 22);
    v51 = (uint8_t *)v16;
    *(_WORD *)(v16 + 22) = 2081;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = _swiftEmptyArrayStorage;
    if (v18)
    {
      v43 = v14;
      v44 = v7;
      v45 = v4;
      v46 = v2;
      v54 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000312EC(0, v18, 0);
      v20 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v47 = a1;
      v21 = a1 + v20;
      v22 = *(_QWORD *)(v53 + 72);
      v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 16);
      do
      {
        v24 = v52;
        v25 = v23(v11, v21, v52);
        v26 = Handle.identifier.getter(v25);
        v28 = v27;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v24);
        v19 = (_QWORD *)v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_1000312EC(0, v19[2] + 1, 1);
          v19 = (_QWORD *)v54;
        }
        v30 = v19[2];
        v29 = v19[3];
        if (v30 >= v29 >> 1)
        {
          sub_1000312EC(v29 > 1, v30 + 1, 1);
          v19 = (_QWORD *)v54;
        }
        v19[2] = v30 + 1;
        v31 = &v19[2 * v30];
        v31[4] = v26;
        v31[5] = v28;
        v21 += v22;
        --v18;
      }
      while (v18);
      v2 = v46;
      a1 = v47;
      v7 = v44;
      v4 = v45;
      v14 = v43;
    }
    v32 = v51;
    v33 = Array.description.getter(v17);
    v35 = v34;
    swift_bridgeObjectRelease(v19);
    v54 = sub_10002BA84(v33, v35, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v48, v32 + 24, v32 + 32);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease_n(a1, 2);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v50, " %{public}s for handles: %{private,mask.hash}s", v32, 0x20u);
    v36 = v49;
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
  }

  v37 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v7, 1, 1, v37);
  v38 = sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v39 = (_QWORD *)swift_allocObject(&unk_100251C90, 56, 7);
  v39[2] = v2;
  v39[3] = v38;
  v39[4] = v2;
  v39[5] = a1;
  v39[6] = v4;
  swift_retain_n(v2, 2);
  swift_bridgeObjectRetain(a1);
  v40 = sub_10005582C((uint64_t)v7, (uint64_t)&unk_1002625D0, (uint64_t)v39);
  return swift_release(v40);
}

uint64_t sub_1000C2DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t Priority;
  uint64_t v8;

  v5[6] = a4;
  v5[7] = a5;
  Priority = type metadata accessor for LocatePriority(0);
  v5[8] = Priority;
  v8 = *(_QWORD *)(Priority - 8);
  v5[9] = v8;
  v5[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C2E4C, a4, 0);
}

uint64_t sub_1000C2E4C()
{
  uint64_t *v0;
  uint64_t **v1;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[9] + 104))(v0[10], enum case for LocatePriority.shallow(_:), v0[8]);
  v1 = (uint64_t **)swift_task_alloc(dword_1002620BC);
  v0[11] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000C2EB8;
  return sub_1000B21FC(v0[7], v0[10]);
}

uint64_t sub_1000C2EB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 72);
  v6 = *v1;
  *(_QWORD *)(v6 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1000C2F58, *(_QWORD *)(v6 + 48), 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 80));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000C2F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 56);
  if (v7)
  {
    v10 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(64, -1);
    v21 = v20;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for Handle(0);
    v11 = swift_bridgeObjectRetain(v9);
    v12 = Array.description.getter(v11);
    v14 = v13;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v12, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v9, 2);
    *(_WORD *)(v10 + 22) = 2080;
    *(_QWORD *)(v0 + 32) = v8;
    swift_errorRetain(v8);
    v15 = sub_100037A5C(&qword_100265260);
    v16 = String.init<A>(describing:)(v0 + 32, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unsubscribe for %{private,mask.hash}s\nfailed with error: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C3218(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t Priority;
  uint64_t v4;

  v2[6] = a1;
  v2[7] = v1;
  Priority = type metadata accessor for LocatePriority(0);
  v2[8] = Priority;
  v4 = *(_QWORD *)(Priority - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C3278, v1, 0);
}

uint64_t sub_1000C3278()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain(v2);
    v4 = sub_10001BE14(v3);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 24 * v4);
      v7 = *v6;
      v8 = v6[1];
      swift_retain(v8);
      swift_bridgeObjectRetain_n(v7, 2);
      swift_bridgeObjectRelease(v2);
      v9 = sub_100167564(v7);
      swift_bridgeObjectRelease_n(v7, 2);
      swift_release(v8);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease(v2);
  }
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027ABA8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v20 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 64);
  if (v18)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v22 = 136315138;
    v23 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v21, v23);
    v26 = v25;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No handle to resubscribe for %s.", v22, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  v9 = _swiftEmptyArrayStorage;
LABEL_11:
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
}

uint64_t sub_1000C3528(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t Priority;
  uint64_t v4;
  unint64_t v5;

  v2[14] = a1;
  v2[15] = v1;
  Priority = type metadata accessor for LocatePriority(0);
  v2[16] = Priority;
  v4 = *(_QWORD *)(Priority - 8);
  v2[17] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v5);
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000C35A4, v1, 0);
}

uint64_t sub_1000C35A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  os_log_type_t type;
  void (*v59)(uint64_t, uint64_t);
  NSObject *log;
  uint64_t v61;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v1, v3);
  v8 = swift_retain_n(v5, 2);
  log = Logger.logObject.getter(v8);
  type = static os_log_type_t.default.getter(log);
  v9 = os_log_type_enabled(log, type);
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = &OBJC_IVAR____TtC13findmylocated15LocationService_xpcSessionManager;
  v14 = *(_QWORD *)(v0 + 120);
  if (v9)
  {
    v57 = v7;
    v15 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(64, -1);
    v61 = v56;
    *(_DWORD *)v15 = 136315394;
    v16 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v17, v18, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    v59 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v59(v10, v11);
    *(_WORD *)(v15 + 12) = 2080;
    v20 = (uint64_t *)(v14 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
    swift_beginAccess(v14 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v0 + 64, 0, 0);
    v21 = *v20;
    sub_100018A7C(&qword_1002625C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v22 = swift_bridgeObjectRetain(v21);
    v23 = Dictionary.description.getter(v22);
    v25 = v24;
    v26 = v21;
    v13 = &OBJC_IVAR____TtC13findmylocated15LocationService_xpcSessionManager;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v23, v25, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v15 + 14, v15 + 22);
    swift_release_n(v14, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, log, type, "clearResubscription %s: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v27 = v15;
    v7 = v57;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v59(v10, v11);

    swift_release_n(v14, 2);
  }
  v28 = (_QWORD *)(*(_QWORD *)(v0 + 120) + v13[5]);
  swift_beginAccess(v28, v0 + 16, 0, 0);
  v29 = *v28;
  if (!*(_QWORD *)(*v28 + 16))
    goto LABEL_11;
  v30 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(*v28);
  v31 = sub_10001BE14(v30);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease(v29);
LABEL_11:
    v42 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128));
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 144);
    v47 = *(_QWORD *)(v0 + 128);
    if (v45)
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      *(_DWORD *)v48 = 136315138;
      v61 = v49;
      v50 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v47, v50);
      v53 = v52;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(v51, v52, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v53);
      v59(v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "clearResubscription: no tracker for %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      v59(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    }

    goto LABEL_15;
  }
  v33 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 24 * v31);
  v34 = *v33;
  v35 = v33[1];
  v36 = v33[2];
  swift_retain(v35);
  swift_bridgeObjectRetain_n(v34, 2);
  swift_bridgeObjectRelease(v29);
  result = swift_release(v35);
  if (!__OFADD__(v36, 1))
  {
    v38 = *(_QWORD *)(v0 + 152);
    v39 = *(_QWORD *)(v0 + 128);
    v7(v38, *(_QWORD *)(v0 + 112), v39);
    swift_beginAccess(v28, v0 + 40, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v28);
    v61 = *v28;
    *v28 = 0x8000000000000000;
    sub_10001BC94(v34, 0, v36 + 1, v38, isUniquelyReferenced_nonNull_native);
    v41 = *v28;
    *v28 = v61;
    swift_bridgeObjectRelease(v41);
    v59(v38, v39);
    swift_endAccess(v0 + 40);
    swift_bridgeObjectRelease(v34);
LABEL_15:
    v54 = *(_QWORD *)(v0 + 152);
    v55 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

void sub_1000C3B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Priority;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33[3];
  uint64_t v34;
  _BYTE v35[24];

  Priority = type metadata accessor for LocatePriority(0);
  v6 = *(_QWORD *)(Priority - 8);
  v7 = __chkstk_darwin(Priority);
  v9 = (char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33[-1] - v10;
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v2 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v35, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(*v12 + 16))
  {
    swift_bridgeObjectRetain(*v12);
    v14 = sub_10001BE14(a2);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 24 * v14);
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      swift_retain(v18);
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRelease(v13);
      swift_release(v18);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a2, Priority);
      swift_beginAccess(v12, v33, 33, 0);
      swift_retain_n(a1, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
      v34 = *v12;
      *v12 = 0x8000000000000000;
      sub_10001BC94(v17, a1, v19, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      v21 = *v12;
      *v12 = v34;
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, Priority);
      swift_endAccess(v33);
      swift_release(a1);
      swift_bridgeObjectRelease(v17);
      return;
    }
    swift_bridgeObjectRelease(v13);
  }
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v22 = type metadata accessor for Logger(0);
  sub_100037A9C(v22, (uint64_t)qword_10027ABA8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, Priority);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v33[0] = v27;
    *(_DWORD *)v26 = 136446210;
    v28 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v28);
    v31 = v30;
    v34 = sub_10002BA84(v29, v30, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, Priority);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "addSubscription: missing tracker for %{public}s!", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, Priority);
  }

}

uint64_t sub_1000C3EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t Priority;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  Priority = type metadata accessor for LocatePriority(0);
  v3[18] = Priority;
  v5 = *(_QWORD *)(Priority - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[22] = v7;
  v3[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C3F38, v2, 0);
}

uint64_t sub_1000C3F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  os_log_t log;
  os_log_type_t type;
  uint8_t *buf;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;

  v1 = v0 + 16;
  v2 = v0 + 112;
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ABA8);
  v5 = swift_retain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 136);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v72 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = (uint64_t *)(v8 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
    swift_beginAccess(v8 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, v0 + 40, 0, 0);
    v12 = *v11;
    sub_100018A7C(&qword_1002625C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v13 = swift_bridgeObjectRetain(v12);
    v14 = Dictionary.description.getter(v13);
    v16 = v15;
    v17 = v12;
    v1 = v0 + 16;
    swift_bridgeObjectRelease(v17);
    v18 = v14;
    v2 = v0 + 112;
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v18, v16, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v9 + 4, v9 + 12);
    swift_release_n(v8, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "shouldResubscribe: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 136);

    swift_release_n(v19, 2);
  }
  v20 = (uint64_t *)(*(_QWORD *)(v0 + 136) + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v20, v1, 0, 0);
  v21 = *v20;
  if (!*(_QWORD *)(v21 + 16))
    goto LABEL_13;
  v22 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(v21);
  v23 = sub_10001BE14(v22);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
LABEL_13:
    v39 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 144));
    v40 = swift_bridgeObjectRetain_n(v39, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v45 = *(_QWORD *)(v0 + 152);
    v44 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 144);
    v47 = *(_QWORD *)(v0 + 120);
    if (v43)
    {
      v71 = v42;
      v48 = swift_slowAlloc(32, -1);
      buf = (uint8_t *)swift_slowAlloc(64, -1);
      v72 = (uint64_t)buf;
      *(_DWORD *)v48 = 136315651;
      v49 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v46, v49);
      v52 = v51;
      *(_QWORD *)(v0 + 104) = sub_10002BA84(v50, v51, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v2, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v52);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      *(_WORD *)(v48 + 12) = 2160;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v48 + 14, v48 + 22);
      *(_WORD *)(v48 + 22) = 2081;
      type metadata accessor for Handle(0);
      v53 = swift_bridgeObjectRetain(v47);
      v54 = Array.description.getter(v53);
      v56 = v55;
      swift_bridgeObjectRelease(v47);
      *(_QWORD *)(v0 + 72) = sub_10002BA84(v54, v56, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v48 + 24, v48 + 32);
      swift_bridgeObjectRelease_n(v47, 2);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v41, v71, "Missing tracker for %s. Not scheduling resubscription for %{private,mask.hash}s", (uint8_t *)v48, 0x20u);
      swift_arrayDestroy(buf, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(buf, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      goto LABEL_17;
    }
    (*(void (**)(_QWORD, _QWORD))(v45 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));

    v57 = v47;
LABEL_16:
    swift_bridgeObjectRelease_n(v57, 2);
    goto LABEL_17;
  }
  v25 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 24 * v23);
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  swift_retain(v27);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v21);
  if (v28 >= sub_1000CE56C())
  {
    swift_retain(*(_QWORD *)(v0 + 136));
    swift_bridgeObjectRetain(v26);
    v61 = swift_retain(v27);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = *(_QWORD *)(v0 + 136);
    if (v64)
    {
      v66 = swift_slowAlloc(22, -1);
      *(_DWORD *)v66 = 134218240;
      *(_QWORD *)(v0 + 80) = sub_1000CE56C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v66 + 4, v66 + 12);
      swift_release(v65);
      *(_WORD *)(v66 + 12) = 2048;
      *(_QWORD *)(v0 + 88) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v66 + 14, v66 + 22);
      swift_release(v27);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Exceeded max number of resubscriptions allowed! Limit: %ld Current: %ld.", (uint8_t *)v66, 0x16u);
      swift_slowDealloc(v66, -1, -1);
      swift_release(v27);
      swift_bridgeObjectRelease(v26);

      goto LABEL_17;
    }

    swift_release(v65);
    swift_release_n(v27, 2);
    v57 = v26;
    goto LABEL_16;
  }
  if (!v27)
  {
    swift_bridgeObjectRelease(v26);
    v58 = 1;
    goto LABEL_18;
  }
  v29 = swift_retain_n(v27, 3);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = *(_QWORD *)(v0 + 184);
    log = *(os_log_t *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 168);
    type = v31;
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = swift_slowAlloc(32, -1);
    v72 = v70;
    *(_DWORD *)v34 = 136446210;
    WorkItemQueue.WorkItem.id.getter();
    v35 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
    v38 = v37;
    ((void (*)(uint64_t, uint64_t))log[1].isa)(v32, v33);
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v36, v38, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v34 + 4, v34 + 12);
    swift_release_n(v27, 2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v30, type, "Found existing task %{public}s. Not scheduling resubscription.", v34, 0xCu);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v34, -1, -1);
    swift_bridgeObjectRelease(v26);
    swift_release_n(v27, 2);

  }
  else
  {

    swift_bridgeObjectRelease(v26);
    swift_release_n(v27, 4);
  }
LABEL_17:
  v58 = 0;
LABEL_18:
  v59 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v58);
}

uint64_t sub_1000C4768(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Friend(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Handle(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[10] = v7;
  *v7 = v2;
  v7[1] = sub_1000C4804;
  return daemon.getter();
}

uint64_t sub_1000C4804(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *v1;
  *(_QWORD *)(*v1 + 88) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 96) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000C48F4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000C48F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  v4[13] = a1;
  v4[14] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[3];
    v7 = sub_1000C4D34;
  }
  else
  {
    swift_release(v4[11]);
    v7 = sub_1000C4970;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000C4970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 120) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 128) = v7;
  *v7 = v0;
  v7[1] = sub_1000C4A40;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000C4A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000C4AA8, v4, 0);
}

uint64_t sub_1000C4AA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char *, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0[17];
  v2 = v0[2];
  swift_bridgeObjectRetain(v2);
  v3 = sub_1000CAFA0(v1, v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  v4 = *((_QWORD *)v3 + 2);
  if (v4)
  {
    v5 = v0[8];
    v6 = v0[5];
    v22 = _swiftEmptyArrayStorage;
    sub_100018EBC(0, v4, 0);
    v7 = &v3[(*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)];
    v20 = v3;
    v21 = *(_QWORD *)(v6 + 72);
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 16);
    v10 = _swiftEmptyArrayStorage;
    do
    {
      v11 = v0[6];
      v12 = v0[4];
      v13 = v9(v11, v7, v12);
      Friend.handle.getter(v13);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_100018EBC(0, v10[2] + 1, 1);
        v10 = v22;
      }
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_100018EBC(v14 > 1, v15 + 1, 1);
        v10 = v22;
      }
      v16 = v0[9];
      v17 = v0[7];
      v10[2] = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v16, v17);
      v22 = v10;
      v7 += v21;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    v10 = _swiftEmptyArrayStorage;
  }
  v0[18] = v10;
  v18 = (_QWORD *)swift_task_alloc(dword_10026212C);
  v0[19] = v18;
  *v18 = v0;
  v18[1] = sub_1000C4C90;
  return sub_1000C73DC((uint64_t)v10);
}

uint64_t sub_1000C4C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000C4CF0, v2, 0);
}

uint64_t sub_1000C4CF0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C4D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 112);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocationService: missing DataManager to locationsUnavailable!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C4E38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v2[10] = v1;
  v4 = type metadata accessor for Handle(0);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v2[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[17] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v9);
  v2[19] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002625B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v10);
  v2[21] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_10026211C);
  v2[22] = v11;
  *v11 = v2;
  v11[1] = sub_1000C4F54;
  v11[2] = a1;
  v11[3] = v1;
  return swift_task_switch(sub_1000C5BB0, v1, 0);
}

uint64_t sub_1000C4F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C4FB4, v3, 0);
}

uint64_t sub_1000C4FB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[23];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[23];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Location(0);
    sub_100018A7C(&qword_1002605F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Dictionary.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[9] = sub_10002BA84(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "locationForHandles: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v14 = (_QWORD *)swift_task_alloc(dword_100262124);
  v0[24] = v14;
  *v14 = v0;
  v14[1] = sub_1000C51EC;
  return sub_100009814(v0[23]);
}

uint64_t sub_1000C51EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_1000C5244, v1, 0);
}

uint64_t sub_1000C5244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, unint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v94 = v0 + 40;
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 136);
  v112 = *(_QWORD *)(v0 + 96);
  v3 = (uint64_t *)(*(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks);
  swift_beginAccess(v3, v0 + 16, 0, 0);
  v93 = v3;
  v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  result = sub_1000A4D30(v1);
  v102 = result;
  v6 = 0;
  v91 = v4 + 64;
  v7 = -1 << *(_BYTE *)(v4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v10 = (unint64_t)(63 - v7) >> 6;
  v88 = v10 - 1;
  v95 = v4;
  v96 = v2;
  v92 = v10;
  v89 = v4 + 104;
  v90 = v10 - 5;
  while (1)
  {
    if (v9)
    {
      v98 = v6;
      v99 = (v9 - 1) & v9;
      v11 = __clz(__rbit64(v9)) | (v6 << 6);
      goto LABEL_9;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v19 >= v92)
    {
      v98 = v6;
    }
    else
    {
      v20 = *(_QWORD *)(v91 + 8 * v19);
      if (v20)
        goto LABEL_13;
      if ((uint64_t)(v6 + 2) >= v92)
      {
        v98 = v6 + 1;
      }
      else
      {
        v20 = *(_QWORD *)(v91 + 8 * (v6 + 2));
        if (v20)
        {
          v19 = v6 + 2;
          goto LABEL_13;
        }
        if ((uint64_t)(v6 + 3) >= v92)
        {
          v98 = v6 + 2;
        }
        else
        {
          v20 = *(_QWORD *)(v91 + 8 * (v6 + 3));
          if (v20)
          {
            v19 = v6 + 3;
LABEL_13:
            v98 = v19;
            v99 = (v20 - 1) & v20;
            v11 = __clz(__rbit64(v20)) + (v19 << 6);
LABEL_9:
            v12 = *(_QWORD *)(v0 + 160);
            (*(void (**)(uint64_t, unint64_t, _QWORD))(v2 + 16))(v12, *(_QWORD *)(v95 + 48) + *(_QWORD *)(v2 + 72) * v11, *(_QWORD *)(v0 + 128));
            v13 = (uint64_t *)(*(_QWORD *)(v95 + 56) + 24 * v11);
            v14 = sub_100037A5C(&qword_1002625B8);
            v15 = (uint64_t *)(v12 + *(int *)(v14 + 48));
            v16 = *v13;
            v17 = v13[1];
            v18 = v13[2];
            *v15 = *v13;
            v15[1] = v17;
            v15[2] = v18;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 0, 1, v14);
            swift_retain(v17);
            swift_bridgeObjectRetain(v18);
            swift_bridgeObjectRetain(v16);
            goto LABEL_16;
          }
          v19 = v6 + 4;
          if ((uint64_t)(v6 + 4) >= v92)
          {
            v98 = v6 + 3;
          }
          else
          {
            v20 = *(_QWORD *)(v91 + 8 * v19);
            if (v20)
              goto LABEL_13;
            while (v90 != v6)
            {
              v20 = *(_QWORD *)(v89 + 8 * v6++);
              if (v20)
              {
                v19 = v6 + 4;
                goto LABEL_13;
              }
            }
            v98 = v88;
          }
        }
      }
    }
    v21 = *(_QWORD *)(v0 + 160);
    v22 = sub_100037A5C(&qword_1002625B8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    v99 = 0;
LABEL_16:
    v23 = *(_QWORD *)(v0 + 168);
    sub_10000EF6C(*(_QWORD *)(v0 + 160), v23, &qword_1002625B0);
    v24 = sub_100037A5C(&qword_1002625B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24) == 1)
    {
      v80 = *(_QWORD *)(v0 + 184);
      v82 = *(_QWORD *)(v0 + 160);
      v81 = *(_QWORD *)(v0 + 168);
      v84 = *(_QWORD *)(v0 + 144);
      v83 = *(_QWORD *)(v0 + 152);
      v86 = *(_QWORD *)(v0 + 112);
      v85 = *(_QWORD *)(v0 + 120);
      v87 = *(_QWORD *)(v0 + 104);
      swift_release(v95);
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v25 = *(_QWORD *)(v0 + 88);
    v26 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(v24 + 48));
    v27 = *v26;
    v97 = v26[1];
    v100 = v26[2];
    (*(void (**)(_QWORD))(v2 + 32))(*(_QWORD *)(v0 + 152));
    v28 = *(_QWORD *)(v27 + 16);
    v29 = sub_100018A7C(&qword_1002605F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(v27);
    v108 = v29;
    v111 = Set.init(minimumCapacity:)(v28, v25, v29);
    v106 = *(_QWORD *)(v27 + 16);
    v101 = v27;
    if (v106)
    {
      v30 = 0;
      v104 = v27 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
      v31 = *(_QWORD *)(v112 + 72);
      v32 = *(void (**)(_QWORD, unint64_t, uint64_t))(v112 + 16);
      do
      {
        v38 = *(_QWORD *)(v0 + 88);
        v32(*(_QWORD *)(v0 + 120), v104 + v30 * v31, v38);
        v39 = *(_QWORD *)(v111 + 40);
        swift_bridgeObjectRetain(v111);
        v40 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v38, v108);
        v41 = -1 << *(_BYTE *)(v111 + 32);
        v42 = v40 & ~v41;
        v109 = v30;
        if (((*(_QWORD *)(v111 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
        {
          v43 = ~v41;
          while (1)
          {
            v44 = *(_QWORD *)(v0 + 112);
            v45 = *(_QWORD *)(v0 + 120);
            v46 = *(_QWORD *)(v0 + 88);
            v32(v44, *(_QWORD *)(v111 + 48) + v42 * v31, v46);
            v47 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
            LOBYTE(v45) = dispatch thunk of static Equatable.== infix(_:_:)(v44, v45, v46, v47);
            v37 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
            v37(v44, v46);
            if ((v45 & 1) != 0)
              break;
            v42 = (v42 + 1) & v43;
            if (((*(_QWORD *)(v111 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
              goto LABEL_19;
          }
          swift_bridgeObjectRelease(v111);
        }
        else
        {
LABEL_19:
          v34 = *(_QWORD *)(v0 + 112);
          v33 = *(_QWORD *)(v0 + 120);
          v35 = *(_QWORD *)(v0 + 88);
          swift_bridgeObjectRelease(v111);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v111);
          v32(v34, v33, v35);
          sub_100021AC4(v34, v42, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease(0x8000000000000000);
          v37 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
        }
        v37(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
        v30 = v109 + 1;
      }
      while (v109 + 1 != v106);
      v48 = v101;
    }
    else
    {
      v48 = v27;
    }
    swift_bridgeObjectRelease(v48);
    v49 = *(_QWORD *)(v0 + 88);
    v50 = *(_QWORD *)(v102 + 16);
    swift_bridgeObjectRetain(v102);
    v51 = Set.init(minimumCapacity:)(v50, v49, v108);
    v105 = *(_QWORD *)(v102 + 16);
    if (v105)
    {
      v52 = 0;
      v103 = v102 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
      v110 = *(_QWORD *)(v112 + 72);
      v53 = *(void (**)(_QWORD, unint64_t, uint64_t))(v112 + 16);
      do
      {
        v59 = *(_QWORD *)(v0 + 88);
        v53(*(_QWORD *)(v0 + 104), v103 + v52 * v110, v59);
        v60 = *(_QWORD *)(v51 + 40);
        swift_bridgeObjectRetain(v51);
        v61 = dispatch thunk of Hashable._rawHashValue(seed:)(v60, v59, v108);
        v62 = -1 << *(_BYTE *)(v51 + 32);
        v63 = v61 & ~v62;
        v107 = v52;
        if (((*(_QWORD *)(v51 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) != 0)
        {
          v64 = ~v62;
          while (1)
          {
            v66 = *(_QWORD *)(v0 + 104);
            v65 = *(_QWORD *)(v0 + 112);
            v67 = *(_QWORD *)(v0 + 88);
            v53(v65, *(_QWORD *)(v51 + 48) + v63 * v110, v67);
            v68 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
            LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v65, v66, v67, v68);
            v58 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
            v58(v65, v67);
            if ((v66 & 1) != 0)
              break;
            v63 = (v63 + 1) & v64;
            if (((*(_QWORD *)(v51 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) == 0)
              goto LABEL_31;
          }
          swift_bridgeObjectRelease(v51);
        }
        else
        {
LABEL_31:
          v55 = *(_QWORD *)(v0 + 104);
          v54 = *(_QWORD *)(v0 + 112);
          v56 = *(_QWORD *)(v0 + 88);
          swift_bridgeObjectRelease(v51);
          v57 = swift_isUniquelyReferenced_nonNull_native(v51);
          v53(v54, v55, v56);
          sub_100021AC4(v54, v63, v57);
          swift_bridgeObjectRelease(0x8000000000000000);
          v58 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
        }
        v58(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
        v52 = v107 + 1;
      }
      while (v107 + 1 != v105);
      v69 = v102;
    }
    else
    {
      v69 = v102;
    }
    swift_bridgeObjectRelease(v69);
    v2 = v96;
    sub_1000A6C2C((_QWORD *)v51, v111);
    v71 = v70;
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v111);
    if ((v71 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(v96 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
      swift_release(v97);
      swift_bridgeObjectRelease(v101);
      result = swift_bridgeObjectRelease(v100);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 184);
      v74 = *(_QWORD *)(v0 + 144);
      v73 = *(_QWORD *)(v0 + 152);
      v75 = *(_QWORD *)(v0 + 128);
      swift_retain(v97);
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRetain(v101);
      sub_1000A6FEC(v72);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v74, v73, v75);
      swift_beginAccess(v93, v94, 33, 0);
      swift_retain(v97);
      swift_bridgeObjectRetain(v100);
      v76 = *v93;
      swift_bridgeObjectRetain(v101);
      v77 = swift_isUniquelyReferenced_nonNull_native(v76);
      v113 = *v93;
      *v93 = 0x8000000000000000;
      sub_100163E78(v101, v97, v100, v74, v77);
      v78 = *v93;
      *v93 = v113;
      v2 = v96;
      swift_bridgeObjectRelease(v78);
      v79 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      v79(v74, v75);
      swift_endAccess(v94);
      swift_bridgeObjectRelease(v100);
      swift_release(v97);
      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v101);
      swift_release(v97);
      swift_bridgeObjectRelease(v100);
      result = ((uint64_t (*)(uint64_t, uint64_t))v79)(v73, v75);
    }
    v6 = v98;
    v9 = v99;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C5B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000C5BB0, v1, 0);
}

uint64_t sub_1000C5BB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v4 = *(_QWORD *)(v0 + 16);
    else
      v4 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    v5 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(v1);
    if (v5)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 32) = v2;
    *v2 = v0;
    v2[1] = sub_1000C5C5C;
    return daemon.getter();
  }
  v6 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_1000C5C5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(*v1 + 40) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 48) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000C5D4C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000C5D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  *(_QWORD *)(*(_QWORD *)v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[3];
    v7 = sub_1000C5F80;
  }
  else
  {
    swift_release(v4[5]);
    v4[8] = a1;
    v7 = sub_1000C5DCC;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000C5DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 72) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 80) = v7;
  *v7 = v0;
  v7[1] = sub_1000C5E9C;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000C5E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000C5F04, v4, 0);
}

uint64_t sub_1000C5F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(char *, uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v1);
  v4 = sub_1000CC3F0((void (*)(char *, uint64_t))_swiftEmptyDictionarySingleton, v3, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_release(v2);
  return (*(uint64_t (**)(void (*)(char *, uint64_t)))(v0 + 8))(v4);
}

uint64_t sub_1000C5F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocationService: missing DataManager to mapSecureLocationToHandle!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 56);

  v7 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v6);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
}

void sub_1000C6084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v14;

  v4 = sub_100037A5C(&qword_100262680);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(void **)(a2 + OBJC_IVAR____TtC13findmylocated15LocationService_secureLocationsManager);
  v8 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100251E18, v10 + v6, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000CEEC0;
  v14 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6280;
  aBlock[3] = &unk_100251E30;
  v12 = _Block_copy(aBlock);
  swift_release(v14);
  objc_msgSend(v7, "latestLocationFromCacheForId:completion:", v8, v12);
  _Block_release(v12);

}

uint64_t sub_1000C61E0(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a2)
  {
    v9 = a2;
    swift_errorRetain(a2);
LABEL_3:
    v2 = sub_100037A5C(&qword_100262680);
    return CheckedContinuation.resume(throwing:)(&v9, v2);
  }
  if (!a1)
  {
    v6 = sub_1000CEF10();
    v7 = swift_allocError(&type metadata for LocationService.Error, v6, 0, 0);
    *v8 = 10;
    v9 = v7;
    goto LABEL_3;
  }
  v9 = (uint64_t)a1;
  v4 = a1;
  v5 = sub_100037A5C(&qword_100262680);
  return CheckedContinuation.resume(returning:)(&v9, v5);
}

void sub_1000C6280(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1000C62F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10000C568, 0, 0);
}

uint64_t sub_1000C6310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10003BF80, 0, 0);
}

uint64_t sub_1000C6378(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1000C6394, 0, 0);
}

uint64_t sub_1000C6394()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000CFCC8;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C63FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;

  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v7);
  v6[15] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000C6470, 0, 0);
}

void sub_1000C6470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;

  v1 = *(_QWORD *)(v0 + 80);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v27 = *(_QWORD *)(v0 + 80);
    else
      v27 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
    v2 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (v2)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    v28 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v28);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  if (!v2)
    goto LABEL_20;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v30 = v1 & 0xC000000000000001;
    v29 = *(_QWORD *)(v0 + 80) + 32;
    v31 = v2;
    while (1)
    {
      if (v30)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v0 + 80), v3);
      }
      else
      {
        v7 = *(_QWORD *)(v29 + 8 * v4);
        swift_retain(v7);
      }
      v9 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 88);
      v11 = type metadata accessor for TaskPriority(0);
      v12 = *(_QWORD *)(v11 - 8);
      v32 = *(_OWORD *)(v0 + 96);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
      v13 = swift_allocObject(&unk_100251C18, 64, 7);
      *(_QWORD *)(v13 + 16) = 0;
      v14 = (uint64_t *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = v7;
      *(_QWORD *)(v13 + 40) = v10;
      *(_OWORD *)(v13 + 48) = v32;
      sub_10000E37C(v8, v9, (uint64_t *)&unk_100265180);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
      swift_retain(v7);
      swift_bridgeObjectRetain(v10);
      swift_retain(v32);
      v16 = *(_QWORD *)(v0 + 112);
      if ((_DWORD)v9 == 1)
      {
        sub_1000087A0(*(_QWORD *)(v0 + 112), (uint64_t *)&unk_100265180);
        v17 = 0;
        v18 = *v14;
        if (!*v14)
          goto LABEL_13;
      }
      else
      {
        v24 = TaskPriority.rawValue.getter(v15);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
        v17 = v24;
        v18 = *v14;
        if (!*v14)
        {
LABEL_13:
          v21 = 0;
          v23 = 0;
          goto LABEL_14;
        }
      }
      v19 = *(_QWORD *)(v13 + 24);
      ObjectType = swift_getObjectType(v18);
      swift_unknownObjectRetain(v18);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v19);
      v23 = v22;
      swift_unknownObjectRelease(v18);
LABEL_14:
      v25 = **(_QWORD **)(v0 + 72);
      v26 = v23 | v21;
      if (v23 | v21)
      {
        v26 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v21;
        *(_QWORD *)(v0 + 40) = v23;
      }
      ++v4;
      v5 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v26;
      *(_QWORD *)(v0 + 64) = v25;
      v6 = swift_task_create(v17 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_100262580, v13);
      swift_release(v7);
      swift_release(v6);
      sub_1000087A0(v5, (uint64_t *)&unk_100265180);
      if (v31 == v4)
        goto LABEL_20;
    }
  }
  __break(1u);
}

uint64_t sub_1000C674C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  v7[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[10] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[11] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[12] = swift_task_alloc(v12);
  v7[13] = swift_task_alloc(v12);
  v7[14] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000C67F4, 0, 0);
}

uint64_t sub_1000C67F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  static Task<>.checkCancellation()(a1);
  v4 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v1 + 120) = v2;
  *v2 = v1;
  v2[1] = sub_1000C68C0;
  return v4(*(_QWORD *)(v1 + 112));
}

uint64_t sub_1000C68C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_1000C6914, 0, 0);
}

uint64_t sub_1000C6914()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v0[13];
  v1 = v0[14];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[9];
  v6 = v0[4];
  v17 = v0[5];
  v18 = v0[7];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[16] = v7;
  v7(v2, v1, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_100251C40, v12 + 8, v8 | 7);
  v0[17] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v9, v2, v5);
  *(_QWORD *)(v13 + v10) = v6;
  *(_QWORD *)(v13 + v11) = v17;
  *(_QWORD *)(v13 + v12) = v18;
  v14 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  swift_bridgeObjectRetain(v17);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v0[18] = v15;
  *v15 = v0;
  v15[1] = sub_1000C6A4C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000C6A4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C6AB8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 136));
    v4 = sub_1000CFCAC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C6AB8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  swift_release(*(_QWORD *)(v0 + 136));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
  v2(v4, v3, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  if (v10)
  {
    v15 = swift_slowAlloc(22, -1);
    v36 = (uint64_t *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v38 = v37;
    *(_DWORD *)v15 = 136446466;
    v16 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v17, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v12, v14);
    *(_WORD *)(v15 + 12) = 2114;
    swift_errorRetain(v11);
    v21 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *v36 = v21;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "sendToClients %{public}s error: %{public}@", (uint8_t *)v15, 0x16u);
    v22 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v36, 1, v22);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v27 = *(_QWORD *)(v0 + 48);
  v28 = *(_QWORD *)(v0 + 32);
  v29 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1, v29);
  v30 = (_QWORD *)swift_allocObject(&unk_100251C68, 48, 7);
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v27;
  v30[5] = v28;
  swift_retain(v28);
  swift_retain(v27);
  v31 = sub_10005582C(v26, (uint64_t)&unk_1002625A0, (uint64_t)v30);
  swift_release(v31);
  swift_errorRelease(v23);
  v20(v24, v25);
  v32 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000C6EA0, 0, 0);
}

uint64_t sub_1000C6EA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[4];
  v2 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  v0[11] = sub_100037A9C(v5, (uint64_t)qword_10027ABA8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[10];
  v12 = v0[7];
  v13 = v0[8];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_DWORD *)v14 = 136446210;
    v15 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v0[3] = sub_10002BA84(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending location update to client %{public}s", v14, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
  }

  v0[13] = v19;
  return swift_task_switch(sub_1000C70B4, v0[5], 0);
}

uint64_t sub_1000C70B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_1000C7144;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1000C7144()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1000CFCE0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    v5 = sub_1000C71B8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C71B8()
{
  return swift_task_switch(sub_1000C71CC, 0, 0);
}

uint64_t sub_1000C71CC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v14(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent location update to client %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }

  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1002620D4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10003BF7C;
  return sub_1000B66A0(a5);
}

uint64_t sub_1000C73DC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C743C, v1, 0);
}

uint64_t sub_1000C743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000022, 0x80000001001FE0A0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s count:%ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v7);
  }
  v11 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 32);
  v12 = *(_QWORD *)(v0 + 40);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v14 = (_QWORD *)swift_allocObject(&unk_100251B00, 40, 7);
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v11;
  swift_bridgeObjectRetain(v13);
  v15 = swift_retain(v12);
  UUID.init()(v15);
  v16 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v10, &unk_1002624C0, v14, &unk_1002624C8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v16);
  swift_release(v16);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C76A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000C76C0, 0, 0);
}

uint64_t sub_1000C76C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject(&unk_100251B28, 40, 7);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v6 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v6;
  v3 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v6);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_1000C7780;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000C7780()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006D3D0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 40));
    v4 = sub_10003BF80;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C77EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  v6 = type metadata accessor for Handle(0);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v4[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10026207C);
  v4[12] = v8;
  *v8 = v4;
  v8[1] = sub_1000C787C;
  v8[4] = a2;
  return swift_task_switch(sub_10000FFD8, a2, 0);
}

uint64_t sub_1000C787C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(*v1 + 104) = a1;
  swift_task_dealloc(v4);
  v3[2] = a1;
  v3 += 2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v3[12] = v6;
  v7 = sub_100037A5C(&qword_1002624E8);
  v8 = type metadata accessor for UUID(0);
  v3[13] = v8;
  v9 = sub_10001013C(&qword_1002624F0, &qword_1002624E8, (uint64_t)&protocol conformance descriptor for [A]);
  *v6 = v5;
  v6[1] = sub_1000C7950;
  return Sequence.asyncMap<A>(_:)(&unk_1002624E0, 0, v7, v8, v9);
}

uint64_t sub_1000C7950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C79AC, 0, 0);
}

uint64_t sub_1000C79AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, uint64_t, _QWORD);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD, uint64_t, _QWORD);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v51 = v7;
    v52 = v0 + 40;
    v8 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc(32, -1);
    v55 = swift_slowAlloc(32, -1);
    v57 = v55;
    *(_DWORD *)v9 = 134218498;
    if (v8 >> 62)
    {
      v49 = *(_QWORD *)(v0 + 104);
      if (v49 < 0)
        v50 = *(_QWORD *)(v0 + 104);
      else
        v50 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
      v10 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2082;
    v14 = swift_bridgeObjectRetain(v11);
    v15 = Array.description.getter(v14);
    v17 = v16;
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v15, v17, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v52, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v9 + 22) = 2048;
    v18 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 40) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v0 + 48, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v51, "Send unavailable handles to clients[%ld]: %{public}s handles count:%ld", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 56);

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }
  v22 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v0 + 80);
    v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    v26 = *(_QWORD *)(v24 + 72);
    v56 = v24;
    v27 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v24 + 16);
    swift_bridgeObjectRetain(v22);
    v53 = v26;
    v54 = v0;
    do
    {
      v28 = v27(*(_QWORD *)(v0 + 88), v25, *(_QWORD *)(v0 + 72));
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      v31 = os_log_type_enabled(v29, v30);
      v32 = *(_QWORD *)(v0 + 88);
      v33 = *(_QWORD *)(v0 + 72);
      if (v31)
      {
        v34 = swift_slowAlloc(22, -1);
        v35 = v27;
        v36 = swift_slowAlloc(32, -1);
        v57 = v36;
        *(_DWORD *)v34 = 141558275;
        *(_QWORD *)(v34 + 4) = 1752392040;
        *(_WORD *)(v34 + 12) = 2081;
        v37 = Handle.identifier.getter(v36);
        v39 = v38;
        *(_QWORD *)(v34 + 14) = sub_10002BA84(v37, v38, &v57);
        swift_bridgeObjectRelease(v39);
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v32, v33);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "LocationService: send unavailable location update for handle: %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        v40 = v36;
        v27 = v35;
        swift_slowDealloc(v40, -1, -1);
        v41 = v34;
        v26 = v53;
        v0 = v54;
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v56 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
      }

      v25 += v26;
      --v23;
    }
    while (v23);
    v42 = *(_QWORD *)(v0 + 104);
    v43 = *(_QWORD *)(v0 + 56);
    v44 = *(_QWORD *)(v0 + 64);
    v45 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(v43);
    v46 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 136) = v46;
    v46[2] = v42;
    v46[3] = v43;
    v46[4] = v45;
    v46[5] = v44;
    v47 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v0 + 144) = v47;
    *v47 = v0;
    v47[1] = sub_1000C7EBC;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C7EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000C7F24, 0, 0);
}

uint64_t sub_1000C7F24()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7F58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1000C7F74, 0, 0);
}

uint64_t sub_1000C7F74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000C7FDC;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C7FDC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000C8028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;

  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v7);
  v6[15] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000C809C, 0, 0);
}

void sub_1000C809C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;

  v1 = *(_QWORD *)(v0 + 80);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v27 = *(_QWORD *)(v0 + 80);
    else
      v27 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
    v2 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (v2)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    v28 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v28);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  if (!v2)
    goto LABEL_20;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v30 = v1 & 0xC000000000000001;
    v29 = *(_QWORD *)(v0 + 80) + 32;
    v31 = v2;
    while (1)
    {
      if (v30)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v0 + 80), v3);
      }
      else
      {
        v7 = *(_QWORD *)(v29 + 8 * v4);
        swift_retain(v7);
      }
      v9 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 88);
      v11 = type metadata accessor for TaskPriority(0);
      v12 = *(_QWORD *)(v11 - 8);
      v32 = *(_OWORD *)(v0 + 96);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
      v13 = swift_allocObject(&unk_100251B50, 64, 7);
      *(_QWORD *)(v13 + 16) = 0;
      v14 = (uint64_t *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = v7;
      *(_QWORD *)(v13 + 40) = v10;
      *(_OWORD *)(v13 + 48) = v32;
      sub_10000E37C(v8, v9, (uint64_t *)&unk_100265180);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
      swift_retain(v7);
      swift_bridgeObjectRetain(v10);
      swift_retain(v32);
      v16 = *(_QWORD *)(v0 + 112);
      if ((_DWORD)v9 == 1)
      {
        sub_1000087A0(*(_QWORD *)(v0 + 112), (uint64_t *)&unk_100265180);
        v17 = 0;
        v18 = *v14;
        if (!*v14)
          goto LABEL_13;
      }
      else
      {
        v24 = TaskPriority.rawValue.getter(v15);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
        v17 = v24;
        v18 = *v14;
        if (!*v14)
        {
LABEL_13:
          v21 = 0;
          v23 = 0;
          goto LABEL_14;
        }
      }
      v19 = *(_QWORD *)(v13 + 24);
      ObjectType = swift_getObjectType(v18);
      swift_unknownObjectRetain(v18);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v19);
      v23 = v22;
      swift_unknownObjectRelease(v18);
LABEL_14:
      v25 = **(_QWORD **)(v0 + 72);
      v26 = v23 | v21;
      if (v23 | v21)
      {
        v26 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v21;
        *(_QWORD *)(v0 + 40) = v23;
      }
      ++v4;
      v5 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v26;
      *(_QWORD *)(v0 + 64) = v25;
      v6 = swift_task_create(v17 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_100262510, v13);
      swift_release(v7);
      swift_release(v6);
      sub_1000087A0(v5, (uint64_t *)&unk_100265180);
      if (v31 == v4)
        goto LABEL_20;
    }
  }
  __break(1u);
}

uint64_t sub_1000C8378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  v7[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[10] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[11] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[12] = swift_task_alloc(v12);
  v7[13] = swift_task_alloc(v12);
  v7[14] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000C8420, 0, 0);
}

uint64_t sub_1000C8420(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  static Task<>.checkCancellation()(a1);
  v4 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v1 + 120) = v2;
  *v2 = v1;
  v2[1] = sub_1000C84EC;
  return v4(*(_QWORD *)(v1 + 112));
}

uint64_t sub_1000C84EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_1000C8540, 0, 0);
}

uint64_t sub_1000C8540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v0[13];
  v1 = v0[14];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[9];
  v6 = v0[4];
  v17 = v0[5];
  v18 = v0[7];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[16] = v7;
  v7(v2, v1, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_100251B78, v12 + 8, v8 | 7);
  v0[17] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v9, v2, v5);
  *(_QWORD *)(v13 + v10) = v6;
  *(_QWORD *)(v13 + v11) = v17;
  *(_QWORD *)(v13 + v12) = v18;
  v14 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  swift_bridgeObjectRetain(v17);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v0[18] = v15;
  *v15 = v0;
  v15[1] = sub_1000C8678;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000C8678()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C8750;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 136));
    v4 = sub_1000C86E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C86E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8750()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  swift_release(*(_QWORD *)(v0 + 136));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
  v2(v4, v3, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  if (v10)
  {
    v15 = swift_slowAlloc(22, -1);
    v36 = (uint64_t *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v38 = v37;
    *(_DWORD *)v15 = 136446466;
    v16 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v17, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v12, v14);
    *(_WORD *)(v15 + 12) = 2114;
    swift_errorRetain(v11);
    v21 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *v36 = v21;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "sendToClients unavailableHandles %{public}s error: %{public}@", (uint8_t *)v15, 0x16u);
    v22 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v36, 1, v22);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v27 = *(_QWORD *)(v0 + 48);
  v28 = *(_QWORD *)(v0 + 32);
  v29 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1, v29);
  v30 = (_QWORD *)swift_allocObject(&unk_100251BA0, 48, 7);
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v27;
  v30[5] = v28;
  swift_retain(v28);
  swift_retain(v27);
  v31 = sub_10005582C(v26, (uint64_t)&unk_100262530, (uint64_t)v30);
  swift_release(v31);
  swift_errorRelease(v23);
  v20(v24, v25);
  v32 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000C8B38, 0, 0);
}

uint64_t sub_1000C8B38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[4];
  v2 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  v0[11] = sub_100037A9C(v5, (uint64_t)qword_10027ABA8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[10];
  v12 = v0[7];
  v13 = v0[8];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_DWORD *)v14 = 136446210;
    v15 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v0[3] = sub_10002BA84(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending unavailableHandles to client %{public}s", v14, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
  }

  v0[13] = v19;
  return swift_task_switch(sub_1000C8D4C, v0[5], 0);
}

uint64_t sub_1000C8D4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_1000C8DDC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1000C8DDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1000C9020;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    v5 = sub_1000C8E50;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C8E50()
{
  return swift_task_switch(sub_1000C8E64, 0, 0);
}

uint64_t sub_1000C8E64()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v14(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent unavailableHandles to client %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }

  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9068()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_serviceDescription, &qword_1002626D0);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_trampoline));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_xpcSessionManager));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_workItemQueue));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_locationUpdateQueue));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationWorkItemQueue));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_dataManagerStateStream, &qword_1002626C0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000C916C()
{
  uint64_t v0;

  sub_1000C9068();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000C9184()
{
  return type metadata accessor for LocationService(0);
}

void sub_1000C918C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[16];

  v6[1] = &unk_1001F4D70;
  sub_1000C926C(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1001F4D88;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[7] = &unk_1001F4DA0;
    v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[13] = &unk_1001F4D88;
    sub_1000C92C0(319);
    if (v5 <= 0x3F)
    {
      v6[14] = *(_QWORD *)(v4 - 8) + 64;
      v6[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 16, v6, a1 + 80);
    }
  }
}

void sub_1000C926C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100262130)
  {
    v2 = type metadata accessor for XPCServiceDescription(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100262130);
  }
}

void sub_1000C92C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100262138)
  {
    v2 = sub_10003C1FC((uint64_t *)&unk_100262140);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100262138);
  }
}

uint64_t destroy for LatestLocationTask(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s13findmylocated18LatestLocationTaskVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for LatestLocationTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for LatestLocationTask(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for LatestLocationTask()
{
  return &type metadata for LatestLocationTask;
}

uint64_t destroy for LocationService.SubscriptionTracker(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s13findmylocated15LocationServiceC19SubscriptionTrackerVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for LocationService.SubscriptionTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for LocationService.SubscriptionTracker(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for LocationService.SubscriptionTracker()
{
  return &type metadata for LocationService.SubscriptionTracker;
}

uint64_t sub_1000C9590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocationService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1000C95F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for LocationService(0);
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_1000C9674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocationService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1000C96D8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100262084);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000A8C14();
}

uint64_t sub_1000C971C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026208C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_1000A94DC();
}

uint64_t sub_1000C9760()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for LocationService(0);
  v1 = sub_100018A7C(&qword_100261868, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E44);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_1000C97B4()
{
  return sub_100018A7C(&qword_100261E08, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
}

uint64_t sub_1000C97E4()
{
  return sub_100018A7C(&qword_100260638, 255, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
}

uint64_t sub_1000C9814(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100262420, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocationServiceClient, (uint64_t)&unk_1001F4EFC);
}

uint64_t sub_1000C9840(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C((unint64_t *)&qword_100262428, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocationServiceClient, (uint64_t)&unk_1001F4F24);
}

uint64_t sub_1000C986C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a3;
  v30 = a1;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a6, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 64) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject(&unk_100251E90, v20 + 8, v18 | 7);
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  v22 = v28;
  v23 = v29;
  *((_QWORD *)v21 + 4) = a2;
  *((_QWORD *)v21 + 5) = v23;
  *((_QWORD *)v21 + 6) = a4;
  *((_QWORD *)v21 + 7) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[v19], v13, v22);
  v24 = v30;
  *(_QWORD *)&v21[v20] = v30;
  swift_retain(a4);
  swift_bridgeObjectRetain(a5);
  swift_retain(v24);
  swift_retain(a2);
  swift_bridgeObjectRetain(v23);
  v25 = sub_10005582C((uint64_t)v16, (uint64_t)&unk_1002626A8, (uint64_t)v21);
  return swift_release(v25);
}

uint64_t sub_1000C9A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[8] = a8;
  v8[9] = v13;
  v8[6] = a5;
  v8[7] = a7;
  v8[5] = a4;
  v10 = type metadata accessor for UUID(0);
  v8[10] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[11] = v11;
  v8[12] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C9A74, a4, 0);
}

uint64_t sub_1000C9A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 64), v4);
  v8 = (_QWORD *)(v6 + OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks);
  swift_beginAccess(v6 + OBJC_IVAR____TtC13findmylocated15LocationService_inFlightLatestLocationTasks, v0 + 16, 33, 0);
  swift_bridgeObjectRetain_n(v7, 2);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_retain_n(v3, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v12 = *v8;
  *v8 = 0x8000000000000000;
  sub_100163E78(v7, v3, v5, v1, isUniquelyReferenced_nonNull_native);
  v10 = *v8;
  *v8 = v12;
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_endAccess(v0 + 16);
  swift_bridgeObjectRelease(v7);
  swift_release(v3);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (*sub_1000C9BA0(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t Priority;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  Priority = type metadata accessor for LocatePriority(0);
  v5[8] = Priority;
  v7 = *(_QWORD *)(Priority - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, Priority);
  v5[11] = sub_1000C9E3C(v5);
  v5[12] = sub_1000C9CCC(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000C9C60;
}

void sub_1000C9C60(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_1000C9CCC(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);
  uint64_t Priority;

  v4 = v3;
  v8 = (char *)malloc(0x38uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 3) = a2;
  *((_QWORD *)v8 + 4) = v4;
  v9 = *v4;
  v11 = sub_10001BE14(a2);
  v8[48] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 5) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*v4 + 56) + 24 * v11;
        v18 = *(_QWORD *)v17;
        v19 = *(_OWORD *)(v17 + 8);
LABEL_12:
        *(_QWORD *)v8 = v18;
        *(_OWORD *)(v8 + 8) = v19;
        return sub_1000C9DFC;
      }
LABEL_11:
      v18 = 0;
      v19 = 0uLL;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1000F66C4();
      goto LABEL_7;
    }
    sub_1000075A4(v14, a3 & 1);
    v20 = sub_10001BE14(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      *((_QWORD *)v8 + 5) = v20;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  Priority = type metadata accessor for LocatePriority(0);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(Priority);
  __break(1u);
  return result;
}

void sub_1000C9DFC(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1000C9E68(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[3]);
  sub_1000CECAC(*v1, v1[1]);
  free(v1);
}

uint64_t (*sub_1000C9E3C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000C9E5C;
}

uint64_t sub_1000C9E5C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_1000C9E68(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t Priority;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v21;

  Priority = type metadata accessor for LocatePriority(0);
  __chkstk_darwin(Priority);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  if (v15)
  {
    v18 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v19 = (uint64_t *)(v18[7] + 24 * a4);
      *v19 = v15;
      v19[1] = v16;
      v19[2] = v17;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a5);
      sub_10003C288(a4, (uint64_t)v14, v15, v16, v17, v18);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v12 + 72) * a4, 1, v11);
    sub_1000F4AE0(a4, *a3);
  }
  return sub_1000CECD8(v15, v16);
}

uint64_t sub_1000C9F7C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1000C9F90(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A5EA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_100251A10, (uint64_t)&unk_100262450);
}

uint64_t sub_1000C9FB8()
{
  return sub_10001A0C0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_1000C9FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10026244C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch(sub_1000A5FAC, 0, 0);
}

uint64_t sub_1000CA03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026245C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v4;
  return swift_task_switch(sub_1000A6364, 0, 0);
}

uint64_t sub_1000CA0A4(uint64_t a1)
{
  return sub_1000A65CC(a1);
}

unint64_t sub_1000CA0BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100262470;
  if (!qword_100262470)
  {
    v1 = sub_10003C1FC(&qword_100262468);
    sub_100018A7C(&qword_100262478, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100262470);
  }
  return result;
}

uint64_t sub_1000CA13C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A6788(a1, v1, 0xD00000000000001ALL, 0x80000001001FE040);
}

uint64_t sub_1000CA16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CA17C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CA184(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A5EA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_100251A88, (uint64_t)&unk_100262490);
}

uint64_t sub_1000CA1AC()
{
  return sub_10001A0C0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_1000CA1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10026248C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch(sub_1000A57D8, 0, 0);
}

uint64_t sub_1000CA230()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000CA264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026249C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v4;
  return swift_task_switch(sub_1000A5B90, 0, 0);
}

unint64_t sub_1000CA2CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002624A8;
  if (!qword_1002624A8)
  {
    v1 = sub_10003C1FC(&qword_100261858);
    sub_100018A7C(&qword_100262478, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    sub_100018A7C(&qword_1002624B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002624A8);
  }
  return result;
}

uint64_t sub_1000CA370(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A6788(a1, v1, 0xD000000000000017, 0x80000001001FE080);
}

uint64_t sub_1000CA3A4()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000CA3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1002624BC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000087DC;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1000C76C0, 0, 0);
}

uint64_t sub_1000CA424(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000CA4AC(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_1000CA4C8, 0, 0);
}

uint64_t sub_1000CA4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v1);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v2 = type metadata accessor for Logger(0);
    sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 24);
    if (v6)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v14 = v13;
      *(_DWORD *)v8 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000022, 0x80000001001FE0A0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2114;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
      *v9 = v10;
      sub_10007E9BC(v7, 1);
      sub_10007E9BC(v7, 1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}@", (uint8_t *)v8, 0x16u);
      v11 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_10007E9BC(v7, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v7, 1);
      swift_errorRelease(v1);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA730()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000CA748(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002624D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_1000C77EC(a1, v4, v5, v6);
}

uint64_t sub_1000CA7B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_1002624FC);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_1000C8028(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1000CA834()
{
  return sub_10001A0C0((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 64);
}

uint64_t sub_1000CA84C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10026250C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1000C8378(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000CA8DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026251C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1000C8AC4(a1, v7, v8, v9);
}

uint64_t sub_1000CA994()
{
  return sub_1000CE6B0((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_1000CA9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_10026252C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002620D4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1000B66A0(v2);
}

uint64_t sub_1000CAA1C()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000CAA34()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000CAA4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_10026256C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_1000C63FC(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1000CAACC()
{
  return sub_10001A0C0((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 64);
}

uint64_t sub_1000CAAE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10026257C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1000C674C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000CAB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000CAC08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026258C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1000C6E2C(a1, v7, v8, v9);
}

uint64_t sub_1000CACC0()
{
  return sub_1000CE6B0((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_1000CACD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_10026259C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002620D4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1000B66A0(v2);
}

_QWORD *sub_1000CAD48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;

  v5 = type metadata accessor for Handle(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Friend(0);
  v8 = __chkstk_darwin(v33);
  v37 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v30 - v11;
  result = _swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v35 = v10;
    v36 = a2;
    v15 = *(unsigned __int8 *)(v10 + 80);
    v16 = *(_QWORD *)(v10 + 72);
    v30[1] = v2;
    v31 = (v15 + 32) & ~v15;
    v17 = a1 + v31;
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v18 = v5;
    v32 = v5;
    v19 = v33;
    for (i = v34(v12, a1 + v31, v33); ; i = v34(v12, v17, v19))
    {
      v21 = Friend.handle.getter(i);
      v22 = Handle.identifier.getter(v21);
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v18);
      LOBYTE(v22) = sub_10001A808(v22, v24, v36);
      swift_bridgeObjectRelease(v24);
      if ((v22 & 1) != 0)
      {
        v25 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v25(v37, v12, v19);
        v26 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        {
          sub_1000303C0(0, v26[2] + 1, 1);
          v26 = v39;
        }
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_1000303C0(v27 > 1, v28 + 1, 1);
          v26 = v39;
        }
        v26[2] = v28 + 1;
        v29 = (uint64_t)v26 + v31 + v28 * v16;
        v19 = v33;
        v25((char *)v29, v37, v33);
        v39 = v26;
        v18 = v32;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v19);
      }
      v17 += v16;
      if (!--v14)
        break;
    }
    return v39;
  }
  return result;
}

char *sub_1000CAFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v5 = type metadata accessor for Handle(0);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Friend(0);
  v9 = __chkstk_darwin(v8);
  v32 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v28 - v12;
  result = (char *)_swiftEmptyArrayStorage;
  v37 = (char *)_swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v36 = *(_QWORD *)(v11 + 72);
    v28[1] = v2;
    v29 = v16;
    v17 = a1 + v16;
    v33 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v11 + 16);
    v34 = v11;
    v30 = v5;
    v31 = a2;
    for (i = v33(v13, a1 + v16, v8); ; i = v33(v13, v17, v8))
    {
      v19 = Friend.handle.getter(i);
      v20 = Handle.serverID.getter(v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
      if (v22 && (v23 = sub_10001A808(v20, v22, a2), swift_bridgeObjectRelease(v22), (v23 & 1) != 0))
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        v24(v32, v13, v8);
        v25 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v25 + 2) + 1, 1);
          v25 = v37;
        }
        v27 = *((_QWORD *)v25 + 2);
        v26 = *((_QWORD *)v25 + 3);
        if (v27 >= v26 >> 1)
        {
          sub_1000303C0(v26 > 1, v27 + 1, 1);
          v25 = v37;
        }
        *((_QWORD *)v25 + 2) = v27 + 1;
        v24(&v25[v29 + v27 * v36], v32, v8);
        v37 = v25;
        v5 = v30;
        a2 = v31;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v8);
      }
      v17 += v36;
      if (!--v15)
        break;
    }
    return v37;
  }
  return result;
}

char *sub_1000CB1F8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;

  v41 = a2;
  v4 = type metadata accessor for Handle(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Friend(0);
  v7 = __chkstk_darwin(v42);
  v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  result = (char *)_swiftEmptyArrayStorage;
  v43 = (char *)_swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v33 = v2;
    v34 = (v14 + 32) & ~v14;
    v16 = a1 + v34;
    v37 = v15;
    v38 = v9;
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    for (i = v36(v11, a1 + v34, v42); ; i = v36(v11, v16, v42))
    {
      v19 = Friend.handle.getter(i);
      v20 = Handle.serverID.getter(v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v40);
      v23 = objc_msgSend(v41, "findMyId");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      if (!v22)
        break;
      if (v20 == v24 && v22 == v26)
      {
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v26, 0);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v26);
        if ((v28 & 1) == 0)
          goto LABEL_4;
      }
      v29 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v29(v35, v11, v42);
      v30 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_1000303C0(0, *((_QWORD *)v30 + 2) + 1, 1);
        v30 = v43;
      }
      v32 = *((_QWORD *)v30 + 2);
      v31 = *((_QWORD *)v30 + 3);
      if (v32 >= v31 >> 1)
      {
        sub_1000303C0(v31 > 1, v32 + 1, 1);
        v30 = v43;
      }
      *((_QWORD *)v30 + 2) = v32 + 1;
      v18 = v37;
      v29(&v30[v34 + v32 * v37], v35, v42);
      v43 = v30;
LABEL_5:
      v16 += v18;
      if (!--v13)
        return v43;
    }
    swift_bridgeObjectRelease(v26);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v42);
    v18 = v37;
    goto LABEL_5;
  }
  return result;
}

void sub_1000CB4A0(void (**a1)(char *, uint64_t), id *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  os_log_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  os_log_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  unint64_t v154;
  os_log_t v155;
  char *v156;
  unint64_t v157;
  __int128 v158;
  char *v159;
  char *v160;
  uint64_t *v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  os_log_t v167;
  void (*v168)(char *, uint64_t);
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t (*v185)(char *);
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, uint64_t);

  v4 = v3;
  v181 = type metadata accessor for Handle(0);
  v178 = *(_QWORD *)(v181 - 8);
  v8 = __chkstk_darwin(v181);
  v10 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v163 = (char *)&v151 - v11;
  v12 = sub_100037A5C((uint64_t *)&unk_100262930);
  __chkstk_darwin(v12);
  v175 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for Date(0);
  v171 = *(_QWORD *)(v176 - 8);
  v14 = __chkstk_darwin(v176);
  v16 = (char *)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v165 = (char *)&v151 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v151 - v19;
  v179 = type metadata accessor for Friend(0);
  v21 = *(_QWORD *)(v179 - 8);
  v22 = __chkstk_darwin(v179);
  v169 = (char *)&v151 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v160 = (char *)&v151 - v25;
  __chkstk_darwin(v24);
  v187 = (char *)&v151 - v26;
  v188 = type metadata accessor for Location(0);
  v186 = *(_QWORD *)(v188 - 8);
  v27 = __chkstk_darwin(v188);
  v177 = (char *)&v151 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v180 = (char *)&v151 - v30;
  v31 = __chkstk_darwin(v29);
  v164 = (char *)&v151 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v151 - v33;
  v35 = (unint64_t)*a2;
  swift_bridgeObjectRetain(a3);
  v37 = sub_1000CB1F8(v36, (void *)v35);
  v38 = a3;
  v39 = v37;
  swift_bridgeObjectRelease(v38);

  if (*((_QWORD *)v39 + 2))
  {
    v184 = *((_QWORD *)v39 + 2);
    v159 = v16;
    v174 = v10;
    v152 = v3;
    sub_100190F10((id)v35, (uint64_t)v34);
    v40 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v151 = v39;
    v41 = &v39[v40];
    v161 = &v190;
    v172 = *(_QWORD *)(v21 + 72);
    v173 = v21;
    v185 = *(uint64_t (**)(char *))(v21 + 16);
    *(_QWORD *)&v42 = 136447235;
    v158 = v42;
    v154 = (unint64_t)"cationsForHandles:)";
    v157 = 0x80000001001FE100;
    v156 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v42 = 136447747;
    v153 = v42;
    v162 = a1;
    v43 = v176;
    v44 = v171;
    v170 = v20;
    v46 = v186;
    v45 = v187;
    v4 = v34;
    v182 = v34;
    while (1)
    {
      v183 = v41;
      v49 = v185(v45);
      v50 = (uint64_t)v175;
      Friend.createdAt.getter(v49);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v50, 1, v43) == 1)
      {
        v51 = sub_1000087A0(v50, (uint64_t *)&unk_100262930);
        v52 = (uint64_t)v174;
      }
      else
      {
        v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 32))(v20, v50, v43);
        v54 = v165;
        Location.date.getter(v53);
        v55 = static Date.< infix(_:_:)(v54, v20);
        v56 = *(void (**)(char *, uint64_t))(v44 + 8);
        v56(v54, v43);
        v52 = (uint64_t)v174;
        if ((v55 & 1) != 0)
        {
          v168 = v56;
          v57 = v164;
          if (qword_10025F8D8 != -1)
            swift_once(&qword_10025F8D8, sub_1000A7D34);
          v58 = type metadata accessor for Logger(0);
          sub_100037A9C(v58, (uint64_t)qword_10027ABA8);
          v59 = v186;
          (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v57, v4, v188);
          v60 = v160;
          ((void (*)(char *, char *, uint64_t))v185)(v160, v187, v179);
          v61 = v159;
          v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 16))(v159, v20, v43);
          v63 = Logger.logObject.getter(v62);
          v64 = static os_log_type_t.default.getter(v63);
          LODWORD(v167) = v64;
          if (os_log_type_enabled(v63, v64))
          {
            v65 = swift_slowAlloc(72, -1);
            v166 = swift_slowAlloc(128, -1);
            v191 = (void (*)(char *, uint64_t))v166;
            *(_DWORD *)v65 = v153;
            v155 = v63;
            v189 = sub_10002BA84(0xD00000000000001DLL, v154 | 0x8000000000000000, (uint64_t *)&v191);
            v66 = v161;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v161, v65 + 4, v65 + 12);
            *(_WORD *)(v65 + 12) = 2160;
            v189 = 1752392040;
            v67 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 14, v65 + 22);
            *(_WORD *)(v65 + 22) = 2081;
            v68 = v59;
            v69 = v165;
            v70 = v164;
            v71 = Location.date.getter(v67);
            v72 = Date.localISO8601.getter(v71);
            v74 = v73;
            v168(v69, v176);
            v189 = sub_10002BA84(v72, v74, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 24, v65 + 32);
            swift_bridgeObjectRelease(v74);
            v47 = *(void (**)(char *, uint64_t))(v68 + 8);
            v47(v70, v188);
            *(_WORD *)(v65 + 32) = 2160;
            v189 = 1752392040;
            v75 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 34, v65 + 42);
            *(_WORD *)(v65 + 42) = 2081;
            v76 = v163;
            v77 = v160;
            v78 = Friend.handle.getter(v75);
            v79 = Handle.identifier.getter(v78);
            v81 = v80;
            (*(void (**)(char *, uint64_t))(v178 + 8))(v76, v181);
            v189 = sub_10002BA84(v79, v81, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 44, v65 + 52);
            v44 = v171;
            swift_bridgeObjectRelease(v81);
            v82 = *(void (**)(char *, uint64_t))(v173 + 8);
            v83 = v179;
            v82(v77, v179);
            *(_WORD *)(v65 + 52) = 2160;
            v189 = 1752392040;
            v84 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 54, v65 + 62);
            *(_WORD *)(v65 + 62) = 2081;
            v85 = v159;
            v86 = Date.localISO8601.getter(v84);
            v88 = v87;
            v189 = sub_10002BA84(v86, v87, (uint64_t *)&v191);
            v43 = v176;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v66, v65 + 64, v65 + 72);
            swift_bridgeObjectRelease(v88);
            v89 = v85;
            v90 = v168;
            v168(v89, v43);
            v91 = v155;
            _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v167, "%{public}s\ndrop older location with date: %{private,mask.hash}s\nfor handle:%{private,mask.hash}s\nwith creationDate:%{private,mask.hash}s", (uint8_t *)v65, 0x48u);
            v92 = v166;
            swift_arrayDestroy(v166, 4, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v92, -1, -1);
            v93 = v65;
            a1 = v162;
            swift_slowDealloc(v93, -1, -1);

            v20 = v170;
            v90(v170, v43);
            v45 = v187;
            v82(v187, v83);
            v46 = v186;
          }
          else
          {

            v137 = v168;
            v168(v61, v43);
            v138 = *(void (**)(char *, uint64_t))(v173 + 8);
            v139 = v179;
            v138(v60, v179);
            v140 = v59;
            v47 = *(void (**)(char *, uint64_t))(v59 + 8);
            v47(v164, v188);
            v137(v20, v43);
            v45 = v187;
            v138(v187, v139);
            v46 = v140;
          }
          goto LABEL_5;
        }
        v51 = ((uint64_t (*)(char *, uint64_t))v56)(v20, v43);
        v46 = v186;
      }
      Friend.handle.getter(v51);
      v94 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      v94(v180, v4, v188);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v191 = (void (*)(char *, uint64_t))*a1;
      v96 = (uint64_t)v191;
      *a1 = 0x8000000000000000;
      v35 = sub_10001CBC8(v52);
      v98 = *(_QWORD *)(v96 + 16);
      v99 = (v97 & 1) == 0;
      v100 = v98 + v99;
      v101 = v169;
      if (__OFADD__(v98, v99))
      {
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v4 = v97;
      if (*(_QWORD *)(v96 + 24) >= v100)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1000F63E0();
      }
      else
      {
        sub_100161478(v100, isUniquelyReferenced_nonNull_native);
        v102 = sub_10001CBC8(v52);
        if ((v4 & 1) != (v103 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v181);
          __break(1u);
          return;
        }
        v35 = v102;
      }
      v104 = v177;
      v105 = v191;
      if ((v4 & 1) != 0)
      {
        v106 = *((_QWORD *)v191 + 7) + *(_QWORD *)(v186 + 72) * v35;
        v35 = v188;
        (*(void (**)(unint64_t, char *, uint64_t))(v186 + 40))(v106, v180, v188);
      }
      else
      {
        *((_QWORD *)v191 + (v35 >> 6) + 8) |= 1 << v35;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v178 + 16))(v105[6] + *(_QWORD *)(v178 + 72) * v35, v52, v181);
        v107 = v105[7] + *(_QWORD *)(v186 + 72) * v35;
        v35 = v188;
        (*(void (**)(unint64_t, char *, uint64_t))(v186 + 32))(v107, v180, v188);
        v108 = v105[2];
        v109 = __OFADD__(v108, 1);
        v110 = v108 + 1;
        if (v109)
          goto LABEL_35;
        v105[2] = v110;
      }
      v111 = *a1;
      *a1 = v191;
      swift_bridgeObjectRelease(v111);
      v112 = *(void (**)(uint64_t, uint64_t))(v178 + 8);
      v112(v52, v181);
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v113 = type metadata accessor for Logger(0);
      sub_100037A9C(v113, (uint64_t)qword_10027ABA8);
      v114 = v179;
      ((void (*)(char *, char *, uint64_t))v185)(v101, v187, v179);
      v115 = ((uint64_t (*)(char *, char *, unint64_t))v94)(v104, v182, v35);
      v116 = Logger.logObject.getter(v115);
      v117 = static os_log_type_t.default.getter(v116);
      v118 = v117;
      if (os_log_type_enabled(v116, v117))
      {
        v119 = swift_slowAlloc(52, -1);
        v168 = (void (*)(char *, uint64_t))swift_slowAlloc(96, -1);
        v191 = v168;
        *(_DWORD *)v119 = v158;
        v167 = v116;
        v189 = sub_10002BA84(0xD00000000000001DLL, v157, (uint64_t *)&v191);
        v120 = v161;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v161, v119 + 4, v119 + 12);
        *(_WORD *)(v119 + 12) = 2160;
        v189 = 1752392040;
        v121 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v120, v119 + 14, v119 + 22);
        *(_WORD *)(v119 + 22) = 2081;
        v122 = v101;
        v123 = v163;
        v124 = Friend.handle.getter(v121);
        v125 = Handle.identifier.getter(v124);
        LODWORD(v166) = v118;
        v127 = v126;
        v112((uint64_t)v123, v181);
        v189 = sub_10002BA84(v125, v127, (uint64_t *)&v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v120, v119 + 24, v119 + 32);
        swift_bridgeObjectRelease(v127);
        v48 = *(void (**)(char *, uint64_t))(v173 + 8);
        v48(v122, v114);
        *(_WORD *)(v119 + 32) = 2160;
        v189 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v120, v119 + 34, v119 + 42);
        *(_WORD *)(v119 + 42) = 2081;
        v128 = sub_100018A7C(&qword_1002625A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
        v129 = v177;
        v130 = v188;
        v131 = dispatch thunk of CustomStringConvertible.description.getter(v188, v128);
        v133 = v132;
        v189 = sub_10002BA84(v131, v132, (uint64_t *)&v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v120, v119 + 44, v119 + 52);
        swift_bridgeObjectRelease(v133);
        v46 = v186;
        v47 = *(void (**)(char *, uint64_t))(v186 + 8);
        v47(v129, v130);
        v134 = v167;
        _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v166, "%{public}s mappedLocation:\nhandle: %{private,mask.hash}s\nlocation: %{private,mask.hash}s", (uint8_t *)v119, 0x34u);
        v135 = v168;
        swift_arrayDestroy(v168, 3, v156);
        swift_slowDealloc(v135, -1, -1);
        v136 = v119;
        a1 = v162;
        swift_slowDealloc(v136, -1, -1);

      }
      else
      {

        v46 = v186;
        v47 = *(void (**)(char *, uint64_t))(v186 + 8);
        v47(v104, v35);
        v48 = *(void (**)(char *, uint64_t))(v173 + 8);
        v48(v101, v114);
      }
      v45 = v187;
      v48(v187, v114);
      v43 = v176;
      v20 = v170;
      v44 = v171;
LABEL_5:
      v4 = v182;
      v41 = &v183[v172];
      if (!--v184)
      {
        swift_bridgeObjectRelease(v151);
        v47(v4, v188);
        return;
      }
    }
  }
  swift_bridgeObjectRelease(v39);
  if (qword_10025F8D8 != -1)
LABEL_36:
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v141 = type metadata accessor for Logger(0);
  sub_100037A9C(v141, (uint64_t)qword_10027ABA8);
  v142 = (id)v35;
  v143 = Logger.logObject.getter(v142);
  v144 = static os_log_type_t.error.getter(v143);
  if (os_log_type_enabled(v143, v144))
  {
    v152 = v4;
    v145 = swift_slowAlloc(22, -1);
    v146 = swift_slowAlloc(32, -1);
    v191 = (void (*)(char *, uint64_t))v146;
    *(_DWORD *)v145 = 141558275;
    v189 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v145 + 4, v145 + 12);
    *(_WORD *)(v145 + 12) = 2081;
    v188 = v145 + 14;
    v147 = objc_msgSend(v142, "findMyId");
    v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
    v150 = v149;

    v189 = sub_10002BA84(v148, v150, (uint64_t *)&v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v188, v145 + 22);

    swift_bridgeObjectRelease(v150);
    _os_log_impl((void *)&_mh_execute_header, v143, v144, "Skipping unknown handle for ID: %{private,mask.hash}s", (uint8_t *)v145, 0x16u);
    swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v146, -1, -1);
    swift_slowDealloc(v145, -1, -1);

  }
  else
  {

  }
}

void (*sub_1000CC3F0(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3))(char *, uint64_t)
{
  uint64_t v3;
  uint64_t v4;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  __n128 i;
  uint64_t j;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t);

  v4 = v3;
  v7 = a1;
  v17 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = swift_bridgeObjectRetain(a2); v8; v8 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (j = 4; ; ++j)
    {
      v11 = (a2 & 0xC000000000000001) != 0
          ? (void (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)(j - 4, a2, i)
          : (void (*)(char *, uint64_t))*(id *)(a2 + 8 * j);
      v7 = v11;
      v12 = j - 3;
      if (__OFADD__(j - 4, 1))
        break;
      v16 = v11;
      sub_1000CB4A0(&v17, (id *)&v16, a3);
      if (v4)
      {
        v13 = v17;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v13);
        return v7;
      }

      if (v12 == v8)
      {
        swift_bridgeObjectRelease(a2);
        return v17;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v14 = a2;
    else
      v14 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v7;
}

BOOL sub_1000CC520(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A7780(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000CC53C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  uint64_t Priority;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  os_log_t v82;
  int v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[16];
  uint64_t v100[4];
  uint64_t v101;

  v95 = a5;
  v90 = a6;
  v94 = a4;
  Priority = type metadata accessor for LocatePriority(0);
  v92 = *(_QWORD *)(Priority - 8);
  v93 = Priority;
  v10 = __chkstk_darwin(Priority);
  v91 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v88 = (char *)&v82 - v12;
  v13 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Handle(0);
  v16 = *(_QWORD *)(v96 - 8);
  v17 = __chkstk_darwin(v96);
  v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v89 = (char *)&v82 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v82 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v82 - v25;
  swift_beginAccess(a2, v100, 32, 0);
  v27 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v28 = sub_10001CBC8(a1), (v29 & 1) != 0))
  {
    v87 = a1;
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
    v101 = v30;
    swift_endAccess(v100);
    swift_bridgeObjectRetain(v30);
    sub_1000FF3C8(a3, (uint64_t)v15);
    sub_1000087A0((uint64_t)v15, (uint64_t *)&unk_1002675F0);
    v31 = v101;
    if (*(_QWORD *)(v101 + 16))
    {
      v32 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v87, v96);
      swift_beginAccess(a2, v100, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
      v98 = *a2;
      *a2 = 0x8000000000000000;
      sub_100164004(v31, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
      v34 = *a2;
      *a2 = v98;
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v32);
      swift_endAccess(v100);
      v36 = v92;
      v35 = v93;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
    }
    else
    {
      swift_bridgeObjectRelease(v101);
      v35 = v93;
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v45 = type metadata accessor for Logger(0);
      sub_100037A9C(v45, (uint64_t)qword_10027ABA8);
      v46 = v92;
      v47 = v88;
      v86 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
      v86(v88, v94, v35);
      v48 = v24;
      v49 = v96;
      v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v50 = v85(v24, v87, v96);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      v53 = v52;
      if (os_log_type_enabled(v51, v52))
      {
        v54 = swift_slowAlloc(42, -1);
        v83 = v53;
        v55 = v47;
        v56 = v54;
        v84 = swift_slowAlloc(96, -1);
        v100[0] = v84;
        *(_DWORD *)v56 = 136446979;
        v82 = v51;
        v98 = sub_10002BA84(0xD000000000000036, 0x80000001001FE2A0, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v56 + 4, v56 + 12);
        *(_WORD *)(v56 + 12) = 2082;
        v57 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
        v58 = dispatch thunk of CustomStringConvertible.description.getter(v93, v57);
        v60 = v59;
        v98 = sub_10002BA84(v58, v59, v100);
        v35 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v56 + 14, v56 + 22);
        swift_bridgeObjectRelease(v60);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v55, v35);
        *(_WORD *)(v56 + 22) = 2160;
        v98 = 1752392040;
        v61 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v56 + 24, v56 + 32);
        *(_WORD *)(v56 + 32) = 2081;
        v62 = Handle.identifier.getter(v61);
        v64 = v63;
        v98 = sub_10002BA84(v62, v63, v100);
        v49 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v56 + 34, v56 + 42);
        swift_bridgeObjectRelease(v64);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v48, v49);
        v65 = v82;
        _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "%{public}s no more active session for %{public}s handle: %{private,mask.hash}s. Need to unsubscribe.", (uint8_t *)v56, 0x2Au);
        v66 = v84;
        swift_arrayDestroy(v84, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v56, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v35);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v48, v49);

      }
      v67 = v87;
      v85(v89, v87, v49);
      v68 = v95;
      v69 = *v95;
      v70 = swift_isUniquelyReferenced_nonNull_native(*v95);
      *v68 = v69;
      if ((v70 & 1) == 0)
      {
        v69 = sub_100161120(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
        *v68 = v69;
      }
      v72 = *(_QWORD *)(v69 + 16);
      v71 = *(_QWORD *)(v69 + 24);
      if (v72 >= v71 >> 1)
      {
        v69 = sub_100161120(v71 > 1, v72 + 1, 1, v69);
        *v68 = v69;
      }
      *(_QWORD *)(v69 + 16) = v72 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v69+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v72, v89, v49);
      swift_beginAccess(a2, v100, 33, 0);
      v73 = sub_1000F4428(v67);
      swift_endAccess(v100);
      swift_bridgeObjectRelease(v73);
      v36 = v92;
      v37 = v86;
    }
    v74 = (uint64_t)v91;
    v37(v91, v94, v35);
    swift_beginAccess(a2, v100, 0, 0);
    v75 = *a2;
    v76 = a2[1];
    v77 = a2[2];
    v78 = (uint64_t *)(v90 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
    swift_beginAccess(v90 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions, &v98, 33, 0);
    swift_retain(v76);
    v79 = *v78;
    swift_bridgeObjectRetain(v75);
    v80 = swift_isUniquelyReferenced_nonNull_native(v79);
    v97 = *v78;
    *v78 = 0x8000000000000000;
    sub_10001BC94(v75, v76, v77, v74, v80);
    v81 = *v78;
    *v78 = v97;
    swift_bridgeObjectRelease(v81);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v74, v35);
    return swift_endAccess(&v98);
  }
  else
  {
    swift_endAccess(v100);
    v38 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v26, a1, v96);
    v39 = v95;
    v40 = *v95;
    v41 = swift_isUniquelyReferenced_nonNull_native(*v95);
    *v39 = v40;
    if ((v41 & 1) == 0)
    {
      v40 = sub_100161120(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
      *v39 = v40;
    }
    v43 = *(_QWORD *)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    if (v43 >= v42 >> 1)
    {
      v40 = sub_100161120(v42 > 1, v43 + 1, 1, v40);
      *v39 = v40;
    }
    *(_QWORD *)(v40 + 16) = v43 + 1;
    return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v40+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v43, v26, v38);
  }
}

void sub_1000CCD04(uint64_t a1, uint64_t a2, const char *a3, int16x8_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Priority;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  int v32;
  uint64_t v33;
  uint64_t v34;
  int16x8_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a3;
  v35 = a4;
  v7 = type metadata accessor for Handle(0);
  v37 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Priority = type metadata accessor for LocatePriority(0);
  v11 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027ABA8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a2, Priority);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v37 + 16))(v9, a1, v7);
  v16 = v7;
  v17 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(32, -1);
    v34 = v4;
    v21 = v20;
    v33 = swift_slowAlloc(64, -1);
    v40 = v33;
    *(_DWORD *)v21 = vmovn_s16(v35).u32[0];
    v35.i64[0] = v16;
    v22 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v32 = v19;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v22);
    v25 = v24;
    v38 = sub_10002BA84(v23, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, Priority);
    *(_WORD *)(v21 + 12) = 2160;
    v38 = 1752392040;
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 14, v21 + 22);
    *(_WORD *)(v21 + 22) = 2081;
    v27 = Handle.identifier.getter(v26);
    v29 = v28;
    v38 = sub_10002BA84(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v9, v35.i64[0]);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v32, v36, (uint8_t *)v21, 0x20u);
    v30 = v33;
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, Priority);
    (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v9, v16);
  }

}

void sub_1000CD020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Priority;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  os_log_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = type metadata accessor for Handle(0);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v6 = __chkstk_darwin(v5);
  v62 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v59 = (char *)&v54 - v8;
  v9 = type metadata accessor for Friend(0);
  v63 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v64 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v54 - v12;
  Priority = type metadata accessor for LocatePriority(0);
  v15 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v18 = type metadata accessor for Logger(0);
  sub_100037A9C(v18, (uint64_t)qword_10027ABA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, Priority);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v19(v13, a1, v9);
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v64, a1, v9);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(52, -1);
    v56 = v23;
    v25 = v24;
    v57 = swift_slowAlloc(96, -1);
    v67 = v57;
    *(_DWORD *)v25 = 136447235;
    v58 = v2;
    v26 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v55 = v21;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v26);
    v29 = v28;
    v65 = sub_10002BA84(v27, v28, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, Priority);
    *(_WORD *)(v25 + 12) = 2160;
    v65 = 1752392040;
    v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 14, v25 + 22);
    *(_WORD *)(v25 + 22) = 2081;
    v31 = v59;
    v32 = Friend.handle.getter(v30);
    v33 = Handle.identifier.getter(v32);
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v60 + 8);
    v37 = v31;
    v38 = v9;
    v39 = v61;
    v36(v37, v61);
    v65 = sub_10002BA84(v33, v35, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease(v35);
    v63 = *(_QWORD *)(v63 + 8);
    v40 = v13;
    v41 = v38;
    ((void (*)(char *, uint64_t))v63)(v40, v38);
    *(_WORD *)(v25 + 32) = 2160;
    v65 = 1752392040;
    v42 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 34, v25 + 42);
    *(_WORD *)(v25 + 42) = 2081;
    v43 = v62;
    v44 = v64;
    v45 = Friend.handle.getter(v42);
    v46 = Handle.serverID.getter(v45);
    v48 = v47;
    v36(v43, v39);
    if (v48)
      v49 = v46;
    else
      v49 = 7104878;
    if (v48)
      v50 = v48;
    else
      v50 = 0xE300000000000000;
    v65 = sub_10002BA84(v49, v50, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 44, v25 + 52);
    swift_bridgeObjectRelease(v50);
    ((void (*)(char *, uint64_t))v63)(v44, v41);
    v51 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "Unsubscribing %{public}s friend: %{private,mask.hash}s serverID: %{private,mask.hash}s", (uint8_t *)v25, 0x34u);
    v52 = v57;
    swift_arrayDestroy(v57, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, Priority);
    v53 = *(void (**)(char *, uint64_t))(v63 + 8);
    v53(v13, v9);
    v53(v64, v9);

  }
}

void sub_1000CD4D0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Priority;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v39 = a4;
  v40 = a3;
  v41 = a1;
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v42 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v15 = type metadata accessor for Logger(0);
  sub_100037A9C(v15, (uint64_t)qword_10027ABA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v10, v40, Priority);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v43, v41, v5);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(42, -1);
    LODWORD(v40) = v19;
    v21 = v20;
    v41 = swift_slowAlloc(96, -1);
    v46 = v41;
    *(_DWORD *)v21 = 136315907;
    v38 = v6;
    v22 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = v17;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v11, v22);
    v25 = v24;
    v44 = sub_10002BA84(v23, v24, &v46);
    v36 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v21 + 12) = 2082;
    v26 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v26);
    v29 = v28;
    v44 = sub_10002BA84(v27, v28, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, Priority);
    *(_WORD *)(v21 + 22) = 2160;
    v44 = 1752392040;
    v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 24, v21 + 32);
    *(_WORD *)(v21 + 32) = 2081;
    v31 = v43;
    v32 = Handle.identifier.getter(v30);
    v34 = v33;
    v44 = sub_10002BA84(v32, v33, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 34, v21 + 42);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v36);
    v17 = v37;
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v40, v39, (uint8_t *)v21, 0x2Au);
    v35 = v41;
    swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, Priority);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v43, v5);
  }

}

void sub_1000CD8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Priority;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a2;
  v39 = a3;
  Priority = type metadata accessor for LocatePriority(0);
  v40 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027ABA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, a4, Priority);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(42, -1);
    v37 = v4;
    v20 = v19;
    v36 = swift_slowAlloc(96, -1);
    v43 = v36;
    *(_DWORD *)v20 = 141558787;
    v41 = 1752392040;
    v35 = v18;
    v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v34 = Priority;
    v22 = Handle.identifier.getter(v21);
    v24 = v23;
    v41 = sub_10002BA84(v22, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 22) = 2082;
    v25 = Duration.description.getter(v38, v39);
    v27 = v26;
    v41 = sub_10002BA84(v25, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v20 + 32) = 2082;
    v28 = sub_100018A7C(&qword_100261E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v29 = v34;
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v34, v28);
    v32 = v31;
    v41 = sub_10002BA84(v30, v31, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 34, v20 + 42);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v29);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v35, "Scheduling resubscription for %{private,mask.hash}s after %{public}s priority: %{public}s", (uint8_t *)v20, 0x2Au);
    v33 = v36;
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v9, Priority);
  }

}

uint64_t sub_1000CDC1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v55 = a2;
  v69 = a4;
  v56 = a1;
  v63 = sub_100037A5C(&qword_1002605E8);
  __chkstk_darwin(v63);
  v72 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Location(0);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v73 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v55 - v14;
  v57 = 0;
  v58 = a3;
  v16 = 0;
  v17 = *(_QWORD *)(a3 + 64);
  v59 = v8;
  v60 = a3 + 64;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v61 = (unint64_t)(v18 + 63) >> 6;
  v62 = v15;
  v66 = v10;
  while (1)
  {
    if (v20)
    {
      v70 = (v20 - 1) & v20;
      v71 = v16;
      v24 = __clz(__rbit64(v20)) | (v16 << 6);
      goto LABEL_22;
    }
    v25 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_37;
    if (v25 >= v61)
      return sub_1000060F8(v56, v55, v57, (_QWORD *)a3);
    v26 = *(_QWORD *)(v60 + 8 * v25);
    v27 = v16 + 1;
    if (!v26)
    {
      v27 = v16 + 2;
      if (v16 + 2 >= v61)
        return sub_1000060F8(v56, v55, v57, (_QWORD *)a3);
      v26 = *(_QWORD *)(v60 + 8 * v27);
      if (!v26)
      {
        v27 = v16 + 3;
        if (v16 + 3 >= v61)
          return sub_1000060F8(v56, v55, v57, (_QWORD *)a3);
        v26 = *(_QWORD *)(v60 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_21:
    v70 = (v26 - 1) & v26;
    v71 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_22:
    v29 = *(_QWORD *)(a3 + 48);
    v74 = v10[9];
    v30 = (void (*)(char *, unint64_t, uint64_t))v10[2];
    v30(v15, v29 + v74 * v24, v9);
    v31 = *(_QWORD *)(a3 + 56);
    v22 = v67;
    v21 = v68;
    v32 = *(_QWORD *)(v67 + 72);
    v64 = v24;
    v33 = v31 + v32 * v24;
    v23 = a3;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v34(v8, v33, v68);
    v35 = (uint64_t)v72;
    v30(v72, (unint64_t)v15, v9);
    v34((char *)(v35 + *(int *)(v63 + 48)), (uint64_t)v8, v21);
    v10 = v66;
    v75 = *(_QWORD *)(v69 + 16);
    if (!v75)
      goto LABEL_5;
    v36 = v69;
    v37 = (uint64_t)v72;
    v38 = v73;
    v39 = (*((unsigned __int8 *)v66 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v66 + 80);
    v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v30;
    v30(v73, v69 + v39, v9);
    v41 = sub_100018A7C(&qword_1002605F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(v36);
    v42 = v37;
    v65 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v37, v9, v41);
    v43 = (void (*)(char *, uint64_t))v10[1];
    v43(v38, v9);
    if ((v65 & 1) != 0)
    {
      swift_bridgeObjectRelease(v69);
      v52 = v67;
      v53 = v68;
      v51 = v58;
LABEL_31:
      v15 = v62;
      v20 = v70;
      sub_1000087A0(v42, &qword_1002605E8);
      v8 = v59;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v59, v53);
      result = ((uint64_t (*)(char *, uint64_t))v43)(v15, v9);
      *(unint64_t *)((char *)v56 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
      v54 = __OFADD__(v57++, 1);
      v10 = v66;
      v16 = v71;
      a3 = v51;
      if (v54)
        goto LABEL_38;
    }
    else
    {
      if (v75 != 1)
      {
        v44 = v69 + v74 + v39;
        v45 = 1;
        while (1)
        {
          v46 = v73;
          result = v40(v73, v44, v9);
          v47 = v45 + 1;
          if (__OFADD__(v45, 1))
            break;
          v48 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v42, v9, v41);
          v49 = v46;
          v50 = v48;
          v43(v49, v9);
          if ((v50 & 1) != 0)
          {
            swift_bridgeObjectRelease(v69);
            v51 = v58;
            v52 = v67;
            v53 = v68;
            goto LABEL_31;
          }
          ++v45;
          v44 += v74;
          if (v47 == v75)
          {
            swift_bridgeObjectRelease(v69);
            v23 = v58;
            v8 = v59;
            v22 = v67;
            v21 = v68;
            v10 = v66;
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      swift_bridgeObjectRelease(v69);
      v22 = v67;
      v21 = v68;
      v23 = v58;
      v8 = v59;
LABEL_5:
      sub_1000087A0((uint64_t)v72, &qword_1002605E8);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
      v15 = v62;
      result = ((uint64_t (*)(char *, uint64_t))v10[1])(v62, v9);
      v20 = v70;
      v16 = v71;
      a3 = v23;
    }
  }
  v28 = v16 + 4;
  if (v16 + 4 >= v61)
    return sub_1000060F8(v56, v55, v57, (_QWORD *)a3);
  v26 = *(_QWORD *)(v60 + 8 * v28);
  if (v26)
  {
    v27 = v16 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v61)
      return sub_1000060F8(v56, v55, v57, (_QWORD *)a3);
    v26 = *(_QWORD *)(v60 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000CE120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_1000CDC1C((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v11 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_1000CDC1C((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

void sub_1000CE2D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027ABA8);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(32, -1);
    v18 = swift_slowAlloc(64, -1);
    v22 = v18;
    *(_DWORD *)v11 = 136446723;
    v20 = sub_10002BA84(0x6E6F697461636F6CLL, 0xEF293A726F662873, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2160;
    v20 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2081;
    v19 = v1;
    v12 = sub_100018A7C(&qword_100261A98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v3, v12);
    v15 = v14;
    v20 = sub_10002BA84(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "One-shot %{public}s pulled from daemon cache on disk\nfor handle: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
    v16 = v18;
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

}

uint64_t sub_1000CE56C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_1001EFBE4(0xD000000000000021);
  if ((v1 & 1) != 0)
    return 10;
  v2 = v0;
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100037A9C(v3, (uint64_t)qword_10027ABA8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v9 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Using maxNumberOfResubscriptionsAllowed from defaults: %ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  return v2;
}

uint64_t sub_1000CE6A0()
{
  return sub_1000CE6B0((void (*)(_QWORD))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_1000CE6B0(void (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  swift_release(v2[4]);
  a1(v2[5]);
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1000CE6FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002625CC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003BF7C;
  return sub_1000C2DE8(a1, v4, v5, v6, v7);
}

uint64_t sub_1000CE780(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for LocatePriority(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_1002625DC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_1000C0B8C(a1, v6, v7, v8, v9, v10, v12, v13);
}

unint64_t sub_1000CE858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002625E8;
  if (!qword_1002625E8)
  {
    v1 = objc_opt_self(SPSecureLocation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002625E8);
  }
  return result;
}

uint64_t sub_1000CE898()
{
  char *v0;
  uint64_t Priority;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  Priority = type metadata accessor for LocatePriority(0);
  v2 = *(_QWORD *)(Priority - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], Priority);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000CE930()
{
  uint64_t v0;
  uint64_t Priority;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  Priority = type metadata accessor for LocatePriority(0);
  v2 = *(_QWORD *)(Priority - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, Priority);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000CE9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for LocatePriority(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + v4);
  v9 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100262604);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_10003BF7C;
  return sub_1000C0F78(v5, v6, v7, v8, v9);
}

uint64_t sub_1000CEA7C()
{
  uint64_t v0;
  uint64_t Priority;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  Priority = type metadata accessor for LocatePriority(0);
  v2 = *(_QWORD *)(Priority - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, Priority);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000CEAF8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for LocatePriority(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100262614);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_1000C1B9C(a1, v5, v8, v9);
}

uint64_t sub_1000CEBA4()
{
  uint64_t v0;
  uint64_t Priority;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Priority = type metadata accessor for LocatePriority(0);
  v2 = *(_QWORD *)(Priority - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, Priority);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CEC20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocatePriority(0) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_100262624);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  return swift_task_switch(sub_1000C2958, v5, 0);
}

uint64_t sub_1000CECA0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1000CECAC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000CECD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result;
    swift_retain(a2);
    return swift_bridgeObjectRetain(v2);
  }
  return result;
}

uint64_t sub_1000CED08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100262664);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003BF7C;
  return sub_1000B3BA4(a1, a2, v6, v7, v8);
}

uint64_t sub_1000CED84()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000CEDB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100262674);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  v7[14] = v5;
  v7[15] = v6;
  v7[12] = a1;
  v7[13] = v4;
  return swift_task_switch(sub_1000B4350, v4, 0);
}

uint64_t sub_1000CEE2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000CEE50(uint64_t a1)
{
  uint64_t v1;

  sub_1000C6084(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000CEE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100037A5C(&qword_100262680);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000CEEC0(void *a1, uint64_t a2)
{
  sub_100037A5C(&qword_100262680);
  return sub_1000C61E0(a1, a2);
}

unint64_t sub_1000CEF10()
{
  unint64_t result;

  result = qword_100262688;
  if (!qword_100262688)
  {
    result = swift_getWitnessTable(&unk_1001F5020, &type metadata for LocationService.Error);
    atomic_store(result, &qword_100262688);
  }
  return result;
}

uint64_t sub_1000CEF54()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000CEFEC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v10 = (_QWORD *)swift_task_alloc(dword_100262694);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1000B1E30(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1000CF0A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a3);
    return swift_release(a2);
  }
  return result;
}

void sub_1000CF0DC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B1B48(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), *(double *)(v2 + 24));
}

uint64_t sub_1000CF0EC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000C986C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000CF0FC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  swift_release(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(_QWORD *)&v0[v6]);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000CF1AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v12 = (_QWORD *)swift_task_alloc(dword_1002626A4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000087DC;
  return sub_1000C9A04(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000CF278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000CF2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v9 = type metadata accessor for Logger(0);
  sub_100037A9C(v9, (uint64_t)qword_10027ABA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_errorRetain(a2);
  v10 = swift_errorRetain(a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v28 = v2;
    v14 = v13;
    v26 = (uint64_t *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(64, -1);
    v31 = v27;
    *(_DWORD *)v14 = 136446979;
    v29 = sub_10002BA84(0x6164696C61766E69, 0xEC00000029286574, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2160;
    v29 = 1752392040;
    v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2081;
    v25 = v11;
    v16 = Handle.identifier.getter(v15);
    v18 = v17;
    v29 = sub_10002BA84(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v14 + 32) = 2114;
    swift_errorRetain(a2);
    v19 = _swift_stdlib_bridgeErrorToNSError(a2);
    v29 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 34, v14 + 42);
    v20 = v26;
    *v26 = v19;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    v21 = v25;
    _os_log_impl((void *)&_mh_execute_header, v25, v12, "%{public}s Failed to unsubscribe %{private,mask.hash}s.Error: %{public}@", (uint8_t *)v14, 0x2Au);
    v22 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v20, 1, v22);
    swift_slowDealloc(v20, -1, -1);
    v23 = v27;
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

uint64_t sub_1000CF5E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CF604(uint64_t a1)
{
  uint64_t v1;

  return sub_100099F90(a1, v1);
}

uint64_t sub_1000CF60C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1002626E4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_1002620A4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1000AC108();
}

uint64_t sub_1000CF670()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CF694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_100262714);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_1000A929C(v2);
}

uint64_t sub_1000CF6E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_100262724);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002620D4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1000B66A0(a1);
}

uint64_t sub_1000CF758()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000CF784()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100262734);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_10026209C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1000A9F24();
}

uint64_t sub_1000CF7EC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000CF820()
{
  int8x16_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int8x16_t v5;

  v2 = (_QWORD *)swift_task_alloc(dword_100262744);
  v5 = v0[2];
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  v3 = swift_task_alloc(dword_100262094);
  v2[2] = v3;
  *(_QWORD *)v3 = v2;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(int8x16_t *)(v3 + 24) = vextq_s8(v5, v5, 8uLL);
  return swift_task_switch(sub_10003D9E4, v5.i64[0], 0);
}

uint64_t sub_1000CF8B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A8764(a1, v1);
}

uint64_t sub_1000CF8BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A889C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000CF8C4()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000CF8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10026275C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10003BF7C;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1000A894C, 0, 0);
}

uint64_t sub_1000CF93C()
{
  return sub_1000CF954((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_1000CF954(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 24));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1000CF99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_10026276C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_100262114);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1000C4E38(v2);
}

uint64_t getEnumTagSinglePayload for LocationService.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF3 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483636);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 11;
  if (v4 >= 0xD)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocationService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 11;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationService.Error()
{
  return &type metadata for LocationService.Error;
}

ValueMetadata *type metadata accessor for LocationServiceError()
{
  return &type metadata for LocationServiceError;
}

unint64_t sub_1000CFAE4(unint64_t result)
{
  if (result >= 0xC)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_1000CFAF4(unint64_t result)
{
  if (result >= 0xC)
    return swift_errorRelease(result);
  return result;
}

uint64_t _s13findmylocated20LocationServiceErrorV8CategoryOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13findmylocated20LocationServiceErrorV8CategoryOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000CFBE0 + 4 * byte_1001F4D09[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000CFC14 + 4 * byte_1001F4D04[v4]))();
}

uint64_t sub_1000CFC14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CFC1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CFC24);
  return result;
}

uint64_t sub_1000CFC30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CFC38);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1000CFC3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CFC44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationServiceError.Category()
{
  return &type metadata for LocationServiceError.Category;
}

unint64_t sub_1000CFC64()
{
  unint64_t result;

  result = qword_100262778;
  if (!qword_100262778)
  {
    result = swift_getWitnessTable(&unk_1001F50EC, &type metadata for LocationServiceError.Category);
    atomic_store(result, (unint64_t *)&qword_100262778);
  }
  return result;
}

uint64_t sub_1000CFCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_100262780);
  v1 = sub_100037A9C(v0, (uint64_t)qword_100262780);
  if (qword_10025FBD8 != -1)
    swift_once(&qword_10025FBD8, sub_1001E7810);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000CFD84(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027ABD8, 0xD000000000000012, 0x80000001001FE6E0);
}

uint64_t sub_1000CFDA8(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027ABF0, 0x73646E65697266, 0xE700000000000000);
}

uint64_t sub_1000CFDC8(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027AC08, 0x73656369766564, 0xE700000000000000);
}

uint64_t sub_1000CFDE8(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027AC20, 0x6553726576726573, 0xEE0073676E697474);
}

uint64_t sub_1000CFE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = v0 + OBJC_IVAR____TtC13findmylocated20LocalStorageDatabase_baseContainerURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000CFE68()
{
  return type metadata accessor for LocalStorageDatabase(0);
}

uint64_t sub_1000CFE70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[1] = &unk_1001F5190;
  v4[2] = &unk_1001F51A8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1001F51A8;
    v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000CFF0C()
{
  return sub_100004EA8((unint64_t *)&unk_1002628A0, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F52B8);
}

uint64_t sub_1000CFF38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC13findmylocated20LocalStorageDatabase_baseContainerURL;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000CFF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release(v3);
}

void *sub_1000CFFC0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1000CFFFC()
{
  return 4;
}

uint64_t sub_1000D0004()
{
  return sub_1000D3E9C();
}

uint64_t sub_1000D0018()
{
  URL.appendingPathComponent(_:isDirectory:)(0x6F74536C61636F4CLL, 0xEF62642E65676172, 0);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x80000001001FE700, 0);
  return URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x80000001001FE720, 0);
}

void sub_1000D00C0()
{
  type metadata accessor for LocalStorageDatabase(0);
  Database.startup()();
}

void sub_1000D00F4()
{
  type metadata accessor for LocalStorageDatabase(0);
  Database.databaseAvailable()();
}

void sub_1000D011C(int a1, int a2, uint64_t a3)
{
  sub_1000D0130(a1, a2, a3);
}

void sub_1000D0130(int a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *object;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;

  v4 = v3;
  v47 = *v3;
  v48 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F8E0 != -1)
    swift_once(&qword_10025F8E0, sub_1000CFCF4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100037A9C(v11, (uint64_t)qword_100262780);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(14, -1);
    *(_DWORD *)v15 = 67109376;
    LODWORD(v49) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4, v15 + 4, v15 + 8);
    *(_WORD *)(v15 + 8) = 1024;
    LODWORD(v49) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4, v15 + 10, v15 + 14);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Migrate schema %d -> %d", (uint8_t *)v15, 0xEu);
    swift_slowDealloc(v15, -1, -1);
  }

  switch(a2)
  {
    case 1:
      v17._countAndFlagsBits = 0xD00000000000001FLL;
      v17._object = (void *)0x80000001001FD1F0;
      Connection.execute(_:)(v17);
      if (!v18)
      {
        v19._countAndFlagsBits = 0xD000000000000018;
        v19._object = (void *)0x80000001001FD210;
        Connection.execute(_:)(v19);
        if (!v21)
        {
          v22 = __chkstk_darwin(v20);
          v44 = a3;
          v45 = v47;
          v23 = UUID.init()(v22);
          v24 = UUID.uuidString.getter(v23);
          v26 = v25;
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v48);
          v27 = sub_1000D3E44;
          v28 = v24;
          v29 = v26;
          v30 = &v46 - 4;
          goto LABEL_13;
        }
      }
      return;
    case 2:
      v39 = __chkstk_darwin(v16);
      v32 = &v46 - 4;
      v44 = a3;
      v45 = v47;
      v40 = UUID.init()(v39);
      v34 = UUID.uuidString.getter(v40);
      v26 = v41;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v48);
      v27 = sub_1000D3E2C;
      goto LABEL_12;
    case 3:
      v31 = __chkstk_darwin(v16);
      v32 = &v46 - 4;
      v44 = a3;
      v45 = v47;
      v33 = UUID.init()(v31);
      v34 = UUID.uuidString.getter(v33);
      v26 = v35;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v48);
      v27 = sub_1000D3E14;
      goto LABEL_12;
    case 4:
      v36 = __chkstk_darwin(v16);
      v32 = &v46 - 6;
      *(&v46 - 4) = a3;
      *(&v46 - 3) = (uint64_t)v4;
      v44 = v47;
      v37 = UUID.init()(v36);
      v34 = UUID.uuidString.getter(v37);
      v26 = v38;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v48);
      v27 = sub_1000D3DF8;
LABEL_12:
      v28 = v34;
      v29 = v26;
      v30 = v32;
LABEL_13:
      Connection.savepoint(_:block:)(v28, v29, v27, v30);
      swift_bridgeObjectRelease(v26);
      break;
    default:
      v49 = 0;
      v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(v50);
      v49 = 0xD000000000000013;
      v50 = 0x80000001001FD1D0;
      v51 = a2;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      object = v42._object;
      String.append(_:)(v42);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v49, v50, "findmylocated/LocalStorageDatabase.swift", 40, 2, 196, 0);
      __break(1u);
      break;
  }
}

void sub_1000D058C()
{
  type metadata accessor for LocalStorageDatabase(0);
  Database.purge()();
}

void sub_1000D05C0()
{
  type metadata accessor for LocalStorageDatabase(0);
  Database.reset()();
}

void sub_1000D05F4()
{
  type metadata accessor for LocalStorageDatabase(0);
  Database.createIfNecessary()();
}

uint64_t sub_1000D0628()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for LocalStorageDatabase(0);
  v1 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  return Database.description.getter(v0, v1);
}

uint64_t sub_1000D0678()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to Database.isolatedDescription.getter[1]);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *v1 = v0;
  v1[1] = sub_10006155C;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_1000D06FC()
{
  return sub_100004EA8(&qword_1002628B0, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F51C0);
}

uint64_t sub_1000D0728()
{
  return sub_100004EA8(&qword_1002628B8, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F51F0);
}

void sub_1000D0754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v17 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  v8 = sub_100004EA8(&qword_1002628C0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v9 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v4, v0, v8);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  if ((v9 & 1) != 0)
  {
    if (qword_10025F8E0 != -1)
      swift_once(&qword_10025F8E0, sub_1000CFCF4);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100037A9C(v11, (uint64_t)qword_100262780);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v20 = v16;
      *(_DWORD *)v15 = 136446210;
      v18 = sub_10002BA84(0x7261745365666173, 0xED00002928707574, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s Not starting up before first unlock!", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

  }
  else
  {
    type metadata accessor for LocalStorageDatabase(0);
    sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
    Database.startup()();
  }
}

uint64_t sub_1000D09EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_10025F8E8 != -1)
    swift_once(&qword_10025F8E8, sub_1000CFD84);
  v1 = type metadata accessor for Table(0);
  sub_100037A9C(v1, (uint64_t)qword_10027ABD8);
  v2 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1000D0B4C, 0);
  v4 = v3;
  v5 = Connection.run(_:_:)(v2);
  if (v0)
    return swift_bridgeObjectRelease(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  swift_release(v6);
  if (qword_10025F8F0 != -1)
    swift_once(&qword_10025F8F0, sub_1000CFDA8);
  sub_100037A9C(v1, (uint64_t)qword_10027ABF0);
  v7 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1000D112C, 0);
  v9 = v8;
  v10 = Connection.run(_:_:)(v7);
  swift_bridgeObjectRelease(v9);
  return swift_release(v10);
}

uint64_t sub_1000D0B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v0 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v0);
  v40 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100037A5C(&qword_100260D28);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260D18);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002628D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100260D30);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C(&qword_100260D38);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F998 != -1)
    swift_once(&qword_10025F998, sub_10014BF08);
  v17 = sub_100037A5C(&qword_100260D40);
  v18 = sub_100037A9C(v17, (uint64_t)qword_10027ADF0);
  v19 = sub_100037A5C(&qword_100260D48);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v16, 1, 1, v19);
  v38 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v13, 1, 1, v17);
  v21 = type metadata accessor for UUID(0);
  v39 = v18;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v18, 1, v16, v13, v21, &protocol witness table for UUID);
  sub_1000087A0((uint64_t)v13, &qword_100260D30);
  sub_1000087A0((uint64_t)v16, &qword_100260D38);
  if (qword_10025F9A0 != -1)
    swift_once(&qword_10025F9A0, sub_10014BF84);
  v22 = sub_100037A5C(&qword_1002628F0);
  v23 = sub_100037A9C(v22, (uint64_t)qword_10027AE08);
  v20(v16, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v23, 0, v16, v10, &type metadata for Int, &protocol witness table for Int);
  sub_1000087A0((uint64_t)v10, &qword_1002628D8);
  sub_1000087A0((uint64_t)v16, &qword_100260D38);
  if (qword_10025F9B8 != -1)
    swift_once(&qword_10025F9B8, sub_10014C124);
  v24 = sub_100037A5C(&qword_100260D78);
  v25 = sub_100037A9C(v24, (uint64_t)qword_10027AE50);
  v20(v16, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
  v26 = type metadata accessor for Date(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v16, v7, v26, &protocol witness table for Date);
  sub_1000087A0((uint64_t)v7, &qword_100260D18);
  sub_1000087A0((uint64_t)v16, &qword_100260D38);
  if (qword_10025F9A8 != -1)
    swift_once(&qword_10025F9A8, sub_10014C00C);
  v27 = sub_100037A5C(&qword_100260D50);
  v28 = sub_100037A9C(v27, (uint64_t)qword_10027AE20);
  v20(v16, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v4, 1, 1, v27);
  v29 = sub_100062668();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v28, 0, v16, v4, &type metadata for UInt8, v29);
  sub_1000087A0((uint64_t)v4, &qword_100260D28);
  sub_1000087A0((uint64_t)v16, &qword_100260D38);
  if (qword_10025F9B0 != -1)
    swift_once(&qword_10025F9B0, sub_10014C098);
  v30 = sub_100037A5C(&qword_100260D68);
  v31 = sub_100037A9C(v30, (uint64_t)qword_10027AE38);
  v20(v16, 1, 1, v19);
  v32 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v40, 1, 1, v30);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v31, 0, v16, v32, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v32, &qword_100260D20);
  sub_1000087A0((uint64_t)v16, &qword_100260D38);
  v33 = sub_100037A5C(&qword_100260D80);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1001F35F0;
  *(_QWORD *)(v34 + 56) = v17;
  *(_QWORD *)(v34 + 64) = sub_1000D3E5C(&qword_100260D88, &qword_100260D40);
  v35 = sub_10003276C((_QWORD *)(v34 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v38 + 16))(v35, v39, v17);
  TableBuilder.unique(_:)(v34);
  return swift_bridgeObjectRelease(v34);
}

uint64_t sub_1000D112C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;

  v0 = sub_100037A5C(&qword_1002628C8);
  __chkstk_darwin(v0);
  v91 = (char *)&v81 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v2);
  v99 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002628D0);
  __chkstk_darwin(v4);
  v95 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002628D8);
  __chkstk_darwin(v6);
  v93 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260DB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100260D38);
  v12 = __chkstk_darwin(v11);
  v94 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v81 - v14;
  if (qword_10025F9C0 != -1)
    swift_once(&qword_10025F9C0, sub_10014C1AC);
  v16 = sub_100037A5C(&qword_100260DB8);
  v17 = sub_100037A9C(v16, (uint64_t)qword_10027AE68);
  v18 = sub_100037A5C(&qword_100260D48);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v15, 1, 1, v18);
  v89 = *(_QWORD *)(v16 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56);
  v20(v10, 1, 1, v16);
  v90 = v17;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v17, 1, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9C8 != -1)
    swift_once(&qword_10025F9C8, sub_10014C238);
  v21 = sub_100037A5C(&qword_1002628E0);
  v22 = sub_100037A9C(v21, (uint64_t)qword_10027AE80);
  v19(v15, 1, 1, v18);
  v20(v10, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v22, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9D0 != -1)
    swift_once(&qword_10025F9D0, sub_10014C2C4);
  v83 = sub_100037A5C(&qword_1002628E8);
  v23 = sub_100037A9C(v83, (uint64_t)qword_10027AE98);
  v19(v15, 1, 1, v18);
  v24 = sub_100037A5C(&qword_1002628F0);
  v25 = (uint64_t)v93;
  v81 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v82 = v24;
  v81(v93, 1, 1);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v23, 0, v15, v25, &type metadata for Int, &protocol witness table for Int);
  sub_1000087A0(v25, &qword_1002628D8);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9D8 != -1)
    swift_once(&qword_10025F9D8, sub_10014C358);
  v26 = sub_100037A9C(v21, (uint64_t)qword_10027AEB0);
  v19(v15, 1, 1, v18);
  v86 = v16;
  v87 = v20;
  v20(v10, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v26, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9E0 != -1)
    swift_once(&qword_10025F9E0, sub_10014C3E4);
  v27 = sub_100037A5C(&qword_1002628F8);
  v28 = sub_100037A9C(v27, (uint64_t)qword_10027AEC8);
  v19(v15, 1, 1, v18);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v30 = (uint64_t)v95;
  v88 = v27;
  v85 = v29;
  v29(v95, 1, 1, v27);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v28, 0, v15, v30, &type metadata for Double, &protocol witness table for Double);
  sub_1000087A0(v30, &qword_1002628D0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9E8 != -1)
    swift_once(&qword_10025F9E8, sub_10014C470);
  v31 = sub_100037A9C(v21, (uint64_t)qword_10027AEE0);
  v19(v15, 1, 1, v18);
  v32 = v86;
  v33 = v87;
  v87(v10, 1, 1, v86);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v31, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  v34 = (uint64_t)v94;
  if (qword_10025F9F0 != -1)
    swift_once(&qword_10025F9F0, sub_10014C4FC);
  v35 = sub_100037A9C(v21, (uint64_t)qword_10027AEF8);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v35, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025F9F8 != -1)
    swift_once(&qword_10025F9F8, sub_10014C588);
  v98 = v21;
  v84 = sub_100037A5C(&qword_100262900);
  v36 = sub_100037A9C(v84, (uint64_t)qword_10027AF10);
  v19(v15, 1, 1, v18);
  v19((char *)v34, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v36, 0, v15, v34, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v34, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA00 != -1)
    swift_once(&qword_10025FA00, sub_10014C61C);
  v92 = sub_100037A5C(&qword_100260D60);
  v37 = sub_100037A9C(v92, (uint64_t)qword_10027AF28);
  v19(v15, 1, 1, v18);
  v38 = sub_100037A5C(&qword_100260D68);
  v39 = (uint64_t)v99;
  v96 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v97 = v38;
  v96(v99, 1, 1);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v37, 0, v15, v39, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v39, &qword_100260D20);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA08 != -1)
    swift_once(&qword_10025FA08, sub_10014C6A8);
  v40 = v98;
  v41 = sub_100037A9C(v98, (uint64_t)qword_10027AF40);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v41, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA10 != -1)
    swift_once(&qword_10025FA10, sub_10014C734);
  v42 = sub_100037A9C(v40, (uint64_t)qword_10027AF58);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v42, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA20 != -1)
    swift_once(&qword_10025FA20, sub_10014C84C);
  v43 = sub_100037A9C(v40, (uint64_t)qword_10027AF88);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v43, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA18 != -1)
    swift_once(&qword_10025FA18, sub_10014C7C0);
  v44 = sub_100037A9C(v32, (uint64_t)qword_10027AF70);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v44, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA28 != -1)
    swift_once(&qword_10025FA28, sub_10014C8D8);
  v45 = sub_100037A9C(v40, (uint64_t)qword_10027AFA0);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v45, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA30 != -1)
    swift_once(&qword_10025FA30, sub_10014C964);
  v46 = sub_100037A9C(v40, (uint64_t)qword_10027AFB8);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v46, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA38 != -1)
    swift_once(&qword_10025FA38, sub_10014C9F0);
  v47 = sub_100037A9C(v83, (uint64_t)qword_10027AFD0);
  v19(v15, 1, 1, v18);
  v48 = (uint64_t)v93;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v93, 1, 1, v82);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v47, 0, v15, v48, &type metadata for Int, &protocol witness table for Int);
  sub_1000087A0(v48, &qword_1002628D8);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA40 != -1)
    swift_once(&qword_10025FA40, sub_10014CA7C);
  v49 = sub_100037A9C(v40, (uint64_t)qword_10027AFE8);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v49, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA48 != -1)
    swift_once(&qword_10025FA48, sub_10014CB10);
  v50 = sub_100037A9C(v92, (uint64_t)qword_10027B000);
  v19(v15, 1, 1, v18);
  v51 = (uint64_t)v99;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v99, 1, 1, v97);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v50, 0, v15, v51, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v51, &qword_100260D20);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA50 != -1)
    swift_once(&qword_10025FA50, sub_10014CB9C);
  v52 = sub_100037A5C(&qword_100262908);
  v53 = sub_100037A9C(v52, (uint64_t)qword_10027B018);
  v19(v15, 1, 1, v18);
  v54 = (uint64_t)v95;
  v85(v95, 1, 1, v88);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v53, 0, v15, v54, &type metadata for Double, &protocol witness table for Double);
  sub_1000087A0(v54, &qword_1002628D0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  v55 = v98;
  if (qword_10025FA58 != -1)
    swift_once(&qword_10025FA58, sub_10014CC28);
  v56 = sub_100037A9C(v55, (uint64_t)qword_10027B030);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v56, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  v57 = (uint64_t)v94;
  if (qword_10025FA60 != -1)
    swift_once(&qword_10025FA60, sub_10014CCB4);
  v58 = sub_100037A9C(v55, (uint64_t)qword_10027B048);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v58, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA68 != -1)
    swift_once(&qword_10025FA68, sub_10014CD40);
  v59 = sub_100037A9C(v84, (uint64_t)qword_10027B060);
  v19(v15, 1, 1, v18);
  v19((char *)v57, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v59, 0, v15, v57, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v57, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA70 != -1)
    swift_once(&qword_10025FA70, sub_10014CDCC);
  v60 = sub_100037A9C(v92, (uint64_t)qword_10027B078);
  v19(v15, 1, 1, v18);
  v61 = (uint64_t)v99;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v99, 1, 1, v97);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v60, 0, v15, v61, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v61, &qword_100260D20);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA78 != -1)
    swift_once(&qword_10025FA78, sub_10014CE58);
  v62 = v98;
  v63 = sub_100037A9C(v98, (uint64_t)qword_10027B090);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v63, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA80 != -1)
    swift_once(&qword_10025FA80, sub_10014CEE4);
  v64 = sub_100037A9C(v62, (uint64_t)qword_10027B0A8);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v64, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA88 != -1)
    swift_once(&qword_10025FA88, sub_10014CF70);
  v65 = sub_100037A9C(v62, (uint64_t)qword_10027B0C0);
  v19(v15, 1, 1, v18);
  v33(v10, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v65, 0, v15, v10, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v10, &qword_100260DB0);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA90 != -1)
    swift_once(&qword_10025FA90, sub_10014CFFC);
  v66 = sub_100037A9C(v18, (uint64_t)qword_10027B0D8);
  v19(v15, 1, 1, v18);
  v19((char *)v57, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v66, 0, v15, v57, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v57, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FA98 != -1)
    swift_once(&qword_10025FA98, sub_10014D088);
  v67 = sub_100037A9C(v18, (uint64_t)qword_10027B0F0);
  v19(v15, 1, 1, v18);
  v19((char *)v57, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v67, 0, v15, v57, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v57, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FAA0 != -1)
    swift_once(&qword_10025FAA0, sub_10014D114);
  v68 = sub_100037A9C(v18, (uint64_t)qword_10027B108);
  v19(v15, 1, 1, v18);
  v19((char *)v57, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v68, 0, v15, v57, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v57, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FAA8 != -1)
    swift_once(&qword_10025FAA8, sub_10014D1A0);
  v69 = sub_100037A9C(v18, (uint64_t)qword_10027B120);
  v19(v15, 1, 1, v18);
  v19((char *)v57, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v69, 0, v15, v57, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0(v57, &qword_100260D38);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FAB0 != -1)
    swift_once(&qword_10025FAB0, sub_10014D22C);
  v70 = v97;
  v71 = sub_100037A9C(v97, (uint64_t)qword_10027B138);
  v19(v15, 1, 1, v18);
  v72 = (uint64_t)v99;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v99, 1, 1, v70);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v71, 0, v15, v72, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v72, &qword_100260D20);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  if (qword_10025FAB8 != -1)
    swift_once(&qword_10025FAB8, sub_10014D2B8);
  v73 = sub_100037A5C(&qword_100262910);
  v74 = sub_100037A9C(v73, (uint64_t)qword_10027B150);
  v19(v15, 1, 1, v18);
  v75 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v91, 1, 1, v73);
  v76 = sub_100039528();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v74, 0, v15, v75, &type metadata for UInt64, v76);
  sub_1000087A0(v75, &qword_1002628C8);
  sub_1000087A0((uint64_t)v15, &qword_100260D38);
  v77 = sub_100037A5C(&qword_100260D80);
  v78 = swift_allocObject(v77, 72, 7);
  *(_OWORD *)(v78 + 16) = xmmword_1001F35F0;
  *(_QWORD *)(v78 + 56) = v32;
  *(_QWORD *)(v78 + 64) = sub_1000D3E5C((unint64_t *)&unk_100262920, &qword_100260DB8);
  v79 = sub_10003276C((_QWORD *)(v78 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v89 + 16))(v79, v90, v32);
  TableBuilder.unique(_:)(v78);
  return swift_bridgeObjectRelease(v78);
}

uint64_t sub_1000D297C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (qword_10025F8F8 != -1)
    swift_once(&qword_10025F8F8, sub_1000CFDC8);
  v1 = type metadata accessor for Table(0);
  sub_100037A9C(v1, (uint64_t)qword_10027AC08);
  v2 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1000D2A44, 0);
  v4 = v3;
  v5 = Connection.run(_:_:)(v2);
  if (v0)
    return swift_bridgeObjectRelease(v4);
  v7 = v5;
  swift_bridgeObjectRelease(v4);
  return swift_release(v7);
}

uint64_t sub_1000D2A44()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v0 = sub_100037A5C(&qword_100260DB0);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_100260D38);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  if (qword_10025FAC0 != -1)
    swift_once(&qword_10025FAC0, sub_10014D33C);
  v9 = sub_100037A5C(&qword_100260DB8);
  v10 = sub_100037A9C(v9, (uint64_t)qword_10027B168);
  v11 = sub_100037A5C(&qword_100260D48);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v8, 1, 1, v11);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v13(v2, 1, 1, v9);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v10, 1, v8, v2, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v2, &qword_100260DB0);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAC8 != -1)
    swift_once(&qword_10025FAC8, sub_10014D3C8);
  v14 = sub_100037A9C(v9, (uint64_t)qword_10027B180);
  v12(v8, 1, 1, v11);
  v13(v2, 1, 1, v9);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v14, 0, v8, v2, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v2, &qword_100260DB0);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAD0 != -1)
    swift_once(&qword_10025FAD0, sub_10014D454);
  v15 = sub_100037A9C(v9, (uint64_t)qword_10027B198);
  v12(v8, 1, 1, v11);
  v13(v2, 1, 1, v9);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v15, 0, v8, v2, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v2, &qword_100260DB0);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAD8 != -1)
    swift_once(&qword_10025FAD8, sub_10014D4E4);
  v16 = sub_100037A9C(v11, (uint64_t)qword_10027B1B0);
  v12(v8, 1, 1, v11);
  v12(v6, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v16, 0, v8, v6, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0((uint64_t)v6, &qword_100260D38);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAE0 != -1)
    swift_once(&qword_10025FAE0, sub_10014D578);
  v17 = sub_100037A9C(v11, (uint64_t)qword_10027B1C8);
  v12(v8, 1, 1, v11);
  v12(v6, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v17, 0, v8, v6, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0((uint64_t)v6, &qword_100260D38);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAE8 != -1)
    swift_once(&qword_10025FAE8, sub_10014D608);
  v18 = sub_100037A9C(v11, (uint64_t)qword_10027B1E0);
  v12(v8, 1, 1, v11);
  v12(v6, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v18, 0, v8, v6, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0((uint64_t)v6, &qword_100260D38);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FAF0 != -1)
    swift_once(&qword_10025FAF0, sub_10014D694);
  v19 = sub_100037A9C(v11, (uint64_t)qword_10027B1F8);
  v12(v8, 1, 1, v11);
  v12(v6, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v19, 0, v8, v6, &type metadata for Bool, &protocol witness table for Bool);
  sub_1000087A0((uint64_t)v6, &qword_100260D38);
  return sub_1000087A0((uint64_t)v8, &qword_100260D38);
}

uint64_t sub_1000D2FD4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_10025F900 != -1)
    swift_once(&qword_10025F900, sub_1000CFDE8);
  v1 = type metadata accessor for Table(0);
  sub_100037A9C(v1, (uint64_t)qword_10027AC20);
  v2 = SchemaType.drop(ifExists:)(0);
  v3 = Connection.run(_:_:)(v2._countAndFlagsBits);
  if (v0)
  {
    swift_bridgeObjectRelease(v2._object);
    if (qword_10025F8E0 != -1)
      swift_once(&qword_10025F8E0, sub_1000CFCF4);
    v4 = type metadata accessor for Logger(0);
    sub_100037A9C(v4, (uint64_t)qword_100262780);
    swift_errorRetain(v0);
    v5 = swift_errorRetain(v0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v22 = v9;
      *(_DWORD *)v8 = 136446210;
      v20 = v0;
      swift_errorRetain(v0);
      v10 = sub_100037A5C(&qword_100265260);
      v11 = String.init<A>(describing:)(&v20, v10);
      v13 = v12;
      v20 = sub_10002BA84(v11, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "serverSettings drop error %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v0);
    }
    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      swift_errorRelease(v0);

    }
  }
  else
  {
    v14 = v3;
    swift_bridgeObjectRelease(v2._object);
    swift_release(v14);
  }
  v15 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1000D32C0, 0);
  v17 = v16;
  v18 = Connection.run(_:_:)(v15);
  swift_bridgeObjectRelease(v17);
  return swift_release(v18);
}

uint64_t sub_1000D32C0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v0 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_1002628D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260D38);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025FAF8 != -1)
    swift_once(&qword_10025FAF8, sub_10014D720);
  v9 = sub_100037A5C(&qword_1002628F0);
  v10 = sub_100037A9C(v9, (uint64_t)qword_10027B210);
  v11 = sub_100037A5C(&qword_100260D48);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v8, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v10, 1, v8, v5, &type metadata for Int, &protocol witness table for Int);
  sub_1000087A0((uint64_t)v5, &qword_1002628D8);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB08 != -1)
    swift_once(&qword_10025FB08, sub_10014D834);
  v13 = sub_100037A5C(&qword_100260D60);
  v14 = sub_100037A9C(v13, (uint64_t)qword_10027B240);
  v12(v8, 1, 1, v11);
  v15 = sub_100037A5C(&qword_100260D68);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v2, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v14, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB10 != -1)
    swift_once(&qword_10025FB10, sub_10014D8C8);
  v17 = sub_100037A9C(v13, (uint64_t)qword_10027B258);
  v12(v8, 1, 1, v11);
  v16(v2, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v17, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB18 != -1)
    swift_once(&qword_10025FB18, sub_10014D958);
  v18 = sub_100037A9C(v13, (uint64_t)qword_10027B270);
  v12(v8, 1, 1, v11);
  v16(v2, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v18, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  return sub_1000087A0((uint64_t)v8, &qword_100260D38);
}

uint64_t sub_1000D3698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_10025F900 != -1)
    swift_once(&qword_10025F900, sub_1000CFDE8);
  v4 = type metadata accessor for Table(0);
  sub_100037A9C(v4, (uint64_t)qword_10027AC20);
  v5 = SchemaType.drop(ifExists:)(0);
  v6 = Connection.run(_:_:)(v5._countAndFlagsBits);
  if (v2)
  {
    swift_bridgeObjectRelease(v5._object);
    if (qword_10025F8E0 != -1)
      swift_once(&qword_10025F8E0, sub_1000CFCF4);
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_100262780);
    swift_errorRetain(v2);
    v8 = swift_errorRetain(v2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(v2);
      v12 = _swift_stdlib_bridgeErrorToNSError(v2);
      v21 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4, v11 + 12);
      *v20 = v12;
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "serverSettings drop error %{public}@", v11, 0xCu);
      v13 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v20, 1, v13);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
  }
  else
  {
    v14 = v6;
    swift_bridgeObjectRelease(v5._object);
    swift_release(v14);
  }
  v15 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1000D397C, 0);
  v17 = v16;
  v18 = Connection.run(_:_:)(v15);
  swift_bridgeObjectRelease(v17);
  result = swift_release(v18);
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

uint64_t sub_1000D397C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v0 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_1002628D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260D38);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025FAF8 != -1)
    swift_once(&qword_10025FAF8, sub_10014D720);
  v9 = sub_100037A5C(&qword_1002628F0);
  v10 = sub_100037A9C(v9, (uint64_t)qword_10027B210);
  v11 = sub_100037A5C(&qword_100260D48);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v8, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v10, 1, v8, v5, &type metadata for Int, &protocol witness table for Int);
  sub_1000087A0((uint64_t)v5, &qword_1002628D8);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB00 != -1)
    swift_once(&qword_10025FB00, sub_10014D7B0);
  v13 = sub_100037A5C(&qword_100260D68);
  v14 = sub_100037A9C(v13, (uint64_t)qword_10027B228);
  v12(v8, 1, 1, v11);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v15(v2, 1, 1, v13);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v14, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB08 != -1)
    swift_once(&qword_10025FB08, sub_10014D834);
  v16 = sub_100037A5C(&qword_100260D60);
  v17 = sub_100037A9C(v16, (uint64_t)qword_10027B240);
  v12(v8, 1, 1, v11);
  v15(v2, 1, 1, v13);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v17, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB10 != -1)
    swift_once(&qword_10025FB10, sub_10014D8C8);
  v18 = sub_100037A9C(v16, (uint64_t)qword_10027B258);
  v12(v8, 1, 1, v11);
  v15(v2, 1, 1, v13);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v18, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v8, &qword_100260D38);
  if (qword_10025FB18 != -1)
    swift_once(&qword_10025FB18, sub_10014D958);
  v19 = sub_100037A9C(v16, (uint64_t)qword_10027B270);
  v12(v8, 1, 1, v11);
  v15(v2, 1, 1, v13);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v19, 0, v8, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  return sub_1000087A0((uint64_t)v8, &qword_100260D38);
}

uint64_t sub_1000D3DF8()
{
  uint64_t v0;

  return sub_1000D3698(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D3E14()
{
  return sub_1000D2FD4();
}

uint64_t sub_1000D3E2C()
{
  return sub_1000D297C();
}

uint64_t sub_1000D3E44()
{
  return sub_1000D09EC();
}

uint64_t sub_1000D3E5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003C1FC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D3E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Keychain.DataProtectionClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Keychain.data(account:service:)(0x6F6C796D646E6966, 0xEC00000065746163, 0x6F74536C61636F4CLL, 0xEC00000065676172);
  if (!v0)
  {
    if (v7 >> 60 == 15)
    {
      v1 = static Data.randomBytes(count:)(32);
      v9 = v8;
      sub_10001A484(v1, v8);
      if (qword_10025F8E0 != -1)
        swift_once(&qword_10025F8E0, sub_1000CFCF4);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_100037A9C(v10, (uint64_t)qword_100262780);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v23[0] = v22;
        v21 = v14;
        *(_DWORD *)v14 = 136446210;
        v20 = v14 + 4;
        v24 = sub_10002BA84(0x6974707972636E65, 0xEF292879654B6E6FLL, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v20, v14 + 12);
        v15 = v21;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Generating a new key...", v21, 0xCu);
        v16 = v22;
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }

      v23[0] = v1;
      v23[1] = v9;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      v17 = sub_10003EC14();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)(v23, 0x6F6C796D646E6966, 0xEC00000065746163, 0x6F74536C61636F4CLL, 0xEC00000065676172, v5, &type metadata for Data, v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100037AB4(v1, v9);
    }
    else
    {
      return v6;
    }
  }
  return v1;
}

uint64_t sub_1000D41B0(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t ObjectType;
  int *v18;
  char v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;

  v2 = v1;
  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v32 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - v14;
  v16 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v16);
  v18 = (int *)type metadata accessor for FriendSharedSecretsRecord(0);
  v19 = *(_BYTE *)(v2 + v18[5]);
  v36 = &type metadata for UInt8;
  v37 = &protocol witness table for UInt8;
  LOBYTE(v34) = v19;
  v33 = ObjectType;
  CKRecordKeyValueSetting.subscript.setter(&v34, 1701869940, 0xE400000000000000, ObjectType);
  v20 = (uint64_t *)(v2 + v18[6]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
  {
    v22 = *v20;
    v36 = &type metadata for Data;
    v37 = &protocol witness table for Data;
    v34 = v22;
    v35 = v21;
    sub_10001A484(v22, v21);
    sub_10001A484(v22, v21);
    CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000014, 0x80000001001FD290, v33);
    sub_100037AF8(v22, v21);
  }
  sub_1000D6A78(v2 + v18[7], (uint64_t)v9);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v23(v9, 1, v10) == 1)
  {
    sub_1000087A0((uint64_t)v9, (uint64_t *)&unk_100262930);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
    v36 = (_QWORD *)v10;
    v37 = &protocol witness table for Date;
    v24 = sub_10003276C(&v34);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 16))(v24, v15, v10);
    CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000010, 0x80000001001FD270, v33);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }
  v25 = (uint64_t *)(v2 + v18[8]);
  v26 = v25[1];
  if (v26 >> 60 != 15)
  {
    v27 = *v25;
    v36 = &type metadata for Data;
    v37 = &protocol witness table for Data;
    v34 = v27;
    v35 = v26;
    sub_10001A484(v27, v26);
    sub_10001A484(v27, v26);
    CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000014, 0x80000001001FD250, v33);
    sub_100037AF8(v27, v26);
  }
  sub_1000D6A78(v2 + v18[9], (uint64_t)v7);
  if (v23(v7, 1, v10) == 1)
  {
    swift_unknownObjectRelease(v16);
    return sub_1000087A0((uint64_t)v7, (uint64_t *)&unk_100262930);
  }
  else
  {
    v29 = v32;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v32, v7, v10);
    v36 = (_QWORD *)v10;
    v37 = &protocol witness table for Date;
    v30 = sub_10003276C(&v34);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 16))(v30, v29, v10);
    CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000010, 0x80000001001FD230, v33);
    swift_unknownObjectRelease(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v29, v10);
  }
}

uint64_t sub_1000D4584(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t, int *);
  id v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  unsigned int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t result;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  void (*v81)(char *, uint64_t);
  char v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  id v99;
  uint64_t v100;
  unsigned int (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id *ObjectType;
  __int128 v106;
  __int128 v107;
  void *v108;

  v103 = a2;
  ObjectType = a1;
  v5 = type metadata accessor for Date(0);
  v104 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v92 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100037A5C((uint64_t *)&unk_100262A30);
  v7 = __chkstk_darwin(v102);
  v96 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v90 - v9;
  v11 = sub_100037A5C((uint64_t *)&unk_100262930);
  v12 = __chkstk_darwin(v11);
  v94 = (uint64_t)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v91 = (uint64_t)&v90 - v15;
  v16 = __chkstk_darwin(v14);
  v97 = (uint64_t)&v90 - v17;
  v18 = __chkstk_darwin(v16);
  v93 = (uint64_t)&v90 - v19;
  v20 = __chkstk_darwin(v18);
  v90 = (uint64_t)&v90 - v21;
  __chkstk_darwin(v20);
  v100 = (uint64_t)&v90 - v22;
  v23 = sub_100037A5C(&qword_100260F80);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v24);
  v29 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (int *)type metadata accessor for FriendSharedSecretsRecord(0);
  v31 = *((_QWORD *)v30 - 1);
  __chkstk_darwin(v30);
  v33 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v103, a3);
  v34 = swift_dynamicCast(v26, v29, a3, v30, 6);
  v35 = *(void (**)(char *, uint64_t, uint64_t, int *))(v31 + 56);
  if (!v34)
  {
    v35(v26, 1, 1, v30);
    sub_1000087A0((uint64_t)v26, &qword_100260F80);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000037, 0x80000001001FE770, "findmylocated/FriendSharedSecretsRecord.swift", 45, 2, 53, 0);
    __break(1u);
    return result;
  }
  v95 = v5;
  v35(v26, 0, 1, v30);
  sub_10006F564((uint64_t)v26, (uint64_t)v33);
  v36 = objc_msgSend(*ObjectType, "encryptedValues");
  ObjectType = (id *)swift_getObjectType(v36);
  v37 = v30[5];
  v38 = *(unsigned __int8 *)(v3 + v37);
  v39 = v33[v37];
  if (v38 != v39)
  {
    *((_QWORD *)&v107 + 1) = &type metadata for UInt8;
    v108 = &protocol witness table for UInt8;
    LOBYTE(v106) = v39;
    CKRecordKeyValueSetting.subscript.setter(&v106, 1701869940, 0xE400000000000000, ObjectType);
  }
  v98 = v33;
  v99 = v36;
  v40 = v30[6];
  v103 = v3;
  v41 = *(_QWORD *)(v3 + v40);
  v42 = *(_QWORD *)(v3 + v40 + 8);
  v43 = (uint64_t *)&v33[v40];
  v45 = *(_QWORD *)&v33[v40];
  v44 = v43[1];
  if (v42 >> 60 == 15)
  {
    v46 = v100;
    if (v44 >> 60 == 15)
      goto LABEL_12;
    sub_10001F728(v41, v42);
    sub_10001F728(v45, v44);
    sub_100037AF8(v41, v42);
    sub_100037AF8(v45, v44);
LABEL_10:
    *((_QWORD *)&v107 + 1) = &type metadata for Data;
    v108 = &protocol witness table for Data;
    *(_QWORD *)&v106 = v45;
    *((_QWORD *)&v106 + 1) = v44;
    goto LABEL_11;
  }
  sub_10001F728(v41, v42);
  sub_10001F728(v45, v44);
  if (v44 >> 60 != 15)
  {
    sub_10010961C(v41, v42);
    v48 = v47;
    sub_100037AF8(v45, v44);
    sub_100037AF8(v41, v42);
    v46 = v100;
    if ((v48 & 1) != 0)
      goto LABEL_12;
    goto LABEL_10;
  }
  sub_100037AF8(v41, v42);
  sub_100037AF8(v45, v44);
  v108 = 0;
  v106 = 0u;
  v107 = 0u;
LABEL_11:
  sub_10001F728(v45, v44);
  CKRecordKeyValueSetting.subscript.setter(&v106, 0xD000000000000014, 0x80000001001FD290, ObjectType);
  v46 = v100;
LABEL_12:
  v49 = v103;
  sub_1000D6A78(v103 + v30[7], v46);
  v50 = (uint64_t)v98;
  v51 = (uint64_t)&v98[v30[7]];
  v52 = (uint64_t)&v10[*(int *)(v102 + 48)];
  sub_1000D6A78(v46, (uint64_t)v10);
  sub_1000D6A78(v51, v52);
  v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48);
  v54 = v95;
  v55 = v53(v10, 1, v95);
  v101 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53;
  if (v55 == 1)
  {
    sub_1000087A0(v46, (uint64_t *)&unk_100262930);
    if (v53((char *)v52, 1, v54) == 1)
    {
      sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_100262930);
      v56 = v99;
      goto LABEL_22;
    }
  }
  else
  {
    v57 = v90;
    sub_1000D6A78((uint64_t)v10, v90);
    if (v53((char *)v52, 1, v54) != 1)
    {
      v77 = v104;
      v78 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v92, v52, v54);
      v79 = sub_100004EA8((unint64_t *)&unk_100262A40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v80 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v78, v54, v79);
      v81 = *(void (**)(char *, uint64_t))(v77 + 8);
      v81(v78, v54);
      sub_1000087A0(v100, (uint64_t *)&unk_100262930);
      v81((char *)v57, v54);
      v50 = (uint64_t)v98;
      v49 = v103;
      sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_100262930);
      v56 = v99;
      if ((v80 & 1) != 0)
        goto LABEL_22;
      goto LABEL_18;
    }
    sub_1000087A0(v100, (uint64_t *)&unk_100262930);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v57, v54);
  }
  sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_100262A30);
  v56 = v99;
LABEL_18:
  v58 = v93;
  sub_1000D6A78(v51, v93);
  if (v101(v58, 1, v54) == 1)
  {
    sub_1000087A0(v58, (uint64_t *)&unk_100262930);
    v106 = 0u;
    v107 = 0u;
    v108 = 0;
  }
  else
  {
    *((_QWORD *)&v107 + 1) = v54;
    v108 = &protocol witness table for Date;
    v59 = sub_10003276C(&v106);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v104 + 32))(v59, v58, v54);
  }
  CKRecordKeyValueSetting.subscript.setter(&v106, 0xD000000000000010, 0x80000001001FD270, ObjectType);
LABEL_22:
  v60 = (uint64_t *)(v49 + v30[8]);
  v61 = *v60;
  v62 = v60[1];
  v63 = *v43;
  v64 = v43[1];
  if (v62 >> 60 == 15)
  {
    if (v64 >> 60 == 15)
      goto LABEL_31;
  }
  else if (v64 >> 60 != 15)
  {
    sub_10001F728(v61, v62);
    sub_10001F728(v63, v64);
    sub_10010961C(v61, v62);
    v83 = v82;
    sub_100037AF8(v63, v64);
    sub_100037AF8(v61, v62);
    if ((v83 & 1) != 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  sub_10001F728(v61, v62);
  sub_10001F728(v63, v64);
  sub_100037AF8(v61, v62);
  sub_100037AF8(v63, v64);
LABEL_27:
  v65 = (uint64_t *)(v50 + v30[8]);
  v66 = *v65;
  v67 = v65[1];
  if (v67 >> 60 == 15)
  {
    v108 = 0;
    v106 = 0u;
    v107 = 0u;
  }
  else
  {
    *((_QWORD *)&v107 + 1) = &type metadata for Data;
    v108 = &protocol witness table for Data;
    *(_QWORD *)&v106 = v66;
    *((_QWORD *)&v106 + 1) = v67;
  }
  sub_10001F728(v66, v67);
  CKRecordKeyValueSetting.subscript.setter(&v106, 0xD000000000000014, 0x80000001001FD250, ObjectType);
LABEL_31:
  v68 = v97;
  sub_1000D6A78(v103 + v30[9], v97);
  v69 = v50 + v30[9];
  v70 = v96;
  v71 = v96 + *(int *)(v102 + 48);
  sub_1000D6A78(v68, v96);
  sub_1000D6A78(v69, v71);
  v72 = v101;
  if (v101(v70, 1, v54) == 1)
  {
    sub_1000087A0(v68, (uint64_t *)&unk_100262930);
    if (v72(v71, 1, v54) == 1)
    {
      sub_1000087A0(v70, (uint64_t *)&unk_100262930);
LABEL_46:
      sub_1000D6AC0(v50);
      return swift_unknownObjectRelease(v56);
    }
  }
  else
  {
    v73 = v91;
    sub_1000D6A78(v70, v91);
    if (v72(v71, 1, v54) != 1)
    {
      v84 = v104;
      v85 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v92, v71, v54);
      v86 = sub_100004EA8((unint64_t *)&unk_100262A40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v87 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v85, v54, v86);
      v88 = *(void (**)(char *, uint64_t))(v84 + 8);
      v89 = v85;
      v72 = v101;
      v88(v89, v54);
      sub_1000087A0(v97, (uint64_t *)&unk_100262930);
      v88((char *)v73, v54);
      sub_1000087A0(v70, (uint64_t *)&unk_100262930);
      if ((v87 & 1) != 0)
        goto LABEL_46;
      goto LABEL_37;
    }
    sub_1000087A0(v68, (uint64_t *)&unk_100262930);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v73, v54);
  }
  sub_1000087A0(v70, (uint64_t *)&unk_100262A30);
LABEL_37:
  v74 = v94;
  sub_1000D6A78(v69, v94);
  if (v72(v74, 1, v54) == 1)
  {
    sub_1000087A0(v74, (uint64_t *)&unk_100262930);
    v106 = 0u;
    v107 = 0u;
    v108 = 0;
  }
  else
  {
    *((_QWORD *)&v107 + 1) = v54;
    v108 = &protocol witness table for Date;
    v75 = sub_10003276C(&v106);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v104 + 32))(v75, v74, v54);
  }
  CKRecordKeyValueSetting.subscript.setter(&v106, 0xD000000000000010, 0x80000001001FD230, ObjectType);
  swift_unknownObjectRelease(v56);
  return sub_1000D6AC0(v50);
}

unint64_t sub_1000D5034()
{
  return 0xD000000000000019;
}

uint64_t sub_1000D5050()
{
  return 0x6553646572616853;
}

uint64_t sub_1000D507C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.creationDate(store:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1000087DC;
  return CloudBacked.creationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000D50F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.modificationDate(store:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10003BF7C;
  return CloudBacked.modificationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000D5174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.recordChangeTag(store:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000D51DC;
  return CloudBacked.recordChangeTag(store:)(a1, a2, a3);
}

uint64_t sub_1000D51DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_1000D5240@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D5254(a1, a2);
}

uint64_t sub_1000D5254@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  id v32;
  NSString v33;
  void *v34;
  id v35;
  int v36;
  NSString v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  NSString v45;
  void *v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  NSString v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  NSString v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  id v75;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  v5 = __chkstk_darwin(v4);
  v66 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v63 = (char *)&v62 - v7;
  v8 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v67 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for FriendSharedSecretsRecord(0);
  v13 = a2 + v12[6];
  v71 = xmmword_1001F48A0;
  *(_OWORD *)v13 = xmmword_1001F48A0;
  v14 = a2 + v12[7];
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v69 = a2 + v12[8];
  *(_OWORD *)v69 = v71;
  *(_QWORD *)&v71 = a2 + v12[9];
  v64 = v16;
  v65 = v15;
  v17 = ((uint64_t (*)(void))v16)();
  v18 = CKRecord.recordType.getter(v17);
  v20 = v19;
  v70 = v14;
  if (v18 == 0xD000000000000019 && v19 == 0x80000001001F52C0)
  {
    swift_bridgeObjectRelease(0x80000001001F52C0);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0xD000000000000019, 0x80000001001F52C0, 0);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v42 = sub_1000D5B0C();
      v30 = swift_allocError(&type metadata for ConversionError, v42, 0, 0);
      *v43 = 0;
      goto LABEL_14;
    }
  }
  v22 = objc_msgSend(a1, "recordID");
  v23 = objc_msgSend(v22, "recordName");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  UUID.init(uuidString:)(v24, v26);
  swift_bridgeObjectRelease(v26);
  v27 = v72;
  v28 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v10, 1, v68) == 1)
  {
    sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_1002675F0);
    v29 = sub_1000D5B0C();
    v30 = swift_allocError(&type metadata for ConversionError, v29, 0, 0);
    *v31 = 1;
LABEL_14:
    swift_willThrow(v30);

    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v67, v10, v28);
  v32 = objc_msgSend(a1, "encryptedValues");
  v33 = String._bridgeToObjectiveC()();
  v34 = v32;
  v35 = objc_msgSend(v32, "objectForKeyedSubscript:", v33);

  if (!v35
    || (v73 = v35,
        v62 = sub_100037A5C(&qword_100267600),
        (swift_dynamicCast(&v75, &v73, v62, &type metadata for UInt8, 6) & 1) == 0))
  {
    v39 = sub_1000D5B0C();
    v40 = swift_allocError(&type metadata for ConversionError, v39, 0, 0);
    *v41 = 0;
    swift_willThrow(v40);
    swift_unknownObjectRelease(v34);

    (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v28);
LABEL_15:
    sub_100037AF8(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
    sub_1000087A0(v70, (uint64_t *)&unk_100262930);
    sub_100037AF8(*(_QWORD *)v69, *(_QWORD *)(v69 + 8));
    return sub_1000087A0(v71, (uint64_t *)&unk_100262930);
  }
  v36 = v75;
  v37 = String._bridgeToObjectiveC()();
  v38 = objc_msgSend(v34, "objectForKeyedSubscript:", v37);

  if (v38)
  {
    v75 = v38;
    if ((swift_dynamicCast(&v73, &v75, v62, &type metadata for Data, 6) & 1) != 0)
      __asm { BR              X10 }
  }
  sub_100037AF8(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0xF000000000000000;
  v45 = String._bridgeToObjectiveC()();
  v46 = v34;
  v47 = objc_msgSend(v34, "objectForKeyedSubscript:", v45);

  if (v47)
  {
    v75 = v47;
    v48 = v62;
    if ((swift_dynamicCast(&v73, &v75, v62, &type metadata for Data, 6) & 1) != 0)
      return ((uint64_t (*)(void))((char *)&loc_1000D57FC + *((int *)qword_1000D5A18 + (v74 >> 62))))();
  }
  else
  {
    v48 = v62;
  }
  v49 = (_QWORD *)v69;
  sub_100037AF8(*(_QWORD *)v69, *(_QWORD *)(v69 + 8));
  *v49 = 0;
  v49[1] = 0xF000000000000000;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 16))(a2, v67, v68);
  *(_BYTE *)(a2 + v12[5]) = v36 == 1;
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v46, "objectForKeyedSubscript:", v50);

  if (v51)
  {
    v73 = v51;
    v52 = (uint64_t)v63;
    v53 = v65;
    v54 = swift_dynamicCast(v63, &v73, v48, v65, 6) ^ 1;
    v55 = (char *)v52;
  }
  else
  {
    v52 = (uint64_t)v63;
    v55 = v63;
    v54 = 1;
    v53 = v65;
  }
  v56 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v64;
  v64((uint64_t)v55, v54, 1, v53);
  sub_1000D5B50(v52, v71);
  v57 = String._bridgeToObjectiveC()();
  v58 = objc_msgSend(v46, "objectForKeyedSubscript:", v57);
  swift_unknownObjectRelease(v46);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v68);
  if (v58)
  {
    v73 = v58;
    v59 = (uint64_t)v66;
    v60 = swift_dynamicCast(v66, &v73, v48, v53, 6) ^ 1;
    v61 = (char *)v59;
  }
  else
  {
    v59 = (uint64_t)v66;
    v61 = v66;
    v60 = 1;
  }
  v56(v61, v60, 1, v53);
  return sub_1000D5B50(v59, v70);
}

uint64_t sub_1000D5A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.ckRecord(store:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100050D74;
  return CloudBacked.ckRecord(store:)(a1, a2, a3);
}

uint64_t sub_1000D5A98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for FriendSharedSecretsRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1002629A8;
  if (!qword_1002629A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendSharedSecretsRecord);
  return result;
}

unint64_t sub_1000D5B0C()
{
  unint64_t result;

  result = qword_100262940;
  if (!qword_100262940)
  {
    result = swift_getWitnessTable(&unk_1001F71A4, &type metadata for ConversionError);
    atomic_store(result, (unint64_t *)&qword_100262940);
  }
  return result;
}

uint64_t sub_1000D5B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000D5B98(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *v10;
      sub_10001A484(*v10, v11);
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v19(v16, 1, v17))
    {
      v20 = sub_100037A5C((uint64_t *)&unk_100262930);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = a3[8];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((_QWORD *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = *(_QWORD *)v23;
      sub_10001A484(*(_QWORD *)v23, *((_QWORD *)v23 + 1));
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
    }
    v26 = a3[9];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    if (v19(v28, 1, v17))
    {
      v29 = sub_100037A5C((uint64_t *)&unk_100262930);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_1000D5DA0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + a2[6]);
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_100037AB4(*v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = (uint64_t *)(a1 + a2[8]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_100037AB4(*v11, v12);
  v13 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v13, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  return result;
}

uint64_t sub_1000D5EA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_10001A484(*v9, v10);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_10001A484(*v21, v21[1]);
    *(_QWORD *)v20 = v23;
    *(_QWORD *)(v20 + 8) = v22;
  }
  v24 = a3[9];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v17(v26, 1, v15))
  {
    v27 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v25, v26, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_1000D6084(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  int v36;
  uint64_t v37;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      sub_10001A484(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_1000D6374((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  sub_10001A484(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  sub_100037AB4(v13, v14);
LABEL_8:
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_13:
    v23 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_14:
  v24 = a3[8];
  v25 = (uint64_t *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = *(_QWORD *)(a2 + v24 + 8);
  if (*(_QWORD *)(a1 + v24 + 8) >> 60 == 15)
  {
    if (v27 >> 60 != 15)
    {
      v28 = *v26;
      sub_10001A484(v28, v27);
      *v25 = v28;
      v25[1] = v27;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v27 >> 60 == 15)
  {
    sub_1000D6374((uint64_t)v25);
LABEL_19:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_21;
  }
  v29 = *v26;
  sub_10001A484(v29, v27);
  v30 = *v25;
  v31 = v25[1];
  *v25 = v29;
  v25[1] = v27;
  sub_100037AB4(v30, v31);
LABEL_21:
  v32 = a3[9];
  v33 = (void *)(a1 + v32);
  v34 = (void *)(a2 + v32);
  v35 = v20((void *)(a1 + v32), 1, v18);
  v36 = v20(v34, 1, v18);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v33, v34, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v33, v18);
    goto LABEL_26;
  }
  if (v36)
  {
LABEL_26:
    v37 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v33, v34, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v18);
  return a1;
}

uint64_t sub_1000D6374(uint64_t a1)
{
  destroy for SharedSecretKey(a1);
  return a1;
}

uint64_t sub_1000D63A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v13(v17, 1, v11))
  {
    v18 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_1000D6518(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1000D6374(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  sub_100037AB4(v12, v10);
LABEL_6:
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_11:
    v21 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_12:
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_17;
  }
  v26 = *(_QWORD *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    sub_1000D6374(v23);
    goto LABEL_15;
  }
  v27 = *(_QWORD *)v23;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v26;
  sub_100037AB4(v27, v25);
LABEL_17:
  v28 = a3[9];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = v18((void *)(a1 + v28), 1, v16);
  v32 = v18(v30, 1, v16);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v29, v30, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v29, v16);
    goto LABEL_22;
  }
  if (v32)
  {
LABEL_22:
    v33 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v29, v30, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
  return a1;
}

uint64_t sub_1000D67A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D67B0);
}

uint64_t sub_1000D67B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2)
      return v9 - 1;
    else
      return 0;
  }
  else
  {
    v10 = sub_100037A5C((uint64_t *)&unk_100262930);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_1000D6854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D6860);
}

uint64_t sub_1000D6860(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = sub_100037A5C((uint64_t *)&unk_100262930);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000D6904(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1001F5308;
    v6[2] = &unk_1001F5320;
    sub_1000D69A0(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = &unk_1001F5320;
      v9 = v7;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_1000D69A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002629B8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002629B8);
  }
}

uint64_t sub_1000D69F4()
{
  return sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1000D6A20()
{
  return sub_100004EA8(&qword_100262A00, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5370);
}

uint64_t sub_1000D6A4C()
{
  return sub_100004EA8(qword_100262A08, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5338);
}

uint64_t sub_1000D6A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6AC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FriendSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_1000D6AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t);
  _BYTE *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  int *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char v71;
  void (*v72)(_BYTE *, uint64_t);
  _BYTE v73[12];
  int v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  int *v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = sub_100037A5C((uint64_t *)&unk_100262A30);
  v8 = __chkstk_darwin(v84);
  v10 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v73[-v11];
  v13 = sub_100037A5C((uint64_t *)&unk_100262930);
  v14 = __chkstk_darwin(v13);
  v81 = &v73[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v82 = &v73[-v17];
  v18 = __chkstk_darwin(v16);
  v83 = &v73[-v19];
  v20 = __chkstk_darwin(v18);
  v22 = &v73[-v21];
  v23 = __chkstk_darwin(v20);
  v25 = &v73[-v24];
  __chkstk_darwin(v23);
  v27 = &v73[-v26];
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v28 = (int *)type metadata accessor for FriendSharedSecretsRecord(0);
  if (*(unsigned __int8 *)(a1 + v28[5]) != *(unsigned __int8 *)(a2 + v28[5]))
    return 0;
  v78 = v7;
  v79 = v5;
  v77 = v10;
  v80 = v4;
  v29 = v28[6];
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a1 + v29 + 8);
  v32 = (uint64_t *)(a2 + v29);
  v33 = *v32;
  v34 = v32[1];
  if (v31 >> 60 == 15)
  {
    if (v34 >> 60 == 15)
      goto LABEL_10;
LABEL_7:
    sub_10001F728(v30, v31);
    sub_10001F728(v33, v34);
    sub_100037AF8(v30, v31);
    v35 = v33;
    v36 = v34;
LABEL_8:
    sub_100037AF8(v35, v36);
    return 0;
  }
  if (v34 >> 60 == 15)
    goto LABEL_7;
  v76 = v28;
  sub_10001F728(v30, v31);
  sub_10001F728(v33, v34);
  sub_10010961C(v30, v31);
  LODWORD(v75) = v37;
  sub_100037AF8(v33, v34);
  sub_100037AF8(v30, v31);
  v28 = v76;
  if ((v75 & 1) == 0)
    return 0;
LABEL_10:
  v38 = v28;
  sub_1000D6A78(a1 + v28[7], (uint64_t)v27);
  v76 = v38;
  sub_1000D6A78(a2 + v38[7], (uint64_t)v25);
  v39 = (uint64_t)&v12[*(int *)(v84 + 48)];
  sub_1000D6A78((uint64_t)v27, (uint64_t)v12);
  sub_1000D6A78((uint64_t)v25, v39);
  v40 = v80;
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v41((uint64_t)v12, 1, v80) == 1)
  {
    sub_1000087A0((uint64_t)v25, (uint64_t *)&unk_100262930);
    sub_1000087A0((uint64_t)v27, (uint64_t *)&unk_100262930);
    if (v41(v39, 1, v40) == 1)
    {
      sub_1000087A0((uint64_t)v12, (uint64_t *)&unk_100262930);
      goto LABEL_19;
    }
LABEL_15:
    v42 = (uint64_t)v12;
LABEL_16:
    sub_1000087A0(v42, (uint64_t *)&unk_100262A30);
    return 0;
  }
  sub_1000D6A78((uint64_t)v12, (uint64_t)v22);
  if (v41(v39, 1, v40) == 1)
  {
    sub_1000087A0((uint64_t)v25, (uint64_t *)&unk_100262930);
    sub_1000087A0((uint64_t)v27, (uint64_t *)&unk_100262930);
    (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v22, v40);
    goto LABEL_15;
  }
  v44 = v79;
  v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 32);
  v75 = v41;
  v46 = v78;
  v45(v78, v39, v40);
  v47 = sub_100004EA8((unint64_t *)&unk_100262A40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v46, v40, v47);
  v48 = *(void (**)(_BYTE *, uint64_t))(v44 + 8);
  v49 = v46;
  v41 = v75;
  v48(v49, v80);
  sub_1000087A0((uint64_t)v25, (uint64_t *)&unk_100262930);
  sub_1000087A0((uint64_t)v27, (uint64_t *)&unk_100262930);
  v48(v22, v80);
  v40 = v80;
  sub_1000087A0((uint64_t)v12, (uint64_t *)&unk_100262930);
  if ((v74 & 1) == 0)
    return 0;
LABEL_19:
  v50 = v76;
  v51 = v76[8];
  v52 = *(_QWORD *)(a1 + v51);
  v53 = *(_QWORD *)(a1 + v51 + 8);
  v54 = (uint64_t *)(a2 + v51);
  v55 = *v54;
  v56 = v54[1];
  if (v53 >> 60 == 15)
  {
    if (v56 >> 60 == 15)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (v56 >> 60 == 15)
  {
LABEL_23:
    sub_10001F728(v52, v53);
    sub_10001F728(v55, v56);
    sub_100037AF8(v52, v53);
    v35 = v55;
    v36 = v56;
    goto LABEL_8;
  }
  sub_10001F728(v52, v53);
  sub_10001F728(v55, v56);
  sub_10010961C(v52, v53);
  v58 = v57;
  sub_100037AF8(v55, v56);
  sub_100037AF8(v52, v53);
  v50 = v76;
  if ((v58 & 1) == 0)
    return 0;
LABEL_25:
  v59 = v50;
  v60 = a1 + v50[9];
  v61 = v83;
  sub_1000D6A78(v60, (uint64_t)v83);
  v62 = a2 + v59[9];
  v63 = v82;
  sub_1000D6A78(v62, (uint64_t)v82);
  v64 = (uint64_t)v77;
  v65 = (uint64_t)&v77[*(int *)(v84 + 48)];
  sub_1000D6A78((uint64_t)v61, (uint64_t)v77);
  sub_1000D6A78((uint64_t)v63, v65);
  if (v41(v64, 1, v40) != 1)
  {
    v66 = v41;
    v67 = v81;
    sub_1000D6A78(v64, (uint64_t)v81);
    if (v66(v65, 1, v40) == 1)
    {
      sub_1000087A0((uint64_t)v63, (uint64_t *)&unk_100262930);
      sub_1000087A0((uint64_t)v61, (uint64_t *)&unk_100262930);
      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v67, v40);
      goto LABEL_30;
    }
    v69 = v78;
    v68 = v79;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 32))(v78, v65, v40);
    v70 = sub_100004EA8((unint64_t *)&unk_100262A40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v71 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v69, v40, v70);
    v72 = *(void (**)(_BYTE *, uint64_t))(v68 + 8);
    v72(v69, v40);
    sub_1000087A0((uint64_t)v63, (uint64_t *)&unk_100262930);
    sub_1000087A0((uint64_t)v61, (uint64_t *)&unk_100262930);
    v72(v67, v40);
    sub_1000087A0(v64, (uint64_t *)&unk_100262930);
    return (v71 & 1) != 0;
  }
  sub_1000087A0((uint64_t)v63, (uint64_t *)&unk_100262930);
  v64 = (uint64_t)v77;
  sub_1000087A0((uint64_t)v61, (uint64_t *)&unk_100262930);
  if (v41(v65, 1, v40) != 1)
  {
LABEL_30:
    v42 = v64;
    goto LABEL_16;
  }
  sub_1000087A0(v64, (uint64_t *)&unk_100262930);
  return 1;
}

uint64_t sub_1000D7208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[122] = v2;
  v3[121] = a2;
  v3[120] = a1;
  return swift_task_switch(sub_1000D7228, v2, 0);
}

uint64_t sub_1000D7228()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t (*v16)(void);
  uint64_t (*v18)(void);
  uint64_t v19;

  if (qword_10025F910 != -1)
    swift_once(&qword_10025F910, sub_1000D8E0C);
  v1 = v0[122];
  v2 = qword_10027AC68;
  v4 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain(v3);
  LOBYTE(v2) = sub_10001A808(v4, v3, v2);
  swift_bridgeObjectRelease(v3);
  if ((v2 & 1) != 0)
  {
    if (qword_10025F908 != -1)
      swift_once(&qword_10025F908, sub_1000D8D8C);
    v5 = v0[122];
    v6 = type metadata accessor for Logger(0);
    sub_100037A9C(v6, (uint64_t)qword_10027AC50);
    v7 = swift_retain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = v0[122];
    if (v10)
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136446210;
      swift_bridgeObjectRetain(v3);
      v0[119] = sub_10002BA84(v4, v3, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 119, v0 + 120, v12 + 4, v12 + 12);
      swift_release(v11);
      swift_bridgeObjectRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release(v11);
    }
    v16 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v14 = (int *)v0[120];
    v18 = (uint64_t (*)(void))((char *)v14 + *v14);
    v15 = (_QWORD *)swift_task_alloc(v14[1]);
    v0[123] = v15;
    *v15 = v0;
    v15[1] = sub_1000D7474;
    v16 = v18;
  }
  return v16();
}

uint64_t sub_1000D7474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 984);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 976);
  *(_QWORD *)(*(_QWORD *)v1 + 992) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000D74D4, v3, 0);
}

uint64_t sub_1000D74D4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t isUniquelyReferenced_nonNull_native;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  _QWORD *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t AssociatedTypeWitness;
  uint64_t v78;
  uint64_t AssociatedConformanceWitness;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(void);
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  _QWORD *v114;
  _QWORD *v115;
  __int128 *v116;
  __int128 *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  unint64_t v126;
  char v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  int64_t v130;
  __int128 *v131;
  _OWORD *v132;
  uint64_t v133;
  __int128 *v134;
  uint64_t v135;
  __int128 *v136;
  __int128 *v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 *v140;
  int64_t v141;
  _OWORD *v142;
  _OWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;

  isUniquelyReferenced_nonNull_native = v1 + 16;
  v142 = (_OWORD *)(v1 + 80);
  v136 = (__int128 *)(v1 + 144);
  v3 = (_OWORD *)(v1 + 192);
  v131 = (__int128 *)(v1 + 240);
  v137 = (__int128 *)(v1 + 288);
  v143 = (_OWORD *)(v1 + 336);
  v117 = (__int128 *)(v1 + 432);
  v140 = (__int128 *)(v1 + 480);
  v132 = (_OWORD *)(v1 + 528);
  v138 = (_OWORD *)(v1 + 576);
  v116 = (__int128 *)(v1 + 672);
  v123 = (_QWORD *)(v1 + 768);
  v115 = (_QWORD *)(v1 + 808);
  v133 = v1 + 848;
  v134 = (__int128 *)(v1 + 624);
  v139 = v1 + 872;
  v118 = (uint64_t *)(v1 + 920);
  v112 = (_QWORD *)(v1 + 928);
  v113 = (uint64_t *)(v1 + 936);
  v4 = *(_QWORD *)(v1 + 992);
  v135 = v4;
  v5 = -1 << *(_BYTE *)(v4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v122 = v4 + 64;
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v8 = (uint64_t *)(*(_QWORD *)(v1 + 976) + 112);
  swift_beginAccess(v8, v1 + 896, 0, 0);
  v141 = 0;
  v130 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v12 = (v7 - 1) & v7;
      v13 = v11 | (v141 << 6);
LABEL_10:
      v14 = (_QWORD *)(*(_QWORD *)(v135 + 48) + 16 * v13);
      v15 = v14[1];
      *(_QWORD *)(v1 + 80) = *v14;
      *(_QWORD *)(v1 + 88) = v15;
      sub_1000DBF64(*(_QWORD *)(v135 + 56) + 48 * v13, v1 + 96);
      swift_bridgeObjectRetain(v15);
      goto LABEL_29;
    }
    v16 = v141 + 1;
    if (__OFADD__(v141, 1))
      goto LABEL_115;
    if (v16 < v130)
    {
      v17 = *(_QWORD *)(v122 + 8 * v16);
      if (v17)
        goto LABEL_14;
      v18 = v141 + 2;
      ++v141;
      if (v16 + 1 < v130)
      {
        v17 = *(_QWORD *)(v122 + 8 * v18);
        if (v17)
          goto LABEL_17;
        v141 = v16 + 1;
        if (v16 + 2 < v130)
        {
          v17 = *(_QWORD *)(v122 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
LABEL_14:
            v12 = (v17 - 1) & v17;
            v13 = __clz(__rbit64(v17)) + (v16 << 6);
            v141 = v16;
            goto LABEL_10;
          }
          v18 = v16 + 3;
          v141 = v16 + 2;
          if (v16 + 3 < v130)
          {
            v17 = *(_QWORD *)(v122 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                v16 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_121;
                if (v16 >= v130)
                {
                  v141 = v130 - 1;
                  goto LABEL_28;
                }
                v17 = *(_QWORD *)(v122 + 8 * v16);
                ++v18;
                if (v17)
                  goto LABEL_14;
              }
            }
LABEL_17:
            v16 = v18;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_28:
    v12 = 0;
    *(_OWORD *)(v1 + 122) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *v142 = 0u;
LABEL_29:
    sub_10000EF6C((uint64_t)v142, isUniquelyReferenced_nonNull_native, &qword_100262C88);
    v19 = *(_QWORD *)(v1 + 24);
    if (!v19)
    {
      swift_release(*(_QWORD *)(v1 + 992));
      v104 = *(uint64_t (**)(void))(v1 + 8);
      return v104();
    }
    v144 = v12;
    v20 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    sub_1000DBF98((__int128 *)(v1 + 32), v3);
    v21 = *v8;
    if (!*(_QWORD *)(*v8 + 16))
      break;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    v22 = sub_10002FF38(v20, v19);
    v23 = v1 + 288;
    if ((v24 & 1) != 0)
    {
      sub_1000DBFF4(*(_QWORD *)(v21 + 56) + 48 * v22, (uint64_t)v137);
    }
    else
    {
      *(_QWORD *)(v1 + 320) = 0;
      *v137 = 0u;
      *(_OWORD *)(v1 + 304) = 0u;
      *(_BYTE *)(v1 + 328) = -1;
    }
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v21);
    if (*(unsigned __int8 *)(v1 + 328) == 255)
      goto LABEL_45;
    sub_1000DC028(v137, v138);
    sub_1000DBF64((uint64_t)v3, (uint64_t)v131);
    if (!*(_BYTE *)(v1 + 281))
    {
      v55 = v1 + 528;
      sub_1000DC028(v131, v132);
      goto LABEL_96;
    }
    if (*(_BYTE *)(v1 + 281) != 1)
    {
      v56 = *(double *)(v1 + 240);
      v26 = v1 + 432;
      sub_1000DBFF4((uint64_t)v138, (uint64_t)v117);
      if (*(_BYTE *)(v1 + 472) != 3)
      {
LABEL_112:
        swift_bridgeObjectRelease(v19);
        sub_1000DC040(v26);
        v105 = *(_QWORD *)(v1 + 992);
        v106 = sub_1000DC124();
        v107 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v106, 0, 0);
        swift_willThrow(v107);
        sub_1000DC040((uint64_t)v138);
        sub_1000DC080(v3);
        swift_release(v105);
        v104 = *(uint64_t (**)(void))(v1 + 8);
        return v104();
      }
      sub_10001A4CC(v117, (uint64_t)v115);
      v57 = *(_QWORD *)(v1 + 832);
      v58 = *(_QWORD *)(v1 + 840);
      v59 = sub_100036228(v115, v57);
      v60 = *(_QWORD *)(v57 - 8);
      v61 = swift_task_alloc((*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v60 + 16))(v61, v59, v57);
      v62 = sub_1000DC0E0();
      BinaryFloatingPoint.init<A>(_:)(v61, &type metadata for Double, v57, v62, v58);
      swift_task_dealloc(v61);
      v63 = v56 + *(double *)(v1 + 944);
      *(_QWORD *)(v1 + 408) = &type metadata for Double;
      *(_QWORD *)(v1 + 416) = v62;
      *(double *)(v1 + 384) = v63;
      *(_BYTE *)(v1 + 424) = 3;
      v55 = v1 + 528;
      sub_1000DC028((__int128 *)(v1 + 384), v132);
      v64 = (_QWORD *)(v1 + 808);
      goto LABEL_95;
    }
    v25 = *(_QWORD *)(v1 + 240);
    v26 = v1 + 672;
    sub_1000DBFF4((uint64_t)v138, (uint64_t)v116);
    if (*(_BYTE *)(v1 + 712) != 2)
      goto LABEL_112;
    v124 = v25;
    v119 = v20;
    sub_10001A4CC(v116, (uint64_t)v123);
    isUniquelyReferenced_nonNull_native = *(_QWORD *)(v1 + 792);
    v27 = *(_QWORD *)(v1 + 800);
    v28 = sub_100036228(v123, isUniquelyReferenced_nonNull_native);
    v29 = *(_QWORD **)(isUniquelyReferenced_nonNull_native - 8);
    v30 = (v29[8] + 15) & 0xFFFFFFFFFFFFFFF0;
    v31 = swift_task_alloc(v30);
    v32 = (void (*)(uint64_t, uint64_t, uint64_t))v29[2];
    v32(v31, (uint64_t)v28, isUniquelyReferenced_nonNull_native);
    LOBYTE(v28) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
    v126 = v30;
    v33 = swift_task_alloc(v30);
    v129 = v31;
    v125 = v32;
    v32(v33, v31, isUniquelyReferenced_nonNull_native);
    v121 = v33;
    v114 = v29;
    if ((v28 & 1) == 0)
    {
      v128 = (void (*)(uint64_t, uint64_t))v29[1];
      v128(v33, isUniquelyReferenced_nonNull_native);
LABEL_64:
      v37 = v27;
      v20 = v119;
      v0 = v124;
      goto LABEL_80;
    }
    v34 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
    v35 = (void (*)(uint64_t, uint64_t))v29[1];
    v35(v33, isUniquelyReferenced_nonNull_native);
    v128 = v35;
    if (v34 <= 64)
      goto LABEL_64;
    v36 = swift_task_alloc(v126);
    v32(v36, v129, isUniquelyReferenced_nonNull_native);
    *v113 = 0x8000000000000000;
    v37 = v27;
    v20 = v119;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27) & 1) != 0)
    {
      v38 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
      v0 = v124;
      if (v38 >= 64)
      {
        v70 = swift_task_alloc(v126);
        v71 = sub_1000DBFB0();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v113, &type metadata for Int64, v71, isUniquelyReferenced_nonNull_native, v37);
        v72 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v70, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8));
        v35(v70, isUniquelyReferenced_nonNull_native);
        v35(v36, isUniquelyReferenced_nonNull_native);
        v73 = v70;
        v0 = v124;
        result = swift_task_dealloc(v73);
        if ((v72 & 1) != 0)
          goto LABEL_123;
      }
      else
      {
        v39 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v37);
        result = ((uint64_t (*)(uint64_t, uint64_t))v35)(v36, isUniquelyReferenced_nonNull_native);
        if (v39 < *v113)
          goto LABEL_123;
      }
      goto LABEL_79;
    }
    v65 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
    v66 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v37);
    if ((v65 & 1) != 0)
    {
      if (v66 > 64)
      {
        v67 = swift_task_alloc(v126);
        v68 = sub_1000DBFB0();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v113, &type metadata for Int64, v68, isUniquelyReferenced_nonNull_native, v37);
        v69 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v67, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8));
        v35(v67, isUniquelyReferenced_nonNull_native);
        v35(v36, isUniquelyReferenced_nonNull_native);
        result = swift_task_dealloc(v67);
        v0 = v124;
        if ((v69 & 1) != 0)
          goto LABEL_123;
        goto LABEL_79;
      }
      v76 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 16);
      v110 = v76;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v76, isUniquelyReferenced_nonNull_native, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
      v78 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v76, isUniquelyReferenced_nonNull_native, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v80 = v78;
      v108 = v78;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1001F5420, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v81 = swift_task_alloc(v126);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v80, isUniquelyReferenced_nonNull_native, v110);
      LOBYTE(v110) = dispatch thunk of static Comparable.< infix(_:_:)(v36, v81, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8));
      v0 = (unint64_t)v128;
      v128(v81, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v81);
      swift_task_dealloc(v108);
      v5 = swift_task_alloc(v126);
      ((void (*)(uint64_t, uint64_t, uint64_t))v114[4])(v5, v36, isUniquelyReferenced_nonNull_native);
      if ((v110 & 1) != 0)
        goto LABEL_122;
      v111 = *v113;
      v109 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v37);
      v128(v5, isUniquelyReferenced_nonNull_native);
      result = swift_task_dealloc(v5);
      v75 = v109 < v111;
LABEL_76:
      v0 = v124;
      if (v75)
        goto LABEL_123;
      goto LABEL_79;
    }
    if (v66 < 64)
    {
      v74 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v37);
      result = ((uint64_t (*)(uint64_t, uint64_t))v35)(v36, isUniquelyReferenced_nonNull_native);
      v75 = v74 < *v113;
      goto LABEL_76;
    }
    v35(v36, isUniquelyReferenced_nonNull_native);
    v0 = v124;
LABEL_79:
    swift_task_dealloc(v36);
LABEL_80:
    v82 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v37);
    v83 = swift_task_alloc(v126);
    v125(v83, v129, isUniquelyReferenced_nonNull_native);
    if (v82 < 65)
    {
      v84 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v37);
      v128(v83, isUniquelyReferenced_nonNull_native);
      v85 = v121;
      if (v84 != 64
        || (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v37) & 1) != 0)
      {
        goto LABEL_93;
      }
    }
    else
    {
      v128(v83, isUniquelyReferenced_nonNull_native);
    }
    v0 = swift_task_alloc(v126);
    v125(v0, v129, isUniquelyReferenced_nonNull_native);
    *v118 = 0x7FFFFFFFFFFFFFFFLL;
    v86 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v37);
    v87 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v37);
    if ((v86 & 1) == 0)
    {
      if (v87 > 63)
      {
        *v112 = 0x7FFFFFFFFFFFFFFFLL;
        v120 = swift_task_alloc(v126);
        ((void (*)(uint64_t, unint64_t, uint64_t))v114[4])(v120, v0, isUniquelyReferenced_nonNull_native);
        v90 = swift_task_alloc(v126);
        v91 = sub_1000DBFB0();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v112, &type metadata for Int64, v91, isUniquelyReferenced_nonNull_native, v37);
        v127 = dispatch thunk of static Comparable.< infix(_:_:)(v90, v120, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8));
        v128(v90, isUniquelyReferenced_nonNull_native);
        v5 = v120;
        v128(v120, isUniquelyReferenced_nonNull_native);
        swift_task_dealloc(v90);
        swift_task_dealloc(v120);
        v85 = v121;
        if ((v127 & 1) != 0)
          goto LABEL_120;
        goto LABEL_92;
      }
LABEL_89:
      v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v37);
      v128(v0, isUniquelyReferenced_nonNull_native);
      v85 = v121;
      if (*v118 < v5)
        goto LABEL_120;
      goto LABEL_92;
    }
    if (v87 <= 64)
      goto LABEL_89;
    v88 = swift_task_alloc(v126);
    v89 = sub_1000DBFB0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v118, &type metadata for Int64, v89, isUniquelyReferenced_nonNull_native, v37);
    v5 = dispatch thunk of static Comparable.< infix(_:_:)(v88, v0, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8));
    v128(v88, isUniquelyReferenced_nonNull_native);
    v128(v0, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v88);
    v85 = v121;
    if ((v5 & 1) != 0)
      goto LABEL_120;
LABEL_92:
    swift_task_dealloc(v0);
    v0 = v124;
LABEL_93:
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    v92 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v37);
    v128(v129, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v129);
    v53 = __OFADD__(v92, v0);
    v5 = v92 + v0;
    if (v53)
      goto LABEL_119;
    *(_QWORD *)(v1 + 744) = &type metadata for Int64;
    *(_QWORD *)(v1 + 752) = sub_1000DBFB0();
    *(_QWORD *)(v1 + 720) = v5;
    *(_BYTE *)(v1 + 760) = 2;
    v55 = v1 + 528;
    sub_1000DC028((__int128 *)(v1 + 720), v132);
    v64 = (_QWORD *)(v1 + 768);
LABEL_95:
    sub_10002BB90(v64);
LABEL_96:
    swift_beginAccess(v8, v133, 33, 0);
    sub_1000DBFF4(v55, (uint64_t)v134);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v5 = *v8;
    v146 = *v8;
    *v8 = 0x8000000000000000;
    v0 = sub_10002FF38(v20, v19);
    v94 = *(_QWORD *)(v5 + 16);
    v95 = (v93 & 1) == 0;
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
      goto LABEL_116;
    v97 = v93;
    if (*(_QWORD *)(v5 + 24) >= v96)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v93 & 1) == 0)
          goto LABEL_100;
      }
      else
      {
        sub_1000F6DF4();
        v5 = v146;
        isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v97 & 1) == 0)
          goto LABEL_100;
      }
    }
    else
    {
      sub_100162410(v96, isUniquelyReferenced_nonNull_native);
      v5 = v146;
      v98 = sub_10002FF38(v20, v19);
      if ((v97 & 1) != (v99 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v0 = v98;
      isUniquelyReferenced_nonNull_native = v1 + 16;
      if ((v97 & 1) == 0)
      {
LABEL_100:
        *(_QWORD *)(v5 + 8 * (v0 >> 6) + 64) |= 1 << v0;
        v100 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v0);
        *v100 = v20;
        v100[1] = v19;
        sub_1000DC028(v134, (_OWORD *)(*(_QWORD *)(v5 + 56) + 48 * v0));
        v101 = *(_QWORD *)(v5 + 16);
        v53 = __OFADD__(v101, 1);
        v102 = v101 + 1;
        if (v53)
          goto LABEL_118;
        *(_QWORD *)(v5 + 16) = v102;
        swift_bridgeObjectRetain(v19);
        goto LABEL_105;
      }
    }
    sub_1000DC0AC((uint64_t)v134, *(_QWORD *)(v5 + 56) + 48 * v0);
LABEL_105:
    v103 = *v8;
    *v8 = v5;
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v103);
    swift_endAccess(v133);
    sub_1000DC040((uint64_t)v132);
    v10 = v1 + 576;
LABEL_7:
    sub_1000DC040(v10);
    v3 = (_OWORD *)(v1 + 192);
    sub_1000DC080((_QWORD *)(v1 + 192));
    v7 = v144;
  }
  v23 = v1 + 288;
  *(_QWORD *)(v1 + 320) = 0;
  *v137 = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_BYTE *)(v1 + 328) = -1;
LABEL_45:
  sub_1000087A0(v23, &qword_100262C90);
  sub_1000DBF64((uint64_t)v3, (uint64_t)v136);
  if (*(_BYTE *)(v1 + 185))
  {
    if (*(_BYTE *)(v1 + 185) == 1)
    {
      v41 = *(_QWORD *)(v1 + 144);
      *(_QWORD *)(v1 + 360) = &type metadata for Int64;
      *(_QWORD *)(v1 + 368) = sub_1000DBFB0();
      *(_QWORD *)(v1 + 336) = v41;
      v42 = 2;
    }
    else
    {
      v43 = *(_QWORD *)(v1 + 144);
      *(_QWORD *)(v1 + 360) = &type metadata for Double;
      *(_QWORD *)(v1 + 368) = sub_1000DC0E0();
      *(_QWORD *)(v1 + 336) = v43;
      v42 = 3;
    }
    *(_BYTE *)(v1 + 376) = v42;
  }
  else
  {
    sub_1000DC028(v136, v143);
  }
  swift_beginAccess(v8, v139, 33, 0);
  sub_1000DBFF4((uint64_t)v143, (uint64_t)v140);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v5 = *v8;
  v145 = *v8;
  *v8 = 0x8000000000000000;
  v0 = sub_10002FF38(v20, v19);
  v45 = *(_QWORD *)(v5 + 16);
  v46 = (v44 & 1) == 0;
  v47 = v45 + v46;
  if (!__OFADD__(v45, v46))
  {
    v48 = v44;
    if (*(_QWORD *)(v5 + 24) >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v44 & 1) == 0)
          goto LABEL_58;
      }
      else
      {
        sub_1000F6DF4();
        v5 = v145;
        isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v48 & 1) == 0)
          goto LABEL_58;
      }
    }
    else
    {
      sub_100162410(v47, isUniquelyReferenced_nonNull_native);
      v5 = v145;
      v49 = sub_10002FF38(v20, v19);
      if ((v48 & 1) != (v50 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v0 = v49;
      isUniquelyReferenced_nonNull_native = v1 + 16;
      if ((v48 & 1) == 0)
      {
LABEL_58:
        *(_QWORD *)(v5 + 8 * (v0 >> 6) + 64) |= 1 << v0;
        v51 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v0);
        *v51 = v20;
        v51[1] = v19;
        sub_1000DC028(v140, (_OWORD *)(*(_QWORD *)(v5 + 56) + 48 * v0));
        v52 = *(_QWORD *)(v5 + 16);
        v53 = __OFADD__(v52, 1);
        v54 = v52 + 1;
        if (v53)
          goto LABEL_117;
        *(_QWORD *)(v5 + 16) = v54;
        swift_bridgeObjectRetain(v19);
        goto LABEL_6;
      }
    }
    sub_1000DC0AC((uint64_t)v140, *(_QWORD *)(v5 + 56) + 48 * v0);
LABEL_6:
    v9 = *v8;
    *v8 = v5;
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v9);
    swift_endAccess(v139);
    v10 = v1 + 336;
    goto LABEL_7;
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  ((void (*)(uint64_t, uint64_t))v0)(v5, isUniquelyReferenced_nonNull_native);
  result = swift_task_dealloc(v5);
LABEL_123:
  __break(1u);
  return result;
}

uint64_t sub_1000D8530(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v1;
  return swift_task_switch(sub_1000D8548, v1, 0);
}

uint64_t sub_1000D8548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  char v16;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 16) = v2;
  swift_errorRetain(v2);
  v3 = sub_100037A5C(&qword_100265260);
  v4 = String.init<A>(describing:)(v0 + 16, v3);
  v6 = v5;
  v14 = &type metadata for String;
  v7 = sub_1000394E4();
  v15 = v7;
  v12 = v4;
  v13 = v6;
  v16 = 1;
  swift_beginAccess(v1 + 112, v0 + 16, 33, 0);
  sub_1000DE458((uint64_t)&v12, 0xD000000000000010, 0x80000001001FE840);
  swift_endAccess(v0 + 16);
  swift_getErrorValue(v2, v0 + 96, v0 + 64);
  v8 = Error.code.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v14 = &type metadata for Int;
  v15 = sub_1000DD5DC();
  v12 = v8;
  v16 = 2;
  swift_beginAccess(v1 + 112, v0 + 16, 33, 0);
  sub_1000DE458((uint64_t)&v12, 0x646F43726F727265, 0xE900000000000065);
  swift_endAccess(v0 + 16);
  swift_getErrorValue(v2, v0 + 88, v0 + 40);
  v9 = Error.domain.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v14 = &type metadata for String;
  v15 = v7;
  v12 = v9;
  v13 = v10;
  v16 = 1;
  swift_beginAccess(v1 + 112, v0 + 16, 33, 0);
  sub_1000DE458((uint64_t)&v12, 0x6D6F44726F727265, 0xEB000000006E6961);
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D8738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  v1 = v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_identifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime, &qword_100262CD0);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime, &qword_100262CD0);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000D87C4()
{
  return type metadata accessor for AnalyticsEvent(0);
}

uint64_t type metadata accessor for AnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100262A90;
  if (!qword_100262A90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnalyticsEvent);
  return result;
}

void sub_1000D8808(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;

  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = &unk_1001F54A0;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000D88B4(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_1000D88B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100262AB0)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100262AB0);
  }
}

unint64_t sub_1000D8908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  _QWORD *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t result;
  double v46;
  char v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  __int128 v54[3];
  __int128 v55;
  void *v56;
  unint64_t v57;
  __int16 v58;

  v1 = v0;
  v2 = sub_100037A5C(&qword_100262CD0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v50 = (uint64_t)&v49 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v49 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v49 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  v16 = type metadata accessor for DispatchTime(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v51 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v49 - v20;
  v22 = sub_100037A5C(&qword_100262CD8);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001F35F0;
  v24 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  objc_msgSend(v24, "timeIntervalSince1970");
  v26 = v25;

  *(_QWORD *)(v23 + 56) = &type metadata for Double;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v23 + 32) = v26;
  v27 = String.init(format:_:)(26149, 0xE200000000000000, v23);
  v29 = v28;
  v56 = &type metadata for String;
  v57 = sub_1000394E4();
  *(_QWORD *)&v55 = v27;
  *((_QWORD *)&v55 + 1) = v29;
  v58 = 1;
  sub_1000DBF98(&v55, v54);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v53 = _swiftEmptyDictionarySingleton;
  sub_100164288(v54, 0x6D695468636F7065, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v31 = v1;
  v32 = v53;
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000DD54C(v1 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime, (uint64_t)v15);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v33(v15, 1, v16) == 1)
  {
    sub_1000087A0((uint64_t)v15, &qword_100262CD0);
    return (unint64_t)v32;
  }
  v34 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 32);
  v49 = v21;
  v35 = v21;
  v36 = v34;
  v34(v35, v15, v16);
  v37 = v31 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime;
  swift_beginAccess(v37, &v53, 0, 0);
  sub_1000DD54C(v37, (uint64_t)v13);
  v38 = v33(v13, 1, v16);
  v39 = sub_1000087A0((uint64_t)v13, &qword_100262CD0);
  if (v38 == 1)
  {
    static DispatchTime.now()(v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
    v40 = v50;
    sub_10000EF6C((uint64_t)v10, v50, &qword_100262CD0);
    swift_beginAccess(v37, &v55, 33, 0);
    sub_1000DD594(v40, v37);
    swift_endAccess(&v55);
  }
  sub_1000DD54C(v37, (uint64_t)v5);
  if (v33(v5, 1, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v49, v16);
    sub_1000087A0((uint64_t)v5, &qword_100262CD0);
    return (unint64_t)v32;
  }
  v41 = v51;
  v42 = v36(v51, v5, v16);
  v43 = DispatchTime.uptimeNanoseconds.getter(v42);
  v44 = v49;
  result = DispatchTime.uptimeNanoseconds.getter(v43);
  if (v43 >= result)
  {
    v46 = (double)(v43 - result) / 1000000000.0;
    v56 = &type metadata for Double;
    v57 = sub_1000DC0E0();
    *(double *)&v55 = v46;
    v58 = 3;
    sub_1000DBF98(&v55, v54);
    v47 = swift_isUniquelyReferenced_nonNull_native(v32);
    v52 = v32;
    sub_100164288(v54, 0x6E6F697461727564, 0xE800000000000000, v47);
    v32 = v52;
    swift_bridgeObjectRelease(0x8000000000000000);
    v48 = *(void (**)(char *, uint64_t))(v17 + 8);
    v48(v41, v16);
    v48(v44, v16);
    return (unint64_t)v32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D8D8C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AC50);
  sub_100037A9C(v0, (uint64_t)qword_10027AC50);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000012, 0x80000001001F54A0);
}

uint64_t sub_1000D8E0C()
{
  uint64_t result;

  result = Set.init(minimumCapacity:)(0, &type metadata for String, &protocol witness table for String);
  qword_10027AC68 = result;
  return result;
}

uint64_t sub_1000D8E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_100262A50);
  v1 = sub_100037A9C(v0, (uint64_t)qword_100262A50);
  if (qword_10025F908 != -1)
    swift_once(&qword_10025F908, sub_1000D8D8C);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AC50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000D8ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch(sub_1000D8EE4, v1, 0);
}

uint64_t sub_1000D8EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    if (qword_10025F918 != -1)
      swift_once(&qword_10025F918, sub_1000D8E3C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100037A9C(v2, (uint64_t)qword_100262A50);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (!os_log_type_enabled(v4, v5))
      goto LABEL_16;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SPAnalytics not submitting analytics during unit tests.", v6, 2u);
    v7 = v6;
  }
  else
  {
    if (qword_10025F910 != -1)
      swift_once(&qword_10025F910, sub_1000D8E0C);
    v9 = (_QWORD *)(v1 + 64);
    v8 = *(_QWORD *)(v1 + 64);
    v10 = qword_10027AC68;
    v11 = *(_QWORD *)(v8 + 120);
    *(_QWORD *)(v1 + 80) = v11;
    v12 = *(_QWORD *)(v8 + 128);
    *(_QWORD *)(v1 + 88) = v12;
    swift_bridgeObjectRetain(v12);
    LOBYTE(v10) = sub_10001A808(v11, v12, v10);
    swift_bridgeObjectRelease(v12);
    if ((v10 & 1) == 0)
      return swift_task_switch(sub_1000D91DC, *(_QWORD *)(v1 + 64), 0);
    if (qword_10025F918 != -1)
      swift_once(&qword_10025F918, sub_1000D8E3C);
    v13 = *v9;
    v14 = type metadata accessor for Logger(0);
    sub_100037A9C(v14, (uint64_t)qword_100262A50);
    v15 = swift_retain(v13);
    v4 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v4, v16))
    {
      swift_release(*v9);
      goto LABEL_16;
    }
    v20 = *v9;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v21 = v18;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v1 + 56) = sub_10002BA84(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release(v20);
    _os_log_impl((void *)&_mh_execute_header, v4, v16, "AnalyticsPublisher not submitting disallowed analytics event %{public}s to CA.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v7 = v17;
  }
  swift_slowDealloc(v7, -1, -1);
LABEL_16:

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000D91DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = unk_100262CB4;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100262CB0 + dword_100262CB0);
  swift_retain(*(_QWORD *)(v0 + 64));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_1000D9248;
  return v4(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000D9248()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  swift_task_dealloc(*(_QWORD *)(*v1 + 96));
  swift_release(v3);
  v4 = *(_QWORD *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease(v0);
    v5 = sub_1000DDBF0;
  }
  else
  {
    v5 = sub_1000D92C8;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000D92C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[8];
  v2 = v0[9];
  swift_beginAccess(v1 + 112, v0 + 2, 0, 0);
  v3 = *(_QWORD *)(v1 + 112);
  v0[13] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_task_switch(sub_1000D9320, v2, 0);
}

uint64_t sub_1000D9320()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSString v15;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = sub_1000DC168(v1);
  swift_bridgeObjectRelease(v1);
  if (qword_10025F918 != -1)
    swift_once(&qword_10025F918, sub_1000D8E3C);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_100262A50);
  swift_retain_n(v3, 2);
  v5 = swift_bridgeObjectRetain_n(v2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 64);
    v10 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v20 = v19;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v9, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v8);
    swift_release_n(v18, 2);
    *(_WORD *)(v10 + 12) = 2080;
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v11 = swift_bridgeObjectRetain(v2);
    v12 = Dictionary.description.getter(v11);
    v14 = v13;
    swift_bridgeObjectRelease(v2);
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Analytics: %{public}s, %s.", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 64), 2);
    swift_bridgeObjectRelease_n(v2, 2);
  }

  v15 = String._bridgeToObjectiveC()();
  sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  AnalyticsSendEvent(v15, isa);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D95FC()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AnalyticsPublisher()
{
  return objc_opt_self(_TtC13findmylocated18AnalyticsPublisher);
}

_QWORD *destroy for AnalyticsEvent.DiscreteType(_QWORD *a1)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)a1 + 40);
  if (v1 >= 4)
    v1 = *(_DWORD *)a1 + 4;
  if (v1)
    return (_QWORD *)sub_10002BB90(a1);
  return a1;
}

uint64_t initializeWithCopy for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  while (2)
  {
    switch(v3)
    {
      case 0:
        v4 = 0;
        *(_BYTE *)a1 = *(_BYTE *)a2;
        break;
      case 1:
        v7 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v7;
        (**(void (***)(uint64_t))(v7 - 8))(a1);
        v4 = 1;
        break;
      case 2:
        v5 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t))(v5 - 8))(a1);
        v4 = 2;
        break;
      case 3:
        v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t))(v6 - 8))(a1);
        v4 = 3;
        break;
      default:
        v3 = *(_DWORD *)a2 + 4;
        continue;
    }
    break;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4)
      sub_10002BB90((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_BYTE *)a1 = *(_BYTE *)a2;
          break;
        case 1:
          v7 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v7;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
          v6 = 1;
          break;
        case 2:
          v8 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v8;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
          v6 = 2;
          break;
        case 3:
          v9 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v9;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
          v6 = 3;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4)
      sub_10002BB90((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_BYTE *)a1 = *(_BYTE *)a2;
          break;
        case 1:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 1;
          break;
        case 2:
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 2;
          break;
        case 3:
          v9 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 3;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.DiscreteType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.DiscreteType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000D99A4(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t sub_1000D99C0(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.DiscreteType()
{
  return &type metadata for AnalyticsEvent.DiscreteType;
}

uint64_t sub_1000D99F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 968) = a2;
  *(_QWORD *)(v2 + 960) = a1;
  return swift_task_switch(sub_1000D9A18, a1, 0);
}

uint64_t sub_1000D9A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10025F910 != -1)
    swift_once(&qword_10025F910, sub_1000D8E0C);
  v1 = *(_QWORD *)(v0 + 960);
  v2 = qword_10027AC68;
  v4 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain(v3);
  LOBYTE(v2) = sub_10001A808(v4, v3, v2);
  swift_bridgeObjectRelease(v3);
  if ((v2 & 1) == 0)
    return swift_task_switch(sub_1000D9C60, *(_QWORD *)(v0 + 968), 0);
  v5 = (_QWORD *)(v0 + 960);
  if (qword_10025F908 != -1)
    swift_once(&qword_10025F908, sub_1000D8D8C);
  v6 = *v5;
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AC50);
  v8 = swift_retain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v14 = *v5;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = v12;
    *(_DWORD *)v11 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(_QWORD *)(v0 + 952) = sub_10002BA84(v4, v3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 952, v0 + 960, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v3);
    swift_release(v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_release(*v5);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D9C60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 960);
  *(_QWORD *)(v0 + 976) = sub_1000D8908();
  return swift_task_switch(sub_1000D9CA4, v1, 0);
}

uint64_t sub_1000D9CA4()
{
  uint64_t v0;
  uint64_t isUniquelyReferenced_nonNull_native;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  _OWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD *, uint64_t);
  unint64_t v60;
  double v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t AssociatedTypeWitness;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  char v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(void);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  char v129;
  void (*v130)(uint64_t, uint64_t);
  int64_t v131;
  __int128 *v132;
  uint64_t v133;
  __int128 *v134;
  uint64_t v135;
  __int128 *v136;
  _OWORD *v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 *v140;
  int64_t v141;
  _OWORD *v142;
  _OWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  isUniquelyReferenced_nonNull_native = v0 + 16;
  v142 = (_OWORD *)(v0 + 80);
  v136 = (__int128 *)(v0 + 144);
  v2 = (_OWORD *)(v0 + 192);
  v132 = (__int128 *)(v0 + 240);
  v3 = v0 + 288;
  v143 = (_OWORD *)(v0 + 336);
  v118 = (__int128 *)(v0 + 432);
  v140 = (__int128 *)(v0 + 480);
  v137 = (_OWORD *)(v0 + 528);
  v138 = (_OWORD *)(v0 + 576);
  v117 = (__int128 *)(v0 + 672);
  v127 = (_QWORD *)(v0 + 768);
  v116 = (_QWORD *)(v0 + 808);
  v133 = v0 + 848;
  v134 = (__int128 *)(v0 + 624);
  v139 = v0 + 872;
  v119 = (uint64_t *)(v0 + 920);
  v108 = (_QWORD *)(v0 + 928);
  v109 = (uint64_t *)(v0 + 936);
  v4 = *(_QWORD *)(v0 + 976);
  v135 = v4;
  v5 = -1 << *(_BYTE *)(v4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v126 = v4 + 64;
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v8 = (uint64_t *)(*(_QWORD *)(v0 + 960) + 112);
  swift_beginAccess(v8, v0 + 896, 0, 0);
  v141 = 0;
  v131 = (unint64_t)(63 - v5) >> 6;
  v9 = 3;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v13 = (v7 - 1) & v7;
      v14 = v12 | (v141 << 6);
LABEL_10:
      v144 = v13;
      v15 = (_QWORD *)(*(_QWORD *)(v135 + 48) + 16 * v14);
      v16 = v15[1];
      *(_QWORD *)(v0 + 80) = *v15;
      *(_QWORD *)(v0 + 88) = v16;
      sub_1000DBF64(*(_QWORD *)(v135 + 56) + 48 * v14, v0 + 96);
      swift_bridgeObjectRetain(v16);
      goto LABEL_29;
    }
    v17 = v141 + 1;
    if (__OFADD__(v141, 1))
      goto LABEL_113;
    if (v17 < v131)
    {
      v18 = *(_QWORD *)(v126 + 8 * v17);
      if (v18)
        goto LABEL_14;
      v19 = v141 + 2;
      ++v141;
      if (v17 + 1 < v131)
      {
        v18 = *(_QWORD *)(v126 + 8 * v19);
        if (v18)
          goto LABEL_17;
        v141 = v17 + 1;
        if (v17 + 2 < v131)
        {
          v18 = *(_QWORD *)(v126 + 8 * (v17 + 2));
          if (v18)
          {
            v17 += 2;
            goto LABEL_14;
          }
          v19 = v17 + 3;
          v141 = v17 + 2;
          if (v17 + 3 < v131)
            break;
        }
      }
    }
LABEL_28:
    v144 = 0;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *v142 = 0u;
LABEL_29:
    sub_10000EF6C((uint64_t)v142, isUniquelyReferenced_nonNull_native, &qword_100262C88);
    v20 = *(_QWORD *)(v0 + 24);
    if (!v20)
    {
      swift_release(*(_QWORD *)(v0 + 976));
      v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }
    v21 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    sub_1000DBF98((__int128 *)(v0 + 32), v2);
    v22 = *v8;
    v145 = v21;
    if (!*(_QWORD *)(*v8 + 16))
    {
      *(_QWORD *)(v3 + 32) = 0;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_45:
      sub_1000087A0(v3, &qword_100262C90);
      sub_1000DBF64((uint64_t)v2, (uint64_t)v136);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          v39 = *(_QWORD *)(v0 + 144);
          *(_QWORD *)(v0 + 360) = &type metadata for Int64;
          *(_QWORD *)(v0 + 368) = sub_1000DBFB0();
          *(_QWORD *)(v0 + 336) = v39;
          *(_BYTE *)(v0 + 376) = 2;
        }
        else
        {
          v40 = *(_QWORD *)(v0 + 144);
          *(_QWORD *)(v0 + 360) = &type metadata for Double;
          *(_QWORD *)(v0 + 368) = sub_1000DC0E0();
          *(_QWORD *)(v0 + 336) = v40;
          *(_BYTE *)(v0 + 376) = 3;
        }
      }
      else
      {
        sub_1000DC028(v136, v143);
      }
      swift_beginAccess(v8, v139, 33, 0);
      sub_1000DBFF4((uint64_t)v143, (uint64_t)v140);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      v5 = *v8;
      v146 = *v8;
      *v8 = 0x8000000000000000;
      v42 = sub_10002FF38(v145, v20);
      v43 = *(_QWORD *)(v5 + 16);
      v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
      v46 = v41;
      if (*(_QWORD *)(v5 + 24) >= v45)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v41 & 1) == 0)
            goto LABEL_57;
        }
        else
        {
          sub_1000F6DF4();
          v5 = v146;
          isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v46 & 1) == 0)
            goto LABEL_57;
        }
      }
      else
      {
        sub_100162410(v45, isUniquelyReferenced_nonNull_native);
        v5 = v146;
        v47 = sub_10002FF38(v145, v20);
        if ((v46 & 1) != (v48 & 1))
          goto LABEL_109;
        v42 = v47;
        isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v46 & 1) == 0)
        {
LABEL_57:
          *(_QWORD *)(v5 + 8 * (v42 >> 6) + 64) |= 1 << v42;
          v49 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v42);
          *v49 = v145;
          v49[1] = v20;
          sub_1000DC028(v140, (_OWORD *)(*(_QWORD *)(v5 + 56) + 48 * v42));
          v50 = *(_QWORD *)(v5 + 16);
          v51 = __OFADD__(v50, 1);
          v52 = v50 + 1;
          if (v51)
            goto LABEL_115;
          *(_QWORD *)(v5 + 16) = v52;
          swift_bridgeObjectRetain(v20);
          goto LABEL_6;
        }
      }
      sub_1000DC0AC((uint64_t)v140, *(_QWORD *)(v5 + 56) + 48 * v42);
LABEL_6:
      v10 = *v8;
      *v8 = v5;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v20);
      swift_endAccess(v139);
      v11 = v0 + 336;
      goto LABEL_7;
    }
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    v23 = sub_10002FF38(v21, v20);
    if ((v24 & 1) != 0)
    {
      sub_1000DBFF4(*(_QWORD *)(v22 + 56) + 48 * v23, v3);
    }
    else
    {
      *(_QWORD *)(v3 + 32) = 0;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v20);
    if (*(unsigned __int8 *)(v0 + 328) == 255)
      goto LABEL_45;
    sub_1000DC028((__int128 *)v3, v138);
    sub_1000DBF64((uint64_t)v2, (uint64_t)v132);
    if (!*(_BYTE *)(v0 + 281))
    {
      v36 = (_OWORD *)(v0 + 528);
      sub_1000DC028(v132, v137);
      goto LABEL_94;
    }
    if (*(_BYTE *)(v0 + 281) == 1)
    {
      v25 = *(_QWORD *)(v0 + 240);
      v26 = v0 + 672;
      sub_1000DBFF4((uint64_t)v138, (uint64_t)v117);
      if (*(_BYTE *)(v0 + 712) != 2)
        goto LABEL_110;
      v125 = v25;
      sub_10001A4CC(v117, (uint64_t)v127);
      isUniquelyReferenced_nonNull_native = *(_QWORD *)(v0 + 792);
      v27 = *(_QWORD *)(v0 + 800);
      v28 = sub_100036228(v127, isUniquelyReferenced_nonNull_native);
      v29 = *(_QWORD **)(isUniquelyReferenced_nonNull_native - 8);
      v30 = (v29[8] + 15) & 0xFFFFFFFFFFFFFFF0;
      v31 = swift_task_alloc(v30);
      v32 = (void (*)(uint64_t, _QWORD *, uint64_t))v29[2];
      v32(v31, v28, isUniquelyReferenced_nonNull_native);
      LOBYTE(v28) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
      v128 = v30;
      v33 = swift_task_alloc(v30);
      v32(v33, (_QWORD *)v31, isUniquelyReferenced_nonNull_native);
      v124 = v33;
      v110 = v29;
      if ((v28 & 1) != 0)
      {
        v34 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
        v35 = (void (*)(uint64_t, uint64_t))v29[1];
        v35(v33, isUniquelyReferenced_nonNull_native);
        v36 = (_OWORD *)(v0 + 528);
        v130 = v35;
        if (v34 > 64)
        {
          v37 = swift_task_alloc(v128);
          v32(v37, (_QWORD *)v31, isUniquelyReferenced_nonNull_native);
          *v109 = 0x8000000000000000;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27) & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27) >= 64)
            {
              v66 = swift_task_alloc(v128);
              v67 = sub_1000DBFB0();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v109, &type metadata for Int64, v67, isUniquelyReferenced_nonNull_native, v27);
              v122 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v66, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8));
              v130(v66, isUniquelyReferenced_nonNull_native);
              v130(v37, isUniquelyReferenced_nonNull_native);
              v68 = v66;
              v36 = (_OWORD *)(v0 + 528);
              result = swift_task_dealloc(v68);
              if ((v122 & 1) != 0)
                goto LABEL_121;
            }
            else
            {
              v120 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
              result = ((uint64_t (*)(uint64_t, uint64_t))v130)(v37, isUniquelyReferenced_nonNull_native);
              if (v120 < *v109)
                goto LABEL_121;
            }
          }
          else
          {
            v62 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
            v121 = v37;
            v63 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
            if ((v62 & 1) != 0)
            {
              if (v63 <= 64)
              {
                v69 = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16);
                v113 = v69;
                AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v69, isUniquelyReferenced_nonNull_native, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
                v71 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
                AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v69, isUniquelyReferenced_nonNull_native, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                v73 = v71;
                v107 = v71;
                dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1001F5420, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
                v74 = v27;
                v75 = swift_task_alloc(v128);
                dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v73, isUniquelyReferenced_nonNull_native, v113);
                v76 = v74;
                LOBYTE(v113) = dispatch thunk of static Comparable.< infix(_:_:)(v121, v75, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v74 + 32) + 8));
                v9 = (uint64_t)v130;
                v130(v75, isUniquelyReferenced_nonNull_native);
                swift_task_dealloc(v75);
                swift_task_dealloc(v107);
                v5 = swift_task_alloc(v128);
                ((void (*)(uint64_t, uint64_t, uint64_t))v110[4])(v5, v121, isUniquelyReferenced_nonNull_native);
                if ((v113 & 1) != 0)
                  goto LABEL_120;
                v114 = *v109;
                v27 = v76;
                v77 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v76);
                v130(v5, isUniquelyReferenced_nonNull_native);
                result = swift_task_dealloc(v5);
                v78 = v77 < v114;
                v36 = (_OWORD *)(v0 + 528);
                v37 = v121;
                if (v78)
                  goto LABEL_121;
              }
              else
              {
                v64 = swift_task_alloc(v128);
                v65 = sub_1000DBFB0();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v109, &type metadata for Int64, v65, isUniquelyReferenced_nonNull_native, v27);
                v111 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v64, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8));
                v130(v64, isUniquelyReferenced_nonNull_native);
                v130(v37, isUniquelyReferenced_nonNull_native);
                result = swift_task_dealloc(v64);
                v36 = (_OWORD *)(v0 + 528);
                if ((v111 & 1) != 0)
                  goto LABEL_121;
              }
            }
            else
            {
              v36 = (_OWORD *)(v0 + 528);
              if (v63 < 64)
              {
                v112 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
                result = ((uint64_t (*)(uint64_t, uint64_t))v130)(v37, isUniquelyReferenced_nonNull_native);
                if (v112 < *v109)
                  goto LABEL_121;
              }
              else
              {
                v130(v37, isUniquelyReferenced_nonNull_native);
              }
            }
          }
          swift_task_dealloc(v37);
        }
      }
      else
      {
        v130 = (void (*)(uint64_t, uint64_t))v29[1];
        v130(v33, isUniquelyReferenced_nonNull_native);
        v36 = (_OWORD *)(v0 + 528);
      }
      v79 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
      v9 = v27;
      v80 = swift_task_alloc(v128);
      v32(v80, (_QWORD *)v31, isUniquelyReferenced_nonNull_native);
      if (v79 >= 65)
      {
        v130(v80, isUniquelyReferenced_nonNull_native);
        goto LABEL_82;
      }
      v81 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
      v130(v80, isUniquelyReferenced_nonNull_native);
      if (v81 == 64
        && (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9) & 1) == 0)
      {
LABEL_82:
        v82 = swift_task_alloc(v128);
        v115 = v31;
        v32(v82, (_QWORD *)v31, isUniquelyReferenced_nonNull_native);
        *v119 = 0x7FFFFFFFFFFFFFFFLL;
        v83 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9);
        v123 = v9;
        v84 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
        if ((v83 & 1) != 0)
        {
          if (v84 > 64)
          {
            v85 = swift_task_alloc(v128);
            v86 = sub_1000DBFB0();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v119, &type metadata for Int64, v86, isUniquelyReferenced_nonNull_native, v9);
            v5 = dispatch thunk of static Comparable.< infix(_:_:)(v85, v82, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8));
            v9 = (uint64_t)v130;
            v130(v85, isUniquelyReferenced_nonNull_native);
            v130(v82, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc(v85);
            if ((v5 & 1) != 0)
              goto LABEL_118;
            goto LABEL_91;
          }
LABEL_88:
          v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
          v130(v82, isUniquelyReferenced_nonNull_native);
          if (*v119 < v5)
            goto LABEL_118;
        }
        else
        {
          if (v84 < 64)
            goto LABEL_88;
          *v108 = 0x7FFFFFFFFFFFFFFFLL;
          v87 = swift_task_alloc(v128);
          ((void (*)(uint64_t, uint64_t, uint64_t))v110[4])(v87, v82, isUniquelyReferenced_nonNull_native);
          v88 = swift_task_alloc(v128);
          v89 = sub_1000DBFB0();
          v5 = isUniquelyReferenced_nonNull_native;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v108, &type metadata for Int64, v89, isUniquelyReferenced_nonNull_native, v9);
          v129 = dispatch thunk of static Comparable.< infix(_:_:)(v88, v87, isUniquelyReferenced_nonNull_native, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8));
          v9 = (uint64_t)v130;
          v130(v88, isUniquelyReferenced_nonNull_native);
          v130(v87, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc(v88);
          swift_task_dealloc(v87);
          if ((v129 & 1) != 0)
            goto LABEL_118;
        }
LABEL_91:
        swift_task_dealloc(v82);
        v36 = (_OWORD *)(v0 + 528);
        v9 = v123;
        v31 = v115;
      }
      swift_task_dealloc(v80);
      swift_task_dealloc(v124);
      v90 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
      v130(v31, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v31);
      v51 = __OFADD__(v90, v125);
      v5 = v90 + v125;
      if (v51)
        goto LABEL_117;
      *(_QWORD *)(v0 + 744) = &type metadata for Int64;
      *(_QWORD *)(v0 + 752) = sub_1000DBFB0();
      *(_QWORD *)(v0 + 720) = v5;
      *(_BYTE *)(v0 + 760) = 2;
      sub_1000DC028((__int128 *)(v0 + 720), v36);
      sub_10002BB90(v127);
      v2 = (_OWORD *)(v0 + 192);
      v9 = 3;
      goto LABEL_94;
    }
    v53 = *(double *)(v0 + 240);
    v26 = v0 + 432;
    sub_1000DBFF4((uint64_t)v138, (uint64_t)v118);
    if (*(_BYTE *)(v0 + 472) != 3)
    {
LABEL_110:
      swift_bridgeObjectRelease(v20);
      sub_1000DC040(v26);
      v104 = *(_QWORD *)(v0 + 976);
      v105 = sub_1000DC124();
      v106 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v105, 0, 0);
      swift_willThrow(v106);
      sub_1000DC040((uint64_t)v138);
      sub_1000DC080(v2);
      swift_release(v104);
      v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }
    sub_10001A4CC(v118, (uint64_t)v116);
    v54 = *(_QWORD *)(v0 + 832);
    v55 = *(_QWORD *)(v0 + 840);
    v56 = sub_100036228(v116, v54);
    v57 = *(_QWORD *)(v54 - 8);
    v58 = swift_task_alloc((*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    v59 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v57 + 16);
    v2 = (_OWORD *)(v0 + 192);
    v59(v58, v56, v54);
    v60 = sub_1000DC0E0();
    BinaryFloatingPoint.init<A>(_:)(v58, &type metadata for Double, v54, v60, v55);
    swift_task_dealloc(v58);
    v61 = v53 + *(double *)(v0 + 944);
    *(_QWORD *)(v0 + 408) = &type metadata for Double;
    *(_QWORD *)(v0 + 416) = v60;
    v9 = 3;
    *(double *)(v0 + 384) = v61;
    *(_BYTE *)(v0 + 424) = 3;
    v36 = (_OWORD *)(v0 + 528);
    sub_1000DC028((__int128 *)(v0 + 384), v137);
    sub_10002BB90(v116);
LABEL_94:
    swift_beginAccess(v8, v133, 33, 0);
    sub_1000DBFF4((uint64_t)v36, (uint64_t)v134);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v5 = *v8;
    v147 = *v8;
    *v8 = 0x8000000000000000;
    v92 = sub_10002FF38(v145, v20);
    v93 = *(_QWORD *)(v5 + 16);
    v94 = (v91 & 1) == 0;
    v95 = v93 + v94;
    if (__OFADD__(v93, v94))
      goto LABEL_114;
    v96 = v91;
    if (*(_QWORD *)(v5 + 24) >= v95)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
      {
        isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v91 & 1) == 0)
          goto LABEL_98;
      }
      else
      {
        sub_1000F6DF4();
        v5 = v147;
        isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v96 & 1) == 0)
          goto LABEL_98;
      }
    }
    else
    {
      sub_100162410(v95, isUniquelyReferenced_nonNull_native);
      v5 = v147;
      v97 = sub_10002FF38(v145, v20);
      if ((v96 & 1) != (v98 & 1))
      {
LABEL_109:
        swift_release(*(_QWORD *)(v0 + 968));
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      v92 = v97;
      isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v96 & 1) == 0)
      {
LABEL_98:
        *(_QWORD *)(v5 + 8 * (v92 >> 6) + 64) |= 1 << v92;
        v99 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v92);
        *v99 = v145;
        v99[1] = v20;
        sub_1000DC028(v134, (_OWORD *)(*(_QWORD *)(v5 + 56) + 48 * v92));
        v100 = *(_QWORD *)(v5 + 16);
        v51 = __OFADD__(v100, 1);
        v101 = v100 + 1;
        if (v51)
          goto LABEL_116;
        *(_QWORD *)(v5 + 16) = v101;
        swift_bridgeObjectRetain(v20);
        goto LABEL_103;
      }
    }
    sub_1000DC0AC((uint64_t)v134, *(_QWORD *)(v5 + 56) + 48 * v92);
LABEL_103:
    v102 = *v8;
    *v8 = v5;
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v133);
    sub_1000DC040((uint64_t)v137);
    v11 = v0 + 576;
LABEL_7:
    sub_1000DC040(v11);
    sub_1000DC080(v2);
    v3 = v0 + 288;
    v7 = v144;
  }
  v18 = *(_QWORD *)(v126 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
LABEL_14:
    v13 = (v18 - 1) & v18;
    v14 = __clz(__rbit64(v18)) + (v17 << 6);
    v141 = v17;
    goto LABEL_10;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v131)
    {
      v141 = v131 - 1;
      goto LABEL_28;
    }
    v18 = *(_QWORD *)(v126 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_14;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  ((void (*)(uint64_t, uint64_t))v9)(v5, isUniquelyReferenced_nonNull_native);
  result = swift_task_dealloc(v5);
LABEL_121:
  __break(1u);
  return result;
}

uint64_t sub_1000DAD00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 968) = a2;
  *(_QWORD *)(v2 + 960) = a1;
  return swift_task_switch(sub_1000DAD20, a1, 0);
}

uint64_t sub_1000DAD20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, _OWORD *);
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, _QWORD *, uint64_t);
  unint64_t v77;
  uint64_t v78;
  double v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(uint64_t, _OWORD *);
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t AssociatedTypeWitness;
  uint64_t v90;
  uint64_t AssociatedConformanceWitness;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  uint64_t v118;
  _BOOL8 v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  char v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(void);
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 *v140;
  __int128 *v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, _OWORD *);
  _QWORD *v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _OWORD *v155;
  uint64_t v156;
  int64_t v157;
  __int128 *v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  __int128 *v162;
  _OWORD *v163;
  uint64_t v164;
  __int128 *v165;
  _OWORD *v166;
  uint64_t v167;
  _OWORD *v168;
  _OWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  if (qword_10025F910 != -1)
LABEL_127:
    swift_once(&qword_10025F910, sub_1000D8E0C);
  v1 = *(_QWORD *)(v0 + 960);
  v2 = qword_10027AC68;
  v4 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain(v3);
  LOBYTE(v2) = sub_10001A808(v4, v3, v2);
  swift_bridgeObjectRelease(v3);
  if ((v2 & 1) != 0)
  {
    v5 = (_QWORD *)(v0 + 960);
    if (qword_10025F908 != -1)
LABEL_129:
      swift_once(&qword_10025F908, sub_1000D8D8C);
    v6 = *v5;
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_10027AC50);
    v8 = swift_retain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v170 = *v5;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v172[0] = v12;
      *(_DWORD *)v11 = 136446210;
      swift_bridgeObjectRetain(v3);
      *(_QWORD *)(v0 + 952) = sub_10002BA84(v4, v3, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 952, v5, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v3);
      swift_release(v170);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release(*v5);
    }

LABEL_117:
    v128 = *(uint64_t (**)(void))(v0 + 8);
    return v128();
  }
  v162 = (__int128 *)(v0 + 144);
  v158 = (__int128 *)(v0 + 240);
  v169 = (_OWORD *)(v0 + 336);
  v141 = (__int128 *)(v0 + 432);
  v165 = (__int128 *)(v0 + 480);
  v13 = (_OWORD *)(v0 + 528);
  v163 = (_OWORD *)(v0 + 576);
  v140 = (__int128 *)(v0 + 672);
  v145 = (_QWORD *)(v0 + 768);
  v139 = (_QWORD *)(v0 + 808);
  v159 = v0 + 848;
  v160 = (__int128 *)(v0 + 624);
  v164 = v0 + 872;
  v14 = (_QWORD *)(v0 + 896);
  v15 = (uint64_t *)(v0 + 16);
  v168 = (_OWORD *)(v0 + 80);
  v142 = (uint64_t *)(v0 + 920);
  v135 = (_QWORD *)(v0 + 928);
  v136 = (uint64_t *)(v0 + 936);
  v16 = *(_QWORD *)(v0 + 968);
  v17 = -1 << *(_BYTE *)(v16 + 32);
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v144 = v16 + 64;
  v19 = v18 & *(_QWORD *)(v16 + 64);
  v20 = *(_QWORD *)(v0 + 960);
  v161 = *(_QWORD *)(v0 + 968);
  swift_bridgeObjectRetain(v16);
  v21 = (_QWORD *)(v20 + 112);
  swift_beginAccess(v20 + 112, v0 + 896, 0, 0);
  v167 = 0;
  v22 = 63 - v17;
  v23 = (_OWORD *)(v0 + 192);
  v24 = v19;
  v157 = v22 >> 6;
  v134 = (v22 >> 6) - 1;
  v166 = (_OWORD *)(v0 + 528);
  v138 = (_QWORD *)(v20 + 112);
  while (1)
  {
    if (v24)
    {
      v171 = (v24 - 1) & v24;
      v27 = __clz(__rbit64(v24)) | (v167 << 6);
      v28 = v0 + 288;
LABEL_15:
      v29 = (_QWORD *)(*(_QWORD *)(v161 + 48) + 16 * v27);
      v30 = v29[1];
      *(_QWORD *)(v0 + 80) = *v29;
      *(_QWORD *)(v0 + 88) = v30;
      sub_1000DBF64(*(_QWORD *)(v161 + 56) + 48 * v27, v0 + 96);
      swift_bridgeObjectRetain(v30);
      goto LABEL_34;
    }
    v31 = v167 + 1;
    v28 = v0 + 288;
    if (__OFADD__(v167, 1))
      goto LABEL_122;
    if (v31 < v157)
    {
      v32 = *(_QWORD *)(v144 + 8 * v31);
      if (v32)
        goto LABEL_19;
      v33 = v167 + 2;
      ++v167;
      if (v31 + 1 < v157)
      {
        v32 = *(_QWORD *)(v144 + 8 * v33);
        if (v32)
          goto LABEL_22;
        v167 = v31 + 1;
        if (v31 + 2 < v157)
        {
          v32 = *(_QWORD *)(v144 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_19;
          }
          v33 = v31 + 3;
          v167 = v31 + 2;
          if (v31 + 3 < v157)
            break;
        }
      }
    }
LABEL_33:
    v171 = 0;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *v168 = 0u;
LABEL_34:
    sub_10000EF6C((uint64_t)v168, (uint64_t)v15, &qword_100262C88);
    v4 = *(_QWORD *)(v0 + 24);
    if (!v4)
    {
      swift_release(*(_QWORD *)(v0 + 968));
      goto LABEL_117;
    }
    v34 = *v15;
    sub_1000DBF98((__int128 *)(v0 + 32), v23);
    v35 = *v21;
    if (!*(_QWORD *)(*v21 + 16))
    {
      *(_QWORD *)(v28 + 32) = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_49:
      sub_1000087A0(v28, &qword_100262C90);
      sub_1000DBF64((uint64_t)v23, (uint64_t)v162);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          v53 = *(_QWORD *)(v0 + 144);
          *(_QWORD *)(v0 + 360) = &type metadata for Int64;
          *(_QWORD *)(v0 + 368) = sub_1000DBFB0();
          *(_QWORD *)(v0 + 336) = v53;
          v54 = 2;
        }
        else
        {
          v55 = *(_QWORD *)(v0 + 144);
          *(_QWORD *)(v0 + 360) = &type metadata for Double;
          *(_QWORD *)(v0 + 368) = sub_1000DC0E0();
          *(_QWORD *)(v0 + 336) = v55;
          v54 = 3;
        }
        *(_BYTE *)(v0 + 376) = v54;
      }
      else
      {
        sub_1000DC028(v162, v169);
      }
      swift_beginAccess(v21, v164, 33, 0);
      sub_1000DBFF4((uint64_t)v169, (uint64_t)v165);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
      v172[0] = *v21;
      v14 = (_QWORD *)v172[0];
      *v21 = 0x8000000000000000;
      v57 = v34;
      v59 = sub_10002FF38(v34, v4);
      v60 = v14[2];
      v61 = (v58 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
      {
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      v63 = v58;
      if (v14[3] >= v62)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v13 = (_OWORD *)(v0 + 528);
          if ((v58 & 1) == 0)
            goto LABEL_62;
        }
        else
        {
          sub_1000F6DF4();
          v14 = (_QWORD *)v172[0];
          v13 = (_OWORD *)(v0 + 528);
          if ((v63 & 1) == 0)
            goto LABEL_62;
        }
      }
      else
      {
        sub_100162410(v62, isUniquelyReferenced_nonNull_native);
        v14 = (_QWORD *)v172[0];
        v64 = sub_10002FF38(v57, v4);
        if ((v63 & 1) != (v65 & 1))
          goto LABEL_119;
        v59 = v64;
        v13 = (_OWORD *)(v0 + 528);
        if ((v63 & 1) == 0)
        {
LABEL_62:
          v14[(v59 >> 6) + 8] |= 1 << v59;
          v66 = (uint64_t *)(v14[6] + 16 * v59);
          *v66 = v57;
          v66[1] = v4;
          sub_1000DC028(v165, (_OWORD *)(v14[7] + 48 * v59));
          v67 = v14[2];
          v68 = __OFADD__(v67, 1);
          v69 = v67 + 1;
          if (v68)
            goto LABEL_124;
          v14[2] = v69;
          swift_bridgeObjectRetain(v4);
          goto LABEL_11;
        }
      }
      sub_1000DC0AC((uint64_t)v165, v14[7] + 48 * v59);
LABEL_11:
      v25 = *v21;
      *v21 = v14;
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v4);
      swift_endAccess(v164);
      v26 = v0 + 336;
      goto LABEL_12;
    }
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v35);
    v36 = sub_10002FF38(v34, v4);
    if ((v37 & 1) != 0)
    {
      sub_1000DBFF4(*(_QWORD *)(v35 + 56) + 48 * v36, v28);
    }
    else
    {
      *(_QWORD *)(v28 + 32) = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v4);
    if (*(unsigned __int8 *)(v0 + 328) == 255)
      goto LABEL_49;
    sub_1000DC028((__int128 *)v28, v163);
    sub_1000DBF64((uint64_t)v23, (uint64_t)v158);
    if (!*(_BYTE *)(v0 + 281))
    {
      sub_1000DC028(v158, v13);
      goto LABEL_100;
    }
    if (*(_BYTE *)(v0 + 281) != 1)
    {
      v70 = *(double *)(v0 + 240);
      v39 = v0 + 432;
      sub_1000DBFF4((uint64_t)v163, (uint64_t)v141);
      if (*(_BYTE *)(v0 + 472) != 3)
      {
LABEL_120:
        swift_bridgeObjectRelease(v4);
        sub_1000DC040(v39);
        v129 = *(_QWORD *)(v0 + 968);
        v130 = sub_1000DC124();
        v131 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v130, 0, 0);
        swift_willThrow(v131);
        sub_1000DC040((uint64_t)v163);
        sub_1000DC080(v23);
        swift_release(v129);
        v128 = *(uint64_t (**)(void))(v0 + 8);
        return v128();
      }
      sub_10001A4CC(v141, (uint64_t)v139);
      v71 = *(_QWORD *)(v0 + 832);
      v72 = *(_QWORD *)(v0 + 840);
      v149 = v34;
      v73 = sub_100036228(v139, v71);
      v74 = *(_QWORD *)(v71 - 8);
      v75 = swift_task_alloc((*(_QWORD *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      v76 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v74 + 16);
      v23 = (_OWORD *)(v0 + 192);
      v76(v75, v73, v71);
      v77 = sub_1000DC0E0();
      BinaryFloatingPoint.init<A>(_:)(v75, &type metadata for Double, v71, v77, v72);
      v78 = v75;
      v13 = (_OWORD *)(v0 + 528);
      swift_task_dealloc(v78);
      v79 = v70 + *(double *)(v0 + 944);
      *(_QWORD *)(v0 + 408) = &type metadata for Double;
      *(_QWORD *)(v0 + 416) = v77;
      v34 = v149;
      *(double *)(v0 + 384) = v79;
      *(_BYTE *)(v0 + 424) = 3;
      sub_1000DC028((__int128 *)(v0 + 384), v166);
      sub_10002BB90(v139);
      goto LABEL_100;
    }
    v38 = *(_QWORD *)(v0 + 240);
    v39 = v0 + 672;
    sub_1000DBFF4((uint64_t)v163, (uint64_t)v140);
    if (*(_BYTE *)(v0 + 712) != 2)
      goto LABEL_120;
    v146 = v38;
    sub_10001A4CC(v140, (uint64_t)v145);
    v13 = *(_OWORD **)(v0 + 792);
    v40 = *(_QWORD **)(v0 + 800);
    v41 = sub_100036228(v145, (uint64_t)v13);
    v42 = (_QWORD *)*((_QWORD *)v13 - 1);
    v43 = (v42[8] + 15) & 0xFFFFFFFFFFFFFFF0;
    v44 = swift_task_alloc(v43);
    v45 = (void (*)(uint64_t, uint64_t, _OWORD *))v42[2];
    v45(v44, (uint64_t)v41, v13);
    v148 = v40;
    LOBYTE(v41) = dispatch thunk of static BinaryInteger.isSigned.getter(v13, v40);
    v154 = v43;
    v46 = swift_task_alloc(v43);
    v156 = v44;
    v147 = v45;
    v45(v46, v44, v13);
    v143 = v46;
    v137 = v42;
    if ((v41 & 1) == 0)
    {
      v155 = (_OWORD *)v42[1];
      ((void (*)(uint64_t, _OWORD *))v155)(v46, v13);
      v50 = v146;
      v5 = v40;
      v21 = v138;
      goto LABEL_85;
    }
    v5 = v40;
    v47 = dispatch thunk of BinaryInteger.bitWidth.getter(v13, v40);
    v48 = (_OWORD *)v42[1];
    ((void (*)(uint64_t, _OWORD *))v48)(v46, v13);
    v155 = v48;
    if (v47 <= 64)
    {
      v50 = v146;
      v21 = v138;
      goto LABEL_85;
    }
    v49 = swift_task_alloc(v154);
    v147(v49, v156, v13);
    *v136 = 0x8000000000000000;
    v50 = v146;
    v21 = v138;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(v13, v148) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(v13, v148) < 64)
      {
        v51 = dispatch thunk of BinaryInteger._lowWord.getter(v13, v148);
        result = ((uint64_t (*)(uint64_t, _OWORD *))v48)(v49, v13);
        goto LABEL_78;
      }
      v151 = v49;
      v84 = (void (*)(uint64_t, _OWORD *))v48;
      v85 = swift_task_alloc(v154);
      v86 = sub_1000DBFB0();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v136, &type metadata for Int64, v86, v13, v148);
      v87 = dispatch thunk of static Comparable.< infix(_:_:)(v151, v85, v13, *(_QWORD *)(v148[4] + 8));
      v84(v85, v13);
      v84(v151, v13);
      v49 = v151;
      result = swift_task_dealloc(v85);
      if ((v87 & 1) != 0)
        goto LABEL_132;
    }
    else
    {
      v80 = dispatch thunk of static BinaryInteger.isSigned.getter(v13, v148);
      v81 = dispatch thunk of BinaryInteger.bitWidth.getter(v13, v148);
      if ((v80 & 1) != 0)
      {
        if (v81 <= 64)
        {
          v152 = v34;
          v88 = *(_QWORD *)(v148[3] + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v88, v13, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
          v90 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v88, v13, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v132 = v90;
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1001F5420, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v92 = swift_task_alloc(v154);
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v90, v13, v88);
          v133 = dispatch thunk of static Comparable.< infix(_:_:)(v49, v92, v13, *(_QWORD *)(v148[4] + 8));
          v93 = v49;
          v23 = v155;
          ((void (*)(uint64_t, _OWORD *))v155)(v92, v13);
          swift_task_dealloc(v92);
          swift_task_dealloc(v132);
          v14 = (_QWORD *)swift_task_alloc(v154);
          v94 = v93;
          ((void (*)(_QWORD *, uint64_t, _OWORD *))v137[4])(v14, v93, v13);
          if ((v133 & 1) != 0)
            goto LABEL_131;
          v95 = *v136;
          v96 = dispatch thunk of BinaryInteger._lowWord.getter(v13, v148);
          ((void (*)(_QWORD *, _OWORD *))v155)(v14, v13);
          result = swift_task_dealloc(v14);
          v97 = v96 < v95;
          v34 = v152;
          v50 = v146;
          v49 = v94;
          if (v97)
            goto LABEL_132;
        }
        else
        {
          v82 = swift_task_alloc(v154);
          v83 = sub_1000DBFB0();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v136, &type metadata for Int64, v83, v13, v148);
          v150 = dispatch thunk of static Comparable.< infix(_:_:)(v49, v82, v13, *(_QWORD *)(v148[4] + 8));
          ((void (*)(uint64_t, _OWORD *))v155)(v82, v13);
          ((void (*)(uint64_t, _OWORD *))v155)(v49, v13);
          result = swift_task_dealloc(v82);
          if ((v150 & 1) != 0)
            goto LABEL_132;
        }
        goto LABEL_84;
      }
      if (v81 < 64)
      {
        v51 = dispatch thunk of BinaryInteger._lowWord.getter(v13, v148);
        result = ((uint64_t (*)(uint64_t, _OWORD *))v155)(v49, v13);
LABEL_78:
        if (v51 < *v136)
          goto LABEL_132;
        goto LABEL_84;
      }
      ((void (*)(uint64_t, _OWORD *))v155)(v49, v13);
    }
LABEL_84:
    swift_task_dealloc(v49);
LABEL_85:
    v98 = dispatch thunk of BinaryInteger.bitWidth.getter(v13, v5);
    v99 = swift_task_alloc(v154);
    v147(v99, v156, v13);
    if (v98 < 65)
    {
      v100 = dispatch thunk of BinaryInteger.bitWidth.getter(v13, v5);
      ((void (*)(uint64_t, _OWORD *))v155)(v99, v13);
      v3 = v143;
      if (v100 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v13, v5) & 1) != 0)
        goto LABEL_98;
    }
    else
    {
      ((void (*)(uint64_t, _OWORD *))v155)(v99, v13);
    }
    v153 = v34;
    v101 = swift_task_alloc(v154);
    v147(v101, v156, v13);
    *v142 = 0x7FFFFFFFFFFFFFFFLL;
    v102 = dispatch thunk of static BinaryInteger.isSigned.getter(v13, v5);
    v103 = dispatch thunk of BinaryInteger.bitWidth.getter(v13, v5);
    if ((v102 & 1) != 0)
    {
      if (v103 > 64)
      {
        v104 = swift_task_alloc(v154);
        v105 = sub_1000DBFB0();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v142, &type metadata for Int64, v105, v13, v148);
        v106 = dispatch thunk of static Comparable.< infix(_:_:)(v104, v101, v13, *(_QWORD *)(v148[4] + 8));
        v5 = v155;
        ((void (*)(uint64_t, _OWORD *))v155)(v104, v13);
        ((void (*)(uint64_t, _OWORD *))v155)(v101, v13);
        v107 = v104;
        goto LABEL_96;
      }
    }
    else if (v103 >= 64)
    {
      *v135 = 0x7FFFFFFFFFFFFFFFLL;
      v109 = swift_task_alloc(v154);
      ((void (*)(uint64_t, uint64_t, _OWORD *))v137[4])(v109, v101, v13);
      v110 = swift_task_alloc(v154);
      v111 = sub_1000DBFB0();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v135, &type metadata for Int64, v111, v13, v148);
      v106 = dispatch thunk of static Comparable.< infix(_:_:)(v110, v109, v13, *(_QWORD *)(v148[4] + 8));
      v5 = v155;
      ((void (*)(uint64_t, _OWORD *))v155)(v110, v13);
      ((void (*)(uint64_t, _OWORD *))v155)(v109, v13);
      swift_task_dealloc(v110);
      v107 = v109;
LABEL_96:
      swift_task_dealloc(v107);
      v3 = v143;
      if ((v106 & 1) != 0)
      {
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      goto LABEL_97;
    }
    v108 = dispatch thunk of BinaryInteger._lowWord.getter(v13, v148);
    ((void (*)(uint64_t, _OWORD *))v155)(v101, v13);
    v3 = v143;
    if (*v142 < v108)
      goto LABEL_128;
LABEL_97:
    swift_task_dealloc(v101);
    v5 = v148;
    v34 = v153;
    v50 = v146;
LABEL_98:
    swift_task_dealloc(v99);
    swift_task_dealloc(v3);
    v112 = dispatch thunk of BinaryInteger._lowWord.getter(v13, v5);
    ((void (*)(uint64_t, _OWORD *))v155)(v156, v13);
    swift_task_dealloc(v156);
    v68 = __OFADD__(v112, v50);
    v113 = v112 + v50;
    if (v68)
      goto LABEL_126;
    *(_QWORD *)(v0 + 744) = &type metadata for Int64;
    *(_QWORD *)(v0 + 752) = sub_1000DBFB0();
    *(_QWORD *)(v0 + 720) = v113;
    *(_BYTE *)(v0 + 760) = 2;
    v13 = (_OWORD *)(v0 + 528);
    sub_1000DC028((__int128 *)(v0 + 720), v166);
    sub_10002BB90(v145);
    v23 = (_OWORD *)(v0 + 192);
LABEL_100:
    swift_beginAccess(v21, v159, 33, 0);
    sub_1000DBFF4((uint64_t)v13, (uint64_t)v160);
    v114 = swift_isUniquelyReferenced_nonNull_native(*v21);
    v172[0] = *v21;
    v14 = (_QWORD *)v172[0];
    *v21 = 0x8000000000000000;
    v115 = v34;
    v117 = sub_10002FF38(v34, v4);
    v118 = v14[2];
    v119 = (v116 & 1) == 0;
    v120 = v118 + v119;
    if (__OFADD__(v118, v119))
      goto LABEL_123;
    v121 = v116;
    if (v14[3] >= v120)
    {
      if ((_DWORD)v114)
      {
        v13 = (_OWORD *)(v0 + 528);
        if ((v116 & 1) == 0)
          goto LABEL_104;
      }
      else
      {
        sub_1000F6DF4();
        v14 = (_QWORD *)v172[0];
        v13 = (_OWORD *)(v0 + 528);
        if ((v121 & 1) == 0)
          goto LABEL_104;
      }
    }
    else
    {
      sub_100162410(v120, v114);
      v14 = (_QWORD *)v172[0];
      v122 = sub_10002FF38(v115, v4);
      if ((v121 & 1) != (v123 & 1))
      {
LABEL_119:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 968));
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      v117 = v122;
      v13 = (_OWORD *)(v0 + 528);
      if ((v121 & 1) == 0)
      {
LABEL_104:
        v14[(v117 >> 6) + 8] |= 1 << v117;
        v124 = (uint64_t *)(v14[6] + 16 * v117);
        *v124 = v115;
        v124[1] = v4;
        sub_1000DC028(v160, (_OWORD *)(v14[7] + 48 * v117));
        v125 = v14[2];
        v68 = __OFADD__(v125, 1);
        v126 = v125 + 1;
        if (v68)
          goto LABEL_125;
        v14[2] = v126;
        swift_bridgeObjectRetain(v4);
        goto LABEL_109;
      }
    }
    sub_1000DC0AC((uint64_t)v160, v14[7] + 48 * v117);
LABEL_109:
    v127 = *v21;
    *v21 = v14;
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease(v4);
    swift_endAccess(v159);
    sub_1000DC040((uint64_t)v13);
    v26 = v0 + 576;
LABEL_12:
    sub_1000DC040(v26);
    sub_1000DC080(v23);
    v15 = (uint64_t *)(v0 + 16);
    v24 = v171;
  }
  v32 = *(_QWORD *)(v144 + 8 * v33);
  if (v32)
  {
LABEL_22:
    v31 = v33;
LABEL_19:
    v171 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v167 = v31;
    goto LABEL_15;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v157)
    {
      v167 = v134;
      goto LABEL_33;
    }
    v32 = *(_QWORD *)(v144 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_19;
  }
  __break(1u);
LABEL_131:
  ((void (*)(_QWORD *, _OWORD *))v23)(v14, v13);
  result = swift_task_dealloc(v14);
LABEL_132:
  __break(1u);
  return result;
}

uint64_t sub_1000DBF64(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnalyticsEvent.Mode(a2, a1);
  return a2;
}

_OWORD *sub_1000DBF98(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(__int128 *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_1000DBFB0()
{
  unint64_t result;

  result = qword_100262C98;
  if (!qword_100262C98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_100262C98);
  }
  return result;
}

uint64_t sub_1000DBFF4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnalyticsEvent.DiscreteType(a2, a1);
  return a2;
}

_OWORD *sub_1000DC028(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1000DC040(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 4)
    v2 = *(_DWORD *)a1 + 4;
  if (v2)
    sub_10002BB90((_QWORD *)a1);
  return a1;
}

_QWORD *sub_1000DC080(_QWORD *a1)
{
  destroy for AnalyticsEvent.Mode(a1);
  return a1;
}

uint64_t sub_1000DC0AC(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnalyticsEvent.DiscreteType(a2, a1);
  return a2;
}

unint64_t sub_1000DC0E0()
{
  unint64_t result;

  result = qword_100262CA0;
  if (!qword_100262CA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100262CA0);
  }
  return result;
}

unint64_t sub_1000DC124()
{
  unint64_t result;

  result = qword_100262CA8;
  if (!qword_100262CA8)
  {
    result = swift_getWitnessTable(&unk_1001F55B4, &type metadata for AnalyticsEvent.AnalyticsEventError);
    atomic_store(result, (unint64_t *)&qword_100262CA8);
  }
  return result;
}

_QWORD *sub_1000DC168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 v19;

  v14 = (_QWORD *)(a1 + 64);
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v4 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v15 = v5;
  if (v3)
  {
    v7 = __clz(__rbit64(v3));
LABEL_5:
    v8 = *(_QWORD *)(v5 + 56);
    v9 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v7);
    v10 = v9[1];
    *(_QWORD *)&v16 = *v9;
    *((_QWORD *)&v16 + 1) = v10;
    sub_1000DBFF4(v8 + 48 * v7, (uint64_t)v17);
    swift_bridgeObjectRetain(v10);
    goto LABEL_10;
  }
  v11 = 1;
  if (v4 > 1)
  {
    v12 = v14[1];
    if (v12)
    {
LABEL_8:
      v7 = __clz(__rbit64(v12)) + (v11 << 6);
      goto LABEL_5;
    }
    if (v4 > 2)
    {
      v12 = v14[2];
      if (v12)
      {
        v11 = 2;
        goto LABEL_8;
      }
      if (v4 > 3)
      {
        v12 = v14[3];
        if (v12)
        {
          v11 = 3;
          goto LABEL_8;
        }
        v11 = 4;
        if (v4 > 4)
        {
          v12 = v14[4];
          if (v12)
            goto LABEL_8;
          while (v4 - 5 != v6)
          {
            v12 = *(_QWORD *)(v5 + 104 + 8 * v6++);
            if (v12)
            {
              v11 = v6 + 4;
              goto LABEL_8;
            }
          }
        }
      }
    }
  }
  memset(v17, 0, 41);
  v16 = 0u;
LABEL_10:
  sub_10000EF6C((uint64_t)&v16, (uint64_t)v18, &qword_100262CB8);
  if (v18[1])
  {
    sub_1000DC028(&v19, &v16);
    __asm { BR              X9 }
  }
  swift_release(v15);
  return _swiftEmptyDictionarySingleton;
}

uint64_t sub_1000DD514(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000DD54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100262CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DD594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100262CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000DD5DC()
{
  unint64_t result;

  result = qword_100262CE0;
  if (!qword_100262CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100262CE0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.AnalyticsEventError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000DD660 + 4 * byte_1001F543C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000DD680 + 4 * byte_1001F5441[v4]))();
}

_BYTE *sub_1000DD660(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000DD680(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DD688(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DD690(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DD698(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DD6A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.AnalyticsEventError()
{
  return &type metadata for AnalyticsEvent.AnalyticsEventError;
}

_QWORD *destroy for AnalyticsEvent.Mode(_QWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)a1 + 41);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (!v1)
  {
    v2 = *((unsigned __int8 *)a1 + 40);
    if (v2 >= 4)
      v2 = *(_DWORD *)a1 + 4;
    if (v2)
      return (_QWORD *)sub_10002BB90(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = 2;
  }
  else if (v3 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = 1;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_BYTE *)a1 = *(_BYTE *)a2;
          break;
        case 1:
          v7 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v7;
          (**(void (***)(uint64_t))(v7 - 8))(a1);
          v6 = 1;
          break;
        case 2:
          v8 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v8;
          (**(void (***)(uint64_t))(v8 - 8))(a1);
          v6 = 2;
          break;
        case 3:
          v9 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v9;
          (**(void (***)(uint64_t))(v9 - 8))(a1);
          v6 = 3;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    v4 = 0;
    *(_BYTE *)(a1 + 40) = v6;
  }
  *(_BYTE *)(a1 + 41) = v4;
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 4)
        v5 = *(_DWORD *)a1 + 4;
      if (v5)
        sub_10002BB90((_QWORD *)a1);
    }
    v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 3)
      v6 = *(_DWORD *)a2 + 3;
    if (v6 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 2;
    }
    else if (v6 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 1;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a2 + 40);
      while (2)
      {
        switch(v8)
        {
          case 0:
            v9 = 0;
            *(_BYTE *)a1 = *(_BYTE *)a2;
            break;
          case 1:
            v10 = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(a1 + 24) = v10;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
            v9 = 1;
            break;
          case 2:
            v11 = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(a1 + 24) = v11;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
            v9 = 2;
            break;
          case 3:
            v12 = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(a1 + 24) = v12;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
            v9 = 3;
            break;
          default:
            v8 = *(_DWORD *)a2 + 4;
            continue;
        }
        break;
      }
      v7 = 0;
      *(_BYTE *)(a1 + 40) = v9;
    }
    *(_BYTE *)(a1 + 41) = v7;
  }
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 4)
        v5 = *(_DWORD *)a1 + 4;
      if (v5)
        sub_10002BB90((_QWORD *)a1);
    }
    v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 3)
      v6 = *(_DWORD *)a2 + 3;
    if (v6 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 2;
    }
    else if (v6 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 1;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a2 + 40);
      while (2)
      {
        switch(v8)
        {
          case 0:
            v9 = 0;
            *(_BYTE *)a1 = *(_BYTE *)a2;
            break;
          case 1:
            v10 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v10;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            v9 = 1;
            break;
          case 2:
            v11 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v11;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            v9 = 2;
            break;
          case 3:
            v12 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v12;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            v9 = 3;
            break;
          default:
            v8 = *(_DWORD *)a2 + 4;
            continue;
        }
        break;
      }
      v7 = 0;
      *(_BYTE *)(a1 + 40) = v9;
    }
    *(_BYTE *)(a1 + 41) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.Mode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000DDB54(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1000DDB70(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.Mode()
{
  return &type metadata for AnalyticsEvent.Mode;
}

unint64_t sub_1000DDBAC()
{
  unint64_t result;

  result = qword_100262CE8;
  if (!qword_100262CE8)
  {
    result = swift_getWitnessTable(&unk_1001F558C, &type metadata for AnalyticsEvent.AnalyticsEventError);
    atomic_store(result, (unint64_t *)&qword_100262CE8);
  }
  return result;
}

void sub_1000DDC04(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = 0;
  v6 = String._bridgeToObjectiveC()();
  v7 = MGCopyAnswerWithError(v6, 0, &v15);

  if (v7)
  {
    if (v15)
    {
      if (qword_10025F8C8 != -1)
        swift_once(&qword_10025F8C8, sub_1000A27C4);
      v8 = type metadata accessor for Logger(0);
      sub_100037A9C(v8, (uint64_t)qword_10027AB78);
      v9 = swift_bridgeObjectRetain_n(a2, 2);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = swift_slowAlloc(18, -1);
        v13 = swift_slowAlloc(32, -1);
        v18 = v13;
        *(_DWORD *)v12 = 136446466;
        swift_bridgeObjectRetain(a2);
        v16 = sub_10002BA84(a1, a2, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v12 + 12) = 1024;
        swift_beginAccess(&v15, &v16, 0, 0);
        v14 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 14, v12 + 18);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "MGCopyAnswerWithError error for key: %{public}s -> %d", (uint8_t *)v12, 0x12u);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
    }
    *(_QWORD *)(a3 + 24) = swift_getObjectType(v7);
    *(_QWORD *)a3 = v7;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t sub_1000DDE64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_1002615B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DDEA4()
{
  void *v0;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  v0 = objc_autoreleasePoolPush();
  sub_1000DDC04(0x754E6C6169726553, 0xEC0000007265626DLL, (uint64_t)v8);
  objc_autoreleasePoolPop(v0);
  if (v9)
  {
    if (swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v7;
  }
  else
  {
    sub_1000DDE64((uint64_t)v8);
  }
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not get serial number", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 0;
}

uint64_t sub_1000DDFF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001A4CC((__int128 *)a1, (uint64_t)&v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    *v2 = 0x8000000000000000;
    sub_100163824(&v10, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v9;
    swift_bridgeObjectRelease(v5);
    v6 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  }
  else
  {
    sub_1000F4870(a2, (uint64_t (*)(_BYTE *, uint64_t))sub_10001A4CC, &qword_100263648, (uint64_t)&v10);
    v8 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
    if (v11)
      return sub_10002BB90(&v10);
  }
  return result;
}

uint64_t sub_1000DE0E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_100037A5C(&qword_100260600);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Location(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000087A0(a1, &qword_100260600);
    sub_1000F42A4(a2, (uint64_t)v8);
    v13 = type metadata accessor for Handle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_1000087A0((uint64_t)v8, &qword_100260600);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_100163B08((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for Handle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_1000DE26C(uint64_t a1, uint64_t a2)
{
  return sub_1000DE2B4(a1, a2, &qword_100261590, &qword_100261570, (void (*)(char *, uint64_t, uint64_t))sub_100163E40, &qword_1002634A8);
}

uint64_t sub_1000DE290(uint64_t a1, uint64_t a2)
{
  return sub_1000DE2B4(a1, a2, &qword_100261D48, &qword_100261D28, (void (*)(char *, uint64_t, uint64_t))sub_100163E5C, &qword_1002634B0);
}

uint64_t sub_1000DE2B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(char *, uint64_t, uint64_t), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;

  v25 = a5;
  v10 = v6;
  v13 = sub_100037A5C(a3);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C(a4);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, 1, v16) == 1)
  {
    sub_1000087A0(a1, a3);
    sub_1000F4990(a2, a4, a6, (uint64_t)v15);
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a2, v20);
    return sub_1000087A0((uint64_t)v15, a3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v19, a1, v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    v26 = *v10;
    *v10 = 0x8000000000000000;
    v25(v19, a2, isUniquelyReferenced_nonNull_native);
    v23 = *v10;
    *v10 = v26;
    swift_bridgeObjectRelease(v23);
    v24 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a2, v24);
  }
}

uint64_t sub_1000DE458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  __int128 v11[3];

  v4 = v3;
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    sub_1000087A0(a1, &qword_100262C90);
    sub_1000F45FC(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_1000087A0((uint64_t)v11, &qword_100262C90);
  }
  else
  {
    sub_1000DC028((__int128 *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_100164160(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
}

uint64_t sub_1000DE530(uint64_t a1, uint64_t a2)
{
  return sub_1000DE2B4(a1, a2, &qword_1002634B8, &qword_1002634C0, (void (*)(char *, uint64_t, uint64_t))sub_100164678, &qword_1002634C8);
}

uint64_t sub_1000DE554(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001A4CC((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    *v2 = 0x8000000000000000;
    v5 = sub_100055804((uint64_t)v14, v15);
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    sub_1000F802C(*v7, a2, isUniquelyReferenced_nonNull_native, &v13);
    sub_10002BB90(v14);
    v9 = *v2;
    *v2 = v13;
    swift_bridgeObjectRelease(v9);
    v10 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a2, v10);
  }
  else
  {
    sub_1000F4870(a2, (uint64_t (*)(_BYTE *, uint64_t))sub_10001A4CC, &qword_1002634A0, (uint64_t)v14);
    v12 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);
    if (v15)
      return sub_10002BB90(v14);
  }
  return result;
}

uint64_t sub_1000DE6A0(uint64_t a1, uint64_t a2)
{
  return sub_1000DE2B4(a1, a2, &qword_100263480, &qword_100263488, (void (*)(char *, uint64_t, uint64_t))sub_100164694, &qword_100263490);
}

uint64_t sub_1000DE6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5[78] = v4;
  v5[77] = a4;
  v5[76] = a3;
  v5[75] = a2;
  v5[74] = a1;
  v5[79] = *v4;
  return swift_task_switch(sub_1000DE6F4, v4, 0);
}

uint64_t sub_1000DE6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
  v5 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 640) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 600);
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v1;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 648) = v6;
  *v6 = v0;
  v6[1] = sub_1000DE7E4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v2, v4, 0xD000000000000025, 0x80000001001FEA40, sub_1000E859C, v5, &type metadata for ServerBaseResponse);
}

uint64_t sub_1000DE7E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 648);
  *(_QWORD *)(*v1 + 656) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000DE890;
  else
    v4 = sub_1000DE848;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 624), 0);
}

uint64_t sub_1000DE848()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 640);
  memcpy(*(void **)(v0 + 592), (const void *)(v0 + 16), 0x240uLL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DE890()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000DE8C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100037A5C(&qword_100263418);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000E37C(v7, (uint64_t)&v17, &qword_100263420);
    v8 = v17;
    v9 = v18;
    result = sub_10002FF38(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000DBF98(v19, (_OWORD *)(v4[7] + 48 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 64;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000DEA04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100037A5C(&qword_100263448);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100037A5C(&qword_100263430);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000E37C(v13, (uint64_t)v5, &qword_100263448);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10002FF38(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Handle(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000DEBA4(uint64_t a1)
{
  return sub_1000DED1C(a1, &qword_100263438, &qword_100263440, (uint64_t (*)(uint64_t *, unint64_t))sub_10001AEAC);
}

unint64_t sub_1000DEBC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100037A5C(&qword_100263408);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000E37C(v7, (uint64_t)&v17, &qword_100263410);
    v8 = v17;
    v9 = v18;
    result = sub_10002FF38(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000DC028(v19, (_OWORD *)(v4[7] + 48 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 64;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000DED00(uint64_t a1)
{
  return sub_1000DED1C(a1, &qword_1002634D0, &qword_1002634D8, (uint64_t (*)(uint64_t *, unint64_t))sub_10001AEAC);
}

unint64_t sub_1000DED1C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v21 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v21);
    return (unint64_t)v9;
  }
  sub_100037A5C(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_10000E37C(v12, (uint64_t)&v22, a3);
    v13 = v22;
    v14 = v23;
    result = sub_10002FF38(v22, v23);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v9[6] + 16 * result);
    *v17 = v13;
    v17[1] = v14;
    result = a4(&v24, v9[7] + 32 * result);
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_12;
    v9[2] = v20;
    v12 += 48;
    if (!--v10)
    {
      swift_release(v9);
      v21 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000DEE54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100037A5C(&qword_1002633E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10002FF38(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000DEF64(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  return sub_100021D3C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, (void (*)(BOOL, uint64_t, uint64_t))sub_100018EBC);
}

void sub_1000DEF88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v3 = type metadata accessor for DataManager.State(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - v5;
  sub_100025C70(a2, (uint64_t)&v9 - v5, v7);
  v8 = (char *)sub_1000DF038 + 4 * byte_1001F55F8[swift_getEnumCaseMultiPayload(v6, v3)];
  __asm { BR              X10 }
}

uint64_t sub_1000DF038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;

  sub_1000087A0(v3, &qword_100260538);
  sub_100025C70(v2, v0, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v1);
  return ((uint64_t (*)(void))((char *)sub_1000DF0F4 + 4 * byte_1001F5600[EnumCaseMultiPayload]))();
}

BOOL sub_1000DF0F4()
{
  uint64_t v0;
  unint64_t v1;

  sub_1000087A0(v0, &qword_100260538);
  return v1 < 2;
}

uint64_t sub_1000DF190()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AC88);
  sub_100037A9C(v0, (uint64_t)qword_10027AC88);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x616E614D61746144, 0xEB00000000726567);
}

Swift::Int sub_1000DF20C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x54646E6553706174, 0xE900000000000053);
  return Hasher._finalize()();
}

uint64_t sub_1000DF260(uint64_t a1)
{
  return String.hash(into:)(a1, 0x54646E6553706174, 0xE900000000000053);
}

Swift::Int sub_1000DF27C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x54646E6553706174, 0xE900000000000053);
  return Hasher._finalize()();
}

uint64_t sub_1000DF2CC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EDC0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000DF31C(_QWORD *a1@<X8>)
{
  *a1 = 0x54646E6553706174;
  a1[1] = 0xE900000000000053;
}

uint64_t sub_1000DF33C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EDF8, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000DF390(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003E4B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DF3B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003E4B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DF3E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  Class isa;
  NSString v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002636F0);
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10003E4B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FMFAPSMessage.CodingKeys, &type metadata for FMFAPSMessage.CodingKeys, v11, v9, v10);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v12, "setLocale:", isa);

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setDateFormat:", v14);

  v15 = Date._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v12, "stringFromDate:", v15);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  KeyedEncodingContainer.encode(_:forKey:)(v17, v19, v20, v6);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_1000DF60C(_QWORD *a1)
{
  return sub_1000DF3E0(a1);
}

uint64_t sub_1000DF620()
{
  Swift::String v0;
  void *object;

  v0._countAndFlagsBits = Date.localISO8601.getter();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0x54646E6553706174;
}

uint64_t sub_1000DF67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027ACA0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027ACA0);
  if (qword_10025F920 != -1)
    swift_once(&qword_10025F920, sub_1000DF190);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AC88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000DF70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for Friend(0);
  __chkstk_darwin(v1);
  v2 = sub_100037A5C(&qword_100260538);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for DataManager.State(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025C70(v0, (uint64_t)v6, v7);
  v8 = (char *)sub_1000DF83C + 4 * byte_1001F5608[swift_getEnumCaseMultiPayload(v6, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1000DF83C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  sub_10000EF6C(v2, v0, &qword_100260538);
  *(_QWORD *)(v3 - 80) = 0;
  *(_QWORD *)(v3 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 - 72));
  *(_QWORD *)(v3 - 80) = 0xD000000000000011;
  *(_QWORD *)(v3 - 72) = 0x80000001001FEAB0;
  sub_10000E37C(v0, v1, &qword_100260538);
  v4 = type metadata accessor for Device(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4) == 1)
  {
    sub_1000087A0(v1, &qword_100260538);
    v6 = (void *)0xE300000000000000;
    v7 = 7104878;
  }
  else
  {
    v7 = ((uint64_t (*)(void))Device.description.getter)();
    v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  }
  v9._countAndFlagsBits = v7;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v6);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = *(_QWORD *)(v3 - 80);
  sub_1000087A0(v0, &qword_100260538);
  return v11;
}

void sub_1000DFBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v3 = type metadata accessor for DataManager.State(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - v5;
  sub_100025C70(a2, (uint64_t)&v9 - v5, v7);
  v8 = (char *)sub_1000DFC54 + 4 * byte_1001F5610[swift_getEnumCaseMultiPayload(v6, v3)];
  __asm { BR              X10 }
}

uint64_t sub_1000DFC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;

  sub_1000087A0(v3, &qword_100260538);
  sub_100025C70(v2, v0, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v1);
  return ((uint64_t (*)(void))((char *)sub_1000DFD10 + 4 * byte_1001F5618[EnumCaseMultiPayload]))();
}

BOOL sub_1000DFD10()
{
  uint64_t v0;
  unint64_t v1;

  sub_1000087A0(v0, &qword_100260538);
  return v1 >= 2;
}

unint64_t sub_1000DFDB4(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v8;
  _QWORD v9[2];

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
    case 6uLL:
      result = 0xD000000000000012;
      break;
    case 4uLL:
      result = 0xD000000000000013;
      break;
    case 5uLL:
      result = 0xD00000000000001BLL;
      break;
    case 7uLL:
      result = 0xD000000000000016;
      break;
    case 8uLL:
      result = 0xD000000000000014;
      break;
    case 9uLL:
      result = 0xD000000000000017;
      break;
    case 0xAuLL:
      result = 0xD000000000000019;
      break;
    case 0xBuLL:
      result = 0xD000000000000017;
      break;
    default:
      strcpy((char *)v9, ".underlying(");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v8 = a1;
      sub_1000CFAE4(a1);
      swift_errorRetain(a1);
      v4 = sub_100037A5C(&qword_100265260);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v8, v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      sub_1000CFAF4(a1);
      result = v9[0];
      break;
  }
  return result;
}

unint64_t sub_1000DFFA8()
{
  unint64_t *v0;

  return sub_1000DFDB4(*v0);
}

uint64_t sub_1000DFFB0()
{
  uint64_t v0;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_100262CF0);
  sub_100037A9C(v0, (uint64_t)qword_100262CF0);
  return PrefixedDefaults.init(prefix:)(0x616E614D61746144, 0xEB00000000726567);
}

uint64_t sub_1000E0014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_10027ACB8);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027ACB8);
  if (qword_10025F930 != -1)
    swift_once(&qword_10025F930, sub_1000DFFB0);
  v2 = sub_100037A9C(v0, (uint64_t)qword_100262CF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000E00A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for PrefixedDefaults(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002634F8);
  sub_100043F10(v4, qword_100262D08);
  sub_100037A9C(v4, (uint64_t)qword_100262D08);
  if (qword_10025F938 != -1)
    swift_once(&qword_10025F938, sub_1000E0014);
  v5 = sub_100037A9C(v0, (uint64_t)qword_10027ACB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  v6 = type metadata accessor for Date(0);
  return ManagedDefault.init(prefixedDefaults:key:)(v3, 0xD00000000000001CLL, 0x80000001001FEC60, v6, &protocol witness table for Date);
}

uint64_t sub_1000E01BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for PrefixedDefaults(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002632F8);
  sub_100043F10(v4, qword_100262D20);
  sub_100037A9C(v4, (uint64_t)qword_100262D20);
  if (qword_10025F938 != -1)
    swift_once(&qword_10025F938, sub_1000E0014);
  v5 = sub_100037A9C(v0, (uint64_t)qword_10027ACB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return ManagedDefault.init(prefixedDefaults:key:)(v3, 0x616974696E497369, 0xED000064657A696CLL, &type metadata for Bool, &protocol witness table for Bool);
}

uint64_t sub_1000E02D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Device(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[6] = swift_task_alloc(v5);
  v2[7] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v6);
  v2[9] = swift_task_alloc(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v2[10] = v7;
  *v7 = v2;
  v7[1] = sub_1000E038C;
  return sub_1000059F0();
}

uint64_t sub_1000E038C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000E03EC, v3, 0);
}

uint64_t sub_1000E03EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[11];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[5];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v6(v0[7], v4, v0[4], v7);
      if ((Device.isThisDevice.getter(v8) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(v0[7], v0[4]);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(v0[11]);
        goto LABEL_6;
      }
    }
    v10 = v0[9];
    v11 = v0[7];
    v12 = v0[4];
    v13 = v0[5];
    swift_bridgeObjectRelease(v0[11]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v10, v11, v12);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v9(v10, 0, 1, v12);
  }
  else
  {
LABEL_6:
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[5] + 56);
    v9(v0[9], 1, 1, v0[4]);
  }
  v0[12] = v9;
  swift_bridgeObjectRelease(v0[11]);
  v14 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v0[13] = v14;
  *v14 = v0;
  v14[1] = sub_1000E0514;
  return sub_1000059F0();
}

uint64_t sub_1000E0514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000E0574, v3, 0);
}

uint64_t sub_1000E0574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v3 + 16);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = v6(*(_QWORD *)(v0 + 48), v4, *(_QWORD *)(v0 + 32));
      if ((Device.isCompanion.getter(v7) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
        goto LABEL_6;
      }
    }
    v9 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v10, v12);
    v8 = 0;
  }
  else
  {
LABEL_6:
    v8 = 1;
  }
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 96))(v15, v8, 1, *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v13);
  DeviceWithCompanion.init(thisDevice:companion:)(v14, v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E06A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E0708, v0, 0);
}

uint64_t sub_1000E0708()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[3];
  v7 = v0[2];

  type metadata accessor for XPCActivity(0);
  static DispatchQoS.background.getter();
  v8 = swift_allocObject(&unk_1002528C8, 24, 7);
  swift_weakInit(v8 + 16, v7);
  v9 = swift_allocObject(&unk_1002528F0, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v6;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1]);
  v0[5] = v10;
  *v10 = v0;
  v10[1] = sub_1000E0894;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD00000000000002BLL, 0x80000001001FED30, v0[4], &unk_100263608, 0, &unk_100263618, v9);
}

uint64_t sub_1000E0894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000E08F4, v3, 0);
}

uint64_t sub_1000E08F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = *(_QWORD *)(v0 + 48);
  swift_release(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E0940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000E0958, 0, 0);
}

uint64_t sub_1000E0958()
{
  uint64_t v0;

  sub_10000E37C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16), &qword_100263628);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E0990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[79] = a3;
  v3[78] = a2;
  v3[77] = a1;
  v4 = type metadata accessor for XPCActivity.State(0);
  v3[80] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[81] = v5;
  v3[82] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E09F8, 0, 0);
}

uint64_t sub_1000E09F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t Strong;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 624), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 632);

    swift_beginAccess(v10 + 16, v0 + 592, 0, 0);
    Strong = swift_weakLoadStrong(v10 + 16);
    *(_QWORD *)(v0 + 664) = Strong;
    if (Strong)
    {
      v12 = (_QWORD *)swift_task_alloc(dword_100262DBC);
      *(_QWORD *)(v0 + 672) = v12;
      *v12 = v0;
      v12[1] = sub_1000E0D14;
      return sub_1000E3CBC(v0 + 16);
    }
    v25 = type metadata accessor for XPCActivity(0);
    v26 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v21 = dispatch thunk of Actor.unownedExecutor.getter(v25, v26);
    v23 = v27;
    v24 = sub_1000E0DCC;
  }
  else
  {
    if (v4 != enum case for XPCActivity.State.defer(_:))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 648) + 8))(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 640));
      swift_task_dealloc(*(_QWORD *)(v0 + 656));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100037A9C(v14, (uint64_t)qword_10027ACA0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = type metadata accessor for XPCActivity(0);
    v20 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
    v23 = v22;
    v24 = sub_1000E0E38;
  }
  return swift_task_switch(v24, v21, v23);
}

uint64_t sub_1000E0D14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 664);
  swift_task_dealloc(*(_QWORD *)(*v0 + 672));
  sub_1000F946C(v1 + 16, sub_10005ED50);
  swift_release(v2);
  v3 = type metadata accessor for XPCActivity(0);
  v4 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_1000E0DCC, v5, v6);
}

uint64_t sub_1000E0DCC()
{
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_1000E0E08, 0, 0);
}

uint64_t sub_1000E0E08()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 656));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E0E38()
{
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_1000FA1B0, 0, 0);
}

uint64_t sub_1000E0E74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[95] = v0;
  v2 = sub_100037A5C(&qword_1002635F0);
  v1[101] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[102] = v3;
  v1[103] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263510) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[104] = swift_task_alloc(v4);
  v1[105] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000E0F0C, v0, 0);
}

uint64_t sub_1000E0F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager: run", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_100263534);
  *(_QWORD *)(v0 + 848) = v6;
  *v6 = v0;
  v6[1] = sub_1000E1008;
  return sub_1000E1534();
}

uint64_t sub_1000E1008()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 848));
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 856) = v2;
  *v2 = v4;
  v2[1] = sub_1000E106C;
  return daemon.getter();
}

uint64_t sub_1000E106C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 856);
  v5 = *v1;
  *(_QWORD *)(*v1 + 864) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 872) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1000E1154;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000E1154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 872);
  v4[110] = a1;
  v4[111] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[95];
    v7 = sub_1000E1458;
  }
  else
  {
    swift_release(v4[108]);
    v7 = sub_1000E11D4;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000E11D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[110];
  v2 = v0[103];
  v3 = v0[102];
  v4 = v0[101];
  v5 = v0[95];
  v6 = swift_allocObject(&unk_1002528A0, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = type metadata accessor for AccountService.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v7, v2, sub_1000F9D14, v6, v7);
  swift_release(v6);
  return swift_task_switch(sub_1000E12AC, v5, 0);
}

uint64_t sub_1000E12AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[105];
  v2 = v0[104];
  v3 = v0[95];
  v4 = sub_100037A5C(&qword_100261F00);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_100263510);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream, v0 + 87, 33, 0);
  sub_1000F9D1C(v2, v5);
  swift_endAccess(v0 + 87);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100263600, v3);
  return swift_asyncLet_get_throwing(v0 + 2, v6, sub_1000E13A8, v0 + 82);
}

uint64_t sub_1000E13A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  *(_QWORD *)(v3 + 896) = v2;
  if (v2)
  {
    v4 = v3 + 720;
    v5 = sub_1000E14B4;
  }
  else
  {
    v4 = v3 + 768;
    v5 = sub_1000E13D4;
  }
  return swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_1000E13D4()
{
  uint64_t v0;

  return swift_task_switch(sub_1000E13E8, *(_QWORD *)(v0 + 760), 0);
}

uint64_t sub_1000E13E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 880));
  swift_release_n(v4, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 864));
  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 840));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E14B4()
{
  uint64_t v0;

  return swift_task_switch(sub_1000E14C8, *(_QWORD *)(v0 + 760), 0);
}

uint64_t sub_1000E14C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 880));
  swift_release_n(v1, 2);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 840));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1534()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[7] = v0;
  v1[8] = *v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DataManager.State(0);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002632F8);
  v1[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[13] = v5;
  v1[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E15E8, v0, 0);
}

uint64_t sub_1000E15E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  if (qword_10025F948 != -1)
    swift_once(&qword_10025F948, sub_1000E01BC);
  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = sub_100037A9C(v3, (uint64_t)qword_100262D20);
  swift_beginAccess(v4, v0 + 16, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  ManagedDefault.wrappedValue.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_BYTE *)(v0 + 156);
  *(_BYTE *)(v0 + 157) = v5;
  v6 = v5 & 1;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100037A9C(v7, (uint64_t)qword_10027ACA0);
  *(_QWORD *)(v0 + 120) = v8;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(18, -1);
    v12 = swift_slowAlloc(32, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(0x65696C4374696E69, 0xEC0000002928746ELL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v0 + 152) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 156, v11 + 14, v11 + 18);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s isInitialized:%{BOOL}d", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = swift_allocObject(&unk_100252800, 40, 7);
  *(_QWORD *)(v0 + 128) = v15;
  *(_QWORD *)(v15 + 16) = v13;
  *(_BYTE *)(v15 + 24) = v6;
  *(_QWORD *)(v15 + 32) = v14;
  v16 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v13);
  v17 = (_QWORD *)swift_task_alloc(v16);
  *(_QWORD *)(v0 + 136) = v17;
  *v17 = v0;
  v17[1] = sub_1000E18A8;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000E18A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = sub_1000E1964;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release(*(_QWORD *)(v2 + 128));
    v5 = sub_1000E191C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000E191C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 144);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 40) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Init client failed due to %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 144);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }
  v11 = *(_BYTE *)(v0 + 157);

  if ((v11 & 1) != 0)
  {
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Daemon has already initialized, updating DataManager state so we can respond to incoming requests", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 72);
    v27 = *(_OWORD *)(v0 + 56);

    swift_storeEnumTagMultiPayload(v17, v18, 6);
    sub_10000A37C(v17);
    sub_100024990(v17, type metadata accessor for DataManager.State);
    v20 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    v21 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
    v22 = swift_allocObject(&unk_100252828, 48, 7);
    *(_QWORD *)(v22 + 16) = v27;
    *(_QWORD *)(v22 + 24) = v21;
    *(_OWORD *)(v22 + 32) = v27;
    swift_retain_n(v27, 2);
    v23 = sub_10005582C(v19, (uint64_t)&unk_1002635C0, v22);
    swift_errorRelease(v16);
    swift_release(v23);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 144));
  }
  v24 = *(_QWORD *)(v0 + 88);
  v25 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1C68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100262DAC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000E1CB0();
}

uint64_t sub_1000E1CB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1[20] = v0;
  v1[21] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_1002632F8);
  v1[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[24] = v4;
  v1[25] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Account(0);
  v1[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[27] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v1[28] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v8);
  v1[30] = swift_task_alloc(v8);
  v1[31] = swift_task_alloc(v8);
  v9 = type metadata accessor for AccountService.State(0);
  v1[32] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[33] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[34] = swift_task_alloc(v11);
  v1[35] = swift_task_alloc(v11);
  v1[36] = swift_task_alloc(v11);
  v1[37] = swift_task_alloc(v11);
  v1[38] = swift_task_alloc(v11);
  v1[39] = swift_task_alloc(v11);
  v1[40] = swift_task_alloc(v11);
  v1[41] = swift_task_alloc(v11);
  v12 = sub_100037A5C(&qword_100263500);
  v1[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100263508);
  v1[43] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[44] = v14;
  v1[45] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C(&qword_100263510);
  v1[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C(&qword_100261F00);
  v1[47] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[48] = v17;
  v1[49] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E1EA4, v0, 0);
}

uint64_t sub_1000E1EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
LABEL_10:
    v17 = *(_QWORD *)(v1 + 360);
    v16 = *(_QWORD *)(v1 + 368);
    v19 = *(_QWORD *)(v1 + 328);
    v18 = *(_QWORD *)(v1 + 336);
    v21 = *(_QWORD *)(v1 + 312);
    v20 = *(_QWORD *)(v1 + 320);
    v22 = *(_QWORD *)(v1 + 296);
    v23 = *(_QWORD *)(v1 + 304);
    v24 = *(_QWORD *)(v1 + 288);
    v30 = *(_QWORD *)(v1 + 280);
    v31 = *(_QWORD *)(v1 + 272);
    v32 = *(_QWORD *)(v1 + 248);
    v33 = *(_QWORD *)(v1 + 240);
    v34 = *(_QWORD *)(v1 + 232);
    v35 = *(_QWORD *)(v1 + 200);
    v36 = *(_QWORD *)(v1 + 176);
    swift_task_dealloc(*(_QWORD *)(v1 + 392));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  *(_QWORD *)(v1 + 400) = v3;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Monitoring AccountState stream", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 376);
  v8 = *(_QWORD *)(v1 + 384);
  v9 = *(_QWORD *)(v1 + 368);
  v10 = *(_QWORD *)(v1 + 160);

  v11 = v10 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream;
  swift_beginAccess(v10 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream, v1 + 16, 0, 0);
  sub_10000E37C(v11, v9, &qword_100263510);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v12 = sub_1000087A0(*(_QWORD *)(v1 + 368), &qword_100263510);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "accountStateStream should be available by now!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    goto LABEL_10;
  }
  v26 = *(_QWORD *)(v1 + 376);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 384) + 32))(*(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 368), v26);
  AsyncStream.makeAsyncIterator()(v26);
  v27 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
  *(_QWORD *)(v1 + 408) = v27;
  *(_QWORD *)(v1 + 416) = 0;
  v28 = *(_QWORD *)(v1 + 160);
  v29 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 424) = v29;
  *v29 = v1;
  v29[1] = sub_1000E21F0;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 336), v28, v27, *(_QWORD *)(v1 + 344));
}

uint64_t sub_1000E21F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  return swift_task_switch(sub_1000E2248, v1, 0);
}

uint64_t sub_1000E2248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  char *v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint8_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 48))(v1, 1, *(_QWORD *)(v0 + 256)) == 1)
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopped processing accountStateStream!", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 384);
    v6 = *(_QWORD *)(v0 + 392);
    v8 = *(_QWORD *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v10 = *(_QWORD *)(v0 + 360);
    v9 = *(_QWORD *)(v0 + 368);
    v12 = *(_QWORD *)(v0 + 328);
    v11 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 320);
    v15 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 288);
    v101 = *(_QWORD *)(v0 + 280);
    v103 = *(_QWORD *)(v0 + 272);
    v105 = *(_QWORD *)(v0 + 248);
    v107 = *(_QWORD *)(v0 + 240);
    v109 = *(_QWORD *)(v0 + 232);
    v111 = *(_QWORD *)(v0 + 200);
    v113 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  v19 = *(_QWORD *)(v0 + 416);
  v20 = sub_1000321F4(v1, *(_QWORD *)(v0 + 328), type metadata accessor for AccountService.State);
  static Task<>.checkCancellation()(v20);
  *(_QWORD *)(v0 + 432) = v19;
  if (v19)
  {
    v22 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 368);
    v23 = *(_QWORD *)(v0 + 376);
    v26 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 360);
    v27 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 328);
    v95 = *(_QWORD *)(v0 + 336);
    v96 = *(_QWORD *)(v0 + 320);
    v97 = *(_QWORD *)(v0 + 312);
    v98 = *(_QWORD *)(v0 + 304);
    v99 = *(_QWORD *)(v0 + 296);
    v100 = *(_QWORD *)(v0 + 288);
    v102 = *(_QWORD *)(v0 + 280);
    v104 = *(_QWORD *)(v0 + 272);
    v106 = *(_QWORD *)(v0 + 248);
    v108 = *(_QWORD *)(v0 + 240);
    v110 = *(_QWORD *)(v0 + 232);
    v112 = *(_QWORD *)(v0 + 200);
    v114 = *(_QWORD *)(v0 + 176);
    sub_100024990(v28, type metadata accessor for AccountService.State);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc(v21);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v95);
    swift_task_dealloc(v28);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  v30 = sub_100025C70(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 320), type metadata accessor for AccountService.State);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v34 = *(_QWORD *)(v0 + 320);
  if (v33)
  {
    v36 = *(_QWORD *)(v0 + 304);
    v35 = *(_QWORD *)(v0 + 312);
    v37 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)(v0 + 144) = swift_slowAlloc(32, -1);
    *v37 = 136315138;
    sub_100025C70(v34, v35, type metadata accessor for AccountService.State);
    sub_100025C70(v35, v36, type metadata accessor for AccountService.State);
    v38 = sub_100037A5C(&qword_1002614A8);
    v39 = (char *)&loc_1000E264C
        + 4
        * byte_1001F562C[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v36, 3, v38)];
    __asm { BR              X10 }
  }
  sub_100024990(*(_QWORD *)(v0 + 320), type metadata accessor for AccountService.State);

  v40 = *(_QWORD *)(v0 + 296);
  sub_100025C70(*(_QWORD *)(v0 + 328), v40, type metadata accessor for AccountService.State);
  v41 = sub_100037A5C(&qword_1002614A8);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48);
  v43 = v42(v40, 3, v41);
  if ((v43 - 1) < 2)
  {
    v44 = sub_100025C70(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 288), type metadata accessor for AccountService.State);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v48 = *(_QWORD *)(v0 + 280);
      v47 = *(_QWORD *)(v0 + 288);
      v49 = *(_QWORD *)(v0 + 272);
      v50 = (_DWORD *)swift_slowAlloc(12, -1);
      *(_QWORD *)(v0 + 152) = swift_slowAlloc(32, -1);
      *v50 = 136315138;
      sub_100025C70(v47, v48, type metadata accessor for AccountService.State);
      sub_100025C70(v48, v49, type metadata accessor for AccountService.State);
      v51 = (char *)&loc_1000E290C + 4 * word_1001F5630[v42(v49, 3, v41)];
      __asm { BR              X10 }
    }
    v68 = *(_QWORD *)(v0 + 328);
    v69 = *(_QWORD *)(v0 + 288);

    sub_100024990(v69, type metadata accessor for AccountService.State);
    v70 = v68;
LABEL_29:
    sub_100024990(v70, type metadata accessor for AccountService.State);
    *(_QWORD *)(v0 + 416) = 0;
    v92 = *(_QWORD *)(v0 + 408);
    v93 = *(_QWORD *)(v0 + 160);
    v94 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 424) = v94;
    *v94 = v0;
    v94[1] = sub_1000E21F0;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 336), v93, v92, *(_QWORD *)(v0 + 344));
  }
  if ((_DWORD)v43)
  {
    v71 = Logger.logObject.getter(v43);
    v72 = static os_log_type_t.default.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Account is .noAccount. Resetting localDB and removing UserDefaults.", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }
    v74 = *(_QWORD *)(v0 + 328);
    v75 = *(_QWORD *)(v0 + 176);

    sub_1000F9830();
    sub_1000E367C();
    v76 = type metadata accessor for WorkItemQueue.WorkItem(0);
    UUID.init()(v76);
    v77 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v75, &unk_100263520, 0, &unk_100263528, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v77);
    swift_release(v77);
    v70 = v74;
    goto LABEL_29;
  }
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 32);
  v53 = v52(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 208));
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Account is available", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

  if (qword_10025F948 != -1)
    swift_once(&qword_10025F948, sub_1000E01BC);
  v58 = *(_QWORD *)(v0 + 192);
  v57 = *(_QWORD *)(v0 + 200);
  v59 = *(_QWORD *)(v0 + 184);
  v60 = sub_100037A9C(v59, (uint64_t)qword_100262D20);
  swift_beginAccess(v60, v0 + 40, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v60, v59);
  ManagedDefault.wrappedValue.getter(v59);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
  v62 = *(_BYTE *)(v0 + 480);
  v63 = Logger.logObject.getter(v61);
  v64 = static os_log_type_t.default.getter(v63);
  v65 = os_log_type_enabled(v63, v64);
  if ((v62 & 1) != 0)
  {
    if (v65)
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Already initialized.", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }
    v80 = *(_QWORD *)(v0 + 232);
    v79 = *(_QWORD *)(v0 + 240);
    v82 = *(_QWORD *)(v0 + 216);
    v81 = *(_QWORD *)(v0 + 224);
    v83 = *(_QWORD *)(v0 + 208);
    v84 = *(_QWORD *)(v0 + 160);
    v85 = *(_QWORD *)(v0 + 168);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v80, v79, v83);
    v86 = *(unsigned __int8 *)(v82 + 80);
    v87 = (v86 + 24) & ~v86;
    v88 = (v81 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
    v89 = swift_allocObject(&unk_100252738, v88 + 8, v86 | 7);
    *(_QWORD *)(v0 + 448) = v89;
    *(_QWORD *)(v89 + 16) = v84;
    v52(v89 + v87, v80, v83);
    *(_QWORD *)(v89 + v88) = v85;
    v90 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
    v115 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                   + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain(v84);
    v91 = (_QWORD *)swift_task_alloc(v90);
    *(_QWORD *)(v0 + 456) = v91;
    *v91 = v0;
    v91[1] = sub_1000E3004;
    return v115(&unk_100263540, v89);
  }
  else
  {
    if (v65)
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Account is available and need to initClient", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v67 = (_QWORD *)swift_task_alloc(dword_100263534);
    *(_QWORD *)(v0 + 440) = v67;
    *v67 = v0;
    v67[1] = sub_1000E2F14;
    return sub_1000E1534();
  }
}

uint64_t sub_1000E2F14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  return swift_task_switch(sub_1000E2F6C, v1, 0);
}

uint64_t sub_1000E2F6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  (*(void (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[30], v0[26]);
  sub_100024990(v1, type metadata accessor for AccountService.State);
  v0[52] = v0[54];
  v2 = v0[51];
  v3 = v0[20];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[53] = v4;
  *v4 = v0;
  v4[1] = sub_1000E21F0;
  return AsyncStream.Iterator.next(isolation:)(v0[42], v3, v2, v0[43]);
}

uint64_t sub_1000E3004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  v3 = *(_QWORD **)v1;
  v3[58] = v0;
  swift_task_dealloc(v2);
  v4 = v3[56];
  if (v0)
  {
    v5 = v3[20];
    swift_release(v4);
    v6 = sub_1000E3194;
    v7 = v5;
  }
  else
  {
    swift_release(v4);
    v8 = (_QWORD *)swift_task_alloc(dword_100262DC4);
    v3[59] = v8;
    *v8 = v3;
    v8[1] = sub_1000E30A4;
    v7 = v3[20];
    v8[548] = v7;
    v6 = sub_1000E5248;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_1000E30A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  return swift_task_switch(sub_1000E30FC, v1, 0);
}

uint64_t sub_1000E30FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  (*(void (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[30], v0[26]);
  sub_100024990(v1, type metadata accessor for AccountService.State);
  v0[52] = v0[58];
  v2 = v0[51];
  v3 = v0[20];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[53] = v4;
  *v4 = v0;
  v4[1] = sub_1000E21F0;
  return AsyncStream.Iterator.next(isolation:)(v0[42], v3, v2, v0[43]);
}

uint64_t sub_1000E3194()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = v0[58];
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[58];
    v24 = v0[30];
    v25 = v0[41];
    v22 = v0[27];
    v23 = v0[26];
    v7 = swift_slowAlloc(22, -1);
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    v21 = swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v7 = 136446466;
    v0[16] = sub_10002BA84(0xD000000000000015, 0x80000001001FEC80, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain(v6);
    v8 = _swift_stdlib_bridgeErrorToNSError(v6);
    v0[17] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v7 + 14, v7 + 22);
    *v20 = v8;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed to setup APNS account %{public}@", (uint8_t *)v7, 0x16u);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v20, 1, v9);
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
    v10 = v25;
  }
  else
  {
    v11 = v0[58];
    v12 = v1[41];
    v13 = v1[30];
    v14 = v1[26];
    v15 = v1[27];

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    v10 = v12;
  }
  sub_100024990(v10, type metadata accessor for AccountService.State);
  v1[52] = 0;
  v16 = v1[51];
  v17 = v1[20];
  v18 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[53] = v18;
  *v18 = v1;
  v18[1] = sub_1000E21F0;
  return AsyncStream.Iterator.next(isolation:)(v1[42], v17, v16, v1[43]);
}

uint64_t sub_1000E344C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = type metadata accessor for Account(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E34B8, v1, 0);
}

uint64_t sub_1000E34B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(void *, uint64_t);

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  v6 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[2], v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100252878, v9 + 8, v7 | 7);
  v0[9] = v10;
  *(_QWORD *)(v10 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(_QWORD *)(v10 + v9) = v6;
  v11 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v14 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain(v5);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[10] = v12;
  *v12 = v0;
  v12[1] = sub_1000E35C0;
  return v14(&unk_1002635E8, v10);
}

uint64_t sub_1000E35C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v1 + 72);
  v2 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  *(_QWORD *)(v4 + 88) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    return swift_task_switch(sub_1000E3648, *(_QWORD *)(v4 + 24), 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 64));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000E3648()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E367C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027ACA0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v18 = v9;
      *(_DWORD *)v8 = 136446210;
      v17 = sub_10002BA84(0x29287261656C63, 0xE700000000000000, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s UserDefaults clear all", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "standardUserDefaults");
    objc_msgSend(v10, "removePersistentDomainForName:", v3);

  }
  else
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100037A9C(v11, (uint64_t)qword_10027ACA0);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v18 = v15;
      *(_DWORD *)v14 = 136446210;
      v17 = sub_10002BA84(0x29287261656C63, 0xE700000000000000, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "%{public}s UserDefaults failed with no bundle identifier", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1000E39B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000E3A28, v2, 0);
}

uint64_t sub_1000E3A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v29;
  os_log_type_t type;
  uint64_t v31;
  uint64_t v32;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027ACA0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v29 = *(_QWORD *)(v0 + 64);
    v17 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v32 = v31;
    *(_DWORD *)v17 = 136315394;
    type = v11;
    v18 = sub_100004EA8(&qword_100260108, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v29, v16);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "DataManager: migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E3CBC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t refreshed;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[532] = v1;
  v2[531] = a1;
  v2[533] = *v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[534] = swift_task_alloc(v3);
  v2[535] = swift_task_alloc(v3);
  v4 = type metadata accessor for URLComponents(0);
  v2[536] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[537] = v5;
  v2[538] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for RefreshClientEndpoint(0);
  v2[539] = refreshed;
  v2[540] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(refreshed - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260580);
  v2[541] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Account(0);
  v2[542] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[543] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[544] = swift_task_alloc(v10);
  v2[545] = swift_task_alloc(v10);
  v2[546] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000E3DE8, v1, 0);
}

uint64_t sub_1000E3DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  *(_QWORD *)(v0 + 4376) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refresh client", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 4384) = v6;
  *v6 = v0;
  v6[1] = sub_1000E3EE8;
  return daemon.getter();
}

uint64_t sub_1000E3EE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 4384);
  v5 = *v1;
  *(_QWORD *)(*v1 + 4392) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 4400) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1000E3FD0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000E3FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 4400);
  v5 = *(_QWORD **)v2;
  v5[551] = a1;
  v5[552] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000E4FD4, v5[532], 0);
  swift_release(v5[549]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[553] = v7;
  *v7 = v5;
  v7[1] = sub_1000E4080;
  return sub_1000069E8(v5[541]);
}

uint64_t sub_1000E4080()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 4256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 4424));
  return swift_task_switch(sub_1000E40D8, v1, 0);
}

uint64_t sub_1000E40D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(uint64_t, _QWORD);
  Swift::String v22;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);

  v1 = *(_QWORD *)(v0 + 4344);
  v2 = *(_QWORD *)(v0 + 4336);
  v3 = *(_QWORD *)(v0 + 4328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to send refresh client!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 4408);

    swift_release(v8);
    sub_1000F97D4((void *)(v0 + 2896));
    sub_10000EF6C(v0 + 2896, v0 + 592, &qword_100261938);
    v9 = *(_QWORD *)(v0 + 4368);
    v10 = *(_QWORD *)(v0 + 4360);
    v11 = *(_QWORD *)(v0 + 4352);
    v12 = *(_QWORD *)(v0 + 4328);
    v13 = *(_QWORD *)(v0 + 4320);
    v14 = *(_QWORD *)(v0 + 4304);
    v15 = *(_QWORD *)(v0 + 4280);
    v28 = *(_QWORD *)(v0 + 4272);
    sub_10000EF6C(v0 + 592, *(_QWORD *)(v0 + 4248), &qword_100261938);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 4368);
    v18 = *(_QWORD *)(v0 + 4360);
    v27 = *(_QWORD *)(v0 + 4320);
    v29 = *(_QWORD *)(v0 + 4352);
    v19 = *(_QWORD *)(v0 + 4304);
    v25 = *(_QWORD *)(v0 + 4296);
    v26 = *(_QWORD *)(v0 + 4288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v17, v3, v2);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v20(v18, v17, v2);
    sub_10003CD40(v18);
    v21 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 4168);
    v22._countAndFlagsBits = 0x4368736572666572;
    v22._object = (void *)0xED0000746E65696CLL;
    String.append(_:)(v22);
    v21(v0 + 4168, 0);
    v23 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(_QWORD *)(v0 + 4432) = v23;
    v23(v18, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v27, v19, v26);
    v20(v29, v17, v2);
    v30 = (uint64_t (*)(uint64_t))((char *)&dword_100265888 + dword_100265888);
    v24 = (_QWORD *)swift_task_alloc(unk_10026588C);
    *(_QWORD *)(v0 + 4440) = v24;
    *v24 = v0;
    v24[1] = sub_1000E43A8;
    return v30(*(_QWORD *)(v0 + 4352));
  }
}

uint64_t sub_1000E43A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 4440);
  v5[556] = a1;
  v5[557] = a2;
  v5[558] = a3;
  v5[559] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_1000E4670;
  else
    v7 = sub_1000E4420;
  return swift_task_switch(v7, v5[532], 0);
}

uint64_t sub_1000E4420()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;

  v1 = v0[558];
  v2 = v0[557];
  v3 = v0[556];
  v4 = v0[540];
  v18 = v0[533];
  v5 = v0[532];
  v0[509] = v0[539];
  v0[510] = sub_100004EA8(&qword_1002634E8, type metadata accessor for RefreshClientEndpoint, (uint64_t)&unk_1001FB818);
  v6 = sub_10003276C(v0 + 506);
  sub_100025C70(v4, (uint64_t)v6, type metadata accessor for RefreshClientEndpoint);
  v0[514] = &type metadata for RefreshClientRequest;
  v0[515] = sub_1000F97DC();
  v0[511] = v3;
  v0[512] = v2;
  v0[513] = v1;
  swift_bridgeObjectRetain(v3);
  v7 = sub_10001F728(v2, v1);
  v8 = Account.dsid.getter(v7);
  v10 = v9;
  v11 = Account.appToken.getter();
  v13 = v12;
  v0[519] = type metadata accessor for BasicCredential(0);
  v0[520] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 516);
  BasicCredential.init(username:password:)(v8, v10, v11, v13);
  v14 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
  v15 = (_QWORD *)swift_task_alloc(64);
  v0[560] = v15;
  v15[2] = v0 + 506;
  v15[3] = v0 + 511;
  v15[4] = v5;
  v15[5] = v0 + 516;
  v15[6] = v18;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[561] = v16;
  *v16 = v0;
  v16[1] = sub_1000E4608;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 434, v5, v14, 0xD000000000000025, 0x80000001001FEA40, sub_1000E859C, v15, &type metadata for ServerBaseResponse);
}

uint64_t sub_1000E4608()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 4488);
  *(_QWORD *)(*v1 + 4496) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000E4CEC;
  else
    v4 = sub_1000E48F8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 4256), 0);
}

uint64_t sub_1000E4670()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 4432);
  v2 = *(_QWORD *)(v0 + 4368);
  v3 = *(_QWORD *)(v0 + 4336);
  v4 = *(_QWORD *)(v0 + 4320);
  swift_release(*(_QWORD *)(v0 + 4408));
  sub_100024990(v4, type metadata accessor for RefreshClientEndpoint);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 4472);
  swift_errorRetain(v5);
  v6 = swift_errorRetain(v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v24 = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v0 + 4224) = v5;
    swift_errorRetain(v5);
    v11 = sub_100037A5C(&qword_100265260);
    v12 = String.init<A>(describing:)(v0 + 4224, v11);
    v14 = v13;
    *(_QWORD *)(v0 + 4232) = sub_10002BA84(v12, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4232, v0 + 4240, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Refresh client failed due to %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  sub_1000F97D4((void *)(v0 + 1168));
  sub_10000EF6C(v0 + 1168, v0 + 592, &qword_100261938);
  v15 = *(_QWORD *)(v0 + 4368);
  v16 = *(_QWORD *)(v0 + 4360);
  v17 = *(_QWORD *)(v0 + 4352);
  v18 = *(_QWORD *)(v0 + 4328);
  v19 = *(_QWORD *)(v0 + 4320);
  v20 = *(_QWORD *)(v0 + 4304);
  v21 = *(_QWORD *)(v0 + 4280);
  v23 = *(_QWORD *)(v0 + 4272);
  sub_10000EF6C(v0 + 592, *(_QWORD *)(v0 + 4248), &qword_100261938);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E48F8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v33 = (void *)(v0 + 1744);
  memcpy((void *)(v0 + 16), (const void *)(v0 + 3472), 0x240uLL);
  memcpy((void *)(v0 + 2320), (const void *)(v0 + 3472), 0x240uLL);
  sub_1000087A0(v0 + 4128, &qword_100260598);
  sub_10002BB90((_QWORD *)(v0 + 4088));
  sub_10002BB90((_QWORD *)(v0 + 4048));
  sub_10002B630(v0 + 16);
  v1 = sub_10002B630(v0 + 16);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v34 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_10002B630(v0 + 16);
    v6 = sub_1000282A0();
    v8 = v7;
    sub_10002B3D4(v0 + 16);
    *(_QWORD *)(v0 + 4240) = sub_10002BA84(v6, v8, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4240, v0 + 4248, v4 + 4, v4 + 12);
    swift_bridgeObjectRelease(v8);
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received refresh client response: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
  }

  v9 = *(_QWORD *)(v0 + 4280);
  static Date.trustedNow.getter(v9);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  if (qword_10025F940 != -1)
    swift_once(&qword_10025F940, sub_1000E00A4);
  v32 = *(_QWORD *)(v0 + 4480);
  v11 = *(_QWORD *)(v0 + 4456);
  v12 = *(_QWORD *)(v0 + 4448);
  v13 = *(_QWORD *)(v0 + 4408);
  v30 = *(_QWORD *)(v0 + 4368);
  v31 = *(void (**)(uint64_t, uint64_t))(v0 + 4432);
  v28 = *(_QWORD *)(v0 + 4464);
  v29 = *(_QWORD *)(v0 + 4336);
  v27 = *(_QWORD *)(v0 + 4320);
  v14 = *(_QWORD *)(v0 + 4280);
  v15 = *(_QWORD *)(v0 + 4272);
  v16 = sub_100037A5C(&qword_1002634F8);
  v17 = sub_100037A9C(v16, (uint64_t)qword_100262D08);
  sub_10000E37C(v14, v15, (uint64_t *)&unk_100262930);
  swift_beginAccess(v17, v0 + 4200, 33, 0);
  ManagedDefault.wrappedValue.setter(v15, v16);
  swift_endAccess(v0 + 4200);
  sub_1000087A0(v14, (uint64_t *)&unk_100262930);
  swift_release(v13);
  swift_bridgeObjectRelease(v12);
  sub_100037AF8(v11, v28);
  sub_100024990(v27, type metadata accessor for RefreshClientEndpoint);
  v31(v30, v29);
  memcpy(v33, (const void *)(v0 + 2320), 0x240uLL);
  nullsub_1(v33);
  sub_10000EF6C((uint64_t)v33, v0 + 592, &qword_100261938);
  swift_task_dealloc(v32);
  v18 = *(_QWORD *)(v0 + 4368);
  v19 = *(_QWORD *)(v0 + 4360);
  v20 = *(_QWORD *)(v0 + 4352);
  v21 = *(_QWORD *)(v0 + 4328);
  v22 = *(_QWORD *)(v0 + 4320);
  v23 = *(_QWORD *)(v0 + 4304);
  v24 = *(_QWORD *)(v0 + 4280);
  v25 = *(_QWORD *)(v0 + 4272);
  sub_10000EF6C(v0 + 592, *(_QWORD *)(v0 + 4248), &qword_100261938);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E4CEC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 4464);
  v2 = *(_QWORD *)(v0 + 4456);
  v3 = *(_QWORD *)(v0 + 4448);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 4432);
  v5 = *(_QWORD *)(v0 + 4408);
  v6 = *(_QWORD *)(v0 + 4368);
  v7 = *(_QWORD *)(v0 + 4336);
  v8 = *(_QWORD *)(v0 + 4320);
  swift_task_dealloc(*(_QWORD *)(v0 + 4480));
  sub_1000087A0(v0 + 4128, &qword_100260598);
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for RefreshClientEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 4088));
  sub_10002BB90((_QWORD *)(v0 + 4048));
  v9 = *(_QWORD *)(v0 + 4496);
  swift_errorRetain(v9);
  v10 = swift_errorRetain(v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v28 = v14;
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v0 + 4224) = v9;
    swift_errorRetain(v9);
    v15 = sub_100037A5C(&qword_100265260);
    v16 = String.init<A>(describing:)(v0 + 4224, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 4232) = sub_10002BA84(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4232, v0 + 4240, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Refresh client failed due to %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  sub_1000F97D4((void *)(v0 + 1168));
  sub_10000EF6C(v0 + 1168, v0 + 592, &qword_100261938);
  v19 = *(_QWORD *)(v0 + 4368);
  v20 = *(_QWORD *)(v0 + 4360);
  v21 = *(_QWORD *)(v0 + 4352);
  v22 = *(_QWORD *)(v0 + 4328);
  v23 = *(_QWORD *)(v0 + 4320);
  v24 = *(_QWORD *)(v0 + 4304);
  v25 = *(_QWORD *)(v0 + 4280);
  v27 = *(_QWORD *)(v0 + 4272);
  sub_10000EF6C(v0 + 592, *(_QWORD *)(v0 + 4248), &qword_100261938);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E4FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 4392));
  v1 = *(_QWORD *)(v0 + 4416);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v20 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 4224) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 4224, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 4232) = sub_10002BA84(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4232, v0 + 4240, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refresh client failed due to %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  sub_1000F97D4((void *)(v0 + 1168));
  sub_10000EF6C(v0 + 1168, v0 + 592, &qword_100261938);
  v11 = *(_QWORD *)(v0 + 4368);
  v12 = *(_QWORD *)(v0 + 4360);
  v13 = *(_QWORD *)(v0 + 4352);
  v14 = *(_QWORD *)(v0 + 4328);
  v15 = *(_QWORD *)(v0 + 4320);
  v16 = *(_QWORD *)(v0 + 4304);
  v17 = *(_QWORD *)(v0 + 4280);
  v19 = *(_QWORD *)(v0 + 4272);
  sub_10000EF6C(v0 + 592, *(_QWORD *)(v0 + 4248), &qword_100261938);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E5230()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 4384) = v0;
  return swift_task_switch(sub_1000E5248, v0, 0);
}

uint64_t sub_1000E5248()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v0[549] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[547] = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FEC20, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 547, v0 + 548, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v0[550] = v7;
  *v7 = v0;
  v7[1] = sub_1000E53F8;
  return sub_10000AFC8((uint64_t)(v0 + 434));
}

uint64_t sub_1000E53F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0 + 2176;
  v2 = *(_QWORD *)v0 + 3472;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 4384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 4400));
  sub_10000EF6C(v2, v1, &qword_1002603A8);
  return swift_task_switch(sub_1000E5474, v3, 0);
}

uint64_t sub_1000E5474()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  sub_10000EF6C(v0 + 3472, v0 + 1744, &qword_1002603A8);
  v1 = sub_100049214(v0 + 1744);
  if ((_DWORD)v1 == 1)
  {
LABEL_2:
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Force refreshClient, since we have nil server settings in local DB.", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    v5 = (_QWORD *)swift_task_alloc(dword_100262DBC);
    *(_QWORD *)(v0 + 4408) = v5;
    *v5 = v0;
    v5[1] = sub_1000E5790;
    return sub_1000E3CBC(v0 + 592);
  }
  memcpy((void *)(v0 + 2608), (const void *)(v0 + 1744), 0x1B0uLL);
  sub_10000EF6C(v0 + 2864, v0 + 4208, &qword_100260858);
  sub_10000EF6C(v0 + 4208, v0 + 4064, &qword_100260858);
  if (sub_10005EFC4(v0 + 4064) == 1
    && (sub_10000EF6C(v0 + 2176, v0 + 3040, &qword_1002603A8),
        sub_10000EF6C(v0 + 3136, v0 + 3904, &qword_1002603B0),
        sub_10005EFE0(v0 + 3904) == 1))
  {
    v7 = *(_QWORD *)(v0 + 3440);
    v8 = *(_QWORD *)(v0 + 3448);
    v9 = *(_QWORD *)(v0 + 3456);
    v10 = *(_QWORD *)(v0 + 3464);
    sub_10002BD68(v7, v8, v9, v10);
    v1 = sub_1000179AC(v0 + 3472, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    if (!v8)
      goto LABEL_2;
    v11 = sub_10002BD98(v7, v8, v9, v10);
  }
  else
  {
    v11 = sub_1000179AC(v0 + 3472, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
  }
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v14 = 136446210;
    *(_QWORD *)(v0 + 4368) = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FEC20, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4368, v0 + 4376, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s not eligible, since we have non-nil serverSettings already.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E5790()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 4384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 4408));
  return swift_task_switch(sub_1000E57E8, v1, 0);
}

uint64_t sub_1000E57E8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  sub_10000EF6C(v0 + 592, v0 + 16, &qword_100261938);
  if (sub_100049214(v0 + 16) == 1 || *(_BYTE *)(v0 + 248) != 1)
  {
    v6 = sub_1000F946C(v0 + 592, sub_1000F955C);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(32, -1);
      v18 = v10;
      *(_DWORD *)v9 = 136446466;
      sub_10000EF6C(v0 + 592, v0 + 1168, &qword_100261938);
      v11 = sub_100049214(v0 + 1168);
      v12 = *(_BYTE *)(v0 + 1400);
      if (v11 == 1)
        v12 = 11;
      *(_BYTE *)(v0 + 4424) = v12;
      v13 = sub_100037A5C(&qword_1002634E0);
      v14 = String.init<A>(describing:)(v0 + 4424, v13);
      v16 = v15;
      *(_QWORD *)(v0 + 4352) = sub_10002BA84(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4352, v0 + 4360, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v16);
      sub_1000F946C(v0 + 592, sub_10005ED50);
      sub_1000F946C(v0 + 592, sub_10005ED50);
      *(_WORD *)(v9 + 12) = 2050;
      *(_QWORD *)(v0 + 4360) = 0x40AC200000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4360, v0 + 4368, v9 + 14, v9 + 22);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Force refreshClient call failed with %{public}s\nre-register an XPC activity fired after %{public}f", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_1000F946C(v0 + 592, sub_10005ED50);
      sub_1000F946C(v0 + 592, sub_10005ED50);
    }

    v17 = (_QWORD *)swift_task_alloc(dword_100264AFC);
    *(_QWORD *)(v0 + 4416) = v17;
    *v17 = v0;
    v17[1] = sub_1000E5AF0;
    return sub_10013FD68();
  }
  else
  {
    v1 = sub_1000F946C(v0 + 592, sub_10005ED50);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Force refreshClient call succeed, terminate scheduling XPC Activity to force refreshClient.", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E5AF0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 4416));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000E5B38(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v5 + 688) = v4;
  *(_BYTE *)(v5 + 844) = a4;
  *(_QWORD *)(v5 + 680) = a3;
  *(_QWORD *)(v5 + 672) = a2;
  *(_QWORD *)(v5 + 664) = a1;
  v6 = type metadata accessor for Handle(0);
  *(_QWORD *)(v5 + 696) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 704) = v7;
  *(_QWORD *)(v5 + 712) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260950);
  *(_QWORD *)(v5 + 720) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Friend(0);
  *(_QWORD *)(v5 + 728) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 736) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 744) = swift_task_alloc(v11);
  *(_QWORD *)(v5 + 752) = swift_task_alloc(v11);
  v12 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v5 + 760) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 + 768) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 776) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 784) = swift_task_alloc(v14);
  return swift_task_switch(sub_1000E5C3C, v4, 0);
}

uint64_t sub_1000E5C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 792) = sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 800) = v6;
  v7 = v6(v1, v4, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 768);
  v13 = *(_QWORD *)(v0 + 760);
  if (v10)
  {
    v23 = *(unsigned __int8 *)(v0 + 844);
    v14 = swift_slowAlloc(28, -1);
    v22 = swift_slowAlloc(64, -1);
    v24 = v22;
    *(_DWORD *)v14 = 136446722;
    *(_QWORD *)(v0 + 648) = sub_10002BA84(0xD00000000000002BLL, 0x80000001001FEBF0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    v15 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 656) = sub_10002BA84(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(v11, v13);
    *(_WORD *)(v14 + 22) = 1026;
    *(_DWORD *)(v0 + 840) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 844, v14 + 24, v14 + 28);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s type: %{public}s shouldRefresh: %{BOOL,public}d", (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 760));
  }

  *(_QWORD *)(v0 + 808) = v19;
  v20 = (_QWORD *)swift_task_alloc(dword_10026563C);
  *(_QWORD *)(v0 + 816) = v20;
  *v20 = v0;
  v20[1] = sub_1000E5EE8;
  return sub_100159E58(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680));
}

uint64_t sub_1000E5EE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 688);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 816));
  return swift_task_switch(sub_1000E5F40, v1, 0);
}

uint64_t sub_1000E5F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) != 1)
  {
    v28 = *(_QWORD *)(v0 + 752);
    v29 = *(_QWORD *)(v0 + 744);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v30(v28, v3, v2);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v29, v28, v2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    v34 = os_log_type_enabled(v32, v33);
    v35 = *(_QWORD *)(v0 + 744);
    v36 = *(_QWORD *)(v0 + 736);
    v37 = *(_QWORD *)(v0 + 728);
    if (v34)
    {
      v58 = v30;
      v38 = swift_slowAlloc(32, -1);
      v56 = swift_slowAlloc(64, -1);
      v59 = v56;
      *(_DWORD *)v38 = 136446723;
      *(_QWORD *)(v0 + 624) = sub_10002BA84(0xD00000000000002BLL, 0x80000001001FEBF0, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2160;
      *(_QWORD *)(v0 + 632) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v38 + 14, v38 + 22);
      *(_WORD *)(v38 + 22) = 2081;
      v39 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
      v42 = v41;
      *(_QWORD *)(v0 + 640) = sub_10002BA84(v40, v41, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v38 + 24, v38 + 32);
      v43 = v42;
      v30 = v58;
      swift_bridgeObjectRelease(v43);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s found friend:%{private,mask.hash}s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v36 + 8))(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 728));
    }

    v44 = *(_QWORD *)(v0 + 736);
    v45 = *(_QWORD *)(v0 + 728);
    v46 = *(_QWORD *)(v0 + 664);
    v30(v46, *(_QWORD *)(v0 + 752), v45);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v45);
    goto LABEL_10;
  }
  v4 = *(unsigned __int8 *)(v0 + 844);
  sub_1000087A0(v3, &qword_100260950);
  if (v4 != 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 736) + 56))(*(_QWORD *)(v0 + 664), 1, 1, *(_QWORD *)(v0 + 728));
LABEL_10:
    v47 = *(_QWORD *)(v0 + 776);
    v48 = *(_QWORD *)(v0 + 752);
    v49 = *(_QWORD *)(v0 + 744);
    v50 = *(_QWORD *)(v0 + 720);
    v51 = *(_QWORD *)(v0 + 712);
    swift_task_dealloc(*(_QWORD *)(v0 + 784));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = v0 + 16;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
  v7 = *(_QWORD *)(v0 + 776);
  v8 = *(_QWORD *)(v0 + 760);
  v9 = *(_QWORD *)(v0 + 680);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 704) + 16))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 696));
  v10 = v6(v7, v9, v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
  v15 = *(_QWORD *)(v0 + 776);
  v57 = *(_QWORD *)(v0 + 760);
  v16 = *(_QWORD *)(v0 + 712);
  v17 = *(_QWORD *)(v0 + 704);
  v18 = *(_QWORD *)(v0 + 696);
  if (v13)
  {
    v54 = *(_QWORD *)(v0 + 776);
    v19 = swift_slowAlloc(42, -1);
    v55 = swift_slowAlloc(64, -1);
    v59 = v55;
    *(_DWORD *)v19 = 141558787;
    *(_QWORD *)(v0 + 592) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v20 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v18, v20);
    v23 = v22;
    *(_QWORD *)(v0 + 600) = sub_10002BA84(v21, v22, &v59);
    v5 = v0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    *(_WORD *)(v19 + 22) = 2160;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v19 + 24, v19 + 32);
    *(_WORD *)(v19 + 32) = 2081;
    v24 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v57, v24);
    v27 = v26;
    *(_QWORD *)(v0 + 616) = sub_10002BA84(v25, v26, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease(v27);
    v14(v54, v57);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Handle %{private,mask.hash}s\nwith type: %{private,mask.hash}s not found. Refreshing...", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v17 + 8))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 696));
    v14(v15, v57);
  }

  v53 = (_QWORD *)swift_task_alloc(dword_100262DBC);
  *(_QWORD *)(v0 + 824) = v53;
  *v53 = v0;
  v53[1] = sub_1000E6538;
  return sub_1000E3CBC(v5);
}

uint64_t sub_1000E6538()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 824));
  sub_1000F946C(v1 + 2, sub_10005ED50);
  v3 = (_QWORD *)swift_task_alloc(dword_100262DCC);
  v1[104] = v3;
  *v3 = v2;
  v3[1] = sub_1000E65C8;
  return sub_1000E5B38(v1[83], v1[84], v1[85], 0);
}

uint64_t sub_1000E65C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v1 = *(_QWORD **)v0;
  v9 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 832));
  v2 = v1[98];
  v3 = v1[97];
  v4 = v1[94];
  v5 = v1[93];
  v6 = v1[90];
  v7 = v1[89];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return ((uint64_t (*)(void))v9[1])();
}

uint64_t sub_1000E6660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)(v6 + 696) = v5;
  *(_BYTE *)(v6 + 876) = a5;
  *(_QWORD *)(v6 + 688) = a4;
  *(_QWORD *)(v6 + 680) = a3;
  *(_QWORD *)(v6 + 672) = a2;
  *(_QWORD *)(v6 + 664) = a1;
  v7 = type metadata accessor for Handle(0);
  *(_QWORD *)(v6 + 704) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 712) = v8;
  *(_QWORD *)(v6 + 720) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100260950);
  *(_QWORD *)(v6 + 728) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Friend(0);
  *(_QWORD *)(v6 + 736) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 744) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 752) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 760) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 768) = swift_task_alloc(v12);
  v13 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v6 + 776) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v6 + 784) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 792) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 800) = swift_task_alloc(v15);
  return swift_task_switch(sub_1000E6774, v5, 0);
}

uint64_t sub_1000E6774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 808) = sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 816) = v6;
  v7 = v6(v1, v4, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 800);
  v12 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 776);
  if (v10)
  {
    v29 = *(unsigned __int8 *)(v0 + 876);
    v14 = swift_slowAlloc(28, -1);
    v30 = swift_slowAlloc(64, -1);
    v31 = v30;
    *(_DWORD *)v14 = 136446722;
    *(_QWORD *)(v0 + 648) = sub_10002BA84(0xD000000000000020, 0x80000001001FEBC0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2080;
    v15 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 656) = sub_10002BA84(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(v11, v13);
    *(_WORD *)(v14 + 22) = 1026;
    *(_DWORD *)(v0 + 872) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 876, v14 + 24, v14 + 28);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s type: %s shouldRefresh: %{BOOL,public}d", (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 776));
  }

  *(_QWORD *)(v0 + 824) = v19;
  v20 = *(_QWORD *)(v0 + 784);
  v21 = *(_QWORD *)(v0 + 776);
  v22 = *(_QWORD *)(v0 + 688);
  v23 = sub_100037A5C(&qword_100260620);
  v24 = *(unsigned __int8 *)(v20 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject(v23, v25 + *(_QWORD *)(v20 + 72), v24 | 7);
  *(_QWORD *)(v0 + 832) = v26;
  *(_OWORD *)(v26 + 16) = xmmword_1001F35F0;
  v6(v26 + v25, v22, v21);
  v27 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 840) = v27;
  *v27 = v0;
  v27[1] = sub_1000E6A80;
  return sub_1000196E8(v26, 1);
}

uint64_t sub_1000E6A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 840);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 832);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 696);
  *(_QWORD *)(*(_QWORD *)v1 + 848) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000E6AEC, v4, 0);
}

uint64_t sub_1000E6AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t type[8];
  uint64_t typea;
  uint64_t v80;
  void (*v81)(uint64_t, _QWORD, uint64_t);
  uint64_t v82;

  v77 = v0 + 624;
  v1 = *(_QWORD *)(v0 + 848);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_12:
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 744) + 56);
    v19(*(_QWORD *)(v0 + 728), 1, 1, *(_QWORD *)(v0 + 736));
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v0 + 744);
  *(_QWORD *)type = *(_QWORD *)(v0 + 680);
  v80 = *(_QWORD *)(v0 + 712);
  v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
  v7 = swift_bridgeObjectRetain(v1);
  while (1)
  {
    v8 = *(_QWORD *)(v0 + 720);
    v9 = *(_QWORD *)(v0 + 704);
    v10 = v6(*(_QWORD *)(v0 + 760), v4, *(_QWORD *)(v0 + 736), v7);
    v11 = Friend.handle.getter(v10);
    v12 = Handle.serverID.getter(v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v8, v9);
    if (!v14)
      goto LABEL_3;
    v15 = *(_QWORD *)(v0 + 672);
    if (v12 == v15 && v14 == *(_QWORD *)type)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, *(_QWORD *)(v0 + 680), 0);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v0 + 848);
      goto LABEL_14;
    }
LABEL_3:
    (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
    v4 += v5;
    if (!--v2)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 848));
      goto LABEL_12;
    }
  }
  v18 = *(_QWORD *)(v0 + 848);
  swift_bridgeObjectRelease(v14);
LABEL_14:
  swift_bridgeObjectRelease(v18);
  v20 = *(_QWORD *)(v0 + 744);
  v21 = *(_QWORD *)(v0 + 736);
  v22 = *(_QWORD *)(v0 + 728);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 32))(v22, *(_QWORD *)(v0 + 760), v21);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v19(v22, 0, 1, v21);
LABEL_15:
  v23 = *(_QWORD *)(v0 + 744);
  v24 = *(_QWORD *)(v0 + 736);
  v25 = *(_QWORD *)(v0 + 728);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 848));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) != 1)
  {
    v44 = *(_QWORD *)(v0 + 768);
    v45 = *(_QWORD *)(v0 + 752);
    v46 = *(_QWORD *)(v0 + 744);
    v47 = *(_QWORD *)(v0 + 736);
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 32);
    v48(v44, *(_QWORD *)(v0 + 728), v47);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v44, v47);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v53 = *(_QWORD *)(v0 + 752);
    v54 = *(_QWORD *)(v0 + 736);
    if (v52)
    {
      v76 = *(_QWORD *)(v0 + 744);
      v55 = swift_slowAlloc(32, -1);
      typea = swift_slowAlloc(64, -1);
      *(_DWORD *)v55 = 136446723;
      v81 = v48;
      v82 = typea;
      *(_QWORD *)(v0 + 624) = sub_10002BA84(0xD000000000000020, 0x80000001001FEBC0, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v0 + 632, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2160;
      *(_QWORD *)(v0 + 632) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v55 + 14, v55 + 22);
      *(_WORD *)(v55 + 22) = 2081;
      v56 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v54, v56);
      v59 = v58;
      *(_QWORD *)(v0 + 640) = sub_10002BA84(v57, v58, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v55 + 24, v55 + 32);
      v60 = v59;
      v48 = v81;
      swift_bridgeObjectRelease(v60);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s found friend:%{private,mask.hash}s", (uint8_t *)v55, 0x20u);
      swift_arrayDestroy(typea, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 744) + 8))(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
    }

    v64 = *(_QWORD *)(v0 + 736);
    v65 = *(_QWORD *)(v0 + 664);
    v48(v65, *(_QWORD *)(v0 + 768), v64);
    v62 = v65;
    v63 = 0;
    v61 = v64;
    goto LABEL_24;
  }
  v26 = *(unsigned __int8 *)(v0 + 876);
  sub_1000087A0(*(_QWORD *)(v0 + 728), &qword_100260950);
  if (v26 != 1)
  {
    v61 = *(_QWORD *)(v0 + 736);
    v62 = *(_QWORD *)(v0 + 664);
    v63 = 1;
LABEL_24:
    v19(v62, v63, 1, v61);
    v66 = *(_QWORD *)(v0 + 792);
    v67 = *(_QWORD *)(v0 + 768);
    v68 = *(_QWORD *)(v0 + 760);
    v69 = *(_QWORD *)(v0 + 752);
    v70 = *(_QWORD *)(v0 + 728);
    v71 = *(_QWORD *)(v0 + 720);
    swift_task_dealloc(*(_QWORD *)(v0 + 800));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v27 = v0 + 16;
  v28 = *(_QWORD *)(v0 + 680);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 816))(*(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 776));
  v29 = swift_bridgeObjectRetain_n(v28, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v33 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v34 = *(_QWORD *)(v0 + 792);
  v35 = *(_QWORD *)(v0 + 776);
  v36 = *(_QWORD *)(v0 + 680);
  if (v32)
  {
    v37 = *(_QWORD *)(v0 + 672);
    v74 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v38 = swift_slowAlloc(42, -1);
    v75 = swift_slowAlloc(64, -1);
    v82 = v75;
    *(_DWORD *)v38 = 141558787;
    *(_QWORD *)(v0 + 592) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    swift_bridgeObjectRetain(v36);
    v39 = v37;
    v27 = v0 + 16;
    *(_QWORD *)(v0 + 600) = sub_10002BA84(v39, v36, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease_n(v36, 3);
    *(_WORD *)(v38 + 22) = 2160;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v38 + 24, v38 + 32);
    *(_WORD *)(v38 + 32) = 2081;
    v40 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v35, v40);
    v43 = v42;
    *(_QWORD *)(v0 + 616) = sub_10002BA84(v41, v42, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v77, v38 + 34, v38 + 42);
    swift_bridgeObjectRelease(v43);
    v74(v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Handle.serverID %{private,mask.hash}s\nwith type: %{private,mask.hash}s not found. Refreshing...", (uint8_t *)v38, 0x2Au);
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);
    v33(v34, v35);
  }

  v73 = (_QWORD *)swift_task_alloc(dword_100262DBC);
  *(_QWORD *)(v0 + 856) = v73;
  *v73 = v0;
  v73[1] = sub_1000E71E8;
  return sub_1000E3CBC(v27);
}

uint64_t sub_1000E71E8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 856));
  sub_1000F946C(v1 + 2, sub_10005ED50);
  v3 = (_QWORD *)swift_task_alloc(dword_100262DD4);
  v1[108] = v3;
  *v3 = v2;
  v3[1] = sub_1000E727C;
  return sub_1000E6660(v1[83], v1[84], v1[85], v1[86], 0);
}

uint64_t sub_1000E727C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD **)v0;
  v10 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 864));
  v2 = v1[100];
  v3 = v1[99];
  v4 = v1[96];
  v5 = v1[95];
  v6 = v1[94];
  v7 = v1[91];
  v8 = v1[90];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return ((uint64_t (*)(void))v10[1])();
}

uint64_t sub_1000E7320(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 108) = a4;
  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  v6 = sub_100037A5C(&qword_100260950);
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v5 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 80) = v8;
  *(_QWORD *)(v5 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E73AC, v4, 0);
}

uint64_t sub_1000E73AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 72);
  if (v9)
  {
    v21 = *(unsigned __int8 *)(v0 + 108);
    v13 = swift_slowAlloc(28, -1);
    v20 = swift_slowAlloc(64, -1);
    v22 = v20;
    *(_DWORD *)v13 = 136446722;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000002BLL, 0x80000001001FEB90, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v14 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 1026;
    *(_DWORD *)(v0 + 104) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 108, v13 + 24, v13 + 28);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s type: %s shouldRefresh: %{BOOL,public}d", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v18 = (_QWORD *)swift_task_alloc(dword_100262DCC);
  *(_QWORD *)(v0 + 96) = v18;
  *v18 = v0;
  v18[1] = sub_1000E7640;
  return sub_1000E5B38(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 108));
}

uint64_t sub_1000E7640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_1000E7698, v1, 0);
}

uint64_t sub_1000E7698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Friend(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if ((_DWORD)v4 == 1)
  {
    sub_1000087A0(v1, &qword_100260950);
    v5 = 1;
  }
  else
  {
    Friend.handle.getter(v4);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v5 = 0;
  }
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, v5, 1, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000E776C()
{
  _QWORD *v0;

  swift_release(v0[14]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[19]);
  swift_release(v0[20]);
  swift_unknownObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[23]);
  sub_1000087A0((uint64_t)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_accountStateStream, &qword_100263510);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps));
  sub_100037AF8(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken + 8));
  sub_100024990((uint64_t)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_state, type metadata accessor for DataManager.State);
  sub_10002BB90((_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_sic));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13findmylocated11DataManager_handlesSharingLocation));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000E784C()
{
  uint64_t v0;

  sub_1000E776C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000E7864()
{
  return type metadata accessor for DataManager(0);
}

void sub_1000E786C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[19];

  v6[1] = &unk_1001F56D0;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = &unk_1001F56D0;
  v6[4] = &unk_1001F56E8;
  v6[5] = &unk_1001F5700;
  v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[7] = &unk_1001F5718;
  v6[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000E7978(319);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[14] = &unk_1001F5730;
    v4 = type metadata accessor for DataManager.State(319);
    if (v5 <= 0x3F)
    {
      v6[15] = *(_QWORD *)(v4 - 8) + 64;
      v6[16] = &unk_1001F5748;
      v6[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 19, v6, a1 + 80);
    }
  }
}

void sub_1000E7978(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100262DE0)
  {
    v2 = sub_10003C1FC(&qword_100261F00);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100262DE0);
  }
}

uint64_t *sub_1000E79D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for Friend(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v15 = type metadata accessor for Friend(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for Device(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = sub_100037A5C(&qword_100260538);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_1000E7B58(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
    return a1;
  sub_100024990((uint64_t)a1, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v10 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 2;
LABEL_12:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    case 1:
      v14 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_12;
    case 0:
      v7 = type metadata accessor for Device(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100037A5C(&qword_100260538);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_12;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_1000E7CC8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v10 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 2;
LABEL_11:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    case 1:
      v14 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_11;
    case 0:
      v7 = type metadata accessor for Device(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100037A5C(&qword_100260538);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_11;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_1000E7E20(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
    return a1;
  sub_100024990((uint64_t)a1, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v10 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 2;
LABEL_12:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    case 1:
      v14 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_12;
    case 0:
      v7 = type metadata accessor for Device(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100037A5C(&qword_100260538);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_12;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_1000E7F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000E7F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000E7FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_1000E7FBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  sub_1000E8048(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Friend(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1001F56E8;
      v10 = &unk_1001F56E8;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, &v6);
    }
  }
}

void sub_1000E8048(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100263200)
  {
    v2 = type metadata accessor for Device(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100263200);
  }
}

uint64_t sub_1000E809C()
{
  return sub_100004EA8(&qword_100263230, type metadata accessor for DataManager.State, (uint64_t)&unk_1001F57B0);
}

uint64_t sub_1000E80C8()
{
  uint64_t v0;

  return swift_task_switch(sub_1000E80DC, v0, 0);
}

uint64_t sub_1000E80DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager: initialLaunchProcessing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E81B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100262DB4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1000E39B8(a1, a2);
}

uint64_t sub_1000E8214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for DataManager(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1000E8278()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100262D9C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000E06A8();
}

uint64_t sub_1000E82BC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100262DA4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_1000E0E74();
}

uint64_t sub_1000E8300()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DataManager(0);
  v1 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_1000E8350()
{
  return sub_100004EA8(&qword_100263238, type metadata accessor for DataManager, (uint64_t)&unk_1001F5800);
}

uint64_t sub_1000E837C()
{
  return sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
}

uint64_t sub_1000E83A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[40];
  __int128 v28[2];
  __int128 v29[2];

  v26 = a6;
  v11 = sub_100037A5C(&qword_100263278);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_100043ECC(a2, (uint64_t)v29);
  sub_100043ECC(a3, (uint64_t)v28);
  sub_10000E37C(a5, (uint64_t)v27, &qword_100260598);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v19 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v20 + 160) & ~v20;
  v22 = (v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(&unk_100252698, v22 + 8, v20 | 7);
  *((_QWORD *)v23 + 2) = a4;
  *((_QWORD *)v23 + 3) = v19;
  sub_10001A4CC(v29, (uint64_t)(v23 + 32));
  sub_10001A4CC(v28, (uint64_t)(v23 + 72));
  *((_QWORD *)v23 + 14) = a4;
  sub_10000EF6C((uint64_t)v27, (uint64_t)(v23 + 120), &qword_100260598);
  (*(void (**)(char *, _BYTE *, uint64_t))(v12 + 32))(&v23[v21], v14, v11);
  *(_QWORD *)&v23[v22] = v26;
  swift_retain_n(a4, 2);
  v24 = sub_10005582C((uint64_t)v17, (uint64_t)&unk_100263288, (uint64_t)v23);
  return swift_release(v24);
}

uint64_t sub_1000E85A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8[34] = a8;
  v8[35] = v16;
  v8[32] = a6;
  v8[33] = a7;
  v8[30] = a4;
  v8[31] = a5;
  v10 = type metadata accessor for UUID(0);
  v8[36] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[37] = v11;
  v8[38] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100263278);
  v8[39] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[40] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v8[41] = v14;
  v8[42] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E8640, a6, 0);
}

uint64_t sub_1000E8640()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_t log;
  NSObject *loga;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t type;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v1 = v0 + 30;
  v2 = v0[30];
  v3 = (__int128 *)(v0 + 2);
  v4 = (__int128 *)(v0 + 7);
  v5 = (uint64_t)(v0 + 12);
  v54 = v0 + 17;
  v6 = v0[40];
  v43 = v0[42];
  v45 = v0[41];
  v7 = v0[39];
  v8 = v0[34];
  log = (os_log_t)v0[35];
  v51 = v0[38];
  v9 = v0[33];
  v47 = v0[32];
  v10 = v0[31];
  type metadata accessor for WorkItemQueue.WorkItem(0);
  sub_100043ECC(v2, (uint64_t)v3);
  sub_100043ECC(v10, (uint64_t)v4);
  sub_10000E37C(v9, v5, &qword_100260598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v43, v8, v7);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 144) & ~v11;
  v13 = (v45 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_1002526C0, v13 + 8, v11 | 7);
  sub_10001A4CC(v3, v14 + 16);
  sub_10001A4CC(v4, v14 + 56);
  *(_QWORD *)(v14 + 96) = v47;
  sub_10000EF6C(v5, v14 + 104, &qword_100260598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v14 + v12, v43, v7);
  *(_QWORD *)(v14 + v13) = log;
  v15 = swift_retain(v47);
  UUID.init()(v15);
  v16 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v51, &unk_100263298, v14, &unk_1002632A0, 0);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v17 = v55[32];
  v18 = v55[30];
  v19 = type metadata accessor for Logger(0);
  sub_100037A9C(v19, (uint64_t)qword_10027ACA0);
  sub_100043ECC(v18, (uint64_t)v54);
  swift_retain_n(v17, 2);
  v20 = swift_retain_n(v16, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = v55;
  if (os_log_type_enabled(v21, v22))
  {
    type = v22;
    v46 = v55[38];
    v48 = v55[37];
    v44 = v55[36];
    v24 = v55[32];
    v25 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(96, -1);
    v56 = v52;
    *(_DWORD *)v25 = 136446722;
    loga = v21;
    sub_100043ECC((uint64_t)v54, (uint64_t)(v1 - 8));
    v26 = sub_100037A5C(&qword_1002632A8);
    v27 = String.init<A>(describing:)(v1 - 8, v26);
    v29 = v28;
    v55[27] = sub_10002BA84(v27, v28, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 3, v1 - 2, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v29);
    v30 = sub_10002BB90(v54);
    *(_WORD *)(v25 + 12) = 2082;
    v31 = WorkItemQueue.name.getter(v30);
    v33 = v32;
    v55[28] = sub_10002BA84(v31, v32, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 2, v1 - 1, v25 + 14, v25 + 22);
    v23 = v55;
    swift_release_n(v24, 2);
    v34 = swift_bridgeObjectRelease(v33);
    *(_WORD *)(v25 + 22) = 2082;
    WorkItemQueue.WorkItem.id.getter(v34);
    v35 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v44, v35);
    v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v44);
    v55[29] = sub_10002BA84(v36, v38, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 1, v1, v25 + 24, v25 + 32);
    swift_release_n(v16, 2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, loga, type, "Scheduling command to %{public}s on %{public}s.\nWorkItem: %{public}s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    v39 = v55[32];
    sub_10002BB90(v54);
    swift_release(v16);
    swift_release_n(v39, 2);

    swift_release(v16);
  }
  v40 = v23[42];
  v41 = v23[38];
  dispatch thunk of WorkItemQueue.enqueue(_:)(v16);
  swift_release(v16);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return ((uint64_t (*)(void))v23[1])();
}

uint64_t sub_1000E8AFC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100263278);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  sub_10002BB90((_QWORD *)v0 + 4);
  sub_10002BB90((_QWORD *)v0 + 9);
  swift_release(*((_QWORD *)v0 + 14));
  if (*((_QWORD *)v0 + 18))
    sub_10002BB90((_QWORD *)v0 + 15);
  v5 = (v3 + 160) & ~v3;
  v6 = ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v5], v1);
  return swift_deallocObject(v0, v6, v3 | 7);
}

uint64_t sub_1000E8BA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100263278) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[14];
  v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 160) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = (_QWORD *)swift_task_alloc(dword_100263284);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  return sub_1000E85A0(a1, v5, v6, (uint64_t)(v1 + 4), (uint64_t)(v1 + 9), v7, (uint64_t)(v1 + 15), v8);
}

uint64_t sub_1000E8C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t refreshed;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6[263] = a6;
  v6[262] = a5;
  v6[261] = a4;
  v6[260] = a3;
  v6[259] = a2;
  v6[258] = a1;
  v7 = type metadata accessor for Date(0);
  v6[264] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[265] = v8;
  v6[266] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v6[267] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[268] = v10;
  v6[269] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v6[270] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[271] = v12;
  v6[272] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for RefreshClientEndpoint(0);
  v6[273] = refreshed;
  v6[274] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(refreshed - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ContinuousClock.Instant(0);
  v6[275] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[276] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[277] = swift_task_alloc(v16);
  v6[278] = swift_task_alloc(v16);
  v6[279] = swift_task_alloc(v16);
  v6[280] = swift_task_alloc(v16);
  v17 = type metadata accessor for ContinuousClock(0);
  v6[281] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[282] = v18;
  v6[283] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Response(0);
  v6[284] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v6[285] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[286] = swift_task_alloc(v21);
  v6[287] = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  v6[288] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v6[289] = v23;
  v6[290] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E8E40, 0, 0);
}

uint64_t sub_1000E8E40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  os_log_type_t type;
  uint64_t v29;
  uint64_t v30;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = v0[260];
  v2 = v0[259];
  v3 = v0[258];
  v0[291] = sub_100037A9C(v0[270], (uint64_t)qword_10027ACA0);
  sub_100043ECC(v2, (uint64_t)(v0 + 228));
  sub_100043ECC(v1, (uint64_t)(v0 + 243));
  v4 = swift_retain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v0[290];
    v27 = v0[289];
    v8 = v0[288];
    v9 = v0[258];
    v10 = swift_slowAlloc(32, -1);
    v29 = swift_slowAlloc(96, -1);
    v30 = v29;
    *(_DWORD *)v10 = 136446722;
    type = v6;
    sub_100043ECC((uint64_t)(v0 + 228), (uint64_t)(v0 + 223));
    v11 = sub_100037A5C(&qword_1002632A8);
    v12 = String.init<A>(describing:)(v0 + 223, v11);
    v14 = v13;
    v0[255] = sub_10002BA84(v12, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 255, v0 + 256, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    v15 = sub_10002BB90(v0 + 228);
    *(_WORD *)(v10 + 12) = 2082;
    WorkItemQueue.WorkItem.id.getter(v15);
    v16 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v7, v8);
    v0[256] = sub_10002BA84(v17, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 257, v10 + 14, v10 + 22);
    swift_release_n(v9, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v10 + 22) = 2080;
    v20 = v0[246];
    v21 = v0[247];
    sub_100036228(v0 + 243, v20);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8));
    v24 = v23;
    v0[257] = sub_10002BA84(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 257, v0 + 258, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease(v24);
    sub_10002BB90(v0 + 243);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Sending command to %{public}s\nWorkItem: %{public}s\n%s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v29, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v25 = v0[258];
    sub_10002BB90(v0 + 228);
    swift_release_n(v25, 2);
    sub_10002BB90(v0 + 243);
  }

  return swift_task_switch(sub_1000E9180, v0[261], 0);
}

uint64_t sub_1000E9180()
{
  uint64_t v0;

  sub_100043ECC(*(_QWORD *)(v0 + 2088) + OBJC_IVAR____TtC13findmylocated11DataManager_sic, v0 + 1744);
  return swift_task_switch(sub_1000E91CC, 0, 0);
}

uint64_t sub_1000E91CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[221];
  v2 = v0[222];
  sub_100036228(v0 + 218, v1);
  v3 = *(int **)(v2 + 8);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[292] = v4;
  *v4 = v0;
  v4[1] = sub_1000E925C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v6)(v0[287], v0[259], v0[260], v0[262], v1, v2);
}

uint64_t sub_1000E925C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2336);
  *(_QWORD *)(*(_QWORD *)v1 + 2344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000E9FEC;
  else
    v3 = sub_1000E92C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E92C0()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10002BB90(v0 + 218);
  v1 = (_QWORD *)swift_task_alloc(dword_1002632B4);
  v0[294] = v1;
  *v1 = v0;
  v1[1] = sub_1000E9324;
  return sub_1000EA614(v0[286], v0[259], v0[260], v0[287]);
}

uint64_t sub_1000E9324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2352);
  *(_QWORD *)(*(_QWORD *)v1 + 2360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000EA248;
  else
    v3 = sub_1000E9388;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E9388(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  _QWORD *v9;

  v2 = v1[274];
  v3 = v1[273];
  v4 = v1[259];
  v5 = ContinuousClock.init()(a1);
  ContinuousClock.now.getter(v5);
  sub_100043ECC(v4, (uint64_t)(v1 + 238));
  v6 = sub_100037A5C(&qword_1002632A8);
  v7 = swift_dynamicCast(v2, v1 + 238, v6, v3, 6);
  v8 = v7;
  if (v7)
    sub_100024990(v1[274], type metadata accessor for RefreshClientEndpoint);
  v9 = (_QWORD *)swift_task_alloc(dword_1002632BC);
  v1[296] = v9;
  *v9 = v1;
  v9[1] = sub_1000E945C;
  return sub_1000EB548(v1[286], v8);
}

uint64_t sub_1000E945C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2368));
  return swift_task_switch(sub_1000E94B0, 0, 0);
}

uint64_t sub_1000E94B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t DynamicType;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)();
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[2];

  v1 = *(_QWORD *)(v0 + 2328);
  v101 = *(_QWORD *)(v0 + 2240);
  v2 = *(_QWORD *)(v0 + 2232);
  v3 = *(_QWORD *)(v0 + 2224);
  v105 = *(_QWORD *)(v0 + 2216);
  v4 = *(_QWORD *)(v0 + 2208);
  v5 = *(_QWORD *)(v0 + 2200);
  v6 = *(_QWORD *)(v0 + 2176);
  v7 = *(_QWORD *)(v0 + 2168);
  v8 = *(_QWORD *)(v0 + 2160);
  ContinuousClock.now.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v1, v8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v3, v101, v5);
  v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v105, v2, v5);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = *(_QWORD *)(v0 + 2224);
    v14 = *(_QWORD *)(v0 + 2216);
    v91 = v13;
    v92 = v14;
    v96 = *(_QWORD *)(v0 + 2208);
    v15 = *(_QWORD *)(v0 + 2200);
    v98 = *(_QWORD *)(v0 + 2168);
    v102 = *(_QWORD *)(v0 + 2160);
    v106 = *(_QWORD *)(v0 + 2176);
    v16 = *(_QWORD *)(v0 + 2152);
    v93 = *(_QWORD *)(v0 + 2144);
    v94 = *(_QWORD *)(v0 + 2136);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v109[0] = v18;
    *(_DWORD *)v17 = 136315138;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    v19 = sub_100004EA8(&qword_1002618B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v20 = static Duration.description<A>(_:_:units:)(v13, v14, v16, v15, v19);
    v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v16, v94);
    *(_QWORD *)(v0 + 2024) = sub_10002BA84(v20, v22, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2024, v0 + 2032, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
    v23(v91, v15);
    v24 = v15;
    v25 = v23;
    v23(v92, v24);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "updateData Duration: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 8))(v106, v102);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 2216);
    v28 = *(_QWORD *)(v0 + 2200);
    v29 = *(_QWORD *)(v0 + 2176);
    v30 = *(_QWORD *)(v0 + 2168);
    v31 = *(_QWORD *)(v0 + 2160);
    v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 2208) + 8);
    v25(*(_QWORD *)(v0 + 2224), v28);
    v25(v27, v28);

    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  }
  *(_QWORD *)(v0 + 2376) = v25;
  v32 = Logger.logObject.getter(v26);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Start decoding command response", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }
  v35 = *(_QWORD *)(v0 + 2360);

  v36 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = JSONDecoder.init()();
  v38 = Response.body.getter();
  v40 = v39;
  v41 = sub_10003CCFC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for ServerBaseResponse, v38, v40, &type metadata for ServerBaseResponse, v41);
  if (!v35)
  {
    v57 = *(_QWORD *)(v0 + 2080);
    sub_100037AB4(v38, v40);
    swift_release(v37);
    memcpy((void *)(v0 + 16), (const void *)(v0 + 1168), 0x240uLL);
    sub_100043ECC(v57, v0 + 1864);
    sub_10002B630(v0 + 16);
    v58 = sub_10002B630(v0 + 16);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(64, -1);
      v109[0] = v62;
      *(_DWORD *)v61 = 136315394;
      v63 = *(_QWORD *)(v0 + 1888);
      v64 = sub_100036228((_QWORD *)(v0 + 1864), v63);
      DynamicType = swift_getDynamicType(v64, v63, 1);
      v66 = _typeName(_:qualified:)(DynamicType, 0);
      v68 = v67;
      *(_QWORD *)(v0 + 2008) = sub_10002BA84(v66, v67, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2008, v0 + 2016, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v68);
      sub_10002BB90((_QWORD *)(v0 + 1864));
      *(_WORD *)(v61 + 12) = 2080;
      sub_10002B630(v0 + 16);
      v69 = sub_1000282A0();
      v71 = v70;
      sub_10002B3D4(v0 + 16);
      *(_QWORD *)(v0 + 2016) = sub_10002BA84(v69, v71, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2016, v0 + 2024, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease(v71);
      sub_10002B3D4(v0 + 16);
      sub_10002B3D4(v0 + 16);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s decoded response: %s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      sub_10002BB90((_QWORD *)(v0 + 1864));
      sub_10002B3D4(v0 + 16);
      sub_10002B3D4(v0 + 16);
    }

    v83 = *(unsigned __int8 *)(v0 + 248);
    if (v83 == 11)
    {
      if (*(_QWORD *)(v0 + 192) == 1)
        goto LABEL_19;
      v83 = *(unsigned __int8 *)(v0 + 208);
    }
    if (v83 == 1)
    {
      v84 = *(_QWORD *)(v0 + 2128);
      v85 = *(_QWORD *)(v0 + 2120);
      v86 = *(_QWORD *)(v0 + 2112);
      v87 = *(_QWORD *)(v0 + 2088);
      v88 = static Date.trustedNow.getter(v84);
      *(double *)(v0 + 2384) = Date.timeIntervalSince1970.getter(v88);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      v89 = sub_1000E9D6C;
      v90 = v87;
      return swift_task_switch(v89, v90, 0);
    }
LABEL_19:
    v90 = *(_QWORD *)(v0 + 2088);
    v89 = sub_1000E9D94;
    return swift_task_switch(v89, v90, 0);
  }
  v100 = *(_QWORD *)(v0 + 2288);
  v103 = *(_QWORD *)(v0 + 2296);
  v42 = *(_QWORD *)(v0 + 2272);
  v97 = *(_QWORD *)(v0 + 2264);
  v99 = *(_QWORD *)(v0 + 2280);
  v107 = v35;
  v43 = *(_QWORD *)(v0 + 2256);
  v95 = *(_QWORD *)(v0 + 2248);
  v44 = *(_QWORD *)(v0 + 2240);
  v45 = *(_QWORD *)(v0 + 2232);
  v46 = *(_QWORD *)(v0 + 2200);
  sub_100037AB4(v38, v40);
  swift_release(v37);
  v25(v45, v46);
  v25(v44, v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v97, v95);
  v47 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  v47(v100, v42);
  v47(v103, v42);
  swift_errorRetain(v107);
  v48 = swift_errorRetain(v107);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    v109[0] = v52;
    *(_DWORD *)v51 = 136446210;
    *(_QWORD *)(v0 + 1992) = v107;
    swift_errorRetain(v107);
    v53 = sub_100037A5C(&qword_100265260);
    v54 = String.init<A>(describing:)(v0 + 1992, v53);
    v56 = v55;
    *(_QWORD *)(v0 + 1984) = sub_10002BA84(v54, v55, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1984, v0 + 1992, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v56);
    swift_errorRelease(v107);
    swift_errorRelease(v107);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "sendCommand error: %{public}s", v51, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    swift_errorRelease(v107);
    swift_errorRelease(v107);
  }

  *(_QWORD *)(v0 + 2032) = v107;
  v72 = sub_100037A5C(&qword_100263278);
  CheckedContinuation.resume(throwing:)(v0 + 2032, v72);
  v73 = *(_QWORD *)(v0 + 2296);
  v74 = *(_QWORD *)(v0 + 2288);
  v75 = *(_QWORD *)(v0 + 2264);
  v76 = *(_QWORD *)(v0 + 2240);
  v77 = *(_QWORD *)(v0 + 2232);
  v78 = *(_QWORD *)(v0 + 2224);
  v79 = *(_QWORD *)(v0 + 2216);
  v80 = *(_QWORD *)(v0 + 2192);
  v81 = *(_QWORD *)(v0 + 2176);
  v104 = *(_QWORD *)(v0 + 2152);
  v108 = *(_QWORD *)(v0 + 2128);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v104);
  swift_task_dealloc(v108);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E9D6C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 2088) + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp) = *(_QWORD *)(v0 + 2384);
  return swift_task_switch(sub_1000E9D94, *(_QWORD *)(v0 + 2088), 0);
}

uint64_t sub_1000E9D94()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 2392) = *(_QWORD *)(*(_QWORD *)(v0 + 2088)
                                     + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp);
  return swift_task_switch(sub_1000E9DBC, 0, 0);
}

uint64_t sub_1000E9DBC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v1 + 2392);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134349056;
    *(_QWORD *)(v1 + 2000) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2000, v1 + 2008, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CommandManager: lastSuccessfulResponseTimestamp: %{public}f", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 2376);
  v27 = *(_QWORD *)(v1 + 2288);
  v29 = *(_QWORD *)(v1 + 2296);
  v7 = *(_QWORD *)(v1 + 2272);
  v25 = *(_QWORD *)(v1 + 2264);
  v26 = *(_QWORD *)(v1 + 2280);
  v23 = *(_QWORD *)(v1 + 2256);
  v24 = *(_QWORD *)(v1 + 2248);
  v8 = *(_QWORD *)(v1 + 2240);
  v9 = *(_QWORD *)(v1 + 2232);
  v10 = *(_QWORD *)(v1 + 2200);

  memcpy((void *)(v1 + 592), (const void *)(v1 + 16), 0x240uLL);
  v11 = sub_100037A5C(&qword_100263278);
  CheckedContinuation.resume(returning:)(v1 + 592, v11);
  v6(v9, v10);
  v6(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  v12 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v12(v27, v7);
  v12(v29, v7);
  v13 = *(_QWORD *)(v1 + 2296);
  v14 = *(_QWORD *)(v1 + 2288);
  v15 = *(_QWORD *)(v1 + 2264);
  v16 = *(_QWORD *)(v1 + 2240);
  v17 = *(_QWORD *)(v1 + 2232);
  v18 = *(_QWORD *)(v1 + 2224);
  v19 = *(_QWORD *)(v1 + 2216);
  v20 = *(_QWORD *)(v1 + 2192);
  v21 = *(_QWORD *)(v1 + 2176);
  v28 = *(_QWORD *)(v1 + 2152);
  v30 = *(_QWORD *)(v1 + 2128);
  swift_task_dealloc(*(_QWORD *)(v1 + 2320));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000E9FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10002BB90((_QWORD *)(v0 + 1744));
  v1 = *(_QWORD *)(v0 + 2344);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v24 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 1992) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 1992, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 1984) = sub_10002BA84(v8, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1984, v0 + 1992, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "sendCommand error: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  *(_QWORD *)(v0 + 2032) = v1;
  v11 = sub_100037A5C(&qword_100263278);
  CheckedContinuation.resume(throwing:)(v0 + 2032, v11);
  v12 = *(_QWORD *)(v0 + 2296);
  v13 = *(_QWORD *)(v0 + 2288);
  v14 = *(_QWORD *)(v0 + 2264);
  v15 = *(_QWORD *)(v0 + 2240);
  v16 = *(_QWORD *)(v0 + 2232);
  v17 = *(_QWORD *)(v0 + 2224);
  v18 = *(_QWORD *)(v0 + 2216);
  v19 = *(_QWORD *)(v0 + 2192);
  v20 = *(_QWORD *)(v0 + 2176);
  v22 = *(_QWORD *)(v0 + 2152);
  v23 = *(_QWORD *)(v0 + 2128);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2280) + 8))(*(_QWORD *)(v0 + 2296), *(_QWORD *)(v0 + 2272));
  v1 = *(_QWORD *)(v0 + 2360);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v24 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 1992) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 1992, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 1984) = sub_10002BA84(v8, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1984, v0 + 1992, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "sendCommand error: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  *(_QWORD *)(v0 + 2032) = v1;
  v11 = sub_100037A5C(&qword_100263278);
  CheckedContinuation.resume(throwing:)(v0 + 2032, v11);
  v12 = *(_QWORD *)(v0 + 2296);
  v13 = *(_QWORD *)(v0 + 2288);
  v14 = *(_QWORD *)(v0 + 2264);
  v15 = *(_QWORD *)(v0 + 2240);
  v16 = *(_QWORD *)(v0 + 2232);
  v17 = *(_QWORD *)(v0 + 2224);
  v18 = *(_QWORD *)(v0 + 2216);
  v19 = *(_QWORD *)(v0 + 2192);
  v20 = *(_QWORD *)(v0 + 2176);
  v22 = *(_QWORD *)(v0 + 2152);
  v23 = *(_QWORD *)(v0 + 2128);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA4B0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100263278);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  sub_10002BB90((_QWORD *)v0 + 2);
  sub_10002BB90((_QWORD *)v0 + 7);
  swift_release(*((_QWORD *)v0 + 12));
  if (*((_QWORD *)v0 + 16))
    sub_10002BB90((_QWORD *)v0 + 13);
  v5 = (v3 + 144) & ~v3;
  v6 = ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v5], v1);
  return swift_deallocObject(v0, v6, v3 | 7);
}

uint64_t sub_1000EA554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100263278) - 8);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v7 = (_QWORD *)swift_task_alloc(dword_100263294);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_1000E8C80(a1, v1 + 16, v1 + 56, v5, v1 + 104, v6);
}

uint64_t sub_1000EA614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[49] = a4;
  v5[50] = v4;
  v5[47] = a2;
  v5[48] = a3;
  v5[46] = a1;
  v6 = type metadata accessor for Response(0);
  v5[51] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[52] = v7;
  v5[53] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Account(0);
  v5[54] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[55] = v9;
  v5[56] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EA6A4, v4, 0);
}

uint64_t sub_1000EA6A4()
{
  _QWORD *v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71[2];

  v69 = v0 + 43;
  v70 = v0 + 42;
  v1 = (void *)Response.response.getter();
  v2 = objc_msgSend(v1, "statusCode");

  v3 = sub_10002B954((uint64_t)v2);
  if (v3 == 11)
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v5 = v0[52];
    v4 = v0[53];
    v6 = v0[51];
    v7 = v0[49];
    v8 = type metadata accessor for Logger(0);
    sub_100037A9C(v8, (uint64_t)qword_10027ACA0);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v10 = v9(v4, v7, v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v15 = v0[52];
    v14 = v0[53];
    v16 = v0[51];
    if (v13)
    {
      v68 = v9;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      v18 = (void *)Response.response.getter();
      v19 = objc_msgSend(v18, "statusCode");

      v9 = v68;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      *v70 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v69, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid status code: %ld", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v15 + 8))(v0[53], v0[51]);
    }

    v9(v0[46], v0[49], v0[51]);
    goto LABEL_17;
  }
  v20 = v3;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v67 = (uint64_t)(v0 + 2);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100037A9C(v21, (uint64_t)qword_10027ACA0);
  v0[57] = v22;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v71[0] = v26;
    *(_DWORD *)v25 = 136446466;
    v0[44] = sub_10002BA84(0xD000000000000036, 0x80000001001FEB50, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 44, v0 + 45, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2080;
    sub_10000C628(v20);
    v28 = v27;
    v0[45] = sub_10002BA84(v29, v27, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 45, v0 + 46, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s statusCode: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }

  if (((1 << v20) & 0x7DD) != 0)
  {
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    if (!os_log_type_enabled(v31, v32))
    {
LABEL_14:

      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[52] + 16))(v0[46], v0[49], v0[51]);
LABEL_17:
      v39 = v0[53];
      swift_task_dealloc(v0[56]);
      swift_task_dealloc(v39);
      v40 = (uint64_t (*)(void))v0[1];
      return v40();
    }
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v71[0] = v34;
    *(_DWORD *)v33 = 136446210;
    sub_10000C628(v20);
    v36 = v35;
    v0[41] = sub_10002BA84(v37, v35, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v70, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unhandled status: %{public}s", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v38 = v33;
LABEL_13:
    swift_slowDealloc(v38, -1, -1);
    goto LABEL_14;
  }
  if (v20 == 1)
  {
    v42 = sub_100043ECC(v0[47], (uint64_t)(v0 + 7));
    v31 = Logger.logObject.getter(v42);
    v43 = static os_log_type_t.default.getter(v31);
    if (!os_log_type_enabled(v31, v43))
    {
      sub_10002BB90(v0 + 7);
      goto LABEL_14;
    }
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v71[0] = v45;
    *(_DWORD *)v44 = 136315138;
    sub_100043ECC((uint64_t)(v0 + 7), v67);
    v46 = sub_100037A5C(&qword_1002632A8);
    v47 = String.init<A>(describing:)(v67, v46);
    v49 = v48;
    *v69 = sub_10002BA84(v47, v48, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v0 + 44, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v49);
    sub_10002BB90(v0 + 7);
    _os_log_impl((void *)&_mh_execute_header, v31, v43, "%s succeeded!", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    v38 = v44;
    goto LABEL_13;
  }
  v50 = swift_retain(v0[50]);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  v53 = os_log_type_enabled(v51, v52);
  v54 = v0[50];
  if (v53)
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v55 = 134217984;
    v0[40] = *(_QWORD *)(v54 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 41, v55 + 4, v55 + 12);
    swift_release(v54);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Need to renew credentials. Retry count: %ld", v55, 0xCu);
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    swift_release(v0[50]);
  }

  v57 = v0[50];
  v58 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount);
  if (v58 > 0)
  {
    v59 = Logger.logObject.getter(v56);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v61 = 134217984;
      v0[37] = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 37, v0 + 38, v61 + 4, v61 + 12);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Exceeded retry limit: %ld", v61, 0xCu);
      swift_slowDealloc(v61, -1, -1);
    }

    v62 = sub_1000F9428();
    v63 = swift_allocError(&type metadata for DataManager.Error, v62, 0, 0);
    *v64 = 3;
    swift_willThrow(v63);
    v65 = v0[53];
    swift_task_dealloc(v0[56]);
    swift_task_dealloc(v65);
    v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  *(_QWORD *)(v57 + OBJC_IVAR____TtC13findmylocated11DataManager_retryCount) = v58 + 1;
  v66 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[58] = v66;
  *v66 = v0;
  v66[1] = sub_1000EAE88;
  return daemon.getter();
}

uint64_t sub_1000EAE88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 464);
  v5 = *v1;
  *(_QWORD *)(*v1 + 472) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 480) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1000EAF70;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000EAF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 480);
  v5 = *(_QWORD **)v2;
  v5[61] = a1;
  v5[62] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000EB444, v5[50], 0);
  swift_release(v5[59]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612FC);
  v5[63] = v7;
  *v7 = v5;
  v7[1] = sub_1000EB01C;
  return sub_10007A500(v5[56]);
}

uint64_t sub_1000EB01C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EB48C;
  else
    v4 = sub_1000EB080;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 400), 0);
}

uint64_t sub_1000EB080()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  uint64_t v27;
  int *v28;
  uint64_t v29;

  v1 = v0[48];
  sub_100043ECC(v0[47], (uint64_t)(v0 + 17));
  v2 = sub_100043ECC(v1, (uint64_t)(v0 + 22));
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v29 = v27;
    *(_DWORD *)v5 = 136315394;
    sub_100043ECC((uint64_t)(v0 + 17), (uint64_t)(v0 + 12));
    v6 = sub_100037A5C(&qword_1002632A8);
    v7 = String.init<A>(describing:)(v0 + 12, v6);
    v9 = v8;
    v0[38] = sub_10002BA84(v7, v8, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 38, v0 + 39, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    sub_10002BB90(v0 + 17);
    *(_WORD *)(v5 + 12) = 2080;
    v11 = v0[25];
    v10 = v0[26];
    sub_100036228(v0 + 22, v11);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v11, *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8));
    v14 = v13;
    v0[39] = sub_10002BA84(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 39, v0 + 40, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v14);
    sub_10002BB90(v0 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Retry sending command to %s %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    sub_10002BB90(v0 + 17);
    sub_10002BB90(v0 + 22);
  }

  sub_100043ECC(v0[50] + OBJC_IVAR____TtC13findmylocated11DataManager_sic, (uint64_t)(v0 + 27));
  v15 = v0[30];
  v16 = v0[31];
  v17 = sub_100036228(v0 + 27, v15);
  v18 = Account.dsid.getter(v17);
  v20 = v19;
  v21 = Account.appToken.getter();
  v23 = v22;
  v0[35] = type metadata accessor for BasicCredential(0);
  v0[36] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 32);
  BasicCredential.init(username:password:)(v18, v20, v21, v23);
  v24 = *(int **)(v16 + 8);
  v28 = (int *)((char *)v24 + *v24);
  v25 = (_QWORD *)swift_task_alloc(v24[1]);
  v0[65] = v25;
  *v25 = v0;
  v25[1] = sub_1000EB34C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))v28)(v0[46], v0[47], v0[48], v0 + 32, v15, v16);
}

uint64_t sub_1000EB34C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *v1 + 256;
  v4 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v2 + 400);
  sub_1000087A0(v3, &qword_100260598);
  if (v0)
    v6 = sub_1000EB4D4;
  else
    v6 = sub_1000EB3D0;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000EB3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 440);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 488));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002BB90((_QWORD *)(v0 + 216));
  v4 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB444()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 472));
  v1 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB48C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 488));
  v1 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 440);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 488));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002BB90((_QWORD *)(v0 + 216));
  v4 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB548(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  *(_BYTE *)(v3 + 192) = a2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v2;
  *(_QWORD *)(v3 + 72) = *v2;
  v4 = type metadata accessor for Response(0);
  *(_QWORD *)(v3 + 80) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 88) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 96) = v6;
  *(_QWORD *)(v3 + 104) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccountService.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v3 + 128) = v8;
  *v8 = v3;
  v8[1] = sub_1000EB5FC;
  return daemon.getter();
}

uint64_t sub_1000EB5FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *v1;
  *(_QWORD *)(*v1 + 136) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 144) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1000EB6E4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000EB6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v4[19] = a1;
  v4[20] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[8];
    v7 = sub_1000EBB44;
  }
  else
  {
    swift_release(v4[17]);
    v7 = sub_1000EB760;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000EB760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[15];
  v2 = v0[8];
  v3 = v0[19] + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess(v3, v0 + 2, 0, 0);
  sub_100025C70(v3, v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_1000EB7E0, v2, 0);
}

uint64_t sub_1000EB7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = sub_100037A5C(&qword_1002614A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 3, 3, v3);
  sub_10007DF68(v2, v1);
  v5 = v4;
  sub_100024990(v1, type metadata accessor for AccountService.State);
  result = sub_100024990(v2, type metadata accessor for AccountService.State);
  if ((v5 & 1) != 0)
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100037A9C(v7, (uint64_t)qword_10027ACA0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 152);
    if (v11)
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "DataManager: should not updateData when state == .noAccount", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
      swift_release(v12);

    }
    else
    {

      swift_release(v12);
    }
    v29 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v14 + 120);
    v16 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 96);
      v17 = *(_QWORD *)(v0 + 104);
      v19 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v32 = *(_QWORD *)(v0 + 72);
      v31 = *(_BYTE *)(v0 + 192);
      v21 = *(_QWORD *)(v0 + 56);
      *(_QWORD *)(v14 + 120) = v16;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v17, v21, v19);
      v22 = *(unsigned __int8 *)(v20 + 80);
      v23 = (v22 + 32) & ~v22;
      v24 = v23 + v18;
      v25 = (v23 + v18) & 0xFFFFFFFFFFFFFFF8;
      v26 = swift_allocObject(&unk_1002526E8, v25 + 16, v22 | 7);
      *(_QWORD *)(v0 + 168) = v26;
      *(_QWORD *)(v26 + 16) = v16;
      *(_QWORD *)(v26 + 24) = v14;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v26 + v23, v17, v19);
      *(_BYTE *)(v26 + v24) = v31;
      *(_QWORD *)(v25 + v26 + 8) = v32;
      v27 = async function pointer to withTimeout<A>(_:block:)[1];
      swift_retain(v14);
      v28 = (_QWORD *)swift_task_alloc(v27);
      *(_QWORD *)(v0 + 176) = v28;
      *v28 = v0;
      v28[1] = sub_1000EBA84;
      return withTimeout<A>(_:block:)();
    }
  }
  return result;
}

uint64_t sub_1000EBA84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = sub_1000EBD50;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 64);
    swift_release(*(_QWORD *)(v2 + 168));
    v5 = sub_1000EBAF8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000EBAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EBB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 160);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 40) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 40, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager updateData error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EBD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v0 + 40) = v2;
    swift_errorRetain(v2);
    v9 = sub_100037A5C(&qword_100265260);
    v10 = String.init<A>(describing:)(v0 + 40, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DataManager updateData error: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EBF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for Account(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EBFD0, 0, 0);
}

uint64_t sub_1000EBFD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  v6 = v0[2];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100252760, v9 + 8, v7 | 7);
  v0[9] = v10;
  *(_QWORD *)(v10 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(_QWORD *)(v10 + v9) = v5;
  v11 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[10] = v12;
  *v12 = v0;
  v12[1] = sub_1000EC0D4;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1000EC0D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000EC174;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 72));
    v4 = sub_1000EC140;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EC140()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  return swift_task_switch(sub_1000EC1C8, a2, 0);
}

uint64_t sub_1000EC1C8()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 152) = *(_BYTE *)(*(_QWORD *)(v0 + 32) + 136);
  return swift_task_switch(sub_1000EC1E8, 0, 0);
}

uint64_t sub_1000EC1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if ((*(_BYTE *)(v0 + 152) & 1) != 0)
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v19 = v6;
      *(_DWORD *)v5 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000013, 0x80000001001FECC0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s APNS has already been set up", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100037A9C(v8, (uint64_t)qword_10027ACA0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000013, 0x80000001001FECC0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    if ((static SystemInfo.underTest.getter(v14) & 1) != 0)
    {
      return swift_task_switch(sub_1000EC560, *(_QWORD *)(v0 + 32), 0);
    }
    else
    {
      type metadata accessor for APNSManager(0);
      v15 = Account.apsEnvironment.getter();
      v17 = v16;
      v18 = (_QWORD *)swift_task_alloc(async function pointer to APNSManager.__allocating_init(environmentName:delegatePort:)[1]);
      *(_QWORD *)(v0 + 72) = v18;
      *v18 = v0;
      v18[1] = sub_1000EC6F4;
      return APNSManager.__allocating_init(environmentName:delegatePort:)(v15, v17, 0xD000000000000019, 0x80000001001FECA0);
    }
  }
}

uint64_t sub_1000EC560()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 168);
  v0[7] = v2;
  v0[8] = *(_QWORD *)(v1 + 176);
  swift_unknownObjectRetain(v2);
  return swift_task_switch(sub_1000EC5AC, 0, 0);
}

uint64_t sub_1000EC5AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[7];
  if (v1)
  {
    v2 = v0[8];
    v0[11] = v1;
    v0[12] = v2;
    v3 = v0[6];
    v4 = v0[4];
    ObjectType = swift_getObjectType(v1);
    v0[13] = ObjectType;
    v6 = swift_allocObject(&unk_100252788, 32, 7);
    v0[14] = v6;
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v3;
    v7 = async function pointer to dispatch thunk of APNSConnector.setDidReceive(block:)[1];
    swift_unknownObjectRetain(v1);
    swift_retain(v4);
    v8 = (_QWORD *)swift_task_alloc(v7);
    v0[15] = v8;
    *v8 = v0;
    v8[1] = sub_1000EC81C;
    return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_100263560, v6, ObjectType, v2);
  }
  else
  {
    type metadata accessor for APNSManager(0);
    v10 = Account.apsEnvironment.getter();
    v12 = v11;
    v13 = (_QWORD *)swift_task_alloc(async function pointer to APNSManager.__allocating_init(environmentName:delegatePort:)[1]);
    v0[9] = v13;
    *v13 = v0;
    v13[1] = sub_1000EC6F4;
    return APNSManager.__allocating_init(environmentName:delegatePort:)(v10, v12, 0xD000000000000019, 0x80000001001FECA0);
  }
}

uint64_t sub_1000EC6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000EC750, 0, 0);
}

uint64_t sub_1000EC750()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[10];
  v0[11] = v1;
  v0[12] = &protocol witness table for APNSManager;
  v2 = v0[6];
  v3 = v0[4];
  ObjectType = swift_getObjectType(v1);
  v0[13] = ObjectType;
  v5 = swift_allocObject(&unk_100252788, 32, 7);
  v0[14] = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = async function pointer to dispatch thunk of APNSConnector.setDidReceive(block:)[1];
  swift_unknownObjectRetain(v1);
  swift_retain(v3);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[15] = v7;
  *v7 = v0;
  v7[1] = sub_1000EC81C;
  return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_100263560, v5, ObjectType, &protocol witness table for APNSManager);
}

uint64_t sub_1000EC81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release(v1);
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_1000EC884, 0, 0);
}

uint64_t sub_1000EC884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[11];
  v2 = v0[6];
  v3 = v0[4];
  v4 = swift_allocObject(&unk_1002527B0, 32, 7);
  v0[16] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = async function pointer to dispatch thunk of APNSConnector.setDidReceivePublicToken(block:)[1];
  swift_unknownObjectRetain(v1);
  swift_retain(v3);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[17] = v6;
  *v6 = v0;
  v6[1] = sub_1000EC92C;
  return dispatch thunk of APNSConnector.setDidReceivePublicToken(block:)(&unk_100263570, v4, v0[13], v0[12]);
}

uint64_t sub_1000EC92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_unknownObjectRelease(v2);
  swift_release(v1);
  return swift_task_switch(sub_1000EC994, 0, 0);
}

uint64_t sub_1000EC994()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to dispatch thunk of APNSConnector.set(enabledTopics:)[1];
  swift_unknownObjectRetain(v0[11]);
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[18] = v2;
  *v2 = v0;
  v2[1] = sub_1000EC9FC;
  return dispatch thunk of APNSConnector.set(enabledTopics:)(&off_10024EE30, v0[13], v0[12]);
}

uint64_t sub_1000EC9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1000ECA60, v2, 0);
}

uint64_t sub_1000ECA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v1 + 168) = v3;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v2);
  *(_BYTE *)(v1 + 136) = 1;
  return swift_task_switch(sub_1000ECABC, 0, 0);
}

uint64_t sub_1000ECABC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ECAF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for APNSManager.IncomingMessage(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000ECB50, 0, 0);
}

uint64_t sub_1000ECB50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = v0[3];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[5];
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = v0[6];
  v10 = v0[7];
  v12 = v0[5];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v13 = 136446210;
    v14 = sub_100004EA8(&qword_100263580, (uint64_t (*)(uint64_t))&type metadata accessor for APNSManager.IncomingMessage, (uint64_t)&protocol conformance descriptor for APNSManager.IncomingMessage);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    v0[2] = sub_10002BA84(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Did receive push: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(v0[7], v0[5]);
  }

  v18 = (_QWORD *)swift_task_alloc(dword_10026357C);
  v0[8] = v18;
  *v18 = v0;
  v18[1] = sub_1000ECD6C;
  return sub_1000ECDBC(v0[3]);
}

uint64_t sub_1000ECD6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000ECDBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for FMFAPSMessage(0);
  v2[7] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v4);
  v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000ECE68, v1, 0);
}

uint64_t sub_1000ECE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  Swift::String v42;
  void *object;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v1 = APNSManager.IncomingMessage.topic.getter();
  v3 = v2;
  if (v1 == 0xD000000000000017 && v2 == 0x80000001001FC390)
  {
    swift_bridgeObjectRelease(0x80000001001FC390);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0xD000000000000017, 0x80000001001FC390, 0);
    swift_bridgeObjectRelease(v3);
    if ((v4 & 1) == 0)
    {
LABEL_12:
      v28 = *(_QWORD *)(v0 + 72);
      v29 = *(_QWORD *)(v0 + 64);
      swift_task_dealloc(*(_QWORD *)(v0 + 80));
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  v5 = (void *)objc_opt_self(NSJSONSerialization);
  v6 = APNSManager.IncomingMessage.userInfo.getter();
  sub_100037A5C(&qword_1002619D8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(v0 + 16) = 0;
  v8 = objc_msgSend(v5, "dataWithJSONObject:options:error:", isa, 0, v0 + 16);

  v9 = *(id *)(v0 + 16);
  if (!v8)
  {
    v17 = v9;
    v18 = _convertNSErrorToError(_:)();

    swift_willThrow(v19);
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v20 = type metadata accessor for Logger(0);
    sub_100037A9C(v20, (uint64_t)qword_10027ACA0);
    swift_errorRetain(v18);
    v21 = swift_errorRetain(v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138543362;
      swift_errorRetain(v18);
      v26 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(_QWORD *)(v0 + 24) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v24 + 4, v24 + 12);
      *v25 = v26;
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to decode APNS message due to %{public}@", v24, 0xCu);
      v27 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(v18);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      swift_errorRelease(v18);

    }
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v0 + 56);
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v13 = v12;

  *(_QWORD *)(v0 + 88) = v11;
  *(_QWORD *)(v0 + 96) = v13;
  v14 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = JSONDecoder.init()();
  v16 = sub_100004EA8(&qword_100263588, type metadata accessor for FMFAPSMessage, (uint64_t)&unk_1001F596C);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, v11, v13, v10, v16);
  swift_release(v15);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v32 = *(_QWORD *)(v0 + 72);
  v31 = *(_QWORD *)(v0 + 80);
  v33 = type metadata accessor for Logger(0);
  sub_100037A9C(v33, (uint64_t)qword_10027ACA0);
  v34 = sub_100025C70(v31, v32, type metadata accessor for FMFAPSMessage);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(_QWORD *)(v0 + 72);
  if (v37)
  {
    v39 = *(_QWORD *)(v0 + 64);
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v46 = v45;
    *(_DWORD *)v40 = 136315138;
    v41 = sub_100025C70(v38, v39, type metadata accessor for FMFAPSMessage);
    v42._countAndFlagsBits = Date.localISO8601.getter(v41);
    object = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(object);
    sub_100024990(v39, type metadata accessor for FMFAPSMessage);
    *(_QWORD *)(v0 + 32) = sub_10002BA84(0x54646E6553706174, 0xEB00000000203A53, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease(0xEB00000000203A53);
    sub_100024990(v38, type metadata accessor for FMFAPSMessage);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "APNS message: %s.", v40, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 72), type metadata accessor for FMFAPSMessage);
  }

  v44 = (_QWORD *)swift_task_alloc(dword_100263594);
  *(_QWORD *)(v0 + 104) = v44;
  *v44 = v0;
  v44[1] = sub_1000ED47C;
  return sub_100009160(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000ED47C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_1000ED500, v1, 0);
}

uint64_t sub_1000ED500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  sub_100037AB4(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  sub_100024990(v1, type metadata accessor for FMFAPSMessage);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ED594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return swift_task_switch(sub_1000ED5B0, 0, 0);
}

uint64_t sub_1000ED5B0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = v0[4];
  v2 = v0[5];
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ACA0);
  sub_10001A484(v1, v2);
  v4 = sub_10001A484(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v9 = v0[4];
  v8 = v0[5];
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v17 = v16;
    *(_DWORD *)v10 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v0[2] = v9;
    v0[3] = v8;
    v11 = sub_10003EC14();
    v12 = DataProtocol.hexString.getter(&type metadata for Data, v11);
    v14 = v13;
    v0[2] = sub_10002BA84(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v14);
    sub_100037AB4(v9, v8);
    sub_100037AB4(v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Did receive APNS public token: %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100037AB4(v0[4], v0[5]);
    sub_100037AB4(v9, v8);
  }

  return swift_task_switch(sub_1000ED7C4, v0[6], 0);
}

uint64_t sub_1000ED7C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = (uint64_t *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  v5 = *v3;
  v4 = v3[1];
  *v3 = v2;
  v3[1] = v1;
  sub_10001A484(v2, v1);
  sub_100037AF8(v5, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ED818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[84] = a4;
  v6 = type metadata accessor for ContinuousClock(0);
  v4[85] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[86] = v7;
  v4[87] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000ED87C, a4, 0);
}

uint64_t sub_1000ED87C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1002618A0 + dword_1002618A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1002618A4);
  *(_QWORD *)(v1 + 704) = v2;
  *v2 = v1;
  v2[1] = sub_1000ED8FC;
  return v4(1000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1000ED8FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 704);
  v4 = *(_QWORD *)(*v1 + 696);
  v5 = *(_QWORD *)(*v1 + 688);
  v6 = *(_QWORD *)(*v1 + 680);
  *(_QWORD *)(*v1 + 712) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1000EDDA0;
  else
    v7 = sub_1000ED98C;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 672), 0);
}

uint64_t sub_1000ED98C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = v0 + 83;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v26 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = Duration.description.getter(1000000000000000000, 0);
    v9 = v8;
    v0[83] = sub_10002BA84(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v25, v0 + 84, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "refreshClientWithThrottle after sleeping for %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v10 = swift_retain_n(v0[84], 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[84];
  if (v13)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136315138;
    v26 = v16;
    v17 = (uint64_t *)(v14 + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
    swift_beginAccess(v14 + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps, v0 + 77, 0, 0);
    v18 = *v17;
    type metadata accessor for Date(0);
    v19 = swift_bridgeObjectRetain(v18);
    v20 = Array.description.getter(v19);
    v22 = v21;
    swift_bridgeObjectRelease(v18);
    v0[82] = sub_10002BA84(v20, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 82, v25, v15 + 4, v15 + 12);
    swift_release_n(v14, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Refreshing with triggers: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(v14, 2);
  }
  v23 = (_QWORD *)swift_task_alloc(dword_100262DBC);
  v0[90] = v23;
  *v23 = v0;
  v23[1] = sub_1000EDCC8;
  return sub_1000E3CBC((uint64_t)(v0 + 2));
}

uint64_t sub_1000EDCC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 672);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 720));
  sub_1000F946C(v1, sub_10005ED50);
  return swift_task_switch(sub_1000EDD34, v2, 0);
}

uint64_t sub_1000EDD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = (uint64_t *)(*(_QWORD *)(v0 + 672) + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
  swift_beginAccess(v2, v0 + 592, 1, 0);
  v3 = *v2;
  *v2 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EDDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 712);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 712);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136446210;
    v18 = v9;
    *(_QWORD *)(v0 + 648) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 648, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 640) = sub_10002BA84(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "refreshIfNeeded error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 712));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v14 = *(_QWORD *)(v0 + 696);
  v15 = (uint64_t *)(*(_QWORD *)(v0 + 672) + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
  swift_beginAccess(v15, v0 + 592, 1, 0);
  v16 = *v15;
  *v15 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v16);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EDFD4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  *(_QWORD *)(v4 + 1416) = a4;
  *(_BYTE *)(v4 + 1761) = a3;
  *(_QWORD *)(v4 + 1408) = a2;
  v5 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v4 + 1424) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002634F8);
  *(_QWORD *)(v4 + 1432) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1440) = v7;
  *(_QWORD *)(v4 + 1448) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C((uint64_t *)&unk_100262930);
  *(_QWORD *)(v4 + 1456) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 1464) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 1472) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1480) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 1488) = swift_task_alloc(v11);
  v12 = type metadata accessor for DataManager.State(0);
  *(_QWORD *)(v4 + 1496) = v12;
  *(_QWORD *)(v4 + 1504) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URLComponents(0);
  *(_QWORD *)(v4 + 1512) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 1520) = v14;
  *(_QWORD *)(v4 + 1528) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for InitEndpoint(0);
  *(_QWORD *)(v4 + 1536) = inited;
  *(_QWORD *)(v4 + 1544) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C(&qword_100260580);
  *(_QWORD *)(v4 + 1552) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Account(0);
  *(_QWORD *)(v4 + 1560) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v4 + 1568) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1576) = swift_task_alloc(v19);
  *(_QWORD *)(v4 + 1584) = swift_task_alloc(v19);
  *(_QWORD *)(v4 + 1592) = swift_task_alloc(v19);
  *(_QWORD *)(v4 + 1600) = swift_task_alloc(v19);
  v20 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v4 + 1608) = v20;
  *v20 = v4;
  v20[1] = sub_1000EE1B8;
  return daemon.getter();
}

uint64_t sub_1000EE1B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1608);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1616) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1624) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1000EE2A0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000EE2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[203];
  v5 = *v2;
  v5[204] = a1;
  v5[205] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000EF87C, 0, 0);
  swift_release(v5[202]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002612E4);
  v5[206] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_1000EE350;
  return sub_1000069E8(v5[194]);
}

uint64_t sub_1000EE350()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1648));
  return swift_task_switch(sub_1000EE3A4, 0, 0);
}

uint64_t sub_1000EE3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 1568);
  v2 = *(_QWORD *)(v0 + 1560);
  v3 = *(_QWORD *)(v0 + 1552);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027ACA0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing primary account to send init client!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 1632);

    v10 = sub_1000F9428();
    v45 = swift_allocError(&type metadata for DataManager.Error, v10, 0, 0);
    *v11 = 7;
    swift_willThrow(v45);
    swift_release(v9);
    v12 = *(_QWORD *)(v0 + 1592);
    v13 = *(_QWORD *)(v0 + 1584);
    v14 = *(_QWORD *)(v0 + 1576);
    v15 = *(_QWORD *)(v0 + 1552);
    v16 = *(_QWORD *)(v0 + 1544);
    v17 = *(_QWORD *)(v0 + 1528);
    v18 = *(_QWORD *)(v0 + 1504);
    v19 = *(_QWORD *)(v0 + 1488);
    v20 = *(_QWORD *)(v0 + 1480);
    v42 = *(_QWORD *)(v0 + 1456);
    v43 = *(_QWORD *)(v0 + 1448);
    v44 = *(_QWORD *)(v0 + 1424);
    swift_task_dealloc(*(_QWORD *)(v0 + 1600));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1600), v3, v2);
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v22 = *(_QWORD *)(v0 + 1600);
    v23 = *(_QWORD *)(v0 + 1592);
    v24 = *(_QWORD *)(v0 + 1568);
    v25 = *(_QWORD *)(v0 + 1560);
    v26 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 1656) = sub_100037A9C(v26, (uint64_t)qword_10027ACA0);
    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
    *(_QWORD *)(v0 + 1664) = v27;
    v28 = v27(v23, v22, v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 1592);
    if (v31)
    {
      v33 = *(_QWORD *)(v0 + 1584);
      v46 = *(_QWORD *)(v0 + 1568);
      v34 = *(_QWORD *)(v0 + 1560);
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v47 = v36;
      *(_DWORD *)v35 = 136315138;
      v27(v33, v32, v34);
      v37 = String.init<A>(describing:)(v33, v34);
      v39 = v38;
      *(_QWORD *)(v0 + 1384) = sub_10002BA84(v37, v38, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1384, v0 + 1392, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v39);
      v40 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v40(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully retrieved account info: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1568) + 8);
      v40(*(_QWORD *)(v0 + 1592), *(_QWORD *)(v0 + 1560));
    }

    *(_QWORD *)(v0 + 1672) = v40;
    v41 = (_QWORD *)swift_task_alloc(dword_1002635CC);
    *(_QWORD *)(v0 + 1680) = v41;
    *v41 = v0;
    v41[1] = sub_1000EE7CC;
    return sub_1000E344C(*(_QWORD *)(v0 + 1600));
  }
}

uint64_t sub_1000EE7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1680);
  *(_QWORD *)(*(_QWORD *)v1 + 1688) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000EF974;
  else
    v3 = sub_1000EE830;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EE830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  Swift::String v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);

  if ((*(_BYTE *)(v1 + 1761) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 1408);
    swift_storeEnumTagMultiPayload(*(_QWORD *)(v1 + 1504), *(_QWORD *)(v1 + 1496), 6);
    return swift_task_switch(sub_1000EF638, v2, 0);
  }
  else
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "First launch Daemon, need to InitClient", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 1664);
    v8 = *(_QWORD *)(v1 + 1600);
    v9 = *(_QWORD *)(v1 + 1584);
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 1672);
    v19 = *(_QWORD *)(v1 + 1576);
    v10 = *(_QWORD *)(v1 + 1560);
    v11 = *(_QWORD *)(v1 + 1528);
    v12 = *(_QWORD *)(v1 + 1520);
    v16 = *(_QWORD *)(v1 + 1512);
    v17 = *(_QWORD *)(v1 + 1544);

    v7(v9, v8, v10);
    sub_10003CD40(v9);
    v13 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v1 + 1288);
    v14._countAndFlagsBits = 0x65696C4374696E69;
    v14._object = (void *)0xEA0000000000746ELL;
    String.append(_:)(v14);
    v13(v1 + 1288, 0);
    v18(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v17, v11, v16);
    v7(v19, v8, v10);
    v20 = (uint64_t (*)(uint64_t))((char *)&dword_100260DD8 + dword_100260DD8);
    v15 = (_QWORD *)swift_task_alloc(unk_100260DDC);
    *(_QWORD *)(v1 + 1696) = v15;
    *v15 = v1;
    v15[1] = sub_1000EEA28;
    return v20(*(_QWORD *)(v1 + 1576));
  }
}

uint64_t sub_1000EEA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 1696);
  v5[213] = a1;
  v5[214] = a2;
  v5[215] = a3;
  v5[216] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_1000EECD0;
  else
    v7 = sub_1000EEAA0;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000EEAA0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = v0[215];
  v2 = v0[214];
  v3 = v0[213];
  v4 = v0[193];
  v0[149] = v0[192];
  v0[150] = sub_100004EA8(&qword_1002635D0, type metadata accessor for InitEndpoint, (uint64_t)&unk_1001F6B10);
  v5 = sub_10003276C(v0 + 146);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for InitEndpoint);
  v0[154] = &type metadata for InitClientRequest;
  v0[155] = sub_1000646E8();
  v0[151] = v3;
  v0[152] = v2;
  v0[153] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[159] = type metadata accessor for BasicCredential(0);
  v0[160] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 156);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[217] = v13;
  *v13 = v0;
  v13[1] = sub_1000EEC28;
  v14 = (_QWORD *)v0[176];
  v13[78] = v14;
  v13[77] = v0 + 156;
  v13[76] = v0 + 151;
  v13[75] = v0 + 146;
  v13[74] = v0 + 74;
  v13[79] = *v14;
  return swift_task_switch(sub_1000DE6F4, v14, 0);
}

uint64_t sub_1000EEC28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1736);
  *(_QWORD *)(*v1 + 1744) = v0;
  swift_task_dealloc(v3);
  sub_1000087A0(v2 + 1248, &qword_100260598);
  if (v0)
  {
    v4 = sub_1000EFA84;
  }
  else
  {
    sub_10002BB90((_QWORD *)(v2 + 1208));
    sub_10002BB90((_QWORD *)(v2 + 1168));
    v4 = sub_1000EEDF4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EECD0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1672);
  v2 = *(_QWORD *)(v0 + 1600);
  v3 = *(_QWORD *)(v0 + 1560);
  v4 = *(_QWORD *)(v0 + 1544);
  swift_release(*(_QWORD *)(v0 + 1632));
  sub_100024990(v4, type metadata accessor for InitEndpoint);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1584);
  v7 = *(_QWORD *)(v0 + 1576);
  v8 = *(_QWORD *)(v0 + 1552);
  v9 = *(_QWORD *)(v0 + 1544);
  v10 = *(_QWORD *)(v0 + 1528);
  v11 = *(_QWORD *)(v0 + 1504);
  v12 = *(_QWORD *)(v0 + 1488);
  v13 = *(_QWORD *)(v0 + 1480);
  v15 = *(_QWORD *)(v0 + 1456);
  v16 = *(_QWORD *)(v0 + 1448);
  v17 = *(_QWORD *)(v0 + 1424);
  swift_task_dealloc(*(_QWORD *)(v0 + 1600));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EEDF4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = sub_10002B630(v0 + 592);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v15 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_10002B630(v0 + 592);
    v6 = sub_1000282A0();
    v8 = v7;
    sub_10002B3D4(v0 + 592);
    *(_QWORD *)(v0 + 1400) = sub_10002BA84(v6, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1400, v0 + 1408, v4 + 4, v4 + 12);
    swift_bridgeObjectRelease(v8);
    sub_10002B3D4(v0 + 592);
    sub_10002B3D4(v0 + 592);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received init client response: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_10002B3D4(v0 + 592);
    sub_10002B3D4(v0 + 592);
  }

  if (qword_10025F948 != -1)
    swift_once(&qword_10025F948, sub_1000E01BC);
  v9 = *(_QWORD *)(v0 + 1504);
  v10 = *(_QWORD *)(v0 + 1496);
  v11 = *(_QWORD *)(v0 + 1408);
  v12 = sub_100037A5C(&qword_1002632F8);
  v13 = sub_100037A9C(v12, (uint64_t)qword_100262D20);
  *(_BYTE *)(v0 + 1760) = 1;
  swift_beginAccess(v13, v0 + 1320, 33, 0);
  ManagedDefault.wrappedValue.setter(v0 + 1760, v12);
  swift_endAccess(v0 + 1320);
  swift_storeEnumTagMultiPayload(v9, v10, 6);
  return swift_task_switch(sub_1000EF02C, v11, 0);
}

uint64_t sub_1000EF02C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1504);
  sub_10000A37C(v1);
  sub_100024990(v1, type metadata accessor for DataManager.State);
  return swift_task_switch(sub_1000EF080, 0, 0);
}

uint64_t sub_1000EF080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  static Date.trustedNow.getter(*(_QWORD *)(v0 + 1488));
  if (qword_10025F940 != -1)
    swift_once(&qword_10025F940, sub_1000E00A4);
  v1 = *(_QWORD *)(v0 + 1472);
  v2 = *(_QWORD *)(v0 + 1464);
  v3 = *(_QWORD *)(v0 + 1456);
  v4 = *(_QWORD *)(v0 + 1448);
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(_QWORD *)(v0 + 1432);
  v7 = sub_100037A9C(v6, (uint64_t)qword_100262D08);
  v8 = swift_beginAccess(v7, v0 + 1344, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 16))(v4, v7, v6, v8);
  ManagedDefault.wrappedValue.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  v10 = *(_QWORD *)(v0 + 1480);
  if (v9 == 1)
  {
    v11 = *(_QWORD *)(v0 + 1456);
    static Date.distantPast.getter(v10);
    sub_1000087A0(v11, (uint64_t *)&unk_100262930);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1472) + 32))(v10, *(_QWORD *)(v0 + 1456), *(_QWORD *)(v0 + 1464));
  }
  v12 = *(_QWORD *)(v0 + 1488);
  v13 = *(_QWORD *)(v0 + 1480);
  v14 = *(_QWORD *)(v0 + 1472);
  v15 = *(_QWORD *)(v0 + 1464);
  v16 = Date.timeIntervalSince(_:)(v13);
  v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v13, v15);
  v18 = ((uint64_t (*)(uint64_t, uint64_t))v17)(v12, v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  if (v16 <= 5.0)
  {
    if (v21)
    {
      v25 = swift_slowAlloc(22, -1);
      *(_DWORD *)v25 = 134349312;
      *(double *)(v0 + 1376) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1376, v0 + 1384, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2050;
      *(_QWORD *)(v0 + 1368) = 0x4014000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1368, v0 + 1376, v25 + 14, v25 + 22);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Time since last refreshClient : %{public}f. Threshold: %{public}f. Not sending.", (uint8_t *)v25, 0x16u);
      swift_slowDealloc(v25, -1, -1);
    }
    v26 = *(_QWORD *)(v0 + 1720);
    v27 = *(_QWORD *)(v0 + 1712);
    v28 = *(_QWORD *)(v0 + 1704);
    v29 = *(_QWORD *)(v0 + 1632);
    v30 = *(_QWORD *)(v0 + 1544);

    swift_release(v29);
    swift_bridgeObjectRelease(v28);
    sub_100037AF8(v27, v26);
    sub_100024990(v30, type metadata accessor for InitEndpoint);
    v31 = *(_QWORD *)(v0 + 1600);
    v32 = *(_QWORD *)(v0 + 1592);
    v33 = *(_QWORD *)(v0 + 1584);
    v34 = *(_QWORD *)(v0 + 1576);
    v35 = *(_QWORD *)(v0 + 1552);
    v36 = *(_QWORD *)(v0 + 1544);
    v37 = *(_QWORD *)(v0 + 1528);
    v38 = *(_QWORD *)(v0 + 1504);
    v39 = *(_QWORD *)(v0 + 1488);
    v40 = *(_QWORD *)(v0 + 1480);
    v41 = *(_QWORD *)(v0 + 1456);
    v42 = *(_QWORD *)(v0 + 1448);
    v43 = *(_QWORD *)(v0 + 1424);
    (*(void (**)(uint64_t, _QWORD))(v0 + 1672))(v31, *(_QWORD *)(v0 + 1560));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (v21)
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134349056;
      *(double *)(v0 + 1392) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1392, v0 + 1400, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Send refreshClient during InitClient: %{public}f for future friends data", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = (_QWORD *)swift_task_alloc(dword_100262DBC);
    *(_QWORD *)(v0 + 1752) = v23;
    *v23 = v0;
    v23[1] = sub_1000EF494;
    return sub_1000E3CBC(v0 + 16);
  }
}

uint64_t sub_1000EF494()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0 + 16;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1752));
  sub_1000F946C(v1, sub_10005ED50);
  return swift_task_switch(sub_1000EF4FC, 0, 0);
}

uint64_t sub_1000EF4FC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 1720);
  v2 = *(_QWORD *)(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1704);
  v4 = *(_QWORD *)(v0 + 1544);
  swift_release(*(_QWORD *)(v0 + 1632));
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v4, type metadata accessor for InitEndpoint);
  v5 = *(_QWORD *)(v0 + 1600);
  v6 = *(_QWORD *)(v0 + 1592);
  v7 = *(_QWORD *)(v0 + 1584);
  v8 = *(_QWORD *)(v0 + 1576);
  v9 = *(_QWORD *)(v0 + 1552);
  v10 = *(_QWORD *)(v0 + 1544);
  v11 = *(_QWORD *)(v0 + 1528);
  v12 = *(_QWORD *)(v0 + 1504);
  v13 = *(_QWORD *)(v0 + 1488);
  v15 = *(_QWORD *)(v0 + 1480);
  v16 = *(_QWORD *)(v0 + 1456);
  v17 = *(_QWORD *)(v0 + 1448);
  v18 = *(_QWORD *)(v0 + 1424);
  (*(void (**)(uint64_t, _QWORD))(v0 + 1672))(v5, *(_QWORD *)(v0 + 1560));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EF638()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1504);
  sub_10000A37C(v1);
  sub_100024990(v1, type metadata accessor for DataManager.State);
  return swift_task_switch(sub_1000EF68C, 0, 0);
}

uint64_t sub_1000EF68C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Daemon has already initialized, no need to InitClient", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 1632);
  v6 = *(_QWORD *)(v1 + 1424);
  v23 = *(_OWORD *)(v1 + 1408);

  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject(&unk_100252850, 48, 7);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 32) = v23;
  swift_retain(v23);
  v9 = sub_10005582C(v6, (uint64_t)&unk_1002635E0, v8);
  swift_release(v9);
  swift_release(v5);
  v10 = *(_QWORD *)(v1 + 1600);
  v11 = *(_QWORD *)(v1 + 1592);
  v12 = *(_QWORD *)(v1 + 1584);
  v13 = *(_QWORD *)(v1 + 1576);
  v14 = *(_QWORD *)(v1 + 1552);
  v15 = *(_QWORD *)(v1 + 1544);
  v16 = *(_QWORD *)(v1 + 1528);
  v17 = *(_QWORD *)(v1 + 1504);
  v18 = *(_QWORD *)(v1 + 1488);
  v20 = *(_QWORD *)(v1 + 1480);
  v21 = *(_QWORD *)(v1 + 1456);
  v22 = *(_QWORD *)(v1 + 1448);
  *(_QWORD *)&v23 = *(_QWORD *)(v1 + 1424);
  (*(void (**)(uint64_t, _QWORD))(v1 + 1672))(v10, *(_QWORD *)(v1 + 1560));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000EF87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 1616));
  v1 = *(_QWORD *)(v0 + 1592);
  v2 = *(_QWORD *)(v0 + 1584);
  v3 = *(_QWORD *)(v0 + 1576);
  v4 = *(_QWORD *)(v0 + 1552);
  v5 = *(_QWORD *)(v0 + 1544);
  v6 = *(_QWORD *)(v0 + 1528);
  v7 = *(_QWORD *)(v0 + 1504);
  v8 = *(_QWORD *)(v0 + 1488);
  v9 = *(_QWORD *)(v0 + 1480);
  v11 = *(_QWORD *)(v0 + 1456);
  v12 = *(_QWORD *)(v0 + 1448);
  v13 = *(_QWORD *)(v0 + 1424);
  swift_task_dealloc(*(_QWORD *)(v0 + 1600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EF974()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1672);
  v2 = *(_QWORD *)(v0 + 1600);
  v3 = *(_QWORD *)(v0 + 1560);
  swift_release(*(_QWORD *)(v0 + 1632));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 1592);
  v5 = *(_QWORD *)(v0 + 1584);
  v6 = *(_QWORD *)(v0 + 1576);
  v7 = *(_QWORD *)(v0 + 1552);
  v8 = *(_QWORD *)(v0 + 1544);
  v9 = *(_QWORD *)(v0 + 1528);
  v10 = *(_QWORD *)(v0 + 1504);
  v11 = *(_QWORD *)(v0 + 1488);
  v12 = *(_QWORD *)(v0 + 1480);
  v14 = *(_QWORD *)(v0 + 1456);
  v15 = *(_QWORD *)(v0 + 1448);
  v16 = *(_QWORD *)(v0 + 1424);
  swift_task_dealloc(*(_QWORD *)(v0 + 1600));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EFA84()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 1720);
  v2 = *(_QWORD *)(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1704);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1672);
  v5 = *(_QWORD *)(v0 + 1600);
  v6 = *(_QWORD *)(v0 + 1560);
  v7 = *(_QWORD *)(v0 + 1544);
  swift_release(*(_QWORD *)(v0 + 1632));
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v7, type metadata accessor for InitEndpoint);
  v4(v5, v6);
  sub_10002BB90((_QWORD *)(v0 + 1208));
  sub_10002BB90((_QWORD *)(v0 + 1168));
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);
  v10 = *(_QWORD *)(v0 + 1576);
  v11 = *(_QWORD *)(v0 + 1552);
  v12 = *(_QWORD *)(v0 + 1544);
  v13 = *(_QWORD *)(v0 + 1528);
  v14 = *(_QWORD *)(v0 + 1504);
  v15 = *(_QWORD *)(v0 + 1488);
  v16 = *(_QWORD *)(v0 + 1480);
  v18 = *(_QWORD *)(v0 + 1456);
  v19 = *(_QWORD *)(v0 + 1448);
  v20 = *(_QWORD *)(v0 + 1424);
  swift_task_dealloc(*(_QWORD *)(v0 + 1600));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EFBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000EFBF8, 0, 0);
}

uint64_t sub_1000EFBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "check if settings From Storage is nil", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_100262DC4);
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = sub_100099CE4;
  v7 = *(_QWORD *)(v0 + 16);
  v6[548] = v7;
  return swift_task_switch(sub_1000E5248, v7, 0);
}

uint64_t sub_1000EFD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1000EFD20, a4, 0);
}

uint64_t sub_1000EFD20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[2] = sub_10002BA84(0x65696C4374696E69, 0xEC0000002928746ELL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Checking if settings from DB is nil", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_100262DC4);
  v0[4] = v7;
  *v7 = v0;
  v7[1] = sub_1000438B8;
  v8 = v0[3];
  v7[548] = v8;
  return swift_task_switch(sub_1000E5248, v8, 0);
}

uint64_t sub_1000EFED0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 6880) = v2;
  *(_BYTE *)(v3 + 7104) = a2;
  *(_QWORD *)(v3 + 6872) = a1;
  v4 = type metadata accessor for DataManager.State(0);
  *(_QWORD *)(v3 + 6888) = v4;
  *(_QWORD *)(v3 + 6896) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Response(0);
  *(_QWORD *)(v3 + 6904) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 6912) = v6;
  *(_QWORD *)(v3 + 6920) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EFF60, v2, 0);
}

uint64_t sub_1000EFF60()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v108;
  _DWORD *v109;
  os_log_type_t type;
  uint8_t *buf;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129[2];

  v1 = (const void *)(v0 + 3192);
  v127 = (uint64_t *)(v0 + 6864);
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v2 = *(_QWORD *)(v0 + 6920);
  v3 = *(_QWORD *)(v0 + 6912);
  v4 = *(_QWORD *)(v0 + 6904);
  v5 = *(_QWORD *)(v0 + 6872);
  v124 = type metadata accessor for Logger(0);
  sub_100037A9C(v124, (uint64_t)qword_10027AD08);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 6920);
  v11 = *(_QWORD *)(v0 + 6912);
  v12 = *(_QWORD *)(v0 + 6904);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v129[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = sub_100004EA8(&qword_1002633D0, (uint64_t (*)(uint64_t))&type metadata accessor for Response, (uint64_t)&protocol conformance descriptor for Response);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    *v127 = sub_10002BA84(v16, v17, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v0 + 6872, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "response dict: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v19 = v13;
    v1 = (const void *)(v0 + 3192);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  v20 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = JSONDecoder.init()();
  v22 = Response.body.getter();
  v24 = v23;
  v25 = sub_10003CCFC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for ServerBaseResponse, v22, v24, &type metadata for ServerBaseResponse, v25);
  v125 = (_QWORD *)(v0 + 5656);
  v121 = v0 + 6264;
  v118 = (uint64_t *)(v0 + 6856);
  sub_100037AB4(v22, v24);
  swift_release(v21);
  v112 = v0 + 2616;
  memcpy((void *)(v0 + 2616), v1, 0x240uLL);
  v26 = *(_QWORD *)(v0 + 2712);
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = *(_QWORD *)(v0 + 6896);
    swift_storeEnumTagMultiPayload(v27, *(_QWORD *)(v0 + 6888), 7);
    sub_10000A37C(v27);
    sub_100024990(v27, type metadata accessor for DataManager.State);
  }
  v119 = (uint64_t *)(v0 + 6848);
  v28 = *(_QWORD *)(v0 + 2616);
  *(_QWORD *)(v0 + 6928) = v28;
  v29 = *(_QWORD *)(v0 + 2624);
  *(_QWORD *)(v0 + 6936) = v29;
  v30 = *(_QWORD *)(v0 + 2632);
  *(_QWORD *)(v0 + 6944) = v30;
  v31 = *(_QWORD *)(v0 + 2640);
  *(_QWORD *)(v0 + 6952) = v31;
  v32 = *(_QWORD *)(v0 + 2648);
  *(_QWORD *)(v0 + 6960) = v32;
  v33 = *(_BYTE *)(v0 + 2656);
  *(_BYTE *)(v0 + 7105) = v33;
  v34 = *(_QWORD *)(v0 + 2664);
  *(_QWORD *)(v0 + 6968) = v34;
  v35 = *(_QWORD *)(v0 + 2672);
  *(_QWORD *)(v0 + 6976) = v35;
  v36 = *(_QWORD *)(v0 + 2680);
  *(_QWORD *)(v0 + 6984) = v36;
  v37 = *(_BYTE *)(v0 + 2688);
  *(_BYTE *)(v0 + 7106) = v37;
  v38 = *(_QWORD *)(v0 + 2696);
  *(_QWORD *)(v0 + 6992) = v38;
  v39 = *(_QWORD *)(v0 + 2704);
  *(_QWORD *)(v0 + 7000) = v39;
  *(_QWORD *)(v0 + 6408) = v28;
  *(_QWORD *)(v0 + 6416) = v29;
  *(_QWORD *)(v0 + 6424) = v30;
  *(_QWORD *)(v0 + 6432) = v31;
  *(_QWORD *)(v0 + 6440) = v32;
  *(_BYTE *)(v0 + 6448) = v33;
  *(_QWORD *)(v0 + 6456) = v34;
  *(_QWORD *)(v0 + 6464) = v35;
  *(_QWORD *)(v0 + 6472) = v36;
  *(_BYTE *)(v0 + 6480) = v37;
  *(_QWORD *)(v0 + 6488) = v38;
  *(_QWORD *)(v0 + 6496) = v39;
  swift_bridgeObjectRetain_n(v39, 2);
  swift_bridgeObjectRetain_n(v29, 2);
  swift_bridgeObjectRetain_n(v31, 2);
  swift_bridgeObjectRetain_n(v34, 2);
  swift_bridgeObjectRetain_n(v36, 2);
  swift_bridgeObjectRetain(v26);
  v41 = sub_1000F8C78(v40, (uint64_t *)(v0 + 6408));
  *(_QWORD *)(v0 + 7008) = v41;
  swift_bridgeObjectRelease(v26);
  v114 = v39;
  swift_bridgeObjectRelease(v39);
  v115 = v36;
  swift_bridgeObjectRelease(v36);
  v116 = v34;
  swift_bridgeObjectRelease(v34);
  v123 = v31;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v29);
  v42 = swift_bridgeObjectRetain_n(v41, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v129[0] = v46;
    *(_DWORD *)v45 = 136315138;
    type metadata accessor for Device(0);
    v47 = swift_bridgeObjectRetain(v41);
    v48 = Array.description.getter(v47);
    v108 = v29;
    v50 = v49;
    swift_bridgeObjectRelease(v41);
    *v118 = sub_10002BA84(v48, v50, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v118, v127, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease_n(v41, 2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Devices: %s", v45, 0xCu);
    v29 = v108;
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v41, 2);
  }
  v51 = *(_QWORD *)(v0 + 6880);
  v52 = *(_BYTE *)(v0 + 7104);
  v53 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 7016) = v53;
  *(_QWORD *)(v53 + 16) = v51;
  *(_QWORD *)(v53 + 24) = v112;
  swift_asyncLet_begin(v0 + 1936, 0, (char *)&type metadata for () + 8, &unk_100263390, v53);
  v54 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 7024) = v54;
  *(_QWORD *)(v54 + 16) = v51;
  *(_QWORD *)(v54 + 24) = v41;
  swift_asyncLet_begin(v0 + 1296, 0, (char *)&type metadata for () + 8, &unk_1002633A0, v54);
  v55 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 7032) = v55;
  *(_QWORD *)(v55 + 16) = v51;
  *(_QWORD *)(v55 + 24) = v112;
  *(_BYTE *)(v55 + 32) = v52;
  v56 = sub_10003C1FC(&qword_1002633B8);
  swift_asyncLet_begin(v0 + 656, 0, v56, &unk_1002633B0, v55);
  sub_10000EF6C(v0 + 2856, (uint64_t)v125, &qword_1002603B0);
  sub_10000EF6C(v0 + 3016, v121, &qword_100260858);
  v57 = *(_QWORD *)(v0 + 2720);
  *(_QWORD *)(v0 + 7040) = v57;
  v58 = *(_QWORD *)(v0 + 2728);
  *(_QWORD *)(v0 + 7048) = v58;
  v128 = *(_QWORD *)(v0 + 2736);
  *(_QWORD *)(v0 + 7056) = v128;
  v122 = *(void **)(v0 + 2744);
  *(_QWORD *)(v0 + 7064) = v122;
  swift_bridgeObjectRetain_n(v29, 2);
  swift_bridgeObjectRetain_n(v123, 2);
  swift_bridgeObjectRetain_n(v116, 2);
  swift_bridgeObjectRetain_n(v115, 2);
  swift_bridgeObjectRetain_n(v114, 2);
  sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v59 = v29;
  v117 = v57;
  v120 = (void *)v58;
  v60 = sub_10002BD68(v57, v58, v128, (uint64_t)v122);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    type = v62;
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v113 = swift_slowAlloc(32, -1);
    v129[0] = v113;
    buf = v63;
    *(_DWORD *)v63 = 136315138;
    v64 = v63 + 12;
    v109 = v63 + 4;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v114);
    v65 = sub_100028A7C();
    v67 = v66;
    swift_bridgeObjectRelease(v114);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v116);
    swift_bridgeObjectRelease(v123);
    swift_bridgeObjectRelease(v59);
    *v119 = sub_10002BA84(v65, v67, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v118, v109, v64);
    swift_bridgeObjectRelease_n(v114, 2);
    swift_bridgeObjectRelease_n(v115, 2);
    swift_bridgeObjectRelease_n(v116, 2);
    swift_bridgeObjectRelease_n(v123, 2);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease(v67);
    _os_log_impl((void *)&_mh_execute_header, v61, type, "myInfo: %s", buf, 0xCu);
    swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1, -1);
    swift_slowDealloc(buf, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v114, 2);
    swift_bridgeObjectRelease_n(v115, 2);
    swift_bridgeObjectRelease_n(v116, 2);
    swift_bridgeObjectRelease_n(v123, 2);
    swift_bridgeObjectRelease_n(v59, 2);
  }
  sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v68 = sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    v129[0] = v72;
    *(_DWORD *)v71 = 136315138;
    sub_10000EF6C((uint64_t)v125, v0 + 5496, &qword_1002603B0);
    if (sub_10005EFE0(v0 + 5496) == 1)
    {
      v73 = 0;
      v74 = 0xE000000000000000;
    }
    else
    {
      v75 = *(_OWORD *)(v0 + 5608);
      *(_OWORD *)(v0 + 5912) = *(_OWORD *)(v0 + 5592);
      *(_OWORD *)(v0 + 5928) = v75;
      v76 = *(_OWORD *)(v0 + 5640);
      *(_OWORD *)(v0 + 5944) = *(_OWORD *)(v0 + 5624);
      *(_OWORD *)(v0 + 5960) = v76;
      v77 = *(_OWORD *)(v0 + 5544);
      *(_OWORD *)(v0 + 5848) = *(_OWORD *)(v0 + 5528);
      *(_OWORD *)(v0 + 5864) = v77;
      v78 = *(_OWORD *)(v0 + 5576);
      *(_OWORD *)(v0 + 5880) = *(_OWORD *)(v0 + 5560);
      *(_OWORD *)(v0 + 5896) = v78;
      v79 = *(_OWORD *)(v0 + 5512);
      *(_OWORD *)(v0 + 5816) = *(_OWORD *)(v0 + 5496);
      *(_OWORD *)(v0 + 5832) = v79;
      v73 = sub_100027DEC();
      v74 = v80;
    }
    *(_QWORD *)(v0 + 6840) = sub_10002BA84(v73, v74, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6840, v119, v71 + 4, v71 + 12);
    swift_bridgeObjectRelease(v74);
    sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "serverContext: %s", v71, 0xCu);
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);
  }
  else
  {
    sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_10000EFB0(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
  }

  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.default.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = swift_slowAlloc(32, -1);
    v129[0] = v85;
    *(_DWORD *)v84 = 136315138;
    sub_10000EF6C(v121, v0 + 5976, &qword_100260858);
    v86 = v117;
    if (sub_10005EFC4(v0 + 5976) == 1)
    {
      v87 = 0;
      v88 = 0xE000000000000000;
    }
    else
    {
      v90 = *(_OWORD *)(v0 + 6088);
      *(_OWORD *)(v0 + 6216) = *(_OWORD *)(v0 + 6072);
      *(_OWORD *)(v0 + 6232) = v90;
      *(_OWORD *)(v0 + 6248) = *(_OWORD *)(v0 + 6104);
      v91 = *(_OWORD *)(v0 + 6024);
      *(_OWORD *)(v0 + 6152) = *(_OWORD *)(v0 + 6008);
      *(_OWORD *)(v0 + 6168) = v91;
      v92 = *(_OWORD *)(v0 + 6056);
      *(_OWORD *)(v0 + 6184) = *(_OWORD *)(v0 + 6040);
      *(_OWORD *)(v0 + 6200) = v92;
      v93 = *(_OWORD *)(v0 + 5992);
      *(_OWORD *)(v0 + 6120) = *(_OWORD *)(v0 + 5976);
      *(_OWORD *)(v0 + 6136) = v93;
      v87 = sub_10001FC14();
      v88 = v94;
    }
    v89 = v120;
    *(_QWORD *)(v0 + 6744) = sub_10002BA84(v87, v88, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6744, v0 + 6752, v84 + 4, v84 + 12);
    swift_bridgeObjectRelease(v88);
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "serverConfig: %s", v84, 0xCu);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

    v86 = v117;
    v89 = v120;
  }
  v95 = v0 + 3768;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  *(_QWORD *)(v0 + 7072) = sub_100037A9C(v124, (uint64_t)qword_10027ACA0);
  sub_10002BD68(v86, (uint64_t)v89, v128, (uint64_t)v122);
  v96 = sub_10002BD68(v86, (uint64_t)v89, v128, (uint64_t)v122);
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.default.getter(v97);
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(12, -1);
    v126 = swift_slowAlloc(32, -1);
    v129[0] = v126;
    *(_DWORD *)v99 = 136315138;
    if (v89)
    {
      v100 = v128;
      v101 = (uint64_t)v122;
      v102 = sub_10000CB54(v86, v89, v128, v122);
      v104 = v103;
      v105 = (uint64_t)v89;
    }
    else
    {
      v102 = 0;
      v104 = 0xE000000000000000;
      v105 = 0;
      v100 = v128;
      v101 = (uint64_t)v122;
    }
    *(_QWORD *)(v0 + 6648) = sub_10002BA84(v102, v104, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6648, v0 + 6656, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease(v104);
    sub_10002BD98(v86, v105, v100, v101);
    sub_10002BD98(v86, v105, v100, v101);
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "serverPreferences: %s", v99, 0xCu);
    swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v99, -1, -1);

    v95 = v0 + 3768;
  }
  else
  {
    sub_10002BD98(v86, (uint64_t)v89, v128, (uint64_t)v122);
    sub_10002BD98(v86, (uint64_t)v89, v128, (uint64_t)v122);

  }
  v106 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v0 + 7080) = v106;
  *v106 = v0;
  v106[1] = sub_1000F0E88;
  return sub_10000AFC8(v95);
}

uint64_t sub_1000F0E88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 6880);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 7080));
  return swift_task_switch(sub_1000F0EE0, v1, 0);
}

uint64_t sub_1000F0EE0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;

  v1 = sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc(32, -1);
    v5 = swift_slowAlloc(64, -1);
    v23 = v5;
    *(_DWORD *)v4 = 136446723;
    *(_QWORD *)(v0 + 6552) = sub_10002BA84(0xD000000000000025, 0x80000001001FEAD0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6552, v0 + 6560, v4 + 4, v4 + 12);
    *(_WORD *)(v4 + 12) = 2160;
    *(_QWORD *)(v0 + 6504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6504, v0 + 6512, v4 + 14, v4 + 22);
    *(_WORD *)(v4 + 22) = 2081;
    sub_10000EF6C(v0 + 3768, v0 + 4200, &qword_1002603A8);
    sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
    v6 = sub_100037A5C(&qword_1002603A8);
    v7 = String.init<A>(describing:)(v0 + 4200, v6);
    v9 = v8;
    *(_QWORD *)(v0 + 6600) = sub_10002BA84(v7, v8, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6600, v0 + 6608, v4 + 24, v4 + 32);
    swift_bridgeObjectRelease(v9);
    sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s, cached settings: %{private,mask.hash}s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy(v5, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
  }

  v10 = *(_QWORD *)(v0 + 7064);
  v11 = *(_QWORD *)(v0 + 7056);
  v22 = *(_OWORD *)(v0 + 7040);
  v12 = *(_BYTE *)(v0 + 7106);
  v13 = *(_QWORD *)(v0 + 6984);
  v14 = *(_OWORD *)(v0 + 6968);
  v15 = *(_BYTE *)(v0 + 7105);
  v16 = *(_QWORD *)(v0 + 6960);
  v17 = *(_QWORD *)(v0 + 6880);
  v18 = *(_OWORD *)(v0 + 6944);
  *(_OWORD *)(v0 + 5064) = *(_OWORD *)(v0 + 6928);
  *(_OWORD *)(v0 + 5080) = v18;
  *(_QWORD *)(v0 + 5096) = v16;
  *(_BYTE *)(v0 + 5104) = v15;
  *(_OWORD *)(v0 + 5112) = v14;
  *(_QWORD *)(v0 + 5128) = v13;
  *(_BYTE *)(v0 + 5136) = v12;
  *(_OWORD *)(v0 + 5144) = *(_OWORD *)(v0 + 6992);
  sub_10000EF6C(v0 + 5656, v0 + 5160, &qword_1002603B0);
  sub_10000EF6C(v0 + 6264, v0 + 5320, &qword_100260858);
  *(_OWORD *)(v0 + 5464) = v22;
  *(_QWORD *)(v0 + 5480) = v11;
  *(_QWORD *)(v0 + 5488) = v10;
  memcpy((void *)(v0 + 4632), (const void *)(v0 + 5064), 0x1B0uLL);
  v19 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 7088) = v19;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = v0 + 4632;
  swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_1002633C8, v19);
  return swift_asyncLet_get(v0 + 1296, v20, sub_1000F1258, v0 + 6800);
}

uint64_t sub_1000F1258()
{
  uint64_t v0;

  return swift_asyncLet_get(v0 + 656, v0 + 6696, sub_1000F1274, v0 + 2576);
}

uint64_t sub_1000F1274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 6696);
  *(_QWORD *)(v0 + 7096) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_asyncLet_get(v0 + 16, v2, sub_1000F12C0, v0 + 6512);
}

uint64_t sub_1000F12C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1936, a2, sub_1000F12D8, v2 + 6560);
}

uint64_t sub_1000F12D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_1000F12F0, v2 + 6608);
}

uint64_t sub_1000F12F0()
{
  uint64_t v0;

  return swift_task_switch(sub_1000F1304, *(_QWORD *)(v0 + 6880), 0);
}

uint64_t sub_1000F1304()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 7088);
  sub_100029F9C(v0 + 5064);
  swift_task_dealloc(v1);
  return swift_asyncLet_finish(v0 + 656, v0 + 6696, sub_1000F1370, v0 + 6656);
}

uint64_t sub_1000F1370()
{
  uint64_t v0;

  return swift_task_switch(sub_1000F1384, *(_QWORD *)(v0 + 6880), 0);
}

uint64_t sub_1000F1384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 1296, a2, sub_1000F139C, v2 + 6704);
}

uint64_t sub_1000F139C()
{
  uint64_t v0;

  return swift_task_switch(sub_1000F13B0, *(_QWORD *)(v0 + 6880), 0);
}

uint64_t sub_1000F13B0()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 7008));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1000F13F8, v0 + 6752);
}

uint64_t sub_1000F13F8()
{
  uint64_t v0;

  return swift_task_switch(sub_1000F140C, *(_QWORD *)(v0 + 6880), 0);
}

uint64_t sub_1000F140C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 7032);
  v2 = *(_QWORD *)(v0 + 7024);
  v3 = *(_QWORD *)(v0 + 7016);
  v4 = *(_QWORD *)(v0 + 6920);
  v5 = *(_QWORD *)(v0 + 6896);
  sub_10002B3D4(v0 + 2616);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 7096));
}

uint64_t sub_1000F1490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_1000F14A8, 0, 0);
}

uint64_t sub_1000F14A8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0[3] + 224);
  v0[4] = v1;
  if (v1)
    v2 = v1;
  else
    v2 = _swiftEmptyArrayStorage;
  v3 = dword_1002633EC;
  swift_bridgeObjectRetain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_1000F1520;
  return sub_100016A00((uint64_t)v2);
}

uint64_t sub_1000F1520()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  if (*(_QWORD *)(*v0 + 32))
    v1 = *(void **)(*v0 + 32);
  else
    v1 = &_swiftEmptyArrayStorage;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F1584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1002659B4);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10005F000;
  return sub_10003EB98(a3);
}

uint64_t sub_1000F15D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_10026555C);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1000F1640;
  return sub_10001445C(a3, a4);
}

uint64_t sub_1000F1640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000F169C, 0, 0);
}

uint64_t sub_1000F169C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F16B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1002659AC);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10005F000;
  return sub_10003E720(a3);
}

uint64_t sub_1000F1708()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch(sub_100006CDC, v0, 0);
}

uint64_t sub_1000F1720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000021, 0x80000001001FEB20, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 48) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 48, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F1958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 2984) = a6;
  *(_BYTE *)(v6 + 3084) = a5;
  *(_QWORD *)(v6 + 2976) = a4;
  *(_QWORD *)(v6 + 2968) = a3;
  *(_QWORD *)(v6 + 2960) = a2;
  v7 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v6 + 2992) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260538);
  *(_QWORD *)(v6 + 3000) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F19E8, 0, 0);
}

uint64_t sub_1000F19E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v0[376] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[370];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v0[369] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 369, v0 + 370, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager: start updateData. Counter: %ld", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_100262D8C);
  v0[377] = v7;
  *v7 = v0;
  v7[1] = sub_1000F1B30;
  return sub_100006C00(v0[375]);
}

uint64_t sub_1000F1B30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = *v0 + 448;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 3016));
  v4 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v1 + 3024) = v4;
  *v4 = v3;
  v4[1] = sub_1000F1BA4;
  return sub_10000AFC8(v2);
}

uint64_t sub_1000F1BA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2968);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3024));
  return swift_task_switch(sub_1000F1BFC, v1, 0);
}

uint64_t sub_1000F1BFC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;

  sub_10000EF6C(v0 + 448, v0 + 2176, &qword_1002603A8);
  if (sub_100049214(v0 + 2176) == 1
    || (memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL),
        sub_10000EF6C(v0 + 2144, v0 + 2704, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 2704)),
        sub_1000179AC(v0 + 448, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8), sub_10000EF6C(v0 + 2704, v0 + 2608, &qword_100260550), !*(_QWORD *)(v0 + 2616)))
  {
    v5 = 0;
  }
  else
  {
    v1 = *(_OWORD *)(v0 + 2608);
    v2 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2736) = v1;
    *(_OWORD *)(v0 + 2752) = v2;
    *(_OWORD *)(v0 + 2816) = v1;
    *(_OWORD *)(v0 + 2880) = v1;
    *(_QWORD *)(v0 + 2864) = 28494;
    *(_QWORD *)(v0 + 2872) = 0xE200000000000000;
    v3 = sub_1000394E4();
    v4 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 2864, &type metadata for String, &type metadata for String, v3, v3);
    sub_100017F44(v0 + 2816);
    v5 = v4 == 0;
    *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v0 + 2752);
    sub_100017F44(v0 + 2832);
  }
  *(_BYTE *)(v0 + 3085) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v0 + 3032) = v6;
  *v6 = v0;
  v6[1] = sub_1000F1D68;
  return sub_10000AFC8(v0 + 880);
}

uint64_t sub_1000F1D68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2968);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3032));
  return swift_task_switch(sub_1000F1DC0, v1, 0);
}

uint64_t sub_1000F1DC0()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  unint64_t v3;
  BOOL v4;
  _QWORD *v5;

  sub_10000EF6C(v0 + 880, v0 + 1312, &qword_1002603A8);
  if (sub_100049214(v0 + 1312) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 1312), 0x1B0uLL),
        sub_10000EF6C(v0 + 416, v0 + 2672, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 2672)),
        sub_1000179AC(v0 + 880, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8), sub_10000EF6C(v0 + 2672, v0 + 2640, &qword_100260550), !*(_QWORD *)(v0 + 2648)))
  {
    v4 = 0;
  }
  else
  {
    v1 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2784) = v1;
    v2 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2848) = v2;
    *(_OWORD *)(v0 + 2912) = v2;
    *(_QWORD *)(v0 + 2896) = 7562585;
    *(_QWORD *)(v0 + 2904) = 0xE300000000000000;
    v3 = sub_1000394E4();
    v4 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 2896, &type metadata for String, &type metadata for String, v3, v3) == 0;
    *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v0 + 2768);
    sub_100017F44(v0 + 2800);
    sub_100017F44(v0 + 2848);
  }
  *(_BYTE *)(v0 + 3086) = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_1002632DC);
  *(_QWORD *)(v0 + 3040) = v5;
  *v5 = v0;
  v5[1] = sub_1000F1F44;
  return sub_1000EFED0(*(_QWORD *)(v0 + 2976), *(_BYTE *)(v0 + 3084));
}

uint64_t sub_1000F1F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 3040);
  *(_QWORD *)(*v2 + 3048) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000F22E8;
  }
  else
  {
    *(_QWORD *)(v4 + 3056) = a1;
    v6 = sub_1000F1FB8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F1FB8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + 3064) = *(_QWORD *)(v1 + 3056);
  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v1 + 2960);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v1 + 2944) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2944, v1 + 2952, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager: finish updateData. Counter: %ld", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1002632E4);
  *(_QWORD *)(v1 + 3072) = v6;
  *v6 = v1;
  v6[1] = sub_1000F20D0;
  return sub_100010310(*(_QWORD *)(v1 + 3000), *(_BYTE *)(v1 + 3085), *(_BYTE *)(v1 + 3086));
}

uint64_t sub_1000F20D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3072));
  return swift_task_switch(sub_1000F2124, 0, 0);
}

uint64_t sub_1000F2124()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 3064));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 3064);
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67109120;
    *(_DWORD *)(v0 + 3080) = *(_QWORD *)(v4 + 16) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3080, v0 + 3084, v5 + 4, v5 + 8);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager updatedFriends isEmpty: %{BOOL}d ", v5, 8u);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 3064));
  }

  v6 = *(_QWORD *)(v0 + 3064);
  v7 = *(_QWORD *)(v0 + 3000);
  if (*(_QWORD *)(v6 + 16))
  {
    v8 = *(_QWORD *)(v0 + 2992);
    v9 = *(_QWORD *)(v0 + 2984);
    v10 = *(_QWORD *)(v0 + 2968);
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = (_QWORD *)swift_allocObject(&unk_100252710, 56, 7);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v10;
    v12[5] = v6;
    v12[6] = v9;
    swift_retain(v10);
    v13 = sub_10005582C(v8, (uint64_t)&unk_1002632F0, (uint64_t)v12);
    swift_release(v13);
    sub_1000087A0(v7, &qword_100260538);
  }
  else
  {
    sub_1000087A0(*(_QWORD *)(v0 + 3000), &qword_100260538);
    swift_bridgeObjectRelease(v6);
  }
  v14 = *(_QWORD *)(v0 + 2992);
  swift_task_dealloc(*(_QWORD *)(v0 + 3000));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F22E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 3048);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 3048);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v22 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 2936) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 2936, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 2928) = sub_10002BA84(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2928, v0 + 2936, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Process response error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 3048);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  v13 = *(_QWORD *)(v0 + 3048);
  v14 = sub_10003C798((uint64_t)_swiftEmptyArrayStorage);
  v15 = swift_errorRelease(v13);
  *(_QWORD *)(v0 + 3064) = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 2960);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)(v0 + 2944) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2944, v0 + 2952, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DataManager: finish updateData. Counter: %ld", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = (_QWORD *)swift_task_alloc(dword_1002632E4);
  *(_QWORD *)(v0 + 3072) = v20;
  *v20 = v0;
  v20[1] = sub_1000F20D0;
  return sub_100010310(*(_QWORD *)(v0 + 3000), *(_BYTE *)(v0 + 3085), *(_BYTE *)(v0 + 3086));
}

uint64_t sub_1000F257C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[273] = a5;
  v5[267] = a4;
  v6 = sub_100037A5C(&qword_1002632F8);
  v5[279] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[285] = v7;
  v5[291] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F25E4, 0, 0);
}

uint64_t sub_1000F25E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 2184);
  v3 = *(_QWORD *)(v0 + 2136);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 2336) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_100263308, v4);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 2344) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  swift_asyncLet_begin(v0 + 656, 0, (char *)&type metadata for () + 8, &unk_100263318, v5);
  if (qword_10025F948 != -1)
    swift_once(&qword_10025F948, sub_1000E01BC);
  v6 = *(_QWORD *)(v0 + 2328);
  v7 = *(_QWORD *)(v0 + 2280);
  v8 = *(_QWORD *)(v0 + 2232);
  v9 = sub_100037A9C(v8, (uint64_t)qword_100262D20);
  v10 = swift_beginAccess(v9, v0 + 1976, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v7 + 16))(v6, v9, v8, v10);
  ManagedDefault.wrappedValue.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v11 = *(_BYTE *)(v0 + 2364) & 1;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v12 = *(_QWORD *)(v0 + 2184);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain(v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 2184);
  if (!v17)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2184));

    if (v11)
      goto LABEL_7;
LABEL_9:
    v26 = v0 + 2000;
    v24 = sub_1000F2990;
    v25 = v1;
    return swift_asyncLet_get(v25, v20, v24, v26);
  }
  v19 = swift_slowAlloc(28, -1);
  *(_DWORD *)v19 = 141558531;
  *(_QWORD *)(v0 + 2088) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2088, v0 + 2096, v19 + 4, v19 + 12);
  *(_WORD *)(v19 + 12) = 1025;
  *(_DWORD *)(v0 + 2360) = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2360, v0 + 2364, v19 + 14, v19 + 18);
  *(_WORD *)(v19 + 18) = 2048;
  *(_QWORD *)(v0 + 2040) = *(_QWORD *)(v18 + 16);
  v1 = v0 + 16;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2040, v0 + 2048, v19 + 20, v19 + 28);
  swift_bridgeObjectRelease(v18);
  _os_log_impl((void *)&_mh_execute_header, v15, v16, "DataManager shouldUpdateFriends to clients:\n%{BOOL,private,mask.hash}d\nupdated friends count: %ld", (uint8_t *)v19, 0x1Cu);
  swift_slowDealloc(v19, -1, -1);

  if (!v11)
    goto LABEL_9;
LABEL_7:
  v21 = *(_QWORD *)(v0 + 2184);
  v22 = *(_QWORD *)(v0 + 2136);
  v23 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 2352) = v23;
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v21;
  swift_asyncLet_begin(v0 + 1296, 0, (char *)&type metadata for () + 8, &unk_100263328, v23);
  v24 = sub_1000F28FC;
  v25 = v1;
  v26 = v0 + 1936;
  return swift_asyncLet_get(v25, v20, v24, v26);
}

uint64_t sub_1000F28FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_1000F2910, v2 + 2288);
}

uint64_t sub_1000F2910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1296, a2, sub_1000F2924, v2 + 2192);
}

uint64_t sub_1000F2924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 1296, a2, sub_1000F2938, v2 + 2240);
}

uint64_t sub_1000F2938()
{
  return swift_task_switch(sub_1000F294C, 0, 0);
}

uint64_t sub_1000F294C()
{
  uint64_t v0;
  uint64_t v1;

  swift_task_dealloc(*(_QWORD *)(v0 + 2352));
  return swift_asyncLet_finish(v0 + 656, v1, sub_1000F29B8, v0 + 2096);
}

uint64_t sub_1000F2990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_1000F29A4, v2 + 2048);
}

uint64_t sub_1000F29A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1000F29B8, v2 + 2096);
}

uint64_t sub_1000F29B8()
{
  return swift_task_switch(sub_1000F29CC, 0, 0);
}

uint64_t sub_1000F29CC()
{
  uint64_t v0;
  uint64_t v1;

  swift_task_dealloc(*(_QWORD *)(v0 + 2344));
  return swift_asyncLet_finish(v0 + 16, v1, sub_1000F2A10, v0 + 2144);
}

uint64_t sub_1000F2A10()
{
  return swift_task_switch(sub_1000F2A24, 0, 0);
}

uint64_t sub_1000F2A24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2328);
  swift_task_dealloc(*(_QWORD *)(v0 + 2336));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F2A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100265534);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10005F000;
  return sub_10015B0B8(a3);
}

uint64_t sub_1000F2AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100263334);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10005D184;
  return sub_1000F2B08(a3);
}

uint64_t sub_1000F2B08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Handle(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260600);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HandleType(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v8);
  v2[17] = swift_task_alloc(v8);
  v9 = type metadata accessor for DataManager.State(0);
  v2[18] = v9;
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FriendshipAction(0);
  v2[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v12);
  v2[23] = swift_task_alloc(v12);
  v2[24] = swift_task_alloc(v12);
  v13 = type metadata accessor for Friend(0);
  v2[25] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[26] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v15);
  v2[28] = swift_task_alloc(v15);
  v2[29] = swift_task_alloc(v15);
  v2[30] = swift_task_alloc(v15);
  v2[31] = swift_task_alloc(v15);
  v2[32] = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263338) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v16);
  v2[34] = swift_task_alloc(v16);
  return swift_task_switch(sub_1000F2CC8, v1, 0);
}

void sub_1000F2CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, NSObject *);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(unint64_t, _QWORD);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  NSObject *log;
  uint64_t v177;
  os_log_t v178;
  NSObject *v179;
  uint64_t v180;
  os_log_type_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  int64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207[2];

  if (qword_10025F928 == -1)
    goto LABEL_2;
LABEL_65:
  swift_once(&qword_10025F928, sub_1000DF67C);
LABEL_2:
  v175 = v0 + 16;
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 64);
    v7 = swift_slowAlloc(32, -1);
    v203 = swift_slowAlloc(64, -1);
    v207[0] = v203;
    *(_DWORD *)v7 = 136446723;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000018, 0x80000001001FEA70, v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2160;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2081;
    sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v8 = swift_bridgeObjectRetain(v6);
    v9 = Dictionary.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v9, v11, v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v203, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v203, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 64);

    swift_bridgeObjectRelease_n(v12, 2);
  }
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 168);
  v187 = *(_QWORD *)(v0 + 120);
  v172 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 64);
  v184 = v15 + 64;
  v16 = -1;
  v17 = -1 << *(_BYTE *)(v15 + 32);
  if (-v17 < 64)
    v16 = ~(-1 << -(char)v17);
  v18 = v16 & *(_QWORD *)(v15 + 64);
  v186 = (uint64_t *)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  v198 = enum case for FriendshipAction.add(_:);
  v191 = enum case for FriendshipAction.remove(_:);
  v185 = enum case for HandleType.follower(_:);
  v174 = enum case for HandleType.following(_:);
  v173 = enum case for HandleType.futureFollower(_:);
  v171 = enum case for HandleType.futureFollowing(_:);
  v170 = enum case for HandleType.pendingOffer(_:);
  v190 = (unint64_t)(63 - v17) >> 6;
  v192 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v15);
  v201 = 0;
  v19 = v18;
  v194 = v13;
  v196 = v14;
  if (v18)
  {
LABEL_8:
    v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v21 = v20 | (v201 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v0 + 264);
    v23 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v13 + 16))(v22, *(_QWORD *)(v192 + 48) + *(_QWORD *)(v13 + 72) * v21, *(_QWORD *)(v0 + 200));
    v24 = *(_QWORD *)(v192 + 56) + *(_QWORD *)(v14 + 72) * v21;
    v25 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16))(v22 + *(int *)(v25 + 48), v24, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 0, 1, v25);
    goto LABEL_28;
  }
  while (1)
  {
    v26 = v201 + 1;
    if (__OFADD__(v201, 1))
    {
      __break(1u);
      goto LABEL_65;
    }
    if (v26 < v190)
    {
      v27 = *(_QWORD *)(v184 + 8 * v26);
      if (v27)
        goto LABEL_13;
      v28 = v201 + 2;
      ++v201;
      if (v26 + 1 < v190)
      {
        v27 = *(_QWORD *)(v184 + 8 * v28);
        if (v27)
          goto LABEL_16;
        v201 = v26 + 1;
        if (v26 + 2 < v190)
        {
          v27 = *(_QWORD *)(v184 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_13;
          }
          v28 = v26 + 3;
          v201 = v26 + 2;
          if (v26 + 3 < v190)
            break;
        }
      }
    }
LABEL_27:
    v29 = *(_QWORD *)(v0 + 264);
    v30 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    v19 = 0;
LABEL_28:
    v31 = *(_QWORD *)(v0 + 272);
    sub_10000EF6C(*(_QWORD *)(v0 + 264), v31, &qword_100263338);
    v32 = sub_100037A5C(&qword_100263340);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32);
    v34 = *(_QWORD *)(v0 + 272);
    if (v33 == 1)
    {
      v163 = *(_QWORD *)(v0 + 256);
      v162 = *(_QWORD *)(v0 + 264);
      v165 = *(_QWORD *)(v0 + 240);
      v164 = *(_QWORD *)(v0 + 248);
      v166 = *(_QWORD *)(v0 + 224);
      v167 = *(_QWORD *)(v0 + 232);
      v168 = *(_QWORD *)(v0 + 216);
      v169 = *(_QWORD *)(v0 + 192);
      v193 = *(_QWORD *)(v0 + 184);
      v195 = *(_QWORD *)(v0 + 176);
      v197 = *(_QWORD *)(v0 + 152);
      v199 = *(_QWORD *)(v0 + 136);
      v200 = *(_QWORD *)(v0 + 128);
      v202 = *(_QWORD *)(v0 + 104);
      v206 = *(_QWORD *)(v0 + 96);
      swift_release(*(_QWORD *)(v0 + 64));
      swift_task_dealloc(v34);
      swift_task_dealloc(v162);
      swift_task_dealloc(v163);
      swift_task_dealloc(v164);
      swift_task_dealloc(v165);
      swift_task_dealloc(v167);
      swift_task_dealloc(v166);
      swift_task_dealloc(v168);
      swift_task_dealloc(v169);
      swift_task_dealloc(v193);
      swift_task_dealloc(v195);
      swift_task_dealloc(v197);
      swift_task_dealloc(v199);
      swift_task_dealloc(v200);
      swift_task_dealloc(v202);
      swift_task_dealloc(v206);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v35 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 160);
    v38 = v34 + *(int *)(v32 + 48);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 32))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 200));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v35, v38, v37);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v39(v36, v35, v37);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v36, v37);
    v41 = *(_QWORD *)(v0 + 200);
    if (v40 == v198)
    {
      v204 = v19;
      v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
      v43 = v42(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), v41);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      v46 = os_log_type_enabled(v44, v45);
      v47 = *(_QWORD *)(v0 + 248);
      v48 = *(_QWORD *)(v0 + 200);
      if (v46)
      {
        v49 = swift_slowAlloc(22, -1);
        v50 = swift_slowAlloc(32, -1);
        v207[0] = v50;
        *(_DWORD *)v49 = 141558275;
        *(_QWORD *)(v49 + 4) = 1752392040;
        *(_WORD *)(v49 + 12) = 2081;
        v51 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v48, v51);
        v54 = v53;
        *(_QWORD *)(v49 + 14) = sub_10002BA84(v52, v53, v207);
        swift_bridgeObjectRelease(v54);
        v55 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v55(v47, v48);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Added a friend: %{private,mask.hash}s", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);
      }
      else
      {
        v55 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v55(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 200));
      }

      v72 = *(_QWORD *)(v0 + 256);
      v74 = *(_QWORD *)(v0 + 192);
      v73 = *(_QWORD *)(v0 + 200);
      v76 = *(_QWORD *)(v0 + 152);
      v75 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 144);
      v42(v76, v72, v73);
      swift_storeEnumTagMultiPayload(v76, v77, 1);
      sub_10000A37C(v76);
      sub_100024990(v76, type metadata accessor for DataManager.State);
      v14 = v196;
      (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v74, v75);
      v55(v72, v73);
LABEL_61:
      v13 = v194;
      v19 = v204;
      if (v204)
        goto LABEL_8;
    }
    else
    {
      v56 = *(_QWORD *)(v0 + 256);
      if (v40 == v191)
      {
        v204 = v19;
        v57 = v13;
        v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
        v59 = v58(*(_QWORD *)(v0 + 240), v56, v41);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.default.getter(v60);
        v62 = os_log_type_enabled(v60, v61);
        v63 = *(_QWORD *)(v0 + 240);
        v64 = *(_QWORD *)(v0 + 200);
        if (v62)
        {
          v65 = swift_slowAlloc(22, -1);
          v66 = swift_slowAlloc(32, -1);
          v207[0] = v66;
          *(_DWORD *)v65 = 141558275;
          *(_QWORD *)(v65 + 4) = 1752392040;
          *(_WORD *)(v65 + 12) = 2081;
          v67 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
          v68 = dispatch thunk of CustomStringConvertible.description.getter(v64, v67);
          v70 = v69;
          *(_QWORD *)(v65 + 14) = sub_10002BA84(v68, v69, v207);
          swift_bridgeObjectRelease(v70);
          v71 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
          v71(v63, v64);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Removed a friend: %{private,mask.hash}s", (uint8_t *)v65, 0x16u);
          swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v65, -1, -1);
        }
        else
        {
          v71 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
          v71(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 200));
        }

        v105 = v186;
        v106 = *(_QWORD *)(v0 + 136);
        v107 = *(_QWORD *)(v0 + 112);
        Friend.type.getter(v108);
        v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v187 + 88))(v106, v107);
        if (v109 != v185)
        {
          if (v109 == v174)
          {
            v110 = v58(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 200));
            v111 = Logger.logObject.getter(v110);
            v112 = static os_log_type_t.default.getter(v111);
            v113 = os_log_type_enabled(v111, v112);
            v114 = *(_QWORD *)(v0 + 232);
            v115 = *(_QWORD *)(v0 + 200);
            if (v113)
            {
              v116 = swift_slowAlloc(22, -1);
              v117 = swift_slowAlloc(32, -1);
              v207[0] = v117;
              *(_DWORD *)v116 = 141558275;
              *(_QWORD *)(v116 + 4) = 1752392040;
              *(_WORD *)(v116 + 12) = 2081;
              v118 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
              v119 = dispatch thunk of CustomStringConvertible.description.getter(v115, v118);
              v121 = v120;
              *(_QWORD *)(v116 + 14) = sub_10002BA84(v119, v120, v207);
              swift_bridgeObjectRelease(v121);
              v71(v114, v115);
              _os_log_impl((void *)&_mh_execute_header, v111, v112, "Clear legacy location for removed following: %{private,mask.hash}s if any", (uint8_t *)v116, 0x16u);
              swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
              v122 = v117;
              v105 = v186;
              swift_slowDealloc(v122, -1, -1);
              swift_slowDealloc(v116, -1, -1);
            }
            else
            {
              v71(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
            }

            v139 = *(_QWORD *)(v0 + 96);
            Friend.handle.getter(v140);
            swift_beginAccess(v105, v175, 33, 0);
            v141 = *v105;
            swift_bridgeObjectRetain(*v105);
            v142 = sub_10001CBC8(v139);
            v144 = v143;
            swift_bridgeObjectRelease(v141);
            if ((v144 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v105);
              v146 = *v105;
              v207[0] = *v105;
              *v105 = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for Location, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263350);
                v146 = v207[0];
              }
              v147 = *(_QWORD *)(v0 + 104);
              v148 = *(void (**)(unint64_t, _QWORD))(v172 + 8);
              v148(*(_QWORD *)(v146 + 48) + *(_QWORD *)(v172 + 72) * v142, *(_QWORD *)(v0 + 80));
              v149 = *(_QWORD *)(v146 + 56);
              v150 = type metadata accessor for Location(0);
              v151 = *(_QWORD *)(v150 - 8);
              (*(void (**)(uint64_t, unint64_t, uint64_t))(v151 + 32))(v147, v149 + *(_QWORD *)(v151 + 72) * v142, v150);
              sub_1000F56A0(v142, v146, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, &qword_1002605F8, (uint64_t)&protocol conformance descriptor for Handle, (uint64_t (*)(_QWORD))&type metadata accessor for Location);
              v152 = *v186;
              *v186 = v146;
              swift_bridgeObjectRelease(v152);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v151 + 56))(v147, 0, 1, v150);
            }
            else
            {
              v153 = *(_QWORD *)(v0 + 104);
              v154 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v153, 1, 1, v154);
              v148 = *(void (**)(unint64_t, _QWORD))(v172 + 8);
            }
            v155 = *(_QWORD *)(v0 + 104);
            v148(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
            sub_1000087A0(v155, &qword_100260600);
            swift_endAccess(v175);
          }
          else if (v109 != v173 && v109 != v171 && v109 != v170)
          {
            v125 = v58(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 200));
            v126 = Logger.logObject.getter(v125);
            v127 = static os_log_type_t.error.getter(v126);
            v128 = os_log_type_enabled(v126, v127);
            v129 = *(_QWORD *)(v0 + 224);
            if (v128)
            {
              v130 = *(_QWORD *)(v0 + 128);
              v131 = *(_QWORD *)(v0 + 112);
              v183 = *(_QWORD *)(v0 + 200);
              v132 = swift_slowAlloc(22, -1);
              v189 = swift_slowAlloc(64, -1);
              v207[0] = v189;
              *(_DWORD *)v132 = 136446466;
              v133 = sub_10002BA84(0xD000000000000018, 0x80000001001FEA70, v207);
              *(_QWORD *)(v132 + 4) = v133;
              *(_WORD *)(v132 + 12) = 2080;
              v181 = v127;
              Friend.type.getter(v133);
              v134 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
              v135 = dispatch thunk of CustomStringConvertible.description.getter(v131, v134);
              v137 = v136;
              v179 = v126;
              v138 = *(void (**)(uint64_t, uint64_t))(v187 + 8);
              v138(v130, v131);
              *(_QWORD *)(v132 + 14) = sub_10002BA84(v135, v137, v207);
              swift_bridgeObjectRelease(v137);
              v71(v129, v183);
              _os_log_impl((void *)&_mh_execute_header, v179, v181, "%{public}s Unknown friend.type %s!", (uint8_t *)v132, 0x16u);
              swift_arrayDestroy(v189, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v189, -1, -1);
              swift_slowDealloc(v132, -1, -1);

              v138(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
            }
            else
            {
              v71(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));

              (*(void (**)(_QWORD, _QWORD))(v187 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
            }
          }
        }
        v156 = *(_QWORD *)(v0 + 256);
        v158 = *(_QWORD *)(v0 + 192);
        v157 = *(_QWORD *)(v0 + 200);
        v160 = *(_QWORD *)(v0 + 152);
        v159 = *(_QWORD *)(v0 + 160);
        v161 = *(_QWORD *)(v0 + 144);
        v58(v160, v156, v157);
        swift_storeEnumTagMultiPayload(v160, v161, 2);
        sub_10000A37C(v160);
        sub_100024990(v160, type metadata accessor for DataManager.State);
        v14 = v196;
        (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v158, v159);
        v71(v156, v157);
        goto LABEL_61;
      }
      v78 = *(_QWORD *)(v0 + 216);
      v39(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 160));
      v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v78, v56, v41);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.info.getter();
      v82 = os_log_type_enabled(v80, v81);
      v83 = *(_QWORD *)(v0 + 256);
      v84 = *(_QWORD *)(v0 + 216);
      v85 = *(_QWORD *)(v0 + 200);
      v188 = *(_QWORD *)(v0 + 192);
      v86 = *(_QWORD *)(v0 + 176);
      v87 = *(NSObject **)(v0 + 160);
      if (v82)
      {
        v177 = *(_QWORD *)(v0 + 128);
        v88 = *(NSObject **)(v0 + 160);
        v89 = *(_QWORD *)(v0 + 112);
        v182 = *(_QWORD *)(v0 + 256);
        v90 = swift_slowAlloc(32, -1);
        v180 = swift_slowAlloc(96, -1);
        v207[0] = v180;
        *(_DWORD *)v90 = 136446722;
        *(_QWORD *)(v90 + 4) = sub_10002BA84(0xD000000000000018, 0x80000001001FEA70, v207);
        *(_WORD *)(v90 + 12) = 2082;
        v91 = sub_100004EA8(&qword_100263348, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
        v178 = v88;
        v92 = dispatch thunk of CustomStringConvertible.description.getter(v88, v91);
        v205 = v19;
        v94 = v93;
        *(_QWORD *)(v90 + 14) = sub_10002BA84(v92, v93, v207);
        swift_bridgeObjectRelease(v94);
        log = v80;
        v95 = v85;
        v96 = *(uint64_t (**)(uint64_t, NSObject *))(v196 + 8);
        v97 = v96(v86, v88);
        *(_WORD *)(v90 + 22) = 2082;
        Friend.type.getter(v97);
        v98 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
        v99 = dispatch thunk of CustomStringConvertible.description.getter(v89, v98);
        v101 = v100;
        v13 = v194;
        (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v177, v89);
        *(_QWORD *)(v90 + 24) = sub_10002BA84(v99, v101, v207);
        v102 = v101;
        v19 = v205;
        swift_bridgeObjectRelease(v102);
        v103 = *(void (**)(uint64_t, uint64_t))(v194 + 8);
        v104 = v84;
        v14 = v196;
        v103(v104, v95);
        _os_log_impl((void *)&_mh_execute_header, log, v81, "%{public}s ignoring %{public}s %{public}s", (uint8_t *)v90, 0x20u);
        swift_arrayDestroy(v180, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v180, -1, -1);
        swift_slowDealloc(v90, -1, -1);

        v96(v188, v178);
        v103(v182, v95);
      }
      else
      {

        v123 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v123(v84, v85);
        v14 = v196;
        v124 = v85;
        v96 = *(uint64_t (**)(uint64_t, NSObject *))(v196 + 8);
        v96(v86, v87);
        v96(v188, v87);
        v123(v83, v124);
      }
      v96(*(_QWORD *)(v0 + 184), *(NSObject **)(v0 + 160));
      if (v19)
        goto LABEL_8;
    }
  }
  v27 = *(_QWORD *)(v184 + 8 * v28);
  if (v27)
  {
LABEL_16:
    v26 = v28;
LABEL_13:
    v19 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v26 << 6);
    v201 = v26;
    goto LABEL_9;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v190)
    {
      v201 = v190 - 1;
      goto LABEL_27;
    }
    v27 = *(_QWORD *)(v184 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1000F3EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10026552C);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10005F000;
  return sub_10015CA54(a3);
}

unint64_t sub_1000F3F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000F4144(a1, v3);
}

unint64_t sub_1000F3F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CC60(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100261E80, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1000F3FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000F41E0(a1, v4);
}

unint64_t sub_1000F4014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for GroupID(0);
  v6 = sub_100004EA8(&qword_100263458, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CC60(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, &qword_100263460, (uint64_t)&protocol conformance descriptor for GroupID);
}

unint64_t sub_1000F40AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Friend(0);
  v6 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CC60(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_100263380, (uint64_t)&protocol conformance descriptor for Friend);
}

unint64_t sub_1000F4144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000F41E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10001AE70(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10001AEBC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000F42A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10001CBC8(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for Location, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263350);
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for Handle(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for Location(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(_QWORD *)(v15 + 72) * v7, v14);
    sub_1000F56A0(v7, v10, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, &qword_1002605F8, (uint64_t)&protocol conformance descriptor for Handle, (uint64_t (*)(_QWORD))&type metadata accessor for Location);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for Location(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_1000F4428(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10001CBC8(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F6918();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for Handle(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_1000F4D8C(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000F4500(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_1000F3F4C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F6B48();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v5);
  sub_1000F502C(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_1000F45FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10002FF38(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F6DF4();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1000DC028((__int128 *)(*(_QWORD *)(v12 + 56) + 48 * v9), (_OWORD *)a3);
    sub_1000F54AC(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 40) = -1;
  }
  return result;
}

uint64_t sub_1000F46EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1000F40AC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for FriendshipAction, (uint64_t (*)(_QWORD))&type metadata accessor for Friend, &qword_100263378);
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for Friend(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for FriendshipAction(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(_QWORD *)(v15 + 72) * v7, v14);
    sub_1000F56A0(v7, v10, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend, (uint64_t (*)(_QWORD))&type metadata accessor for FriendshipAction);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for FriendshipAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

double sub_1000F4870@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(_BYTE *, uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_1000F3F4C(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v19 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F7A20(a3, a2);
      v14 = v19;
    }
    v15 = *(_QWORD *)(v14 + 48);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11, v16);
    a2((_BYTE *)(*(_QWORD *)(v14 + 56) + 40 * v11), a4);
    sub_1000F596C(v11, v14);
    v17 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000F4990@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_1000F3F4C(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v23 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F7C7C(a2, a3);
      v14 = v23;
    }
    v15 = *(_QWORD *)(v14 + 48);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11, v16);
    v17 = *(_QWORD *)(v14 + 56);
    v18 = sub_100037A5C(a2);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a4, v17 + *(_QWORD *)(v19 + 72) * v11, v18);
    sub_1000F5C18(v11, v14, a2);
    v20 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a4, 0, 1, v18);
  }
  else
  {
    v22 = sub_100037A5C(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
}

unint64_t sub_1000F4AE0(int64_t a1, uint64_t a2)
{
  uint64_t Priority;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  Priority = type metadata accessor for LocatePriority(0);
  v39 = *(_QWORD *)(Priority - 8);
  result = __chkstk_darwin(Priority);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, Priority);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100004EA8(&qword_1002625C0, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, Priority, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, Priority);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, Priority);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 24 * a1;
            v28 = (__int128 *)(v26 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 24))
            {
              v29 = *v28;
              *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v27 = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F4D8C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for Handle(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F502C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 24 * a1;
            v28 = (__int128 *)(v26 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 24))
            {
              v29 = *v28;
              *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v27 = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F52D8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F54AC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v29, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (__int128 *)(v19 + 48 * v3);
          v21 = (__int128 *)(v19 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v20 >= v21 + 3 || (v22 = v3 == v6, v3 = v6, !v22))
          {
            v9 = *v21;
            v10 = v21[2];
            v20[1] = v21[1];
            v20[2] = v10;
            *v20 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F56A0(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  void (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a6;
  v50 = a4;
  v51 = a5;
  v49 = a3;
  v8 = a3(0);
  v52 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v48 = (result + 1) & v15;
      v16 = *(_QWORD *)(v52 + 72);
      v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v17 = v15;
      do
      {
        v18 = v12;
        v19 = v16;
        v20 = v16 * v14;
        v47(v11, *(_QWORD *)(a2 + 48) + v16 * v14, v8);
        v21 = v17;
        v22 = *(_QWORD *)(a2 + 40);
        v23 = sub_100004EA8(v50, v49, v51);
        v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        v25 = v24 & v21;
        v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            v28 = *(_QWORD *)(a2 + 48);
            v29 = v28 + v19 * a1;
            v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v8);
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29);
            }
            v31 = *(_QWORD *)(a2 + 56);
            v32 = v46(0);
            v33 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
            v34 = v33 * a1;
            result = v31 + v33 * a1;
            v35 = v33 * v14;
            v36 = v31 + v33 * v14;
            v37 = v36 + v33;
            v38 = v34 < v35 || result >= v37;
            v12 = v18;
            if (v38)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v36, 1, v32);
              a1 = v14;
              v17 = v21;
            }
            else
            {
              a1 = v14;
              v17 = v21;
              if (v34 != v35)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        v12 = v18;
LABEL_5:
        v14 = (v14 + 1) & v17;
        v16 = v19;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v40 = *v39;
    v41 = (-1 << a1) - 1;
  }
  else
  {
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v41 = *v39;
    v40 = (-1 << a1) - 1;
  }
  *v39 = v41 & v40;
  v42 = *(_QWORD *)(a2 + 16);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F596C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v39 = (result + 1) & v11;
      v12 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v38(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              v29 = *v28;
              v30 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F5C18(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;

  v39 = a3;
  v5 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v42 = a2 + 64;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    v12 = v42;
    if ((*(_QWORD *)(v42 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (result + 1) & v11;
      v14 = *(_QWORD *)(v41 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        v15 = v14 * v10;
        v40(v8, *(_QWORD *)(a2 + 48) + v14 * v10, v5);
        v16 = *(_QWORD *)(a2 + 40);
        v17 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v5, v17);
        result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v8, v5);
        v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v19 < v13 || a1 < (uint64_t)v19)
            goto LABEL_6;
        }
        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        v22 = *(_QWORD *)(a2 + 48);
        v23 = v22 + v14 * a1;
        v24 = v22 + v15;
        if (v14 * a1 < v15 || v23 >= v24 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v5);
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront(v23);
        }
        v25 = *(_QWORD *)(a2 + 56);
        v26 = sub_100037A5C(v39);
        v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72);
        v28 = v27 * a1;
        result = v25 + v27 * a1;
        v29 = v27 * v10;
        v30 = v25 + v27 * v10;
        v31 = v30 + v27;
        if (v28 < v29 || result >= v31)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v30, 1, v26);
        }
        else
        {
          a1 = v10;
          if (v28 == v29)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        v12 = v42;
      }
      while (((*(_QWORD *)(v42 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v33 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  *v33 = v35 & v34;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_1000F5EBC()
{
  return sub_1000F7A20(&qword_100263648, (uint64_t (*)(_BYTE *, uint64_t))sub_10001A4CC);
}

void sub_1000F5ED0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100037A5C(&qword_100263400);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000F6088()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100037A5C(&qword_100263468);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000F6234()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100037A5C(&qword_1002633E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

char *sub_1000F63E0()
{
  return sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for Location, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263350);
}

void sub_1000F63FC()
{
  sub_1000F6440((uint64_t (*)(_QWORD))&type metadata accessor for IDSStatus, &qword_100263450);
}

char *sub_1000F6410()
{
  return sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for FriendshipRequestStatus, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263428);
}

void sub_1000F642C()
{
  sub_1000F6440((uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263430);
}

void sub_1000F6440(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - v5;
  sub_100037A5C(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)(*v2);
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    swift_release(v7);
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return;
  }
  v10 = v8;
  v11 = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)v11 >= v7 + 64 + 8 * v12)
  {
    memmove(v11, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    swift_bridgeObjectRetain(v23);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    swift_release(v7);
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

char *sub_1000F669C()
{
  return sub_1000F7C7C(&qword_100261570, &qword_1002634A8);
}

char *sub_1000F66B0()
{
  return sub_1000F7C7C(&qword_100261D28, &qword_1002634B0);
}

void sub_1000F66C4()
{
  uint64_t *v0;
  uint64_t Priority;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  __int128 v32;

  Priority = type metadata accessor for LocatePriority(0);
  v2 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(&qword_100263470);
  v29 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v29 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v30 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v31)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v31)
        goto LABEL_26;
      v26 = *(_QWORD *)(v30 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, Priority);
    v18 = 24 * v16;
    v19 = *(_QWORD *)(v5 + 56) + 24 * v16;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v7 + 48) + v17;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    v32 = *(_OWORD *)(v19 + 8);
    v22(v21, v4, Priority);
    v23 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v23 = v20;
    v24 = v32;
    *(_OWORD *)(v23 + 8) = v32;
    swift_retain(v24);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v31)
    goto LABEL_26;
  v26 = *(_QWORD *)(v30 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v31)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000F6918()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(&qword_100263478);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000F6B48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  const void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;

  v40 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(&qword_100263638);
  v35 = v0;
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = *(_QWORD *)(v2 + 16);
  v42 = v3;
  if (!v4)
  {
    swift_release(v2);
    v33 = v42;
    v32 = v35;
LABEL_28:
    *v32 = v33;
    return;
  }
  v5 = v3;
  v6 = (void *)(v3 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  v37 = (const void *)(v2 + 64);
  if (v5 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v7)
  {
    memmove(v6, v37, 8 * v7);
    v5 = v42;
  }
  v9 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v41 = v2;
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v38;
  v14 = v39;
  v15 = v40;
  v16 = v42;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v43 = v9;
      v18 = v17 | (v9 << 6);
      v19 = v41;
      goto LABEL_12;
    }
    v28 = v9 + 1;
    v19 = v41;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *((_QWORD *)v37 + v28);
    v30 = v9 + 1;
    if (!v29)
    {
      v30 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *((_QWORD *)v37 + v30);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v43 = v30;
    v18 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v13 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v14, *(_QWORD *)(v19 + 48) + v20, v15);
    v21 = *(_QWORD *)(v19 + 56);
    v22 = 24 * v18;
    v23 = (uint64_t *)(v21 + 24 * v18);
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(_QWORD *)(v16 + 48) + v20, v14, v15);
    v27 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v22);
    *v27 = v24;
    v27[1] = v25;
    v27[2] = v26;
    swift_retain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v24);
    v9 = v43;
  }
  v31 = v28 + 2;
  if (v31 >= v36)
  {
LABEL_26:
    swift_release(v41);
    v32 = v35;
    v33 = v42;
    goto LABEL_28;
  }
  v29 = *((_QWORD *)v37 + v31);
  if (v29)
  {
    v30 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v36)
      goto LABEL_26;
    v29 = *((_QWORD *)v37 + v30);
    ++v31;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000F6DE8()
{
  sub_1000F7860(&qword_100263640);
}

void sub_1000F6DF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[3];

  v1 = v0;
  sub_100037A5C(&qword_100263408);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_1000DBFF4(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000DC028(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000F6FDC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[3];

  v1 = v0;
  sub_100037A5C(&qword_100263418);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_1000DBF64(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000DBF98(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_1000F71C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100037A5C(&qword_100263630);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1000F7374()
{
  return sub_1000F7390((uint64_t (*)(_QWORD))&type metadata accessor for FriendshipAction, (uint64_t (*)(_QWORD))&type metadata accessor for Friend, &qword_100263378);
}

char *sub_1000F7390(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  char *v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;

  v46 = a1(0);
  v42 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v38 - v6;
  v44 = a2(0);
  v41 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - v7;
  sub_100037A5C(a3);
  v38 = v3;
  v8 = *v3;
  v9 = static _DictionaryStorage.copy(original:)(*v3);
  v10 = *(_QWORD *)(v8 + 16);
  v48 = v9;
  if (!v10)
  {
    result = (char *)swift_release(v8);
    v37 = v48;
    v36 = v38;
LABEL_25:
    *v36 = v37;
    return result;
  }
  v11 = v9;
  result = (char *)(v9 + 64);
  v13 = (char *)(v8 + 64);
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  v39 = v8 + 64;
  if (v11 != v8 || result >= &v13[8 * v14])
  {
    result = (char *)memmove(result, v13, 8 * v14);
    v11 = v48;
  }
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v16 = 1 << *(_BYTE *)(v8 + 32);
  v47 = v8;
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v8 + 64);
  v40 = (unint64_t)(v16 + 63) >> 6;
  v19 = v41;
  v20 = v42;
  v22 = v43;
  v21 = v44;
  v23 = v46;
  v24 = v48;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v49 = v15;
      v26 = v25 | (v15 << 6);
      v27 = v47;
      goto LABEL_9;
    }
    v32 = v15 + 1;
    v27 = v47;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v32 >= v40)
      goto LABEL_23;
    v33 = *(_QWORD *)(v39 + 8 * v32);
    v34 = v15 + 1;
    if (!v33)
    {
      v34 = v32 + 1;
      if (v32 + 1 >= v40)
        goto LABEL_23;
      v33 = *(_QWORD *)(v39 + 8 * v34);
      if (!v33)
        break;
    }
LABEL_22:
    v18 = (v33 - 1) & v33;
    v49 = v34;
    v26 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    v28 = *(_QWORD *)(v19 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v22, *(_QWORD *)(v27 + 48) + v28, v21);
    v29 = *(_QWORD *)(v20 + 72) * v26;
    v30 = *(_QWORD *)(v27 + 56) + v29;
    v31 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v45, v30, v23);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(_QWORD *)(v24 + 48) + v28, v22, v21);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(_QWORD *)(v24 + 56) + v29, v31, v23);
    v15 = v49;
  }
  v35 = v32 + 2;
  if (v35 >= v40)
  {
LABEL_23:
    result = (char *)swift_release(v47);
    v36 = v38;
    v37 = v48;
    goto LABEL_25;
  }
  v33 = *(_QWORD *)(v39 + 8 * v35);
  if (v33)
  {
    v34 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v40)
      goto LABEL_23;
    v33 = *(_QWORD *)(v39 + 8 * v34);
    ++v35;
    if (v33)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000F7670()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100037A5C(&qword_1002634D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10002BB54(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10001AEAC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000F7854()
{
  sub_1000F7860(&qword_1002633D8);
}

void sub_1000F7860(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100037A5C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

char *sub_1000F7A0C()
{
  return sub_1000F7C7C(&qword_1002634C0, &qword_1002634C8);
}

void *sub_1000F7A20(uint64_t *a1, uint64_t (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t);
  _BYTE v30[40];

  v29 = a2;
  v4 = v2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(a1);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_28:
    *v4 = v11;
    return result;
  }
  v27 = v4;
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v28 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v19)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v22, v5);
    v23 = 40 * v21;
    sub_100043ECC(*(_QWORD *)(v9 + 56) + v23, (uint64_t)v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v22, v8, v5);
    result = (void *)v29(v30, *(_QWORD *)(v11 + 56) + v23);
  }
  v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    result = (void *)swift_release(v9);
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_1000F7C68()
{
  return sub_1000F7C7C(&qword_100263488, &qword_100263490);
}

char *sub_1000F7C7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v44 = sub_100037A5C(a1);
  v40 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(a2);
  v36 = v2;
  v6 = *v2;
  v7 = static _DictionaryStorage.copy(original:)(*v2);
  v8 = *(_QWORD *)(v6 + 16);
  v46 = v7;
  if (!v8)
  {
    result = (char *)swift_release(v6);
    v35 = v46;
    v34 = v36;
LABEL_25:
    *v34 = v35;
    return result;
  }
  v9 = v7;
  result = (char *)(v7 + 64);
  v11 = (char *)(v6 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v37 = v6 + 64;
  if (v9 != v6 || result >= &v11[8 * v12])
  {
    result = (char *)memmove(result, v11, 8 * v12);
    v9 = v46;
  }
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v45 = v6;
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v14 + 63) >> 6;
  v17 = v39;
  v18 = v40;
  v20 = v41;
  v19 = v42;
  v21 = v44;
  v22 = v46;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v47 = v13;
      v24 = v23 | (v13 << 6);
      v25 = v45;
      goto LABEL_9;
    }
    v30 = v13 + 1;
    v25 = v45;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v30);
    v32 = v13 + 1;
    if (!v31)
    {
      v32 = v30 + 1;
      if (v30 + 1 >= v38)
        goto LABEL_23;
      v31 = *(_QWORD *)(v37 + 8 * v32);
      if (!v31)
        break;
    }
LABEL_22:
    v16 = (v31 - 1) & v31;
    v47 = v32;
    v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    v26 = *(_QWORD *)(v17 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v20, *(_QWORD *)(v25 + 48) + v26, v19);
    v27 = *(_QWORD *)(v18 + 72) * v24;
    v28 = *(_QWORD *)(v25 + 56) + v27;
    v29 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v43, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v22 + 48) + v26, v20, v19);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v22 + 56) + v27, v29, v21);
    v13 = v47;
  }
  v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    result = (char *)swift_release(v45);
    v34 = v36;
    v35 = v46;
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(v37 + 8 * v33);
  if (v31)
  {
    v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v32);
    ++v33;
    if (v31)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000F7F58(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for NITokenService_LocalMessaging();
  v16 = sub_100004EA8(&qword_100263498, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E40);
  *(_QWORD *)&v14 = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10001A4CC(&v14, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1000F802C(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for NITokenService_LocalMessaging();
  v32 = sub_100004EA8(&qword_100263498, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E40);
  *(_QWORD *)&v30 = a1;
  v12 = (_QWORD *)*a4;
  v14 = sub_1000F3F4C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = (_QWORD *)*a4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 40 * v14);
      sub_10002BB90(v21);
      return sub_10001A4CC(&v30, (uint64_t)v21);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000F7A20(&qword_1002634A0, (uint64_t (*)(_BYTE *, uint64_t))sub_10001A4CC);
    goto LABEL_7;
  }
  sub_100163458(v17, a3 & 1);
  v23 = sub_1000F3F4C(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = (_QWORD *)*a4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v25 = sub_100055804((uint64_t)&v30, v31);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  sub_1000F7F58(v14, (uint64_t)v11, *v27, v20);
  return sub_10002BB90(&v30);
}

uint64_t sub_1000F8238()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1000F8280;
  return daemon.getter();
}

uint64_t sub_1000F8280(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *v1;
  *(_QWORD *)(*v1 + 48) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 56) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_1000F8368;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000F8368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000F85D8;
  }
  else
  {
    swift_release(v3[6]);
    v5 = sub_1000F83DC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F83DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000013, 0x80000001001FED10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s reset all local DB", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1002606A4);
  *(_QWORD *)(v0 + 80) = v7;
  *v7 = v0;
  v7[1] = sub_1000F8574;
  return sub_10005653C();
}

uint64_t sub_1000F8574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F8824;
  else
    v3 = sub_10006A5A0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F85D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 72);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000013, 0x80000001001FED10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with error %{public}@", (uint8_t *)v6, 0x16u);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F8824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 88);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000013, 0x80000001001FED10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with error %{public}@", (uint8_t *)v6, 0x16u);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F8A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for DataManager.State(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - v4;
  sub_100025C70(a1, (uint64_t)&v8 - v4, v6);
  v7 = (char *)sub_1000F8B20 + 4 * byte_1001F5640[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1000F8B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;

  sub_1000087A0(v3, &qword_100260538);
  sub_100025C70(v2, v0, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v1);
  return ((uint64_t (*)(void))((char *)sub_1000F8BDC + 4 * byte_1001F5648[EnumCaseMultiPayload]))();
}

BOOL sub_1000F8BDC()
{
  uint64_t v0;
  unint64_t v1;

  sub_1000087A0(v0, &qword_100260538);
  return v1 < 2;
}

_QWORD *sub_1000F8C78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v5 = type metadata accessor for Device(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v36[1] = v2;
    v49 = _swiftEmptyArrayStorage;
    sub_100027D70(0, v8, 0);
    v9 = v49;
    v10 = a2[10];
    v39 = a2[11];
    v40 = v7;
    v11 = a2[2];
    v37 = v10;
    v38 = v11;
    v12 = a2[3];
    v13 = (uint64_t *)(a1 + 80);
    v44 = *a2;
    v45 = v12;
    v43 = a2[1];
    do
    {
      v14 = *((unsigned __int8 *)v13 - 48);
      v15 = *(v13 - 5);
      v16 = *(v13 - 4);
      v17 = *(v13 - 3);
      v18 = *(v13 - 2);
      v19 = *v13;
      v47 = *(v13 - 1);
      v48 = v17;
      v46 = v14;
      if (v39)
      {
        v20 = v38;
        if (v15 == v37 && v39 == v16)
          v22 = 1;
        else
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v37, v39, 0);
      }
      else
      {
        v22 = 0;
        v20 = v38;
      }
      v23 = v44;
      v24 = v43;
      if (v45)
      {
        if (v15 == v20 && v45 == v16)
        {
          v27 = 1;
          if (!v43)
          {
LABEL_25:
            v29 = 0;
            goto LABEL_27;
          }
        }
        else
        {
          v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v20, v45, 0);
          v24 = v43;
          v23 = v44;
          v27 = v26;
          if (!v43)
            goto LABEL_25;
        }
      }
      else
      {
        v27 = 0;
        if (!v43)
          goto LABEL_25;
      }
      if (v15 == v23 && v24 == v16)
        v29 = 1;
      else
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v23, v24, 0);
LABEL_27:
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v18);
      BYTE1(v35) = v46;
      LOBYTE(v35) = v29 & 1;
      v30 = v27 & 1;
      v31 = v40;
      Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)(v15, v16, v47, v19, v48, v18, v22 & 1, v30, v35);
      v49 = v9;
      v33 = v9[2];
      v32 = v9[3];
      if (v33 >= v32 >> 1)
      {
        sub_100027D70(v32 > 1, v33 + 1, 1);
        v9 = v49;
      }
      v9[2] = v33 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v33, v31, v42);
      v13 += 7;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_1000F8F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Response(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000F8F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for Response(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 & 0xFFFFFFFFFFFFF8) + v1;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_BYTE *)(v1 + v6);
  v12 = *(_QWORD *)(v7 + 8);
  v13 = (_QWORD *)swift_task_alloc(dword_1002632CC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000087DC;
  return sub_1000F1958(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_1000F902C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F9060(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002632EC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000087DC;
  return sub_1000F257C(a1, v4, v5, v6, v7);
}

uint64_t sub_1000F90E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100263304);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_100265534);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005F000;
  return sub_10015B0B8(v2);
}

uint64_t sub_1000F9158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100263314);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_100263334);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005D184;
  return sub_1000F2B08(v2);
}

uint64_t sub_1000F91D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100263324);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_10026552C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005F000;
  return sub_10015CA54(v2);
}

uint64_t sub_1000F9248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10026338C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10003BF7C;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000F14A8, 0, 0);
}

uint64_t sub_1000F92A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_10026339C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002659B4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005F000;
  return sub_10003EB98(v2);
}

uint64_t sub_1000F9320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc(dword_1002633AC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10003BF7C;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_10026555C);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1000F1640;
  return sub_10001445C(v4, v5);
}

uint64_t sub_1000F93B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1002633C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002659AC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005F000;
  return sub_10003E720(v2);
}

unint64_t sub_1000F9428()
{
  unint64_t result;

  result = qword_1002633F8;
  if (!qword_1002633F8)
  {
    result = swift_getWitnessTable(&unk_1001F5994, &type metadata for DataManager.Error);
    atomic_store(result, (unint64_t *)&qword_1002633F8);
  }
  return result;
}

#error "1000F9534: call analysis failed (funcsize=60)"

double sub_1000F955C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  double result;

  if (a7)
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    sub_10002BD68(a14, a15, a16, a17);
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a19);
    swift_bridgeObjectRetain(a20);
    swift_bridgeObjectRetain(a21);
    sub_10002B848(a23, a24, a25, a26, a27);
    swift_bridgeObjectRetain(a29);
    swift_bridgeObjectRetain(a28);
    sub_10002C108(a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50);
    swift_bridgeObjectRetain(a72);
    swift_bridgeObjectRetain(a69);
    swift_bridgeObjectRetain(a70);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a71).n128_u64[0];
  }
  return result;
}

void sub_1000F97D4(void *a1)
{
  bzero(a1, 0x240uLL);
}

unint64_t sub_1000F97DC()
{
  unint64_t result;

  result = qword_1002634F0;
  if (!qword_1002634F0)
  {
    result = swift_getWitnessTable(&unk_1001F8734, &type metadata for RefreshClientRequest);
    atomic_store(result, (unint64_t *)&qword_1002634F0);
  }
  return result;
}

uint64_t sub_1000F9820(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000E83A8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t sub_1000F9830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263518;
  if (!qword_100263518)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100263518);
  }
  return result;
}

uint64_t sub_1000F9870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_10026353C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_1000EBF68(v4, v5, v6);
}

uint64_t sub_1000F9900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_10026354C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  v7[5] = v5;
  v7[6] = v6;
  v7[4] = v4;
  return swift_task_switch(sub_1000EC1C8, v4, 0);
}

uint64_t sub_1000F999C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F99C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10026355C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1000ECAF0(a1, v4);
}

uint64_t sub_1000F9A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10026356C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  v7[5] = a2;
  v7[6] = v6;
  v7[4] = a1;
  return swift_task_switch(sub_1000ED5B0, 0, 0);
}

uint64_t sub_1000F9A98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10026359C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_1000ED818(a1, v4, v5, v6);
}

uint64_t sub_1000F9B10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F9B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_1002635AC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_1000EDFD4(a1, v4, v5, v6);
}

uint64_t sub_1000F9BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1002635BC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v3[3] = v2;
  return swift_task_switch(sub_1000EFD20, v2, 0);
}

uint64_t sub_1000F9C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1002635DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v3[2] = v2;
  return swift_task_switch(sub_1000EFBF8, 0, 0);
}

uint64_t sub_1000F9C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Account(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000F9CF0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F9D14(uint64_t a1)
{
  uint64_t v1;

  return sub_100078B6C(a1, v1);
}

uint64_t sub_1000F9D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100263510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F9D64()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1002635FC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100262DAC);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1000E1CB0();
}

uint64_t sub_1000F9DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100263614);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return sub_1000E0990(a1, a2, v6);
}

uint64_t sub_1000F9E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000F9E6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000F9EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F9EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F9F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F9F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F9FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9FBC);
}

uint64_t sub_1000F9FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000F9FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FA004);
}

uint64_t sub_1000FA004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1000FA044(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataManager.Error()
{
  return &type metadata for DataManager.Error;
}

ValueMetadata *type metadata accessor for FMFAPSMessage.CodingKeys()
{
  return &type metadata for FMFAPSMessage.CodingKeys;
}

unint64_t sub_1000FA0D0()
{
  unint64_t result;

  result = qword_1002636F8;
  if (!qword_1002636F8)
  {
    result = swift_getWitnessTable(&unk_1001F5AA8, &type metadata for FMFAPSMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002636F8);
  }
  return result;
}

unint64_t sub_1000FA118()
{
  unint64_t result;

  result = qword_100263700;
  if (!qword_100263700)
  {
    result = swift_getWitnessTable(&unk_1001F59E0, &type metadata for FMFAPSMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263700);
  }
  return result;
}

unint64_t sub_1000FA160()
{
  unint64_t result;

  result = qword_100263708;
  if (!qword_100263708)
  {
    result = swift_getWitnessTable(&unk_1001F5A08, &type metadata for FMFAPSMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263708);
  }
  return result;
}

uint64_t FriendInfoOption.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HandleType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FriendInfoOption.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FriendInfoOption(0) + 20);
  v4 = type metadata accessor for ClientOrigin(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double FriendInfoOption.expiresByGroupId.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for FriendInfoOption(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t FriendInfoOption.createAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FriendInfoOption(0);
  return sub_10000E37C(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&unk_100262930);
}

uint64_t FriendInfoOption.expiry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FriendInfoOption(0);
  return sub_10000E37C(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&unk_100262930);
}

uint64_t FriendInfoOption.serverID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t FriendInfoOption.ownerHandle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FriendInfoOption(0);
  return sub_10000E37C(v1 + *(int *)(v3 + 40), a1, &qword_1002650A0);
}

uint64_t FriendInfoOption.shallowOrLiveSecureLocationsCapable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 44));
}

uint64_t FriendInfoOption.secureLocationsCapable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 48));
}

uint64_t FriendInfoOption.fallbackToLegacy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 52));
}

uint64_t FriendInfoOption.fallbackToLegacyAllowed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FriendInfoOption(0) + 56));
}

uint64_t FriendInfoOption.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for HandleType(0);
  v3 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t sub_1000FA420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000FF908(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000FA444(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1000FA450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000362E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FA478(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000362E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FriendInfoOption.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100263718);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000362E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendInfoOption.CodingKeys, &type metadata for FriendInfoOption.CodingKeys, v11, v9, v10);
  LOBYTE(v37) = 0;
  v12 = type metadata accessor for HandleType(0);
  v13 = sub_100004EA8(&qword_100263728, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v37, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for FriendInfoOption(0);
    v15 = v3 + v14[5];
    LOBYTE(v37) = 1;
    v16 = type metadata accessor for ClientOrigin(0);
    v17 = sub_100004EA8(&qword_100263730, (uint64_t (*)(uint64_t))&type metadata accessor for ClientOrigin, (uint64_t)&protocol conformance descriptor for ClientOrigin);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v37, v5, v16, v17);
    v37 = *(_QWORD *)(v3 + v14[6]);
    v36 = 2;
    v18 = sub_100037A5C(&qword_100263738);
    v19 = sub_1000FA858();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, v18, v19);
    v20 = v3 + v14[7];
    LOBYTE(v37) = 3;
    v21 = type metadata accessor for Date(0);
    v22 = sub_100004EA8(&qword_100260BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v37, v5, v21, v22);
    v23 = v3 + v14[8];
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v37, v5, v21, v22);
    v24 = (uint64_t *)(v3 + v14[9]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v37) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v37, v5);
    v27 = v3 + v14[10];
    LOBYTE(v37) = 6;
    v28 = type metadata accessor for Handle(0);
    v29 = sub_100004EA8(&qword_100262478, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v37, v5, v28, v29);
    v30 = *(unsigned __int8 *)(v3 + v14[11]);
    LOBYTE(v37) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v37, v5);
    v31 = *(unsigned __int8 *)(v3 + v14[12]);
    LOBYTE(v37) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, &v37, v5);
    v32 = *(unsigned __int8 *)(v3 + v14[13]);
    LOBYTE(v37) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, &v37, v5);
    v33 = *(unsigned __int8 *)(v3 + v14[14]);
    LOBYTE(v37) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, &v37, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000FA858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263740;
  if (!qword_100263740)
  {
    v1 = sub_10003C1FC(&qword_100263738);
    sub_100004EA8(&qword_100263748, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
    sub_100004EA8(&qword_100260BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100263740);
  }
  return result;
}

Swift::Int FriendInfoOption.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for HandleType(0);
  v1 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000FA960(_QWORD *a1)
{
  return FriendInfoOption.encode(to:)(a1);
}

Swift::Int sub_1000FA974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for HandleType(0);
  v2 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000FA9DC()
{
  return sub_100004EA8(&qword_100263780, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
}

uint64_t assignWithCopy for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;

  v6 = type metadata accessor for HandleType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ClientOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = a3[8];
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = v19((void *)(a1 + v23), 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v24, v25, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    v28 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v24, v25, v17);
LABEL_13:
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = (void *)(a1 + v34);
  v36 = (void *)(a2 + v34);
  v37 = type metadata accessor for Handle(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 24))(v35, v36, v37);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_18;
  }
  if (v41)
  {
LABEL_18:
    v42 = sub_100037A5C(&qword_1002650A0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 16))(v35, v36, v37);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_19:
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for HandleType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ClientOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[8];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (v16((const void *)(a2 + v18), 1, v14))
  {
    v21 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v19, v20, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  v22 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = type metadata accessor for Handle(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_100037A5C(&qword_1002650A0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v28 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  return a1;
}

uint64_t assignWithTake for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for HandleType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ClientOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    v21 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_7:
  v22 = a3[8];
  v23 = (void *)(a1 + v22);
  v24 = (void *)(a2 + v22);
  v25 = v18((void *)(a1 + v22), 1, v16);
  v26 = v18(v24, 1, v16);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v23, v24, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v23, v16);
LABEL_12:
    v27 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v23, v24, v16);
LABEL_13:
  v28 = a3[9];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = (void *)(a1 + v34);
  v36 = (void *)(a2 + v34);
  v37 = type metadata accessor for Handle(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_18;
  }
  if (v41)
  {
LABEL_18:
    v42 = sub_100037A5C(&qword_1002650A0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_19:
  v43 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v43) = *(_BYTE *)(a2 + v43);
  v44 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  return a1;
}

uint64_t sub_1000FB2C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for HandleType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for ClientOrigin(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_12:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = sub_100037A5C((uint64_t *)&unk_100262930);
    v12 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v13 = a3[7];
    }
    else
    {
      v8 = sub_100037A5C(&qword_1002650A0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = a3[10];
    }
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000FB3BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for HandleType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for ClientOrigin(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v16 = sub_100037A5C((uint64_t *)&unk_100262930);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_100037A5C(&qword_1002650A0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000FB4B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v2 = type metadata accessor for HandleType(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ClientOrigin(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_100101280(319, (unint64_t *)&qword_1002629B8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        v12 = v11;
        v13 = &unk_1001F5C48;
        sub_100101280(319, (unint64_t *)&qword_100265110, (uint64_t (*)(uint64_t))&type metadata accessor for Handle);
        if (v9 <= 0x3F)
        {
          v14 = *(_QWORD *)(v8 - 8) + 64;
          v15 = &unk_1001F5C60;
          v16 = &unk_1001F5C60;
          v17 = &unk_1001F5C60;
          v18 = &unk_1001F5C60;
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for FriendInfoOption.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000FB600 + 4 * byte_1001F5B40[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000FB634 + 4 * byte_1001F5B3B[v4]))();
}

uint64_t sub_1000FB634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FB63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FB644);
  return result;
}

uint64_t sub_1000FB650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FB658);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000FB65C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FB664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendInfoOption.CodingKeys()
{
  return &type metadata for FriendInfoOption.CodingKeys;
}

unint64_t sub_1000FB684()
{
  unint64_t result;

  result = qword_100263840;
  if (!qword_100263840)
  {
    result = swift_getWitnessTable(&unk_1001F5D14, &type metadata for FriendInfoOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263840);
  }
  return result;
}

unint64_t sub_1000FB6CC()
{
  unint64_t result;

  result = qword_100263848;
  if (!qword_100263848)
  {
    result = swift_getWitnessTable(&unk_1001F5C84, &type metadata for FriendInfoOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263848);
  }
  return result;
}

unint64_t sub_1000FB714()
{
  unint64_t result;

  result = qword_100263850;
  if (!qword_100263850)
  {
    result = swift_getWitnessTable(&unk_1001F5CAC, &type metadata for FriendInfoOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263850);
  }
  return result;
}

_QWORD *sub_1000FB758@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000FB764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10010161C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FB7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10010161C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000FB80C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1000FB814@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000FB828@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000FB83C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000FB850(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000FB880@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000FB8AC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000FB8D0(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000FB8E4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1000FB8F8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000FB90C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000FB920(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000FB934(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000FB948(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000FB95C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000FB96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000FB984(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_1000FB998(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000FB9AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1000FF8D0(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000FB9E8@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int *v58;
  Swift::String *v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *p_countAndFlagsBits;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  double v163;
  double *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  Swift::String *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  _QWORD *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  Swift::String *v248;
  char *v249;
  char *v250;
  int v251;
  uint64_t v252;
  Swift::String *v253;
  uint64_t v254;
  uint64_t result;
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  int *v274;
  int *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  Swift::String *v287;
  uint64_t v288;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  v5 = __chkstk_darwin(v4);
  v280 = (char *)&v256 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v279 = (char *)&v256 - v7;
  v8 = type metadata accessor for ClientOrigin(0);
  v277 = *(_QWORD *)(v8 - 8);
  v278 = v8;
  __chkstk_darwin(v8);
  v283 = (char *)&v256 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandleType(0);
  v285 = *(_QWORD *)(v10 - 8);
  v286 = v10;
  v11 = __chkstk_darwin(v10);
  v281 = (char *)&v256 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v282 = (char *)&v256 - v14;
  __chkstk_darwin(v13);
  v273 = (char *)&v256 - v15;
  v16 = type metadata accessor for FriendInfoOption(0);
  v17 = *(_QWORD *)(v16 - 8);
  v275 = (int *)v16;
  v276 = v17;
  __chkstk_darwin(v16);
  v284 = (uint64_t)&v256 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100037A5C(&qword_1002650A0);
  v20 = __chkstk_darwin(v19);
  v274 = (int *)((char *)&v256 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __chkstk_darwin(v20);
  v272 = (char *)&v256 - v23;
  v24 = __chkstk_darwin(v22);
  v269 = (char *)&v256 - v25;
  v26 = __chkstk_darwin(v24);
  v268 = (char *)&v256 - v27;
  v28 = __chkstk_darwin(v26);
  v267 = (char *)&v256 - v29;
  v30 = __chkstk_darwin(v28);
  v266 = (char *)&v256 - v31;
  v32 = __chkstk_darwin(v30);
  v265 = (char *)&v256 - v33;
  v34 = __chkstk_darwin(v32);
  v264 = (char *)&v256 - v35;
  v36 = __chkstk_darwin(v34);
  v263 = (char *)&v256 - v37;
  v38 = __chkstk_darwin(v36);
  v262 = (char *)&v256 - v39;
  v40 = __chkstk_darwin(v38);
  v261 = (char *)&v256 - v41;
  v42 = __chkstk_darwin(v40);
  v260 = (char *)&v256 - v43;
  v44 = __chkstk_darwin(v42);
  v258 = (char *)&v256 - v45;
  __chkstk_darwin(v44);
  v257 = (char *)&v256 - v46;
  v47 = sub_100037A5C(&qword_100263870);
  v48 = __chkstk_darwin(v47);
  v259 = (char *)&v256 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v51 = (char *)&v256 - v50;
  v52 = type metadata accessor for Handle(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = __chkstk_darwin(v52);
  v271 = (char *)&v256 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v57 = (char *)&v256 - v56;
  v58 = (int *)type metadata accessor for FriendRecord(0);
  v59 = (Swift::String *)((char *)a2 + v58[16]);
  v287 = v59;
  v59->_countAndFlagsBits = 0;
  v59->_object = 0;
  v60 = (uint64_t)a2 + v58[36];
  v61 = *(uint64_t (**)(void))(v53 + 56);
  v256 = v53;
  v270 = v60;
  v62 = v61();
  v63 = Friend.handle.getter(v62);
  Handle.identifier.getter(v63);
  v65 = v64;
  v66 = *(void (**)(char *, uint64_t))(v53 + 8);
  v66(v57, v52);
  v67 = String.lowercased()();
  v68 = swift_bridgeObjectRelease(v65);
  *a2 = v67;
  v69 = Friend.handle.getter(v68);
  v70 = Handle.qualifiedIdentifier.getter(v69);
  v72 = v71;
  v73 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  a2[1]._countAndFlagsBits = v70;
  a2[1]._object = v72;
  v74 = Friend.handle.getter(v73);
  Handle.idsStatus.getter(v74);
  v66(v57, v52);
  v75 = sub_10000EF6C((uint64_t)v51, (uint64_t)a2 + v58[6], &qword_100263870);
  v76 = Friend.handle.getter(v75);
  v77 = Handle.dsid.getter(v76);
  v79 = v78;
  v80 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  v81 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[7]);
  *v81 = v77;
  v81[1] = v79;
  v82 = Friend.handle.getter(v80);
  v83 = Handle.trackingTimestamp.getter(v82);
  v84 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  *(double *)((char *)&a2->_countAndFlagsBits + v58[8]) = v83;
  v85 = Friend.handle.getter(v84);
  v86 = Handle.hashedDSID.getter(v85);
  v88 = v87;
  v89 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  v90 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[9]);
  *v90 = v86;
  v90[1] = v88;
  v91 = Friend.handle.getter(v89);
  v92 = Handle.favoriteOrder.getter(v91);
  v94 = v93;
  v95 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  v96 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[10]);
  *v96 = v92;
  v96[1] = v94;
  v97 = Friend.handle.getter(v95);
  LOBYTE(v92) = Handle.reachable.getter(v97);
  v98 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  *((_BYTE *)&a2->_countAndFlagsBits + v58[11]) = v92;
  v99 = Friend.handle.getter(v98);
  v100 = Handle.pushIdentifiers.getter(v99);
  v101 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  *(uint64_t *)((char *)&a2->_countAndFlagsBits + v58[12]) = v100;
  v102 = Friend.handle.getter(v101);
  v103 = Handle.prettyName.getter(v102);
  v105 = v104;
  v106 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  v107 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[13]);
  *v107 = v103;
  v107[1] = v105;
  v108 = Friend.handle.getter(v106);
  v109 = Handle.contactIdentifier.getter(v108);
  v111 = v110;
  v112 = ((uint64_t (*)(char *, uint64_t))v66)(v57, v52);
  v113 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[14]);
  *v113 = v109;
  v113[1] = v111;
  v114 = Friend.handle.getter(v112);
  v115 = Handle.serverID.getter(v114);
  v117 = v116;
  v66(v57, v52);
  p_countAndFlagsBits = &v287->_countAndFlagsBits;
  v119 = swift_bridgeObjectRelease(v287->_object);
  *p_countAndFlagsBits = v115;
  p_countAndFlagsBits[1] = v117;
  v120 = Friend.handle.getter(v119);
  v121 = Handle.siblingIdentifiers.getter(v120);
  v287 = (Swift::String *)v66;
  v66(v57, v52);
  v122 = (uint64_t)v257;
  v288 = v121;
  v123 = sub_100037A5C(&qword_1002625F8);
  v124 = sub_10001013C((unint64_t *)&qword_100263878, &qword_1002625F8, (uint64_t)&protocol conformance descriptor for [A]);
  v125 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v123, v124);
  v127 = v126;
  v128 = swift_bridgeObjectRelease(v121);
  v129 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[15]);
  *v129 = v125;
  v129[1] = v127;
  Friend.ownerHandle.getter(v128);
  v130 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v256 + 48);
  v131 = v130(v122, 1, v52);
  if ((_DWORD)v131 == 1)
  {
    v132 = sub_1000087A0(v122, &qword_1002650A0);
    v133 = 0;
    v134 = 0;
  }
  else
  {
    v133 = Handle.identifier.getter(v131);
    v134 = v135;
    v132 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v122, v52);
  }
  v136 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[17]);
  *v136 = v133;
  v136[1] = v134;
  v137 = (uint64_t)v258;
  Friend.ownerHandle.getter(v132);
  v138 = v130(v137, 1, v52);
  v139 = (uint64_t)v264;
  if ((_DWORD)v138 == 1)
  {
    v140 = sub_1000087A0(v137, &qword_1002650A0);
    v141 = 0;
    v142 = 0;
  }
  else
  {
    v141 = Handle.qualifiedIdentifier.getter(v138);
    v142 = v143;
    v140 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v137, v52);
  }
  v144 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[18]);
  *v144 = v141;
  v144[1] = v142;
  v145 = (uint64_t)v260;
  Friend.ownerHandle.getter(v140);
  v146 = v130(v145, 1, v52);
  if ((_DWORD)v146 == 1)
  {
    sub_1000087A0(v145, &qword_1002650A0);
    v147 = type metadata accessor for IDSStatus(0);
    v148 = (uint64_t)v259;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 56))(v259, 1, 1, v147);
  }
  else
  {
    v148 = (uint64_t)v259;
    Handle.idsStatus.getter(v146);
    ((void (*)(uint64_t, uint64_t))v287)(v145, v52);
  }
  v149 = (uint64_t)v261;
  v150 = sub_10000EF6C(v148, (uint64_t)a2 + v58[19], &qword_100263870);
  Friend.ownerHandle.getter(v150);
  v151 = v130(v149, 1, v52);
  if ((_DWORD)v151 == 1)
  {
    v152 = sub_1000087A0(v149, &qword_1002650A0);
    v153 = 0;
    v154 = 0;
  }
  else
  {
    v153 = Handle.dsid.getter(v151);
    v155 = v149;
    v154 = v156;
    v152 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v155, v52);
  }
  v157 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[20]);
  *v157 = v153;
  v157[1] = v154;
  v158 = v262;
  Friend.ownerHandle.getter(v152);
  v159 = (uint64_t)v158;
  v160 = v130((uint64_t)v158, 1, v52);
  v161 = v160;
  if ((_DWORD)v160 == 1)
  {
    v162 = sub_1000087A0(v159, &qword_1002650A0);
    v163 = 0.0;
  }
  else
  {
    v163 = Handle.trackingTimestamp.getter(v160);
    v162 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v159, v52);
  }
  v164 = (double *)((char *)&a2->_countAndFlagsBits + v58[22]);
  *v164 = v163;
  *((_BYTE *)v164 + 8) = v161 == 1;
  v165 = (uint64_t)v263;
  Friend.ownerHandle.getter(v162);
  v166 = v130(v165, 1, v52);
  if ((_DWORD)v166 == 1)
  {
    v167 = sub_1000087A0(v165, &qword_1002650A0);
    v168 = 0;
    v169 = 0;
  }
  else
  {
    v168 = Handle.hashedDSID.getter(v166);
    v170 = v165;
    v169 = v171;
    v167 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v170, v52);
  }
  v172 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[23]);
  *v172 = v168;
  v172[1] = v169;
  Friend.ownerHandle.getter(v167);
  v173 = v130(v139, 1, v52);
  if ((_DWORD)v173 == 1)
  {
    v174 = sub_1000087A0(v139, &qword_1002650A0);
    v175 = 0;
    v176 = 0;
  }
  else
  {
    v175 = Handle.favoriteOrder.getter(v173);
    v176 = v177;
    v174 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v139, v52);
  }
  v178 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[24]);
  *v178 = v175;
  v178[1] = v176;
  v179 = (uint64_t)v265;
  Friend.ownerHandle.getter(v174);
  v180 = v130(v179, 1, v52);
  if ((_DWORD)v180 == 1)
  {
    v181 = sub_1000087A0(v179, &qword_1002650A0);
    v182 = 2;
  }
  else
  {
    v182 = Handle.reachable.getter(v180);
    v181 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v179, v52);
  }
  v183 = (uint64_t)v267;
  *((_BYTE *)&a2->_countAndFlagsBits + v58[25]) = v182;
  v184 = (uint64_t)v266;
  Friend.ownerHandle.getter(v181);
  v185 = v130(v184, 1, v52);
  if ((_DWORD)v185 == 1)
  {
    v186 = sub_1000087A0(v184, &qword_1002650A0);
    v187 = 0;
  }
  else
  {
    v187 = Handle.pushIdentifiers.getter(v185);
    v186 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v184, v52);
  }
  v188 = (uint64_t)v269;
  *(uint64_t *)((char *)&a2->_countAndFlagsBits + v58[26]) = v187;
  Friend.ownerHandle.getter(v186);
  v189 = v130(v183, 1, v52);
  if ((_DWORD)v189 == 1)
  {
    v190 = sub_1000087A0(v183, &qword_1002650A0);
    v191 = 0;
    v192 = 0;
  }
  else
  {
    v191 = Handle.prettyName.getter(v189);
    v193 = v183;
    v192 = v194;
    v190 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v193, v52);
  }
  v195 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[27]);
  *v195 = v191;
  v195[1] = v192;
  v196 = (uint64_t)v268;
  Friend.ownerHandle.getter(v190);
  v197 = v130(v196, 1, v52);
  if ((_DWORD)v197 == 1)
  {
    v198 = sub_1000087A0(v196, &qword_1002650A0);
    v199 = 0;
    v200 = 0;
  }
  else
  {
    v199 = Handle.contactIdentifier.getter(v197);
    v201 = v196;
    v200 = v202;
    v198 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v201, v52);
  }
  v203 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[28]);
  *v203 = v199;
  v203[1] = v200;
  Friend.ownerHandle.getter(v198);
  v204 = v130(v188, 1, v52);
  if ((_DWORD)v204 == 1)
  {
    v205 = sub_1000087A0(v188, &qword_1002650A0);
    v206 = 0;
    v207 = 0;
  }
  else
  {
    v206 = Handle.serverID.getter(v204);
    v207 = v208;
    v205 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v188, v52);
  }
  v209 = (uint64_t *)((char *)&a2->_countAndFlagsBits + v58[29]);
  *v209 = v206;
  v209[1] = v207;
  v210 = (uint64_t)v272;
  Friend.ownerHandle.getter(v205);
  v211 = v130(v210, 1, v52);
  if ((_DWORD)v211 == 1)
  {
    v212 = sub_1000087A0(v210, &qword_1002650A0);
    v213 = 0;
  }
  else
  {
    v213 = Handle.expiresByGroupId.getter(v211);
    v212 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v210, v52);
  }
  *(uint64_t *)((char *)&a2->_countAndFlagsBits + v58[21]) = v213;
  v214 = (uint64_t)v274;
  Friend.ownerHandle.getter(v212);
  v215 = v270;
  v216 = sub_100039FC8(v214, v270);
  *((_BYTE *)&a2->_countAndFlagsBits + v58[30]) = Friend.secureLocationsCapable.getter(v216) & 1;
  *((_BYTE *)&a2->_countAndFlagsBits + v58[31]) = ((uint64_t (*)(void))Friend.shallowOrLiveSecureLocationsCapable.getter)() & 1;
  *((_BYTE *)&a2->_countAndFlagsBits + v58[32]) = Friend.fallbackToLegacyAllowed.getter() & 1;
  *((_BYTE *)&a2->_countAndFlagsBits + v58[33]) = Friend.fallbackToLegacy.getter() & 1;
  v217 = v273;
  v218 = ((uint64_t (*)(void))Friend.type.getter)();
  v219 = Friend.friendshipOrigin.getter(v218);
  v220 = Friend.handle.getter(v219);
  v272 = (char *)Handle.expiresByGroupId.getter(v220);
  v221 = v287;
  v222 = ((uint64_t (*)(char *, uint64_t))v287)(v57, v52);
  v274 = v58;
  v223 = v279;
  v224 = Friend.createdAt.getter(v222);
  v225 = (uint64_t)v280;
  v226 = Friend.expiry.getter(v224);
  v227 = v271;
  v228 = Friend.handle.getter(v226);
  v269 = (char *)Handle.serverID.getter(v228);
  v268 = v229;
  ((void (*)(char *, uint64_t))v221)(v227, v52);
  v230 = v275;
  v231 = v284;
  v232 = sub_10000E37C(v215, v284 + v275[10], &qword_1002650A0);
  v233 = Friend.shallowOrLiveSecureLocationsCapable.getter(v232);
  LODWORD(v271) = v233 & 1;
  LOBYTE(v270) = Friend.secureLocationsCapable.getter(v233) & 1;
  LODWORD(v270) = v270;
  LOBYTE(v215) = Friend.fallbackToLegacy.getter() & 1;
  LOBYTE(v227) = Friend.fallbackToLegacyAllowed.getter() & 1;
  v287 = a2;
  v234 = v285;
  v235 = v217;
  v236 = v286;
  (*(void (**)(uint64_t, char *, uint64_t))(v285 + 32))(v231, v235, v286);
  (*(void (**)(uint64_t, char *, uint64_t))(v277 + 32))(v231 + v230[5], v283, v278);
  *(_QWORD *)(v231 + v230[6]) = v272;
  v237 = (uint64_t)v223;
  v238 = v274;
  sub_10000EF6C(v237, v231 + v230[7], (uint64_t *)&unk_100262930);
  sub_10000EF6C(v225, v231 + v230[8], (uint64_t *)&unk_100262930);
  v239 = (_QWORD *)(v231 + v230[9]);
  v240 = v268;
  *v239 = v269;
  v239[1] = v240;
  *(_BYTE *)(v231 + v230[11]) = (_BYTE)v271;
  *(_BYTE *)(v231 + v230[12]) = v270;
  *(_BYTE *)(v231 + v230[13]) = v215;
  *(_BYTE *)(v231 + v230[14]) = (_BYTE)v227;
  v241 = sub_100037A5C(&qword_100263880);
  v242 = *(unsigned __int8 *)(v276 + 80);
  v243 = (v242 + 32) & ~v242;
  v244 = swift_allocObject(v241, v243 + *(_QWORD *)(v276 + 72), v242 | 7);
  *(_OWORD *)(v244 + 16) = xmmword_1001F35F0;
  v245 = v244 + v243;
  sub_100025C70(v231, v245, type metadata accessor for FriendInfoOption);
  v246 = sub_10003956C(v244);
  swift_setDeallocating(v244);
  swift_arrayDestroy(v245, 1, v230);
  v247 = swift_deallocClassInstance(v244, 32, 7);
  v248 = v287;
  *(uint64_t *)((char *)&v287->_countAndFlagsBits + v238[34]) = v246;
  v249 = v282;
  Friend.type.getter(v247);
  v250 = v281;
  (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v281, v249, v236);
  v251 = (*(uint64_t (**)(char *, uint64_t))(v234 + 88))(v250, v236);
  if (v251 == enum case for HandleType.follower(_:))
  {
    v252 = 2;
    v253 = v248;
LABEL_50:
    v254 = type metadata accessor for Friend(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v254 - 8) + 8))(a1, v254);
    (*(void (**)(char *, uint64_t))(v285 + 8))(v249, v286);
    result = sub_100024990(v284, type metadata accessor for FriendInfoOption);
    *(uint64_t *)((char *)&v253->_countAndFlagsBits + v238[35]) = v252;
    return result;
  }
  v253 = v248;
  if (v251 == enum case for HandleType.following(_:))
  {
    v252 = 4;
    goto LABEL_50;
  }
  if (v251 == enum case for HandleType.futureFollower(_:))
  {
    v252 = 8;
    goto LABEL_50;
  }
  if (v251 == enum case for HandleType.futureFollowing(_:))
  {
    v252 = 16;
    goto LABEL_50;
  }
  if (v251 == enum case for HandleType.pendingOffer(_:))
  {
    v252 = 32;
    goto LABEL_50;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001001FEF00, "findmylocated/FriendRecord.swift", 32, 2, 58, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FCB88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *);
  char *v63;
  char v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  int *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t (*v126)(char *, uint64_t, uint64_t);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  int *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[2];
  uint64_t v145;
  uint64_t v146;

  v141 = a2;
  v3 = sub_100037A5C(&qword_1002650A0);
  v4 = __chkstk_darwin(v3);
  v115 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v134 = (uint64_t)&v113 - v6;
  v7 = type metadata accessor for Friend(0);
  v130 = *(_QWORD *)(v7 - 8);
  v131 = v7;
  __chkstk_darwin(v7);
  v135 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100263858);
  __chkstk_darwin(v9);
  v114 = (uint64_t)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C((uint64_t *)&unk_100262930);
  v12 = __chkstk_darwin(v11);
  v138 = (int *)((char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v121 = (char *)&v113 - v14;
  v143 = type metadata accessor for Handle(0);
  v15 = *(_QWORD *)(v143 - 8);
  v16 = __chkstk_darwin(v143);
  v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v113 - v19;
  v124 = type metadata accessor for ClientOrigin(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v120 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HandleType(0);
  v23 = *(_QWORD *)(v22 - 8);
  v119 = v22;
  v24 = __chkstk_darwin(v22);
  v127 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v125 = (char *)&v113 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v113 - v28;
  v30 = (int *)type metadata accessor for FriendInfoOption(0);
  v31 = __chkstk_darwin(v30);
  v129 = (uint64_t)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v128 = (uint64_t)&v113 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v113 - v35;
  v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v37 = v126(v29, v141, v22);
  v38 = Friend.friendshipOrigin.getter(v37);
  v39 = Friend.handle.getter(v38);
  v118 = Handle.expiresByGroupId.getter(v39);
  v132 = v20;
  v133 = v15;
  v40 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v41 = v143;
  v42 = v40(v20, v143);
  v43 = (uint64_t)v121;
  v44 = Friend.createdAt.getter(v42);
  v45 = Friend.expiry.getter(v44);
  v46 = Friend.handle.getter(v45);
  v117 = Handle.serverID.getter(v46);
  v116 = v47;
  v136 = (void (*)(char *, uint64_t))v40;
  v48 = v40(v18, v41);
  v49 = Friend.ownerHandle.getter(v48);
  v50 = Friend.shallowOrLiveSecureLocationsCapable.getter(v49);
  LOBYTE(v41) = v50 & 1;
  LOBYTE(v40) = Friend.secureLocationsCapable.getter(v50) & 1;
  LOBYTE(v18) = Friend.fallbackToLegacy.getter() & 1;
  v137 = a1;
  v51 = Friend.fallbackToLegacyAllowed.getter() & 1;
  v140 = v23;
  v52 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v53 = v119;
  v122 = v29;
  v52(v36, v29, v119);
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(&v36[v30[5]], v120, v124);
  *(_QWORD *)&v36[v30[6]] = v118;
  sub_10000EF6C(v43, (uint64_t)&v36[v30[7]], (uint64_t *)&unk_100262930);
  sub_10000EF6C((uint64_t)v138, (uint64_t)&v36[v30[8]], (uint64_t *)&unk_100262930);
  v54 = (uint64_t *)&v36[v30[9]];
  v55 = v116;
  *v54 = v117;
  v54[1] = v55;
  v36[v30[11]] = v41;
  v36[v30[12]] = (char)v40;
  v36[v30[13]] = (char)v18;
  v36[v30[14]] = v51;
  v138 = (int *)type metadata accessor for FriendRecord(0);
  v56 = (uint64_t *)(v142 + v138[34]);
  v57 = sub_1001580B8((uint64_t)v36, *v56);
  if ((v57 & 1) != 0)
  {
    v58 = v114;
    sub_1000FF1A4((uint64_t)v36, v114);
    v57 = sub_1000087A0(v58, &qword_100263858);
  }
  v124 = (uint64_t)v56;
  v139 = v36;
  v59 = v122;
  v60 = v137;
  Friend.type.getter(v57);
  v61 = v140;
  v62 = *(void (**)(char *))(v140 + 104);
  v63 = v125;
  LODWORD(v123) = enum case for HandleType.following(_:);
  v62(v125);
  v64 = static HandleType.== infix(_:_:)(v59, v63);
  v65 = *(void (**)(char *, uint64_t))(v61 + 8);
  v66 = v63;
  v65(v63, v53);
  v65(v59, v53);
  v67 = v130;
  v68 = v135;
  v69 = v60;
  v70 = v131;
  v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 16))(v135, v69, v131);
  if ((v64 & 1) != 0)
  {
    v72 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v68, v70);
    v73 = enum case for HandleType.follower(_:);
    v74 = v142;
    v75 = v132;
    v76 = v138;
  }
  else
  {
    Friend.type.getter(v71);
    v77 = v67;
    v73 = enum case for HandleType.follower(_:);
    ((void (*)(char *, _QWORD, uint64_t))v62)(v66, enum case for HandleType.follower(_:), v53);
    v78 = static HandleType.== infix(_:_:)(v59, v66);
    v65(v66, v53);
    v65(v59, v53);
    v72 = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v135, v70);
    v74 = v142;
    v75 = v132;
    v76 = v138;
    if ((v78 & 1) == 0)
      goto LABEL_7;
  }
  v79 = Friend.handle.getter(v72);
  v80 = Handle.serverID.getter(v79);
  v82 = v81;
  v136(v75, v143);
  v83 = (uint64_t *)(v74 + v76[16]);
  swift_bridgeObjectRelease(v83[1]);
  *v83 = v80;
  v83[1] = v82;
LABEL_7:
  v84 = v76[35];
  v85 = *(_QWORD *)(v74 + v84);
  v86 = v127;
  v126(v127, v141, v53);
  v87 = (*(uint64_t (**)(char *, uint64_t))(v140 + 88))(v86, v53);
  v88 = (uint64_t)v139;
  if (v87 == v73)
  {
    v89 = 2;
  }
  else if (v87 == (_DWORD)v123)
  {
    v89 = 4;
  }
  else if (v87 == enum case for HandleType.futureFollower(_:))
  {
    v89 = 8;
  }
  else if (v87 == enum case for HandleType.futureFollowing(_:))
  {
    v89 = 16;
  }
  else
  {
    if (v87 != enum case for HandleType.pendingOffer(_:))
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001001FEF00, "findmylocated/FriendRecord.swift", 32, 2, 58, 0);
      __break(1u);
      return result;
    }
    v89 = 32;
  }
  *(_QWORD *)(v74 + v84) = v89 | v85;
  v90 = v129;
  sub_100025C70(v88, v129, type metadata accessor for FriendInfoOption);
  v91 = v128;
  sub_1000396B0(v128, v90);
  sub_100024990(v91, type metadata accessor for FriendInfoOption);
  v92 = v76;
  v93 = (uint64_t *)(v74 + v76[15]);
  v94 = v93[1];
  v145 = *v93;
  v146 = v94;
  v144[0] = 44;
  v144[1] = 0xE100000000000000;
  v95 = sub_1000394E4();
  v96 = StringProtocol.components<A>(separatedBy:)(v144, &type metadata for String, &type metadata for String, v95, v95);
  v97 = sub_10016B5B4(v96);
  v98 = swift_bridgeObjectRelease(v96);
  v99 = Friend.handle.getter(v98);
  v100 = Handle.siblingIdentifiers.getter(v99);
  v101 = v143;
  v136(v75, v143);
  v102 = sub_10016BC14(v100, v97);
  swift_bridgeObjectRelease(v100);
  v145 = v102;
  v103 = sub_100037A5C(&qword_100263860);
  v104 = sub_10001013C(&qword_100263868, &qword_100263860, (uint64_t)&protocol conformance descriptor for Set<A>);
  v105 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v103, v104, v95);
  v107 = v106;
  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease(v93[1]);
  *v93 = v105;
  v93[1] = v107;
  v108 = v74 + v92[36];
  v109 = v134;
  sub_10000E37C(v108, v134, &qword_1002650A0);
  LODWORD(v91) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v109, 1, v101);
  v110 = sub_1000087A0(v109, &qword_1002650A0);
  if ((_DWORD)v91 != 1)
    return sub_100024990((uint64_t)v139, type metadata accessor for FriendInfoOption);
  v111 = (uint64_t)v115;
  Friend.ownerHandle.getter(v110);
  sub_100024990((uint64_t)v139, type metadata accessor for FriendInfoOption);
  return sub_100039FC8(v111, v108);
}

BOOL sub_1000FD51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v14 - v7;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v14 - v7, a1, v2);
  Friend.type.getter(v9);
  v10 = sub_100004EA8(&qword_100263888, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v10);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v12(v8, v2);
  return (v11 & 1) == 0;
}

uint64_t sub_1000FD630(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000FD668 + 4 * byte_1001F5B45[a1]))(0xD000000000000010, 0x80000001001FEF20);
}

uint64_t sub_1000FD668(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_1000FD86C()
{
  return 0x6E49646E65697266;
}

uint64_t sub_1000FD88C()
{
  return 0x7365707974;
}

uint64_t sub_1000FD8C0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;

  v3 = v1;
  v5 = sub_100037A5C(&qword_1002639F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001012CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendRecord.CodingKeys, &type metadata for FriendRecord.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v90) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v90, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v90) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v90, v5);
    v16 = (int *)type metadata accessor for FriendRecord(0);
    v17 = (char *)v3 + v16[6];
    LOBYTE(v90) = 2;
    v18 = type metadata accessor for IDSStatus(0);
    v19 = sub_100004EA8(&qword_1002639F8, (uint64_t (*)(uint64_t))&type metadata accessor for IDSStatus, (uint64_t)&protocol conformance descriptor for IDSStatus);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v90, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + v16[7]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v90) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v90, v5);
    v23 = *(double *)((char *)v3 + v16[8]);
    LOBYTE(v90) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v90, v5, v23);
    v24 = (uint64_t *)((char *)v3 + v16[9]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v90) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v90, v5);
    v27 = (uint64_t *)((char *)v3 + v16[10]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v90) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v90, v5);
    v30 = *((unsigned __int8 *)v3 + v16[11]);
    LOBYTE(v90) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v90, v5);
    v90 = *(uint64_t *)((char *)v3 + v16[12]);
    v89 = 8;
    v31 = sub_100037A5C(&qword_1002625F8);
    v87 = sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v88 = v31;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v90, &v89, v5, v31, v87);
    v32 = (uint64_t *)((char *)v3 + v16[13]);
    v33 = *v32;
    v34 = v32[1];
    LOBYTE(v90) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v90, v5);
    v35 = (uint64_t *)((char *)v3 + v16[14]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v90) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v90, v5);
    v38 = (uint64_t *)((char *)v3 + v16[15]);
    v39 = *v38;
    v40 = v38[1];
    LOBYTE(v90) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v39, v40, &v90, v5);
    v41 = (uint64_t *)((char *)v3 + v16[16]);
    v42 = *v41;
    v43 = v41[1];
    LOBYTE(v90) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v90, v5);
    v44 = (uint64_t *)((char *)v3 + v16[17]);
    v45 = *v44;
    v46 = v44[1];
    LOBYTE(v90) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &v90, v5);
    v47 = (uint64_t *)((char *)v3 + v16[18]);
    v48 = *v47;
    v49 = v47[1];
    LOBYTE(v90) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v90, v5);
    v50 = (char *)v3 + v16[19];
    LOBYTE(v90) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v90, v5, v18, v19);
    v51 = (uint64_t *)((char *)v3 + v16[20]);
    v52 = *v51;
    v53 = v51[1];
    LOBYTE(v90) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, &v90, v5);
    v90 = *(uint64_t *)((char *)v3 + v16[21]);
    v89 = 17;
    v54 = sub_100037A5C(&qword_100263738);
    v55 = sub_1000FA858();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v90, &v89, v5, v54, v55);
    v56 = (char *)v3 + v16[22];
    v57 = *(_QWORD *)v56;
    v58 = v56[8];
    LOBYTE(v90) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v58, &v90, v5);
    v59 = (uint64_t *)((char *)v3 + v16[23]);
    v60 = *v59;
    v61 = v59[1];
    LOBYTE(v90) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, &v90, v5);
    v62 = (uint64_t *)((char *)v3 + v16[24]);
    v63 = *v62;
    v64 = v62[1];
    LOBYTE(v90) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v63, v64, &v90, v5);
    v65 = *((unsigned __int8 *)v3 + v16[25]);
    LOBYTE(v90) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v65, &v90, v5);
    v90 = *(uint64_t *)((char *)v3 + v16[26]);
    v89 = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v90, &v89, v5, v88, v87);
    v66 = (uint64_t *)((char *)v3 + v16[27]);
    v67 = *v66;
    v68 = v66[1];
    LOBYTE(v90) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v67, v68, &v90, v5);
    v69 = (uint64_t *)((char *)v3 + v16[28]);
    v70 = *v69;
    v71 = v69[1];
    LOBYTE(v90) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, &v90, v5);
    v72 = (uint64_t *)((char *)v3 + v16[29]);
    v73 = *v72;
    v74 = v72[1];
    LOBYTE(v90) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v73, v74, &v90, v5);
    v75 = *((unsigned __int8 *)v3 + v16[30]);
    LOBYTE(v90) = 26;
    KeyedEncodingContainer.encode(_:forKey:)(v75, &v90, v5);
    v76 = *((unsigned __int8 *)v3 + v16[31]);
    LOBYTE(v90) = 27;
    KeyedEncodingContainer.encode(_:forKey:)(v76, &v90, v5);
    v77 = *((unsigned __int8 *)v3 + v16[32]);
    LOBYTE(v90) = 28;
    KeyedEncodingContainer.encode(_:forKey:)(v77, &v90, v5);
    v78 = *((unsigned __int8 *)v3 + v16[33]);
    LOBYTE(v90) = 29;
    KeyedEncodingContainer.encode(_:forKey:)(v78, &v90, v5);
    v90 = *(uint64_t *)((char *)v3 + v16[34]);
    v89 = 30;
    v79 = sub_100037A5C(&qword_1002639D0);
    v80 = sub_100101354((unint64_t *)&qword_100263A08, &qword_100263A10, (uint64_t)&protocol conformance descriptor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v90, &v89, v5, v79, v80);
    v90 = *(uint64_t *)((char *)v3 + v16[35]);
    v89 = 31;
    v81 = sub_1001013D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v90, &v89, v5, &type metadata for TypeOptions, v81);
    v82 = (char *)v3 + v16[36];
    LOBYTE(v90) = 32;
    v83 = type metadata accessor for Handle(0);
    v84 = sub_100004EA8(&qword_100262478, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v82, &v90, v5, v83, v84);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000FE0C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  int *v147;
  char v148;
  uint64_t v149;

  v140 = a2;
  v3 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v3);
  v139 = (uint64_t *)((char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100037A5C(&qword_100263870);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v133 - v9);
  v141 = sub_100037A5C(&qword_1002639B0);
  v11 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v13 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendRecord(0);
  v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (char *)v17 + *(int *)(v15 + 64);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v144 = (uint64_t *)v18;
  v146 = v17;
  v147 = (int *)v15;
  v19 = (uint64_t)v17 + *(int *)(v15 + 144);
  v20 = type metadata accessor for Handle(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v143 = v19;
  v21(v19, 1, 1, v20);
  v23 = a1[3];
  v22 = a1[4];
  v142 = (uint64_t)a1;
  sub_100036228(a1, v23);
  v24 = sub_1001012CC();
  v25 = v145;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendRecord.CodingKeys, &type metadata for FriendRecord.CodingKeys, v24, v23, v22);
  if (v25)
  {
    v145 = v25;
    v26 = 0x100001000;
    goto LABEL_4;
  }
  v137 = v20;
  v138 = (uint64_t)v8;
  LOBYTE(v149) = 0;
  v27 = v141;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141);
  v39 = v146;
  *v146 = v28;
  v39[1] = v40;
  LOBYTE(v149) = 1;
  v39[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v39[3] = v41;
  v42 = type metadata accessor for IDSStatus(0);
  LOBYTE(v149) = 2;
  v43 = sub_100004EA8(&qword_1002639C0, (uint64_t (*)(uint64_t))&type metadata accessor for IDSStatus, (uint64_t)&protocol conformance descriptor for IDSStatus);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, v42, &v149, v27, v42, v43);
  v136 = v43;
  v44 = v147;
  sub_10000EF6C((uint64_t)v10, (uint64_t)v39 + v147[6], &qword_100263870);
  LOBYTE(v149) = 3;
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v46 = (uint64_t *)((char *)v39 + v44[7]);
  *v46 = v45;
  v46[1] = v47;
  LOBYTE(v149) = 4;
  *(double *)((char *)v39 + v44[8]) = KeyedDecodingContainer.decode(_:forKey:)(&v149, v27, v48);
  LOBYTE(v149) = 5;
  v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v50 = (uint64_t *)((char *)v39 + v44[9]);
  *v50 = v49;
  v50[1] = v51;
  LOBYTE(v149) = 6;
  v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v53 = (uint64_t *)((char *)v39 + v44[10]);
  *v53 = v52;
  v53[1] = v54;
  LOBYTE(v149) = 7;
  *((_BYTE *)v39 + v44[11]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v55 = sub_100037A5C(&qword_1002625F8);
  v148 = 8;
  v134 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v135 = v55;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, v55, &v148, v27, v55, v134);
  *(uint64_t *)((char *)v39 + v147[12]) = v149;
  LOBYTE(v149) = 9;
  v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v27);
  v145 = 0;
  v58 = (uint64_t *)((char *)v146 + v147[13]);
  *v58 = v56;
  v58[1] = v57;
  LOBYTE(v149) = 10;
  v59 = v145;
  v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v59;
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v62 = 879;
LABEL_58:
    v74 = 4096;
LABEL_59:
    v26 = (unint64_t)&_mh_execute_header | v74 & 0xFFFF0000FFFFFFFFLL | v62;
    goto LABEL_4;
  }
  v63 = (uint64_t *)((char *)v146 + v147[14]);
  *v63 = v60;
  v63[1] = v61;
  LOBYTE(v149) = 11;
  v64 = v145;
  v65 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141);
  v145 = v64;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v62 = 1903;
    goto LABEL_58;
  }
  v67 = (uint64_t *)((char *)v146 + v147[15]);
  *v67 = v65;
  v67[1] = v66;
  LOBYTE(v149) = 12;
  v68 = v145;
  v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v68;
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v62 = 3951;
    goto LABEL_58;
  }
  v71 = v144;
  *v144 = v69;
  v71[1] = v70;
  LOBYTE(v149) = 13;
  v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = 0;
  v75 = (uint64_t *)((char *)v146 + v147[17]);
  *v75 = v72;
  v75[1] = v73;
  LOBYTE(v149) = 14;
  v76 = v145;
  v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v76;
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v79 = 0x1FFFC4000;
LABEL_68:
    v26 = v79 + 0x10003FF6FLL;
    goto LABEL_4;
  }
  v80 = (uint64_t *)((char *)v146 + v147[18]);
  *v80 = v77;
  v80[1] = v78;
  LOBYTE(v149) = 15;
  v81 = v145;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((_QWORD *)v138, v42, &v149, v141, v42, v136);
  v145 = v81;
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v79 = 0x1FFFC8000;
    goto LABEL_68;
  }
  sub_10000EF6C(v138, (uint64_t)v146 + v147[19], &qword_100263870);
  LOBYTE(v149) = 16;
  v82 = v145;
  v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v82;
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v79 = 0x1FFFD0000;
    goto LABEL_68;
  }
  v85 = (uint64_t *)((char *)v146 + v147[20]);
  *v85 = v83;
  v85[1] = v84;
  v86 = sub_100037A5C(&qword_100263738);
  v148 = 17;
  v87 = sub_10003624C();
  v88 = v145;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, v86, &v148, v141, v86, v87);
  v145 = v88;
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v79 = 0x1FFFE0000;
    goto LABEL_68;
  }
  *(uint64_t *)((char *)v146 + v147[21]) = v149;
  LOBYTE(v149) = 18;
  v89 = v145;
  v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v89;
  if (v89
    || (v92 = (char *)v146 + v147[22],
        *(_QWORD *)v92 = v90,
        v92[8] = v91 & 1,
        LOBYTE(v149) = 19,
        v93 = v145,
        v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141),
        (v145 = v93) != 0))
  {
    v96 = 261999;
LABEL_72:
    v26 = (unint64_t)&_mh_execute_header | v96 & 0xFFFF0000FFFFFFFFLL;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    goto LABEL_4;
  }
  v97 = (uint64_t *)((char *)v146 + v147[23]);
  *v97 = v94;
  v97[1] = v95;
  LOBYTE(v149) = 20;
  v98 = v145;
  v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v98;
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v26 = 0x1000BFF6FLL;
    goto LABEL_4;
  }
  v101 = (uint64_t *)((char *)v146 + v147[24]);
  *v101 = v99;
  v101[1] = v100;
  LOBYTE(v149) = 21;
  v102 = v145;
  v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v102;
  if (v102
    || (*((_BYTE *)v146 + v147[25]) = v103,
        v148 = 22,
        v104 = v145,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, v135, &v148, v141, v135, v134),
        (v145 = v104) != 0))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v26 = 0x1001BFF6FLL;
    goto LABEL_4;
  }
  *(uint64_t *)((char *)v146 + v147[26]) = v149;
  LOBYTE(v149) = 23;
  v105 = v145;
  v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v105;
  if (v105)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v62 = 5767168;
LABEL_82:
    v74 = 261999;
    goto LABEL_59;
  }
  v108 = (uint64_t *)((char *)v146 + v147[27]);
  *v108 = v106;
  v108[1] = v107;
  LOBYTE(v149) = 24;
  v109 = v145;
  v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v109;
  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v62 = 14155776;
    goto LABEL_82;
  }
  v112 = (uint64_t *)((char *)v146 + v147[28]);
  *v112 = v110;
  v112[1] = v111;
  LOBYTE(v149) = 25;
  v113 = v145;
  v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v149, v141);
  v145 = v113;
  if (v113)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    v26 = 0x101DBFF6FLL;
LABEL_4:
    v29 = v146;
    sub_10002BB90((_QWORD *)v142);
    v30 = (v26 >> 13) & 1;
    v31 = (v26 >> 14) & 1;
    v32 = (v26 >> 15) & 1;
    v33 = (v26 >> 16) & 1;
    v34 = (v26 >> 17) & 1;
    v35 = (v26 >> 19) & 1;
    v137 = (v26 >> 20) & 1;
    v138 = (v26 >> 22) & 1;
    v140 = (v26 >> 23) & 1;
    v141 = (v26 >> 24) & 1;
    v142 = (v26 >> 25) & 1;
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease(v29[1]);
      v36 = v147;
      if ((v26 & 2) == 0)
      {
LABEL_6:
        if ((v26 & 4) == 0)
          goto LABEL_7;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v147;
      if ((v26 & 2) == 0)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease(v29[3]);
    if ((v26 & 4) == 0)
    {
LABEL_7:
      if ((v26 & 8) == 0)
        goto LABEL_8;
      goto LABEL_31;
    }
LABEL_30:
    sub_1000087A0((uint64_t)v29 + v36[6], &qword_100263870);
    if ((v26 & 8) == 0)
    {
LABEL_8:
      if ((v26 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_32;
    }
LABEL_31:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[7] + 8));
    if ((v26 & 0x20) == 0)
    {
LABEL_9:
      if ((v26 & 0x40) == 0)
        goto LABEL_10;
      goto LABEL_33;
    }
LABEL_32:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[9] + 8));
    if ((v26 & 0x40) == 0)
    {
LABEL_10:
      if ((v26 & 0x100) == 0)
        goto LABEL_11;
      goto LABEL_34;
    }
LABEL_33:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[10] + 8));
    if ((v26 & 0x100) == 0)
    {
LABEL_11:
      if ((v26 & 0x200) == 0)
        goto LABEL_12;
      goto LABEL_35;
    }
LABEL_34:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[12]));
    if ((v26 & 0x200) == 0)
    {
LABEL_12:
      if ((v26 & 0x400) == 0)
        goto LABEL_13;
      goto LABEL_36;
    }
LABEL_35:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[13] + 8));
    if ((v26 & 0x400) == 0)
    {
LABEL_13:
      if ((v26 & 0x800) != 0)
      {
LABEL_14:
        LODWORD(v139) = 0;
        goto LABEL_15;
      }
LABEL_37:
      swift_bridgeObjectRelease(v144[1]);
      LODWORD(v139) = 0;
      if ((v26 & 0x2000) != 0)
      {
LABEL_16:
        swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[17] + 8));
        if ((v31 & 1) == 0)
          goto LABEL_17;
        goto LABEL_39;
      }
LABEL_38:
      if (!(_DWORD)v31)
      {
LABEL_17:
        if ((_DWORD)v32)
          goto LABEL_18;
        goto LABEL_40;
      }
LABEL_39:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[18] + 8));
      if ((v32 & 1) != 0)
      {
LABEL_18:
        sub_1000087A0((uint64_t)v29 + v36[19], &qword_100263870);
        if ((v33 & 1) == 0)
          goto LABEL_19;
        goto LABEL_41;
      }
LABEL_40:
      if (!(_DWORD)v33)
      {
LABEL_19:
        if ((_DWORD)v34)
          goto LABEL_20;
        goto LABEL_42;
      }
LABEL_41:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[20] + 8));
      if ((v34 & 1) != 0)
      {
LABEL_20:
        swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[21]));
        if ((v35 & 1) == 0)
          goto LABEL_21;
        goto LABEL_43;
      }
LABEL_42:
      if (!(_DWORD)v35)
      {
LABEL_21:
        v37 = v143;
        if ((_DWORD)v137)
          goto LABEL_22;
        goto LABEL_44;
      }
LABEL_43:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[23] + 8));
      v37 = v143;
      if ((v137 & 1) != 0)
      {
LABEL_22:
        swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[24] + 8));
        if ((v138 & 1) == 0)
          goto LABEL_23;
        goto LABEL_45;
      }
LABEL_44:
      if (!(_DWORD)v138)
      {
LABEL_23:
        if ((_DWORD)v140)
          goto LABEL_24;
        goto LABEL_46;
      }
LABEL_45:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[26]));
      if ((v140 & 1) != 0)
      {
LABEL_24:
        swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[27] + 8));
        if ((v141 & 1) == 0)
          goto LABEL_25;
        goto LABEL_47;
      }
LABEL_46:
      if (!(_DWORD)v141)
      {
LABEL_25:
        if ((_DWORD)v142)
          goto LABEL_26;
        goto LABEL_48;
      }
LABEL_47:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[28] + 8));
      if ((v142 & 1) != 0)
      {
LABEL_26:
        swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[29] + 8));
        if ((v139 & 1) == 0)
          return sub_1000087A0(v37, &qword_1002650A0);
        goto LABEL_49;
      }
LABEL_48:
      if (!(_DWORD)v139)
        return sub_1000087A0(v37, &qword_1002650A0);
LABEL_49:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[34]));
      return sub_1000087A0(v37, &qword_1002650A0);
    }
LABEL_36:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[14] + 8));
    if ((v26 & 0x800) != 0)
      goto LABEL_14;
    goto LABEL_37;
  }
  v116 = (uint64_t *)((char *)v146 + v147[29]);
  *v116 = v114;
  v116[1] = v115;
  LOBYTE(v149) = 26;
  v117 = v145;
  v118 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141);
  v145 = v117;
  if (v117)
    goto LABEL_88;
  *((_BYTE *)v146 + v147[30]) = v118 & 1;
  LOBYTE(v149) = 27;
  v119 = v145;
  v120 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141);
  v145 = v119;
  if (v119
    || (*((_BYTE *)v146 + v147[31]) = v120 & 1,
        LOBYTE(v149) = 28,
        v121 = v145,
        v122 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141),
        (v145 = v121) != 0))
  {
LABEL_88:
    v96 = 64749423;
    goto LABEL_72;
  }
  *((_BYTE *)v146 + v147[32]) = v122 & 1;
  LOBYTE(v149) = 29;
  v123 = v145;
  v124 = KeyedDecodingContainer.decode(_:forKey:)(&v149, v141);
  v145 = v123;
  if (v123
    || (*((_BYTE *)v146 + v147[33]) = v124 & 1,
        v125 = sub_100037A5C(&qword_1002639D0),
        v148 = 30,
        v126 = sub_100101354(&qword_1002639D8, &qword_1002639E0, (uint64_t)&protocol conformance descriptor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for <> Set<A>), v127 = v145, KeyedDecodingContainer.decode<A>(_:forKey:)(&v149, v125, &v148, v141, v125, v126), (v145 = v127) != 0))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    LODWORD(v139) = 0;
LABEL_92:
    sub_10002BB90((_QWORD *)v142);
    v29 = v146;
    swift_bridgeObjectRelease(v146[1]);
    swift_bridgeObjectRelease(v29[3]);
    v36 = v147;
    sub_1000087A0((uint64_t)v29 + v147[6], &qword_100263870);
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[7] + 8));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[9] + 8));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[10] + 8));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[12]));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[13] + 8));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[14] + 8));
    LOBYTE(v30) = 1;
    v140 = 1;
    v141 = 1;
    v137 = 1;
    v138 = 1;
    LODWORD(v35) = 1;
    LODWORD(v34) = 1;
    LODWORD(v33) = 1;
    LODWORD(v32) = 1;
    LODWORD(v31) = 1;
    v142 = 1;
LABEL_15:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v29 + v36[15] + 8));
    swift_bridgeObjectRelease(v144[1]);
    if ((v30 & 1) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
  *(uint64_t *)((char *)v146 + v147[34]) = v149;
  v148 = 31;
  v128 = sub_100101310();
  v129 = v145;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v149, &type metadata for TypeOptions, &v148, v141, &type metadata for TypeOptions, v128);
  v145 = v129;
  if (v129
    || (*(uint64_t *)((char *)v146 + v147[35]) = v149,
        LOBYTE(v149) = 32,
        v130 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle), v131 = v145, KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v139, v137, &v149, v141, v137, v130), (v145 = v131) != 0))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
    LODWORD(v139) = 1;
    goto LABEL_92;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v141);
  sub_100039FC8((uint64_t)v139, v143);
  v132 = v146;
  sub_100025C70((uint64_t)v146, v140, type metadata accessor for FriendRecord);
  sub_10002BB90((_QWORD *)v142);
  return sub_100024990((uint64_t)v132, type metadata accessor for FriendRecord);
}

uint64_t sub_1000FF0F4()
{
  unsigned __int8 *v0;

  return sub_1000FD630(*v0);
}

uint64_t sub_1000FF0FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100101780(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000FF120(_BYTE *a1@<X8>)
{
  *a1 = 33;
}

uint64_t sub_1000FF12C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001012CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FF154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001012CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FF17C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FE0C0(a1, a2);
}

uint64_t sub_1000FF190(_QWORD *a1)
{
  return sub_1000FD8C0(a1);
}

uint64_t sub_1000FF1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD v30[9];

  v5 = type metadata accessor for FriendInfoOption(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v2;
  v9 = *v2;
  Hasher.init(_seed:)(v30, *(_QWORD *)(*v2 + 40));
  v10 = type metadata accessor for HandleType(0);
  v11 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  swift_bridgeObjectRetain(v9);
  dispatch thunk of Hashable.hash(into:)(v30, v10, v11);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v9 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v5;
    v28 = a2;
    v15 = v6;
    v16 = ~v13;
    v26 = v15;
    v17 = *(_QWORD *)(v15 + 72);
    while (1)
    {
      sub_100025C70(*(_QWORD *)(v9 + 48) + v17 * v14, (uint64_t)v8, type metadata accessor for FriendInfoOption);
      v18 = static HandleType.== infix(_:_:)(v8, a1);
      sub_100024990((uint64_t)v8, type metadata accessor for FriendInfoOption);
      if ((v18 & 1) != 0)
        break;
      v14 = (v14 + 1) & v16;
      if (((*(_QWORD *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease(v9);
        v19 = 1;
        a2 = v28;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v9);
    v20 = v29;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
    v22 = *v20;
    v30[0] = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001668E8();
      v22 = v30[0];
    }
    a2 = v28;
    sub_100038AE8(*(_QWORD *)(v22 + 48) + v17 * v14, v28);
    sub_1000FF61C(v14);
    v23 = *v20;
    *v20 = v30[0];
    swift_bridgeObjectRelease(v23);
    v19 = 0;
LABEL_10:
    v6 = v26;
    v5 = v27;
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
}

uint64_t sub_1000FF3C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002676A0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100166AE0();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_100023B40(v16, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1002676A0, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_1000FF61C(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD v34[9];

  v30 = type metadata accessor for FriendInfoOption(0);
  v3 = *(_QWORD *)(v30 - 8);
  result = __chkstk_darwin(v30);
  v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v29 = v1;
    v10 = ~v8;
    swift_retain(v6);
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v31 = v7;
      v32 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v3 + 72);
      v13 = (uint64_t)v33;
      do
      {
        v14 = v12;
        v15 = v12 * v9;
        sub_100025C70(*(_QWORD *)(v6 + 48) + v12 * v9, v13, type metadata accessor for FriendInfoOption);
        Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
        v16 = type metadata accessor for HandleType(0);
        v17 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
        v18 = v10;
        dispatch thunk of Hashable.hash(into:)(v34, v16, v17);
        v19 = Hasher._finalize()();
        sub_100024990(v13, type metadata accessor for FriendInfoOption);
        v20 = v19 & v18;
        v10 = v18;
        if (a1 >= (uint64_t)v32)
        {
          if (v20 < v32)
          {
            v7 = v31;
            v12 = v14;
            goto LABEL_6;
          }
          v7 = v31;
          v12 = v14;
          if (a1 < v20)
            goto LABEL_6;
        }
        else
        {
          v7 = v31;
          v12 = v14;
          if (v20 < v32 && a1 < v20)
            goto LABEL_6;
        }
        v21 = *(_QWORD *)(v6 + 48);
        v22 = v12 * a1;
        v23 = v21 + v12 * a1;
        v24 = v21 + v15;
        if (v12 * a1 < v15 || v23 >= v24 + v12)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v30);
        }
        else
        {
          a1 = v9;
          if (v22 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23);
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v6);
    v1 = v29;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v1;
  v26 = *(_QWORD *)(*v1 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

uint64_t sub_1000FF8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000FF908(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E696769726FLL && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696769726FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001FEE20;
    if (a2 == 0x80000001001FEE20)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEE20, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x7441657461657263 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7441657461657263, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x797269707865 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797269707865, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x4449726576726573 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726576726573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    v12 = 0xEB00000000656C64;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x80000001001FEE40)
  {
    v13 = 0x80000001001FEE40;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000001001FEE40, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001001FEE70)
  {
    v14 = 0x80000001001FEE70;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FEE70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000010)
  {
    v15 = 0x80000001001FEE90;
    if (a2 == 0x80000001001FEE90)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEE90, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001001FEEB0)
  {
    swift_bridgeObjectRelease(0x80000001001FEEB0);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FEEB0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

_QWORD *sub_1000FFD40(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, void *, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unsigned int (*v102)(char *, uint64_t, uint64_t, __n128);
  uint64_t v103;
  uint64_t v104;
  char *__dst;
  void *__dsta;
  void *v107;
  char *v108;
  unsigned int (*v109)(char *, uint64_t, void *, __n128);
  uint64_t v110;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for IDSStatus(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    v109 = v14;
    v99 = v13;
    v107 = (void *)v12;
    if (v14(v11, 1, (void *)v12, v15))
    {
      v16 = sub_100037A5C(&qword_100263870);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = a3[8];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *(_QWORD *)((char *)v4 + v19) = *(_QWORD *)((char *)a2 + v19);
    v23 = a3[9];
    v24 = a3[10];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v101 = v26[1];
    *v25 = *v26;
    v25[1] = v101;
    v27 = (_QWORD *)((char *)v4 + v24);
    v28 = (_QWORD *)((char *)a2 + v24);
    v103 = v28[1];
    *v27 = *v28;
    v27[1] = v103;
    v29 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v30 = *(_QWORD *)((char *)a2 + v29);
    *(_QWORD *)((char *)v4 + v29) = v30;
    v31 = a3[13];
    v32 = a3[14];
    v33 = (_QWORD *)((char *)v4 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = (_QWORD *)((char *)v4 + v32);
    v37 = (_QWORD *)((char *)a2 + v32);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = a3[15];
    v40 = a3[16];
    v41 = (_QWORD *)((char *)v4 + v39);
    v42 = (_QWORD *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = (_QWORD *)((char *)v4 + v40);
    v45 = (_QWORD *)((char *)a2 + v40);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[17];
    v48 = a3[18];
    v49 = (_QWORD *)((char *)v4 + v47);
    v50 = (_QWORD *)((char *)a2 + v47);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = (_QWORD *)((char *)v4 + v48);
    v53 = (_QWORD *)((char *)a2 + v48);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = a3[19];
    __dst = (char *)v4 + v55;
    v100 = (char *)a2 + v55;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v51);
    v56 = swift_bridgeObjectRetain(v54);
    if (v109(v100, 1, v107, v56))
    {
      v57 = sub_100037A5C(&qword_100263870);
      memcpy(__dst, v100, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v99 + 16))(__dst, v100, v107);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v99 + 56))(__dst, 0, 1, v107);
    }
    v58 = a3[20];
    v59 = a3[21];
    v60 = (_QWORD *)((char *)v4 + v58);
    v61 = (_QWORD *)((char *)a2 + v58);
    __dsta = (void *)v61[1];
    *v60 = *v61;
    v60[1] = __dsta;
    v110 = *(_QWORD *)((char *)a2 + v59);
    *(_QWORD *)((char *)v4 + v59) = v110;
    v62 = a3[22];
    v63 = a3[23];
    v64 = (char *)v4 + v62;
    v65 = (char *)a2 + v62;
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v65[8];
    v66 = (_QWORD *)((char *)v4 + v63);
    v67 = (_QWORD *)((char *)a2 + v63);
    v104 = v67[1];
    *v66 = *v67;
    v66[1] = v104;
    v68 = a3[24];
    v69 = a3[25];
    v70 = (_QWORD *)((char *)v4 + v68);
    v71 = (_QWORD *)((char *)a2 + v68);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    *((_BYTE *)v4 + v69) = *((_BYTE *)a2 + v69);
    v73 = a3[26];
    v74 = a3[27];
    v75 = *(_QWORD *)((char *)a2 + v73);
    *(_QWORD *)((char *)v4 + v73) = v75;
    v76 = (_QWORD *)((char *)v4 + v74);
    v77 = (_QWORD *)((char *)a2 + v74);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = a3[28];
    v80 = a3[29];
    v81 = (_QWORD *)((char *)v4 + v79);
    v82 = (_QWORD *)((char *)a2 + v79);
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = (_QWORD *)((char *)v4 + v80);
    v85 = (_QWORD *)((char *)a2 + v80);
    v86 = v85[1];
    *v84 = *v85;
    v84[1] = v86;
    v87 = a3[31];
    *((_BYTE *)v4 + a3[30]) = *((_BYTE *)a2 + a3[30]);
    *((_BYTE *)v4 + v87) = *((_BYTE *)a2 + v87);
    v88 = a3[33];
    *((_BYTE *)v4 + a3[32]) = *((_BYTE *)a2 + a3[32]);
    *((_BYTE *)v4 + v88) = *((_BYTE *)a2 + v88);
    v89 = a3[34];
    v90 = a3[35];
    v91 = *(_QWORD *)((char *)a2 + v89);
    *(_QWORD *)((char *)v4 + v89) = v91;
    v92 = a3[36];
    v108 = (char *)v4 + v92;
    v93 = (char *)a2 + v92;
    *(_QWORD *)((char *)v4 + v90) = *(_QWORD *)((char *)a2 + v90);
    v94 = type metadata accessor for Handle(0);
    v95 = *(_QWORD *)(v94 - 8);
    v102 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v95 + 48);
    swift_bridgeObjectRetain(__dsta);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v86);
    v96 = swift_bridgeObjectRetain(v91);
    if (v102(v93, 1, v94, v96))
    {
      v97 = sub_100037A5C(&qword_1002650A0);
      memcpy(v108, v93, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v108, v93, v94);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v108, 0, 1, v94);
    }
  }
  return v4;
}

_QWORD *sub_1001001D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, uint64_t);
  int v122;
  int v123;
  uint64_t v124;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for IDSStatus(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100037A5C(&qword_100263870);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[10];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v34 = a3[12];
  v35 = *(_QWORD *)((char *)a1 + v34);
  v36 = *(_QWORD *)((char *)a2 + v34);
  *(_QWORD *)((char *)a1 + v34) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v35);
  v37 = a3[13];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[14];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = a3[15];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = a3[16];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (_QWORD *)((char *)a2 + v52);
  *v53 = *v54;
  v55 = v54[1];
  v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = a3[17];
  v58 = (_QWORD *)((char *)a1 + v57);
  v59 = (_QWORD *)((char *)a2 + v57);
  *v58 = *v59;
  v60 = v59[1];
  v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = a3[18];
  v63 = (_QWORD *)((char *)a1 + v62);
  v64 = (_QWORD *)((char *)a2 + v62);
  *v63 = *v64;
  v65 = v64[1];
  v66 = v63[1];
  v63[1] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = a3[19];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = v15((char *)a1 + v67, 1, v13);
  v71 = v15(v69, 1, v13);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v68, v69, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v68, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v68, v13);
LABEL_12:
    v72 = sub_100037A5C(&qword_100263870);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v68, v69, v13);
LABEL_13:
  v73 = a3[20];
  v74 = (_QWORD *)((char *)a1 + v73);
  v75 = (_QWORD *)((char *)a2 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = a3[21];
  v79 = *(_QWORD *)((char *)a1 + v78);
  v80 = *(_QWORD *)((char *)a2 + v78);
  *(_QWORD *)((char *)a1 + v78) = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v79);
  v81 = a3[22];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = *(_QWORD *)v83;
  v82[8] = v83[8];
  *(_QWORD *)v82 = v84;
  v85 = a3[23];
  v86 = (_QWORD *)((char *)a1 + v85);
  v87 = (_QWORD *)((char *)a2 + v85);
  *v86 = *v87;
  v88 = v87[1];
  v89 = v86[1];
  v86[1] = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89);
  v90 = a3[24];
  v91 = (_QWORD *)((char *)a1 + v90);
  v92 = (_QWORD *)((char *)a2 + v90);
  *v91 = *v92;
  v93 = v92[1];
  v94 = v91[1];
  v91[1] = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v94);
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  v95 = a3[26];
  v96 = *(_QWORD *)((char *)a1 + v95);
  v97 = *(_QWORD *)((char *)a2 + v95);
  *(_QWORD *)((char *)a1 + v95) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v96);
  v98 = a3[27];
  v99 = (_QWORD *)((char *)a1 + v98);
  v100 = (_QWORD *)((char *)a2 + v98);
  *v99 = *v100;
  v101 = v100[1];
  v102 = v99[1];
  v99[1] = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  v103 = a3[28];
  v104 = (_QWORD *)((char *)a1 + v103);
  v105 = (_QWORD *)((char *)a2 + v103);
  *v104 = *v105;
  v106 = v105[1];
  v107 = v104[1];
  v104[1] = v106;
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRelease(v107);
  v108 = a3[29];
  v109 = (_QWORD *)((char *)a1 + v108);
  v110 = (_QWORD *)((char *)a2 + v108);
  *v109 = *v110;
  v111 = v110[1];
  v112 = v109[1];
  v109[1] = v111;
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRelease(v112);
  *((_BYTE *)a1 + a3[30]) = *((_BYTE *)a2 + a3[30]);
  *((_BYTE *)a1 + a3[31]) = *((_BYTE *)a2 + a3[31]);
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + a3[33]) = *((_BYTE *)a2 + a3[33]);
  v113 = a3[34];
  v114 = *(_QWORD *)((char *)a2 + v113);
  v115 = *(_QWORD *)((char *)a1 + v113);
  *(_QWORD *)((char *)a1 + v113) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  *(_QWORD *)((char *)a1 + a3[35]) = *(_QWORD *)((char *)a2 + a3[35]);
  v116 = a3[36];
  v117 = (char *)a1 + v116;
  v118 = (char *)a2 + v116;
  v119 = type metadata accessor for Handle(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48);
  v122 = v121(v117, 1, v119);
  v123 = v121(v118, 1, v119);
  if (!v122)
  {
    if (!v123)
    {
      (*(void (**)(char *, char *, uint64_t))(v120 + 24))(v117, v118, v119);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v117, v119);
    goto LABEL_18;
  }
  if (v123)
  {
LABEL_18:
    v124 = sub_100037A5C(&qword_1002650A0);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v117, v118, v119);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
  return a1;
}

_OWORD *sub_10010081C(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for IDSStatus(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100037A5C(&qword_100263870);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  v16 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  v18 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  v19 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  v20 = a3[19];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  if (v12((char *)a2 + v20, 1, v10))
  {
    v23 = sub_100037A5C(&qword_100263870);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v22, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  v24 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  v25 = a3[22];
  v26 = a3[23];
  v27 = (char *)a1 + v25;
  v28 = (char *)a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)((char *)a2 + v26);
  v29 = a3[25];
  *(_OWORD *)((char *)a1 + a3[24]) = *(_OWORD *)((char *)a2 + a3[24]);
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  v30 = a3[27];
  *(_QWORD *)((char *)a1 + a3[26]) = *(_QWORD *)((char *)a2 + a3[26]);
  *(_OWORD *)((char *)a1 + v30) = *(_OWORD *)((char *)a2 + v30);
  v31 = a3[29];
  *(_OWORD *)((char *)a1 + a3[28]) = *(_OWORD *)((char *)a2 + a3[28]);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  v32 = a3[31];
  *((_BYTE *)a1 + a3[30]) = *((_BYTE *)a2 + a3[30]);
  *((_BYTE *)a1 + v32) = *((_BYTE *)a2 + v32);
  v33 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  v34 = a3[35];
  *(_QWORD *)((char *)a1 + a3[34]) = *(_QWORD *)((char *)a2 + a3[34]);
  v35 = a3[36];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)((char *)a2 + v34);
  v38 = type metadata accessor for Handle(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    v40 = sub_100037A5C(&qword_1002650A0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

_QWORD *sub_100100B04(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(char *, uint64_t, uint64_t);
  int v134;
  int v135;
  uint64_t v136;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for IDSStatus(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100037A5C(&qword_100263870);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[10];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v38 = *(_QWORD *)((char *)a1 + v37);
  *(_QWORD *)((char *)a1 + v37) = *(_QWORD *)((char *)a2 + v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[13];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  v44 = v40[1];
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease(v44);
  v45 = a3[14];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v49 = *v47;
  v48 = v47[1];
  v50 = v46[1];
  *v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease(v50);
  v51 = a3[15];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v55 = *v53;
  v54 = v53[1];
  v56 = v52[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease(v56);
  v57 = a3[16];
  v58 = (_QWORD *)((char *)a1 + v57);
  v59 = (_QWORD *)((char *)a2 + v57);
  v61 = *v59;
  v60 = v59[1];
  v62 = v58[1];
  *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease(v62);
  v63 = a3[17];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  v67 = *v65;
  v66 = v65[1];
  v68 = v64[1];
  *v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease(v68);
  v69 = a3[18];
  v70 = (_QWORD *)((char *)a1 + v69);
  v71 = (_QWORD *)((char *)a2 + v69);
  v73 = *v71;
  v72 = v71[1];
  v74 = v70[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease(v74);
  v75 = a3[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v15((char *)a1 + v75, 1, v13);
  v79 = v15(v77, 1, v13);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v76, v77, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v76, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v76, v13);
LABEL_12:
    v80 = sub_100037A5C(&qword_100263870);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v76, v77, v13);
LABEL_13:
  v81 = a3[20];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  v85 = *v83;
  v84 = v83[1];
  v86 = v82[1];
  *v82 = v85;
  v82[1] = v84;
  swift_bridgeObjectRelease(v86);
  v87 = a3[21];
  v88 = *(_QWORD *)((char *)a1 + v87);
  *(_QWORD *)((char *)a1 + v87) = *(_QWORD *)((char *)a2 + v87);
  swift_bridgeObjectRelease(v88);
  v89 = a3[22];
  v90 = a3[23];
  v91 = (char *)a1 + v89;
  v92 = (char *)a2 + v89;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v92[8];
  v93 = (_QWORD *)((char *)a1 + v90);
  v94 = (_QWORD *)((char *)a2 + v90);
  v96 = *v94;
  v95 = v94[1];
  v97 = v93[1];
  *v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease(v97);
  v98 = a3[24];
  v99 = (_QWORD *)((char *)a1 + v98);
  v100 = (_QWORD *)((char *)a2 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = a3[26];
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  v105 = *(_QWORD *)((char *)a1 + v104);
  *(_QWORD *)((char *)a1 + v104) = *(_QWORD *)((char *)a2 + v104);
  swift_bridgeObjectRelease(v105);
  v106 = a3[27];
  v107 = (_QWORD *)((char *)a1 + v106);
  v108 = (_QWORD *)((char *)a2 + v106);
  v110 = *v108;
  v109 = v108[1];
  v111 = v107[1];
  *v107 = v110;
  v107[1] = v109;
  swift_bridgeObjectRelease(v111);
  v112 = a3[28];
  v113 = (_QWORD *)((char *)a1 + v112);
  v114 = (_QWORD *)((char *)a2 + v112);
  v116 = *v114;
  v115 = v114[1];
  v117 = v113[1];
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease(v117);
  v118 = a3[29];
  v119 = (_QWORD *)((char *)a1 + v118);
  v120 = (_QWORD *)((char *)a2 + v118);
  v122 = *v120;
  v121 = v120[1];
  v123 = v119[1];
  *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease(v123);
  v124 = a3[31];
  *((_BYTE *)a1 + a3[30]) = *((_BYTE *)a2 + a3[30]);
  *((_BYTE *)a1 + v124) = *((_BYTE *)a2 + v124);
  v125 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v125) = *((_BYTE *)a2 + v125);
  v126 = a3[34];
  v127 = *(_QWORD *)((char *)a1 + v126);
  *(_QWORD *)((char *)a1 + v126) = *(_QWORD *)((char *)a2 + v126);
  swift_bridgeObjectRelease(v127);
  v128 = a3[36];
  *(_QWORD *)((char *)a1 + a3[35]) = *(_QWORD *)((char *)a2 + a3[35]);
  v129 = (char *)a1 + v128;
  v130 = (char *)a2 + v128;
  v131 = type metadata accessor for Handle(0);
  v132 = *(_QWORD *)(v131 - 8);
  v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
  v134 = v133(v129, 1, v131);
  v135 = v133(v130, 1, v131);
  if (!v134)
  {
    if (!v135)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 40))(v129, v130, v131);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v129, v131);
    goto LABEL_18;
  }
  if (v135)
  {
LABEL_18:
    v136 = sub_100037A5C(&qword_1002650A0);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v129, v130, v131);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
  return a1;
}

uint64_t sub_100101004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100037A5C(&qword_100263870);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100037A5C(&qword_1002650A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 144);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1001010AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100037A5C(&qword_100263870);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100037A5C(&qword_1002650A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 144);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100101150(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v6[0] = &unk_1001F5DA0;
  v6[1] = &unk_1001F5C48;
  sub_100101280(319, (unint64_t *)&unk_100263900, (uint64_t (*)(uint64_t))&type metadata accessor for IDSStatus);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = &unk_1001F5C48;
    v9 = (char *)&value witness table for Builtin.Int64 + 64;
    v10 = &unk_1001F5C48;
    v11 = &unk_1001F5C48;
    v12 = &unk_1001F5C60;
    v13 = &unk_1001F5DB8;
    v14 = &unk_1001F5C48;
    v15 = &unk_1001F5C48;
    v16 = &unk_1001F5DA0;
    v17 = &unk_1001F5C48;
    v18 = &unk_1001F5C48;
    v19 = &unk_1001F5C48;
    v20 = v7;
    v21 = &unk_1001F5C48;
    v22 = &unk_1001F5DB8;
    v23 = &unk_1001F5DD0;
    v24 = &unk_1001F5C48;
    v25 = &unk_1001F5C48;
    v26 = &unk_1001F5C60;
    v27 = &unk_1001F5DB8;
    v28 = &unk_1001F5C48;
    v29 = &unk_1001F5C48;
    v30 = &unk_1001F5C48;
    v31 = &unk_1001F5DE8;
    v32 = &unk_1001F5DE8;
    v33 = &unk_1001F5DE8;
    v34 = &unk_1001F5DE8;
    v35 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v36 = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100101280(319, (unint64_t *)&qword_100265110, (uint64_t (*)(uint64_t))&type metadata accessor for Handle);
    if (v5 <= 0x3F)
    {
      v37 = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 33, v6, a1 + 16);
    }
  }
}

void sub_100101280(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1001012CC()
{
  unint64_t result;

  result = qword_1002639B8;
  if (!qword_1002639B8)
  {
    result = swift_getWitnessTable(&unk_1001F60F4, &type metadata for FriendRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002639B8);
  }
  return result;
}

unint64_t sub_100101310()
{
  unint64_t result;

  result = qword_1002639E8;
  if (!qword_1002639E8)
  {
    result = swift_getWitnessTable(&unk_1001F60CC, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_1002639E8);
  }
  return result;
}

uint64_t sub_100101354(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10003C1FC(&qword_1002639D0);
    sub_100004EA8(a2, type metadata accessor for FriendInfoOption, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001013D8()
{
  unint64_t result;

  result = qword_100263A18;
  if (!qword_100263A18)
  {
    result = swift_getWitnessTable(&unk_1001F60A4, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_100263A18);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FriendRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE0)
    goto LABEL_17;
  if (a2 + 32 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 32) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 32;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 32;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 32;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x21;
  v8 = v6 - 33;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 32 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 32) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDF)
    return ((uint64_t (*)(void))((char *)&loc_1001014F8 + 4 * byte_1001F5B6B[v4]))();
  *a1 = a2 + 32;
  return ((uint64_t (*)(void))((char *)sub_10010152C + 4 * byte_1001F5B66[v4]))();
}

uint64_t sub_10010152C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100101534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010153CLL);
  return result;
}

uint64_t sub_100101548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100101550);
  *(_BYTE *)result = a2 + 32;
  return result;
}

uint64_t sub_100101554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010155C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendRecord.CodingKeys()
{
  return &type metadata for FriendRecord.CodingKeys;
}

ValueMetadata *type metadata accessor for TypeOptions()
{
  return &type metadata for TypeOptions;
}

unint64_t sub_10010158C()
{
  unint64_t result;

  result = qword_100263A20;
  if (!qword_100263A20)
  {
    result = swift_getWitnessTable(&unk_1001F5E8C, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_100263A20);
  }
  return result;
}

unint64_t sub_1001015D4()
{
  unint64_t result;

  result = qword_100263A28;
  if (!qword_100263A28)
  {
    result = swift_getWitnessTable(&unk_1001F5E5C, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_100263A28);
  }
  return result;
}

unint64_t sub_10010161C()
{
  unint64_t result;

  result = qword_100263A30;
  if (!qword_100263A30)
  {
    result = swift_getWitnessTable(&unk_1001F5EB4, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_100263A30);
  }
  return result;
}

unint64_t sub_100101664()
{
  unint64_t result;

  result = qword_100263A38;
  if (!qword_100263A38)
  {
    result = swift_getWitnessTable(&unk_1001F5EEC, &type metadata for TypeOptions);
    atomic_store(result, (unint64_t *)&qword_100263A38);
  }
  return result;
}

unint64_t sub_1001016AC()
{
  unint64_t result;

  result = qword_100263A40;
  if (!qword_100263A40)
  {
    result = swift_getWitnessTable(&unk_1001F607C, &type metadata for FriendRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263A40);
  }
  return result;
}

unint64_t sub_1001016F4()
{
  unint64_t result;

  result = qword_100263A48;
  if (!qword_100263A48)
  {
    result = swift_getWitnessTable(&unk_1001F5FEC, &type metadata for FriendRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263A48);
  }
  return result;
}

unint64_t sub_10010173C()
{
  unint64_t result;

  result = qword_100263A50;
  if (!qword_100263A50)
  {
    result = swift_getWitnessTable(&unk_1001F6014, &type metadata for FriendRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263A50);
  }
  return result;
}

uint64_t sub_100101780(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001001FEF20;
    if (a2 == 0x80000001001FEF20)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEF20, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001001FEF40)
  {
    v6 = 0x80000001001FEF40;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001001FEF40, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6449656C646E6168 && a2 == 0xEF73757461745373)
  {
    v7 = 0xEF73757461745373;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C646E6168, 0xEF73757461745373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x7344656C646E6168 && a2 == 0xEA00000000006469)
  {
    v8 = 0xEA00000000006469;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7344656C646E6168, 0xEA00000000006469, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000017)
  {
    v9 = 0x80000001001FEF60;
    if (a2 == 0x80000001001FEF60)
      goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FEF60, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x80000001001FEF80;
    if (a2 == 0x80000001001FEF80)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEF80, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001001FEFA0)
  {
    v11 = 0x80000001001FEFA0;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001FEFA0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_39;
  }
  if (a1 == 0x6552656C646E6168 && a2 == 0xEF656C6261686361)
  {
    v12 = 0xEF656C6261686361;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656C646E6168, 0xEF656C6261686361, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_45;
  }
  if (a1 == 0xD000000000000015)
  {
    v13 = 0x80000001001FEFC0;
    if (a2 == 0x80000001001FEFC0)
      goto LABEL_50;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001FEFC0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if (a1 == 0xD000000000000010)
  {
    v14 = 0x80000001001FEFE0;
    if (a2 == 0x80000001001FEFE0)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEFE0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if (a1 == 0xD000000000000017)
  {
    v15 = 0x80000001001FF000;
    if (a2 == 0x80000001001FF000)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FF000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if (a1 == 0xD000000000000018)
  {
    v16 = 0x80000001001FF020;
    if (a2 == 0x80000001001FF020)
      goto LABEL_65;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001FF020, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD000000000000016)
  {
    v17 = 0x80000001001FF040;
    if (a2 == 0x80000001001FF040)
      goto LABEL_70;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FF040, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if (a1 == 0xD000000000000015)
  {
    v18 = 0x80000001001FF060;
    if (a2 == 0x80000001001FF060)
      goto LABEL_75;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001FF060, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x80000001001FF080)
  {
    v19 = 0x80000001001FF080;
LABEL_81:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001FF080, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_81;
  }
  if (a1 == 0xD000000000000014)
  {
    v20 = 0x80000001001FF0A0;
    if (a2 == 0x80000001001FF0A0)
      goto LABEL_86;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001FF0A0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEF64697344656C64)
  {
    v21 = 0xEF64697344656C64;
LABEL_92:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEF64697344656C64, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_92;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v22 = 0x80000001001FF0C0;
    if (a2 == 0x80000001001FF0C0)
      goto LABEL_97;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001001FF0C0, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_97:
    swift_bridgeObjectRelease(v22);
    return 17;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v23 = 0x80000001001FF0E0;
    if (a2 == 0x80000001001FF0E0)
      goto LABEL_102;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001001FF0E0, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_102:
    swift_bridgeObjectRelease(v23);
    return 18;
  }
  if (a1 == 0xD000000000000015)
  {
    v24 = 0x80000001001FF100;
    if (a2 == 0x80000001001FF100)
      goto LABEL_107;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001FF100, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_107:
    swift_bridgeObjectRelease(v24);
    return 19;
  }
  if (a1 == 0xD000000000000018)
  {
    v25 = 0x80000001001FF120;
    if (a2 == 0x80000001001FF120)
      goto LABEL_112;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001FF120, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_112:
    swift_bridgeObjectRelease(v25);
    return 20;
  }
  if (a1 == 0xD000000000000014)
  {
    v26 = 0x80000001001FF140;
    if (a2 == 0x80000001001FF140)
      goto LABEL_117;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001FF140, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_117:
    swift_bridgeObjectRelease(v26);
    return 21;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001FF160)
  {
    v27 = 0x80000001001FF160;
LABEL_123:
    swift_bridgeObjectRelease(v27);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001FF160, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_123;
  }
  if (a1 == 0xD000000000000015)
  {
    v28 = 0x80000001001FF180;
    if (a2 == 0x80000001001FF180)
      goto LABEL_128;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001FF180, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_128:
    swift_bridgeObjectRelease(v28);
    return 23;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v29 = 0x80000001001FF1A0;
    if (a2 == 0x80000001001FF1A0)
      goto LABEL_133;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001001FF1A0, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_133:
    swift_bridgeObjectRelease(v29);
    return 24;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v30 = 0x80000001001FF1C0;
    if (a2 == 0x80000001001FF1C0)
      goto LABEL_138;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001001FF1C0, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
LABEL_138:
    swift_bridgeObjectRelease(v30);
    return 25;
  }
  if (a1 == 0xD000000000000016)
  {
    v31 = 0x80000001001FEE70;
    if (a2 == 0x80000001001FEE70)
      goto LABEL_143;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FEE70, a1, a2, 0) & 1) != 0)
  {
    v31 = a2;
LABEL_143:
    swift_bridgeObjectRelease(v31);
    return 26;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x80000001001FEE40)
  {
    v32 = 0x80000001001FEE40;
LABEL_149:
    swift_bridgeObjectRelease(v32);
    return 27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000001001FEE40, a1, a2, 0) & 1) != 0)
  {
    v32 = a2;
    goto LABEL_149;
  }
  if (a1 == 0xD000000000000017)
  {
    v33 = 0x80000001001FEEB0;
    if (a2 == 0x80000001001FEEB0)
      goto LABEL_154;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FEEB0, a1, a2, 0) & 1) != 0)
  {
    v33 = a2;
LABEL_154:
    swift_bridgeObjectRelease(v33);
    return 28;
  }
  if (a1 == 0xD000000000000010)
  {
    v34 = 0x80000001001FEE90;
    if (a2 == 0x80000001001FEE90)
      goto LABEL_159;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEE90, a1, a2, 0) & 1) != 0)
  {
    v34 = a2;
LABEL_159:
    swift_bridgeObjectRelease(v34);
    return 29;
  }
  if (a1 == 0x6E49646E65697266 && a2 == 0xEA00000000006F66)
  {
    v35 = 0xEA00000000006F66;
LABEL_165:
    swift_bridgeObjectRelease(v35);
    return 30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E49646E65697266, 0xEA00000000006F66, a1, a2, 0) & 1) != 0)
  {
    v35 = a2;
    goto LABEL_165;
  }
  if (a1 == 0x7365707974 && a2 == 0xE500000000000000)
  {
    v36 = 0xE500000000000000;
LABEL_171:
    swift_bridgeObjectRelease(v36);
    return 31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365707974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v36 = a2;
    goto LABEL_171;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    swift_bridgeObjectRelease(0xEB00000000656C64);
    return 32;
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v37 & 1) != 0)
      return 32;
    else
      return 33;
  }
}

uint64_t sub_1001023AC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AD08);
  sub_100037A9C(v0, (uint64_t)qword_10027AD08);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000014, 0x80000001001FF1E0);
}

uint64_t sub_100102430(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_100037A5C(&qword_100263B48);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = sub_100103EFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipImportRequest.CodingKeys, &type metadata for FriendshipImportRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_100037A5C(&qword_100261218);
  v16 = sub_10007581C(&qword_100261220, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_10003F9B8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001025A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[160];
  _BYTE v23[168];
  char v24;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100263B20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100103BB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipImportContent.CodingKeys, &type metadata for FriendshipImportContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v23, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v23, (uint64_t)v22, &qword_1002603B0);
  v24 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v24, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = type metadata accessor for FriendshipImportContent(0);
    v14 = v3 + *(int *)(v13 + 20);
    v22[0] = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v22, v5, v15, v16);
    v17 = (uint64_t *)(v3 + *(int *)(v13 + 24));
    v18 = *v17;
    v19 = v17[1];
    v22[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v22, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100102770@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE v32[160];
  _BYTE v33[160];
  _QWORD v34[21];
  char v35;

  v26 = a2;
  v27 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v27);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_100037A5C(&qword_100263B30);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FriendshipImportContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v30 = a1;
  sub_100036228(a1, v11);
  v13 = sub_100103BB0();
  v28 = v7;
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipImportContent.CodingKeys, &type metadata for FriendshipImportContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v30);
  v31 = v5;
  v15 = (uint64_t)v10;
  v35 = 0;
  v16 = sub_10002B9FC();
  v17 = v28;
  v18 = v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &type metadata for ServerContext, &v35, v29, &type metadata for ServerContext, v16);
  sub_10000EF6C((uint64_t)v34, (uint64_t)v33, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v33, v15, &qword_1002603B0);
  v32[0] = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v27, v32, v18, v27, v19);
  sub_10003E4F4((uint64_t)v4, v15 + *(int *)(v8 + 20));
  v32[0] = 2;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(v32, v29);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v29);
  v23 = (uint64_t *)(v15 + *(int *)(v8 + 24));
  *v23 = v20;
  v23[1] = v22;
  sub_100025C70(v15, v26, type metadata accessor for FriendshipImportContent);
  sub_10002BB90(v30);
  return sub_100024990(v15, type metadata accessor for FriendshipImportContent);
}

uint64_t sub_100102A88()
{
  _BYTE *v0;

  if (*v0)
    return 2036625250;
  else
    return 0xD000000000000010;
}

uint64_t sub_100102AC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100103BF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100102AE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103EFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100102B0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103EFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100102B34@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100103CD0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100102B60(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100102430(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100102B7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103B6C();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100102BA4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F43746E65696C63;
  if (*v0 != 1)
    v1 = 7107189;
  if (*v0)
    return v1;
  else
    return 0x6F43726576726573;
}

uint64_t sub_100102C00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100104288(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100102C24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103BB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100102C4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103BB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100102C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100102770(a1, a2);
}

uint64_t sub_100102C88(_QWORD *a1)
{
  return sub_1001025A4(a1);
}

uint64_t sub_100102C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3[227] = a3;
  v3[226] = a2;
  v3[225] = a1;
  v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v3[228] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[229] = v5;
  v3[230] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FriendshipImportContent(0);
  v3[231] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[232] = swift_task_alloc(v7);
  v3[233] = swift_task_alloc(v7);
  v3[234] = swift_task_alloc(v7);
  v8 = type metadata accessor for Account(0);
  v3[235] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[236] = v9;
  v3[237] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClientOrigin(0);
  v3[238] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[239] = v11;
  v3[240] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[241] = swift_task_alloc(v12);
  v3[242] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[243] = swift_task_alloc(v13);
  v3[244] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[245] = swift_task_alloc(v14);
  v3[246] = swift_task_alloc(v14);
  return swift_task_switch(sub_100102E2C, 0, 0);
}

uint64_t sub_100102E2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[244];
  v2 = v0[242];
  v15 = v0[241];
  v16 = v0[243];
  v3 = v0[240];
  v4 = v0[239];
  v5 = v0[238];
  v14 = v0[237];
  v6 = v0[236];
  v7 = v0[235];
  v8 = v0[225];
  v9 = sub_10003D638();
  v0[247] = v9;
  v10 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for ClientOrigin.other(_:), v5);
  swift_bridgeObjectRetain(v9);
  RequestOrigin.init(_:)(v3);
  v11 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 0, 1, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v14, v8, v7);
  sub_10000E37C(v2, v15, &qword_100260238);
  sub_10000E37C(v1, v16, &qword_1002650A0);
  v12 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[248] = v12;
  *v12 = v0;
  v12[1] = sub_100102FA0;
  return sub_100044CD8(v0[246], v0[237], v0[241], v0[243], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100102FA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1968);
  v3 = *(_QWORD *)(*v0 + 1960);
  v4 = *(_QWORD *)(*v0 + 1952);
  v5 = *(_QWORD *)(*v0 + 1936);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1984));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v2, v3, type metadata accessor for ClientContext);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1992) = v6;
  *v6 = v8;
  v6[1] = sub_100103058;
  return daemon.getter();
}

uint64_t sub_100103058(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1992);
  v5 = *v1;
  *(_QWORD *)(*v1 + 2000) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 2008) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100103140;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100103140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2008);
  v5 = *(_QWORD **)v2;
  v5[252] = a1;
  v5[253] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100103318, 0, 0);
  swift_release(v5[250]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[254] = v7;
  *v7 = v5;
  v7[1] = sub_1001031F4;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_1001031F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2016);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2032));
  return swift_task_switch(sub_10010324C, v1, 0);
}

uint64_t sub_10010324C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_100103474, 0, 0);
}

uint64_t sub_100103318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 1976);
  v2 = *(_QWORD *)(v0 + 1968);
  v3 = *(_QWORD *)(v0 + 1960);
  v4 = *(_QWORD *)(v0 + 1952);
  v5 = *(_QWORD *)(v0 + 1944);
  v11 = *(_QWORD *)(v0 + 1936);
  v12 = *(_QWORD *)(v0 + 1928);
  v13 = *(_QWORD *)(v0 + 1920);
  v14 = *(_QWORD *)(v0 + 1896);
  v6 = *(_QWORD *)(v0 + 1888);
  v7 = *(_QWORD *)(v0 + 1880);
  v15 = *(_QWORD *)(v0 + 1872);
  v16 = *(_QWORD *)(v0 + 1864);
  v17 = *(_QWORD *)(v0 + 1856);
  v18 = *(_QWORD *)(v0 + 1840);
  v8 = *(_QWORD *)(v0 + 1816);
  v9 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 2000));
  swift_bridgeObjectRelease(v8);
  sub_100024990(v3, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v7);
  sub_100024990(v2, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  sub_100037AF8(0, 0xF000000000000000);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 1960);
  v2 = *(_QWORD *)(v0 + 1872);
  v3 = *(_QWORD *)(v0 + 1848);
  v4 = *(_QWORD *)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1808);
  swift_release(*(_QWORD *)(v0 + 2016));
  sub_10000EF6C(v0 + 1312, v2, &qword_1002603B0);
  sub_10003E4F4(v1, v2 + *(int *)(v3 + 20));
  v6 = (_QWORD *)(v2 + *(int *)(v3 + 24));
  *v6 = v5;
  v6[1] = v4;
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v7 = *(_QWORD *)(v0 + 1872);
  v8 = *(_QWORD *)(v0 + 1864);
  v9 = type metadata accessor for Logger(0);
  sub_100037A9C(v9, (uint64_t)qword_10027AD08);
  v10 = sub_100025C70(v7, v8, type metadata accessor for FriendshipImportContent);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 1864);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 1856);
    v16 = *(_QWORD *)(v0 + 1848);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v48 = v18;
    *(_DWORD *)v17 = 136315138;
    sub_100025C70(v14, v15, type metadata accessor for FriendshipImportContent);
    v19 = String.init<A>(describing:)(v15, v16);
    v21 = v20;
    *(_QWORD *)(v0 + 1792) = sub_10002BA84(v19, v20, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1792, v0 + 1800, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    sub_100024990(v14, type metadata accessor for FriendshipImportContent);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Request content: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 1864), type metadata accessor for FriendshipImportContent);
  }

  v22 = *(_QWORD *)(v0 + 2024);
  v23 = *(_QWORD *)(v0 + 1872);
  v24 = *(_QWORD *)(v0 + 1848);
  v25 = *(_QWORD **)(v0 + 1840);
  v26 = *(_QWORD *)(v0 + 1832);
  v27 = *(_QWORD *)(v0 + 1824);
  v28 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = JSONEncoder.init()();
  *v25 = sub_100055760;
  v25[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v25, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v27);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v25);
  v30 = sub_100004EA8(&qword_100263A60, type metadata accessor for FriendshipImportContent, (uint64_t)&unk_1001F62B4);
  v31 = dispatch thunk of JSONEncoder.encode<A>(_:)(v23, v24, v30);
  v33 = v32;
  swift_release(v29);
  if (v22)
  {
    swift_errorRelease(v22);
    v31 = 0;
    v33 = 0xF000000000000000;
  }
  v34 = *(_QWORD *)(v0 + 1976);
  v35 = *(_QWORD *)(v0 + 1968);
  v36 = *(_QWORD *)(v0 + 1960);
  v37 = *(_QWORD *)(v0 + 1952);
  v38 = *(_QWORD *)(v0 + 1944);
  v39 = *(_QWORD *)(v0 + 1936);
  v42 = *(_QWORD *)(v0 + 1928);
  v43 = *(_QWORD *)(v0 + 1920);
  v40 = *(_QWORD *)(v0 + 1872);
  v44 = *(_QWORD *)(v0 + 1896);
  v45 = *(_QWORD *)(v0 + 1864);
  v46 = *(_QWORD *)(v0 + 1856);
  v47 = *(_QWORD *)(v0 + 1840);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1888) + 8))(*(_QWORD *)(v0 + 1800), *(_QWORD *)(v0 + 1880));
  sub_100024990(v40, type metadata accessor for FriendshipImportContent);
  sub_100024990(v35, type metadata accessor for ClientContext);
  sub_10001F728(v31, v33);
  sub_100037AF8(0, 0xF000000000000000);
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v31, v33);
  sub_100037AF8(v31, v33);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v31, v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v40);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 1976), v31, v33);
}

uint64_t type metadata accessor for FriendshipImportContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100263AC0;
  if (!qword_100263AC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendshipImportContent);
  return result;
}

uint64_t sub_1001038D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001038E4);
}

uint64_t sub_1001038E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100103968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100103974);
}

uint64_t sub_100103974(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001039F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001F6188;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001F61A0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportRequest()
{
  return &type metadata for FriendshipImportRequest;
}

unint64_t sub_100103A84()
{
  unint64_t result;

  result = qword_100263B00;
  if (!qword_100263B00)
  {
    result = swift_getWitnessTable(&unk_1001F62DC, &type metadata for FriendshipImportRequest);
    atomic_store(result, (unint64_t *)&qword_100263B00);
  }
  return result;
}

uint64_t sub_100103AC8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100263B08, type metadata accessor for FriendshipImportContent, (uint64_t)&unk_1001F6270);
  result = sub_100004EA8(&qword_100263A60, type metadata accessor for FriendshipImportContent, (uint64_t)&unk_1001F62B4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100103B28()
{
  unint64_t result;

  result = qword_100263B10;
  if (!qword_100263B10)
  {
    result = swift_getWitnessTable(&unk_1001F61D8, &type metadata for FriendshipImportRequest);
    atomic_store(result, (unint64_t *)&qword_100263B10);
  }
  return result;
}

unint64_t sub_100103B6C()
{
  unint64_t result;

  result = qword_100263B18;
  if (!qword_100263B18)
  {
    result = swift_getWitnessTable(&unk_1001F6304, &type metadata for FriendshipImportRequest);
    atomic_store(result, (unint64_t *)&qword_100263B18);
  }
  return result;
}

unint64_t sub_100103BB0()
{
  unint64_t result;

  result = qword_100263B28;
  if (!qword_100263B28)
  {
    result = swift_getWitnessTable(&unk_1001F6500, &type metadata for FriendshipImportContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B28);
  }
  return result;
}

uint64_t sub_100103BF4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001001FF200;
    if (a2 == 0x80000001001FF200)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FF200, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100103CD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = sub_100037A5C(&qword_100263B38);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_100103EFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipImportRequest.CodingKeys, &type metadata for FriendshipImportRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
    sub_100037AF8(0, 0xF000000000000000);
  }
  else
  {
    v10 = sub_100037A5C(&qword_100261218);
    v19 = 0;
    v11 = sub_10007581C((unint64_t *)&qword_100261248, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, &v19, v3, v10, v11);
    v7 = v17;
    v19 = 1;
    v13 = sub_10003F974();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17;
    v15 = v18;
    sub_10001F728(v17, v18);
    sub_100037AF8(0, 0xF000000000000000);
    swift_bridgeObjectRetain(v7);
    sub_10001F728(v14, v15);
    sub_100037AF8(v14, v15);
    swift_bridgeObjectRelease(v7);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v7);
    sub_100037AF8(v14, v15);
  }
  return v7;
}

unint64_t sub_100103EFC()
{
  unint64_t result;

  result = qword_100263B40;
  if (!qword_100263B40)
  {
    result = swift_getWitnessTable(&unk_1001F64B0, &type metadata for FriendshipImportRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FriendshipImportRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100103F8C + 4 * byte_1001F6155[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100103FC0 + 4 * byte_1001F6150[v4]))();
}

uint64_t sub_100103FC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100103FC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100103FD0);
  return result;
}

uint64_t sub_100103FDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100103FE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100103FE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100103FF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportRequest.CodingKeys()
{
  return &type metadata for FriendshipImportRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FriendshipImportContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100104058 + 4 * byte_1001F615F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10010408C + 4 * byte_1001F615A[v4]))();
}

uint64_t sub_10010408C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010409CLL);
  return result;
}

uint64_t sub_1001040A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001040B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001040B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001040BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportContent.CodingKeys()
{
  return &type metadata for FriendshipImportContent.CodingKeys;
}

unint64_t sub_1001040DC()
{
  unint64_t result;

  result = qword_100263B50;
  if (!qword_100263B50)
  {
    result = swift_getWitnessTable(&unk_1001F63D0, &type metadata for FriendshipImportContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B50);
  }
  return result;
}

unint64_t sub_100104124()
{
  unint64_t result;

  result = qword_100263B58;
  if (!qword_100263B58)
  {
    result = swift_getWitnessTable(&unk_1001F6488, &type metadata for FriendshipImportRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B58);
  }
  return result;
}

unint64_t sub_10010416C()
{
  unint64_t result;

  result = qword_100263B60;
  if (!qword_100263B60)
  {
    result = swift_getWitnessTable(&unk_1001F63F8, &type metadata for FriendshipImportRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B60);
  }
  return result;
}

unint64_t sub_1001041B4()
{
  unint64_t result;

  result = qword_100263B68;
  if (!qword_100263B68)
  {
    result = swift_getWitnessTable(&unk_1001F6420, &type metadata for FriendshipImportRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B68);
  }
  return result;
}

unint64_t sub_1001041FC()
{
  unint64_t result;

  result = qword_100263B70;
  if (!qword_100263B70)
  {
    result = swift_getWitnessTable(&unk_1001F6340, &type metadata for FriendshipImportContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B70);
  }
  return result;
}

unint64_t sub_100104244()
{
  unint64_t result;

  result = qword_100263B78;
  if (!qword_100263B78)
  {
    result = swift_getWitnessTable(&unk_1001F6368, &type metadata for FriendshipImportContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263B78);
  }
  return result;
}

uint64_t sub_100104288(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10010440C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v4[227] = a4;
  v4[226] = a3;
  v4[225] = a2;
  v4[224] = a1;
  v5 = type metadata accessor for Handle(0);
  v4[228] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[229] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[230] = swift_task_alloc(v7);
  v4[231] = swift_task_alloc(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[232] = v8;
  *v8 = v4;
  v8[1] = sub_10010449C;
  return daemon.getter();
}

uint64_t sub_10010449C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1856);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1864) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1872) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100104584;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100104584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1872);
  v5 = *(_QWORD **)v2;
  v5[235] = a1;
  v5[236] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10010475C, 0, 0);
  swift_release(v5[233]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[237] = v7;
  *v7 = v5;
  v7[1] = sub_100104638;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_100104638()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1880);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1896));
  return swift_task_switch(sub_100104690, v1, 0);
}

uint64_t sub_100104690()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_1001047F8, 0, 0);
}

uint64_t sub_10010475C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 1848);
  v2 = *(_QWORD *)(v0 + 1840);
  v3 = *(_QWORD *)(v0 + 1816);
  v4 = *(_QWORD *)(v0 + 1808);
  v5 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 1864));
  swift_bridgeObjectRelease(v4);
  v6 = type metadata accessor for GroupID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  sub_100024990(v5, type metadata accessor for ClientContext);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001047F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, _QWORD, _QWORD);
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v45;
  uint64_t (*v46)(_QWORD, _QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1808);
  v2 = *(_QWORD *)(v0 + 1800);
  v3 = *(_QWORD *)(v0 + 1792);
  swift_release(*(_QWORD *)(v0 + 1880));
  sub_10000EF6C(v0 + 1312, v3, &qword_1002603B0);
  v4 = (int *)type metadata accessor for FriendshipStopOfferContent(0);
  v5 = sub_100025C70(v2, v3 + v4[5], type metadata accessor for ClientContext);
  v6 = GroupID.rawValue.getter(v5);
  v7 = (uint64_t *)(v3 + v4[6]);
  *v7 = v6;
  v7[1] = v8;
  v9 = *(_QWORD *)(v1 + 16);
  if (v9)
  {
    v45 = v4;
    v10 = *(_QWORD *)(v0 + 1832);
    v11 = *(_QWORD *)(v0 + 1808);
    sub_1000312EC(0, v9, 0);
    v12 = v11 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v13 = *(_QWORD *)(v10 + 72);
    v47 = v13;
    v48 = v10;
    v14 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v10 + 16);
    v15 = v9;
    v16 = v12;
    v46 = v14;
    while (1)
    {
      v17 = v14(*(_QWORD *)(v0 + 1848), v16, *(_QWORD *)(v0 + 1824));
      v18 = Handle.serverID.getter(v17);
      v20 = v19;
      v21 = *(_QWORD *)(v0 + 1848);
      v22 = *(_QWORD *)(v0 + 1824);
      if (!v20)
        break;
      v49 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v49(v21, v22);
      v23 = _swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_1000312EC(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v23 = _swiftEmptyArrayStorage;
      }
      v25 = _swiftEmptyArrayStorage[2];
      v24 = _swiftEmptyArrayStorage[3];
      if (v25 >= v24 >> 1)
      {
        sub_1000312EC(v24 > 1, v25 + 1, 1);
        v23 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v25 + 1;
      v26 = &_swiftEmptyArrayStorage[2 * v25];
      v26[4] = v18;
      v26[5] = v20;
      v14 = v46;
      v13 = v47;
      v16 += v47;
      if (!--v15)
        goto LABEL_12;
    }
    v49 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v49(v21, v22);
    swift_release(_swiftEmptyArrayStorage);
    v23 = 0;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v0 + 1792) + v45[7]) = v23;
    sub_1000312EC(0, v9, 0);
    do
    {
      v28 = *(_QWORD *)(v0 + 1840);
      v29 = *(_QWORD *)(v0 + 1824);
      v30 = v14(v28, v12, v29);
      v31 = Handle.identifier.getter(v30);
      v33 = v32;
      v49(v28, v29);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1000312EC(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v35 = _swiftEmptyArrayStorage[2];
      v34 = _swiftEmptyArrayStorage[3];
      if (v35 >= v34 >> 1)
        sub_1000312EC(v34 > 1, v35 + 1, 1);
      _swiftEmptyArrayStorage[2] = v35 + 1;
      v36 = &_swiftEmptyArrayStorage[2 * v35];
      v36[4] = v31;
      v36[5] = v33;
      v12 += v13;
      --v9;
    }
    while (v9);
    v27 = v45;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v0 + 1792) + v4[7]) = _swiftEmptyArrayStorage;
    v27 = v4;
  }
  v37 = *(_QWORD *)(v0 + 1848);
  v38 = *(_QWORD *)(v0 + 1840);
  v39 = *(_QWORD *)(v0 + 1816);
  v40 = *(_QWORD *)(v0 + 1808);
  v41 = *(_QWORD *)(v0 + 1800);
  v42 = *(_QWORD *)(v0 + 1792);
  v43 = type metadata accessor for GroupID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v39, v43);
  sub_100024990(v41, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v40);
  *(_QWORD *)(v42 + v27[8]) = _swiftEmptyArrayStorage;
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104B38(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  char v25;

  v24 = a5;
  v22 = a4;
  v9 = sub_100037A5C(&qword_100263C78);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v14);
  v15 = sub_100107F68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipStopOfferRequest.CodingKeys, &type metadata for FriendshipStopOfferRequest.CodingKeys, v15, v14, v13);
  v23[0] = a2;
  v25 = 0;
  v16 = sub_100037A5C(&qword_100261218);
  v17 = sub_10007581C(&qword_100261220, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v25, v9, v16, v17);
  if (!v5)
  {
    v18 = v24;
    v23[0] = a3;
    v23[1] = v22;
    v25 = 1;
    v19 = sub_10003F9B8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v25, v9, &type metadata for Data, v19);
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18 & 1, v23, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100104CDC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 2036625250;
  if (*v0 != 1)
    v1 = 0x6341726573557369;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_100104D3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100107B84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100104D60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100107F68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100104D88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100107F68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100104DB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_100107CDC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_100104DE4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100104B38(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100104E04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100107FAC();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100104E2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[20];
  _BYTE v25[168];
  char v26;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100263C50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100107B40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipStopOfferContent.CodingKeys, &type metadata for FriendshipStopOfferContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v25, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v25, (uint64_t)v24, &qword_1002603B0);
  v26 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v26, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for FriendshipStopOfferContent(0);
    v14 = v3 + v13[5];
    LOBYTE(v24[0]) = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v24, v5, v15, v16);
    v17 = (uint64_t *)(v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v24[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v24, v5);
    v24[0] = *(_QWORD *)(v3 + v13[7]);
    v26 = 3;
    v20 = sub_100037A5C(&qword_1002625F8);
    v21 = sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v23 = v20;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v26, v5, v20, v21);
    v24[0] = *(_QWORD *)(v3 + v13[8]);
    v26 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v26, v5, v23, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001050A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[20];
  _BYTE v37[160];
  _QWORD v38[21];
  char v39;
  char v40;

  v30 = a2;
  v31 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v31);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100037A5C(&qword_100263C60);
  v5 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FriendshipStopOfferContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v34 = a1;
  sub_100036228(a1, v11);
  v13 = sub_100107B40();
  v33 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipStopOfferContent.CodingKeys, &type metadata for FriendshipStopOfferContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v34);
  v15 = v4;
  v35 = v5;
  v16 = (uint64_t)v10;
  v40 = 0;
  v17 = sub_10002B9FC();
  v18 = v32;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &type metadata for ServerContext, &v40, v32, &type metadata for ServerContext, v17);
  sub_10000EF6C((uint64_t)v38, (uint64_t)v37, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v37, v16, &qword_1002603B0);
  LOBYTE(v36[0]) = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v31, v36, v18, v31, v19);
  sub_10003E4F4((uint64_t)v15, v16 + v8[5]);
  LOBYTE(v36[0]) = 2;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(v36, v18);
  v31 = 0;
  v21 = (uint64_t *)(v16 + v8[6]);
  *v21 = v20;
  v21[1] = v22;
  v23 = sub_100037A5C(&qword_1002625F8);
  v39 = 3;
  v24 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v25 = v18;
  v26 = v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, v23, &v39, v25, v23, v24);
  *(_QWORD *)(v16 + v8[7]) = v36[0];
  v39 = 4;
  v27 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v23, &v39, v32, v23, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v32);
  *(_QWORD *)(v16 + v8[8]) = v36[0];
  sub_100025C70(v16, v30, type metadata accessor for FriendshipStopOfferContent);
  sub_10002BB90(v34);
  return sub_100024990(v16, type metadata accessor for FriendshipStopOfferContent);
}

uint64_t sub_1001054F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100105530 + 4 * byte_1001F6570[*v0]))(0x6F43726576726573, 0xED0000747865746ELL);
}

uint64_t sub_100105530()
{
  return 0x6F43746E65696C63;
}

uint64_t sub_100105544()
{
  return 0x644970756F7267;
}

uint64_t sub_10010555C()
{
  return 0x6449646E65697266;
}

uint64_t sub_100105578()
{
  return 0x73656C646E6168;
}

uint64_t sub_100105590@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001083C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001055B4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1001055C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100107B40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001055E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100107B40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100105610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001050A4(a1, a2);
}

uint64_t sub_100105624(_QWORD *a1)
{
  return sub_100104E2C(a1);
}

uint64_t sub_100105638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ClientOrigin(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestOrigin(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GroupID(0);
  v3[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[16] = v11;
  v3[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipStopOfferContent(0);
  v3[18] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v13);
  v3[20] = swift_task_alloc(v13);
  v3[21] = swift_task_alloc(v13);
  v14 = type metadata accessor for Account(0);
  v3[22] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[23] = v15;
  v3[24] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v16);
  v3[26] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v17);
  v3[28] = swift_task_alloc(v17);
  v18 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v18);
  v3[30] = swift_task_alloc(v18);
  return swift_task_switch(sub_100105814, 0, 0);
}

uint64_t sub_100105814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v1 = v0[28];
  v2 = v0[26];
  v14 = v0[25];
  v15 = v0[27];
  v3 = v0[23];
  v4 = v0[24];
  v5 = v0[22];
  v7 = v0[12];
  v6 = v0[13];
  v8 = v0[3];
  v9 = sub_10003D638();
  v0[31] = v9;
  swift_bridgeObjectRetain(v9);
  v11 = FriendshipRequest.callerHandle.getter(v10);
  FriendshipRequest.origin.getter(v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v8, v5);
  sub_10000E37C(v2, v14, &qword_100260238);
  sub_10000E37C(v1, v15, &qword_1002650A0);
  v12 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[32] = v12;
  *v12 = v0;
  v12[1] = sub_100105920;
  return sub_100044CD8(v0[30], v0[24], v0[25], v0[27], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100105920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  sub_1000087A0(v2, &qword_100260238);
  sub_1000087A0(v1, &qword_1002650A0);
  return swift_task_switch(sub_10010599C, 0, 0);
}

uint64_t sub_10010599C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  v4 = sub_100025C70(v0[30], v0[29], type metadata accessor for ClientContext);
  v5 = FriendshipRequest.origin.getter(v4);
  v6 = FriendshipRequest.isFromGroup.getter(v5);
  v7 = v6;
  RequestOrigin.origin.getter(v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3) == enum case for ClientOrigin.messagesApp(_:))
  {
    if ((v7 & 1) != 0)
      v8 = (unsigned int *)&enum case for GroupID.group(_:);
    else
      v8 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[16] + 104))(v0[17], *v8, v0[15]);
  }
  else
  {
    v10 = v0[10];
    v9 = v0[11];
    v11 = v0[9];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[16] + 104))(v0[17], enum case for GroupID.oneToOne(_:), v0[15]);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(v0[13] + 8))(v0[14], v0[12]);
  v12 = (uint64_t **)swift_task_alloc(dword_100263B8C);
  v0[33] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = (uint64_t *)sub_100105AD8;
  return sub_10010440C(v0[21], v0[29], v0[4], v0[17]);
}

uint64_t sub_100105AD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 248));
    v4 = sub_100105F54;
  }
  else
  {
    v4 = sub_100105B44;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100105B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AD08);
  v4 = sub_100025C70(v2, v1, type metadata accessor for FriendshipStopOfferContent);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 160);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v49 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_100025C70(v8, v9, type metadata accessor for FriendshipStopOfferContent);
    v13 = String.init<A>(describing:)(v9, v10);
    v15 = v14;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v14, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_100024990(v8, type metadata accessor for FriendshipStopOfferContent);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request content: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 160), type metadata accessor for FriendshipStopOfferContent);
  }

  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD **)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 48);
  v22 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = JSONEncoder.init()();
  *v19 = sub_100055760;
  v19[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v19, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v19);
  v24 = sub_100004EA8(&qword_100263B90, type metadata accessor for FriendshipStopOfferContent, (uint64_t)&unk_1001F6720);
  v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(v17, v18, v24);
  v27 = v26;
  swift_release(v23);
  if (v16)
  {
    swift_errorRelease(v16);
    v25 = 0;
    v27 = 0xF000000000000000;
  }
  v28 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 248);
  v37 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 224);
  v39 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 184);
  v41 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 176);
  v43 = *(_QWORD *)(v0 + 160);
  v44 = *(_QWORD *)(v0 + 152);
  v45 = *(_QWORD *)(v0 + 136);
  v46 = *(_QWORD *)(v0 + 112);
  v47 = *(_QWORD *)(v0 + 88);
  v48 = *(_QWORD *)(v0 + 64);
  v33 = *(_QWORD *)(v0 + 40);
  v34 = *(_QWORD *)(v0 + 24);
  v35 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v33, v35);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v31);
  sub_100024990(v32, type metadata accessor for FriendshipStopOfferContent);
  sub_100024990(v28, type metadata accessor for ClientContext);
  sub_10001F728(v25, v27);
  sub_100037AF8(0, 0xF000000000000000);
  swift_bridgeObjectRetain(v29);
  sub_10001F728(v25, v27);
  sub_100037AF8(v25, v27);
  swift_bridgeObjectRelease_n(v29, 2);
  sub_100037AF8(v25, v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v32);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 248), v25, v27, 1);
}

uint64_t sub_100105F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v7);
  sub_100024990(v2, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  sub_100037AF8(0, 0xF000000000000000);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for FriendshipStopOfferContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100263BF0;
  if (!qword_100263BF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendshipStopOfferContent);
  return result;
}

_OWORD *sub_1001060EC(_OWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = a3[5];
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v94 = *(uint64_t *)((char *)a2 + v18 + 8);
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v94;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v92 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v92;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v88 = v20 + v26;
    v90 = &v19[v26];
    v96 = a3;
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v86 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v86(v90, v88, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v95 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v95;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v93 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v93;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v91 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v91;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v89 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v89;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v87 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v87;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v85 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v85;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v84 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v84;
    v54 = v25[23];
    v55 = &v19[v54];
    v56 = (_QWORD *)(v20 + v54);
    v83 = v56[1];
    *(_QWORD *)v55 = *v56;
    *((_QWORD *)v55 + 1) = v83;
    v57 = v25[24];
    v58 = &v19[v57];
    v59 = v20 + v57;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = *(_BYTE *)(v59 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v60 = v25[26];
    v61 = *(_QWORD *)(v20 + v60);
    *(_QWORD *)&v19[v60] = v61;
    v62 = v25[27];
    v63 = &v19[v62];
    v64 = (_QWORD *)(v20 + v62);
    v65 = v64[1];
    *(_QWORD *)v63 = *v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = v25[28];
    v67 = &v19[v66];
    v68 = (_QWORD *)(v20 + v66);
    v69 = v68[1];
    *(_QWORD *)v67 = *v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v25[29];
    v71 = &v19[v70];
    v72 = (_QWORD *)(v20 + v70);
    v73 = v72[1];
    *(_QWORD *)v71 = *v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v96[6];
    v75 = v96[7];
    v76 = (_QWORD *)((char *)v4 + v74);
    v77 = (uint64_t *)((char *)a2 + v74);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = *(uint64_t *)((char *)a2 + v75);
    *(_QWORD *)((char *)v4 + v75) = v79;
    v80 = v96[8];
    v81 = *(uint64_t *)((char *)a2 + v80);
    *(_QWORD *)((char *)v4 + v80) = v81;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v81);
  }
  return v4;
}

uint64_t sub_1001064E8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8]));
}

uint64_t sub_100106698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = a3[5];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v92 = *(_QWORD *)(a2 + v16 + 8);
  v94 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v92;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v90 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v90;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v86 = v18 + v24;
  v88 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v84(v88, v86, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v93 = v33[1];
  *v32 = *v33;
  v32[1] = v93;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v91 = v36[1];
  *v35 = *v36;
  v35[1] = v91;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v89 = v39[1];
  *v38 = *v39;
  v38[1] = v89;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v87 = v42[1];
  *v41 = *v42;
  v41[1] = v87;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v85 = v45[1];
  *v44 = *v45;
  v44[1] = v85;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v83 = v48[1];
  *v47 = *v48;
  v47[1] = v83;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v82 = v51[1];
  *v50 = *v51;
  v50[1] = v82;
  v52 = v23[23];
  v53 = (_QWORD *)(v17 + v52);
  v54 = (_QWORD *)(v18 + v52);
  v81 = v54[1];
  *v53 = *v54;
  v53[1] = v81;
  v55 = v23[24];
  v56 = v17 + v55;
  v57 = v18 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v58 = v23[26];
  v59 = *(_QWORD *)(v18 + v58);
  *(_QWORD *)(v17 + v58) = v59;
  v60 = v23[27];
  v61 = (_QWORD *)(v17 + v60);
  v62 = (_QWORD *)(v18 + v60);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  v64 = v23[28];
  v65 = (_QWORD *)(v17 + v64);
  v66 = (_QWORD *)(v18 + v64);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = v23[29];
  v69 = (_QWORD *)(v17 + v68);
  v70 = (_QWORD *)(v18 + v68);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = v94[6];
  v73 = v94[7];
  v74 = (_QWORD *)(a1 + v72);
  v75 = (_QWORD *)(a2 + v72);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = *(_QWORD *)(a2 + v73);
  *(_QWORD *)(a1 + v73) = v77;
  v78 = v94[8];
  v79 = *(_QWORD *)(a2 + v78);
  *(_QWORD *)(a1 + v78) = v79;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v79);
  return a1;
}

uint64_t sub_100106A64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = a3[5];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  v120 = a3[6];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[7];
  v126 = *(_QWORD *)(a1 + v125);
  v127 = *(_QWORD *)(a2 + v125);
  *(_QWORD *)(a1 + v125) = v127;
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease(v126);
  v128 = a3[8];
  v129 = *(_QWORD *)(a2 + v128);
  v130 = *(_QWORD *)(a1 + v128);
  *(_QWORD *)(a1 + v128) = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  return a1;
}

_OWORD *sub_10010709C(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  v23 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_10010727C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = a3[5];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = a3[6];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  v123 = a3[7];
  v124 = *(_QWORD *)(a1 + v123);
  *(_QWORD *)(a1 + v123) = *(_QWORD *)(a2 + v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[8];
  v126 = *(_QWORD *)(a1 + v125);
  *(_QWORD *)(a1 + v125) = *(_QWORD *)(a2 + v125);
  swift_bridgeObjectRelease(v126);
  return a1;
}

